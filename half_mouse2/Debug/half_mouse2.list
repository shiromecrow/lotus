
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024ce4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08024ec8  08024ec8  00034ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080257f8  080257f8  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  080257f8  080257f8  000357f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025800  08025800  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025800  08025800  00035800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025804  08025804  00035804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08025808  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fbe4  200001fc  08025a04  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fde0  08025a04  0004fde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027afc  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060ca  00000000  00000000  00067d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  0006ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0006fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028834  00000000  00000000  00071af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032233  00000000  00000000  0009a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb479  00000000  00000000  000cc557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b79d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b30  00000000  00000000  001b7a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08024eac 	.word	0x08024eac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08024eac 	.word	0x08024eac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f266666 	.word	0x3f266666
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <reset_speed+0x4c>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <reset_speed+0x50>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <reset_speed+0x54>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <reset_speed+0x58>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <reset_speed+0x5c>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <reset_speed+0x60>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <reset_speed+0x64>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <reset_speed+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <reset_speed+0x6c>)
 8001060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	2000024c 	.word	0x2000024c
 8001078:	20000238 	.word	0x20000238
 800107c:	2000023c 	.word	0x2000023c
 8001080:	20000258 	.word	0x20000258
 8001084:	2000025c 	.word	0x2000025c
 8001088:	20000260 	.word	0x20000260
 800108c:	3f266666 	.word	0x3f266666
 8001090:	20000264 	.word	0x20000264
 8001094:	00000000 	.word	0x00000000

08001098 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 80010a0:	4be5      	ldr	r3, [pc, #916]	; (8001438 <interupt_calEncoder+0x3a0>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4be5      	ldr	r3, [pc, #916]	; (800143c <interupt_calEncoder+0x3a4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001440 <interupt_calEncoder+0x3a8>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd07      	ble.n	80010d6 <interupt_calEncoder+0x3e>
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001444 <interupt_calEncoder+0x3ac>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001448 <interupt_calEncoder+0x3b0>
 80010de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d507      	bpl.n	80010f8 <interupt_calEncoder+0x60>
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001444 <interupt_calEncoder+0x3ac>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010f8:	4bd4      	ldr	r3, [pc, #848]	; (800144c <interupt_calEncoder+0x3b4>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <interupt_calEncoder+0x3b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eef1 7a67 	vneg.f32	s15, s15
 800110c:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001440 <interupt_calEncoder+0x3a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd07      	ble.n	8001132 <interupt_calEncoder+0x9a>
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001444 <interupt_calEncoder+0x3ac>
 800112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001448 <interupt_calEncoder+0x3b0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d507      	bpl.n	8001154 <interupt_calEncoder+0xbc>
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001444 <interupt_calEncoder+0x3ac>
 800114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001150:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa72 	bl	8000648 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001172:	f7ff fb93 	bl	800089c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a396      	add	r3, pc, #600	; (adr r3, 80013d8 <interupt_calEncoder+0x340>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa60 	bl	8000648 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a393      	add	r3, pc, #588	; (adr r3, 80013e0 <interupt_calEncoder+0x348>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a391      	add	r3, pc, #580	; (adr r3, 80013e8 <interupt_calEncoder+0x350>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa4e 	bl	8000648 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a38e      	add	r3, pc, #568	; (adr r3, 80013f0 <interupt_calEncoder+0x358>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb6f 	bl	800089c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4ba3      	ldr	r3, [pc, #652]	; (8001458 <interupt_calEncoder+0x3c0>)
 80011cc:	f7ff fa3c 	bl	8000648 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a387      	add	r3, pc, #540	; (adr r3, 80013f8 <interupt_calEncoder+0x360>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb5d 	bl	800089c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <interupt_calEncoder+0x3c4>)
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <interupt_calEncoder+0x3c8>)
 8001202:	f7ff fb4b 	bl	800089c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a37c      	add	r3, pc, #496	; (adr r3, 8001400 <interupt_calEncoder+0x368>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a379      	add	r3, pc, #484	; (adr r3, 8001408 <interupt_calEncoder+0x370>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <interupt_calEncoder+0x3cc>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b85      	ldr	r3, [pc, #532]	; (8001460 <interupt_calEncoder+0x3c8>)
 800124a:	f7ff fb27 	bl	800089c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125e:	f7ff fb1d 	bl	800089c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <interupt_calEncoder+0x3d0>)
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a364      	add	r3, pc, #400	; (adr r3, 8001410 <interupt_calEncoder+0x378>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fb0b 	bl	800089c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	a362      	add	r3, pc, #392	; (adr r3, 8001418 <interupt_calEncoder+0x380>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9d8 	bl	8000648 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4690      	mov	r8, r2
 800129e:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <interupt_calEncoder+0x3d4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f977 	bl	8000598 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <interupt_calEncoder+0x3b4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f970 	bl	8000598 <__aeabi_f2d>
 80012b8:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9c3 	bl	8000648 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012d0:	f7ff fae4 	bl	800089c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b17 	vmov	d7, r2, r3
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	f022 fb90 	bl	8023a08 <sin>
 80012e8:	ec51 0b10 	vmov	r0, r1, d0
 80012ec:	a34c      	add	r3, pc, #304	; (adr r3, 8001420 <interupt_calEncoder+0x388>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff f9a9 	bl	8000648 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4692      	mov	sl, r2
 80012fc:	469b      	mov	fp, r3
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <interupt_calEncoder+0x3b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f948 	bl	8000598 <__aeabi_f2d>
 8001308:	a331      	add	r3, pc, #196	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f99b 	bl	8000648 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001320:	f7ff fabc 	bl	800089c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	ec43 2b17 	vmov	d7, r2, r3
 800132c:	eeb0 0a47 	vmov.f32	s0, s14
 8001330:	eef0 0a67 	vmov.f32	s1, s15
 8001334:	f022 fb14 	bl	8023960 <cos>
 8001338:	ec51 0b10 	vmov	r0, r1, d0
 800133c:	a33a      	add	r3, pc, #232	; (adr r3, 8001428 <interupt_calEncoder+0x390>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4650      	mov	r0, sl
 800134c:	4659      	mov	r1, fp
 800134e:	f7fe ffc5 	bl	80002dc <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4692      	mov	sl, r2
 8001358:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <interupt_calEncoder+0x3b4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	a318      	add	r3, pc, #96	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f969 	bl	8000648 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001384:	f7ff fa8a 	bl	800089c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	ec43 2b17 	vmov	d7, r2, r3
 8001390:	eeb0 0a47 	vmov.f32	s0, s14
 8001394:	eef0 0a67 	vmov.f32	s1, s15
 8001398:	f022 fb36 	bl	8023a08 <sin>
 800139c:	ec51 0b10 	vmov	r0, r1, d0
 80013a0:	a323      	add	r3, pc, #140	; (adr r3, 8001430 <interupt_calEncoder+0x398>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f94f 	bl	8000648 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4650      	mov	r0, sl
 80013b0:	4659      	mov	r1, fp
 80013b2:	f7fe ff93 	bl	80002dc <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4692      	mov	sl, r2
 80013bc:	469b      	mov	fp, r3
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <interupt_calEncoder+0x3b4>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c8:	e052      	b.n	8001470 <interupt_calEncoder+0x3d8>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	4e70a65b 	.word	0x4e70a65b
 80013dc:	3f882f36 	.word	0x3f882f36
 80013e0:	a858793e 	.word	0xa858793e
 80013e4:	3ff1cd35 	.word	0x3ff1cd35
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4078c000 	.word	0x4078c000
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	4078fbae 	.word	0x4078fbae
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	4078efd7 	.word	0x4078efd7
 8001400:	00000000 	.word	0x00000000
 8001404:	4125eb2e 	.word	0x4125eb2e
 8001408:	33333333 	.word	0x33333333
 800140c:	4125f7be 	.word	0x4125f7be
 8001410:	d2f1a9fc 	.word	0xd2f1a9fc
 8001414:	3f50624d 	.word	0x3f50624d
 8001418:	d0353719 	.word	0xd0353719
 800141c:	409a862c 	.word	0x409a862c
 8001420:	aa14ef84 	.word	0xaa14ef84
 8001424:	400ca14f 	.word	0x400ca14f
 8001428:	74decf2e 	.word	0x74decf2e
 800142c:	c05a4d26 	.word	0xc05a4d26
 8001430:	19d7419b 	.word	0x19d7419b
 8001434:	c0710f5a 	.word	0xc0710f5a
 8001438:	200006e4 	.word	0x200006e4
 800143c:	20000218 	.word	0x20000218
 8001440:	43340000 	.word	0x43340000
 8001444:	43b40000 	.word	0x43b40000
 8001448:	c3340000 	.word	0xc3340000
 800144c:	200006e8 	.word	0x200006e8
 8001450:	2000021c 	.word	0x2000021c
 8001454:	40668000 	.word	0x40668000
 8001458:	40790000 	.word	0x40790000
 800145c:	40870800 	.word	0x40870800
 8001460:	40868000 	.word	0x40868000
 8001464:	40862000 	.word	0x40862000
 8001468:	408f4000 	.word	0x408f4000
 800146c:	20000264 	.word	0x20000264
 8001470:	ee17 0a90 	vmov	r0, s15
 8001474:	f7ff f890 	bl	8000598 <__aeabi_f2d>
 8001478:	a3d3      	add	r3, pc, #844	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8e3 	bl	8000648 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4be6      	ldr	r3, [pc, #920]	; (8001828 <interupt_calEncoder+0x790>)
 8001490:	f7ff fa04 	bl	800089c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f022 fa5c 	bl	8023960 <cos>
 80014a8:	ec51 0b10 	vmov	r0, r1, d0
 80014ac:	a3c2      	add	r3, pc, #776	; (adr r3, 80017b8 <interupt_calEncoder+0x720>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8c9 	bl	8000648 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4650      	mov	r0, sl
 80014bc:	4659      	mov	r1, fp
 80014be:	f7fe ff0d 	bl	80002dc <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f8bd 	bl	8000648 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a3ba      	add	r3, pc, #744	; (adr r3, 80017c0 <interupt_calEncoder+0x728>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fefe 	bl	80002dc <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f9d8 	bl	800089c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb80 	bl	8000bf8 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014fa:	4acc      	ldr	r2, [pc, #816]	; (800182c <interupt_calEncoder+0x794>)
 80014fc:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff f84a 	bl	8000598 <__aeabi_f2d>
 8001504:	a3b0      	add	r3, pc, #704	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f89d 	bl	8000648 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4bc3      	ldr	r3, [pc, #780]	; (8001828 <interupt_calEncoder+0x790>)
 800151c:	f7ff f9be 	bl	800089c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	a3a9      	add	r3, pc, #676	; (adr r3, 80017d0 <interupt_calEncoder+0x738>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f88b 	bl	8000648 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a3a7      	add	r3, pc, #668	; (adr r3, 80017d8 <interupt_calEncoder+0x740>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f882 	bl	8000648 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a3a4      	add	r3, pc, #656	; (adr r3, 80017e0 <interupt_calEncoder+0x748>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f879 	bl	8000648 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	a3a2      	add	r3, pc, #648	; (adr r3, 80017e8 <interupt_calEncoder+0x750>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f99a 	bl	800089c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4bae      	ldr	r3, [pc, #696]	; (8001830 <interupt_calEncoder+0x798>)
 8001576:	f7ff f867 	bl	8000648 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	a39b      	add	r3, pc, #620	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f988 	bl	800089c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4ba6      	ldr	r3, [pc, #664]	; (8001834 <interupt_calEncoder+0x79c>)
 800159a:	f7ff f855 	bl	8000648 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015ac:	f7ff f976 	bl	800089c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b9f      	ldr	r3, [pc, #636]	; (800183c <interupt_calEncoder+0x7a4>)
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015d0:	f7ff f964 	bl	800089c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e4:	f7ff f95a 	bl	800089c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <interupt_calEncoder+0x7a8>)
 80015f6:	f7ff f827 	bl	8000648 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a37d      	add	r3, pc, #500	; (adr r3, 80017f8 <interupt_calEncoder+0x760>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f948 	bl	800089c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a37a      	add	r3, pc, #488	; (adr r3, 8001800 <interupt_calEncoder+0x768>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f815 	bl	8000648 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4690      	mov	r8, r2
 8001624:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <interupt_calEncoder+0x7ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4604      	mov	r4, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a362      	add	r3, pc, #392	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b74      	ldr	r3, [pc, #464]	; (8001828 <interupt_calEncoder+0x790>)
 8001656:	f7ff f921 	bl	800089c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b17 	vmov	d7, r2, r3
 8001662:	eeb0 0a47 	vmov.f32	s0, s14
 8001666:	eef0 0a67 	vmov.f32	s1, s15
 800166a:	f022 f9cd 	bl	8023a08 <sin>
 800166e:	ec51 0b10 	vmov	r0, r1, d0
 8001672:	a365      	add	r3, pc, #404	; (adr r3, 8001808 <interupt_calEncoder+0x770>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffe6 	bl	8000648 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4692      	mov	sl, r2
 8001682:	469b      	mov	fp, r3
 8001684:	4b70      	ldr	r3, [pc, #448]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff85 	bl	8000598 <__aeabi_f2d>
 800168e:	a34e      	add	r3, pc, #312	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ffd8 	bl	8000648 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b60      	ldr	r3, [pc, #384]	; (8001828 <interupt_calEncoder+0x790>)
 80016a6:	f7ff f8f9 	bl	800089c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	ec43 2b17 	vmov	d7, r2, r3
 80016b2:	eeb0 0a47 	vmov.f32	s0, s14
 80016b6:	eef0 0a67 	vmov.f32	s1, s15
 80016ba:	f022 f951 	bl	8023960 <cos>
 80016be:	ec51 0b10 	vmov	r0, r1, d0
 80016c2:	a353      	add	r3, pc, #332	; (adr r3, 8001810 <interupt_calEncoder+0x778>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ffbe 	bl	8000648 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4650      	mov	r0, sl
 80016d2:	4659      	mov	r1, fp
 80016d4:	f7fe fe02 	bl	80002dc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4692      	mov	sl, r2
 80016de:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <interupt_calEncoder+0x7b0>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7fe ff53 	bl	8000598 <__aeabi_f2d>
 80016f2:	a335      	add	r3, pc, #212	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ffa6 	bl	8000648 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <interupt_calEncoder+0x790>)
 800170a:	f7ff f8c7 	bl	800089c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b17 	vmov	d7, r2, r3
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	eef0 0a67 	vmov.f32	s1, s15
 800171e:	f022 f973 	bl	8023a08 <sin>
 8001722:	ec51 0b10 	vmov	r0, r1, d0
 8001726:	a33c      	add	r3, pc, #240	; (adr r3, 8001818 <interupt_calEncoder+0x780>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff8c 	bl	8000648 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4650      	mov	r0, sl
 8001736:	4659      	mov	r1, fp
 8001738:	f7fe fdd0 	bl	80002dc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4692      	mov	sl, r2
 8001742:	469b      	mov	fp, r3
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174e:	ee17 0a90 	vmov	r0, s15
 8001752:	f7fe ff21 	bl	8000598 <__aeabi_f2d>
 8001756:	a31c      	add	r3, pc, #112	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <interupt_calEncoder+0x790>)
 800176e:	f7ff f895 	bl	800089c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b17 	vmov	d7, r2, r3
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f022 f8ed 	bl	8023960 <cos>
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	a325      	add	r3, pc, #148	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff5a 	bl	8000648 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4650      	mov	r0, sl
 800179a:	4659      	mov	r1, fp
 800179c:	f7fe fd9e 	bl	80002dc <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe ff4e 	bl	8000648 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	e04a      	b.n	800184c <interupt_calEncoder+0x7b4>
 80017b6:	bf00      	nop
 80017b8:	a96b73c1 	.word	0xa96b73c1
 80017bc:	4058baae 	.word	0x4058baae
 80017c0:	d0353719 	.word	0xd0353719
 80017c4:	409a862c 	.word	0x409a862c
 80017c8:	54411744 	.word	0x54411744
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	4e70a65b 	.word	0x4e70a65b
 80017d4:	3f882f36 	.word	0x3f882f36
 80017d8:	a858793e 	.word	0xa858793e
 80017dc:	3ff1cd35 	.word	0x3ff1cd35
 80017e0:	00000000 	.word	0x00000000
 80017e4:	4078c000 	.word	0x4078c000
 80017e8:	147ae148 	.word	0x147ae148
 80017ec:	4078fbae 	.word	0x4078fbae
 80017f0:	5c28f5c3 	.word	0x5c28f5c3
 80017f4:	40792a8f 	.word	0x40792a8f
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	11d3671b 	.word	0x11d3671b
 8001804:	409c0a10 	.word	0x409c0a10
 8001808:	27aee802 	.word	0x27aee802
 800180c:	c0234be5 	.word	0xc0234be5
 8001810:	578a2a91 	.word	0x578a2a91
 8001814:	405f0f59 	.word	0x405f0f59
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	404d0ccc 	.word	0x404d0ccc
 8001820:	45e8419d 	.word	0x45e8419d
 8001824:	4075ef32 	.word	0x4075ef32
 8001828:	40668000 	.word	0x40668000
 800182c:	20000228 	.word	0x20000228
 8001830:	40790000 	.word	0x40790000
 8001834:	40870800 	.word	0x40870800
 8001838:	40868000 	.word	0x40868000
 800183c:	40862000 	.word	0x40862000
 8001840:	408f4000 	.word	0x408f4000
 8001844:	20000264 	.word	0x20000264
 8001848:	200006e4 	.word	0x200006e4
 800184c:	a33a      	add	r3, pc, #232	; (adr r3, 8001938 <interupt_calEncoder+0x8a0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fd43 	bl	80002dc <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f7ff f81d 	bl	800089c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <interupt_calEncoder+0x880>)
 8001872:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <interupt_calEncoder+0x884>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe8d 	bl	8000598 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <interupt_calEncoder+0x888>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe86 	bl	8000598 <__aeabi_f2d>
 800188c:	a320      	add	r3, pc, #128	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <interupt_calEncoder+0x884>)
 80018b2:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <interupt_calEncoder+0x88c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <interupt_calEncoder+0x880>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe66 	bl	8000598 <__aeabi_f2d>
 80018cc:	a310      	add	r3, pc, #64	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe feb9 	bl	8000648 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fcfd 	bl	80002dc <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f985 	bl	8000bf8 <__aeabi_d2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <interupt_calEncoder+0x88c>)
 80018f2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <interupt_calEncoder+0x890>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <interupt_calEncoder+0x894>)
 80018fa:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <interupt_calEncoder+0x898>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <interupt_calEncoder+0x89c>)
 8001902:	6013      	str	r3, [r2, #0]

}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	d2f1a9fc 	.word	0xd2f1a9fc
 8001914:	3f50624d 	.word	0x3f50624d
 8001918:	2000022c 	.word	0x2000022c
 800191c:	20000220 	.word	0x20000220
 8001920:	20000228 	.word	0x20000228
 8001924:	20000224 	.word	0x20000224
 8001928:	200006e8 	.word	0x200006e8
 800192c:	2000021c 	.word	0x2000021c
 8001930:	200006e4 	.word	0x200006e4
 8001934:	20000218 	.word	0x20000218
 8001938:	11d3671b 	.word	0x11d3671b
 800193c:	409c0a10 	.word	0x409c0a10

08001940 <interupt_calFusion>:


void interupt_calFusion(void) {
 8001940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001944:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 8001946:	4ba4      	ldr	r3, [pc, #656]	; (8001bd8 <interupt_calFusion+0x298>)
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	4ba3      	ldr	r3, [pc, #652]	; (8001bdc <interupt_calFusion+0x29c>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	4ba0      	ldr	r3, [pc, #640]	; (8001bd8 <interupt_calFusion+0x298>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001960:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <interupt_calFusion+0x29c>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001978:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <interupt_calFusion+0x298>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <interupt_calFusion+0x2a4>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <interupt_calFusion+0x298>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001992:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001996:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <interupt_calFusion+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdf2 	bl	8000598 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interupt_calFusion+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	a383      	add	r3, pc, #524	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe3e 	bl	8000648 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc82 	bl	80002dc <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f90a 	bl	8000bf8 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <interupt_calFusion+0x2ac>)
 80019e8:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <interupt_calFusion+0x2b0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdd2 	bl	8000598 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	a373      	add	r3, pc, #460	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe1e 	bl	8000648 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc62 	bl	80002dc <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8ea 	bl	8000bf8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <interupt_calFusion+0x2b0>)
 8001a28:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001a2a:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdb2 	bl	8000598 <__aeabi_f2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fdab 	bl	8000598 <__aeabi_f2d>
 8001a42:	4680      	mov	r8, r0
 8001a44:	4689      	mov	r9, r1
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fda4 	bl	8000598 <__aeabi_f2d>
 8001a50:	a35f      	add	r3, pc, #380	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdf7 	bl	8000648 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f7fe fc3b 	bl	80002dc <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fdeb 	bl	8000648 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd7f 	bl	8000598 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc1b 	bl	80002dc <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f8a3 	bl	8000bf8 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ab6:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <interupt_calFusion+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd6b 	bl	8000598 <__aeabi_f2d>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	4689      	mov	r9, r1
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd5d 	bl	8000598 <__aeabi_f2d>
 8001ade:	a33c      	add	r3, pc, #240	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fdb0 	bl	8000648 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe fbf4 	bl	80002dc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fda4 	bl	8000648 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <interupt_calFusion+0x298>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fd38 	bl	8000598 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b44:	6013      	str	r3, [r2, #0]
//	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedL = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedL;
//	fusion_speedR = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedR;
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a31c      	add	r3, pc, #112	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b84:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcfd 	bl	8000598 <__aeabi_f2d>
 8001b9e:	a30c      	add	r3, pc, #48	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd50 	bl	8000648 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb94 	bl	80002dc <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff f81c 	bl	8000bf8 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001bc4:	6013      	str	r3, [r2, #0]

}
 8001bc6:	bf00      	nop
 8001bc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	20000260 	.word	0x20000260
 8001bdc:	20000238 	.word	0x20000238
 8001be0:	20000228 	.word	0x20000228
 8001be4:	2000023c 	.word	0x2000023c
 8001be8:	2000022c 	.word	0x2000022c
 8001bec:	20000230 	.word	0x20000230
 8001bf0:	20000234 	.word	0x20000234
 8001bf4:	20000258 	.word	0x20000258
 8001bf8:	20000284 	.word	0x20000284
 8001bfc:	2000025c 	.word	0x2000025c
 8001c00:	20000250 	.word	0x20000250
 8001c04:	20000254 	.word	0x20000254

08001c08 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	int s = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <reset_gyro+0xfc>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <reset_gyro+0x100>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001c22:	2301      	movs	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e026      	b.n	8001c76 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <reset_gyro+0x104>)
 8001c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <reset_gyro+0x100>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <reset_gyro+0x100>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <reset_gyro+0x104>)
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <reset_gyro+0x108>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <reset_gyro+0x108>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <reset_gyro+0x104>)
 8001c56:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <reset_gyro+0x10c>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <reset_gyro+0x10c>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f006 ffbc 	bl	8008be8 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7c:	ddd4      	ble.n	8001c28 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <reset_gyro+0x100>)
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001d18 <reset_gyro+0x110>
 8001c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <reset_gyro+0x100>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <reset_gyro+0x108>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001d18 <reset_gyro+0x110>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <reset_gyro+0x108>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <reset_gyro+0x10c>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001d18 <reset_gyro+0x110>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <reset_gyro+0x10c>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <reset_gyro+0xfc>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <reset_gyro+0x114>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <reset_gyro+0x118>)
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <reset_gyro+0x11c>)
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e009      	b.n	8001cf4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <reset_gyro+0x120>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	ddf2      	ble.n	8001ce0 <reset_gyro+0xd8>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000268 	.word	0x20000268
 8001d08:	2000028c 	.word	0x2000028c
 8001d0c:	200006f0 	.word	0x200006f0
 8001d10:	20000288 	.word	0x20000288
 8001d14:	20000290 	.word	0x20000290
 8001d18:	447a0000 	.word	0x447a0000
 8001d1c:	20000270 	.word	0x20000270
 8001d20:	2000027c 	.word	0x2000027c
 8001d24:	20000280 	.word	0x20000280
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	00000000 	.word	0x00000000

08001d30 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	int j = 9;
 8001d36:	2309      	movs	r3, #9
 8001d38:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	e00d      	b.n	8001d5c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4ab0      	ldr	r2, [pc, #704]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	49ae      	ldr	r1, [pc, #696]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dcee      	bgt.n	8001d40 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d62:	4baa      	ldr	r3, [pc, #680]	; (800200c <interrupt_calGyro+0x2dc>)
 8001d64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <interrupt_calGyro+0x2e0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fc0f 	bl	8000598 <__aeabi_f2d>
 8001d7a:	a391      	add	r3, pc, #580	; (adr r3, 8001fc0 <interrupt_calGyro+0x290>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc62 	bl	8000648 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	a38e      	add	r3, pc, #568	; (adr r3, 8001fc8 <interrupt_calGyro+0x298>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc59 	bl	8000648 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	a38c      	add	r3, pc, #560	; (adr r3, 8001fd0 <interrupt_calGyro+0x2a0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fd7a 	bl	800089c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff22 	bl	8000bf8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a94      	ldr	r2, [pc, #592]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001db8:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a95      	ldr	r2, [pc, #596]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001dc0:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <interrupt_calGyro+0x2e8>)
 8001dc8:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001dca:	4b90      	ldr	r3, [pc, #576]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <interrupt_calGyro+0x2ec>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <interrupt_calGyro+0x2f0>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
	angle += INTERRUPT_TIME * angle_speed; //deg
 8001de0:	4b90      	ldr	r3, [pc, #576]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbd7 	bl	8000598 <__aeabi_f2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbd0 	bl	8000598 <__aeabi_f2d>
 8001df8:	a377      	add	r3, pc, #476	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc23 	bl	8000648 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa67 	bl	80002dc <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a81      	ldr	r2, [pc, #516]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001e1e:	6013      	str	r3, [r2, #0]
	anglex += INTERRUPT_TIME * (gyro.omega_x - omegaX_offset); //deg
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbb7 	bl	8000598 <__aeabi_f2d>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4b77      	ldr	r3, [pc, #476]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b79      	ldr	r3, [pc, #484]	; (800201c <interrupt_calGyro+0x2ec>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fba9 	bl	8000598 <__aeabi_f2d>
 8001e46:	a364      	add	r3, pc, #400	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbfc 	bl	8000648 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa40 	bl	80002dc <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fec8 	bl	8000bf8 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e6c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e70:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <interrupt_calGyro+0x2fc>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	ee17 0a90 	vmov	r0, s15
 8001e82:	f7fe fb89 	bl	8000598 <__aeabi_f2d>
 8001e86:	a356      	add	r3, pc, #344	; (adr r3, 8001fe0 <interrupt_calGyro+0x2b0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbdc 	bl	8000648 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	a353      	add	r3, pc, #332	; (adr r3, 8001fe8 <interrupt_calGyro+0x2b8>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbd3 	bl	8000648 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	a351      	add	r3, pc, #324	; (adr r3, 8001ff0 <interrupt_calGyro+0x2c0>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fcf4 	bl	800089c <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <interrupt_calGyro+0x300>)
 8001ec2:	f7fe fbc1 	bl	8000648 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a34a      	add	r3, pc, #296	; (adr r3, 8001ff8 <interrupt_calGyro+0x2c8>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fce2 	bl	800089c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <interrupt_calGyro+0x304>)
 8001ee6:	f7fe fbaf 	bl	8000648 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <interrupt_calGyro+0x308>)
 8001ef8:	f7fe fcd0 	bl	800089c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <interrupt_calGyro+0x30c>)
 8001f0a:	f7fe fb9d 	bl	8000648 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	a33a      	add	r3, pc, #232	; (adr r3, 8002000 <interrupt_calGyro+0x2d0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fe66 	bl	8000bf8 <__aeabi_d2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <interrupt_calGyro+0x310>)
 8001f30:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <interrupt_calGyro+0x314>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb2e 	bl	8000598 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <interrupt_calGyro+0x310>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	a323      	add	r3, pc, #140	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fb7a 	bl	8000648 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f9be 	bl	80002dc <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fe46 	bl	8000bf8 <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <interrupt_calGyro+0x314>)
 8001f70:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <interrupt_calGyro+0x318>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fb0e 	bl	8000598 <__aeabi_f2d>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <interrupt_calGyro+0x314>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb07 	bl	8000598 <__aeabi_f2d>
 8001f8a:	a313      	add	r3, pc, #76	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb5a 	bl	8000648 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f99e 	bl	80002dc <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fe26 	bl	8000bf8 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <interrupt_calGyro+0x318>)
 8001fb0:	6013      	str	r3, [r2, #0]




}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	70a3d70a 	.word	0x70a3d70a
 8001fc4:	3fef0a3d 	.word	0x3fef0a3d
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40acd400 	.word	0x40acd400
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40ac2000 	.word	0x40ac2000
 8001fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fdc:	3f50624d 	.word	0x3f50624d
 8001fe0:	0fcf80dc 	.word	0x0fcf80dc
 8001fe4:	3ff0a423 	.word	0x3ff0a423
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	4078c000 	.word	0x4078c000
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	4077d000 	.word	0x4077d000
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	407a7000 	.word	0x407a7000
 8002000:	3a92a305 	.word	0x3a92a305
 8002004:	40239d01 	.word	0x40239d01
 8002008:	20000294 	.word	0x20000294
 800200c:	200006f0 	.word	0x200006f0
 8002010:	2000028c 	.word	0x2000028c
 8002014:	2000026c 	.word	0x2000026c
 8002018:	20000274 	.word	0x20000274
 800201c:	20000288 	.word	0x20000288
 8002020:	20000278 	.word	0x20000278
 8002024:	20000268 	.word	0x20000268
 8002028:	20000270 	.word	0x20000270
 800202c:	20000290 	.word	0x20000290
 8002030:	40790000 	.word	0x40790000
 8002034:	40862000 	.word	0x40862000
 8002038:	40868000 	.word	0x40868000
 800203c:	408f4000 	.word	0x408f4000
 8002040:	20000284 	.word	0x20000284
 8002044:	2000027c 	.word	0x2000027c
 8002048:	20000280 	.word	0x20000280
 800204c:	00000000 	.word	0x00000000

08002050 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00f      	b.n	800207c <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 800205c:	f006 fb68 	bl	8008730 <pl_getbatt>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <battcheak+0xe8>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8002070:	200a      	movs	r0, #10
 8002072:	f006 fd75 	bl	8008b60 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b13      	cmp	r3, #19
 8002080:	ddec      	ble.n	800205c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <battcheak+0xec>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e010      	b.n	80020b2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <battcheak+0xe8>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <battcheak+0xec>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <battcheak+0xec>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b13      	cmp	r3, #19
 80020b6:	ddeb      	ble.n	8002090 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <battcheak+0xec>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <battcheak+0xec>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <battcheak+0xec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa61 	bl	8000598 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4819      	ldr	r0, [pc, #100]	; (8002140 <battcheak+0xf0>)
 80020dc:	f01f fa34 	bl	8021548 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <battcheak+0xec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa57 	bl	8000598 <__aeabi_f2d>
 80020ea:	a311      	add	r3, pc, #68	; (adr r3, 8002130 <battcheak+0xe0>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fd26 	bl	8000b40 <__aeabi_dcmple>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 80020fa:	e014      	b.n	8002126 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f005 fdb3 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002102:	2001      	movs	r0, #1
 8002104:	f005 fdc2 	bl	8007c8c <pl_l_blue_LED>
		wait_ms(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210c:	f006 fd28 	bl	8008b60 <wait_ms>
		pl_r_blue_LED(OFF);
 8002110:	2000      	movs	r0, #0
 8002112:	f005 fda9 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002116:	2000      	movs	r0, #0
 8002118:	f005 fdb8 	bl	8007c8c <pl_l_blue_LED>
		wait_ms(500);
 800211c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002120:	f006 fd1e 	bl	8008b60 <wait_ms>
		pl_r_blue_LED(ON);
 8002124:	e7ea      	b.n	80020fc <battcheak+0xac>
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	9999999a 	.word	0x9999999a
 8002134:	400d9999 	.word	0x400d9999
 8002138:	20000488 	.word	0x20000488
 800213c:	200004d8 	.word	0x200004d8
 8002140:	08024ec8 	.word	0x08024ec8

08002144 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 800214a:	f006 fc8f 	bl	8008a6c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 800214e:	2313      	movs	r3, #19
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e037      	b.n	80021c4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <interupt_calSensor+0x170>)
 800215a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800215e:	4955      	ldr	r1, [pc, #340]	; (80022b4 <interupt_calSensor+0x170>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <interupt_calSensor+0x170>)
 800216c:	3314      	adds	r3, #20
 800216e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <interupt_calSensor+0x170>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3314      	adds	r3, #20
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <interupt_calSensor+0x170>)
 8002182:	3328      	adds	r3, #40	; 0x28
 8002184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002188:	494a      	ldr	r1, [pc, #296]	; (80022b4 <interupt_calSensor+0x170>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3328      	adds	r3, #40	; 0x28
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3b01      	subs	r3, #1
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <interupt_calSensor+0x170>)
 8002198:	333c      	adds	r3, #60	; 0x3c
 800219a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800219e:	4945      	ldr	r1, [pc, #276]	; (80022b4 <interupt_calSensor+0x170>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <interupt_calSensor+0x170>)
 80021ae:	3350      	adds	r3, #80	; 0x50
 80021b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021b4:	493f      	ldr	r1, [pc, #252]	; (80022b4 <interupt_calSensor+0x170>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3350      	adds	r3, #80	; 0x50
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dcc4      	bgt.n	8002154 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <interupt_calSensor+0x174>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <interupt_calSensor+0x178>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <interupt_calSensor+0x170>)
 80021d8:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <interupt_calSensor+0x174>)
 80021dc:	885b      	ldrh	r3, [r3, #2]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <interupt_calSensor+0x178>)
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <interupt_calSensor+0x170>)
 80021e8:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <interupt_calSensor+0x174>)
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <interupt_calSensor+0x178>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a2f      	ldr	r2, [pc, #188]	; (80022b4 <interupt_calSensor+0x170>)
 80021f8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <interupt_calSensor+0x174>)
 80021fe:	88db      	ldrh	r3, [r3, #6]
 8002200:	461a      	mov	r2, r3
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <interupt_calSensor+0x178>)
 8002204:	88db      	ldrh	r3, [r3, #6]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <interupt_calSensor+0x170>)
 800220a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <interupt_calSensor+0x174>)
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	461a      	mov	r2, r3
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <interupt_calSensor+0x178>)
 8002216:	891b      	ldrh	r3, [r3, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <interupt_calSensor+0x170>)
 800221c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	e03d      	b.n	80022a2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8002226:	4923      	ldr	r1, [pc, #140]	; (80022b4 <interupt_calSensor+0x170>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <interupt_calSensor+0x170>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4403      	add	r3, r0
 8002244:	332c      	adds	r3, #44	; 0x2c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1aca      	subs	r2, r1, r3
 800224a:	491d      	ldr	r1, [pc, #116]	; (80022c0 <interupt_calSensor+0x17c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8002252:	4918      	ldr	r1, [pc, #96]	; (80022b4 <interupt_calSensor+0x170>)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	440b      	add	r3, r1
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <interupt_calSensor+0x170>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4403      	add	r3, r0
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4419      	add	r1, r3
 8002276:	480f      	ldr	r0, [pc, #60]	; (80022b4 <interupt_calSensor+0x170>)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4403      	add	r3, r0
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	440b      	add	r3, r1
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <interupt_calSensor+0x180>)
 800228c:	fb82 1203 	smull	r1, r2, r2, r3
 8002290:	17db      	asrs	r3, r3, #31
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <interupt_calSensor+0x184>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	ddbe      	ble.n	8002226 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002bc 	.word	0x200002bc
 80022b8:	20000718 	.word	0x20000718
 80022bc:	20000724 	.word	0x20000724
 80022c0:	2000044c 	.word	0x2000044c
 80022c4:	55555556 	.word	0x55555556
 80022c8:	20000474 	.word	0x20000474

080022cc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

	modeacc = 0;
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <Control_mode_Init+0x28>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <Control_mode_Init+0x2c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <Control_mode_Init+0x30>)
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <Control_mode_Init+0x34>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000534 	.word	0x20000534
 80022f8:	20000811 	.word	0x20000811
 80022fc:	2000080c 	.word	0x2000080c
 8002300:	20000535 	.word	0x20000535

08002304 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	ed87 0a03 	vstr	s0, [r7, #12]
 800230e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	db14      	blt.n	800234e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8002324:	2001      	movs	r0, #1
 8002326:	f006 f939 	bl	800859c <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <get_duty+0x11c>)
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	edd7 6a03 	vldr	s13, [r7, #12]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002424 <get_duty+0x120>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e015      	b.n	800237a <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 800234e:	2002      	movs	r0, #2
 8002350:	f006 f924 	bl	800859c <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8002354:	edd7 7a03 	vldr	s15, [r7, #12]
 8002358:	eef1 6a67 	vneg.f32	s13, s15
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <get_duty+0x11c>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002424 <get_duty+0x120>
 800236a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002372:	ee17 2a90 	vmov	r2, s15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 800237a:	edd7 7a02 	vldr	s15, [r7, #8]
 800237e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db14      	blt.n	80023b2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002388:	2001      	movs	r0, #1
 800238a:	f006 f92f 	bl	80085ec <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <get_duty+0x11c>)
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	edd7 6a02 	vldr	s13, [r7, #8]
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002424 <get_duty+0x120>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 2a90 	vmov	r2, s15
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e015      	b.n	80023de <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f006 f91a 	bl	80085ec <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 80023b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023bc:	eef1 6a67 	vneg.f32	s13, s15
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <get_duty+0x11c>)
 80023c2:	ed93 7a00 	vldr	s14, [r3]
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002424 <get_duty+0x120>
 80023ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 2a90 	vmov	r2, s15
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f240 628c 	movw	r2, #1676	; 0x68c
 80023f6:	4293      	cmp	r3, r2
 80023f8:	dd03      	ble.n	8002402 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f240 628d 	movw	r2, #1677	; 0x68d
 8002400:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f240 628c 	movw	r2, #1676	; 0x68c
 800240a:	4293      	cmp	r3, r2
 800240c:	dd03      	ble.n	8002416 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f240 628d 	movw	r2, #1677	; 0x68d
 8002414:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200004d8 	.word	0x200004d8
 8002424:	44d1e000 	.word	0x44d1e000

08002428 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242c:	b08e      	sub	sp, #56	; 0x38
 800242e:	af04      	add	r7, sp, #16
	int duty_L=0, duty_R=0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8002456:	4bd2      	ldr	r3, [pc, #840]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 800245e:	4bd1      	ldr	r3, [pc, #836]	; (80027a4 <interupt_DriveMotor+0x37c>)
 8002460:	2204      	movs	r2, #4
 8002462:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8002464:	4bd0      	ldr	r3, [pc, #832]	; (80027a8 <interupt_DriveMotor+0x380>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 800246a:	4bd0      	ldr	r3, [pc, #832]	; (80027ac <interupt_DriveMotor+0x384>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002470:	4bcb      	ldr	r3, [pc, #812]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8293 	bne.w	80029a0 <interupt_DriveMotor+0x578>
		g_wallCut_mode=1;
 800247a:	4bcc      	ldr	r3, [pc, #816]	; (80027ac <interupt_DriveMotor+0x384>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002480:	4bcb      	ldr	r3, [pc, #812]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	4aca      	ldr	r2, [pc, #808]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002488:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800248a:	4bca      	ldr	r3, [pc, #808]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f882 	bl	8000598 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	4bc6      	ldr	r3, [pc, #792]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f87b 	bl	8000598 <__aeabi_f2d>
 80024a2:	a3bb      	add	r3, pc, #748	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f8ce 	bl	8000648 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4bbf      	ldr	r3, [pc, #764]	; (80027b4 <interupt_DriveMotor+0x38c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f86d 	bl	8000598 <__aeabi_f2d>
 80024be:	a3b4      	add	r3, pc, #720	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f8c0 	bl	8000648 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	a3af      	add	r3, pc, #700	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f8b7 	bl	8000648 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ea:	f7fe f9d7 	bl	800089c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fd fef1 	bl	80002dc <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd feeb 	bl	80002dc <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb73 	bl	8000bf8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4aa7      	ldr	r2, [pc, #668]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002516:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f83b 	bl	8000598 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4ba3      	ldr	r3, [pc, #652]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f834 	bl	8000598 <__aeabi_f2d>
 8002530:	a397      	add	r3, pc, #604	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f887 	bl	8000648 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fd fecb 	bl	80002dc <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb53 	bl	8000bf8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a97      	ldr	r2, [pc, #604]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002556:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002558:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <interupt_DriveMotor+0x390>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f81b 	bl	8000598 <__aeabi_f2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	a387      	add	r3, pc, #540	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f867 	bl	8000648 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4690      	mov	r8, r2
 8002580:	4699      	mov	r9, r3
 8002582:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	a380      	add	r3, pc, #512	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fe f859 	bl	8000648 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	a37c      	add	r3, pc, #496	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f850 	bl	8000648 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	f7fe f970 	bl	800089c <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4640      	mov	r0, r8
 80025c2:	4649      	mov	r1, r9
 80025c4:	f7fd fe8a 	bl	80002dc <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fd fe84 	bl	80002dc <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb0c 	bl	8000bf8 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e4:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025e6:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffd4 	bl	8000598 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffcd 	bl	8000598 <__aeabi_f2d>
 80025fe:	a364      	add	r3, pc, #400	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd fe64 	bl	80002dc <__adddf3>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe faec 	bl	8000bf8 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002624:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <interupt_DriveMotor+0x394>)
 8002628:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800262a:	9202      	str	r2, [sp, #8]
 800262c:	466c      	mov	r4, sp
 800262e:	f103 0210 	add.w	r2, r3, #16
 8002632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002636:	e884 0003 	stmia.w	r4, {r0, r1}
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	f006 fc8e 	bl	8008f5c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	eef0 0a47 	vmov.f32	s1, s14
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fe26 	bl	80052b0 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <interupt_DriveMotor+0x398>)
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <interupt_DriveMotor+0x39c>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002678:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800267e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <interupt_DriveMotor+0x3a0>)
 8002684:	edd3 6a00 	vldr	s13, [r3]
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <interupt_DriveMotor+0x390>)
 800268a:	ed93 6a01 	vldr	s12, [r3, #4]
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	eef0 1a46 	vmov.f32	s3, s12
 8002698:	eeb0 1a66 	vmov.f32	s2, s13
 800269c:	4611      	mov	r1, r2
 800269e:	eef0 0a67 	vmov.f32	s1, s15
 80026a2:	eeb0 0a47 	vmov.f32	s0, s14
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fb56 	bl	8004d58 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80026ac:	f003 f818 	bl	80056e0 <calWallConrol>
 80026b0:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80026b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80026dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002704:	ed97 7a04 	vldr	s14, [r7, #16]
 8002708:	edd7 7a02 	vldr	s15, [r7, #8]
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff40 	bl	8000598 <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <interupt_DriveMotor+0x3a4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd ff39 	bl	8000598 <__aeabi_f2d>
 8002726:	a31c      	add	r3, pc, #112	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff8c 	bl	8000648 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fe fa16 	bl	8000b68 <__aeabi_dcmpgt>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808c 	beq.w	800285c <interupt_DriveMotor+0x434>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	4604      	mov	r4, r0
 800274c:	460d      	mov	r5, r1
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <interupt_DriveMotor+0x3a4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd ff20 	bl	8000598 <__aeabi_f2d>
 8002758:	a30f      	add	r3, pc, #60	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff73 	bl	8000648 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4690      	mov	r8, r2
 8002768:	4699      	mov	r9, r3
 800276a:	ed97 7a04 	vldr	s14, [r7, #16]
 800276e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	ee17 0a90 	vmov	r0, s15
 800277a:	f7fd ff0d 	bl	8000598 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4640      	mov	r0, r8
 8002784:	4649      	mov	r1, r9
 8002786:	f7fd fda7 	bl	80002d8 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	e01f      	b.n	80027d0 <interupt_DriveMotor+0x3a8>
 8002790:	d2f1a9fc 	.word	0xd2f1a9fc
 8002794:	3f50624d 	.word	0x3f50624d
 8002798:	d916872b 	.word	0xd916872b
 800279c:	3feff7ce 	.word	0x3feff7ce
 80027a0:	20000534 	.word	0x20000534
 80027a4:	20000810 	.word	0x20000810
 80027a8:	2000059c 	.word	0x2000059c
 80027ac:	2000059e 	.word	0x2000059e
 80027b0:	20000530 	.word	0x20000530
 80027b4:	200004dc 	.word	0x200004dc
 80027b8:	200004e8 	.word	0x200004e8
 80027bc:	200004f4 	.word	0x200004f4
 80027c0:	20000238 	.word	0x20000238
 80027c4:	2000023c 	.word	0x2000023c
 80027c8:	2000026c 	.word	0x2000026c
 80027cc:	200004d8 	.word	0x200004d8
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fd82 	bl	80002dc <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe fa0a 	bl	8000bf8 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027e8:	6a38      	ldr	r0, [r7, #32]
 80027ea:	f7fd fed5 	bl	8000598 <__aeabi_f2d>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <interupt_DriveMotor+0x430>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fece 	bl	8000598 <__aeabi_f2d>
 80027fc:	a314      	add	r3, pc, #80	; (adr r3, 8002850 <interupt_DriveMotor+0x428>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ff21 	bl	8000648 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4690      	mov	r8, r2
 800280c:	4699      	mov	r9, r3
 800280e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	ee17 0a90 	vmov	r0, s15
 800281e:	f7fd febb 	bl	8000598 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4640      	mov	r0, r8
 8002828:	4649      	mov	r1, r9
 800282a:	f7fd fd55 	bl	80002d8 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd51 	bl	80002dc <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9d9 	bl	8000bf8 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	e097      	b.n	800297c <interupt_DriveMotor+0x554>
 800284c:	f3af 8000 	nop.w
 8002850:	d916872b 	.word	0xd916872b
 8002854:	3feff7ce 	.word	0x3feff7ce
 8002858:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800285c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002860:	edd7 7a02 	vldr	s15, [r7, #8]
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe94 	bl	8000598 <__aeabi_f2d>
 8002870:	4604      	mov	r4, r0
 8002872:	460d      	mov	r5, r1
 8002874:	4bd0      	ldr	r3, [pc, #832]	; (8002bb8 <interupt_DriveMotor+0x790>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eef1 7a67 	vneg.f32	s15, s15
 800287e:	ee17 3a90 	vmov	r3, s15
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe88 	bl	8000598 <__aeabi_f2d>
 8002888:	a3c7      	add	r3, pc, #796	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fedb 	bl	8000648 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fe f947 	bl	8000b2c <__aeabi_dcmplt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06b      	beq.n	800297c <interupt_DriveMotor+0x554>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a6:	f7fd fe77 	bl	8000598 <__aeabi_f2d>
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	4bc2      	ldr	r3, [pc, #776]	; (8002bb8 <interupt_DriveMotor+0x790>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eef1 7a67 	vneg.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe6b 	bl	8000598 <__aeabi_f2d>
 80028c2:	a3b9      	add	r3, pc, #740	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd febe 	bl	8000648 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4690      	mov	r8, r2
 80028d2:	4699      	mov	r9, r3
 80028d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	ee17 0a90 	vmov	r0, s15
 80028e4:	f7fd fe58 	bl	8000598 <__aeabi_f2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fd fcf2 	bl	80002d8 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fcee 	bl	80002dc <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f976 	bl	8000bf8 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002910:	6a38      	ldr	r0, [r7, #32]
 8002912:	f7fd fe41 	bl	8000598 <__aeabi_f2d>
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
 800291a:	4ba7      	ldr	r3, [pc, #668]	; (8002bb8 <interupt_DriveMotor+0x790>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eef1 7a67 	vneg.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe35 	bl	8000598 <__aeabi_f2d>
 800292e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe88 	bl	8000648 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4690      	mov	r8, r2
 800293e:	4699      	mov	r9, r3
 8002940:	ed97 7a04 	vldr	s14, [r7, #16]
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4640      	mov	r0, r8
 800295a:	4649      	mov	r1, r9
 800295c:	f7fd fcbc 	bl	80002d8 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcb8 	bl	80002dc <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f940 	bl	8000bf8 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	edd7 0a08 	vldr	s1, [r7, #32]
 800298c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002990:	f7ff fcb8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f005 fe68 	bl	8008670 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d004      	beq.n	80029b2 <interupt_DriveMotor+0x58a>
 80029a8:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	f040 828d 	bne.w	8002ecc <interupt_DriveMotor+0xaa4>
		g_WallControl_mode=0;
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <interupt_DriveMotor+0x798>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <interupt_DriveMotor+0x79c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b7d      	ldr	r3, [pc, #500]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fddc 	bl	8000598 <__aeabi_f2d>
 80029e0:	a373      	add	r3, pc, #460	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe2f 	bl	8000648 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4690      	mov	r8, r2
 80029f0:	4699      	mov	r9, r3
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdce 	bl	8000598 <__aeabi_f2d>
 80029fc:	a36c      	add	r3, pc, #432	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fe21 	bl	8000648 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	a368      	add	r3, pc, #416	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fe18 	bl	8000648 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a28:	f7fd ff38 	bl	800089c <__aeabi_ddiv>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fc52 	bl	80002dc <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fc4c 	bl	80002dc <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f8d4 	bl	8000bf8 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a54:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd9c 	bl	8000598 <__aeabi_f2d>
 8002a60:	4604      	mov	r4, r0
 8002a62:	460d      	mov	r5, r1
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd95 	bl	8000598 <__aeabi_f2d>
 8002a6e:	a350      	add	r3, pc, #320	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fde8 	bl	8000648 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a94:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a340      	add	r3, pc, #256	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd67 	bl	8000598 <__aeabi_f2d>
 8002aca:	a339      	add	r3, pc, #228	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	a334      	add	r3, pc, #208	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fdb1 	bl	8000648 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af6:	f7fd fed1 	bl	800089c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fbeb 	bl	80002dc <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbe5 	bl	80002dc <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f86d 	bl	8000bf8 <__aeabi_d2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b22:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd35 	bl	8000598 <__aeabi_f2d>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd2e 	bl	8000598 <__aeabi_f2d>
 8002b3c:	a31c      	add	r3, pc, #112	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd81 	bl	8000648 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b62:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <interupt_DriveMotor+0x7ac>)
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	466c      	mov	r4, sp
 8002b6c:	f103 0210 	add.w	r2, r3, #16
 8002b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b74:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7a:	f006 f9ef 	bl	8008f5c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b86:	ed93 7a00 	vldr	s14, [r3]
 8002b8a:	f107 020c 	add.w	r2, r7, #12
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	eef0 0a47 	vmov.f32	s1, s14
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 fb87 	bl	80052b0 <EncoderGyro_PID>
 8002ba2:	e019      	b.n	8002bd8 <interupt_DriveMotor+0x7b0>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	d916872b 	.word	0xd916872b
 8002bac:	3feff7ce 	.word	0x3feff7ce
 8002bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bb4:	3f50624d 	.word	0x3f50624d
 8002bb8:	200004d8 	.word	0x200004d8
 8002bbc:	20000534 	.word	0x20000534
 8002bc0:	2000059c 	.word	0x2000059c
 8002bc4:	2000059e 	.word	0x2000059e
 8002bc8:	20000530 	.word	0x20000530
 8002bcc:	200004dc 	.word	0x200004dc
 8002bd0:	200004e8 	.word	0x200004e8
 8002bd4:	2000050c 	.word	0x2000050c
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <interupt_DriveMotor+0x948>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <interupt_DriveMotor+0x94c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <interupt_DriveMotor+0x950>)
 8002bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <interupt_DriveMotor+0x954>)
 8002bf8:	edd3 6a00 	vldr	s13, [r3]
 8002bfc:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <interupt_DriveMotor+0x958>)
 8002bfe:	ed93 6a01 	vldr	s12, [r3, #4]
 8002c02:	1d3a      	adds	r2, r7, #4
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	eef0 1a46 	vmov.f32	s3, s12
 8002c0c:	eeb0 1a66 	vmov.f32	s2, s13
 8002c10:	4611      	mov	r1, r2
 8002c12:	eef0 0a67 	vmov.f32	s1, s15
 8002c16:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 f89c 	bl	8004d58 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c20:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002c60:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	ee17 0a90 	vmov	r0, s15
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_f2d>
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc8b 	bl	8000598 <__aeabi_f2d>
 8002c82:	a339      	add	r3, pc, #228	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd ff68 	bl	8000b68 <__aeabi_dcmpgt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d074      	beq.n	8002d88 <interupt_DriveMotor+0x960>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca0:	f7fd fc7a 	bl	8000598 <__aeabi_f2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc73 	bl	8000598 <__aeabi_f2d>
 8002cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fcc6 	bl	8000648 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fc60 	bl	8000598 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4640      	mov	r0, r8
 8002cde:	4649      	mov	r1, r9
 8002ce0:	f7fd fafa 	bl	80002d8 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd faf6 	bl	80002dc <__adddf3>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd ff7e 	bl	8000bf8 <__aeabi_d2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d00:	6a38      	ldr	r0, [r7, #32]
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc42 	bl	8000598 <__aeabi_f2d>
 8002d14:	a314      	add	r3, pc, #80	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fc95 	bl	8000648 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc2f 	bl	8000598 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f7fd fac9 	bl	80002d8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fac5 	bl	80002dc <__adddf3>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd ff4d 	bl	8000bf8 <__aeabi_d2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e0a1      	b.n	8002ea8 <interupt_DriveMotor+0xa80>
 8002d64:	f3af 8000 	nop.w
 8002d68:	d916872b 	.word	0xd916872b
 8002d6c:	3feff7ce 	.word	0x3feff7ce
 8002d70:	20000238 	.word	0x20000238
 8002d74:	2000023c 	.word	0x2000023c
 8002d78:	200004dc 	.word	0x200004dc
 8002d7c:	2000026c 	.word	0x2000026c
 8002d80:	200004e8 	.word	0x200004e8
 8002d84:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002d88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4bd5      	ldr	r3, [pc, #852]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	eef1 7a67 	vneg.f32	s15, s15
 8002daa:	ee17 3a90 	vmov	r3, s15
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbf2 	bl	8000598 <__aeabi_f2d>
 8002db4:	a3cc      	add	r3, pc, #816	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd feb1 	bl	8000b2c <__aeabi_dcmplt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06b      	beq.n	8002ea8 <interupt_DriveMotor+0xa80>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f7fd fbe1 	bl	8000598 <__aeabi_f2d>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4bc7      	ldr	r3, [pc, #796]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eef1 7a67 	vneg.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fbd5 	bl	8000598 <__aeabi_f2d>
 8002dee:	a3be      	add	r3, pc, #760	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fc28 	bl	8000648 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	4699      	mov	r9, r3
 8002e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbc2 	bl	8000598 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	f7fd fa5c 	bl	80002d8 <__aeabi_dsub>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fa58 	bl	80002dc <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fee0 	bl	8000bf8 <__aeabi_d2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002e3c:	6a38      	ldr	r0, [r7, #32]
 8002e3e:	f7fd fbab 	bl	8000598 <__aeabi_f2d>
 8002e42:	4604      	mov	r4, r0
 8002e44:	460d      	mov	r5, r1
 8002e46:	4bac      	ldr	r3, [pc, #688]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eef1 7a67 	vneg.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb9f 	bl	8000598 <__aeabi_f2d>
 8002e5a:	a3a3      	add	r3, pc, #652	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fbf2 	bl	8000648 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4690      	mov	r8, r2
 8002e6a:	4699      	mov	r9, r3
 8002e6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	ee17 0a90 	vmov	r0, s15
 8002e7c:	f7fd fb8c 	bl	8000598 <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4640      	mov	r0, r8
 8002e86:	4649      	mov	r1, r9
 8002e88:	f7fd fa26 	bl	80002d8 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fa22 	bl	80002dc <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd feaa 	bl	8000bf8 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ea8:	f107 0214 	add.w	r2, r7, #20
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002eb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ebc:	f7ff fa22 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fbd2 	bl	8008670 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ecc:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <interupt_DriveMotor+0xcd4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	f040 8135 	bne.w	8003140 <interupt_DriveMotor+0xd18>
		g_WallControl_mode=0;
 8002ed6:	4b8a      	ldr	r3, [pc, #552]	; (8003100 <interupt_DriveMotor+0xcd8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002edc:	4b89      	ldr	r3, [pc, #548]	; (8003104 <interupt_DriveMotor+0xcdc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a87      	ldr	r2, [pc, #540]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002eea:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <interupt_DriveMotor+0xce4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb51 	bl	8000598 <__aeabi_f2d>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	4b84      	ldr	r3, [pc, #528]	; (800310c <interupt_DriveMotor+0xce4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb4a 	bl	8000598 <__aeabi_f2d>
 8002f04:	a37a      	add	r3, pc, #488	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb9d 	bl	8000648 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb3c 	bl	8000598 <__aeabi_f2d>
 8002f20:	a373      	add	r3, pc, #460	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd fb8f 	bl	8000648 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	a36f      	add	r3, pc, #444	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb86 	bl	8000648 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4c:	f7fd fca6 	bl	800089c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4640      	mov	r0, r8
 8002f56:	4649      	mov	r1, r9
 8002f58:	f7fd f9c0 	bl	80002dc <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f9ba 	bl	80002dc <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe42 	bl	8000bf8 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a65      	ldr	r2, [pc, #404]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f78:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fb0a 	bl	8000598 <__aeabi_f2d>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fb03 	bl	8000598 <__aeabi_f2d>
 8002f92:	a357      	add	r3, pc, #348	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fb56 	bl	8000648 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f99a 	bl	80002dc <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fe22 	bl	8000bf8 <__aeabi_d2f>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <interupt_DriveMotor+0xce4>)
 8002fb8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002fba:	4b55      	ldr	r3, [pc, #340]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd faea 	bl	8000598 <__aeabi_f2d>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	460d      	mov	r5, r1
 8002fc8:	4b51      	ldr	r3, [pc, #324]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fae3 	bl	8000598 <__aeabi_f2d>
 8002fd2:	a347      	add	r3, pc, #284	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb36 	bl	8000648 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fad5 	bl	8000598 <__aeabi_f2d>
 8002fee:	a340      	add	r3, pc, #256	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb28 	bl	8000648 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	a33b      	add	r3, pc, #236	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fb1f 	bl	8000648 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800301a:	f7fd fc3f 	bl	800089c <__aeabi_ddiv>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	f7fd f959 	bl	80002dc <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd f953 	bl	80002dc <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fddb 	bl	8000bf8 <__aeabi_d2f>
 8003042:	4603      	mov	r3, r0
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003046:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <interupt_DriveMotor+0xce8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa9c 	bl	8000598 <__aeabi_f2d>
 8003060:	a323      	add	r3, pc, #140	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd faef 	bl	8000648 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f933 	bl	80002dc <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdbb 	bl	8000bf8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003086:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <interupt_DriveMotor+0xce4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	eef0 0a47 	vmov.f32	s1, s14
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 f902 	bl	80052b0 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80030d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e4:	e016      	b.n	8003114 <interupt_DriveMotor+0xcec>
 80030e6:	bf00      	nop
 80030e8:	d916872b 	.word	0xd916872b
 80030ec:	3feff7ce 	.word	0x3feff7ce
 80030f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030f4:	3f50624d 	.word	0x3f50624d
 80030f8:	200004d8 	.word	0x200004d8
 80030fc:	20000534 	.word	0x20000534
 8003100:	2000059c 	.word	0x2000059c
 8003104:	2000059e 	.word	0x2000059e
 8003108:	20000530 	.word	0x20000530
 800310c:	200004dc 	.word	0x200004dc
 8003110:	200004e8 	.word	0x200004e8
 8003114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003118:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800311c:	f107 0214 	add.w	r2, r7, #20
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	edd7 0a08 	vldr	s1, [r7, #32]
 800312c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003130:	f7ff f8e8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 fa98 	bl	8008670 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8003140:	4bd3      	ldr	r3, [pc, #844]	; (8003490 <interupt_DriveMotor+0x1068>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d137      	bne.n	80031b8 <interupt_DriveMotor+0xd90>
		g_WallControl_mode=0;
 8003148:	4bd2      	ldr	r3, [pc, #840]	; (8003494 <interupt_DriveMotor+0x106c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 800314e:	4bd2      	ldr	r3, [pc, #840]	; (8003498 <interupt_DriveMotor+0x1070>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003154:	ed97 7a04 	vldr	s14, [r7, #16]
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003160:	edd7 7a02 	vldr	s15, [r7, #8]
 8003164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003168:	edd7 7a01 	vldr	s15, [r7, #4]
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003174:	ed97 7a04 	vldr	s14, [r7, #16]
 8003178:	edd7 7a03 	vldr	s15, [r7, #12]
 800317c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003180:	edd7 7a02 	vldr	s15, [r7, #8]
 8003184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003188:	edd7 7a01 	vldr	s15, [r7, #4]
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003194:	f107 0214 	add.w	r2, r7, #20
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	edd7 0a08 	vldr	s1, [r7, #32]
 80031a4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80031a8:	f7ff f8ac 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 fa5c 	bl	8008670 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 80031b8:	4bb5      	ldr	r3, [pc, #724]	; (8003490 <interupt_DriveMotor+0x1068>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	f040 8105 	bne.w	80033cc <interupt_DriveMotor+0xfa4>
		g_WallControl_mode=0;
 80031c2:	4bb4      	ldr	r3, [pc, #720]	; (8003494 <interupt_DriveMotor+0x106c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80031c8:	4bb3      	ldr	r3, [pc, #716]	; (8003498 <interupt_DriveMotor+0x1070>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80031ce:	4bb3      	ldr	r3, [pc, #716]	; (800349c <interupt_DriveMotor+0x1074>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9e0 	bl	8000598 <__aeabi_f2d>
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	4baf      	ldr	r3, [pc, #700]	; (800349c <interupt_DriveMotor+0x1074>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	a3a8      	add	r3, pc, #672	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fa2c 	bl	8000648 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4690      	mov	r8, r2
 80031f6:	4699      	mov	r9, r3
 80031f8:	4ba8      	ldr	r3, [pc, #672]	; (800349c <interupt_DriveMotor+0x1074>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9cb 	bl	8000598 <__aeabi_f2d>
 8003202:	a3a1      	add	r3, pc, #644	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd fa1e 	bl	8000648 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	a39c      	add	r3, pc, #624	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa15 	bl	8000648 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	f7fd fb35 	bl	800089c <__aeabi_ddiv>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4640      	mov	r0, r8
 8003238:	4649      	mov	r1, r9
 800323a:	f7fd f84f 	bl	80002dc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4620      	mov	r0, r4
 8003244:	4629      	mov	r1, r5
 8003246:	f7fd f849 	bl	80002dc <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f7fd fcd1 	bl	8000bf8 <__aeabi_d2f>
 8003256:	4603      	mov	r3, r0
 8003258:	4a90      	ldr	r2, [pc, #576]	; (800349c <interupt_DriveMotor+0x1074>)
 800325a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <interupt_DriveMotor+0x1074>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f999 	bl	8000598 <__aeabi_f2d>
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	4b8c      	ldr	r3, [pc, #560]	; (800349c <interupt_DriveMotor+0x1074>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f992 	bl	8000598 <__aeabi_f2d>
 8003274:	a384      	add	r3, pc, #528	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f9e5 	bl	8000648 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fd f829 	bl	80002dc <__adddf3>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fcb1 	bl	8000bf8 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	4a80      	ldr	r2, [pc, #512]	; (800349c <interupt_DriveMotor+0x1074>)
 800329a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <interupt_DriveMotor+0x1078>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f979 	bl	8000598 <__aeabi_f2d>
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f972 	bl	8000598 <__aeabi_f2d>
 80032b4:	a374      	add	r3, pc, #464	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f9c5 	bl	8000648 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd f809 	bl	80002dc <__adddf3>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc91 	bl	8000bf8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032da:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 80032dc:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <interupt_DriveMotor+0x107c>)
 80032de:	edd3 6a00 	vldr	s13, [r3]
 80032e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ea:	486d      	ldr	r0, [pc, #436]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ec:	eeb0 0a66 	vmov.f32	s0, s13
 80032f0:	eef0 0a47 	vmov.f32	s1, s14
 80032f4:	eeb0 1a67 	vmov.f32	s2, s15
 80032f8:	f006 fc9a 	bl	8009c30 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <interupt_DriveMotor+0x1074>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	f107 020c 	add.w	r2, r7, #12
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	eef0 0a47 	vmov.f32	s1, s14
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f001 ffc8 	bl	80052b0 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <interupt_DriveMotor+0x1080>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <interupt_DriveMotor+0x1084>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <interupt_DriveMotor+0x1074>)
 800333a:	edd3 7a01 	vldr	s15, [r3, #4]
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <interupt_DriveMotor+0x1088>)
 8003340:	edd3 6a00 	vldr	s13, [r3]
 8003344:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003346:	ed93 6a01 	vldr	s12, [r3, #4]
 800334a:	1d3a      	adds	r2, r7, #4
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	eef0 1a46 	vmov.f32	s3, s12
 8003354:	eeb0 1a66 	vmov.f32	s2, s13
 8003358:	4611      	mov	r1, r2
 800335a:	eef0 0a67 	vmov.f32	s1, s15
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fcf8 	bl	8004d58 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003368:	ed97 7a04 	vldr	s14, [r7, #16]
 800336c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003374:	edd7 7a02 	vldr	s15, [r7, #8]
 8003378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800337c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003388:	ed97 7a04 	vldr	s14, [r7, #16]
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339c:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80033a8:	f107 0214 	add.w	r2, r7, #20
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	edd7 0a08 	vldr	s1, [r7, #32]
 80033b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033bc:	f7fe ffa2 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 f952 	bl	8008670 <pl_DriveMotor_duty>

	}if (modeacc == 7) {
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <interupt_DriveMotor+0x1068>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	f040 829d 	bne.w	8003910 <interupt_DriveMotor+0x14e8>
		g_wallCut_mode=1;
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <interupt_DriveMotor+0x1070>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033e4:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <interupt_DriveMotor+0x1074>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8d4 	bl	8000598 <__aeabi_f2d>
 80033f0:	4604      	mov	r4, r0
 80033f2:	460d      	mov	r5, r1
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <interupt_DriveMotor+0x1074>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f8cd 	bl	8000598 <__aeabi_f2d>
 80033fe:	a322      	add	r3, pc, #136	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fd f920 	bl	8000648 <__aeabi_dmul>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <interupt_DriveMotor+0x1074>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f8bf 	bl	8000598 <__aeabi_f2d>
 800341a:	a31b      	add	r3, pc, #108	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f912 	bl	8000648 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	a316      	add	r3, pc, #88	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd f909 	bl	8000648 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003446:	f7fd fa29 	bl	800089c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fc ff43 	bl	80002dc <__adddf3>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fc ff3d 	bl	80002dc <__adddf3>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fbc5 	bl	8000bf8 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <interupt_DriveMotor+0x1074>)
 8003472:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <interupt_DriveMotor+0x1074>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f88d 	bl	8000598 <__aeabi_f2d>
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	e019      	b.n	80034b8 <interupt_DriveMotor+0x1090>
 8003484:	f3af 8000 	nop.w
 8003488:	d2f1a9fc 	.word	0xd2f1a9fc
 800348c:	3f50624d 	.word	0x3f50624d
 8003490:	20000534 	.word	0x20000534
 8003494:	2000059c 	.word	0x2000059c
 8003498:	2000059e 	.word	0x2000059e
 800349c:	200004dc 	.word	0x200004dc
 80034a0:	200004e8 	.word	0x200004e8
 80034a4:	20000524 	.word	0x20000524
 80034a8:	20000238 	.word	0x20000238
 80034ac:	2000023c 	.word	0x2000023c
 80034b0:	2000026c 	.word	0x2000026c
 80034b4:	20000530 	.word	0x20000530
 80034b8:	4bbd      	ldr	r3, [pc, #756]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	a3b7      	add	r3, pc, #732	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f7fd f8be 	bl	8000648 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fc ff02 	bl	80002dc <__adddf3>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4ab2      	ldr	r2, [pc, #712]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80034e8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80034ea:	4bb2      	ldr	r3, [pc, #712]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f852 	bl	8000598 <__aeabi_f2d>
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	4bae      	ldr	r3, [pc, #696]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f84b 	bl	8000598 <__aeabi_f2d>
 8003502:	a3a7      	add	r3, pc, #668	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f89e 	bl	8000648 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4690      	mov	r8, r2
 8003512:	4699      	mov	r9, r3
 8003514:	4ba7      	ldr	r3, [pc, #668]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f83d 	bl	8000598 <__aeabi_f2d>
 800351e:	a3a0      	add	r3, pc, #640	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f890 	bl	8000648 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	a39b      	add	r3, pc, #620	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f887 	bl	8000648 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800354a:	f7fd f9a7 	bl	800089c <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f7fc fec1 	bl	80002dc <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fc febb 	bl	80002dc <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fb43 	bl	8000bf8 <__aeabi_d2f>
 8003572:	4603      	mov	r3, r0
 8003574:	4a8f      	ldr	r2, [pc, #572]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003576:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <interupt_DriveMotor+0x138c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd f80b 	bl	8000598 <__aeabi_f2d>
 8003582:	4604      	mov	r4, r0
 8003584:	460d      	mov	r5, r1
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f804 	bl	8000598 <__aeabi_f2d>
 8003590:	a383      	add	r3, pc, #524	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f857 	bl	8000648 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fc fe9b 	bl	80002dc <__adddf3>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a7f      	ldr	r2, [pc, #508]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80035b6:	6013      	str	r3, [r2, #0]
		cal_table_dis(Trapezoid_straight,&straight);
 80035b8:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <interupt_DriveMotor+0x1390>)
 80035ba:	4a7d      	ldr	r2, [pc, #500]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	466c      	mov	r4, sp
 80035c0:	f103 0210 	add.w	r2, r3, #16
 80035c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80035cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ce:	f006 f81d 	bl	800960c <cal_table_dis>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	f107 020c 	add.w	r2, r7, #12
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	eef0 0a47 	vmov.f32	s1, s14
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fe5d 	bl	80052b0 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80035f6:	4b71      	ldr	r3, [pc, #452]	; (80037bc <interupt_DriveMotor+0x1394>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <interupt_DriveMotor+0x1398>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003606:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800360a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800360e:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <interupt_DriveMotor+0x1388>)
 8003610:	edd3 7a01 	vldr	s15, [r3, #4]
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <interupt_DriveMotor+0x139c>)
 8003616:	edd3 6a00 	vldr	s13, [r3]
 800361a:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <interupt_DriveMotor+0x138c>)
 800361c:	ed93 6a01 	vldr	s12, [r3, #4]
 8003620:	1d3a      	adds	r2, r7, #4
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	eef0 1a46 	vmov.f32	s3, s12
 800362a:	eeb0 1a66 	vmov.f32	s2, s13
 800362e:	4611      	mov	r1, r2
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	eeb0 0a47 	vmov.f32	s0, s14
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fb8d 	bl	8004d58 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800363e:	f002 f84f 	bl	80056e0 <calWallConrol>
 8003642:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 8003646:	ed97 7a04 	vldr	s14, [r7, #16]
 800364a:	edd7 7a03 	vldr	s15, [r7, #12]
 800364e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003652:	edd7 7a07 	vldr	s15, [r7, #28]
 8003656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365a:	edd7 7a02 	vldr	s15, [r7, #8]
 800365e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003662:	edd7 7a01 	vldr	s15, [r7, #4]
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 800366e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003672:	edd7 7a03 	vldr	s15, [r7, #12]
 8003676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367a:	edd7 7a07 	vldr	s15, [r7, #28]
 800367e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003682:	edd7 7a02 	vldr	s15, [r7, #8]
 8003686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800368a:	edd7 7a01 	vldr	s15, [r7, #4]
 800368e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003692:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003696:	ed97 7a04 	vldr	s14, [r7, #16]
 800369a:	edd7 7a02 	vldr	s15, [r7, #8]
 800369e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a2:	ee17 0a90 	vmov	r0, s15
 80036a6:	f7fc ff77 	bl	8000598 <__aeabi_f2d>
 80036aa:	4604      	mov	r4, r0
 80036ac:	460d      	mov	r5, r1
 80036ae:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff70 	bl	8000598 <__aeabi_f2d>
 80036b8:	a33b      	add	r3, pc, #236	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc ffc3 	bl	8000648 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fd fa4d 	bl	8000b68 <__aeabi_dcmpgt>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07b      	beq.n	80037cc <interupt_DriveMotor+0x13a4>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80036d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d6:	f7fc ff5f 	bl	8000598 <__aeabi_f2d>
 80036da:	4604      	mov	r4, r0
 80036dc:	460d      	mov	r5, r1
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc ff58 	bl	8000598 <__aeabi_f2d>
 80036e8:	a32f      	add	r3, pc, #188	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc ffab 	bl	8000648 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80036fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	ee17 0a90 	vmov	r0, s15
 800370a:	f7fc ff45 	bl	8000598 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fddf 	bl	80002d8 <__aeabi_dsub>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fc fddb 	bl	80002dc <__adddf3>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7fd fa63 	bl	8000bf8 <__aeabi_d2f>
 8003732:	4603      	mov	r3, r0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003736:	6a38      	ldr	r0, [r7, #32]
 8003738:	f7fc ff2e 	bl	8000598 <__aeabi_f2d>
 800373c:	4604      	mov	r4, r0
 800373e:	460d      	mov	r5, r1
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc ff27 	bl	8000598 <__aeabi_f2d>
 800374a:	a317      	add	r3, pc, #92	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc ff7a 	bl	8000648 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4690      	mov	r8, r2
 800375a:	4699      	mov	r9, r3
 800375c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003760:	edd7 7a02 	vldr	s15, [r7, #8]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc ff14 	bl	8000598 <__aeabi_f2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4640      	mov	r0, r8
 8003776:	4649      	mov	r1, r9
 8003778:	f7fc fdae 	bl	80002d8 <__aeabi_dsub>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc fdaa 	bl	80002dc <__adddf3>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd fa32 	bl	8000bf8 <__aeabi_d2f>
 8003794:	4603      	mov	r3, r0
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	e0a8      	b.n	80038ec <interupt_DriveMotor+0x14c4>
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
 80037a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037a4:	3f50624d 	.word	0x3f50624d
 80037a8:	d916872b 	.word	0xd916872b
 80037ac:	3feff7ce 	.word	0x3feff7ce
 80037b0:	200004dc 	.word	0x200004dc
 80037b4:	200004e8 	.word	0x200004e8
 80037b8:	200004f4 	.word	0x200004f4
 80037bc:	20000238 	.word	0x20000238
 80037c0:	2000023c 	.word	0x2000023c
 80037c4:	2000026c 	.word	0x2000026c
 80037c8:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80037cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80037d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d8:	ee17 0a90 	vmov	r0, s15
 80037dc:	f7fc fedc 	bl	8000598 <__aeabi_f2d>
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <interupt_DriveMotor+0x15a8>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eef1 7a67 	vneg.f32	s15, s15
 80037ee:	ee17 3a90 	vmov	r3, s15
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fed0 	bl	8000598 <__aeabi_f2d>
 80037f8:	a373      	add	r3, pc, #460	; (adr r3, 80039c8 <interupt_DriveMotor+0x15a0>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fc ff23 	bl	8000648 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fd f98f 	bl	8000b2c <__aeabi_dcmplt>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d06b      	beq.n	80038ec <interupt_DriveMotor+0x14c4>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003816:	f7fc febf 	bl	8000598 <__aeabi_f2d>
 800381a:	4604      	mov	r4, r0
 800381c:	460d      	mov	r5, r1
 800381e:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <interupt_DriveMotor+0x15a8>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	eef1 7a67 	vneg.f32	s15, s15
 8003828:	ee17 3a90 	vmov	r3, s15
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc feb3 	bl	8000598 <__aeabi_f2d>
 8003832:	a365      	add	r3, pc, #404	; (adr r3, 80039c8 <interupt_DriveMotor+0x15a0>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f7fc ff06 	bl	8000648 <__aeabi_dmul>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4690      	mov	r8, r2
 8003842:	4699      	mov	r9, r3
 8003844:	ed97 7a04 	vldr	s14, [r7, #16]
 8003848:	edd7 7a02 	vldr	s15, [r7, #8]
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	ee17 0a90 	vmov	r0, s15
 8003854:	f7fc fea0 	bl	8000598 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4640      	mov	r0, r8
 800385e:	4649      	mov	r1, r9
 8003860:	f7fc fd3a 	bl	80002d8 <__aeabi_dsub>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fd36 	bl	80002dc <__adddf3>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f9be 	bl	8000bf8 <__aeabi_d2f>
 800387c:	4603      	mov	r3, r0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003880:	6a38      	ldr	r0, [r7, #32]
 8003882:	f7fc fe89 	bl	8000598 <__aeabi_f2d>
 8003886:	4604      	mov	r4, r0
 8003888:	460d      	mov	r5, r1
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <interupt_DriveMotor+0x15a8>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	eef1 7a67 	vneg.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fe7d 	bl	8000598 <__aeabi_f2d>
 800389e:	a34a      	add	r3, pc, #296	; (adr r3, 80039c8 <interupt_DriveMotor+0x15a0>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fed0 	bl	8000648 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4690      	mov	r8, r2
 80038ae:	4699      	mov	r9, r3
 80038b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80038b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	ee17 0a90 	vmov	r0, s15
 80038c0:	f7fc fe6a 	bl	8000598 <__aeabi_f2d>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4640      	mov	r0, r8
 80038ca:	4649      	mov	r1, r9
 80038cc:	f7fc fd04 	bl	80002d8 <__aeabi_dsub>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fd00 	bl	80002dc <__adddf3>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f988 	bl	8000bf8 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80038ec:	f107 0214 	add.w	r2, r7, #20
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	edd7 0a08 	vldr	s1, [r7, #32]
 80038fc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003900:	f7fe fd00 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f004 feb0 	bl	8008670 <pl_DriveMotor_duty>
	}
	if (modeacc == 100) {
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <interupt_DriveMotor+0x15ac>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b64      	cmp	r3, #100	; 0x64
 8003916:	d14b      	bne.n	80039b0 <interupt_DriveMotor+0x1588>
		straight.velocity = 0;
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <interupt_DriveMotor+0x15b0>)
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <interupt_DriveMotor+0x15b4>)
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <interupt_DriveMotor+0x15b0>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <interupt_DriveMotor+0x15b4>)
 8003930:	ed93 7a00 	vldr	s14, [r3]
 8003934:	f107 020c 	add.w	r2, r7, #12
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	eef0 0a47 	vmov.f32	s1, s14
 8003940:	eeb0 0a67 	vmov.f32	s0, s15
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fcb2 	bl	80052b0 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800394c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003950:	edd7 7a03 	vldr	s15, [r7, #12]
 8003954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003958:	edd7 7a02 	vldr	s15, [r7, #8]
 800395c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003960:	edd7 7a01 	vldr	s15, [r7, #4]
 8003964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003968:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800396c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003970:	edd7 7a03 	vldr	s15, [r7, #12]
 8003974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003978:	edd7 7a02 	vldr	s15, [r7, #8]
 800397c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003980:	edd7 7a01 	vldr	s15, [r7, #4]
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800398c:	f107 0214 	add.w	r2, r7, #20
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	edd7 0a08 	vldr	s1, [r7, #32]
 800399c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80039a0:	f7fe fcb0 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fe60 	bl	8008670 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <interupt_DriveMotor+0x15b8>)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <interupt_DriveMotor+0x15bc>)
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	6013      	str	r3, [r2, #0]



}
 80039bc:	bf00      	nop
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039c6:	bf00      	nop
 80039c8:	d916872b 	.word	0xd916872b
 80039cc:	3feff7ce 	.word	0x3feff7ce
 80039d0:	200004d8 	.word	0x200004d8
 80039d4:	20000534 	.word	0x20000534
 80039d8:	200004dc 	.word	0x200004dc
 80039dc:	200004e8 	.word	0x200004e8
 80039e0:	20000538 	.word	0x20000538
 80039e4:	2000053c 	.word	0x2000053c

080039e8 <straight_table_max>:

float straight_table_max(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration, float input_deceleration,MOTOR_MODE motor_mode) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	ed87 0a07 	vstr	s0, [r7, #28]
 80039f2:	edc7 0a06 	vstr	s1, [r7, #24]
 80039f6:	ed87 1a05 	vstr	s2, [r7, #20]
 80039fa:	edc7 1a04 	vstr	s3, [r7, #16]
 80039fe:	ed87 2a03 	vstr	s4, [r7, #12]
 8003a02:	edc7 2a02 	vstr	s5, [r7, #8]
 8003a06:	6078      	str	r0, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a18:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a20:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a24:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	fusion_distanceL=0;
 8003a30:	4b82      	ldr	r3, [pc, #520]	; (8003c3c <straight_table_max+0x254>)
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8003a38:	4b81      	ldr	r3, [pc, #516]	; (8003c40 <straight_table_max+0x258>)
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
	//straight_alpha=0.99;

	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d505      	bpl.n	8003a5a <straight_table_max+0x72>
 8003a4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a52:	eef1 7a67 	vneg.f32	s15, s15
 8003a56:	edc7 7a03 	vstr	s15, [r7, #12]
	if (input_deceleration < 0){input_deceleration=-input_deceleration;}//減速が負
 8003a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	d505      	bpl.n	8003a74 <straight_table_max+0x8c>
 8003a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a6c:	eef1 7a67 	vneg.f32	s15, s15
 8003a70:	edc7 7a02 	vstr	s15, [r7, #8]


	Trapezoid_straight.displacement = input_displacement;
 8003a74:	4a73      	ldr	r2, [pc, #460]	; (8003c44 <straight_table_max+0x25c>)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003a7a:	4a72      	ldr	r2, [pc, #456]	; (8003c44 <straight_table_max+0x25c>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003a80:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <straight_table_max+0x25c>)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003a86:	4a6f      	ldr	r2, [pc, #444]	; (8003c44 <straight_table_max+0x25c>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003a8c:	4a6d      	ldr	r2, [pc, #436]	; (8003c44 <straight_table_max+0x25c>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6113      	str	r3, [r2, #16]
	Trapezoid_straight.deceleration = input_deceleration;
 8003a92:	4a6c      	ldr	r2, [pc, #432]	; (8003c44 <straight_table_max+0x25c>)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6153      	str	r3, [r2, #20]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003a98:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	db03      	blt.n	8003aae <straight_table_max+0xc6>
 8003aa6:	4a68      	ldr	r2, [pc, #416]	; (8003c48 <straight_table_max+0x260>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6053      	str	r3, [r2, #4]
 8003aac:	e006      	b.n	8003abc <straight_table_max+0xd4>
	}else{straight.acceleration = -input_acceleration;}
 8003aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab2:	eef1 7a67 	vneg.f32	s15, s15
 8003ab6:	4b64      	ldr	r3, [pc, #400]	; (8003c48 <straight_table_max+0x260>)
 8003ab8:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003abc:	4a62      	ldr	r2, [pc, #392]	; (8003c48 <straight_table_max+0x260>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003ac2:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <straight_table_max+0x260>)
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003aca:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <straight_table_max+0x264>)
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <straight_table_max+0x264>)
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <straight_table_max+0x264>)
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <straight_table_max+0x268>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	; (8003c54 <straight_table_max+0x26c>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003aee:	edd7 7a07 	vldr	s15, [r7, #28]
 8003af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	dd0e      	ble.n	8003b1a <straight_table_max+0x132>
 8003afc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	dd05      	ble.n	8003b1a <straight_table_max+0x132>
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <straight_table_max+0x26c>)
 8003b10:	2205      	movs	r2, #5
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	4a4c      	ldr	r2, [pc, #304]	; (8003c48 <straight_table_max+0x260>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003b1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	dd14      	ble.n	8003b52 <straight_table_max+0x16a>
 8003b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b2c:	eef1 7a67 	vneg.f32	s15, s15
 8003b30:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	d509      	bpl.n	8003b52 <straight_table_max+0x16a>
 8003b3e:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <straight_table_max+0x26c>)
 8003b40:	2206      	movs	r2, #6
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b48:	eef1 7a67 	vneg.f32	s15, s15
 8003b4c:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <straight_table_max+0x260>)
 8003b4e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003b52:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	d514      	bpl.n	8003b8a <straight_table_max+0x1a2>
 8003b60:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b64:	eef1 7a67 	vneg.f32	s15, s15
 8003b68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	dd09      	ble.n	8003b8a <straight_table_max+0x1a2>
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <straight_table_max+0x26c>)
 8003b78:	2205      	movs	r2, #5
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b80:	eef1 7a67 	vneg.f32	s15, s15
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <straight_table_max+0x260>)
 8003b86:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003b8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	d50e      	bpl.n	8003bb6 <straight_table_max+0x1ce>
 8003b98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	d505      	bpl.n	8003bb6 <straight_table_max+0x1ce>
 8003baa:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <straight_table_max+0x26c>)
 8003bac:	2206      	movs	r2, #6
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <straight_table_max+0x260>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6053      	str	r3, [r2, #4]
	modeacc = 7;
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <straight_table_max+0x270>)
 8003bb8:	2207      	movs	r2, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003bbc:	793a      	ldrb	r2, [r7, #4]
 8003bbe:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <straight_table_max+0x274>)
 8003bc0:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003bc2:	f004 fd39 	bl	8008638 <pl_DriveMotor_start>

	while (g_acc_flag!=4){
 8003bc6:	bf00      	nop
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <straight_table_max+0x26c>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d1fa      	bne.n	8003bc8 <straight_table_max+0x1e0>


	}
	if(input_end_velocity==0){//BREAK
 8003bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bde:	d10e      	bne.n	8003bfe <straight_table_max+0x216>
		wait_ms_NoReset(100);
 8003be0:	2064      	movs	r0, #100	; 0x64
 8003be2:	f005 f801 	bl	8008be8 <wait_ms_NoReset>
		modeacc = 0;
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <straight_table_max+0x270>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8003bec:	2003      	movs	r0, #3
 8003bee:	f004 fcfd 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f004 fcd2 	bl	800859c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8003bf8:	2064      	movs	r0, #100	; 0x64
 8003bfa:	f004 fff5 	bl	8008be8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <straight_table_max+0x278>)
 8003c00:	ed93 7a00 	vldr	s14, [r3]
 8003c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <straight_table_max+0x278>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <straight_table_max+0x27c>)
 8003c14:	ed93 7a00 	vldr	s14, [r3]
 8003c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <straight_table_max+0x27c>)
 8003c22:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003c26:	f004 fd15 	bl	8008654 <pl_DriveMotor_stop>



	return straight.velocity;
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <straight_table_max+0x260>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	ee07 3a90 	vmov	s15, r3



}
 8003c32:	eeb0 0a67 	vmov.f32	s0, s15
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000250 	.word	0x20000250
 8003c40:	20000254 	.word	0x20000254
 8003c44:	200004f4 	.word	0x200004f4
 8003c48:	200004dc 	.word	0x200004dc
 8003c4c:	200004e8 	.word	0x200004e8
 8003c50:	20000811 	.word	0x20000811
 8003c54:	20000810 	.word	0x20000810
 8003c58:	20000534 	.word	0x20000534
 8003c5c:	2000059c 	.word	0x2000059c
 8003c60:	20000220 	.word	0x20000220
 8003c64:	20000224 	.word	0x20000224

08003c68 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c72:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c76:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c7a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c7e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c82:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c88:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c94:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003ca0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca8:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d505      	bpl.n	8003cc6 <straight_table2+0x5e>
 8003cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cbe:	eef1 7a67 	vneg.f32	s15, s15
 8003cc2:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 8003cc6:	4bba      	ldr	r3, [pc, #744]	; (8003fb0 <straight_table2+0x348>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10c      	bne.n	8003ce8 <straight_table2+0x80>
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d109      	bne.n	8003ce8 <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 8003cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cdc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ce4:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003ce8:	4ab2      	ldr	r2, [pc, #712]	; (8003fb4 <straight_table2+0x34c>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003cee:	4ab1      	ldr	r2, [pc, #708]	; (8003fb4 <straight_table2+0x34c>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003cf4:	4aaf      	ldr	r2, [pc, #700]	; (8003fb4 <straight_table2+0x34c>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003cfa:	4aae      	ldr	r2, [pc, #696]	; (8003fb4 <straight_table2+0x34c>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003d00:	4aac      	ldr	r2, [pc, #688]	; (8003fb4 <straight_table2+0x34c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	db03      	blt.n	8003d1c <straight_table2+0xb4>
 8003d14:	4aa8      	ldr	r2, [pc, #672]	; (8003fb8 <straight_table2+0x350>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6053      	str	r3, [r2, #4]
 8003d1a:	e006      	b.n	8003d2a <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 8003d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d20:	eef1 7a67 	vneg.f32	s15, s15
 8003d24:	4ba4      	ldr	r3, [pc, #656]	; (8003fb8 <straight_table2+0x350>)
 8003d26:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003d2a:	4aa3      	ldr	r2, [pc, #652]	; (8003fb8 <straight_table2+0x350>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003d30:	4ba1      	ldr	r3, [pc, #644]	; (8003fb8 <straight_table2+0x350>)
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003d38:	4ba0      	ldr	r3, [pc, #640]	; (8003fbc <straight_table2+0x354>)
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003d40:	4b9e      	ldr	r3, [pc, #632]	; (8003fbc <straight_table2+0x354>)
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <straight_table2+0x354>)
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003d50:	4b9b      	ldr	r3, [pc, #620]	; (8003fc0 <straight_table2+0x358>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003d56:	4b9b      	ldr	r3, [pc, #620]	; (8003fc4 <straight_table2+0x35c>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d68:	dd0e      	ble.n	8003d88 <straight_table2+0x120>
 8003d6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	dd05      	ble.n	8003d88 <straight_table2+0x120>
 8003d7c:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <straight_table2+0x35c>)
 8003d7e:	2205      	movs	r2, #5
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	4a8d      	ldr	r2, [pc, #564]	; (8003fb8 <straight_table2+0x350>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	dd14      	ble.n	8003dc0 <straight_table2+0x158>
 8003d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d9a:	eef1 7a67 	vneg.f32	s15, s15
 8003d9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003daa:	d509      	bpl.n	8003dc0 <straight_table2+0x158>
 8003dac:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <straight_table2+0x35c>)
 8003dae:	2206      	movs	r2, #6
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db6:	eef1 7a67 	vneg.f32	s15, s15
 8003dba:	4b7f      	ldr	r3, [pc, #508]	; (8003fb8 <straight_table2+0x350>)
 8003dbc:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	d514      	bpl.n	8003df8 <straight_table2+0x190>
 8003dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dd2:	eef1 7a67 	vneg.f32	s15, s15
 8003dd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	dd09      	ble.n	8003df8 <straight_table2+0x190>
 8003de4:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <straight_table2+0x35c>)
 8003de6:	2205      	movs	r2, #5
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dee:	eef1 7a67 	vneg.f32	s15, s15
 8003df2:	4b71      	ldr	r3, [pc, #452]	; (8003fb8 <straight_table2+0x350>)
 8003df4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	d50e      	bpl.n	8003e24 <straight_table2+0x1bc>
 8003e06:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	d505      	bpl.n	8003e24 <straight_table2+0x1bc>
 8003e18:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <straight_table2+0x35c>)
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <straight_table2+0x350>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003e24:	4b68      	ldr	r3, [pc, #416]	; (8003fc8 <straight_table2+0x360>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003e2a:	783a      	ldrb	r2, [r7, #0]
 8003e2c:	4b67      	ldr	r3, [pc, #412]	; (8003fcc <straight_table2+0x364>)
 8003e2e:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003e30:	f004 fc02 	bl	8008638 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f040 80d4 	bne.w	8003fe4 <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003e3c:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <straight_table2+0x368>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003e44:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <straight_table2+0x35c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	; (8003fb8 <straight_table2+0x350>)
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003e52:	bf00      	nop
 8003e54:	4b5f      	ldr	r3, [pc, #380]	; (8003fd4 <straight_table2+0x36c>)
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d409      	bmi.n	8003e7c <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003e68:	4b5a      	ldr	r3, [pc, #360]	; (8003fd4 <straight_table2+0x36c>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003e6e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003fd8 <straight_table2+0x370>
 8003e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7a:	dd18      	ble.n	8003eae <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003e7c:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <straight_table2+0x374>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003e82:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8e:	d409      	bmi.n	8003ea4 <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <straight_table2+0x374>)
 8003e92:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003e96:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003fd8 <straight_table2+0x370>
 8003e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	dd04      	ble.n	8003eae <straight_table2+0x246>
			  front_wall_break_90==0){}
 8003ea4:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <straight_table2+0x378>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0d2      	beq.n	8003e54 <straight_table2+0x1ec>
		straight.displacement=0;
 8003eae:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <straight_table2+0x350>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec2:	db03      	blt.n	8003ecc <straight_table2+0x264>
 8003ec4:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <straight_table2+0x350>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6053      	str	r3, [r2, #4]
 8003eca:	e006      	b.n	8003eda <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 8003ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ed0:	eef1 7a67 	vneg.f32	s15, s15
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <straight_table2+0x350>)
 8003ed6:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003eda:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <straight_table2+0x35c>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	dd0e      	ble.n	8003f0c <straight_table2+0x2a4>
 8003eee:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	dd05      	ble.n	8003f0c <straight_table2+0x2a4>
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <straight_table2+0x35c>)
 8003f02:	2205      	movs	r2, #5
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <straight_table2+0x350>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	dd14      	ble.n	8003f44 <straight_table2+0x2dc>
 8003f1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f1e:	eef1 7a67 	vneg.f32	s15, s15
 8003f22:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	d509      	bpl.n	8003f44 <straight_table2+0x2dc>
 8003f30:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <straight_table2+0x35c>)
 8003f32:	2206      	movs	r2, #6
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f3a:	eef1 7a67 	vneg.f32	s15, s15
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <straight_table2+0x350>)
 8003f40:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003f44:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	d514      	bpl.n	8003f7c <straight_table2+0x314>
 8003f52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f56:	eef1 7a67 	vneg.f32	s15, s15
 8003f5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f66:	dd09      	ble.n	8003f7c <straight_table2+0x314>
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <straight_table2+0x35c>)
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f72:	eef1 7a67 	vneg.f32	s15, s15
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <straight_table2+0x350>)
 8003f78:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f88:	f140 825c 	bpl.w	8004444 <straight_table2+0x7dc>
 8003f8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	f140 8252 	bpl.w	8004444 <straight_table2+0x7dc>
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <straight_table2+0x35c>)
 8003fa2:	2206      	movs	r2, #6
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <straight_table2+0x350>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6053      	str	r3, [r2, #4]
 8003fac:	e24a      	b.n	8004444 <straight_table2+0x7dc>
 8003fae:	bf00      	nop
 8003fb0:	20000535 	.word	0x20000535
 8003fb4:	200004f4 	.word	0x200004f4
 8003fb8:	200004dc 	.word	0x200004dc
 8003fbc:	200004e8 	.word	0x200004e8
 8003fc0:	20000811 	.word	0x20000811
 8003fc4:	20000810 	.word	0x20000810
 8003fc8:	20000534 	.word	0x20000534
 8003fcc:	2000059c 	.word	0x2000059c
 8003fd0:	20000540 	.word	0x20000540
 8003fd4:	200005d8 	.word	0x200005d8
 8003fd8:	425c0000 	.word	0x425c0000
 8003fdc:	200005dc 	.word	0x200005dc
 8003fe0:	200005fe 	.word	0x200005fe
	}else if(motor_mode.WallCutMode==2){
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	f040 80c9 	bne.w	800417e <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 8003fec:	4bb8      	ldr	r3, [pc, #736]	; (80042d0 <straight_table2+0x668>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003ff2:	4bb8      	ldr	r3, [pc, #736]	; (80042d4 <straight_table2+0x66c>)
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003ffa:	bf00      	nop
 8003ffc:	4bb6      	ldr	r3, [pc, #728]	; (80042d8 <straight_table2+0x670>)
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400a:	d913      	bls.n	8004034 <straight_table2+0x3cc>
 800400c:	4bb2      	ldr	r3, [pc, #712]	; (80042d8 <straight_table2+0x670>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8004016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401e:	d909      	bls.n	8004034 <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8004020:	4bad      	ldr	r3, [pc, #692]	; (80042d8 <straight_table2+0x670>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8004026:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80042dc <straight_table2+0x674>
 800402a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	db20      	blt.n	8004076 <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8004034:	4baa      	ldr	r3, [pc, #680]	; (80042e0 <straight_table2+0x678>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800403a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d913      	bls.n	800406c <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8004044:	4ba6      	ldr	r3, [pc, #664]	; (80042e0 <straight_table2+0x678>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800404e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004056:	d909      	bls.n	800406c <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8004058:	4ba1      	ldr	r3, [pc, #644]	; (80042e0 <straight_table2+0x678>)
 800405a:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800405e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80042dc <straight_table2+0x674>
 8004062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	db04      	blt.n	8004076 <straight_table2+0x40e>
			  front_wall_break_45==0){}
 800406c:	4b9d      	ldr	r3, [pc, #628]	; (80042e4 <straight_table2+0x67c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c2      	beq.n	8003ffc <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 8004076:	4b9c      	ldr	r3, [pc, #624]	; (80042e8 <straight_table2+0x680>)
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 800407e:	4b95      	ldr	r3, [pc, #596]	; (80042d4 <straight_table2+0x66c>)
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004086:	edd7 7a02 	vldr	s15, [r7, #8]
 800408a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	db03      	blt.n	800409c <straight_table2+0x434>
 8004094:	4a8f      	ldr	r2, [pc, #572]	; (80042d4 <straight_table2+0x66c>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6053      	str	r3, [r2, #4]
 800409a:	e006      	b.n	80040aa <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 800409c:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a0:	eef1 7a67 	vneg.f32	s15, s15
 80040a4:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <straight_table2+0x66c>)
 80040a6:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80040aa:	4b89      	ldr	r3, [pc, #548]	; (80042d0 <straight_table2+0x668>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80040b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80040b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	dd0e      	ble.n	80040dc <straight_table2+0x474>
 80040be:	ed97 7a07 	vldr	s14, [r7, #28]
 80040c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80040c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ce:	dd05      	ble.n	80040dc <straight_table2+0x474>
 80040d0:	4b7f      	ldr	r3, [pc, #508]	; (80042d0 <straight_table2+0x668>)
 80040d2:	2205      	movs	r2, #5
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <straight_table2+0x66c>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80040dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80040e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	dd14      	ble.n	8004114 <straight_table2+0x4ac>
 80040ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ee:	eef1 7a67 	vneg.f32	s15, s15
 80040f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80040f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	d509      	bpl.n	8004114 <straight_table2+0x4ac>
 8004100:	4b73      	ldr	r3, [pc, #460]	; (80042d0 <straight_table2+0x668>)
 8004102:	2206      	movs	r2, #6
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	edd7 7a01 	vldr	s15, [r7, #4]
 800410a:	eef1 7a67 	vneg.f32	s15, s15
 800410e:	4b71      	ldr	r3, [pc, #452]	; (80042d4 <straight_table2+0x66c>)
 8004110:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004114:	edd7 7a05 	vldr	s15, [r7, #20]
 8004118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004120:	d514      	bpl.n	800414c <straight_table2+0x4e4>
 8004122:	edd7 7a05 	vldr	s15, [r7, #20]
 8004126:	eef1 7a67 	vneg.f32	s15, s15
 800412a:	ed97 7a07 	vldr	s14, [r7, #28]
 800412e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	dd09      	ble.n	800414c <straight_table2+0x4e4>
 8004138:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <straight_table2+0x668>)
 800413a:	2205      	movs	r2, #5
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004142:	eef1 7a67 	vneg.f32	s15, s15
 8004146:	4b63      	ldr	r3, [pc, #396]	; (80042d4 <straight_table2+0x66c>)
 8004148:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800414c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	f140 8174 	bpl.w	8004444 <straight_table2+0x7dc>
 800415c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004160:	edd7 7a05 	vldr	s15, [r7, #20]
 8004164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416c:	f140 816a 	bpl.w	8004444 <straight_table2+0x7dc>
 8004170:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <straight_table2+0x668>)
 8004172:	2206      	movs	r2, #6
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	4a57      	ldr	r2, [pc, #348]	; (80042d4 <straight_table2+0x66c>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6053      	str	r3, [r2, #4]
 800417c:	e162      	b.n	8004444 <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	2b03      	cmp	r3, #3
 8004182:	f040 80b9 	bne.w	80042f8 <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004186:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <straight_table2+0x668>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800418c:	4b51      	ldr	r3, [pc, #324]	; (80042d4 <straight_table2+0x66c>)
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8004194:	bf00      	nop
 8004196:	4b55      	ldr	r3, [pc, #340]	; (80042ec <straight_table2+0x684>)
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a8:	d409      	bmi.n	80041be <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80041aa:	4b50      	ldr	r3, [pc, #320]	; (80042ec <straight_table2+0x684>)
 80041ac:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80041b0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80042f0 <straight_table2+0x688>
 80041b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	dd04      	ble.n	80041c8 <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 80041be:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <straight_table2+0x68c>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0e6      	beq.n	8004196 <straight_table2+0x52e>
		enc.sigma_error=0;
 80041c8:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <straight_table2+0x680>)
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80041d0:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <straight_table2+0x66c>)
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80041d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	db03      	blt.n	80041ee <straight_table2+0x586>
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <straight_table2+0x66c>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6053      	str	r3, [r2, #4]
 80041ec:	e006      	b.n	80041fc <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 80041ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80041f2:	eef1 7a67 	vneg.f32	s15, s15
 80041f6:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <straight_table2+0x66c>)
 80041f8:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80041fc:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <straight_table2+0x668>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004202:	edd7 7a05 	vldr	s15, [r7, #20]
 8004206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420e:	dd0e      	ble.n	800422e <straight_table2+0x5c6>
 8004210:	ed97 7a07 	vldr	s14, [r7, #28]
 8004214:	edd7 7a05 	vldr	s15, [r7, #20]
 8004218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dd05      	ble.n	800422e <straight_table2+0x5c6>
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <straight_table2+0x668>)
 8004224:	2205      	movs	r2, #5
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <straight_table2+0x66c>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800422e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dd14      	ble.n	8004266 <straight_table2+0x5fe>
 800423c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004240:	eef1 7a67 	vneg.f32	s15, s15
 8004244:	ed97 7a07 	vldr	s14, [r7, #28]
 8004248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d509      	bpl.n	8004266 <straight_table2+0x5fe>
 8004252:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <straight_table2+0x668>)
 8004254:	2206      	movs	r2, #6
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	edd7 7a01 	vldr	s15, [r7, #4]
 800425c:	eef1 7a67 	vneg.f32	s15, s15
 8004260:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <straight_table2+0x66c>)
 8004262:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004266:	edd7 7a05 	vldr	s15, [r7, #20]
 800426a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	d514      	bpl.n	800429e <straight_table2+0x636>
 8004274:	edd7 7a05 	vldr	s15, [r7, #20]
 8004278:	eef1 7a67 	vneg.f32	s15, s15
 800427c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	dd09      	ble.n	800429e <straight_table2+0x636>
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <straight_table2+0x668>)
 800428c:	2205      	movs	r2, #5
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	edd7 7a01 	vldr	s15, [r7, #4]
 8004294:	eef1 7a67 	vneg.f32	s15, s15
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <straight_table2+0x66c>)
 800429a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800429e:	edd7 7a05 	vldr	s15, [r7, #20]
 80042a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	f140 80cb 	bpl.w	8004444 <straight_table2+0x7dc>
 80042ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80042b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80042b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	f140 80c1 	bpl.w	8004444 <straight_table2+0x7dc>
 80042c2:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <straight_table2+0x668>)
 80042c4:	2206      	movs	r2, #6
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <straight_table2+0x66c>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6053      	str	r3, [r2, #4]
 80042ce:	e0b9      	b.n	8004444 <straight_table2+0x7dc>
 80042d0:	20000810 	.word	0x20000810
 80042d4:	200004dc 	.word	0x200004dc
 80042d8:	200005e0 	.word	0x200005e0
 80042dc:	42000000 	.word	0x42000000
 80042e0:	200005e4 	.word	0x200005e4
 80042e4:	200005ff 	.word	0x200005ff
 80042e8:	20000540 	.word	0x20000540
 80042ec:	200005f0 	.word	0x200005f0
 80042f0:	420c0000 	.word	0x420c0000
 80042f4:	20000600 	.word	0x20000600
	}else if(motor_mode.WallCutMode==4){
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	f040 80a2 	bne.w	8004444 <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004300:	4baa      	ldr	r3, [pc, #680]	; (80045ac <straight_table2+0x944>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8004306:	4baa      	ldr	r3, [pc, #680]	; (80045b0 <straight_table2+0x948>)
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800430e:	bf00      	nop
 8004310:	4ba8      	ldr	r3, [pc, #672]	; (80045b4 <straight_table2+0x94c>)
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800431a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004322:	d409      	bmi.n	8004338 <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8004324:	4ba3      	ldr	r3, [pc, #652]	; (80045b4 <straight_table2+0x94c>)
 8004326:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800432a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80045b8 <straight_table2+0x950>
 800432e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	dd04      	ble.n	8004342 <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 8004338:	4ba0      	ldr	r3, [pc, #640]	; (80045bc <straight_table2+0x954>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0e6      	beq.n	8004310 <straight_table2+0x6a8>
		enc.sigma_error=0;
 8004342:	4b9f      	ldr	r3, [pc, #636]	; (80045c0 <straight_table2+0x958>)
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 800434a:	4b99      	ldr	r3, [pc, #612]	; (80045b0 <straight_table2+0x948>)
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004352:	edd7 7a02 	vldr	s15, [r7, #8]
 8004356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435e:	db03      	blt.n	8004368 <straight_table2+0x700>
 8004360:	4a93      	ldr	r2, [pc, #588]	; (80045b0 <straight_table2+0x948>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6053      	str	r3, [r2, #4]
 8004366:	e006      	b.n	8004376 <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 8004368:	edd7 7a01 	vldr	s15, [r7, #4]
 800436c:	eef1 7a67 	vneg.f32	s15, s15
 8004370:	4b8f      	ldr	r3, [pc, #572]	; (80045b0 <straight_table2+0x948>)
 8004372:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8004376:	4b8d      	ldr	r3, [pc, #564]	; (80045ac <straight_table2+0x944>)
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800437c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004388:	dd0e      	ble.n	80043a8 <straight_table2+0x740>
 800438a:	ed97 7a07 	vldr	s14, [r7, #28]
 800438e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	dd05      	ble.n	80043a8 <straight_table2+0x740>
 800439c:	4b83      	ldr	r3, [pc, #524]	; (80045ac <straight_table2+0x944>)
 800439e:	2205      	movs	r2, #5
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	4a83      	ldr	r2, [pc, #524]	; (80045b0 <straight_table2+0x948>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80043a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	dd14      	ble.n	80043e0 <straight_table2+0x778>
 80043b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043ba:	eef1 7a67 	vneg.f32	s15, s15
 80043be:	ed97 7a07 	vldr	s14, [r7, #28]
 80043c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	d509      	bpl.n	80043e0 <straight_table2+0x778>
 80043cc:	4b77      	ldr	r3, [pc, #476]	; (80045ac <straight_table2+0x944>)
 80043ce:	2206      	movs	r2, #6
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80043d6:	eef1 7a67 	vneg.f32	s15, s15
 80043da:	4b75      	ldr	r3, [pc, #468]	; (80045b0 <straight_table2+0x948>)
 80043dc:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80043e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d514      	bpl.n	8004418 <straight_table2+0x7b0>
 80043ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80043f2:	eef1 7a67 	vneg.f32	s15, s15
 80043f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80043fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	dd09      	ble.n	8004418 <straight_table2+0x7b0>
 8004404:	4b69      	ldr	r3, [pc, #420]	; (80045ac <straight_table2+0x944>)
 8004406:	2205      	movs	r2, #5
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	edd7 7a01 	vldr	s15, [r7, #4]
 800440e:	eef1 7a67 	vneg.f32	s15, s15
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <straight_table2+0x948>)
 8004414:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004418:	edd7 7a05 	vldr	s15, [r7, #20]
 800441c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d50e      	bpl.n	8004444 <straight_table2+0x7dc>
 8004426:	ed97 7a07 	vldr	s14, [r7, #28]
 800442a:	edd7 7a05 	vldr	s15, [r7, #20]
 800442e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	d505      	bpl.n	8004444 <straight_table2+0x7dc>
 8004438:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <straight_table2+0x944>)
 800443a:	2206      	movs	r2, #6
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <straight_table2+0x948>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8004444:	78bb      	ldrb	r3, [r7, #2]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 80a7 	bne.w	800459a <straight_table2+0x932>
	while (g_acc_flag!=4){
 800444c:	e074      	b.n	8004538 <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d120      	bne.n	8004496 <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004454:	edd7 7a05 	vldr	s15, [r7, #20]
 8004458:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800445c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004460:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <straight_table2+0x95c>)
 8004462:	edd3 7a00 	vldr	s15, [r3]
 8004466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	d90e      	bls.n	800448e <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8004470:	edd7 7a05 	vldr	s15, [r7, #20]
 8004474:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8004478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800447c:	4b52      	ldr	r3, [pc, #328]	; (80045c8 <straight_table2+0x960>)
 800447e:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	d900      	bls.n	800448e <straight_table2+0x826>
 800448c:	e054      	b.n	8004538 <straight_table2+0x8d0>
				g_acc_flag=4;
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <straight_table2+0x944>)
 8004490:	2204      	movs	r2, #4
 8004492:	701a      	strb	r2, [r3, #0]
				break;
 8004494:	e055      	b.n	8004542 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d121      	bne.n	80044e0 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 800449c:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80044a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <straight_table2+0x964>)
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d900      	bls.n	80044ba <straight_table2+0x852>
 80044b8:	e03e      	b.n	8004538 <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 80044ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80044be:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80044c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80044c6:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <straight_table2+0x968>)
 80044c8:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80044cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	d900      	bls.n	80044d8 <straight_table2+0x870>
 80044d6:	e02f      	b.n	8004538 <straight_table2+0x8d0>
				g_acc_flag=4;
 80044d8:	4b34      	ldr	r3, [pc, #208]	; (80045ac <straight_table2+0x944>)
 80044da:	2204      	movs	r2, #4
 80044dc:	701a      	strb	r2, [r3, #0]
				break;
 80044de:	e030      	b.n	8004542 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d112      	bne.n	800450c <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 80044e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <straight_table2+0x96c>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	d900      	bls.n	8004504 <straight_table2+0x89c>
 8004502:	e019      	b.n	8004538 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <straight_table2+0x944>)
 8004506:	2204      	movs	r2, #4
 8004508:	701a      	strb	r2, [r3, #0]
				break;
 800450a:	e01a      	b.n	8004542 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d112      	bne.n	8004538 <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8004512:	edd7 7a05 	vldr	s15, [r7, #20]
 8004516:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800451a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <straight_table2+0x94c>)
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d900      	bls.n	8004530 <straight_table2+0x8c8>
 800452e:	e003      	b.n	8004538 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <straight_table2+0x944>)
 8004532:	2204      	movs	r2, #4
 8004534:	701a      	strb	r2, [r3, #0]
				break;
 8004536:	e004      	b.n	8004542 <straight_table2+0x8da>
	while (g_acc_flag!=4){
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <straight_table2+0x944>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b04      	cmp	r3, #4
 8004540:	d185      	bne.n	800444e <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8004542:	edd7 7a03 	vldr	s15, [r7, #12]
 8004546:	eef5 7a40 	vcmp.f32	s15, #0.0
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d110      	bne.n	8004572 <straight_table2+0x90a>
		wait_ms_NoReset(100);
 8004550:	2064      	movs	r0, #100	; 0x64
 8004552:	f004 fb49 	bl	8008be8 <wait_ms_NoReset>
		modeacc = 0;
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <straight_table2+0x970>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800455c:	2003      	movs	r0, #3
 800455e:	f004 f845 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8004562:	2003      	movs	r0, #3
 8004564:	f004 f81a 	bl	800859c <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 8004568:	f004 f874 	bl	8008654 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 800456c:	2064      	movs	r0, #100	; 0x64
 800456e:	f004 fb3b 	bl	8008be8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <straight_table2+0x974>)
 8004574:	ed93 7a00 	vldr	s14, [r3]
 8004578:	edd7 7a05 	vldr	s15, [r7, #20]
 800457c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <straight_table2+0x974>)
 8004582:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <straight_table2+0x978>)
 8004588:	ed93 7a00 	vldr	s14, [r3]
 800458c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <straight_table2+0x978>)
 8004596:	edc3 7a00 	vstr	s15, [r3]


	}

	return straight.velocity;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <straight_table2+0x948>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	ee07 3a90 	vmov	s15, r3



}
 80045a2:	eeb0 0a67 	vmov.f32	s0, s15
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000810 	.word	0x20000810
 80045b0:	200004dc 	.word	0x200004dc
 80045b4:	200005f4 	.word	0x200005f4
 80045b8:	420c0000 	.word	0x420c0000
 80045bc:	20000600 	.word	0x20000600
 80045c0:	20000540 	.word	0x20000540
 80045c4:	200005dc 	.word	0x200005dc
 80045c8:	200005d8 	.word	0x200005d8
 80045cc:	200005e4 	.word	0x200005e4
 80045d0:	200005e0 	.word	0x200005e0
 80045d4:	200005f0 	.word	0x200005f0
 80045d8:	20000534 	.word	0x20000534
 80045dc:	20000220 	.word	0x20000220
 80045e0:	20000224 	.word	0x20000224

080045e4 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80045ee:	60b8      	str	r0, [r7, #8]
 80045f0:	460b      	mov	r3, r1
 80045f2:	71fb      	strb	r3, [r7, #7]
 80045f4:	4613      	mov	r3, r2
 80045f6:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <End_straight+0xc0>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d132      	bne.n	8004666 <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8004600:	2300      	movs	r3, #0
 8004602:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 8004604:	e02f      	b.n	8004666 <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <End_straight+0x3a>
 8004612:	79bb      	ldrb	r3, [r7, #6]
 8004614:	f083 0301 	eor.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d023      	beq.n	8004666 <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d120      	bne.n	8004666 <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004624:	edd7 7a03 	vldr	s15, [r7, #12]
 8004628:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800462c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <End_straight+0xc4>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d90e      	bls.n	800465e <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8004640:	edd7 7a03 	vldr	s15, [r7, #12]
 8004644:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8004648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <End_straight+0xc8>)
 800464e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d900      	bls.n	800465e <End_straight+0x7a>
 800465c:	e003      	b.n	8004666 <End_straight+0x82>
						g_acc_flag=4;
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <End_straight+0xcc>)
 8004660:	2204      	movs	r2, #4
 8004662:	701a      	strb	r2, [r3, #0]
						break;
 8004664:	e004      	b.n	8004670 <End_straight+0x8c>
	while (g_acc_flag!=4){
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <End_straight+0xcc>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b04      	cmp	r3, #4
 800466e:	d1ca      	bne.n	8004606 <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <End_straight+0xd0>)
 8004672:	ed93 7a00 	vldr	s14, [r3]
 8004676:	edd7 7a03 	vldr	s15, [r7, #12]
 800467a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <End_straight+0xd0>)
 8004680:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <End_straight+0xd4>)
 8004686:	ed93 7a00 	vldr	s14, [r3]
 800468a:	edd7 7a03 	vldr	s15, [r7, #12]
 800468e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <End_straight+0xd4>)
 8004694:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004698:	f003 ffdc 	bl	8008654 <pl_DriveMotor_stop>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000535 	.word	0x20000535
 80046a8:	200005dc 	.word	0x200005dc
 80046ac:	200005d8 	.word	0x200005d8
 80046b0:	20000810 	.word	0x20000810
 80046b4:	20000220 	.word	0x20000220
 80046b8:	20000224 	.word	0x20000224

080046bc <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80046c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80046ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80046ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80046d2:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80046d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80046da:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80046de:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046e6:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80046ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80046ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80046f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80046fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	d505      	bpl.n	8004718 <turning_table2+0x5c>
 800470c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004710:	eef1 7a67 	vneg.f32	s15, s15
 8004714:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8004718:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <turning_table2+0x218>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800471e:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <turning_table2+0x218>)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004724:	4a6b      	ldr	r2, [pc, #428]	; (80048d4 <turning_table2+0x218>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 800472a:	4a6a      	ldr	r2, [pc, #424]	; (80048d4 <turning_table2+0x218>)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004730:	4a68      	ldr	r2, [pc, #416]	; (80048d4 <turning_table2+0x218>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004736:	edd7 7a02 	vldr	s15, [r7, #8]
 800473a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	db03      	blt.n	800474c <turning_table2+0x90>
 8004744:	4a64      	ldr	r2, [pc, #400]	; (80048d8 <turning_table2+0x21c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6053      	str	r3, [r2, #4]
 800474a:	e006      	b.n	800475a <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 800474c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <turning_table2+0x21c>)
 8004756:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <turning_table2+0x21c>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004760:	4b5d      	ldr	r3, [pc, #372]	; (80048d8 <turning_table2+0x21c>)
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004768:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <turning_table2+0x220>)
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004770:	4b5a      	ldr	r3, [pc, #360]	; (80048dc <turning_table2+0x220>)
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004778:	4b58      	ldr	r3, [pc, #352]	; (80048dc <turning_table2+0x220>)
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004780:	4b57      	ldr	r3, [pc, #348]	; (80048e0 <turning_table2+0x224>)
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004786:	4b57      	ldr	r3, [pc, #348]	; (80048e4 <turning_table2+0x228>)
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 800478c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004798:	dd0e      	ble.n	80047b8 <turning_table2+0xfc>
 800479a:	ed97 7a07 	vldr	s14, [r7, #28]
 800479e:	edd7 7a05 	vldr	s15, [r7, #20]
 80047a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	dd05      	ble.n	80047b8 <turning_table2+0xfc>
 80047ac:	4b4d      	ldr	r3, [pc, #308]	; (80048e4 <turning_table2+0x228>)
 80047ae:	2205      	movs	r2, #5
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	4a49      	ldr	r2, [pc, #292]	; (80048d8 <turning_table2+0x21c>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80047b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80047bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	dd14      	ble.n	80047f0 <turning_table2+0x134>
 80047c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80047ca:	eef1 7a67 	vneg.f32	s15, s15
 80047ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80047d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	d509      	bpl.n	80047f0 <turning_table2+0x134>
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <turning_table2+0x228>)
 80047de:	2206      	movs	r2, #6
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047e6:	eef1 7a67 	vneg.f32	s15, s15
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <turning_table2+0x21c>)
 80047ec:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80047f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80047f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d514      	bpl.n	8004828 <turning_table2+0x16c>
 80047fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004802:	eef1 7a67 	vneg.f32	s15, s15
 8004806:	ed97 7a07 	vldr	s14, [r7, #28]
 800480a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	dd09      	ble.n	8004828 <turning_table2+0x16c>
 8004814:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <turning_table2+0x228>)
 8004816:	2205      	movs	r2, #5
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	edd7 7a01 	vldr	s15, [r7, #4]
 800481e:	eef1 7a67 	vneg.f32	s15, s15
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <turning_table2+0x21c>)
 8004824:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004828:	edd7 7a05 	vldr	s15, [r7, #20]
 800482c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004834:	d50e      	bpl.n	8004854 <turning_table2+0x198>
 8004836:	ed97 7a07 	vldr	s14, [r7, #28]
 800483a:	edd7 7a05 	vldr	s15, [r7, #20]
 800483e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	d505      	bpl.n	8004854 <turning_table2+0x198>
 8004848:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <turning_table2+0x228>)
 800484a:	2206      	movs	r2, #6
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <turning_table2+0x21c>)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <turning_table2+0x22c>)
 8004856:	2202      	movs	r2, #2
 8004858:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 800485a:	f003 feed 	bl	8008638 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 800485e:	bf00      	nop
 8004860:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <turning_table2+0x228>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b04      	cmp	r3, #4
 8004868:	d1fa      	bne.n	8004860 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 800486a:	edd7 7a03 	vldr	s15, [r7, #12]
 800486e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d10f      	bne.n	8004898 <turning_table2+0x1dc>
		wait_ms_NoReset(300);
 8004878:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800487c:	f004 f9b4 	bl	8008be8 <wait_ms_NoReset>
		modeacc = 0;
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <turning_table2+0x22c>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8004886:	2003      	movs	r0, #3
 8004888:	f003 feb0 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800488c:	2003      	movs	r0, #3
 800488e:	f003 fe85 	bl	800859c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8004892:	2064      	movs	r0, #100	; 0x64
 8004894:	f004 f9a8 	bl	8008be8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8004898:	4b14      	ldr	r3, [pc, #80]	; (80048ec <turning_table2+0x230>)
 800489a:	ed93 7a00 	vldr	s14, [r3]
 800489e:	edd7 7a05 	vldr	s15, [r7, #20]
 80048a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <turning_table2+0x230>)
 80048a8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 80048ac:	f003 fed2 	bl	8008654 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <turning_table2+0x234>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <turning_table2+0x238>)
 80048b6:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 80048b8:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <turning_table2+0x23c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <turning_table2+0x240>)
 80048be:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <turning_table2+0x21c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	ee07 3a90 	vmov	s15, r3
}
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000050c 	.word	0x2000050c
 80048d8:	200004e8 	.word	0x200004e8
 80048dc:	200004dc 	.word	0x200004dc
 80048e0:	20000811 	.word	0x20000811
 80048e4:	20000810 	.word	0x20000810
 80048e8:	20000534 	.word	0x20000534
 80048ec:	20000268 	.word	0x20000268
 80048f0:	20000228 	.word	0x20000228
 80048f4:	20000258 	.word	0x20000258
 80048f8:	2000022c 	.word	0x2000022c
 80048fc:	2000025c 	.word	0x2000025c

08004900 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	ed87 0a05 	vstr	s0, [r7, #20]
 800490a:	edc7 0a04 	vstr	s1, [r7, #16]
 800490e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004912:	edc7 1a02 	vstr	s3, [r7, #8]
 8004916:	ed87 2a01 	vstr	s4, [r7, #4]
 800491a:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 800491e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004922:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004926:	edd7 7a03 	vldr	s15, [r7, #12]
 800492a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800492e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004932:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004936:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800493a:	ed97 7a00 	vldr	s14, [r7]
 800493e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004946:	edd7 7a00 	vldr	s15, [r7]
 800494a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	d505      	bpl.n	8004960 <slalom_table2+0x60>
 8004954:	edd7 7a00 	vldr	s15, [r7]
 8004958:	eef1 7a67 	vneg.f32	s15, s15
 800495c:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8004960:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <slalom_table2+0x1dc>)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8004966:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <slalom_table2+0x1dc>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 800496c:	4a5b      	ldr	r2, [pc, #364]	; (8004adc <slalom_table2+0x1dc>)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004972:	4a5a      	ldr	r2, [pc, #360]	; (8004adc <slalom_table2+0x1dc>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004978:	4a58      	ldr	r2, [pc, #352]	; (8004adc <slalom_table2+0x1dc>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800497e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498a:	db03      	blt.n	8004994 <slalom_table2+0x94>
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <slalom_table2+0x1e0>)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6053      	str	r3, [r2, #4]
 8004992:	e006      	b.n	80049a2 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8004994:	edd7 7a00 	vldr	s15, [r7]
 8004998:	eef1 7a67 	vneg.f32	s15, s15
 800499c:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <slalom_table2+0x1e0>)
 800499e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 80049a2:	4a4f      	ldr	r2, [pc, #316]	; (8004ae0 <slalom_table2+0x1e0>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 80049a8:	4b4d      	ldr	r3, [pc, #308]	; (8004ae0 <slalom_table2+0x1e0>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 80049b0:	4a4c      	ldr	r2, [pc, #304]	; (8004ae4 <slalom_table2+0x1e4>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 80049b6:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <slalom_table2+0x1e4>)
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80049be:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <slalom_table2+0x1e4>)
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80049c6:	4b48      	ldr	r3, [pc, #288]	; (8004ae8 <slalom_table2+0x1e8>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80049cc:	4b47      	ldr	r3, [pc, #284]	; (8004aec <slalom_table2+0x1ec>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80049d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80049d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	dd0e      	ble.n	80049fe <slalom_table2+0xfe>
 80049e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80049e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80049e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f0:	dd05      	ble.n	80049fe <slalom_table2+0xfe>
 80049f2:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <slalom_table2+0x1ec>)
 80049f4:	2205      	movs	r2, #5
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	4a39      	ldr	r2, [pc, #228]	; (8004ae0 <slalom_table2+0x1e0>)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80049fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	dd14      	ble.n	8004a36 <slalom_table2+0x136>
 8004a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a10:	eef1 7a67 	vneg.f32	s15, s15
 8004a14:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	d509      	bpl.n	8004a36 <slalom_table2+0x136>
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <slalom_table2+0x1ec>)
 8004a24:	2206      	movs	r2, #6
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	edd7 7a00 	vldr	s15, [r7]
 8004a2c:	eef1 7a67 	vneg.f32	s15, s15
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <slalom_table2+0x1e0>)
 8004a32:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8004a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	d514      	bpl.n	8004a6e <slalom_table2+0x16e>
 8004a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a48:	eef1 7a67 	vneg.f32	s15, s15
 8004a4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	dd09      	ble.n	8004a6e <slalom_table2+0x16e>
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <slalom_table2+0x1ec>)
 8004a5c:	2205      	movs	r2, #5
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	edd7 7a00 	vldr	s15, [r7]
 8004a64:	eef1 7a67 	vneg.f32	s15, s15
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <slalom_table2+0x1e0>)
 8004a6a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	d50e      	bpl.n	8004a9a <slalom_table2+0x19a>
 8004a7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d505      	bpl.n	8004a9a <slalom_table2+0x19a>
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <slalom_table2+0x1ec>)
 8004a90:	2206      	movs	r2, #6
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <slalom_table2+0x1e0>)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <slalom_table2+0x1f0>)
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8004aa0:	f003 fdca 	bl	8008638 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004aa4:	bf00      	nop
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <slalom_table2+0x1ec>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d1fa      	bne.n	8004aa6 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <slalom_table2+0x1f4>)
 8004ab2:	ed93 7a00 	vldr	s14, [r3]
 8004ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <slalom_table2+0x1f4>)
 8004ac0:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004ac4:	f003 fdc6 	bl	8008654 <pl_DriveMotor_stop>

	return turning.velocity;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <slalom_table2+0x1e0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	ee07 3a90 	vmov	s15, r3
}
 8004ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2000050c 	.word	0x2000050c
 8004ae0:	200004e8 	.word	0x200004e8
 8004ae4:	200004dc 	.word	0x200004dc
 8004ae8:	20000811 	.word	0x20000811
 8004aec:	20000810 	.word	0x20000810
 8004af0:	20000534 	.word	0x20000534
 8004af4:	20000268 	.word	0x20000268

08004af8 <no_angle>:

void no_angle(void){
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <no_angle+0x88>)
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <no_angle+0x88>)
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <no_angle+0x88>)
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004b14:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <no_angle+0x8c>)
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <no_angle+0x8c>)
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <no_angle+0x8c>)
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8004b2c:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <no_angle+0x90>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004b32:	f003 fd81 	bl	8008638 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004b36:	e002      	b.n	8004b3e <no_angle+0x46>
		HAL_Delay(1);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f014 fdb3 	bl	80196a4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <no_angle+0x94>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b46:	ddf7      	ble.n	8004b38 <no_angle+0x40>
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <no_angle+0x94>)
 8004b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b52:	ddf1      	ble.n	8004b38 <no_angle+0x40>
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <no_angle+0x94>)
 8004b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004b5e:	ddeb      	ble.n	8004b38 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <no_angle+0x90>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004b66:	f003 fd75 	bl	8008654 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <no_angle+0x98>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <no_angle+0x9c>)
 8004b70:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <no_angle+0xa0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <no_angle+0xa4>)
 8004b78:	6013      	str	r3, [r2, #0]

}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200004e8 	.word	0x200004e8
 8004b84:	200004dc 	.word	0x200004dc
 8004b88:	20000534 	.word	0x20000534
 8004b8c:	200002bc 	.word	0x200002bc
 8004b90:	20000228 	.word	0x20000228
 8004b94:	20000258 	.word	0x20000258
 8004b98:	2000022c 	.word	0x2000022c
 8004b9c:	2000025c 	.word	0x2000025c

08004ba0 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8004ba0:	b5b0      	push	{r4, r5, r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004baa:	edc7 0a02 	vstr	s1, [r7, #8]
 8004bae:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8004bb2:	4a3d      	ldr	r2, [pc, #244]	; (8004ca8 <mollifier_slalom_table+0x108>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <mollifier_slalom_table+0x108>)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8004bbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ca8 <mollifier_slalom_table+0x108>)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <mollifier_slalom_table+0x10c>)
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004bcc:	4b37      	ldr	r3, [pc, #220]	; (8004cac <mollifier_slalom_table+0x10c>)
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004bd4:	4a36      	ldr	r2, [pc, #216]	; (8004cb0 <mollifier_slalom_table+0x110>)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8004bda:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <mollifier_slalom_table+0x110>)
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004be2:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <mollifier_slalom_table+0x110>)
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004bea:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <mollifier_slalom_table+0x114>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004bf0:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <mollifier_slalom_table+0x118>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8004bf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8004bfe:	ee17 0a90 	vmov	r0, s15
 8004c02:	f7fb fcc9 	bl	8000598 <__aeabi_f2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4614      	mov	r4, r2
 8004c0c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004c10:	a321      	add	r3, pc, #132	; (adr r3, 8004c98 <mollifier_slalom_table+0xf8>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	4620      	mov	r0, r4
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f7fb fe3f 	bl	800089c <__aeabi_ddiv>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	a31e      	add	r3, pc, #120	; (adr r3, 8004ca0 <mollifier_slalom_table+0x100>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fd0c 	bl	8000648 <__aeabi_dmul>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fb fcad 	bl	8000598 <__aeabi_f2d>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4620      	mov	r0, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	f7fb fe29 	bl	800089c <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fb ffd1 	bl	8000bf8 <__aeabi_d2f>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <mollifier_slalom_table+0x11c>)
 8004c5a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <mollifier_slalom_table+0x120>)
 8004c5e:	2206      	movs	r2, #6
 8004c60:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004c62:	f003 fce9 	bl	8008638 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004c66:	bf00      	nop
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <mollifier_slalom_table+0x118>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d1fa      	bne.n	8004c68 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004c72:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <mollifier_slalom_table+0x124>)
 8004c74:	ed93 7a00 	vldr	s14, [r3]
 8004c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c80:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <mollifier_slalom_table+0x124>)
 8004c82:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004c86:	f003 fce5 	bl	8008654 <pl_DriveMotor_stop>

}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bdb0      	pop	{r4, r5, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
 8004c98:	f9db22d1 	.word	0xf9db22d1
 8004c9c:	3fdc6a7e 	.word	0x3fdc6a7e
 8004ca0:	362cef38 	.word	0x362cef38
 8004ca4:	3fd78b56 	.word	0x3fd78b56
 8004ca8:	20000524 	.word	0x20000524
 8004cac:	200004e8 	.word	0x200004e8
 8004cb0:	200004dc 	.word	0x200004dc
 8004cb4:	20000811 	.word	0x20000811
 8004cb8:	20000810 	.word	0x20000810
 8004cbc:	2000080c 	.word	0x2000080c
 8004cc0:	20000534 	.word	0x20000534
 8004cc4:	20000268 	.word	0x20000268

08004cc8 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <no_frontwall_straight+0x70>)
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <no_frontwall_straight+0x70>)
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <no_frontwall_straight+0x70>)
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <no_frontwall_straight+0x74>)
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <no_frontwall_straight+0x74>)
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <no_frontwall_straight+0x74>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004cfc:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <no_frontwall_straight+0x78>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <no_frontwall_straight+0x7c>)
 8004d04:	2205      	movs	r2, #5
 8004d06:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004d08:	f003 fc96 	bl	8008638 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004d0c:	2096      	movs	r0, #150	; 0x96
 8004d0e:	f003 ff6b 	bl	8008be8 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <no_frontwall_straight+0x78>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <no_frontwall_straight+0x7c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004d1e:	f003 fc99 	bl	8008654 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <no_frontwall_straight+0x80>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <no_frontwall_straight+0x84>)
 8004d28:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <no_frontwall_straight+0x88>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <no_frontwall_straight+0x8c>)
 8004d30:	6013      	str	r3, [r2, #0]

}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200004e8 	.word	0x200004e8
 8004d3c:	200004dc 	.word	0x200004dc
 8004d40:	2000059d 	.word	0x2000059d
 8004d44:	20000534 	.word	0x20000534
 8004d48:	20000228 	.word	0x20000228
 8004d4c:	20000258 	.word	0x20000258
 8004d50:	2000022c 	.word	0x2000022c
 8004d54:	2000025c 	.word	0x2000025c

08004d58 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6178      	str	r0, [r7, #20]
 8004d60:	ed87 0a04 	vstr	s0, [r7, #16]
 8004d64:	edc7 0a03 	vstr	s1, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	ed87 1a01 	vstr	s2, [r7, #4]
 8004d6e:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 8004d72:	4bd3      	ldr	r3, [pc, #844]	; (80050c0 <feedforward_const_accel+0x368>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d102      	bne.n	8004d80 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 8004d7a:	4bd2      	ldr	r3, [pc, #840]	; (80050c4 <feedforward_const_accel+0x36c>)
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e001      	b.n	8004d84 <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 8004d80:	4bd1      	ldr	r3, [pc, #836]	; (80050c8 <feedforward_const_accel+0x370>)
 8004d82:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 8004d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	db7c      	blt.n	8004e8c <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7fb fc00 	bl	8000598 <__aeabi_f2d>
 8004d98:	a3bd      	add	r3, pc, #756	; (adr r3, 8005090 <feedforward_const_accel+0x338>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fc53 	bl	8000648 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	4bc7      	ldr	r3, [pc, #796]	; (80050cc <feedforward_const_accel+0x374>)
 8004db0:	f7fb fd74 	bl	800089c <__aeabi_ddiv>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004dbc:	a3b6      	add	r3, pc, #728	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fd6b 	bl	800089c <__aeabi_ddiv>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd6:	f7fb fd61 	bl	800089c <__aeabi_ddiv>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	a3af      	add	r3, pc, #700	; (adr r3, 80050a0 <feedforward_const_accel+0x348>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f7fb fa78 	bl	80002dc <__adddf3>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	a3ac      	add	r3, pc, #688	; (adr r3, 80050a8 <feedforward_const_accel+0x350>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f7fb fc25 	bl	8000648 <__aeabi_dmul>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	a3aa      	add	r3, pc, #680	; (adr r3, 80050b0 <feedforward_const_accel+0x358>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f7fb fd46 	bl	800089c <__aeabi_ddiv>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4614      	mov	r4, r2
 8004e16:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e1c:	eddf 6aad 	vldr	s13, [pc, #692]	; 80050d4 <feedforward_const_accel+0x37c>
 8004e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e24:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80050d0 <feedforward_const_accel+0x378>
 8004e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e2c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004e30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e34:	ee16 0a90 	vmov	r0, s13
 8004e38:	f7fb fbae 	bl	8000598 <__aeabi_f2d>
 8004e3c:	a39e      	add	r3, pc, #632	; (adr r3, 80050b8 <feedforward_const_accel+0x360>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb fc01 	bl	8000648 <__aeabi_dmul>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	a392      	add	r3, pc, #584	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb fd22 	bl	800089c <__aeabi_ddiv>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e68:	f7fb fd18 	bl	800089c <__aeabi_ddiv>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4620      	mov	r0, r4
 8004e72:	4629      	mov	r1, r5
 8004e74:	f7fb fa32 	bl	80002dc <__adddf3>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7fb feba 	bl	8000bf8 <__aeabi_d2f>
 8004e84:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e07b      	b.n	8004f84 <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7fb fb83 	bl	8000598 <__aeabi_f2d>
 8004e92:	a37f      	add	r3, pc, #508	; (adr r3, 8005090 <feedforward_const_accel+0x338>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fbd6 	bl	8000648 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	4b88      	ldr	r3, [pc, #544]	; (80050cc <feedforward_const_accel+0x374>)
 8004eaa:	f7fb fcf7 	bl	800089c <__aeabi_ddiv>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004eb6:	a378      	add	r3, pc, #480	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb fcee 	bl	800089c <__aeabi_ddiv>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ed0:	f7fb fce4 	bl	800089c <__aeabi_ddiv>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	a370      	add	r3, pc, #448	; (adr r3, 80050a0 <feedforward_const_accel+0x348>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb f9f9 	bl	80002d8 <__aeabi_dsub>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	a36e      	add	r3, pc, #440	; (adr r3, 80050a8 <feedforward_const_accel+0x350>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fba8 	bl	8000648 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	a36b      	add	r3, pc, #428	; (adr r3, 80050b0 <feedforward_const_accel+0x358>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	f7fb fcc9 	bl	800089c <__aeabi_ddiv>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4614      	mov	r4, r2
 8004f10:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004f12:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050d4 <feedforward_const_accel+0x37c>
 8004f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f1e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80050d0 <feedforward_const_accel+0x378>
 8004f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f26:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004f2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f2e:	ee16 0a90 	vmov	r0, s13
 8004f32:	f7fb fb31 	bl	8000598 <__aeabi_f2d>
 8004f36:	a360      	add	r3, pc, #384	; (adr r3, 80050b8 <feedforward_const_accel+0x360>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fb84 	bl	8000648 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	a353      	add	r3, pc, #332	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fca5 	bl	800089c <__aeabi_ddiv>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f62:	f7fb fc9b 	bl	800089c <__aeabi_ddiv>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb f9b5 	bl	80002dc <__adddf3>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fb fe3d 	bl	8000bf8 <__aeabi_d2f>
 8004f7e:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	f2c0 80a2 	blt.w	80050d8 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004f94:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f98:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80050d0 <feedforward_const_accel+0x378>
 8004f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa0:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004fa8:	edd7 7a00 	vldr	s15, [r7]
 8004fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80050d4 <feedforward_const_accel+0x37c>
 8004fb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004fb8:	ee16 0a90 	vmov	r0, s13
 8004fbc:	f7fb faec 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004fc0:	a335      	add	r3, pc, #212	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb fc69 	bl	800089c <__aeabi_ddiv>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fda:	f7fb fc5f 	bl	800089c <__aeabi_ddiv>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80050a0 <feedforward_const_accel+0x348>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f976 	bl	80002dc <__adddf3>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	a32b      	add	r3, pc, #172	; (adr r3, 80050a8 <feedforward_const_accel+0x350>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb fb23 	bl	8000648 <__aeabi_dmul>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	a329      	add	r3, pc, #164	; (adr r3, 80050b0 <feedforward_const_accel+0x358>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb fc44 	bl	800089c <__aeabi_ddiv>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4614      	mov	r4, r2
 800501a:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800501c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005020:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80050d4 <feedforward_const_accel+0x37c>
 8005024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005028:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80050d0 <feedforward_const_accel+0x378>
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005034:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005038:	ee16 0a90 	vmov	r0, s13
 800503c:	f7fb faac 	bl	8000598 <__aeabi_f2d>
 8005040:	a31d      	add	r3, pc, #116	; (adr r3, 80050b8 <feedforward_const_accel+0x360>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb faff 	bl	8000648 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	a311      	add	r3, pc, #68	; (adr r3, 8005098 <feedforward_const_accel+0x340>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb fc20 	bl	800089c <__aeabi_ddiv>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800506c:	f7fb fc16 	bl	800089c <__aeabi_ddiv>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb f930 	bl	80002dc <__adddf3>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f7fb fdb8 	bl	8000bf8 <__aeabi_d2f>
 8005088:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 800508e:	e0a0      	b.n	80051d2 <feedforward_const_accel+0x47a>
 8005090:	7df8b79b 	.word	0x7df8b79b
 8005094:	3ed5fdfc 	.word	0x3ed5fdfc
 8005098:	69243a16 	.word	0x69243a16
 800509c:	3f9abf15 	.word	0x3f9abf15
 80050a0:	eb1c432d 	.word	0xeb1c432d
 80050a4:	3f1a36e2 	.word	0x3f1a36e2
 80050a8:	51eb851f 	.word	0x51eb851f
 80050ac:	3ff11eb8 	.word	0x3ff11eb8
 80050b0:	b7952d23 	.word	0xb7952d23
 80050b4:	3f569c23 	.word	0x3f569c23
 80050b8:	761b0f50 	.word	0x761b0f50
 80050bc:	3f66bf29 	.word	0x3f66bf29
 80050c0:	20000814 	.word	0x20000814
 80050c4:	350b9621 	.word	0x350b9621
 80050c8:	34bbe7a2 	.word	0x34bbe7a2
 80050cc:	408f4000 	.word	0x408f4000
 80050d0:	421c0000 	.word	0x421c0000
 80050d4:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80050d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80050dc:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80050d0 <feedforward_const_accel+0x378>
 80050e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e4:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80050e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80050ec:	edd7 7a00 	vldr	s15, [r7]
 80050f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f4:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80050d4 <feedforward_const_accel+0x37c>
 80050f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050fc:	ee16 0a90 	vmov	r0, s13
 8005100:	f7fb fa4a 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8005104:	a338      	add	r3, pc, #224	; (adr r3, 80051e8 <feedforward_const_accel+0x490>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb fbc7 	bl	800089c <__aeabi_ddiv>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800511e:	f7fb fbbd 	bl	800089c <__aeabi_ddiv>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	a333      	add	r3, pc, #204	; (adr r3, 80051f8 <feedforward_const_accel+0x4a0>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f8d2 	bl	80002d8 <__aeabi_dsub>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	a330      	add	r3, pc, #192	; (adr r3, 8005200 <feedforward_const_accel+0x4a8>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fa81 	bl	8000648 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	a32e      	add	r3, pc, #184	; (adr r3, 8005208 <feedforward_const_accel+0x4b0>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fba2 	bl	800089c <__aeabi_ddiv>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4614      	mov	r4, r2
 800515e:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8005160:	ed97 7a01 	vldr	s14, [r7, #4]
 8005164:	eddf 6a22 	vldr	s13, [pc, #136]	; 80051f0 <feedforward_const_accel+0x498>
 8005168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800516c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051f4 <feedforward_const_accel+0x49c>
 8005170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005174:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005178:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800517c:	ee16 0a90 	vmov	r0, s13
 8005180:	f7fb fa0a 	bl	8000598 <__aeabi_f2d>
 8005184:	a316      	add	r3, pc, #88	; (adr r3, 80051e0 <feedforward_const_accel+0x488>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb fa5d 	bl	8000648 <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	a314      	add	r3, pc, #80	; (adr r3, 80051e8 <feedforward_const_accel+0x490>)
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb fb7e 	bl	800089c <__aeabi_ddiv>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051b0:	f7fb fb74 	bl	800089c <__aeabi_ddiv>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f88e 	bl	80002dc <__adddf3>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fb fd16 	bl	8000bf8 <__aeabi_d2f>
 80051cc:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	601a      	str	r2, [r3, #0]
}
 80051d2:	bf00      	nop
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bdb0      	pop	{r4, r5, r7, pc}
 80051da:	bf00      	nop
 80051dc:	f3af 8000 	nop.w
 80051e0:	761b0f50 	.word	0x761b0f50
 80051e4:	3f66bf29 	.word	0x3f66bf29
 80051e8:	69243a16 	.word	0x69243a16
 80051ec:	3f9abf15 	.word	0x3f9abf15
 80051f0:	447a0000 	.word	0x447a0000
 80051f4:	421c0000 	.word	0x421c0000
 80051f8:	eb1c432d 	.word	0xeb1c432d
 80051fc:	3f1a36e2 	.word	0x3f1a36e2
 8005200:	51eb851f 	.word	0x51eb851f
 8005204:	3ff11eb8 	.word	0x3ff11eb8
 8005208:	b7952d23 	.word	0xb7952d23
 800520c:	3f569c23 	.word	0x3f569c23

08005210 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <PID_Init+0x44>)
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <PID_Init+0x48>)
 8005218:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <PID_Init+0x4c>)
 800521c:	4a10      	ldr	r2, [pc, #64]	; (8005260 <PID_Init+0x50>)
 800521e:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <PID_Init+0x54>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <PID_Init+0x58>)
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <PID_Init+0x5c>)
 800522c:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <PID_Init+0x60>)
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <PID_Init+0x64>)
 8005232:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8005234:	4b10      	ldr	r3, [pc, #64]	; (8005278 <PID_Init+0x68>)
 8005236:	4a11      	ldr	r2, [pc, #68]	; (800527c <PID_Init+0x6c>)
 8005238:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <PID_Init+0x70>)
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <PID_Init+0x74>)
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	609a      	str	r2, [r3, #8]

}
 800524a:	bf00      	nop
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	20000560 	.word	0x20000560
 8005258:	40466666 	.word	0x40466666
 800525c:	20000564 	.word	0x20000564
 8005260:	3da3d70a 	.word	0x3da3d70a
 8005264:	20000568 	.word	0x20000568
 8005268:	2000056c 	.word	0x2000056c
 800526c:	3fcccccd 	.word	0x3fcccccd
 8005270:	20000570 	.word	0x20000570
 8005274:	3d75c28f 	.word	0x3d75c28f
 8005278:	20000574 	.word	0x20000574
 800527c:	3b03126f 	.word	0x3b03126f
 8005280:	20000540 	.word	0x20000540
 8005284:	20000550 	.word	0x20000550

08005288 <clear_Ierror>:

void clear_Ierror(void) {
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <clear_Ierror+0x20>)
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <clear_Ierror+0x24>)
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	20000540 	.word	0x20000540
 80052ac:	20000550 	.word	0x20000550

080052b0 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80052be:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80052ce:	4b80      	ldr	r3, [pc, #512]	; (80054d0 <EncoderGyro_PID+0x220>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d111      	bne.n	80052fa <EncoderGyro_PID+0x4a>
		Ksp = 5.7; //3//P項の制御量直進*****************************************************
 80052d6:	4b7f      	ldr	r3, [pc, #508]	; (80054d4 <EncoderGyro_PID+0x224>)
 80052d8:	4a7f      	ldr	r2, [pc, #508]	; (80054d8 <EncoderGyro_PID+0x228>)
 80052da:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 80052dc:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <EncoderGyro_PID+0x22c>)
 80052de:	4a80      	ldr	r2, [pc, #512]	; (80054e0 <EncoderGyro_PID+0x230>)
 80052e0:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 80052e2:	4b80      	ldr	r3, [pc, #512]	; (80054e4 <EncoderGyro_PID+0x234>)
 80052e4:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <EncoderGyro_PID+0x238>)
 80052e6:	601a      	str	r2, [r3, #0]
		Ktp = 4.6; //295//P項の制御量旋回*****************************************************
 80052e8:	4b80      	ldr	r3, [pc, #512]	; (80054ec <EncoderGyro_PID+0x23c>)
 80052ea:	4a81      	ldr	r2, [pc, #516]	; (80054f0 <EncoderGyro_PID+0x240>)
 80052ec:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 80052ee:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <EncoderGyro_PID+0x244>)
 80052f0:	4a81      	ldr	r2, [pc, #516]	; (80054f8 <EncoderGyro_PID+0x248>)
 80052f2:	601a      	str	r2, [r3, #0]
		Ktd = -0.01; //205//D項の制御量旋回*****************************************************
 80052f4:	4b81      	ldr	r3, [pc, #516]	; (80054fc <EncoderGyro_PID+0x24c>)
 80052f6:	4a82      	ldr	r2, [pc, #520]	; (8005500 <EncoderGyro_PID+0x250>)
 80052f8:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 80052fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80052fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	d101      	bne.n	800530c <EncoderGyro_PID+0x5c>
		reset_speed();
 8005308:	f7fb fe8c 	bl	8001024 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 800530c:	4b7d      	ldr	r3, [pc, #500]	; (8005504 <EncoderGyro_PID+0x254>)
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	eef0 7ae7 	vabs.f32	s15, s15
 8005316:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005508 <EncoderGyro_PID+0x258>
 800531a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d520      	bpl.n	8005366 <EncoderGyro_PID+0xb6>
 8005324:	edd7 7a01 	vldr	s15, [r7, #4]
 8005328:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800550c <EncoderGyro_PID+0x25c>
 800532c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005334:	db17      	blt.n	8005366 <EncoderGyro_PID+0xb6>
 8005336:	4b76      	ldr	r3, [pc, #472]	; (8005510 <EncoderGyro_PID+0x260>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d013      	beq.n	8005366 <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 800533e:	4b75      	ldr	r3, [pc, #468]	; (8005514 <EncoderGyro_PID+0x264>)
 8005340:	ed93 7a00 	vldr	s14, [r3]
 8005344:	4b74      	ldr	r3, [pc, #464]	; (8005518 <EncoderGyro_PID+0x268>)
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800534e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005356:	ed97 7a01 	vldr	s14, [r7, #4]
 800535a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800535e:	4b6f      	ldr	r3, [pc, #444]	; (800551c <EncoderGyro_PID+0x26c>)
 8005360:	edc3 7a00 	vstr	s15, [r3]
 8005364:	e01a      	b.n	800539c <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8005366:	4b6e      	ldr	r3, [pc, #440]	; (8005520 <EncoderGyro_PID+0x270>)
 8005368:	ed93 7a00 	vldr	s14, [r3]
 800536c:	4b6d      	ldr	r3, [pc, #436]	; (8005524 <EncoderGyro_PID+0x274>)
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005376:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800537a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800537e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005386:	4b65      	ldr	r3, [pc, #404]	; (800551c <EncoderGyro_PID+0x26c>)
 8005388:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <EncoderGyro_PID+0x278>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a61      	ldr	r2, [pc, #388]	; (8005518 <EncoderGyro_PID+0x268>)
 8005392:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8005394:	4b65      	ldr	r3, [pc, #404]	; (800552c <EncoderGyro_PID+0x27c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5e      	ldr	r2, [pc, #376]	; (8005514 <EncoderGyro_PID+0x264>)
 800539a:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 800539c:	4b5f      	ldr	r3, [pc, #380]	; (800551c <EncoderGyro_PID+0x26c>)
 800539e:	ed93 7a00 	vldr	s14, [r3]
 80053a2:	4b5e      	ldr	r3, [pc, #376]	; (800551c <EncoderGyro_PID+0x26c>)
 80053a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ac:	4b5b      	ldr	r3, [pc, #364]	; (800551c <EncoderGyro_PID+0x26c>)
 80053ae:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80053b2:	4b5a      	ldr	r3, [pc, #360]	; (800551c <EncoderGyro_PID+0x26c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a59      	ldr	r2, [pc, #356]	; (800551c <EncoderGyro_PID+0x26c>)
 80053b8:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80053ba:	4b58      	ldr	r3, [pc, #352]	; (800551c <EncoderGyro_PID+0x26c>)
 80053bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80053c0:	4b56      	ldr	r3, [pc, #344]	; (800551c <EncoderGyro_PID+0x26c>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ca:	4b54      	ldr	r3, [pc, #336]	; (800551c <EncoderGyro_PID+0x26c>)
 80053cc:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80053d0:	4b52      	ldr	r3, [pc, #328]	; (800551c <EncoderGyro_PID+0x26c>)
 80053d2:	ed93 7a00 	vldr	s14, [r3]
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <EncoderGyro_PID+0x224>)
 80053d8:	edd3 7a00 	vldr	s15, [r3]
 80053dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053e0:	4b4e      	ldr	r3, [pc, #312]	; (800551c <EncoderGyro_PID+0x26c>)
 80053e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80053e6:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <EncoderGyro_PID+0x22c>)
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053f4:	4b49      	ldr	r3, [pc, #292]	; (800551c <EncoderGyro_PID+0x26c>)
 80053f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80053fa:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <EncoderGyro_PID+0x234>)
 80053fc:	edd3 7a00 	vldr	s15, [r3]
 8005400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005408:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 800540c:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <EncoderGyro_PID+0x254>)
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	ed97 7a00 	vldr	s14, [r7]
 8005416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800541a:	4b45      	ldr	r3, [pc, #276]	; (8005530 <EncoderGyro_PID+0x280>)
 800541c:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8005420:	4b43      	ldr	r3, [pc, #268]	; (8005530 <EncoderGyro_PID+0x280>)
 8005422:	ed93 7a00 	vldr	s14, [r3]
 8005426:	4b42      	ldr	r3, [pc, #264]	; (8005530 <EncoderGyro_PID+0x280>)
 8005428:	edd3 7a01 	vldr	s15, [r3, #4]
 800542c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <EncoderGyro_PID+0x280>)
 8005432:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <EncoderGyro_PID+0x280>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <EncoderGyro_PID+0x280>)
 800543c:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 800543e:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <EncoderGyro_PID+0x280>)
 8005440:	ed93 7a02 	vldr	s14, [r3, #8]
 8005444:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <EncoderGyro_PID+0x280>)
 8005446:	edd3 7a00 	vldr	s15, [r3]
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	4b38      	ldr	r3, [pc, #224]	; (8005530 <EncoderGyro_PID+0x280>)
 8005450:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8005454:	4b36      	ldr	r3, [pc, #216]	; (8005530 <EncoderGyro_PID+0x280>)
 8005456:	ed93 7a00 	vldr	s14, [r3]
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <EncoderGyro_PID+0x23c>)
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005464:	4b32      	ldr	r3, [pc, #200]	; (8005530 <EncoderGyro_PID+0x280>)
 8005466:	edd3 6a02 	vldr	s13, [r3, #8]
 800546a:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <EncoderGyro_PID+0x244>)
 800546c:	edd3 7a00 	vldr	s15, [r3]
 8005470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005474:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <EncoderGyro_PID+0x280>)
 800547a:	edd3 6a03 	vldr	s13, [r3, #12]
 800547e:	4b1f      	ldr	r3, [pc, #124]	; (80054fc <EncoderGyro_PID+0x24c>)
 8005480:	edd3 7a00 	vldr	s15, [r3]
 8005484:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8005488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548c:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8005490:	edd7 7a05 	vldr	s15, [r7, #20]
 8005494:	eddf 6a27 	vldr	s13, [pc, #156]	; 8005534 <EncoderGyro_PID+0x284>
 8005498:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800549c:	4b26      	ldr	r3, [pc, #152]	; (8005538 <EncoderGyro_PID+0x288>)
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80054ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80054b0:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005534 <EncoderGyro_PID+0x284>
 80054b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80054b8:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <EncoderGyro_PID+0x288>)
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	edc3 7a00 	vstr	s15, [r3]

}
 80054c8:	bf00      	nop
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000814 	.word	0x20000814
 80054d4:	20000560 	.word	0x20000560
 80054d8:	40b66666 	.word	0x40b66666
 80054dc:	20000564 	.word	0x20000564
 80054e0:	3db851ec 	.word	0x3db851ec
 80054e4:	20000568 	.word	0x20000568
 80054e8:	bbe56042 	.word	0xbbe56042
 80054ec:	2000056c 	.word	0x2000056c
 80054f0:	40933333 	.word	0x40933333
 80054f4:	20000570 	.word	0x20000570
 80054f8:	3d8f5c29 	.word	0x3d8f5c29
 80054fc:	20000574 	.word	0x20000574
 8005500:	bc23d70a 	.word	0xbc23d70a
 8005504:	2000026c 	.word	0x2000026c
 8005508:	42f00000 	.word	0x42f00000
 800550c:	42c80000 	.word	0x42c80000
 8005510:	20000534 	.word	0x20000534
 8005514:	2000025c 	.word	0x2000025c
 8005518:	20000258 	.word	0x20000258
 800551c:	20000540 	.word	0x20000540
 8005520:	2000022c 	.word	0x2000022c
 8005524:	20000228 	.word	0x20000228
 8005528:	20000238 	.word	0x20000238
 800552c:	2000023c 	.word	0x2000023c
 8005530:	20000550 	.word	0x20000550
 8005534:	44d1e000 	.word	0x44d1e000
 8005538:	200004d8 	.word	0x200004d8

0800553c <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8005540:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <init_WallControl+0x104>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <init_WallControl+0x108>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 800554c:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <init_WallControl+0x10c>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8005552:	4b3e      	ldr	r3, [pc, #248]	; (800564c <init_WallControl+0x110>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8005558:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <init_WallControl+0x114>)
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 800555e:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <init_WallControl+0x118>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <init_WallControl+0x11c>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 800556a:	4b3c      	ldr	r3, [pc, #240]	; (800565c <init_WallControl+0x120>)
 800556c:	4a3c      	ldr	r2, [pc, #240]	; (8005660 <init_WallControl+0x124>)
 800556e:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8005570:	4b3c      	ldr	r3, [pc, #240]	; (8005664 <init_WallControl+0x128>)
 8005572:	4a3d      	ldr	r2, [pc, #244]	; (8005668 <init_WallControl+0x12c>)
 8005574:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <init_WallControl+0x130>)
 8005578:	4a3d      	ldr	r2, [pc, #244]	; (8005670 <init_WallControl+0x134>)
 800557a:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 800557c:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <init_WallControl+0x138>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8005582:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <init_WallControl+0x13c>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8005588:	4b3c      	ldr	r3, [pc, #240]	; (800567c <init_WallControl+0x140>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 800558e:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <init_WallControl+0x144>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <init_WallControl+0x148>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 800559a:	4b3b      	ldr	r3, [pc, #236]	; (8005688 <init_WallControl+0x14c>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80055a0:	4b3a      	ldr	r3, [pc, #232]	; (800568c <init_WallControl+0x150>)
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80055a8:	4b39      	ldr	r3, [pc, #228]	; (8005690 <init_WallControl+0x154>)
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80055b0:	4b38      	ldr	r3, [pc, #224]	; (8005694 <init_WallControl+0x158>)
 80055b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80055b6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80055b8:	4b37      	ldr	r3, [pc, #220]	; (8005698 <init_WallControl+0x15c>)
 80055ba:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80055be:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <init_WallControl+0x160>)
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <init_WallControl+0x164>)
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80055d0:	4b34      	ldr	r3, [pc, #208]	; (80056a4 <init_WallControl+0x168>)
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 80055d8:	4b33      	ldr	r3, [pc, #204]	; (80056a8 <init_WallControl+0x16c>)
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 80055e0:	4b32      	ldr	r3, [pc, #200]	; (80056ac <init_WallControl+0x170>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 80055e6:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <init_WallControl+0x174>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <init_WallControl+0x178>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <init_WallControl+0x17c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <init_WallControl+0x180>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 80055fe:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <init_WallControl+0x184>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8005604:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <init_WallControl+0x188>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <init_WallControl+0x18c>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8005610:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <init_WallControl+0x190>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <init_WallControl+0x194>)
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <init_WallControl+0x198>)
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8005626:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <init_WallControl+0x19c>)
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <init_WallControl+0x1a0>)
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	2000059c 	.word	0x2000059c
 8005644:	2000059d 	.word	0x2000059d
 8005648:	2000059f 	.word	0x2000059f
 800564c:	2000059e 	.word	0x2000059e
 8005650:	200005a1 	.word	0x200005a1
 8005654:	200005a2 	.word	0x200005a2
 8005658:	200005a3 	.word	0x200005a3
 800565c:	200005a4 	.word	0x200005a4
 8005660:	44be6000 	.word	0x44be6000
 8005664:	200005a8 	.word	0x200005a8
 8005668:	44974000 	.word	0x44974000
 800566c:	200005ac 	.word	0x200005ac
 8005670:	41a00000 	.word	0x41a00000
 8005674:	200005c4 	.word	0x200005c4
 8005678:	200005c0 	.word	0x200005c0
 800567c:	200005cc 	.word	0x200005cc
 8005680:	200005c8 	.word	0x200005c8
 8005684:	200005d4 	.word	0x200005d4
 8005688:	200005d0 	.word	0x200005d0
 800568c:	200005dc 	.word	0x200005dc
 8005690:	200005d8 	.word	0x200005d8
 8005694:	200005e4 	.word	0x200005e4
 8005698:	200005e0 	.word	0x200005e0
 800569c:	200005ec 	.word	0x200005ec
 80056a0:	200005e8 	.word	0x200005e8
 80056a4:	200005f4 	.word	0x200005f4
 80056a8:	200005f0 	.word	0x200005f0
 80056ac:	200005f8 	.word	0x200005f8
 80056b0:	200005f9 	.word	0x200005f9
 80056b4:	200005fa 	.word	0x200005fa
 80056b8:	200005fb 	.word	0x200005fb
 80056bc:	200005fc 	.word	0x200005fc
 80056c0:	200005fd 	.word	0x200005fd
 80056c4:	200005fe 	.word	0x200005fe
 80056c8:	200005ff 	.word	0x200005ff
 80056cc:	20000600 	.word	0x20000600
 80056d0:	20000604 	.word	0x20000604
 80056d4:	20000608 	.word	0x20000608
 80056d8:	2000060c 	.word	0x2000060c
 80056dc:	20000610 	.word	0x20000610

080056e0 <calWallConrol>:


float calWallConrol(void) {
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b0aa      	sub	sp, #168	; 0xa8
 80056e6:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 80056e8:	4ba1      	ldr	r3, [pc, #644]	; (8005970 <calWallConrol+0x290>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d13d      	bne.n	800576c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 80056f0:	4ba0      	ldr	r3, [pc, #640]	; (8005974 <calWallConrol+0x294>)
 80056f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 80056f6:	4ba0      	ldr	r3, [pc, #640]	; (8005978 <calWallConrol+0x298>)
 80056f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 80056fc:	4b9f      	ldr	r3, [pc, #636]	; (800597c <calWallConrol+0x29c>)
 80056fe:	edd3 7a00 	vldr	s15, [r3]
 8005702:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005980 <calWallConrol+0x2a0>
 8005706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	dd06      	ble.n	800571e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8005710:	4b9c      	ldr	r3, [pc, #624]	; (8005984 <calWallConrol+0x2a4>)
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8005716:	4b9c      	ldr	r3, [pc, #624]	; (8005988 <calWallConrol+0x2a8>)
 8005718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800571c:	e052      	b.n	80057c4 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 800571e:	4b97      	ldr	r3, [pc, #604]	; (800597c <calWallConrol+0x29c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fa ff38 	bl	8000598 <__aeabi_f2d>
 8005728:	a389      	add	r3, pc, #548	; (adr r3, 8005950 <calWallConrol+0x270>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa ff8b 	bl	8000648 <__aeabi_dmul>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f7fb fa5d 	bl	8000bf8 <__aeabi_d2f>
 800573e:	4603      	mov	r3, r0
 8005740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8005744:	4b8d      	ldr	r3, [pc, #564]	; (800597c <calWallConrol+0x29c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7fa ff25 	bl	8000598 <__aeabi_f2d>
 800574e:	a382      	add	r3, pc, #520	; (adr r3, 8005958 <calWallConrol+0x278>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa ff78 	bl	8000648 <__aeabi_dmul>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4610      	mov	r0, r2
 800575e:	4619      	mov	r1, r3
 8005760:	f7fb fa4a 	bl	8000bf8 <__aeabi_d2f>
 8005764:	4603      	mov	r3, r0
 8005766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800576a:	e02b      	b.n	80057c4 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 800576c:	4b87      	ldr	r3, [pc, #540]	; (800598c <calWallConrol+0x2ac>)
 800576e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8005772:	4b87      	ldr	r3, [pc, #540]	; (8005990 <calWallConrol+0x2b0>)
 8005774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8005778:	4b80      	ldr	r3, [pc, #512]	; (800597c <calWallConrol+0x29c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fa ff0b 	bl	8000598 <__aeabi_f2d>
 8005782:	a377      	add	r3, pc, #476	; (adr r3, 8005960 <calWallConrol+0x280>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fa ff5e 	bl	8000648 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	f7fb fa30 	bl	8000bf8 <__aeabi_d2f>
 8005798:	4603      	mov	r3, r0
 800579a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 800579e:	4b77      	ldr	r3, [pc, #476]	; (800597c <calWallConrol+0x29c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fa fef8 	bl	8000598 <__aeabi_f2d>
 80057a8:	a36f      	add	r3, pc, #444	; (adr r3, 8005968 <calWallConrol+0x288>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff4b 	bl	8000648 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	f7fb fa1d 	bl	8000bf8 <__aeabi_d2f>
 80057be:	4603      	mov	r3, r0
 80057c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 80057c4:	4b73      	ldr	r3, [pc, #460]	; (8005994 <calWallConrol+0x2b4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f240 2289 	movw	r2, #649	; 0x289
 80057cc:	4293      	cmp	r3, r2
 80057ce:	dc03      	bgt.n	80057d8 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 80057d0:	4b71      	ldr	r3, [pc, #452]	; (8005998 <calWallConrol+0x2b8>)
 80057d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d6:	e011      	b.n	80057fc <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 80057d8:	4b6e      	ldr	r3, [pc, #440]	; (8005994 <calWallConrol+0x2b4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80057e0:	4293      	cmp	r3, r2
 80057e2:	dd03      	ble.n	80057ec <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 80057e4:	4b6d      	ldr	r3, [pc, #436]	; (800599c <calWallConrol+0x2bc>)
 80057e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057ea:	e007      	b.n	80057fc <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 80057ec:	4b69      	ldr	r3, [pc, #420]	; (8005994 <calWallConrol+0x2b4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 80057fc:	4b65      	ldr	r3, [pc, #404]	; (8005994 <calWallConrol+0x2b4>)
 80057fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005802:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005806:	da03      	bge.n	8005810 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8005808:	4b65      	ldr	r3, [pc, #404]	; (80059a0 <calWallConrol+0x2c0>)
 800580a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800580e:	e012      	b.n	8005836 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8005810:	4b60      	ldr	r3, [pc, #384]	; (8005994 <calWallConrol+0x2b4>)
 8005812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005816:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800581a:	dd03      	ble.n	8005824 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 800581c:	4b61      	ldr	r3, [pc, #388]	; (80059a4 <calWallConrol+0x2c4>)
 800581e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005822:	e008      	b.n	8005836 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005824:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <calWallConrol+0x2b4>)
 8005826:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005832:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8005844:	4b58      	ldr	r3, [pc, #352]	; (80059a8 <calWallConrol+0x2c8>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 800584c:	4b57      	ldr	r3, [pc, #348]	; (80059ac <calWallConrol+0x2cc>)
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8005852:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <calWallConrol+0x2d0>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8005858:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <calWallConrol+0x2d4>)
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 800585e:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <calWallConrol+0x2d8>)
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8005864:	4b55      	ldr	r3, [pc, #340]	; (80059bc <calWallConrol+0x2dc>)
 8005866:	4a56      	ldr	r2, [pc, #344]	; (80059c0 <calWallConrol+0x2e0>)
 8005868:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 800586a:	4b56      	ldr	r3, [pc, #344]	; (80059c4 <calWallConrol+0x2e4>)
 800586c:	4a56      	ldr	r2, [pc, #344]	; (80059c8 <calWallConrol+0x2e8>)
 800586e:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8005870:	4b56      	ldr	r3, [pc, #344]	; (80059cc <calWallConrol+0x2ec>)
 8005872:	4a57      	ldr	r2, [pc, #348]	; (80059d0 <calWallConrol+0x2f0>)
 8005874:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 800587e:	f002 f909 	bl	8007a94 <pl_yellow_LED_off>
 8005882:	f001 ba4c 	b.w	8006d1e <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8005886:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <calWallConrol+0x2c8>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	f040 82ef 	bne.w	8005e6e <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8005890:	4b46      	ldr	r3, [pc, #280]	; (80059ac <calWallConrol+0x2cc>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 809d 	beq.w	80059d8 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <calWallConrol+0x2b4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80058a6:	db16      	blt.n	80058d6 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 80058a8:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <calWallConrol+0x2f4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fa fe61 	bl	8000574 <__aeabi_i2d>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4690      	mov	r8, r2
 80058b8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80058bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80058c0:	f7fa fe6a 	bl	8000598 <__aeabi_f2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4640      	mov	r0, r8
 80058ca:	4649      	mov	r1, r9
 80058cc:	f7fb f94c 	bl	8000b68 <__aeabi_dcmpgt>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d037      	beq.n	8005946 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 80058d6:	4b35      	ldr	r3, [pc, #212]	; (80059ac <calWallConrol+0x2cc>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <calWallConrol+0x2cc>)
 80058e0:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <calWallConrol+0x2dc>)
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058f0:	e021      	b.n	8005936 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 80058f2:	4a28      	ldr	r2, [pc, #160]	; (8005994 <calWallConrol+0x2b4>)
 80058f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005904:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <calWallConrol+0x2dc>)
 8005906:	edd3 7a00 	vldr	s15, [r3]
 800590a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800590e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005912:	dd0b      	ble.n	800592c <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <calWallConrol+0x2b4>)
 8005916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005926:	4b25      	ldr	r3, [pc, #148]	; (80059bc <calWallConrol+0x2dc>)
 8005928:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800592c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800593a:	2b13      	cmp	r3, #19
 800593c:	ddd9      	ble.n	80058f2 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 800593e:	4b23      	ldr	r3, [pc, #140]	; (80059cc <calWallConrol+0x2ec>)
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8005946:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <calWallConrol+0x2d4>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	e066      	b.n	8005a1c <calWallConrol+0x33c>
 800594e:	bf00      	nop
 8005950:	33333333 	.word	0x33333333
 8005954:	3fd33333 	.word	0x3fd33333
 8005958:	d2f1a9fc 	.word	0xd2f1a9fc
 800595c:	bf70624d 	.word	0xbf70624d
 8005960:	33333333 	.word	0x33333333
 8005964:	3fe33333 	.word	0x3fe33333
 8005968:	bc6a7efa 	.word	0xbc6a7efa
 800596c:	3f789374 	.word	0x3f789374
 8005970:	20000814 	.word	0x20000814
 8005974:	435c0000 	.word	0x435c0000
 8005978:	43480000 	.word	0x43480000
 800597c:	200004dc 	.word	0x200004dc
 8005980:	447a0000 	.word	0x447a0000
 8005984:	43960000 	.word	0x43960000
 8005988:	c0800000 	.word	0xc0800000
 800598c:	431d0000 	.word	0x431d0000
 8005990:	42dc0000 	.word	0x42dc0000
 8005994:	200002bc 	.word	0x200002bc
 8005998:	44228000 	.word	0x44228000
 800599c:	450fc000 	.word	0x450fc000
 80059a0:	44160000 	.word	0x44160000
 80059a4:	44fa0000 	.word	0x44fa0000
 80059a8:	2000059c 	.word	0x2000059c
 80059ac:	2000059f 	.word	0x2000059f
 80059b0:	200005a1 	.word	0x200005a1
 80059b4:	200005a2 	.word	0x200005a2
 80059b8:	200005a3 	.word	0x200005a3
 80059bc:	200005a4 	.word	0x200005a4
 80059c0:	44be6000 	.word	0x44be6000
 80059c4:	200005a8 	.word	0x200005a8
 80059c8:	44974000 	.word	0x44974000
 80059cc:	200005ac 	.word	0x200005ac
 80059d0:	41a00000 	.word	0x41a00000
 80059d4:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 80059d8:	4bbf      	ldr	r3, [pc, #764]	; (8005cd8 <calWallConrol+0x5f8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80059e0:	dd1c      	ble.n	8005a1c <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 80059e2:	4bbe      	ldr	r3, [pc, #760]	; (8005cdc <calWallConrol+0x5fc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fdc4 	bl	8000574 <__aeabi_i2d>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80059f6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80059fa:	f7fa fdcd 	bl	8000598 <__aeabi_f2d>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fb f891 	bl	8000b2c <__aeabi_dcmplt>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005a10:	4bb3      	ldr	r3, [pc, #716]	; (8005ce0 <calWallConrol+0x600>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	4bb1      	ldr	r3, [pc, #708]	; (8005ce0 <calWallConrol+0x600>)
 8005a1a:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005a1c:	4bb0      	ldr	r3, [pc, #704]	; (8005ce0 <calWallConrol+0x600>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d05c      	beq.n	8005ae6 <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005a2c:	4baa      	ldr	r3, [pc, #680]	; (8005cd8 <calWallConrol+0x5f8>)
 8005a2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a32:	f240 2225 	movw	r2, #549	; 0x225
 8005a36:	4293      	cmp	r3, r2
 8005a38:	dd17      	ble.n	8005a6a <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a3a:	4ba8      	ldr	r3, [pc, #672]	; (8005cdc <calWallConrol+0x5fc>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fa fd98 	bl	8000574 <__aeabi_i2d>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	613a      	str	r2, [r7, #16]
 8005a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a4e:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005a50:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005a54:	f7fa fda0 	bl	8000598 <__aeabi_f2d>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a60:	f7fb f882 	bl	8000b68 <__aeabi_dcmpgt>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d039      	beq.n	8005ade <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8005a6a:	4b9d      	ldr	r3, [pc, #628]	; (8005ce0 <calWallConrol+0x600>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	3b02      	subs	r3, #2
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	4b9b      	ldr	r3, [pc, #620]	; (8005ce0 <calWallConrol+0x600>)
 8005a74:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8005a76:	4b9b      	ldr	r3, [pc, #620]	; (8005ce4 <calWallConrol+0x604>)
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a84:	e023      	b.n	8005ace <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8005a86:	4a94      	ldr	r2, [pc, #592]	; (8005cd8 <calWallConrol+0x5f8>)
 8005a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a8c:	3350      	adds	r3, #80	; 0x50
 8005a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a9a:	4b92      	ldr	r3, [pc, #584]	; (8005ce4 <calWallConrol+0x604>)
 8005a9c:	edd3 7a00 	vldr	s15, [r3]
 8005aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	dd0c      	ble.n	8005ac4 <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005aaa:	4a8b      	ldr	r2, [pc, #556]	; (8005cd8 <calWallConrol+0x5f8>)
 8005aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ab0:	3350      	adds	r3, #80	; 0x50
 8005ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005abe:	4b89      	ldr	r3, [pc, #548]	; (8005ce4 <calWallConrol+0x604>)
 8005ac0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad2:	2b13      	cmp	r3, #19
 8005ad4:	ddd7      	ble.n	8005a86 <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8005ad6:	4b84      	ldr	r3, [pc, #528]	; (8005ce8 <calWallConrol+0x608>)
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005ade:	4b83      	ldr	r3, [pc, #524]	; (8005cec <calWallConrol+0x60c>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e024      	b.n	8005b30 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8005ae6:	4b7c      	ldr	r3, [pc, #496]	; (8005cd8 <calWallConrol+0x5f8>)
 8005ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005aec:	f240 2226 	movw	r2, #550	; 0x226
 8005af0:	4293      	cmp	r3, r2
 8005af2:	dd1d      	ble.n	8005b30 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005af4:	4b79      	ldr	r3, [pc, #484]	; (8005cdc <calWallConrol+0x5fc>)
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fd3b 	bl	8000574 <__aeabi_i2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	60ba      	str	r2, [r7, #8]
 8005b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8005b0a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005b0e:	f7fa fd43 	bl	8000598 <__aeabi_f2d>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005b16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b1a:	f7fb f807 	bl	8000b2c <__aeabi_dcmplt>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005b24:	4b6e      	ldr	r3, [pc, #440]	; (8005ce0 <calWallConrol+0x600>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	4b6c      	ldr	r3, [pc, #432]	; (8005ce0 <calWallConrol+0x600>)
 8005b2e:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005b30:	4b6b      	ldr	r3, [pc, #428]	; (8005ce0 <calWallConrol+0x600>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	f201 80f2 	bhi.w	8006d1e <calWallConrol+0x163e>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <calWallConrol+0x460>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005c57 	.word	0x08005c57
 8005b48:	08005d05 	.word	0x08005d05
 8005b4c:	08005d6f 	.word	0x08005d6f
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005b50:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <calWallConrol+0x608>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fa fd1f 	bl	8000598 <__aeabi_f2d>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	4b64      	ldr	r3, [pc, #400]	; (8005cf0 <calWallConrol+0x610>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa fd18 	bl	8000598 <__aeabi_f2d>
 8005b68:	a357      	add	r3, pc, #348	; (adr r3, 8005cc8 <calWallConrol+0x5e8>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fd6b 	bl	8000648 <__aeabi_dmul>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4620      	mov	r0, r4
 8005b78:	4629      	mov	r1, r5
 8005b7a:	f7fa fbaf 	bl	80002dc <__adddf3>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	f7fb f837 	bl	8000bf8 <__aeabi_d2f>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4a56      	ldr	r2, [pc, #344]	; (8005ce8 <calWallConrol+0x608>)
 8005b8e:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005b90:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <calWallConrol+0x608>)
 8005b92:	edd3 7a00 	vldr	s15, [r3]
 8005b96:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	d52e      	bpl.n	8005c02 <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005ba4:	4b53      	ldr	r3, [pc, #332]	; (8005cf4 <calWallConrol+0x614>)
 8005ba6:	edd3 7a00 	vldr	s15, [r3]
 8005baa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005cf8 <calWallConrol+0x618>
 8005bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bb2:	eef1 6a67 	vneg.f32	s13, s15
 8005bb6:	4b4f      	ldr	r3, [pc, #316]	; (8005cf4 <calWallConrol+0x614>)
 8005bb8:	edd3 7a00 	vldr	s15, [r3]
 8005bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005bc0:	4b48      	ldr	r3, [pc, #288]	; (8005ce4 <calWallConrol+0x604>)
 8005bc2:	edd3 7a00 	vldr	s15, [r3]
 8005bc6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d00 <calWallConrol+0x620>
 8005bca:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005bce:	4b45      	ldr	r3, [pc, #276]	; (8005ce4 <calWallConrol+0x604>)
 8005bd0:	edd3 6a00 	vldr	s13, [r3]
 8005bd4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bdc:	ee17 0a90 	vmov	r0, s15
 8005be0:	f7fa fcda 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005be4:	a33a      	add	r3, pc, #232	; (adr r3, 8005cd0 <calWallConrol+0x5f0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd2d 	bl	8000648 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f7fa ffff 	bl	8000bf8 <__aeabi_d2f>
 8005bfa:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005bfc:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <calWallConrol+0x61c>)
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e003      	b.n	8005c0a <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <calWallConrol+0x61c>)
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005c0a:	4b3c      	ldr	r3, [pc, #240]	; (8005cfc <calWallConrol+0x61c>)
 8005c0c:	ed93 7a00 	vldr	s14, [r3]
 8005c10:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <calWallConrol+0x61c>)
 8005c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1a:	4b38      	ldr	r3, [pc, #224]	; (8005cfc <calWallConrol+0x61c>)
 8005c1c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <calWallConrol+0x61c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <calWallConrol+0x61c>)
 8005c26:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <calWallConrol+0x61c>)
 8005c2a:	ed93 7a00 	vldr	s14, [r3]
 8005c2e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c32:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005c36:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <calWallConrol+0x61c>)
 8005c38:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c3c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c48:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f001 ff5b 	bl	8007b08 <pl_yellow_LED_count>
			break;
 8005c52:	f001 b864 	b.w	8006d1e <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005c56:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c5a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005cf8 <calWallConrol+0x618>
 8005c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c62:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005c66:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8005c6a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <calWallConrol+0x61c>)
 8005c74:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005c78:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <calWallConrol+0x61c>)
 8005c7a:	ed93 7a00 	vldr	s14, [r3]
 8005c7e:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <calWallConrol+0x61c>)
 8005c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <calWallConrol+0x61c>)
 8005c8a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <calWallConrol+0x61c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <calWallConrol+0x61c>)
 8005c94:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005c96:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <calWallConrol+0x61c>)
 8005c98:	ed93 7a00 	vldr	s14, [r3]
 8005c9c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005ca4:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <calWallConrol+0x61c>)
 8005ca6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005caa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005cba:	2080      	movs	r0, #128	; 0x80
 8005cbc:	f001 ff24 	bl	8007b08 <pl_yellow_LED_count>
			break;
 8005cc0:	f001 b82d 	b.w	8006d1e <calWallConrol+0x163e>
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ccc:	3f50624d 	.word	0x3f50624d
 8005cd0:	66666666 	.word	0x66666666
 8005cd4:	3fe66666 	.word	0x3fe66666
 8005cd8:	200002bc 	.word	0x200002bc
 8005cdc:	2000044c 	.word	0x2000044c
 8005ce0:	2000059f 	.word	0x2000059f
 8005ce4:	200005a8 	.word	0x200005a8
 8005ce8:	200005ac 	.word	0x200005ac
 8005cec:	200005a3 	.word	0x200005a3
 8005cf0:	200004dc 	.word	0x200004dc
 8005cf4:	200005a4 	.word	0x200005a4
 8005cf8:	44be6000 	.word	0x44be6000
 8005cfc:	20000578 	.word	0x20000578
 8005d00:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005d04:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005d08:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005d00 <calWallConrol+0x620>
 8005d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d10:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005d14:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005d1c:	4baa      	ldr	r3, [pc, #680]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d1e:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005d22:	4ba9      	ldr	r3, [pc, #676]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d24:	ed93 7a00 	vldr	s14, [r3]
 8005d28:	4ba7      	ldr	r3, [pc, #668]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d32:	4ba5      	ldr	r3, [pc, #660]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d34:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005d38:	4ba3      	ldr	r3, [pc, #652]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4aa2      	ldr	r2, [pc, #648]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d3e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005d40:	4ba1      	ldr	r3, [pc, #644]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d42:	ed93 7a00 	vldr	s14, [r3]
 8005d46:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005d4e:	4b9e      	ldr	r3, [pc, #632]	; (8005fc8 <calWallConrol+0x8e8>)
 8005d50:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d54:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d60:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005d64:	2001      	movs	r0, #1
 8005d66:	f001 fecf 	bl	8007b08 <pl_yellow_LED_count>
			break;
 8005d6a:	f000 bfd8 	b.w	8006d1e <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005d6e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d72:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005fcc <calWallConrol+0x8ec>
 8005d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d7a:	eef1 6a67 	vneg.f32	s13, s15
 8005d7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005d86:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005d8a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005fd0 <calWallConrol+0x8f0>
 8005d8e:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005d92:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005d96:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005d9e:	4b8a      	ldr	r3, [pc, #552]	; (8005fc8 <calWallConrol+0x8e8>)
 8005da0:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005da4:	4b88      	ldr	r3, [pc, #544]	; (8005fc8 <calWallConrol+0x8e8>)
 8005da6:	ed93 7a00 	vldr	s14, [r3]
 8005daa:	4b87      	ldr	r3, [pc, #540]	; (8005fc8 <calWallConrol+0x8e8>)
 8005dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8005db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db4:	4b84      	ldr	r3, [pc, #528]	; (8005fc8 <calWallConrol+0x8e8>)
 8005db6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005dba:	4b83      	ldr	r3, [pc, #524]	; (8005fc8 <calWallConrol+0x8e8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a82      	ldr	r2, [pc, #520]	; (8005fc8 <calWallConrol+0x8e8>)
 8005dc0:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005dc2:	4b81      	ldr	r3, [pc, #516]	; (8005fc8 <calWallConrol+0x8e8>)
 8005dc4:	ed93 7a00 	vldr	s14, [r3]
 8005dc8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005dd0:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <calWallConrol+0x8e8>)
 8005dd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dd6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005de6:	2081      	movs	r0, #129	; 0x81
 8005de8:	f001 fe8e 	bl	8007b08 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005dec:	4b79      	ldr	r3, [pc, #484]	; (8005fd4 <calWallConrol+0x8f4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fa fbbf 	bl	8000574 <__aeabi_i2d>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	603a      	str	r2, [r7, #0]
 8005dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	4b74      	ldr	r3, [pc, #464]	; (8005fd8 <calWallConrol+0x8f8>)
 8005e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e0c:	f7fa fe8e 	bl	8000b2c <__aeabi_dcmplt>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01a      	beq.n	8005e4c <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8005e16:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <calWallConrol+0x8f4>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa fbaa 	bl	8000574 <__aeabi_i2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4692      	mov	sl, r2
 8005e26:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <calWallConrol+0x8f8>)
 8005e30:	4650      	mov	r0, sl
 8005e32:	4659      	mov	r1, fp
 8005e34:	f7fa fe7a 	bl	8000b2c <__aeabi_dcmplt>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005e3e:	4b67      	ldr	r3, [pc, #412]	; (8005fdc <calWallConrol+0x8fc>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	4b65      	ldr	r3, [pc, #404]	; (8005fdc <calWallConrol+0x8fc>)
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005e4c:	4b63      	ldr	r3, [pc, #396]	; (8005fdc <calWallConrol+0x8fc>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005e52:	4b62      	ldr	r3, [pc, #392]	; (8005fdc <calWallConrol+0x8fc>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b18      	cmp	r3, #24
 8005e58:	f240 8760 	bls.w	8006d1c <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005e5c:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <calWallConrol+0x900>)
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005e64:	4b5d      	ldr	r3, [pc, #372]	; (8005fdc <calWallConrol+0x8fc>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005e6a:	f000 bf57 	b.w	8006d1c <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005e6e:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <calWallConrol+0x904>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	f000 8753 	beq.w	8006d1e <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <calWallConrol+0x904>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	f040 874e 	bne.w	8006d1e <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 8005e82:	4b59      	ldr	r3, [pc, #356]	; (8005fe8 <calWallConrol+0x908>)
 8005e84:	edd3 7a00 	vldr	s15, [r3]
 8005e88:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005fec <calWallConrol+0x90c>
 8005e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	dd05      	ble.n	8005ea2 <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 8005e96:	4b56      	ldr	r3, [pc, #344]	; (8005ff0 <calWallConrol+0x910>)
 8005e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 8005e9c:	4b55      	ldr	r3, [pc, #340]	; (8005ff4 <calWallConrol+0x914>)
 8005e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ea0:	e024      	b.n	8005eec <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005ea2:	4b51      	ldr	r3, [pc, #324]	; (8005fe8 <calWallConrol+0x908>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fb76 	bl	8000598 <__aeabi_f2d>
 8005eac:	a342      	add	r3, pc, #264	; (adr r3, 8005fb8 <calWallConrol+0x8d8>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fbc9 	bl	8000648 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	f7fa fe9b 	bl	8000bf8 <__aeabi_d2f>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005ec8:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <calWallConrol+0x908>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fa fb63 	bl	8000598 <__aeabi_f2d>
 8005ed2:	a33b      	add	r3, pc, #236	; (adr r3, 8005fc0 <calWallConrol+0x8e0>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa fbb6 	bl	8000648 <__aeabi_dmul>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f7fa fe88 	bl	8000bf8 <__aeabi_d2f>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005eec:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <calWallConrol+0x918>)
 8005eee:	edd3 7a00 	vldr	s15, [r3]
 8005ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efe:	dd12      	ble.n	8005f26 <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005f00:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <calWallConrol+0x918>)
 8005f02:	edd3 7a00 	vldr	s15, [r3]
 8005f06:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	d808      	bhi.n	8005f26 <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005f14:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <calWallConrol+0x91c>)
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005f18:	4b39      	ldr	r3, [pc, #228]	; (8006000 <calWallConrol+0x920>)
 8005f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <calWallConrol+0x924>)
 8005f1e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005f20:	4b39      	ldr	r3, [pc, #228]	; (8006008 <calWallConrol+0x928>)
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
 8005f24:	e0a7      	b.n	8006076 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <calWallConrol+0x918>)
 8005f28:	edd3 7a00 	vldr	s15, [r3]
 8005f2c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800600c <calWallConrol+0x92c>
 8005f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f38:	dd12      	ble.n	8005f60 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <calWallConrol+0x918>)
 8005f3c:	edd3 7a00 	vldr	s15, [r3]
 8005f40:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006010 <calWallConrol+0x930>
 8005f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4c:	d808      	bhi.n	8005f60 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005f4e:	4b31      	ldr	r3, [pc, #196]	; (8006014 <calWallConrol+0x934>)
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <calWallConrol+0x938>)
 8005f54:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005f56:	4b31      	ldr	r3, [pc, #196]	; (800601c <calWallConrol+0x93c>)
 8005f58:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005f5a:	4b31      	ldr	r3, [pc, #196]	; (8006020 <calWallConrol+0x940>)
 8005f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f5e:	e08a      	b.n	8006076 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005f60:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <calWallConrol+0x918>)
 8005f62:	edd3 7a00 	vldr	s15, [r3]
 8005f66:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006024 <calWallConrol+0x944>
 8005f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	dd12      	ble.n	8005f9a <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005f74:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <calWallConrol+0x918>)
 8005f76:	edd3 7a00 	vldr	s15, [r3]
 8005f7a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006028 <calWallConrol+0x948>
 8005f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	d808      	bhi.n	8005f9a <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005f88:	4b28      	ldr	r3, [pc, #160]	; (800602c <calWallConrol+0x94c>)
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <calWallConrol+0x950>)
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <calWallConrol+0x954>)
 8005f92:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005f94:	4b28      	ldr	r3, [pc, #160]	; (8006038 <calWallConrol+0x958>)
 8005f96:	657b      	str	r3, [r7, #84]	; 0x54
 8005f98:	e06d      	b.n	8006076 <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005f9a:	4b28      	ldr	r3, [pc, #160]	; (800603c <calWallConrol+0x95c>)
 8005f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fa0:	2bb4      	cmp	r3, #180	; 0xb4
 8005fa2:	dd4f      	ble.n	8006044 <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <calWallConrol+0x960>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	f043 0302 	orr.w	r3, r3, #2
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <calWallConrol+0x960>)
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	e04e      	b.n	8006052 <calWallConrol+0x972>
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	66666666 	.word	0x66666666
 8005fbc:	3fe66666 	.word	0x3fe66666
 8005fc0:	1eb851ec 	.word	0x1eb851ec
 8005fc4:	bfb1eb85 	.word	0xbfb1eb85
 8005fc8:	20000578 	.word	0x20000578
 8005fcc:	44be6000 	.word	0x44be6000
 8005fd0:	44974000 	.word	0x44974000
 8005fd4:	2000044c 	.word	0x2000044c
 8005fd8:	403e0000 	.word	0x403e0000
 8005fdc:	200005a1 	.word	0x200005a1
 8005fe0:	20000550 	.word	0x20000550
 8005fe4:	2000059c 	.word	0x2000059c
 8005fe8:	200004dc 	.word	0x200004dc
 8005fec:	447a0000 	.word	0x447a0000
 8005ff0:	442f0000 	.word	0x442f0000
 8005ff4:	c28c0000 	.word	0xc28c0000
 8005ff8:	200005e8 	.word	0x200005e8
 8005ffc:	4519d2f5 	.word	0x4519d2f5
 8006000:	c40e02ec 	.word	0xc40e02ec
 8006004:	423da41a 	.word	0x423da41a
 8006008:	bfa28f5c 	.word	0xbfa28f5c
 800600c:	420c0000 	.word	0x420c0000
 8006010:	42700000 	.word	0x42700000
 8006014:	440d1857 	.word	0x440d1857
 8006018:	c181619b 	.word	0xc181619b
 800601c:	3eaab6f2 	.word	0x3eaab6f2
 8006020:	bacaf00f 	.word	0xbacaf00f
 8006024:	42c80000 	.word	0x42c80000
 8006028:	42f00000 	.word	0x42f00000
 800602c:	4559c991 	.word	0x4559c991
 8006030:	41cef541 	.word	0x41cef541
 8006034:	bfbda504 	.word	0xbfbda504
 8006038:	3c22339c 	.word	0x3c22339c
 800603c:	200002bc 	.word	0x200002bc
 8006040:	2000059f 	.word	0x2000059f
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8006044:	4b79      	ldr	r3, [pc, #484]	; (800622c <calWallConrol+0xb4c>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4b77      	ldr	r3, [pc, #476]	; (800622c <calWallConrol+0xb4c>)
 8006050:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006052:	4b77      	ldr	r3, [pc, #476]	; (8006230 <calWallConrol+0xb50>)
 8006054:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006060:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8006076:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <calWallConrol+0xb54>)
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006088:	dd12      	ble.n	80060b0 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 800608a:	4b6a      	ldr	r3, [pc, #424]	; (8006234 <calWallConrol+0xb54>)
 800608c:	edd3 7a00 	vldr	s15, [r3]
 8006090:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8006094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	d808      	bhi.n	80060b0 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 800609e:	4b66      	ldr	r3, [pc, #408]	; (8006238 <calWallConrol+0xb58>)
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80060a2:	4b66      	ldr	r3, [pc, #408]	; (800623c <calWallConrol+0xb5c>)
 80060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80060a6:	4b66      	ldr	r3, [pc, #408]	; (8006240 <calWallConrol+0xb60>)
 80060a8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80060aa:	4b66      	ldr	r3, [pc, #408]	; (8006244 <calWallConrol+0xb64>)
 80060ac:	647b      	str	r3, [r7, #68]	; 0x44
 80060ae:	e05d      	b.n	800616c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80060b0:	4b60      	ldr	r3, [pc, #384]	; (8006234 <calWallConrol+0xb54>)
 80060b2:	edd3 7a00 	vldr	s15, [r3]
 80060b6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8006248 <calWallConrol+0xb68>
 80060ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c2:	dd12      	ble.n	80060ea <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80060c4:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <calWallConrol+0xb54>)
 80060c6:	edd3 7a00 	vldr	s15, [r3]
 80060ca:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800624c <calWallConrol+0xb6c>
 80060ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	d808      	bhi.n	80060ea <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <calWallConrol+0xb70>)
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80060dc:	4b5d      	ldr	r3, [pc, #372]	; (8006254 <calWallConrol+0xb74>)
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 80060e0:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <calWallConrol+0xb78>)
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 80060e4:	4b5d      	ldr	r3, [pc, #372]	; (800625c <calWallConrol+0xb7c>)
 80060e6:	647b      	str	r3, [r7, #68]	; 0x44
 80060e8:	e040      	b.n	800616c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80060ea:	4b52      	ldr	r3, [pc, #328]	; (8006234 <calWallConrol+0xb54>)
 80060ec:	edd3 7a00 	vldr	s15, [r3]
 80060f0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8006260 <calWallConrol+0xb80>
 80060f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	dd12      	ble.n	8006124 <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80060fe:	4b4d      	ldr	r3, [pc, #308]	; (8006234 <calWallConrol+0xb54>)
 8006100:	edd3 7a00 	vldr	s15, [r3]
 8006104:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8006264 <calWallConrol+0xb84>
 8006108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	d808      	bhi.n	8006124 <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 8006112:	4b55      	ldr	r3, [pc, #340]	; (8006268 <calWallConrol+0xb88>)
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8006116:	4b55      	ldr	r3, [pc, #340]	; (800626c <calWallConrol+0xb8c>)
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800611a:	4b55      	ldr	r3, [pc, #340]	; (8006270 <calWallConrol+0xb90>)
 800611c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800611e:	4b55      	ldr	r3, [pc, #340]	; (8006274 <calWallConrol+0xb94>)
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
 8006122:	e023      	b.n	800616c <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8006124:	4b42      	ldr	r3, [pc, #264]	; (8006230 <calWallConrol+0xb50>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2bb4      	cmp	r3, #180	; 0xb4
 800612a:	dd07      	ble.n	800613c <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800612c:	4b3f      	ldr	r3, [pc, #252]	; (800622c <calWallConrol+0xb4c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	b2da      	uxtb	r2, r3
 8006136:	4b3d      	ldr	r3, [pc, #244]	; (800622c <calWallConrol+0xb4c>)
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e006      	b.n	800614a <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800613c:	4b3b      	ldr	r3, [pc, #236]	; (800622c <calWallConrol+0xb4c>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b39      	ldr	r3, [pc, #228]	; (800622c <calWallConrol+0xb4c>)
 8006148:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <calWallConrol+0xb50>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006156:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800616c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8006170:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <calWallConrol+0xb98>)
 8006176:	edd3 7a00 	vldr	s15, [r3]
 800617a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800617e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8006182:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006186:	4b3c      	ldr	r3, [pc, #240]	; (8006278 <calWallConrol+0xb98>)
 8006188:	edd3 7a00 	vldr	s15, [r3]
 800618c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006190:	4b39      	ldr	r3, [pc, #228]	; (8006278 <calWallConrol+0xb98>)
 8006192:	edd3 7a00 	vldr	s15, [r3]
 8006196:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800619a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800619e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80061a2:	4b35      	ldr	r3, [pc, #212]	; (8006278 <calWallConrol+0xb98>)
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80061ac:	4b32      	ldr	r3, [pc, #200]	; (8006278 <calWallConrol+0xb98>)
 80061ae:	edd3 7a00 	vldr	s15, [r3]
 80061b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80061b6:	4b30      	ldr	r3, [pc, #192]	; (8006278 <calWallConrol+0xb98>)
 80061b8:	edd3 7a00 	vldr	s15, [r3]
 80061bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80061c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80061c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80061cc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80061d0:	4b18      	ldr	r3, [pc, #96]	; (8006234 <calWallConrol+0xb54>)
 80061d2:	edd3 7a00 	vldr	s15, [r3]
 80061d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061da:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80061de:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <calWallConrol+0xb54>)
 80061e4:	edd3 7a00 	vldr	s15, [r3]
 80061e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <calWallConrol+0xb54>)
 80061ee:	edd3 7a00 	vldr	s15, [r3]
 80061f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80061f6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80061fa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <calWallConrol+0xb54>)
 8006200:	edd3 7a00 	vldr	s15, [r3]
 8006204:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <calWallConrol+0xb54>)
 800620a:	edd3 7a00 	vldr	s15, [r3]
 800620e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006212:	4b08      	ldr	r3, [pc, #32]	; (8006234 <calWallConrol+0xb54>)
 8006214:	edd3 7a00 	vldr	s15, [r3]
 8006218:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800621c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006220:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8006224:	230b      	movs	r3, #11
 8006226:	67bb      	str	r3, [r7, #120]	; 0x78
 8006228:	e041      	b.n	80062ae <calWallConrol+0xbce>
 800622a:	bf00      	nop
 800622c:	2000059f 	.word	0x2000059f
 8006230:	200002bc 	.word	0x200002bc
 8006234:	200005ec 	.word	0x200005ec
 8006238:	44f286e9 	.word	0x44f286e9
 800623c:	c3c54757 	.word	0xc3c54757
 8006240:	41e9f1c4 	.word	0x41e9f1c4
 8006244:	bf307804 	.word	0xbf307804
 8006248:	420c0000 	.word	0x420c0000
 800624c:	42700000 	.word	0x42700000
 8006250:	43b4a7f9 	.word	0x43b4a7f9
 8006254:	c04f43da 	.word	0xc04f43da
 8006258:	3a9164ed 	.word	0x3a9164ed
 800625c:	3a8c6aa9 	.word	0x3a8c6aa9
 8006260:	42c80000 	.word	0x42c80000
 8006264:	42f00000 	.word	0x42f00000
 8006268:	478c2a26 	.word	0x478c2a26
 800626c:	c4fbb229 	.word	0xc4fbb229
 8006270:	4195b611 	.word	0x4195b611
 8006274:	bd67d567 	.word	0xbd67d567
 8006278:	200005e8 	.word	0x200005e8
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	3b01      	subs	r3, #1
 8006280:	4a9c      	ldr	r2, [pc, #624]	; (80064f4 <calWallConrol+0xe14>)
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	499a      	ldr	r1, [pc, #616]	; (80064f4 <calWallConrol+0xe14>)
 800628a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8006292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006294:	3b01      	subs	r3, #1
 8006296:	4a98      	ldr	r2, [pc, #608]	; (80064f8 <calWallConrol+0xe18>)
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4996      	ldr	r1, [pc, #600]	; (80064f8 <calWallConrol+0xe18>)
 80062a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80062a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062aa:	3b01      	subs	r3, #1
 80062ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dce3      	bgt.n	800627c <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80062b4:	4a8f      	ldr	r2, [pc, #572]	; (80064f4 <calWallConrol+0xe14>)
 80062b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80062ba:	4a8f      	ldr	r2, [pc, #572]	; (80064f8 <calWallConrol+0xe18>)
 80062bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062be:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80062c0:	4b8c      	ldr	r3, [pc, #560]	; (80064f4 <calWallConrol+0xe14>)
 80062c2:	ed93 7a00 	vldr	s14, [r3]
 80062c6:	4b8b      	ldr	r3, [pc, #556]	; (80064f4 <calWallConrol+0xe14>)
 80062c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80062cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062d0:	4b8a      	ldr	r3, [pc, #552]	; (80064fc <calWallConrol+0xe1c>)
 80062d2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80062d6:	4b88      	ldr	r3, [pc, #544]	; (80064f8 <calWallConrol+0xe18>)
 80062d8:	ed93 7a00 	vldr	s14, [r3]
 80062dc:	4b86      	ldr	r3, [pc, #536]	; (80064f8 <calWallConrol+0xe18>)
 80062de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80062e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e6:	4b86      	ldr	r3, [pc, #536]	; (8006500 <calWallConrol+0xe20>)
 80062e8:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 80062ec:	4b85      	ldr	r3, [pc, #532]	; (8006504 <calWallConrol+0xe24>)
 80062ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062f2:	2bb4      	cmp	r3, #180	; 0xb4
 80062f4:	dd1a      	ble.n	800632c <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80062f6:	4b84      	ldr	r3, [pc, #528]	; (8006508 <calWallConrol+0xe28>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006302:	4b7e      	ldr	r3, [pc, #504]	; (80064fc <calWallConrol+0xe1c>)
 8006304:	edd3 7a00 	vldr	s15, [r3]
 8006308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800630c:	eef0 7ae7 	vabs.f32	s15, s15
 8006310:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800650c <calWallConrol+0xe2c>
 8006314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631c:	d506      	bpl.n	800632c <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800631e:	4b7c      	ldr	r3, [pc, #496]	; (8006510 <calWallConrol+0xe30>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f043 0302 	orr.w	r3, r3, #2
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b79      	ldr	r3, [pc, #484]	; (8006510 <calWallConrol+0xe30>)
 800632a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 800632c:	4b75      	ldr	r3, [pc, #468]	; (8006504 <calWallConrol+0xe24>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2bb4      	cmp	r3, #180	; 0xb4
 8006332:	dd1a      	ble.n	800636a <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8006334:	4b74      	ldr	r3, [pc, #464]	; (8006508 <calWallConrol+0xe28>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006340:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <calWallConrol+0xe20>)
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800634a:	eef0 7ae7 	vabs.f32	s15, s15
 800634e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800650c <calWallConrol+0xe2c>
 8006352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635a:	d506      	bpl.n	800636a <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800635c:	4b6c      	ldr	r3, [pc, #432]	; (8006510 <calWallConrol+0xe30>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	b2da      	uxtb	r2, r3
 8006366:	4b6a      	ldr	r3, [pc, #424]	; (8006510 <calWallConrol+0xe30>)
 8006368:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 800636a:	4b66      	ldr	r3, [pc, #408]	; (8006504 <calWallConrol+0xe24>)
 800636c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006370:	2bb3      	cmp	r3, #179	; 0xb3
 8006372:	dd13      	ble.n	800639c <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8006374:	4b64      	ldr	r3, [pc, #400]	; (8006508 <calWallConrol+0xe28>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006380:	4b5e      	ldr	r3, [pc, #376]	; (80064fc <calWallConrol+0xe1c>)
 8006382:	edd3 7a00 	vldr	s15, [r3]
 8006386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800638a:	eef0 7ae7 	vabs.f32	s15, s15
 800638e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800650c <calWallConrol+0xe2c>
 8006392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639a:	dd06      	ble.n	80063aa <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800639c:	4b5c      	ldr	r3, [pc, #368]	; (8006510 <calWallConrol+0xe30>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f023 0302 	bic.w	r3, r3, #2
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4b5a      	ldr	r3, [pc, #360]	; (8006510 <calWallConrol+0xe30>)
 80063a8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80063aa:	4b56      	ldr	r3, [pc, #344]	; (8006504 <calWallConrol+0xe24>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2bb3      	cmp	r3, #179	; 0xb3
 80063b0:	dd13      	ble.n	80063da <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80063b2:	4b55      	ldr	r3, [pc, #340]	; (8006508 <calWallConrol+0xe28>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063be:	4b50      	ldr	r3, [pc, #320]	; (8006500 <calWallConrol+0xe20>)
 80063c0:	edd3 7a00 	vldr	s15, [r3]
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c8:	eef0 7ae7 	vabs.f32	s15, s15
 80063cc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800650c <calWallConrol+0xe2c>
 80063d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d8:	dd06      	ble.n	80063e8 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80063da:	4b4d      	ldr	r3, [pc, #308]	; (8006510 <calWallConrol+0xe30>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b4a      	ldr	r3, [pc, #296]	; (8006510 <calWallConrol+0xe30>)
 80063e6:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 80063e8:	4b49      	ldr	r3, [pc, #292]	; (8006510 <calWallConrol+0xe30>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	f200 813d 	bhi.w	800666c <calWallConrol+0xf8c>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <calWallConrol+0xd18>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006409 	.word	0x08006409
 80063fc:	0800645d 	.word	0x0800645d
 8006400:	08006521 	.word	0x08006521
 8006404:	080065b7 	.word	0x080065b7
		case 0:			//両壁なし
			PID_wall = 0;
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8006410:	2000      	movs	r0, #0
 8006412:	f001 faf7 	bl	8007a04 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006416:	2000      	movs	r0, #0
 8006418:	f001 fb2a 	bl	8007a70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 800641c:	4b39      	ldr	r3, [pc, #228]	; (8006504 <calWallConrol+0xe24>)
 800641e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800642a:	4b3a      	ldr	r3, [pc, #232]	; (8006514 <calWallConrol+0xe34>)
 800642c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006430:	4b34      	ldr	r3, [pc, #208]	; (8006504 <calWallConrol+0xe24>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800643c:	4b36      	ldr	r3, [pc, #216]	; (8006518 <calWallConrol+0xe38>)
 800643e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <calWallConrol+0xe3c>)
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 800644a:	4b34      	ldr	r3, [pc, #208]	; (800651c <calWallConrol+0xe3c>)
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8006452:	4b32      	ldr	r3, [pc, #200]	; (800651c <calWallConrol+0xe3c>)
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
			break;
 800645a:	e107      	b.n	800666c <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 800645c:	2000      	movs	r0, #0
 800645e:	f001 fad1 	bl	8007a04 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8006462:	2001      	movs	r0, #1
 8006464:	f001 fb04 	bl	8007a70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006468:	4b26      	ldr	r3, [pc, #152]	; (8006504 <calWallConrol+0xe24>)
 800646a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <calWallConrol+0xe34>)
 8006478:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 800647c:	4a26      	ldr	r2, [pc, #152]	; (8006518 <calWallConrol+0xe38>)
 800647e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006480:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <calWallConrol+0xe24>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800648e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006496:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <calWallConrol+0xe24>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80064aa:	4b1c      	ldr	r3, [pc, #112]	; (800651c <calWallConrol+0xe3c>)
 80064ac:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80064b0:	4b1a      	ldr	r3, [pc, #104]	; (800651c <calWallConrol+0xe3c>)
 80064b2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80064b6:	4b19      	ldr	r3, [pc, #100]	; (800651c <calWallConrol+0xe3c>)
 80064b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80064bc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80064c0:	4b16      	ldr	r3, [pc, #88]	; (800651c <calWallConrol+0xe3c>)
 80064c2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80064c6:	4b15      	ldr	r3, [pc, #84]	; (800651c <calWallConrol+0xe3c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a14      	ldr	r2, [pc, #80]	; (800651c <calWallConrol+0xe3c>)
 80064cc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <calWallConrol+0xe3c>)
 80064d0:	ed93 7a00 	vldr	s14, [r3]
 80064d4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80064d8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <calWallConrol+0xe3c>)
 80064de:	edd3 6a02 	vldr	s13, [r3, #8]
 80064e2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80064e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80064ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80064f2:	e0bb      	b.n	800666c <calWallConrol+0xf8c>
 80064f4:	20000614 	.word	0x20000614
 80064f8:	20000644 	.word	0x20000644
 80064fc:	200006d4 	.word	0x200006d4
 8006500:	200006d8 	.word	0x200006d8
 8006504:	200002bc 	.word	0x200002bc
 8006508:	2000044c 	.word	0x2000044c
 800650c:	42a00000 	.word	0x42a00000
 8006510:	2000059f 	.word	0x2000059f
 8006514:	200005b8 	.word	0x200005b8
 8006518:	200005bc 	.word	0x200005bc
 800651c:	20000584 	.word	0x20000584
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8006520:	2001      	movs	r0, #1
 8006522:	f001 fa6f 	bl	8007a04 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006526:	2000      	movs	r0, #0
 8006528:	f001 faa2 	bl	8007a70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 800652c:	4aa4      	ldr	r2, [pc, #656]	; (80067c0 <calWallConrol+0x10e0>)
 800652e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006530:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006532:	4ba4      	ldr	r3, [pc, #656]	; (80067c4 <calWallConrol+0x10e4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800653e:	4ba2      	ldr	r3, [pc, #648]	; (80067c8 <calWallConrol+0x10e8>)
 8006540:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8006544:	4b9f      	ldr	r3, [pc, #636]	; (80067c4 <calWallConrol+0x10e4>)
 8006546:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006552:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006556:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 800655a:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <calWallConrol+0x10e4>)
 800655c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006560:	ee07 3a90 	vmov	s15, r3
 8006564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006568:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800656c:	4b97      	ldr	r3, [pc, #604]	; (80067cc <calWallConrol+0x10ec>)
 800656e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006572:	4b96      	ldr	r3, [pc, #600]	; (80067cc <calWallConrol+0x10ec>)
 8006574:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006578:	4b94      	ldr	r3, [pc, #592]	; (80067cc <calWallConrol+0x10ec>)
 800657a:	edd3 7a01 	vldr	s15, [r3, #4]
 800657e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006582:	4b92      	ldr	r3, [pc, #584]	; (80067cc <calWallConrol+0x10ec>)
 8006584:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8006588:	4b90      	ldr	r3, [pc, #576]	; (80067cc <calWallConrol+0x10ec>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a8f      	ldr	r2, [pc, #572]	; (80067cc <calWallConrol+0x10ec>)
 800658e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006590:	4b8e      	ldr	r3, [pc, #568]	; (80067cc <calWallConrol+0x10ec>)
 8006592:	ed93 7a00 	vldr	s14, [r3]
 8006596:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800659a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800659e:	4b8b      	ldr	r3, [pc, #556]	; (80067cc <calWallConrol+0x10ec>)
 80065a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80065a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80065a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80065ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80065b4:	e05a      	b.n	800666c <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80065b6:	2001      	movs	r0, #1
 80065b8:	f001 fa24 	bl	8007a04 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80065bc:	2001      	movs	r0, #1
 80065be:	f001 fa57 	bl	8007a70 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80065c2:	4a7f      	ldr	r2, [pc, #508]	; (80067c0 <calWallConrol+0x10e0>)
 80065c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80065c8:	4a7f      	ldr	r2, [pc, #508]	; (80067c8 <calWallConrol+0x10e8>)
 80065ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065cc:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80065ce:	4b7d      	ldr	r3, [pc, #500]	; (80067c4 <calWallConrol+0x10e4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80065de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 80065e6:	4b77      	ldr	r3, [pc, #476]	; (80067c4 <calWallConrol+0x10e4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 80065f6:	4b73      	ldr	r3, [pc, #460]	; (80067c4 <calWallConrol+0x10e4>)
 80065f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006604:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006608:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 800660c:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <calWallConrol+0x10e4>)
 800660e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800661a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800661e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006622:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <calWallConrol+0x10ec>)
 8006624:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006628:	4b68      	ldr	r3, [pc, #416]	; (80067cc <calWallConrol+0x10ec>)
 800662a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800662e:	4b67      	ldr	r3, [pc, #412]	; (80067cc <calWallConrol+0x10ec>)
 8006630:	edd3 7a01 	vldr	s15, [r3, #4]
 8006634:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006638:	4b64      	ldr	r3, [pc, #400]	; (80067cc <calWallConrol+0x10ec>)
 800663a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800663e:	4b63      	ldr	r3, [pc, #396]	; (80067cc <calWallConrol+0x10ec>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a62      	ldr	r2, [pc, #392]	; (80067cc <calWallConrol+0x10ec>)
 8006644:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006646:	4b61      	ldr	r3, [pc, #388]	; (80067cc <calWallConrol+0x10ec>)
 8006648:	ed93 7a00 	vldr	s14, [r3]
 800664c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006650:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006654:	4b5d      	ldr	r3, [pc, #372]	; (80067cc <calWallConrol+0x10ec>)
 8006656:	edd3 6a02 	vldr	s13, [r3, #8]
 800665a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800665e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006666:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800666a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 800666c:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <calWallConrol+0x10f0>)
 800666e:	edd3 7a00 	vldr	s15, [r3]
 8006672:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80067d4 <calWallConrol+0x10f4>
 8006676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	dd04      	ble.n	800668a <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 8006680:	4b55      	ldr	r3, [pc, #340]	; (80067d8 <calWallConrol+0x10f8>)
 8006682:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 8006684:	4b55      	ldr	r3, [pc, #340]	; (80067dc <calWallConrol+0x10fc>)
 8006686:	673b      	str	r3, [r7, #112]	; 0x70
 8006688:	e023      	b.n	80066d2 <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 800668a:	4b51      	ldr	r3, [pc, #324]	; (80067d0 <calWallConrol+0x10f0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7f9 ff82 	bl	8000598 <__aeabi_f2d>
 8006694:	a346      	add	r3, pc, #280	; (adr r3, 80067b0 <calWallConrol+0x10d0>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 ffd5 	bl	8000648 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fa faa7 	bl	8000bf8 <__aeabi_d2f>
 80066aa:	4603      	mov	r3, r0
 80066ac:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80066ae:	4b48      	ldr	r3, [pc, #288]	; (80067d0 <calWallConrol+0x10f0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7f9 ff70 	bl	8000598 <__aeabi_f2d>
 80066b8:	a33f      	add	r3, pc, #252	; (adr r3, 80067b8 <calWallConrol+0x10d8>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 ffc3 	bl	8000648 <__aeabi_dmul>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f7fa fa95 	bl	8000bf8 <__aeabi_d2f>
 80066ce:	4603      	mov	r3, r0
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80066d2:	4b43      	ldr	r3, [pc, #268]	; (80067e0 <calWallConrol+0x1100>)
 80066d4:	edd3 7a00 	vldr	s15, [r3]
 80066d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80066dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e4:	dd12      	ble.n	800670c <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 80066e6:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <calWallConrol+0x1100>)
 80066e8:	edd3 7a00 	vldr	s15, [r3]
 80066ec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80067e4 <calWallConrol+0x1104>
 80066f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f8:	d808      	bhi.n	800670c <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 80066fa:	4b3b      	ldr	r3, [pc, #236]	; (80067e8 <calWallConrol+0x1108>)
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 80066fe:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <calWallConrol+0x110c>)
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <calWallConrol+0x1110>)
 8006704:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <calWallConrol+0x1114>)
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
 800670a:	e025      	b.n	8006758 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 800670c:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <calWallConrol+0x10e4>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006712:	2bdc      	cmp	r3, #220	; 0xdc
 8006714:	dd07      	ble.n	8006726 <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006716:	4b38      	ldr	r3, [pc, #224]	; (80067f8 <calWallConrol+0x1118>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	b2da      	uxtb	r2, r3
 8006720:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <calWallConrol+0x1118>)
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e006      	b.n	8006734 <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006726:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <calWallConrol+0x1118>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f023 0302 	bic.w	r3, r3, #2
 800672e:	b2da      	uxtb	r2, r3
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <calWallConrol+0x1118>)
 8006732:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8006734:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <calWallConrol+0x10e4>)
 8006736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006742:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8006758:	4b28      	ldr	r3, [pc, #160]	; (80067fc <calWallConrol+0x111c>)
 800675a:	edd3 7a00 	vldr	s15, [r3]
 800675e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676a:	dd12      	ble.n	8006792 <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 800676c:	4b23      	ldr	r3, [pc, #140]	; (80067fc <calWallConrol+0x111c>)
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80067e4 <calWallConrol+0x1104>
 8006776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	d808      	bhi.n	8006792 <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8006780:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <calWallConrol+0x1120>)
 8006782:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8006784:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <calWallConrol+0x1124>)
 8006786:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8006788:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <calWallConrol+0x1128>)
 800678a:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 800678c:	4b1f      	ldr	r3, [pc, #124]	; (800680c <calWallConrol+0x112c>)
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
 8006790:	e056      	b.n	8006840 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <calWallConrol+0x10e4>)
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	2bdc      	cmp	r3, #220	; 0xdc
 8006798:	dd3a      	ble.n	8006810 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 800679a:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <calWallConrol+0x1118>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <calWallConrol+0x1118>)
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e039      	b.n	800681e <calWallConrol+0x113e>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	33333333 	.word	0x33333333
 80067b4:	3fe33333 	.word	0x3fe33333
 80067b8:	eb851eb8 	.word	0xeb851eb8
 80067bc:	bfaeb851 	.word	0xbfaeb851
 80067c0:	200005b8 	.word	0x200005b8
 80067c4:	200002bc 	.word	0x200002bc
 80067c8:	200005bc 	.word	0x200005bc
 80067cc:	20000584 	.word	0x20000584
 80067d0:	200004dc 	.word	0x200004dc
 80067d4:	447a0000 	.word	0x447a0000
 80067d8:	44160000 	.word	0x44160000
 80067dc:	c2700000 	.word	0xc2700000
 80067e0:	200005e8 	.word	0x200005e8
 80067e4:	42a00000 	.word	0x42a00000
 80067e8:	43e7e73c 	.word	0x43e7e73c
 80067ec:	c0f9d45b 	.word	0xc0f9d45b
 80067f0:	3e043787 	.word	0x3e043787
 80067f4:	b83cbe62 	.word	0xb83cbe62
 80067f8:	200005a0 	.word	0x200005a0
 80067fc:	200005ec 	.word	0x200005ec
 8006800:	440fa6b0 	.word	0x440fa6b0
 8006804:	c1892199 	.word	0xc1892199
 8006808:	3ea1604b 	.word	0x3ea1604b
 800680c:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006810:	4bb5      	ldr	r3, [pc, #724]	; (8006ae8 <calWallConrol+0x1408>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4bb3      	ldr	r3, [pc, #716]	; (8006ae8 <calWallConrol+0x1408>)
 800681c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 800681e:	4bb3      	ldr	r3, [pc, #716]	; (8006aec <calWallConrol+0x140c>)
 8006820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800682a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8006840:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8006844:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006848:	4ba9      	ldr	r3, [pc, #676]	; (8006af0 <calWallConrol+0x1410>)
 800684a:	edd3 7a00 	vldr	s15, [r3]
 800684e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006852:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8006856:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800685a:	4ba5      	ldr	r3, [pc, #660]	; (8006af0 <calWallConrol+0x1410>)
 800685c:	edd3 7a00 	vldr	s15, [r3]
 8006860:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006864:	4ba2      	ldr	r3, [pc, #648]	; (8006af0 <calWallConrol+0x1410>)
 8006866:	edd3 7a00 	vldr	s15, [r3]
 800686a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800686e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8006872:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006876:	4b9e      	ldr	r3, [pc, #632]	; (8006af0 <calWallConrol+0x1410>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006880:	4b9b      	ldr	r3, [pc, #620]	; (8006af0 <calWallConrol+0x1410>)
 8006882:	edd3 7a00 	vldr	s15, [r3]
 8006886:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800688a:	4b99      	ldr	r3, [pc, #612]	; (8006af0 <calWallConrol+0x1410>)
 800688c:	edd3 7a00 	vldr	s15, [r3]
 8006890:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8006894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006898:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 800689c:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 80068a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068a4:	4b93      	ldr	r3, [pc, #588]	; (8006af4 <calWallConrol+0x1414>)
 80068a6:	edd3 7a00 	vldr	s15, [r3]
 80068aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80068b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80068b6:	4b8f      	ldr	r3, [pc, #572]	; (8006af4 <calWallConrol+0x1414>)
 80068b8:	edd3 7a00 	vldr	s15, [r3]
 80068bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80068c0:	4b8c      	ldr	r3, [pc, #560]	; (8006af4 <calWallConrol+0x1414>)
 80068c2:	edd3 7a00 	vldr	s15, [r3]
 80068c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80068ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 80068ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80068d2:	4b88      	ldr	r3, [pc, #544]	; (8006af4 <calWallConrol+0x1414>)
 80068d4:	edd3 7a00 	vldr	s15, [r3]
 80068d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80068dc:	4b85      	ldr	r3, [pc, #532]	; (8006af4 <calWallConrol+0x1414>)
 80068de:	edd3 7a00 	vldr	s15, [r3]
 80068e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80068e6:	4b83      	ldr	r3, [pc, #524]	; (8006af4 <calWallConrol+0x1414>)
 80068e8:	edd3 7a00 	vldr	s15, [r3]
 80068ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 80068f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 80068f8:	230b      	movs	r3, #11
 80068fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068fc:	e018      	b.n	8006930 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 80068fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006900:	3b01      	subs	r3, #1
 8006902:	4a7d      	ldr	r2, [pc, #500]	; (8006af8 <calWallConrol+0x1418>)
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	497b      	ldr	r1, [pc, #492]	; (8006af8 <calWallConrol+0x1418>)
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006916:	3b01      	subs	r3, #1
 8006918:	4a78      	ldr	r2, [pc, #480]	; (8006afc <calWallConrol+0x141c>)
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4976      	ldr	r1, [pc, #472]	; (8006afc <calWallConrol+0x141c>)
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	3b01      	subs	r3, #1
 800692e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006932:	2b00      	cmp	r3, #0
 8006934:	dce3      	bgt.n	80068fe <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8006936:	4a70      	ldr	r2, [pc, #448]	; (8006af8 <calWallConrol+0x1418>)
 8006938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 800693c:	4a6f      	ldr	r2, [pc, #444]	; (8006afc <calWallConrol+0x141c>)
 800693e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006940:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8006942:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <calWallConrol+0x1418>)
 8006944:	ed93 7a00 	vldr	s14, [r3]
 8006948:	4b6b      	ldr	r3, [pc, #428]	; (8006af8 <calWallConrol+0x1418>)
 800694a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800694e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006952:	4b6b      	ldr	r3, [pc, #428]	; (8006b00 <calWallConrol+0x1420>)
 8006954:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8006958:	4b68      	ldr	r3, [pc, #416]	; (8006afc <calWallConrol+0x141c>)
 800695a:	ed93 7a00 	vldr	s14, [r3]
 800695e:	4b67      	ldr	r3, [pc, #412]	; (8006afc <calWallConrol+0x141c>)
 8006960:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006968:	4b66      	ldr	r3, [pc, #408]	; (8006b04 <calWallConrol+0x1424>)
 800696a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 800696e:	4b5f      	ldr	r3, [pc, #380]	; (8006aec <calWallConrol+0x140c>)
 8006970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006974:	2bdc      	cmp	r3, #220	; 0xdc
 8006976:	dd1a      	ble.n	80069ae <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006978:	4b63      	ldr	r3, [pc, #396]	; (8006b08 <calWallConrol+0x1428>)
 800697a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006984:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <calWallConrol+0x1420>)
 8006986:	edd3 7a00 	vldr	s15, [r3]
 800698a:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 800698e:	eef0 7ae7 	vabs.f32	s15, s15
 8006992:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006b0c <calWallConrol+0x142c>
 8006996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	d506      	bpl.n	80069ae <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80069a0:	4b51      	ldr	r3, [pc, #324]	; (8006ae8 <calWallConrol+0x1408>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	f043 0302 	orr.w	r3, r3, #2
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	4b4f      	ldr	r3, [pc, #316]	; (8006ae8 <calWallConrol+0x1408>)
 80069ac:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80069ae:	4b4f      	ldr	r3, [pc, #316]	; (8006aec <calWallConrol+0x140c>)
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	2bdc      	cmp	r3, #220	; 0xdc
 80069b4:	dd1a      	ble.n	80069ec <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80069b6:	4b54      	ldr	r3, [pc, #336]	; (8006b08 <calWallConrol+0x1428>)
 80069b8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c2:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <calWallConrol+0x1424>)
 80069c4:	edd3 7a00 	vldr	s15, [r3]
 80069c8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80069cc:	eef0 7ae7 	vabs.f32	s15, s15
 80069d0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006b0c <calWallConrol+0x142c>
 80069d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069dc:	d506      	bpl.n	80069ec <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 80069de:	4b42      	ldr	r3, [pc, #264]	; (8006ae8 <calWallConrol+0x1408>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b3f      	ldr	r3, [pc, #252]	; (8006ae8 <calWallConrol+0x1408>)
 80069ea:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 80069ec:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <calWallConrol+0x140c>)
 80069ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f2:	2bdb      	cmp	r3, #219	; 0xdb
 80069f4:	dd13      	ble.n	8006a1e <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80069f6:	4b44      	ldr	r3, [pc, #272]	; (8006b08 <calWallConrol+0x1428>)
 80069f8:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a02:	4b3f      	ldr	r3, [pc, #252]	; (8006b00 <calWallConrol+0x1420>)
 8006a04:	edd3 7a00 	vldr	s15, [r3]
 8006a08:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8006a10:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006b0c <calWallConrol+0x142c>
 8006a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a1c:	dd06      	ble.n	8006a2c <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006a1e:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <calWallConrol+0x1408>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f023 0302 	bic.w	r3, r3, #2
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <calWallConrol+0x1408>)
 8006a2a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8006a2c:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <calWallConrol+0x140c>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	2bdb      	cmp	r3, #219	; 0xdb
 8006a32:	dd13      	ble.n	8006a5c <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006a34:	4b34      	ldr	r3, [pc, #208]	; (8006b08 <calWallConrol+0x1428>)
 8006a36:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006a38:	ee07 3a90 	vmov	s15, r3
 8006a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <calWallConrol+0x1424>)
 8006a42:	edd3 7a00 	vldr	s15, [r3]
 8006a46:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006a4a:	eef0 7ae7 	vabs.f32	s15, s15
 8006a4e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006b0c <calWallConrol+0x142c>
 8006a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5a:	dd06      	ble.n	8006a6a <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006a5c:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <calWallConrol+0x1408>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b20      	ldr	r3, [pc, #128]	; (8006ae8 <calWallConrol+0x1408>)
 8006a68:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <calWallConrol+0x1408>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	f200 8155 	bhi.w	8006d1e <calWallConrol+0x163e>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <calWallConrol+0x139c>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006a8d 	.word	0x08006a8d
 8006a80:	08006b21 	.word	0x08006b21
 8006a84:	08006bc1 	.word	0x08006bc1
 8006a88:	08006c5f 	.word	0x08006c5f
		case 0:			//両壁なし
			PID_wall += 0;
 8006a8c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006a90:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006b10 <calWallConrol+0x1430>
 8006a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a98:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f000 ffc3 	bl	8007a28 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	f000 ffd2 	bl	8007a4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006aa8:	4b10      	ldr	r3, [pc, #64]	; (8006aec <calWallConrol+0x140c>)
 8006aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ab6:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <calWallConrol+0x1434>)
 8006ab8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <calWallConrol+0x140c>)
 8006abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <calWallConrol+0x1438>)
 8006aca:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <calWallConrol+0x143c>)
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <calWallConrol+0x143c>)
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <calWallConrol+0x143c>)
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
			break;
 8006ae6:	e11a      	b.n	8006d1e <calWallConrol+0x163e>
 8006ae8:	200005a0 	.word	0x200005a0
 8006aec:	200002bc 	.word	0x200002bc
 8006af0:	200005e8 	.word	0x200005e8
 8006af4:	200005ec 	.word	0x200005ec
 8006af8:	20000674 	.word	0x20000674
 8006afc:	200006a4 	.word	0x200006a4
 8006b00:	200006dc 	.word	0x200006dc
 8006b04:	200006e0 	.word	0x200006e0
 8006b08:	2000044c 	.word	0x2000044c
 8006b0c:	42a00000 	.word	0x42a00000
 8006b10:	00000000 	.word	0x00000000
 8006b14:	200005b0 	.word	0x200005b0
 8006b18:	200005b4 	.word	0x200005b4
 8006b1c:	20000590 	.word	0x20000590
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006b20:	2000      	movs	r0, #0
 8006b22:	f000 ff81 	bl	8007a28 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006b26:	2001      	movs	r0, #1
 8006b28:	f000 ff90 	bl	8007a4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006b2c:	4b87      	ldr	r3, [pc, #540]	; (8006d4c <calWallConrol+0x166c>)
 8006b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b3a:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <calWallConrol+0x1670>)
 8006b3c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006b40:	4a84      	ldr	r2, [pc, #528]	; (8006d54 <calWallConrol+0x1674>)
 8006b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b44:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8006b46:	4b81      	ldr	r3, [pc, #516]	; (8006d4c <calWallConrol+0x166c>)
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b52:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006b5e:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <calWallConrol+0x166c>)
 8006b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006b6e:	4b7a      	ldr	r3, [pc, #488]	; (8006d58 <calWallConrol+0x1678>)
 8006b70:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006b74:	4b78      	ldr	r3, [pc, #480]	; (8006d58 <calWallConrol+0x1678>)
 8006b76:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006b7a:	4b77      	ldr	r3, [pc, #476]	; (8006d58 <calWallConrol+0x1678>)
 8006b7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b80:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006b84:	4b74      	ldr	r3, [pc, #464]	; (8006d58 <calWallConrol+0x1678>)
 8006b86:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006b8a:	4b73      	ldr	r3, [pc, #460]	; (8006d58 <calWallConrol+0x1678>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a72      	ldr	r2, [pc, #456]	; (8006d58 <calWallConrol+0x1678>)
 8006b90:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006b92:	4b71      	ldr	r3, [pc, #452]	; (8006d58 <calWallConrol+0x1678>)
 8006b94:	ed93 7a00 	vldr	s14, [r3]
 8006b98:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006ba0:	4b6d      	ldr	r3, [pc, #436]	; (8006d58 <calWallConrol+0x1678>)
 8006ba2:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ba6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bae:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006bb2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006bbe:	e0ae      	b.n	8006d1e <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 ff31 	bl	8007a28 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f000 ff40 	bl	8007a4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006bcc:	4a60      	ldr	r2, [pc, #384]	; (8006d50 <calWallConrol+0x1670>)
 8006bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006bd2:	4b5e      	ldr	r3, [pc, #376]	; (8006d4c <calWallConrol+0x166c>)
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bde:	4b5d      	ldr	r3, [pc, #372]	; (8006d54 <calWallConrol+0x1674>)
 8006be0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006be4:	4b59      	ldr	r3, [pc, #356]	; (8006d4c <calWallConrol+0x166c>)
 8006be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006bf6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006bfa:	4b54      	ldr	r3, [pc, #336]	; (8006d4c <calWallConrol+0x166c>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006c0c:	4b52      	ldr	r3, [pc, #328]	; (8006d58 <calWallConrol+0x1678>)
 8006c0e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006c12:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <calWallConrol+0x1678>)
 8006c14:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006c18:	4b4f      	ldr	r3, [pc, #316]	; (8006d58 <calWallConrol+0x1678>)
 8006c1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006c22:	4b4d      	ldr	r3, [pc, #308]	; (8006d58 <calWallConrol+0x1678>)
 8006c24:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006c28:	4b4b      	ldr	r3, [pc, #300]	; (8006d58 <calWallConrol+0x1678>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a4a      	ldr	r2, [pc, #296]	; (8006d58 <calWallConrol+0x1678>)
 8006c2e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c30:	4b49      	ldr	r3, [pc, #292]	; (8006d58 <calWallConrol+0x1678>)
 8006c32:	ed93 7a00 	vldr	s14, [r3]
 8006c36:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006c3e:	4b46      	ldr	r3, [pc, #280]	; (8006d58 <calWallConrol+0x1678>)
 8006c40:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c44:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c50:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c58:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006c5c:	e05f      	b.n	8006d1e <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f000 fee2 	bl	8007a28 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006c64:	2001      	movs	r0, #1
 8006c66:	f000 fef1 	bl	8007a4c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006c6a:	4a39      	ldr	r2, [pc, #228]	; (8006d50 <calWallConrol+0x1670>)
 8006c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006c70:	4a38      	ldr	r2, [pc, #224]	; (8006d54 <calWallConrol+0x1674>)
 8006c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c74:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006c76:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <calWallConrol+0x166c>)
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c82:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c8a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <calWallConrol+0x166c>)
 8006c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006c9e:	4b2b      	ldr	r3, [pc, #172]	; (8006d4c <calWallConrol+0x166c>)
 8006ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006cac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006cb0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <calWallConrol+0x166c>)
 8006cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006cc2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <calWallConrol+0x1678>)
 8006ccc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006cd0:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <calWallConrol+0x1678>)
 8006cd2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006cd6:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <calWallConrol+0x1678>)
 8006cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <calWallConrol+0x1678>)
 8006ce2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <calWallConrol+0x1678>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <calWallConrol+0x1678>)
 8006cec:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006cee:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <calWallConrol+0x1678>)
 8006cf0:	ed93 7a00 	vldr	s14, [r3]
 8006cf4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <calWallConrol+0x1678>)
 8006cfe:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d02:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006d0e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d16:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006d1a:	e000      	b.n	8006d1e <calWallConrol+0x163e>
			break;
 8006d1c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006d1e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006d22:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006d5c <calWallConrol+0x167c>
 8006d26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <calWallConrol+0x1680>)
 8006d2c:	edd3 7a00 	vldr	s15, [r3]
 8006d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d34:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d3a:	ee07 3a90 	vmov	s15, r3
}
 8006d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d42:	37a8      	adds	r7, #168	; 0xa8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200002bc 	.word	0x200002bc
 8006d50:	200005b0 	.word	0x200005b0
 8006d54:	200005b4 	.word	0x200005b4
 8006d58:	20000590 	.word	0x20000590
 8006d5c:	44d1e000 	.word	0x44d1e000
 8006d60:	200004d8 	.word	0x200004d8
 8006d64:	00000000 	.word	0x00000000

08006d68 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006d68:	b5b0      	push	{r4, r5, r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006d6e:	4ba2      	ldr	r3, [pc, #648]	; (8006ff8 <interrupt_WallCut+0x290>)
 8006d70:	edd3 7a00 	vldr	s15, [r3]
 8006d74:	eef0 7ae7 	vabs.f32	s15, s15
 8006d78:	ee17 0a90 	vmov	r0, s15
 8006d7c:	f7f9 fc0c 	bl	8000598 <__aeabi_f2d>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	a198      	add	r1, pc, #608	; (adr r1, 8006fe8 <interrupt_WallCut+0x280>)
 8006d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8a:	f7f9 fd87 	bl	800089c <__aeabi_ddiv>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	ec43 2b17 	vmov	d7, r2, r3
 8006d96:	eeb0 0a47 	vmov.f32	s0, s14
 8006d9a:	eef0 0a67 	vmov.f32	s1, s15
 8006d9e:	f01c fd5b 	bl	8023858 <ceil>
 8006da2:	ec53 2b10 	vmov	r2, r3, d0
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7f9 fefd 	bl	8000ba8 <__aeabi_d2iz>
 8006dae:	4603      	mov	r3, r0
 8006db0:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b0a      	cmp	r3, #10
 8006db6:	dd01      	ble.n	8006dbc <interrupt_WallCut+0x54>
 8006db8:	230b      	movs	r3, #11
 8006dba:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	dc01      	bgt.n	8006dc6 <interrupt_WallCut+0x5e>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e019      	b.n	8006e00 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 8006dcc:	498b      	ldr	r1, [pc, #556]	; (8006ffc <interrupt_WallCut+0x294>)
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	440b      	add	r3, r1
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	4887      	ldr	r0, [pc, #540]	; (8006ffc <interrupt_WallCut+0x294>)
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4413      	add	r3, r2
 8006dec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006df0:	1aca      	subs	r2, r1, r3
 8006df2:	4983      	ldr	r1, [pc, #524]	; (8007000 <interrupt_WallCut+0x298>)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	dde2      	ble.n	8006dcc <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006e06:	4b7f      	ldr	r3, [pc, #508]	; (8007004 <interrupt_WallCut+0x29c>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	f040 8555 	bne.w	80078ba <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006e10:	4b7a      	ldr	r3, [pc, #488]	; (8006ffc <interrupt_WallCut+0x294>)
 8006e12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1a:	dd03      	ble.n	8006e24 <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 8006e1c:	4b7a      	ldr	r3, [pc, #488]	; (8007008 <interrupt_WallCut+0x2a0>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e002      	b.n	8006e2a <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 8006e24:	4b78      	ldr	r3, [pc, #480]	; (8007008 <interrupt_WallCut+0x2a0>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006e2a:	4b74      	ldr	r3, [pc, #464]	; (8006ffc <interrupt_WallCut+0x294>)
 8006e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006e34:	dd03      	ble.n	8006e3e <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 8006e36:	4b75      	ldr	r3, [pc, #468]	; (800700c <interrupt_WallCut+0x2a4>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 8006e3e:	4b73      	ldr	r3, [pc, #460]	; (800700c <interrupt_WallCut+0x2a4>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006e44:	4b6d      	ldr	r3, [pc, #436]	; (8006ffc <interrupt_WallCut+0x294>)
 8006e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e4e:	dd03      	ble.n	8006e58 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8006e50:	4b6f      	ldr	r3, [pc, #444]	; (8007010 <interrupt_WallCut+0x2a8>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	e002      	b.n	8006e5e <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8006e58:	4b6d      	ldr	r3, [pc, #436]	; (8007010 <interrupt_WallCut+0x2a8>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006e5e:	4b67      	ldr	r3, [pc, #412]	; (8006ffc <interrupt_WallCut+0x294>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006e66:	da30      	bge.n	8006eca <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8006e68:	4b6a      	ldr	r3, [pc, #424]	; (8007014 <interrupt_WallCut+0x2ac>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	4a69      	ldr	r2, [pc, #420]	; (8007014 <interrupt_WallCut+0x2ac>)
 8006e70:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006e72:	4b69      	ldr	r3, [pc, #420]	; (8007018 <interrupt_WallCut+0x2b0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7f9 fb8e 	bl	8000598 <__aeabi_f2d>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	460d      	mov	r5, r1
 8006e80:	4b66      	ldr	r3, [pc, #408]	; (800701c <interrupt_WallCut+0x2b4>)
 8006e82:	ed93 7a00 	vldr	s14, [r3]
 8006e86:	4b66      	ldr	r3, [pc, #408]	; (8007020 <interrupt_WallCut+0x2b8>)
 8006e88:	edd3 7a00 	vldr	s15, [r3]
 8006e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006e94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e98:	ee16 0a90 	vmov	r0, s13
 8006e9c:	f7f9 fb7c 	bl	8000598 <__aeabi_f2d>
 8006ea0:	a353      	add	r3, pc, #332	; (adr r3, 8006ff0 <interrupt_WallCut+0x288>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 fbcf 	bl	8000648 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 fa13 	bl	80002dc <__adddf3>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f7f9 fe9b 	bl	8000bf8 <__aeabi_d2f>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a54      	ldr	r2, [pc, #336]	; (8007018 <interrupt_WallCut+0x2b0>)
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	e006      	b.n	8006ed8 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006eca:	4b52      	ldr	r3, [pc, #328]	; (8007014 <interrupt_WallCut+0x2ac>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006ed0:	4b51      	ldr	r3, [pc, #324]	; (8007018 <interrupt_WallCut+0x2b0>)
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006ed8:	4b48      	ldr	r3, [pc, #288]	; (8006ffc <interrupt_WallCut+0x294>)
 8006eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006ee2:	da30      	bge.n	8006f46 <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 8006ee4:	4b4f      	ldr	r3, [pc, #316]	; (8007024 <interrupt_WallCut+0x2bc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	4a4e      	ldr	r2, [pc, #312]	; (8007024 <interrupt_WallCut+0x2bc>)
 8006eec:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006eee:	4b4e      	ldr	r3, [pc, #312]	; (8007028 <interrupt_WallCut+0x2c0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7f9 fb50 	bl	8000598 <__aeabi_f2d>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	4b47      	ldr	r3, [pc, #284]	; (800701c <interrupt_WallCut+0x2b4>)
 8006efe:	ed93 7a00 	vldr	s14, [r3]
 8006f02:	4b47      	ldr	r3, [pc, #284]	; (8007020 <interrupt_WallCut+0x2b8>)
 8006f04:	edd3 7a00 	vldr	s15, [r3]
 8006f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f14:	ee16 0a90 	vmov	r0, s13
 8006f18:	f7f9 fb3e 	bl	8000598 <__aeabi_f2d>
 8006f1c:	a334      	add	r3, pc, #208	; (adr r3, 8006ff0 <interrupt_WallCut+0x288>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 fb91 	bl	8000648 <__aeabi_dmul>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 f9d5 	bl	80002dc <__adddf3>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4610      	mov	r0, r2
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7f9 fe5d 	bl	8000bf8 <__aeabi_d2f>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4a39      	ldr	r2, [pc, #228]	; (8007028 <interrupt_WallCut+0x2c0>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e006      	b.n	8006f54 <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 8006f46:	4b37      	ldr	r3, [pc, #220]	; (8007024 <interrupt_WallCut+0x2bc>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <interrupt_WallCut+0x2c0>)
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006f54:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <interrupt_WallCut+0x298>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006f5c:	da03      	bge.n	8006f66 <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006f5e:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <interrupt_WallCut+0x294>)
 8006f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f62:	2bc8      	cmp	r3, #200	; 0xc8
 8006f64:	dd37      	ble.n	8006fd6 <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006f66:	4b31      	ldr	r3, [pc, #196]	; (800702c <interrupt_WallCut+0x2c4>)
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006f6e:	4b30      	ldr	r3, [pc, #192]	; (8007030 <interrupt_WallCut+0x2c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a2e      	ldr	r2, [pc, #184]	; (8007030 <interrupt_WallCut+0x2c8>)
 8006f76:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006f78:	4b2e      	ldr	r3, [pc, #184]	; (8007034 <interrupt_WallCut+0x2cc>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006f7e:	4b2e      	ldr	r3, [pc, #184]	; (8007038 <interrupt_WallCut+0x2d0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7f9 fb08 	bl	8000598 <__aeabi_f2d>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	4b23      	ldr	r3, [pc, #140]	; (800701c <interrupt_WallCut+0x2b4>)
 8006f8e:	ed93 7a00 	vldr	s14, [r3]
 8006f92:	4b23      	ldr	r3, [pc, #140]	; (8007020 <interrupt_WallCut+0x2b8>)
 8006f94:	edd3 7a00 	vldr	s15, [r3]
 8006f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006fa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fa4:	ee16 0a90 	vmov	r0, s13
 8006fa8:	f7f9 faf6 	bl	8000598 <__aeabi_f2d>
 8006fac:	a310      	add	r3, pc, #64	; (adr r3, 8006ff0 <interrupt_WallCut+0x288>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f7f9 fb49 	bl	8000648 <__aeabi_dmul>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7f9 f98d 	bl	80002dc <__adddf3>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f7f9 fe15 	bl	8000bf8 <__aeabi_d2f>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4a19      	ldr	r2, [pc, #100]	; (8007038 <interrupt_WallCut+0x2d0>)
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e09f      	b.n	8007116 <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <interrupt_WallCut+0x2cc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d16b      	bne.n	80070b6 <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e04b      	b.n	800707c <interrupt_WallCut+0x314>
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	00000000 	.word	0x00000000
 8006fec:	40ab5800 	.word	0x40ab5800
 8006ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ff4:	3f50624d 	.word	0x3f50624d
 8006ff8:	200004dc 	.word	0x200004dc
 8006ffc:	200002bc 	.word	0x200002bc
 8007000:	20000460 	.word	0x20000460
 8007004:	2000059e 	.word	0x2000059e
 8007008:	200005fe 	.word	0x200005fe
 800700c:	200005ff 	.word	0x200005ff
 8007010:	20000600 	.word	0x20000600
 8007014:	200005c4 	.word	0x200005c4
 8007018:	200005dc 	.word	0x200005dc
 800701c:	20000258 	.word	0x20000258
 8007020:	2000025c 	.word	0x2000025c
 8007024:	200005c0 	.word	0x200005c0
 8007028:	200005d8 	.word	0x200005d8
 800702c:	20000604 	.word	0x20000604
 8007030:	200005cc 	.word	0x200005cc
 8007034:	200005f8 	.word	0x200005f8
 8007038:	200005e4 	.word	0x200005e4
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800703c:	4a7c      	ldr	r2, [pc, #496]	; (8007230 <interrupt_WallCut+0x4c8>)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3314      	adds	r3, #20
 8007042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800704e:	4b79      	ldr	r3, [pc, #484]	; (8007234 <interrupt_WallCut+0x4cc>)
 8007050:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8007054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705c:	dd0b      	ble.n	8007076 <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800705e:	4a74      	ldr	r2, [pc, #464]	; (8007230 <interrupt_WallCut+0x4c8>)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3314      	adds	r3, #20
 8007064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8007070:	4b70      	ldr	r3, [pc, #448]	; (8007234 <interrupt_WallCut+0x4cc>)
 8007072:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b13      	cmp	r3, #19
 8007080:	dddc      	ble.n	800703c <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 8007082:	4b6d      	ldr	r3, [pc, #436]	; (8007238 <interrupt_WallCut+0x4d0>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8007088:	4b6c      	ldr	r3, [pc, #432]	; (800723c <interrupt_WallCut+0x4d4>)
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800708e:	4b69      	ldr	r3, [pc, #420]	; (8007234 <interrupt_WallCut+0x4cc>)
 8007090:	edd3 7a00 	vldr	s15, [r3]
 8007094:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007240 <interrupt_WallCut+0x4d8>
 8007098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800709c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007244 <interrupt_WallCut+0x4dc>
 80070a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80070a4:	4b63      	ldr	r3, [pc, #396]	; (8007234 <interrupt_WallCut+0x4cc>)
 80070a6:	ed93 7a00 	vldr	s14, [r3]
 80070aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80070ae:	4b66      	ldr	r3, [pc, #408]	; (8007248 <interrupt_WallCut+0x4e0>)
 80070b0:	edc3 7a00 	vstr	s15, [r3]
 80070b4:	e02f      	b.n	8007116 <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 80070b6:	4b60      	ldr	r3, [pc, #384]	; (8007238 <interrupt_WallCut+0x4d0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a5e      	ldr	r2, [pc, #376]	; (8007238 <interrupt_WallCut+0x4d0>)
 80070be:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80070c0:	4b61      	ldr	r3, [pc, #388]	; (8007248 <interrupt_WallCut+0x4e0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7f9 fa67 	bl	8000598 <__aeabi_f2d>
 80070ca:	4604      	mov	r4, r0
 80070cc:	460d      	mov	r5, r1
 80070ce:	4b5f      	ldr	r3, [pc, #380]	; (800724c <interrupt_WallCut+0x4e4>)
 80070d0:	ed93 7a00 	vldr	s14, [r3]
 80070d4:	4b5e      	ldr	r3, [pc, #376]	; (8007250 <interrupt_WallCut+0x4e8>)
 80070d6:	edd3 7a00 	vldr	s15, [r3]
 80070da:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80070de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80070e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070e6:	ee16 0a90 	vmov	r0, s13
 80070ea:	f7f9 fa55 	bl	8000598 <__aeabi_f2d>
 80070ee:	a34e      	add	r3, pc, #312	; (adr r3, 8007228 <interrupt_WallCut+0x4c0>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 faa8 	bl	8000648 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	f7f9 f8ec 	bl	80002dc <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4610      	mov	r0, r2
 800710a:	4619      	mov	r1, r3
 800710c:	f7f9 fd74 	bl	8000bf8 <__aeabi_d2f>
 8007110:	4603      	mov	r3, r0
 8007112:	4a4d      	ldr	r2, [pc, #308]	; (8007248 <interrupt_WallCut+0x4e0>)
 8007114:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8007116:	4b4f      	ldr	r3, [pc, #316]	; (8007254 <interrupt_WallCut+0x4ec>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800711e:	da05      	bge.n	800712c <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8007120:	4b43      	ldr	r3, [pc, #268]	; (8007230 <interrupt_WallCut+0x4c8>)
 8007122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007126:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800712a:	dd37      	ble.n	800719c <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800712c:	4b4a      	ldr	r3, [pc, #296]	; (8007258 <interrupt_WallCut+0x4f0>)
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8007134:	4b49      	ldr	r3, [pc, #292]	; (800725c <interrupt_WallCut+0x4f4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	4a48      	ldr	r2, [pc, #288]	; (800725c <interrupt_WallCut+0x4f4>)
 800713c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800713e:	4b48      	ldr	r3, [pc, #288]	; (8007260 <interrupt_WallCut+0x4f8>)
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8007144:	4b47      	ldr	r3, [pc, #284]	; (8007264 <interrupt_WallCut+0x4fc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f7f9 fa25 	bl	8000598 <__aeabi_f2d>
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	4b3e      	ldr	r3, [pc, #248]	; (800724c <interrupt_WallCut+0x4e4>)
 8007154:	ed93 7a00 	vldr	s14, [r3]
 8007158:	4b3d      	ldr	r3, [pc, #244]	; (8007250 <interrupt_WallCut+0x4e8>)
 800715a:	edd3 7a00 	vldr	s15, [r3]
 800715e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007162:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007166:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800716a:	ee16 0a90 	vmov	r0, s13
 800716e:	f7f9 fa13 	bl	8000598 <__aeabi_f2d>
 8007172:	a32d      	add	r3, pc, #180	; (adr r3, 8007228 <interrupt_WallCut+0x4c0>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f7f9 fa66 	bl	8000648 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 f8aa 	bl	80002dc <__adddf3>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4610      	mov	r0, r2
 800718e:	4619      	mov	r1, r3
 8007190:	f7f9 fd32 	bl	8000bf8 <__aeabi_d2f>
 8007194:	4603      	mov	r3, r0
 8007196:	4a33      	ldr	r2, [pc, #204]	; (8007264 <interrupt_WallCut+0x4fc>)
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e097      	b.n	80072cc <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800719c:	4b30      	ldr	r3, [pc, #192]	; (8007260 <interrupt_WallCut+0x4f8>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d163      	bne.n	800726c <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	e01f      	b.n	80071ea <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80071aa:	4a21      	ldr	r2, [pc, #132]	; (8007230 <interrupt_WallCut+0x4c8>)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	333c      	adds	r3, #60	; 0x3c
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071bc:	4b26      	ldr	r3, [pc, #152]	; (8007258 <interrupt_WallCut+0x4f0>)
 80071be:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80071c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	dd0b      	ble.n	80071e4 <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80071cc:	4a18      	ldr	r2, [pc, #96]	; (8007230 <interrupt_WallCut+0x4c8>)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	333c      	adds	r3, #60	; 0x3c
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80071de:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <interrupt_WallCut+0x4f0>)
 80071e0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b13      	cmp	r3, #19
 80071ee:	dddc      	ble.n	80071aa <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <interrupt_WallCut+0x4f4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <interrupt_WallCut+0x4f8>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80071fc:	4b16      	ldr	r3, [pc, #88]	; (8007258 <interrupt_WallCut+0x4f0>)
 80071fe:	edd3 7a00 	vldr	s15, [r3]
 8007202:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007268 <interrupt_WallCut+0x500>
 8007206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800720a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007244 <interrupt_WallCut+0x4dc>
 800720e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <interrupt_WallCut+0x4f0>)
 8007214:	ed93 7a00 	vldr	s14, [r3]
 8007218:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800721c:	4b11      	ldr	r3, [pc, #68]	; (8007264 <interrupt_WallCut+0x4fc>)
 800721e:	edc3 7a00 	vstr	s15, [r3]
 8007222:	e053      	b.n	80072cc <interrupt_WallCut+0x564>
 8007224:	f3af 8000 	nop.w
 8007228:	d2f1a9fc 	.word	0xd2f1a9fc
 800722c:	3f50624d 	.word	0x3f50624d
 8007230:	200002bc 	.word	0x200002bc
 8007234:	20000604 	.word	0x20000604
 8007238:	200005cc 	.word	0x200005cc
 800723c:	200005f8 	.word	0x200005f8
 8007240:	43f68000 	.word	0x43f68000
 8007244:	00000000 	.word	0x00000000
 8007248:	200005e4 	.word	0x200005e4
 800724c:	20000258 	.word	0x20000258
 8007250:	2000025c 	.word	0x2000025c
 8007254:	20000460 	.word	0x20000460
 8007258:	20000608 	.word	0x20000608
 800725c:	200005c8 	.word	0x200005c8
 8007260:	200005f9 	.word	0x200005f9
 8007264:	200005e0 	.word	0x200005e0
 8007268:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 800726c:	4b94      	ldr	r3, [pc, #592]	; (80074c0 <interrupt_WallCut+0x758>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a93      	ldr	r2, [pc, #588]	; (80074c0 <interrupt_WallCut+0x758>)
 8007274:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8007276:	4b93      	ldr	r3, [pc, #588]	; (80074c4 <interrupt_WallCut+0x75c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 f98c 	bl	8000598 <__aeabi_f2d>
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	4b90      	ldr	r3, [pc, #576]	; (80074c8 <interrupt_WallCut+0x760>)
 8007286:	ed93 7a00 	vldr	s14, [r3]
 800728a:	4b90      	ldr	r3, [pc, #576]	; (80074cc <interrupt_WallCut+0x764>)
 800728c:	edd3 7a00 	vldr	s15, [r3]
 8007290:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8007294:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007298:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800729c:	ee16 0a90 	vmov	r0, s13
 80072a0:	f7f9 f97a 	bl	8000598 <__aeabi_f2d>
 80072a4:	a384      	add	r3, pc, #528	; (adr r3, 80074b8 <interrupt_WallCut+0x750>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f9 f9cd 	bl	8000648 <__aeabi_dmul>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	f7f9 f811 	bl	80002dc <__adddf3>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	f7f9 fc99 	bl	8000bf8 <__aeabi_d2f>
 80072c6:	4603      	mov	r3, r0
 80072c8:	4a7e      	ldr	r2, [pc, #504]	; (80074c4 <interrupt_WallCut+0x75c>)
 80072ca:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80072cc:	4b80      	ldr	r3, [pc, #512]	; (80074d0 <interrupt_WallCut+0x768>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80072d4:	db5f      	blt.n	8007396 <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80072d6:	4b7f      	ldr	r3, [pc, #508]	; (80074d4 <interrupt_WallCut+0x76c>)
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80072de:	4b7e      	ldr	r3, [pc, #504]	; (80074d8 <interrupt_WallCut+0x770>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	4a7c      	ldr	r2, [pc, #496]	; (80074d8 <interrupt_WallCut+0x770>)
 80072e6:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 80072e8:	2000      	movs	r0, #0
 80072ea:	f000 fccf 	bl	8007c8c <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 80072ee:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <interrupt_WallCut+0x774>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80072f4:	4b7a      	ldr	r3, [pc, #488]	; (80074e0 <interrupt_WallCut+0x778>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7f9 f94d 	bl	8000598 <__aeabi_f2d>
 80072fe:	4604      	mov	r4, r0
 8007300:	460d      	mov	r5, r1
 8007302:	4b71      	ldr	r3, [pc, #452]	; (80074c8 <interrupt_WallCut+0x760>)
 8007304:	ed93 7a00 	vldr	s14, [r3]
 8007308:	4b70      	ldr	r3, [pc, #448]	; (80074cc <interrupt_WallCut+0x764>)
 800730a:	edd3 7a00 	vldr	s15, [r3]
 800730e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007312:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007316:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800731a:	ee16 0a90 	vmov	r0, s13
 800731e:	f7f9 f93b 	bl	8000598 <__aeabi_f2d>
 8007322:	a365      	add	r3, pc, #404	; (adr r3, 80074b8 <interrupt_WallCut+0x750>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f98e 	bl	8000648 <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f8 ffd2 	bl	80002dc <__adddf3>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	f7f9 fc5a 	bl	8000bf8 <__aeabi_d2f>
 8007344:	4603      	mov	r3, r0
 8007346:	4a66      	ldr	r2, [pc, #408]	; (80074e0 <interrupt_WallCut+0x778>)
 8007348:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 800734a:	4b66      	ldr	r3, [pc, #408]	; (80074e4 <interrupt_WallCut+0x77c>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b01      	cmp	r3, #1
 8007350:	f040 812b 	bne.w	80075aa <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007354:	4b64      	ldr	r3, [pc, #400]	; (80074e8 <interrupt_WallCut+0x780>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7f9 f91d 	bl	8000598 <__aeabi_f2d>
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	4b62      	ldr	r3, [pc, #392]	; (80074ec <interrupt_WallCut+0x784>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7f9 f916 	bl	8000598 <__aeabi_f2d>
 800736c:	a352      	add	r3, pc, #328	; (adr r3, 80074b8 <interrupt_WallCut+0x750>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f9 f969 	bl	8000648 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4620      	mov	r0, r4
 800737c:	4629      	mov	r1, r5
 800737e:	f7f8 ffad 	bl	80002dc <__adddf3>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	f7f9 fc35 	bl	8000bf8 <__aeabi_d2f>
 800738e:	4603      	mov	r3, r0
 8007390:	4a55      	ldr	r2, [pc, #340]	; (80074e8 <interrupt_WallCut+0x780>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	e109      	b.n	80075aa <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8007396:	4b51      	ldr	r3, [pc, #324]	; (80074dc <interrupt_WallCut+0x774>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 80ae 	bne.w	80074fc <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 80073a0:	2300      	movs	r3, #0
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e01f      	b.n	80073e6 <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80073a6:	4a52      	ldr	r2, [pc, #328]	; (80074f0 <interrupt_WallCut+0x788>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3314      	adds	r3, #20
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073b8:	4b46      	ldr	r3, [pc, #280]	; (80074d4 <interrupt_WallCut+0x76c>)
 80073ba:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80073be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	dd0b      	ble.n	80073e0 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80073c8:	4a49      	ldr	r2, [pc, #292]	; (80074f0 <interrupt_WallCut+0x788>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3314      	adds	r3, #20
 80073ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80073da:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <interrupt_WallCut+0x76c>)
 80073dc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3301      	adds	r3, #1
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b13      	cmp	r3, #19
 80073ea:	dddc      	ble.n	80073a6 <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 80073ec:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <interrupt_WallCut+0x770>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 80073f2:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <interrupt_WallCut+0x774>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 80073f8:	2001      	movs	r0, #1
 80073fa:	f000 fc47 	bl	8007c8c <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 80073fe:	4b35      	ldr	r3, [pc, #212]	; (80074d4 <interrupt_WallCut+0x76c>)
 8007400:	edd3 7a00 	vldr	s15, [r3]
 8007404:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80074f4 <interrupt_WallCut+0x78c>
 8007408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800740c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	db26      	blt.n	8007464 <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007416:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <interrupt_WallCut+0x76c>)
 8007418:	edd3 7a00 	vldr	s15, [r3]
 800741c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80074f4 <interrupt_WallCut+0x78c>
 8007420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007424:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80074f8 <interrupt_WallCut+0x790>
 8007428:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <interrupt_WallCut+0x76c>)
 800742e:	ed93 7a00 	vldr	s14, [r3]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8007436:	4b2c      	ldr	r3, [pc, #176]	; (80074e8 <interrupt_WallCut+0x780>)
 8007438:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800743c:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <interrupt_WallCut+0x76c>)
 800743e:	edd3 7a00 	vldr	s15, [r3]
 8007442:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80074f4 <interrupt_WallCut+0x78c>
 8007446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800744a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80074f8 <interrupt_WallCut+0x790>
 800744e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007452:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <interrupt_WallCut+0x76c>)
 8007454:	ed93 7a00 	vldr	s14, [r3]
 8007458:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 800745c:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <interrupt_WallCut+0x778>)
 800745e:	edc3 7a00 	vstr	s15, [r3]
 8007462:	e09f      	b.n	80075a4 <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007464:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <interrupt_WallCut+0x76c>)
 8007466:	edd3 7a00 	vldr	s15, [r3]
 800746a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80074f4 <interrupt_WallCut+0x78c>
 800746e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007472:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80074f8 <interrupt_WallCut+0x790>
 8007476:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800747a:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <interrupt_WallCut+0x76c>)
 800747c:	ed93 7a00 	vldr	s14, [r3]
 8007480:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8007484:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <interrupt_WallCut+0x780>)
 8007486:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <interrupt_WallCut+0x76c>)
 800748c:	edd3 7a00 	vldr	s15, [r3]
 8007490:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80074f4 <interrupt_WallCut+0x78c>
 8007494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007498:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80074f8 <interrupt_WallCut+0x790>
 800749c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <interrupt_WallCut+0x76c>)
 80074a2:	ed93 7a00 	vldr	s14, [r3]
 80074a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <interrupt_WallCut+0x778>)
 80074ac:	edc3 7a00 	vstr	s15, [r3]
 80074b0:	e078      	b.n	80075a4 <interrupt_WallCut+0x83c>
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
 80074b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80074bc:	3f50624d 	.word	0x3f50624d
 80074c0:	200005c8 	.word	0x200005c8
 80074c4:	200005e0 	.word	0x200005e0
 80074c8:	20000258 	.word	0x20000258
 80074cc:	2000025c 	.word	0x2000025c
 80074d0:	20000460 	.word	0x20000460
 80074d4:	2000060c 	.word	0x2000060c
 80074d8:	200005d4 	.word	0x200005d4
 80074dc:	200005fa 	.word	0x200005fa
 80074e0:	200005f4 	.word	0x200005f4
 80074e4:	200005fc 	.word	0x200005fc
 80074e8:	200005ec 	.word	0x200005ec
 80074ec:	200004dc 	.word	0x200004dc
 80074f0:	200002bc 	.word	0x200002bc
 80074f4:	455ac000 	.word	0x455ac000
 80074f8:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 80074fc:	4bac      	ldr	r3, [pc, #688]	; (80077b0 <interrupt_WallCut+0xa48>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	4aab      	ldr	r2, [pc, #684]	; (80077b0 <interrupt_WallCut+0xa48>)
 8007504:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007506:	4bab      	ldr	r3, [pc, #684]	; (80077b4 <interrupt_WallCut+0xa4c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7f9 f844 	bl	8000598 <__aeabi_f2d>
 8007510:	4604      	mov	r4, r0
 8007512:	460d      	mov	r5, r1
 8007514:	4ba8      	ldr	r3, [pc, #672]	; (80077b8 <interrupt_WallCut+0xa50>)
 8007516:	ed93 7a00 	vldr	s14, [r3]
 800751a:	4ba8      	ldr	r3, [pc, #672]	; (80077bc <interrupt_WallCut+0xa54>)
 800751c:	edd3 7a00 	vldr	s15, [r3]
 8007520:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007524:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007528:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800752c:	ee16 0a90 	vmov	r0, s13
 8007530:	f7f9 f832 	bl	8000598 <__aeabi_f2d>
 8007534:	a39c      	add	r3, pc, #624	; (adr r3, 80077a8 <interrupt_WallCut+0xa40>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f9 f885 	bl	8000648 <__aeabi_dmul>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f8 fec9 	bl	80002dc <__adddf3>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4610      	mov	r0, r2
 8007550:	4619      	mov	r1, r3
 8007552:	f7f9 fb51 	bl	8000bf8 <__aeabi_d2f>
 8007556:	4603      	mov	r3, r0
 8007558:	4a96      	ldr	r2, [pc, #600]	; (80077b4 <interrupt_WallCut+0xa4c>)
 800755a:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 800755c:	4b98      	ldr	r3, [pc, #608]	; (80077c0 <interrupt_WallCut+0xa58>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d11f      	bne.n	80075a4 <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007564:	4b97      	ldr	r3, [pc, #604]	; (80077c4 <interrupt_WallCut+0xa5c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f7f9 f815 	bl	8000598 <__aeabi_f2d>
 800756e:	4604      	mov	r4, r0
 8007570:	460d      	mov	r5, r1
 8007572:	4b95      	ldr	r3, [pc, #596]	; (80077c8 <interrupt_WallCut+0xa60>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f7f9 f80e 	bl	8000598 <__aeabi_f2d>
 800757c:	a38a      	add	r3, pc, #552	; (adr r3, 80077a8 <interrupt_WallCut+0xa40>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f9 f861 	bl	8000648 <__aeabi_dmul>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f8 fea5 	bl	80002dc <__adddf3>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4610      	mov	r0, r2
 8007598:	4619      	mov	r1, r3
 800759a:	f7f9 fb2d 	bl	8000bf8 <__aeabi_d2f>
 800759e:	4603      	mov	r3, r0
 80075a0:	4a88      	ldr	r2, [pc, #544]	; (80077c4 <interrupt_WallCut+0xa5c>)
 80075a2:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80075a4:	4b86      	ldr	r3, [pc, #536]	; (80077c0 <interrupt_WallCut+0xa58>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80075aa:	4b88      	ldr	r3, [pc, #544]	; (80077cc <interrupt_WallCut+0xa64>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80075b2:	db6a      	blt.n	800768a <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80075b4:	4b86      	ldr	r3, [pc, #536]	; (80077d0 <interrupt_WallCut+0xa68>)
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80075bc:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <interrupt_WallCut+0xa6c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a84      	ldr	r2, [pc, #528]	; (80077d4 <interrupt_WallCut+0xa6c>)
 80075c4:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80075c6:	2000      	movs	r0, #0
 80075c8:	f000 fb4e 	bl	8007c68 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80075cc:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <interrupt_WallCut+0xa70>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80075d2:	4b82      	ldr	r3, [pc, #520]	; (80077dc <interrupt_WallCut+0xa74>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f8 ffde 	bl	8000598 <__aeabi_f2d>
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	4b75      	ldr	r3, [pc, #468]	; (80077b8 <interrupt_WallCut+0xa50>)
 80075e2:	ed93 7a00 	vldr	s14, [r3]
 80075e6:	4b75      	ldr	r3, [pc, #468]	; (80077bc <interrupt_WallCut+0xa54>)
 80075e8:	edd3 7a00 	vldr	s15, [r3]
 80075ec:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80075f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80075f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80075f8:	ee16 0a90 	vmov	r0, s13
 80075fc:	f7f8 ffcc 	bl	8000598 <__aeabi_f2d>
 8007600:	a369      	add	r3, pc, #420	; (adr r3, 80077a8 <interrupt_WallCut+0xa40>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f9 f81f 	bl	8000648 <__aeabi_dmul>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f8 fe63 	bl	80002dc <__adddf3>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4610      	mov	r0, r2
 800761c:	4619      	mov	r1, r3
 800761e:	f7f9 faeb 	bl	8000bf8 <__aeabi_d2f>
 8007622:	4603      	mov	r3, r0
 8007624:	4a6d      	ldr	r2, [pc, #436]	; (80077dc <interrupt_WallCut+0xa74>)
 8007626:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8007628:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <interrupt_WallCut+0xa78>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	f040 81a4 	bne.w	800797a <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007632:	4b6c      	ldr	r3, [pc, #432]	; (80077e4 <interrupt_WallCut+0xa7c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f7f8 ffae 	bl	8000598 <__aeabi_f2d>
 800763c:	4604      	mov	r4, r0
 800763e:	460d      	mov	r5, r1
 8007640:	4b5d      	ldr	r3, [pc, #372]	; (80077b8 <interrupt_WallCut+0xa50>)
 8007642:	ed93 7a00 	vldr	s14, [r3]
 8007646:	4b5d      	ldr	r3, [pc, #372]	; (80077bc <interrupt_WallCut+0xa54>)
 8007648:	edd3 7a00 	vldr	s15, [r3]
 800764c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007650:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007654:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007658:	ee16 0a90 	vmov	r0, s13
 800765c:	f7f8 ff9c 	bl	8000598 <__aeabi_f2d>
 8007660:	a351      	add	r3, pc, #324	; (adr r3, 80077a8 <interrupt_WallCut+0xa40>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 ffef 	bl	8000648 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f8 fe33 	bl	80002dc <__adddf3>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	f7f9 fabb 	bl	8000bf8 <__aeabi_d2f>
 8007682:	4603      	mov	r3, r0
 8007684:	4a57      	ldr	r2, [pc, #348]	; (80077e4 <interrupt_WallCut+0xa7c>)
 8007686:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8007688:	e177      	b.n	800797a <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 800768a:	4b53      	ldr	r3, [pc, #332]	; (80077d8 <interrupt_WallCut+0xa70>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 80b0 	bne.w	80077f4 <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	e01f      	b.n	80076da <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 800769a:	4a53      	ldr	r2, [pc, #332]	; (80077e8 <interrupt_WallCut+0xa80>)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	333c      	adds	r3, #60	; 0x3c
 80076a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ac:	4b48      	ldr	r3, [pc, #288]	; (80077d0 <interrupt_WallCut+0xa68>)
 80076ae:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80076b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	dd0b      	ble.n	80076d4 <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80076bc:	4a4a      	ldr	r2, [pc, #296]	; (80077e8 <interrupt_WallCut+0xa80>)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	333c      	adds	r3, #60	; 0x3c
 80076c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80076ce:	4b40      	ldr	r3, [pc, #256]	; (80077d0 <interrupt_WallCut+0xa68>)
 80076d0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b13      	cmp	r3, #19
 80076de:	dddc      	ble.n	800769a <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 80076e0:	4b3c      	ldr	r3, [pc, #240]	; (80077d4 <interrupt_WallCut+0xa6c>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 80076e6:	4b3c      	ldr	r3, [pc, #240]	; (80077d8 <interrupt_WallCut+0xa70>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 80076ec:	2001      	movs	r0, #1
 80076ee:	f000 fabb 	bl	8007c68 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 80076f2:	4b37      	ldr	r3, [pc, #220]	; (80077d0 <interrupt_WallCut+0xa68>)
 80076f4:	edd3 7a00 	vldr	s15, [r3]
 80076f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80077ec <interrupt_WallCut+0xa84>
 80076fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007708:	db26      	blt.n	8007758 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 800770a:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <interrupt_WallCut+0xa68>)
 800770c:	edd3 7a00 	vldr	s15, [r3]
 8007710:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80077ec <interrupt_WallCut+0xa84>
 8007714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007718:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80077f0 <interrupt_WallCut+0xa88>
 800771c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007720:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007722:	ed93 7a00 	vldr	s14, [r3]
 8007726:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 800772a:	4b2e      	ldr	r3, [pc, #184]	; (80077e4 <interrupt_WallCut+0xa7c>)
 800772c:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007732:	edd3 7a00 	vldr	s15, [r3]
 8007736:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80077ec <interrupt_WallCut+0xa84>
 800773a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800773e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80077f0 <interrupt_WallCut+0xa88>
 8007742:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007746:	4b22      	ldr	r3, [pc, #136]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007748:	ed93 7a00 	vldr	s14, [r3]
 800774c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8007750:	4b22      	ldr	r3, [pc, #136]	; (80077dc <interrupt_WallCut+0xa74>)
 8007752:	edc3 7a00 	vstr	s15, [r3]
 8007756:	e0ac      	b.n	80078b2 <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <interrupt_WallCut+0xa68>)
 800775a:	edd3 7a00 	vldr	s15, [r3]
 800775e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80077ec <interrupt_WallCut+0xa84>
 8007762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007766:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80077f0 <interrupt_WallCut+0xa88>
 800776a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 800776e:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007770:	ed93 7a00 	vldr	s14, [r3]
 8007774:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8007778:	4b1a      	ldr	r3, [pc, #104]	; (80077e4 <interrupt_WallCut+0xa7c>)
 800777a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007780:	edd3 7a00 	vldr	s15, [r3]
 8007784:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80077ec <interrupt_WallCut+0xa84>
 8007788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800778c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80077f0 <interrupt_WallCut+0xa88>
 8007790:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <interrupt_WallCut+0xa68>)
 8007796:	ed93 7a00 	vldr	s14, [r3]
 800779a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <interrupt_WallCut+0xa74>)
 80077a0:	edc3 7a00 	vstr	s15, [r3]
 80077a4:	e085      	b.n	80078b2 <interrupt_WallCut+0xb4a>
 80077a6:	bf00      	nop
 80077a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80077ac:	3f50624d 	.word	0x3f50624d
 80077b0:	200005d4 	.word	0x200005d4
 80077b4:	200005f4 	.word	0x200005f4
 80077b8:	20000258 	.word	0x20000258
 80077bc:	2000025c 	.word	0x2000025c
 80077c0:	200005fc 	.word	0x200005fc
 80077c4:	200005ec 	.word	0x200005ec
 80077c8:	200004dc 	.word	0x200004dc
 80077cc:	20000460 	.word	0x20000460
 80077d0:	20000610 	.word	0x20000610
 80077d4:	200005d0 	.word	0x200005d0
 80077d8:	200005fb 	.word	0x200005fb
 80077dc:	200005f0 	.word	0x200005f0
 80077e0:	200005fd 	.word	0x200005fd
 80077e4:	200005e8 	.word	0x200005e8
 80077e8:	200002bc 	.word	0x200002bc
 80077ec:	455ac000 	.word	0x455ac000
 80077f0:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 80077f4:	4b66      	ldr	r3, [pc, #408]	; (8007990 <interrupt_WallCut+0xc28>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a65      	ldr	r2, [pc, #404]	; (8007990 <interrupt_WallCut+0xc28>)
 80077fc:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80077fe:	4b65      	ldr	r3, [pc, #404]	; (8007994 <interrupt_WallCut+0xc2c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7f8 fec8 	bl	8000598 <__aeabi_f2d>
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	4b62      	ldr	r3, [pc, #392]	; (8007998 <interrupt_WallCut+0xc30>)
 800780e:	ed93 7a00 	vldr	s14, [r3]
 8007812:	4b62      	ldr	r3, [pc, #392]	; (800799c <interrupt_WallCut+0xc34>)
 8007814:	edd3 7a00 	vldr	s15, [r3]
 8007818:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800781c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007820:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007824:	ee16 0a90 	vmov	r0, s13
 8007828:	f7f8 feb6 	bl	8000598 <__aeabi_f2d>
 800782c:	a356      	add	r3, pc, #344	; (adr r3, 8007988 <interrupt_WallCut+0xc20>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 ff09 	bl	8000648 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f8 fd4d 	bl	80002dc <__adddf3>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f7f9 f9d5 	bl	8000bf8 <__aeabi_d2f>
 800784e:	4603      	mov	r3, r0
 8007850:	4a50      	ldr	r2, [pc, #320]	; (8007994 <interrupt_WallCut+0xc2c>)
 8007852:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8007854:	4b52      	ldr	r3, [pc, #328]	; (80079a0 <interrupt_WallCut+0xc38>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d12a      	bne.n	80078b2 <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800785c:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <interrupt_WallCut+0xc3c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f7f8 fe99 	bl	8000598 <__aeabi_f2d>
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	4b4b      	ldr	r3, [pc, #300]	; (8007998 <interrupt_WallCut+0xc30>)
 800786c:	ed93 7a00 	vldr	s14, [r3]
 8007870:	4b4a      	ldr	r3, [pc, #296]	; (800799c <interrupt_WallCut+0xc34>)
 8007872:	edd3 7a00 	vldr	s15, [r3]
 8007876:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 800787a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800787e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007882:	ee16 0a90 	vmov	r0, s13
 8007886:	f7f8 fe87 	bl	8000598 <__aeabi_f2d>
 800788a:	a33f      	add	r3, pc, #252	; (adr r3, 8007988 <interrupt_WallCut+0xc20>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 feda 	bl	8000648 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	f7f8 fd1e 	bl	80002dc <__adddf3>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4610      	mov	r0, r2
 80078a6:	4619      	mov	r1, r3
 80078a8:	f7f9 f9a6 	bl	8000bf8 <__aeabi_d2f>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4a3d      	ldr	r2, [pc, #244]	; (80079a4 <interrupt_WallCut+0xc3c>)
 80078b0:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 80078b2:	4b3b      	ldr	r3, [pc, #236]	; (80079a0 <interrupt_WallCut+0xc38>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
}
 80078b8:	e05f      	b.n	800797a <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 80078ba:	4b3b      	ldr	r3, [pc, #236]	; (80079a8 <interrupt_WallCut+0xc40>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 80078c0:	4b3a      	ldr	r3, [pc, #232]	; (80079ac <interrupt_WallCut+0xc44>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 80078c6:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <interrupt_WallCut+0xc48>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <interrupt_WallCut+0xc4c>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 80078d2:	4b39      	ldr	r3, [pc, #228]	; (80079b8 <interrupt_WallCut+0xc50>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 80078d8:	4b2d      	ldr	r3, [pc, #180]	; (8007990 <interrupt_WallCut+0xc28>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 80078de:	4b37      	ldr	r3, [pc, #220]	; (80079bc <interrupt_WallCut+0xc54>)
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 80078e6:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <interrupt_WallCut+0xc58>)
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80078ee:	4b35      	ldr	r3, [pc, #212]	; (80079c4 <interrupt_WallCut+0xc5c>)
 80078f0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80078f4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80078f6:	4b34      	ldr	r3, [pc, #208]	; (80079c8 <interrupt_WallCut+0xc60>)
 80078f8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80078fc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 80078fe:	4b33      	ldr	r3, [pc, #204]	; (80079cc <interrupt_WallCut+0xc64>)
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <interrupt_WallCut+0xc3c>)
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 800790e:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <interrupt_WallCut+0xc68>)
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8007916:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <interrupt_WallCut+0xc2c>)
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 800791e:	4b2d      	ldr	r3, [pc, #180]	; (80079d4 <interrupt_WallCut+0xc6c>)
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8007924:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <interrupt_WallCut+0xc70>)
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 800792a:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <interrupt_WallCut+0xc74>)
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8007930:	4b2b      	ldr	r3, [pc, #172]	; (80079e0 <interrupt_WallCut+0xc78>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8007936:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <interrupt_WallCut+0xc7c>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 800793c:	4b18      	ldr	r3, [pc, #96]	; (80079a0 <interrupt_WallCut+0xc38>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <interrupt_WallCut+0xc80>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8007948:	4b28      	ldr	r3, [pc, #160]	; (80079ec <interrupt_WallCut+0xc84>)
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 800794e:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <interrupt_WallCut+0xc88>)
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8007954:	4b26      	ldr	r3, [pc, #152]	; (80079f0 <interrupt_WallCut+0xc88>)
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 800795a:	4b26      	ldr	r3, [pc, #152]	; (80079f4 <interrupt_WallCut+0xc8c>)
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8007962:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <interrupt_WallCut+0xc90>)
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <interrupt_WallCut+0xc94>)
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <interrupt_WallCut+0xc98>)
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bdb0      	pop	{r4, r5, r7, pc}
 8007982:	bf00      	nop
 8007984:	f3af 8000 	nop.w
 8007988:	d2f1a9fc 	.word	0xd2f1a9fc
 800798c:	3f50624d 	.word	0x3f50624d
 8007990:	200005d0 	.word	0x200005d0
 8007994:	200005f0 	.word	0x200005f0
 8007998:	20000258 	.word	0x20000258
 800799c:	2000025c 	.word	0x2000025c
 80079a0:	200005fd 	.word	0x200005fd
 80079a4:	200005e8 	.word	0x200005e8
 80079a8:	200005c4 	.word	0x200005c4
 80079ac:	200005c0 	.word	0x200005c0
 80079b0:	200005cc 	.word	0x200005cc
 80079b4:	200005c8 	.word	0x200005c8
 80079b8:	200005d4 	.word	0x200005d4
 80079bc:	200005dc 	.word	0x200005dc
 80079c0:	200005d8 	.word	0x200005d8
 80079c4:	200005e4 	.word	0x200005e4
 80079c8:	200005e0 	.word	0x200005e0
 80079cc:	200005ec 	.word	0x200005ec
 80079d0:	200005f4 	.word	0x200005f4
 80079d4:	200005f8 	.word	0x200005f8
 80079d8:	200005f9 	.word	0x200005f9
 80079dc:	200005fa 	.word	0x200005fa
 80079e0:	200005fb 	.word	0x200005fb
 80079e4:	200005fc 	.word	0x200005fc
 80079e8:	200005fe 	.word	0x200005fe
 80079ec:	200005ff 	.word	0x200005ff
 80079f0:	20000600 	.word	0x20000600
 80079f4:	20000604 	.word	0x20000604
 80079f8:	20000608 	.word	0x20000608
 80079fc:	2000060c 	.word	0x2000060c
 8007a00:	20000610 	.word	0x20000610

08007a04 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a1a:	f014 ffff 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	2140      	movs	r1, #64	; 0x40
 8007a38:	4803      	ldr	r0, [pc, #12]	; (8007a48 <pl_yellow_LED_3+0x20>)
 8007a3a:	f014 ffef 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	48000800 	.word	0x48000800

08007a4c <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a5e:	4803      	ldr	r0, [pc, #12]	; (8007a6c <pl_yellow_LED_6+0x20>)
 8007a60:	f014 ffdc 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	48000400 	.word	0x48000400

08007a70 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a82:	4803      	ldr	r0, [pc, #12]	; (8007a90 <pl_yellow_LED_8+0x20>)
 8007a84:	f014 ffca 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	48000400 	.word	0x48000400

08007a94 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aa2:	f014 ffbb 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ab0:	f014 ffb4 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2140      	movs	r1, #64	; 0x40
 8007ab8:	4811      	ldr	r0, [pc, #68]	; (8007b00 <pl_yellow_LED_off+0x6c>)
 8007aba:	f014 ffaf 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac4:	480f      	ldr	r0, [pc, #60]	; (8007b04 <pl_yellow_LED_off+0x70>)
 8007ac6:	f014 ffa9 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007aca:	2200      	movs	r2, #0
 8007acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ad0:	480c      	ldr	r0, [pc, #48]	; (8007b04 <pl_yellow_LED_off+0x70>)
 8007ad2:	f014 ffa3 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007adc:	4809      	ldr	r0, [pc, #36]	; (8007b04 <pl_yellow_LED_off+0x70>)
 8007ade:	f014 ff9d 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ae8:	4806      	ldr	r0, [pc, #24]	; (8007b04 <pl_yellow_LED_off+0x70>)
 8007aea:	f014 ff97 	bl	801ca1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007aee:	2200      	movs	r2, #0
 8007af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <pl_yellow_LED_off+0x70>)
 8007af6:	f014 ff91 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007afa:	bf00      	nop
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	48000800 	.word	0x48000800
 8007b04:	48000400 	.word	0x48000400

08007b08 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b50:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b62:	f014 ff5b 	bl	801ca1c <HAL_GPIO_WritePin>
 8007b66:	e006      	b.n	8007b76 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b72:	f014 ff53 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b86:	f014 ff49 	bl	801ca1c <HAL_GPIO_WritePin>
 8007b8a:	e006      	b.n	8007b9a <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b96:	f014 ff41 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007b9a:	7b7b      	ldrb	r3, [r7, #13]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	2140      	movs	r1, #64	; 0x40
 8007ba4:	482e      	ldr	r0, [pc, #184]	; (8007c60 <pl_yellow_LED_count+0x158>)
 8007ba6:	f014 ff39 	bl	801ca1c <HAL_GPIO_WritePin>
 8007baa:	e004      	b.n	8007bb6 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007bac:	2200      	movs	r2, #0
 8007bae:	2140      	movs	r1, #64	; 0x40
 8007bb0:	482b      	ldr	r0, [pc, #172]	; (8007c60 <pl_yellow_LED_count+0x158>)
 8007bb2:	f014 ff33 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8007bb6:	7b3b      	ldrb	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bc2:	4828      	ldr	r0, [pc, #160]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007bc4:	f014 ff2a 	bl	801ca1c <HAL_GPIO_WritePin>
 8007bc8:	e005      	b.n	8007bd6 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bd0:	4824      	ldr	r0, [pc, #144]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007bd2:	f014 ff23 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007be2:	4820      	ldr	r0, [pc, #128]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007be4:	f014 ff1a 	bl	801ca1c <HAL_GPIO_WritePin>
 8007be8:	e005      	b.n	8007bf6 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007bea:	2200      	movs	r2, #0
 8007bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bf0:	481c      	ldr	r0, [pc, #112]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007bf2:	f014 ff13 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8007bf6:	7abb      	ldrb	r3, [r7, #10]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d006      	beq.n	8007c0a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c02:	4818      	ldr	r0, [pc, #96]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c04:	f014 ff0a 	bl	801ca1c <HAL_GPIO_WritePin>
 8007c08:	e005      	b.n	8007c16 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c10:	4814      	ldr	r0, [pc, #80]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c12:	f014 ff03 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8007c16:	7a7b      	ldrb	r3, [r7, #9]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d006      	beq.n	8007c2a <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c22:	4810      	ldr	r0, [pc, #64]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c24:	f014 fefa 	bl	801ca1c <HAL_GPIO_WritePin>
 8007c28:	e005      	b.n	8007c36 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c30:	480c      	ldr	r0, [pc, #48]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c32:	f014 fef3 	bl	801ca1c <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8007c36:	7a3b      	ldrb	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c42:	4808      	ldr	r0, [pc, #32]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c44:	f014 feea 	bl	801ca1c <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007c48:	e005      	b.n	8007c56 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c50:	4804      	ldr	r0, [pc, #16]	; (8007c64 <pl_yellow_LED_count+0x15c>)
 8007c52:	f014 fee3 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	48000800 	.word	0x48000800
 8007c64:	48000400 	.word	0x48000400

08007c68 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c7a:	4803      	ldr	r0, [pc, #12]	; (8007c88 <pl_r_blue_LED+0x20>)
 8007c7c:	f014 fece 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	48000800 	.word	0x48000800

08007c8c <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	4803      	ldr	r0, [pc, #12]	; (8007cac <pl_l_blue_LED+0x20>)
 8007c9e:	f014 febd 	bl	801ca1c <HAL_GPIO_WritePin>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	48000400 	.word	0x48000400

08007cb0 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	460a      	mov	r2, r1
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2110      	movs	r1, #16
 8007cc4:	4833      	ldr	r0, [pc, #204]	; (8007d94 <encoder_read_byte_R+0xe4>)
 8007cc6:	f014 fea9 	bl	801ca1c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cd0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	e00d      	b.n	8007cf8 <encoder_read_byte_R+0x48>
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	fa42 f303 	asr.w	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	8bfb      	ldrh	r3, [r7, #30]
 8007cee:	4413      	add	r3, r2
 8007cf0:	83fb      	strh	r3, [r7, #30]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	61bb      	str	r3, [r7, #24]
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b0e      	cmp	r3, #14
 8007cfc:	ddee      	ble.n	8007cdc <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007cfe:	8bfb      	ldrh	r3, [r7, #30]
 8007d00:	03db      	lsls	r3, r3, #15
 8007d02:	b21a      	sxth	r2, r3
 8007d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007d1e:	f107 0110 	add.w	r1, r7, #16
 8007d22:	2332      	movs	r3, #50	; 0x32
 8007d24:	2202      	movs	r2, #2
 8007d26:	481c      	ldr	r0, [pc, #112]	; (8007d98 <encoder_read_byte_R+0xe8>)
 8007d28:	f015 ff5b 	bl	801dbe2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2110      	movs	r1, #16
 8007d30:	4818      	ldr	r0, [pc, #96]	; (8007d94 <encoder_read_byte_R+0xe4>)
 8007d32:	f014 fe73 	bl	801ca1c <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e002      	b.n	8007d42 <encoder_read_byte_R+0x92>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b31      	cmp	r3, #49	; 0x31
 8007d46:	ddf9      	ble.n	8007d3c <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2110      	movs	r1, #16
 8007d4c:	4811      	ldr	r0, [pc, #68]	; (8007d94 <encoder_read_byte_R+0xe4>)
 8007d4e:	f014 fe65 	bl	801ca1c <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007d52:	88bb      	ldrh	r3, [r7, #4]
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007d5c:	88bb      	ldrh	r3, [r7, #4]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007d62:	f107 010c 	add.w	r1, r7, #12
 8007d66:	2332      	movs	r3, #50	; 0x32
 8007d68:	2202      	movs	r2, #2
 8007d6a:	480b      	ldr	r0, [pc, #44]	; (8007d98 <encoder_read_byte_R+0xe8>)
 8007d6c:	f016 f8a7 	bl	801debe <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007d70:	7b3b      	ldrb	r3, [r7, #12]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	b21a      	sxth	r2, r3
 8007d76:	7b7b      	ldrb	r3, [r7, #13]
 8007d78:	b21b      	sxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007d80:	2201      	movs	r2, #1
 8007d82:	2110      	movs	r1, #16
 8007d84:	4803      	ldr	r0, [pc, #12]	; (8007d94 <encoder_read_byte_R+0xe4>)
 8007d86:	f014 fe49 	bl	801ca1c <HAL_GPIO_WritePin>

	return data;
 8007d8a:	88bb      	ldrh	r3, [r7, #4]

}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	48000400 	.word	0x48000400
 8007d98:	2000f2f8 	.word	0x2000f2f8

08007d9c <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	460a      	mov	r2, r1
 8007da6:	80fb      	strh	r3, [r7, #6]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007dac:	2200      	movs	r2, #0
 8007dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007db6:	f014 fe31 	bl	801ca1c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dc0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	e00d      	b.n	8007de8 <encoder_read_byte_L+0x4c>
 8007dcc:	88fa      	ldrh	r2, [r7, #6]
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	fa42 f303 	asr.w	r3, r2, r3
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	8bfb      	ldrh	r3, [r7, #30]
 8007dde:	4413      	add	r3, r2
 8007de0:	83fb      	strh	r3, [r7, #30]
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	3301      	adds	r3, #1
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b0e      	cmp	r3, #14
 8007dec:	ddee      	ble.n	8007dcc <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007dee:	8bfb      	ldrh	r3, [r7, #30]
 8007df0:	03db      	lsls	r3, r3, #15
 8007df2:	b21a      	sxth	r2, r3
 8007df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	b21b      	sxth	r3, r3
 8007dfc:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	0a1b      	lsrs	r3, r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007e0e:	f107 0110 	add.w	r1, r7, #16
 8007e12:	2332      	movs	r3, #50	; 0x32
 8007e14:	2202      	movs	r2, #2
 8007e16:	481e      	ldr	r0, [pc, #120]	; (8007e90 <encoder_read_byte_L+0xf4>)
 8007e18:	f015 fee3 	bl	801dbe2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e26:	f014 fdf9 	bl	801ca1c <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e002      	b.n	8007e36 <encoder_read_byte_L+0x9a>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3301      	adds	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b31      	cmp	r3, #49	; 0x31
 8007e3a:	ddf9      	ble.n	8007e30 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e46:	f014 fde9 	bl	801ca1c <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007e4a:	88bb      	ldrh	r3, [r7, #4]
 8007e4c:	0a1b      	lsrs	r3, r3, #8
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007e54:	88bb      	ldrh	r3, [r7, #4]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007e5a:	f107 010c 	add.w	r1, r7, #12
 8007e5e:	2332      	movs	r3, #50	; 0x32
 8007e60:	2202      	movs	r2, #2
 8007e62:	480b      	ldr	r0, [pc, #44]	; (8007e90 <encoder_read_byte_L+0xf4>)
 8007e64:	f016 f82b 	bl	801debe <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007e68:	7b3b      	ldrb	r3, [r7, #12]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	b21a      	sxth	r2, r3
 8007e6e:	7b7b      	ldrb	r3, [r7, #13]
 8007e70:	b21b      	sxth	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b21b      	sxth	r3, r3
 8007e76:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e82:	f014 fdcb 	bl	801ca1c <HAL_GPIO_WritePin>

	return data;
 8007e86:	88bb      	ldrh	r3, [r7, #4]

}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	2000f2f8 	.word	0x2000f2f8

08007e94 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007e9e:	f7ff ff07 	bl	8007cb0 <encoder_read_byte_R>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eb0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007ef8 <AS5047_DataUpdate+0x64>
 8007eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007eb8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007efc <AS5047_DataUpdate+0x68>
 8007ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <AS5047_DataUpdate+0x6c>)
 8007ec2:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007ecc:	f7ff ff66 	bl	8007d9c <encoder_read_byte_L>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ede:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007ef8 <AS5047_DataUpdate+0x64>
 8007ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ee6:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007efc <AS5047_DataUpdate+0x68>
 8007eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <AS5047_DataUpdate+0x70>)
 8007ef0:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007ef4:	bf00      	nop
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	43b40000 	.word	0x43b40000
 8007efc:	46800000 	.word	0x46800000
 8007f00:	200006e4 	.word	0x200006e4
 8007f04:	200006e8 	.word	0x200006e8

08007f08 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
		  record_out();
 8007f0c:	f000 f914 	bl	8008138 <record_out>
		  maze_display();
 8007f10:	f00d fb6a 	bl	80155e8 <maze_display>
		  flash_record_init();
 8007f14:	f000 f9b6 	bl	8008284 <flash_record_init>
		  record_in();
 8007f18:	f000 f858 	bl	8007fcc <record_in>
}
 8007f1c:	bf00      	nop
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <eraseFlash>:


void eraseFlash( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007f2e:	23fe      	movs	r3, #254	; 0xfe
 8007f30:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007f3a:	1d3a      	adds	r2, r7, #4
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f014 fac2 	bl	801c4cc <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007f50:	b5b0      	push	{r4, r5, r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007f5e:	f014 f9c9 	bl	801c2f4 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <writeFlash+0x1c>
 8007f68:	f7ff ffda 	bl	8007f20 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e00f      	b.n	8007f92 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	17da      	asrs	r2, r3, #31
 8007f76:	461c      	mov	r4, r3
 8007f78:	4615      	mov	r5, r2
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	6979      	ldr	r1, [r7, #20]
 8007f80:	2000      	movs	r0, #0
 8007f82:	f014 f961 	bl	801c248 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	3320      	adds	r3, #32
 8007f8a:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d3e9      	bcc.n	8007f72 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007f9e:	f014 f9cb 	bl	801c338 <HAL_FLASH_Lock>

}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bdb0      	pop	{r4, r5, r7, pc}

08007faa <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68b8      	ldr	r0, [r7, #8]
 8007fbe:	f018 fe43 	bl	8020c48 <memcpy>

}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <record_in>:


void record_in(void) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
	int t = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007fd6:	4b55      	ldr	r3, [pc, #340]	; (800812c <record_in+0x160>)
 8007fd8:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 8007fda:	e016      	b.n	800800a <record_in+0x3e>
		record.row[t] = wall.row[t];
 8007fdc:	4a54      	ldr	r2, [pc, #336]	; (8008130 <record_in+0x164>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fe4:	4953      	ldr	r1, [pc, #332]	; (8008134 <record_in+0x168>)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[t] = wall.column[t];
 8007fec:	4a50      	ldr	r2, [pc, #320]	; (8008130 <record_in+0x164>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	330e      	adds	r3, #14
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	494e      	ldr	r1, [pc, #312]	; (8008134 <record_in+0x168>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	330e      	adds	r3, #14
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	605a      	str	r2, [r3, #4]
		t++;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3301      	adds	r3, #1
 8008008:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b0e      	cmp	r3, #14
 800800e:	dde5      	ble.n	8007fdc <record_in+0x10>
	}
	t = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008014:	e018      	b.n	8008048 <record_in+0x7c>
		record.row_look[t] = wall.row_look[t];
 8008016:	4a46      	ldr	r2, [pc, #280]	; (8008130 <record_in+0x164>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	331e      	adds	r3, #30
 800801c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008020:	4944      	ldr	r1, [pc, #272]	; (8008134 <record_in+0x168>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	331e      	adds	r3, #30
 8008026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[t] = wall.column_look[t];
 800802a:	4a41      	ldr	r2, [pc, #260]	; (8008130 <record_in+0x164>)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	332c      	adds	r3, #44	; 0x2c
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	493f      	ldr	r1, [pc, #252]	; (8008134 <record_in+0x168>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	332c      	adds	r3, #44	; 0x2c
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	440b      	add	r3, r1
 8008040:	605a      	str	r2, [r3, #4]
		t++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3301      	adds	r3, #1
 8008046:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b0e      	cmp	r3, #14
 800804c:	dde3      	ble.n	8008016 <record_in+0x4a>
	}
	t = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8008052:	4b38      	ldr	r3, [pc, #224]	; (8008134 <record_in+0x168>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	2301      	movs	r3, #1
 800805a:	2201      	movs	r2, #1
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f7ff ff77 	bl	8007f50 <writeFlash>
	address+=16;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	3310      	adds	r3, #16
 8008066:	603b      	str	r3, [r7, #0]
	t=1;
 8008068:	2301      	movs	r3, #1
 800806a:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800806c:	e00f      	b.n	800808e <record_in+0xc2>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 800806e:	4a31      	ldr	r2, [pc, #196]	; (8008134 <record_in+0x168>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008076:	4619      	mov	r1, r3
 8008078:	2300      	movs	r3, #0
 800807a:	2201      	movs	r2, #1
 800807c:	6838      	ldr	r0, [r7, #0]
 800807e:	f7ff ff67 	bl	8007f50 <writeFlash>
	address+=16;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	3310      	adds	r3, #16
 8008086:	603b      	str	r3, [r7, #0]
	t++;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3301      	adds	r3, #1
 800808c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b0e      	cmp	r3, #14
 8008092:	ddec      	ble.n	800806e <record_in+0xa2>
	}

	t=0;
 8008094:	2300      	movs	r3, #0
 8008096:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008098:	e011      	b.n	80080be <record_in+0xf2>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 800809a:	4a26      	ldr	r2, [pc, #152]	; (8008134 <record_in+0x168>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	330e      	adds	r3, #14
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	2201      	movs	r2, #1
 80080ac:	6838      	ldr	r0, [r7, #0]
 80080ae:	f7ff ff4f 	bl	8007f50 <writeFlash>
	address+=16;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	3310      	adds	r3, #16
 80080b6:	603b      	str	r3, [r7, #0]
	t++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3301      	adds	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b0e      	cmp	r3, #14
 80080c2:	ddea      	ble.n	800809a <record_in+0xce>
	}

	t=0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080c8:	e010      	b.n	80080ec <record_in+0x120>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <record_in+0x168>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	331e      	adds	r3, #30
 80080d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d4:	4619      	mov	r1, r3
 80080d6:	2300      	movs	r3, #0
 80080d8:	2201      	movs	r2, #1
 80080da:	6838      	ldr	r0, [r7, #0]
 80080dc:	f7ff ff38 	bl	8007f50 <writeFlash>
	address+=16;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	3310      	adds	r3, #16
 80080e4:	603b      	str	r3, [r7, #0]
	t++;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3301      	adds	r3, #1
 80080ea:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b0e      	cmp	r3, #14
 80080f0:	ddeb      	ble.n	80080ca <record_in+0xfe>
	}

	t=0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080f6:	e011      	b.n	800811c <record_in+0x150>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 80080f8:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <record_in+0x168>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	332c      	adds	r3, #44	; 0x2c
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4619      	mov	r1, r3
 8008106:	2300      	movs	r3, #0
 8008108:	2201      	movs	r2, #1
 800810a:	6838      	ldr	r0, [r7, #0]
 800810c:	f7ff ff20 	bl	8007f50 <writeFlash>
	address+=16;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	3310      	adds	r3, #16
 8008114:	603b      	str	r3, [r7, #0]
	t++;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3301      	adds	r3, #1
 800811a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b0e      	cmp	r3, #14
 8008120:	ddea      	ble.n	80080f8 <record_in+0x12c>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	0807f000 	.word	0x0807f000
 8008130:	20001010 	.word	0x20001010
 8008134:	20001100 	.word	0x20001100

08008138 <record_out>:


void record_out(void) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800813e:	2300      	movs	r3, #0
 8008140:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8008142:	4b4d      	ldr	r3, [pc, #308]	; (8008278 <record_out+0x140>)
 8008144:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8008146:	e00e      	b.n	8008166 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4a4b      	ldr	r2, [pc, #300]	; (800827c <record_out+0x144>)
 800814e:	4413      	add	r3, r2
 8008150:	2202      	movs	r2, #2
 8008152:	4619      	mov	r1, r3
 8008154:	6838      	ldr	r0, [r7, #0]
 8008156:	f7ff ff28 	bl	8007faa <loadFlash>
	address+=16;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	3310      	adds	r3, #16
 800815e:	603b      	str	r3, [r7, #0]
	t++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3301      	adds	r3, #1
 8008164:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b0e      	cmp	r3, #14
 800816a:	dded      	ble.n	8008148 <record_out+0x10>
	}

	t=0;
 800816c:	2300      	movs	r3, #0
 800816e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008170:	e010      	b.n	8008194 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	330e      	adds	r3, #14
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4a40      	ldr	r2, [pc, #256]	; (800827c <record_out+0x144>)
 800817a:	4413      	add	r3, r2
 800817c:	3304      	adds	r3, #4
 800817e:	2202      	movs	r2, #2
 8008180:	4619      	mov	r1, r3
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f7ff ff11 	bl	8007faa <loadFlash>
	address+=16;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	3310      	adds	r3, #16
 800818c:	603b      	str	r3, [r7, #0]
	t++;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3301      	adds	r3, #1
 8008192:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b0e      	cmp	r3, #14
 8008198:	ddeb      	ble.n	8008172 <record_out+0x3a>
	}

	t=0;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800819e:	e00f      	b.n	80081c0 <record_out+0x88>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	331e      	adds	r3, #30
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a35      	ldr	r2, [pc, #212]	; (800827c <record_out+0x144>)
 80081a8:	4413      	add	r3, r2
 80081aa:	2202      	movs	r2, #2
 80081ac:	4619      	mov	r1, r3
 80081ae:	6838      	ldr	r0, [r7, #0]
 80081b0:	f7ff fefb 	bl	8007faa <loadFlash>
		address+=16;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	3310      	adds	r3, #16
 80081b8:	603b      	str	r3, [r7, #0]
		t++;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3301      	adds	r3, #1
 80081be:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b0e      	cmp	r3, #14
 80081c4:	ddec      	ble.n	80081a0 <record_out+0x68>
	}

	t=0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081ca:	e010      	b.n	80081ee <record_out+0xb6>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	332c      	adds	r3, #44	; 0x2c
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a2a      	ldr	r2, [pc, #168]	; (800827c <record_out+0x144>)
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	2202      	movs	r2, #2
 80081da:	4619      	mov	r1, r3
 80081dc:	6838      	ldr	r0, [r7, #0]
 80081de:	f7ff fee4 	bl	8007faa <loadFlash>
		address+=16;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	3310      	adds	r3, #16
 80081e6:	603b      	str	r3, [r7, #0]
		t++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3301      	adds	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b0e      	cmp	r3, #14
 80081f2:	ddeb      	ble.n	80081cc <record_out+0x94>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081f8:	e016      	b.n	8008228 <record_out+0xf0>
		wall.row[t] = record.row[t];
 80081fa:	4a20      	ldr	r2, [pc, #128]	; (800827c <record_out+0x144>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008202:	491f      	ldr	r1, [pc, #124]	; (8008280 <record_out+0x148>)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 800820a:	4a1c      	ldr	r2, [pc, #112]	; (800827c <record_out+0x144>)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	330e      	adds	r3, #14
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	491a      	ldr	r1, [pc, #104]	; (8008280 <record_out+0x148>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	330e      	adds	r3, #14
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	605a      	str	r2, [r3, #4]
		t++;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3301      	adds	r3, #1
 8008226:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b0e      	cmp	r3, #14
 800822c:	dde5      	ble.n	80081fa <record_out+0xc2>
	}
	t = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008232:	e018      	b.n	8008266 <record_out+0x12e>
		wall.row_look[t] = record.row_look[t];
 8008234:	4a11      	ldr	r2, [pc, #68]	; (800827c <record_out+0x144>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	331e      	adds	r3, #30
 800823a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800823e:	4910      	ldr	r1, [pc, #64]	; (8008280 <record_out+0x148>)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	331e      	adds	r3, #30
 8008244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = record.column_look[t];
 8008248:	4a0c      	ldr	r2, [pc, #48]	; (800827c <record_out+0x144>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	332c      	adds	r3, #44	; 0x2c
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	490a      	ldr	r1, [pc, #40]	; (8008280 <record_out+0x148>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	332c      	adds	r3, #44	; 0x2c
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	605a      	str	r2, [r3, #4]
		t++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3301      	adds	r3, #1
 8008264:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b0e      	cmp	r3, #14
 800826a:	dde3      	ble.n	8008234 <record_out+0xfc>
	}

	t = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	607b      	str	r3, [r7, #4]

}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	0807f000 	.word	0x0807f000
 800827c:	20001100 	.word	0x20001100
 8008280:	20001010 	.word	0x20001010

08008284 <flash_record_init>:

void flash_record_init(void){
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	int t = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800828e:	e011      	b.n	80082b4 <flash_record_init+0x30>
		wall.row[t] = 0b111100011;
 8008290:	4a1a      	ldr	r2, [pc, #104]	; (80082fc <flash_record_init+0x78>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[t] = t*2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4619      	mov	r1, r3
 80082a2:	4a16      	ldr	r2, [pc, #88]	; (80082fc <flash_record_init+0x78>)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	330e      	adds	r3, #14
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	6059      	str	r1, [r3, #4]
		t++;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3301      	adds	r3, #1
 80082b2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b0e      	cmp	r3, #14
 80082b8:	ddea      	ble.n	8008290 <flash_record_init+0xc>
	}
	t = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082be:	e013      	b.n	80082e8 <flash_record_init+0x64>
		wall.row_look[t] = t*4;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4619      	mov	r1, r3
 80082c6:	4a0d      	ldr	r2, [pc, #52]	; (80082fc <flash_record_init+0x78>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	331e      	adds	r3, #30
 80082cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[t] = t*8;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4619      	mov	r1, r3
 80082d6:	4a09      	ldr	r2, [pc, #36]	; (80082fc <flash_record_init+0x78>)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	332c      	adds	r3, #44	; 0x2c
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	6059      	str	r1, [r3, #4]
		t++;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3301      	adds	r3, #1
 80082e6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b0e      	cmp	r3, #14
 80082ec:	dde8      	ble.n	80082c0 <flash_record_init+0x3c>
	}

}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20001010 	.word	0x20001010

08008300 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800830a:	2200      	movs	r2, #0
 800830c:	2110      	movs	r1, #16
 800830e:	4810      	ldr	r0, [pc, #64]	; (8008350 <gyro_read_byte+0x50>)
 8008310:	f014 fb84 	bl	801ca1c <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800831a:	b2db      	uxtb	r3, r3
 800831c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800831e:	f107 010f 	add.w	r1, r7, #15
 8008322:	2364      	movs	r3, #100	; 0x64
 8008324:	2201      	movs	r2, #1
 8008326:	480b      	ldr	r0, [pc, #44]	; (8008354 <gyro_read_byte+0x54>)
 8008328:	f015 fc5b 	bl	801dbe2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 800832c:	f107 010e 	add.w	r1, r7, #14
 8008330:	2364      	movs	r3, #100	; 0x64
 8008332:	2201      	movs	r2, #1
 8008334:	4807      	ldr	r0, [pc, #28]	; (8008354 <gyro_read_byte+0x54>)
 8008336:	f015 fdc2 	bl	801debe <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800833a:	2201      	movs	r2, #1
 800833c:	2110      	movs	r1, #16
 800833e:	4804      	ldr	r0, [pc, #16]	; (8008350 <gyro_read_byte+0x50>)
 8008340:	f014 fb6c 	bl	801ca1c <HAL_GPIO_WritePin>

	return val;
 8008344:	7bbb      	ldrb	r3, [r7, #14]

}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	48000800 	.word	0x48000800
 8008354:	2000f294 	.word	0x2000f294

08008358 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	460a      	mov	r2, r1
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	4613      	mov	r3, r2
 8008366:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800836e:	b2db      	uxtb	r3, r3
 8008370:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8008372:	2200      	movs	r2, #0
 8008374:	2110      	movs	r1, #16
 8008376:	480c      	ldr	r0, [pc, #48]	; (80083a8 <gyro_write_byte+0x50>)
 8008378:	f014 fb50 	bl	801ca1c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800837c:	f107 010f 	add.w	r1, r7, #15
 8008380:	2364      	movs	r3, #100	; 0x64
 8008382:	2201      	movs	r2, #1
 8008384:	4809      	ldr	r0, [pc, #36]	; (80083ac <gyro_write_byte+0x54>)
 8008386:	f015 fc2c 	bl	801dbe2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 800838a:	1db9      	adds	r1, r7, #6
 800838c:	2364      	movs	r3, #100	; 0x64
 800838e:	2201      	movs	r2, #1
 8008390:	4806      	ldr	r0, [pc, #24]	; (80083ac <gyro_write_byte+0x54>)
 8008392:	f015 fc26 	bl	801dbe2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8008396:	2201      	movs	r2, #1
 8008398:	2110      	movs	r1, #16
 800839a:	4803      	ldr	r0, [pc, #12]	; (80083a8 <gyro_write_byte+0x50>)
 800839c:	f014 fb3e 	bl	801ca1c <HAL_GPIO_WritePin>

}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	48000800 	.word	0x48000800
 80083ac:	2000f294 	.word	0x2000f294

080083b0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80083ba:	2075      	movs	r0, #117	; 0x75
 80083bc:	f7ff ffa0 	bl	8008300 <gyro_read_byte>
 80083c0:	4603      	mov	r3, r0
 80083c2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	4619      	mov	r1, r3
 80083c8:	481b      	ldr	r0, [pc, #108]	; (8008438 <pl_gyro_init+0x88>)
 80083ca:	f019 f8bd 	bl	8021548 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2b98      	cmp	r3, #152	; 0x98
 80083d2:	d00e      	beq.n	80083f2 <pl_gyro_init+0x42>

		HAL_Delay(100);
 80083d4:	2064      	movs	r0, #100	; 0x64
 80083d6:	f011 f965 	bl	80196a4 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80083da:	2075      	movs	r0, #117	; 0x75
 80083dc:	f7ff ff90 	bl	8008300 <gyro_read_byte>
 80083e0:	4603      	mov	r3, r0
 80083e2:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2b98      	cmp	r3, #152	; 0x98
 80083e8:	d003      	beq.n	80083f2 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 80083ea:	4814      	ldr	r0, [pc, #80]	; (800843c <pl_gyro_init+0x8c>)
 80083ec:	f019 f8ac 	bl	8021548 <iprintf>
 80083f0:	e7fb      	b.n	80083ea <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 80083f2:	2100      	movs	r1, #0
 80083f4:	206b      	movs	r0, #107	; 0x6b
 80083f6:	f7ff ffaf 	bl	8008358 <gyro_write_byte>

	HAL_Delay(50);
 80083fa:	2032      	movs	r0, #50	; 0x32
 80083fc:	f011 f952 	bl	80196a4 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8008400:	2100      	movs	r1, #0
 8008402:	206c      	movs	r0, #108	; 0x6c
 8008404:	f7ff ffa8 	bl	8008358 <gyro_write_byte>

	HAL_Delay(50);
 8008408:	2032      	movs	r0, #50	; 0x32
 800840a:	f011 f94b 	bl	80196a4 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800840e:	2118      	movs	r1, #24
 8008410:	201b      	movs	r0, #27
 8008412:	f7ff ffa1 	bl	8008358 <gyro_write_byte>

	HAL_Delay(50);
 8008416:	2032      	movs	r0, #50	; 0x32
 8008418:	f011 f944 	bl	80196a4 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 800841c:	2118      	movs	r1, #24
 800841e:	201c      	movs	r0, #28
 8008420:	f7ff ff9a 	bl	8008358 <gyro_write_byte>

	HAL_Delay(50);
 8008424:	2032      	movs	r0, #50	; 0x32
 8008426:	f011 f93d 	bl	80196a4 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <pl_gyro_init+0x90>)
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]

}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	08024f28 	.word	0x08024f28
 800843c:	08024f3c 	.word	0x08024f3c
 8008440:	200006ec 	.word	0x200006ec

08008444 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff55 	bl	8008300 <gyro_read_byte>
 8008456:	4603      	mov	r3, r0
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	3301      	adds	r3, #1
 8008460:	b2db      	uxtb	r3, r3
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff ff4c 	bl	8008300 <gyro_read_byte>
 8008468:	4603      	mov	r3, r0
 800846a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800846c:	4323      	orrs	r3, r4
 800846e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8008470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800847c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008498 <ICM20602_GYRO_READ+0x54>
 8008480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008484:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	ee07 3a90 	vmov	s15, r3

}
 800848e:	eeb0 0a67 	vmov.f32	s0, s15
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	41833333 	.word	0x41833333

0800849c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff29 	bl	8008300 <gyro_read_byte>
 80084ae:	4603      	mov	r3, r0
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	3301      	adds	r3, #1
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff20 	bl	8008300 <gyro_read_byte>
 80084c0:	4603      	mov	r3, r0
 80084c2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80084c4:	4323      	orrs	r3, r4
 80084c6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80084c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084cc:	ee07 3a90 	vmov	s15, r3
 80084d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084d4:	eddf 6a06 	vldr	s13, [pc, #24]	; 80084f0 <ICM20602_ACCEL_READ+0x54>
 80084d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084dc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	ee07 3a90 	vmov	s15, r3

}
 80084e6:	eeb0 0a67 	vmov.f32	s0, s15
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd90      	pop	{r4, r7, pc}
 80084f0:	45000000 	.word	0x45000000

080084f4 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80084f8:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <ICM20602_DataUpdate+0x40>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d117      	bne.n	8008530 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8008500:	2045      	movs	r0, #69	; 0x45
 8008502:	f7ff ff9f 	bl	8008444 <ICM20602_GYRO_READ>
 8008506:	eef0 7a40 	vmov.f32	s15, s0
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <ICM20602_DataUpdate+0x44>)
 800850c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8008510:	2047      	movs	r0, #71	; 0x47
 8008512:	f7ff ff97 	bl	8008444 <ICM20602_GYRO_READ>
 8008516:	eef0 7a40 	vmov.f32	s15, s0
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <ICM20602_DataUpdate+0x44>)
 800851c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8008520:	203b      	movs	r0, #59	; 0x3b
 8008522:	f7ff ffbb 	bl	800849c <ICM20602_ACCEL_READ>
 8008526:	eef0 7a40 	vmov.f32	s15, s0
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <ICM20602_DataUpdate+0x44>)
 800852c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200006ec 	.word	0x200006ec
 8008538:	200006f0 	.word	0x200006f0

0800853c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8008540:	480f      	ldr	r0, [pc, #60]	; (8008580 <pl_motor_init+0x44>)
 8008542:	f016 fa13 	bl	801e96c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8008546:	480e      	ldr	r0, [pc, #56]	; (8008580 <pl_motor_init+0x44>)
 8008548:	f00f ff38 	bl	80183bc <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800854c:	480d      	ldr	r0, [pc, #52]	; (8008584 <pl_motor_init+0x48>)
 800854e:	f016 fa0d 	bl	801e96c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8008552:	480c      	ldr	r0, [pc, #48]	; (8008584 <pl_motor_init+0x48>)
 8008554:	f00f ff32 	bl	80183bc <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8008558:	2001      	movs	r0, #1
 800855a:	f000 f81f 	bl	800859c <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800855e:	4b08      	ldr	r3, [pc, #32]	; (8008580 <pl_motor_init+0x44>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	225a      	movs	r2, #90	; 0x5a
 8008564:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8008566:	2001      	movs	r0, #1
 8008568:	f000 f840 	bl	80085ec <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <pl_motor_init+0x44>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	225a      	movs	r2, #90	; 0x5a
 8008572:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8008574:	4b03      	ldr	r3, [pc, #12]	; (8008584 <pl_motor_init+0x48>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	221e      	movs	r2, #30
 800857a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800857c:	bf00      	nop
 800857e:	bd80      	pop	{r7, pc}
 8008580:	2000f3ac 	.word	0x2000f3ac
 8008584:	2000f3f8 	.word	0x2000f3f8

08008588 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d819      	bhi.n	80085de <pl_L_DriveMotor_mode+0x42>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <pl_L_DriveMotor_mode+0x14>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	080085cf 	.word	0x080085cf
 80085bc:	080085dd 	.word	0x080085dd
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <pl_L_DriveMotor_mode+0x4c>)
 80085c8:	f014 fa28 	bl	801ca1c <HAL_GPIO_WritePin>
break;
 80085cc:	e007      	b.n	80085de <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80085ce:	2201      	movs	r2, #1
 80085d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085d4:	4804      	ldr	r0, [pc, #16]	; (80085e8 <pl_L_DriveMotor_mode+0x4c>)
 80085d6:	f014 fa21 	bl	801ca1c <HAL_GPIO_WritePin>
break;
 80085da:	e000      	b.n	80085de <pl_L_DriveMotor_mode+0x42>
break;
 80085dc:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80085de:	bf00      	nop
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	48000800 	.word	0x48000800

080085ec <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d817      	bhi.n	800862a <pl_R_DriveMotor_mode+0x3e>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <pl_R_DriveMotor_mode+0x14>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008629 	.word	0x08008629
 8008604:	08008611 	.word	0x08008611
 8008608:	0800861d 	.word	0x0800861d
 800860c:	08008629 	.word	0x08008629
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8008610:	2201      	movs	r2, #1
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	4807      	ldr	r0, [pc, #28]	; (8008634 <pl_R_DriveMotor_mode+0x48>)
 8008616:	f014 fa01 	bl	801ca1c <HAL_GPIO_WritePin>
break;
 800861a:	e006      	b.n	800862a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <pl_R_DriveMotor_mode+0x48>)
 8008622:	f014 f9fb 	bl	801ca1c <HAL_GPIO_WritePin>
break;
 8008626:	e000      	b.n	800862a <pl_R_DriveMotor_mode+0x3e>
break;
 8008628:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800862a:	bf00      	nop
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	48000400 	.word	0x48000400

08008638 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800863c:	2108      	movs	r1, #8
 800863e:	4804      	ldr	r0, [pc, #16]	; (8008650 <pl_DriveMotor_start+0x18>)
 8008640:	f016 fa5c 	bl	801eafc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8008644:	2100      	movs	r1, #0
 8008646:	4802      	ldr	r0, [pc, #8]	; (8008650 <pl_DriveMotor_start+0x18>)
 8008648:	f016 fa58 	bl	801eafc <HAL_TIM_PWM_Start>
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}
 8008650:	2000f3ac 	.word	0x2000f3ac

08008654 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8008658:	2108      	movs	r1, #8
 800865a:	4804      	ldr	r0, [pc, #16]	; (800866c <pl_DriveMotor_stop+0x18>)
 800865c:	f016 fb5a 	bl	801ed14 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8008660:	2100      	movs	r1, #0
 8008662:	4802      	ldr	r0, [pc, #8]	; (800866c <pl_DriveMotor_stop+0x18>)
 8008664:	f016 fb56 	bl	801ed14 <HAL_TIM_PWM_Stop>
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	2000f3ac 	.word	0x2000f3ac

08008670 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <pl_DriveMotor_duty+0x28>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <pl_DriveMotor_duty+0x28>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	635a      	str	r2, [r3, #52]	; 0x34
}
 800868a:	bf00      	nop
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	2000f3ac 	.word	0x2000f3ac

0800869c <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80086a0:	2100      	movs	r1, #0
 80086a2:	4802      	ldr	r0, [pc, #8]	; (80086ac <pl_FunMotor_start+0x10>)
 80086a4:	f016 fa2a 	bl	801eafc <HAL_TIM_PWM_Start>
}
 80086a8:	bf00      	nop
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	2000f3f8 	.word	0x2000f3f8

080086b0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80086b4:	2100      	movs	r1, #0
 80086b6:	4802      	ldr	r0, [pc, #8]	; (80086c0 <pl_FunMotor_stop+0x10>)
 80086b8:	f016 fb2c 	bl	801ed14 <HAL_TIM_PWM_Stop>
}
 80086bc:	bf00      	nop
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	2000f3f8 	.word	0x2000f3f8

080086c4 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 80086ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80086d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008708 <pl_FunMotor_duty+0x44>
 80086d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086de:	ee17 3a90 	vmov	r3, s15
 80086e2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <pl_FunMotor_duty+0x48>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2264      	movs	r2, #100	; 0x64
 80086ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <pl_FunMotor_duty+0x48>)
 80086ee:	2264      	movs	r2, #100	; 0x64
 80086f0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <pl_FunMotor_duty+0x48>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	42c80000 	.word	0x42c80000
 800870c:	2000f3f8 	.word	0x2000f3f8

08008710 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
	AD_step=0;
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <pl_sensor_init+0x18>)
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800871a:	217f      	movs	r1, #127	; 0x7f
 800871c:	4803      	ldr	r0, [pc, #12]	; (800872c <pl_sensor_init+0x1c>)
 800871e:	f013 f83b 	bl	801b798 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000714 	.word	0x20000714
 800872c:	20000740 	.word	0x20000740

08008730 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8008736:	483c      	ldr	r0, [pc, #240]	; (8008828 <pl_getbatt+0xf8>)
 8008738:	f011 fc1c 	bl	8019f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 800873c:	2132      	movs	r1, #50	; 0x32
 800873e:	483a      	ldr	r0, [pc, #232]	; (8008828 <pl_getbatt+0xf8>)
 8008740:	f011 fd16 	bl	801a170 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8008744:	4838      	ldr	r0, [pc, #224]	; (8008828 <pl_getbatt+0xf8>)
 8008746:	f011 ff32 	bl	801a5ae <HAL_ADC_GetValue>
 800874a:	4603      	mov	r3, r0
 800874c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800874e:	4836      	ldr	r0, [pc, #216]	; (8008828 <pl_getbatt+0xf8>)
 8008750:	f011 fcda 	bl	801a108 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	ee17 0a90 	vmov	r0, s15
 8008762:	f7f7 ff19 	bl	8000598 <__aeabi_f2d>
 8008766:	a326      	add	r3, pc, #152	; (adr r3, 8008800 <pl_getbatt+0xd0>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f7 ff6c 	bl	8000648 <__aeabi_dmul>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	a323      	add	r3, pc, #140	; (adr r3, 8008808 <pl_getbatt+0xd8>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f8 f88d 	bl	800089c <__aeabi_ddiv>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4610      	mov	r0, r2
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <pl_getbatt+0xfc>)
 8008790:	f7f7 ff5a 	bl	8000648 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4610      	mov	r0, r2
 800879a:	4619      	mov	r1, r3
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	4b23      	ldr	r3, [pc, #140]	; (8008830 <pl_getbatt+0x100>)
 80087a2:	f7f8 f87b 	bl	800089c <__aeabi_ddiv>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	a318      	add	r3, pc, #96	; (adr r3, 8008810 <pl_getbatt+0xe0>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 ff48 	bl	8000648 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4610      	mov	r0, r2
 80087be:	4619      	mov	r1, r3
 80087c0:	a315      	add	r3, pc, #84	; (adr r3, 8008818 <pl_getbatt+0xe8>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f7f7 ff3f 	bl	8000648 <__aeabi_dmul>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4610      	mov	r0, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	a313      	add	r3, pc, #76	; (adr r3, 8008820 <pl_getbatt+0xf0>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f8 f860 	bl	800089c <__aeabi_ddiv>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	f7f8 fa08 	bl	8000bf8 <__aeabi_d2f>
 80087e8:	4603      	mov	r3, r0
 80087ea:	603b      	str	r3, [r7, #0]
return batt;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	ee07 3a90 	vmov	s15, r3
}
 80087f2:	eeb0 0a67 	vmov.f32	s0, s15
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	f3af 8000 	nop.w
 8008800:	66666666 	.word	0x66666666
 8008804:	400a6666 	.word	0x400a6666
 8008808:	00000000 	.word	0x00000000
 800880c:	40affe00 	.word	0x40affe00
 8008810:	66666666 	.word	0x66666666
 8008814:	3ff26666 	.word	0x3ff26666
 8008818:	9999999a 	.word	0x9999999a
 800881c:	400d9999 	.word	0x400d9999
 8008820:	ae147ae1 	.word	0xae147ae1
 8008824:	400ee147 	.word	0x400ee147
 8008828:	20000740 	.word	0x20000740
 800882c:	40340000 	.word	0x40340000
 8008830:	40240000 	.word	0x40240000
 8008834:	00000000 	.word	0x00000000

08008838 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800883e:	4882      	ldr	r0, [pc, #520]	; (8008a48 <pl_callback_getSensor+0x210>)
 8008840:	f011 fe54 	bl	801a4ec <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8008844:	4b81      	ldr	r3, [pc, #516]	; (8008a4c <pl_callback_getSensor+0x214>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b04      	cmp	r3, #4
 800884a:	f200 80d9 	bhi.w	8008a00 <pl_callback_getSensor+0x1c8>
 800884e:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <pl_callback_getSensor+0x1c>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008869 	.word	0x08008869
 8008858:	080088a1 	.word	0x080088a1
 800885c:	08008901 	.word	0x08008901
 8008860:	08008941 	.word	0x08008941
 8008864:	08008a01 	.word	0x08008a01
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8008868:	2201      	movs	r2, #1
 800886a:	2102      	movs	r1, #2
 800886c:	4878      	ldr	r0, [pc, #480]	; (8008a50 <pl_callback_getSensor+0x218>)
 800886e:	f014 f8d5 	bl	801ca1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008872:	2200      	movs	r2, #0
 8008874:	2110      	movs	r1, #16
 8008876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800887a:	f014 f8cf 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800887e:	2200      	movs	r2, #0
 8008880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008884:	4873      	ldr	r0, [pc, #460]	; (8008a54 <pl_callback_getSensor+0x21c>)
 8008886:	f014 f8c9 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800888e:	e002      	b.n	8008896 <pl_callback_getSensor+0x5e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3301      	adds	r3, #1
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800889c:	ddf8      	ble.n	8008890 <pl_callback_getSensor+0x58>
		break;
 800889e:	e0af      	b.n	8008a00 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 80088a0:	4b6d      	ldr	r3, [pc, #436]	; (8008a58 <pl_callback_getSensor+0x220>)
 80088a2:	885a      	ldrh	r2, [r3, #2]
 80088a4:	4b6d      	ldr	r3, [pc, #436]	; (8008a5c <pl_callback_getSensor+0x224>)
 80088a6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80088a8:	4b6b      	ldr	r3, [pc, #428]	; (8008a58 <pl_callback_getSensor+0x220>)
 80088aa:	889a      	ldrh	r2, [r3, #4]
 80088ac:	4b6b      	ldr	r3, [pc, #428]	; (8008a5c <pl_callback_getSensor+0x224>)
 80088ae:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80088b0:	4b69      	ldr	r3, [pc, #420]	; (8008a58 <pl_callback_getSensor+0x220>)
 80088b2:	88da      	ldrh	r2, [r3, #6]
 80088b4:	4b6a      	ldr	r3, [pc, #424]	; (8008a60 <pl_callback_getSensor+0x228>)
 80088b6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80088b8:	4b67      	ldr	r3, [pc, #412]	; (8008a58 <pl_callback_getSensor+0x220>)
 80088ba:	891a      	ldrh	r2, [r3, #8]
 80088bc:	4b68      	ldr	r3, [pc, #416]	; (8008a60 <pl_callback_getSensor+0x228>)
 80088be:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 80088c0:	4b65      	ldr	r3, [pc, #404]	; (8008a58 <pl_callback_getSensor+0x220>)
 80088c2:	895a      	ldrh	r2, [r3, #10]
 80088c4:	4b66      	ldr	r3, [pc, #408]	; (8008a60 <pl_callback_getSensor+0x228>)
 80088c6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80088c8:	2200      	movs	r2, #0
 80088ca:	2102      	movs	r1, #2
 80088cc:	4860      	ldr	r0, [pc, #384]	; (8008a50 <pl_callback_getSensor+0x218>)
 80088ce:	f014 f8a5 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 80088d2:	2201      	movs	r2, #1
 80088d4:	2110      	movs	r1, #16
 80088d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088da:	f014 f89f 	bl	801ca1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80088de:	2200      	movs	r2, #0
 80088e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088e4:	485b      	ldr	r0, [pc, #364]	; (8008a54 <pl_callback_getSensor+0x21c>)
 80088e6:	f014 f899 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80088ee:	e002      	b.n	80088f6 <pl_callback_getSensor+0xbe>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088fc:	ddf8      	ble.n	80088f0 <pl_callback_getSensor+0xb8>
		break;
 80088fe:	e07f      	b.n	8008a00 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8008900:	4b55      	ldr	r3, [pc, #340]	; (8008a58 <pl_callback_getSensor+0x220>)
 8008902:	88da      	ldrh	r2, [r3, #6]
 8008904:	4b55      	ldr	r3, [pc, #340]	; (8008a5c <pl_callback_getSensor+0x224>)
 8008906:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008908:	2200      	movs	r2, #0
 800890a:	2102      	movs	r1, #2
 800890c:	4850      	ldr	r0, [pc, #320]	; (8008a50 <pl_callback_getSensor+0x218>)
 800890e:	f014 f885 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008912:	2200      	movs	r2, #0
 8008914:	2110      	movs	r1, #16
 8008916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800891a:	f014 f87f 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 800891e:	2201      	movs	r2, #1
 8008920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008924:	484b      	ldr	r0, [pc, #300]	; (8008a54 <pl_callback_getSensor+0x21c>)
 8008926:	f014 f879 	bl	801ca1c <HAL_GPIO_WritePin>
		j=0;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800892e:	e002      	b.n	8008936 <pl_callback_getSensor+0xfe>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3301      	adds	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800893c:	ddf8      	ble.n	8008930 <pl_callback_getSensor+0xf8>
		break;
 800893e:	e05f      	b.n	8008a00 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8008940:	4b45      	ldr	r3, [pc, #276]	; (8008a58 <pl_callback_getSensor+0x220>)
 8008942:	885a      	ldrh	r2, [r3, #2]
 8008944:	4b46      	ldr	r3, [pc, #280]	; (8008a60 <pl_callback_getSensor+0x228>)
 8008946:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8008948:	4b43      	ldr	r3, [pc, #268]	; (8008a58 <pl_callback_getSensor+0x220>)
 800894a:	889a      	ldrh	r2, [r3, #4]
 800894c:	4b44      	ldr	r3, [pc, #272]	; (8008a60 <pl_callback_getSensor+0x228>)
 800894e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8008950:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <pl_callback_getSensor+0x220>)
 8008952:	891a      	ldrh	r2, [r3, #8]
 8008954:	4b41      	ldr	r3, [pc, #260]	; (8008a5c <pl_callback_getSensor+0x224>)
 8008956:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8008958:	4b3f      	ldr	r3, [pc, #252]	; (8008a58 <pl_callback_getSensor+0x220>)
 800895a:	895a      	ldrh	r2, [r3, #10]
 800895c:	4b3f      	ldr	r3, [pc, #252]	; (8008a5c <pl_callback_getSensor+0x224>)
 800895e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008960:	2200      	movs	r2, #0
 8008962:	2102      	movs	r1, #2
 8008964:	483a      	ldr	r0, [pc, #232]	; (8008a50 <pl_callback_getSensor+0x218>)
 8008966:	f014 f859 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800896a:	2200      	movs	r2, #0
 800896c:	2110      	movs	r1, #16
 800896e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008972:	f014 f853 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008976:	2200      	movs	r2, #0
 8008978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800897c:	4835      	ldr	r0, [pc, #212]	; (8008a54 <pl_callback_getSensor+0x21c>)
 800897e:	f014 f84d 	bl	801ca1c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8008986:	e002      	b.n	800898e <pl_callback_getSensor+0x156>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3301      	adds	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b32      	cmp	r3, #50	; 0x32
 8008992:	ddf9      	ble.n	8008988 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8008994:	4b30      	ldr	r3, [pc, #192]	; (8008a58 <pl_callback_getSensor+0x220>)
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 800899a:	887b      	ldrh	r3, [r7, #2]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a4:	ee17 0a90 	vmov	r0, s15
 80089a8:	f7f7 fdf6 	bl	8000598 <__aeabi_f2d>
 80089ac:	a320      	add	r3, pc, #128	; (adr r3, 8008a30 <pl_callback_getSensor+0x1f8>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fe49 	bl	8000648 <__aeabi_dmul>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4610      	mov	r0, r2
 80089bc:	4619      	mov	r1, r3
 80089be:	a31e      	add	r3, pc, #120	; (adr r3, 8008a38 <pl_callback_getSensor+0x200>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f7f7 ff6a 	bl	800089c <__aeabi_ddiv>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4610      	mov	r0, r2
 80089ce:	4619      	mov	r1, r3
 80089d0:	a31b      	add	r3, pc, #108	; (adr r3, 8008a40 <pl_callback_getSensor+0x208>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fe37 	bl	8000648 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	4b1f      	ldr	r3, [pc, #124]	; (8008a64 <pl_callback_getSensor+0x22c>)
 80089e8:	f7f7 ff58 	bl	800089c <__aeabi_ddiv>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4610      	mov	r0, r2
 80089f2:	4619      	mov	r1, r3
 80089f4:	f7f8 f900 	bl	8000bf8 <__aeabi_d2f>
 80089f8:	4603      	mov	r3, r0
 80089fa:	4a1b      	ldr	r2, [pc, #108]	; (8008a68 <pl_callback_getSensor+0x230>)
 80089fc:	6013      	str	r3, [r2, #0]
		break;
 80089fe:	bf00      	nop

		break;
	}


	AD_step++;
 8008a00:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <pl_callback_getSensor+0x214>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <pl_callback_getSensor+0x214>)
 8008a0a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8008a0c:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <pl_callback_getSensor+0x214>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d005      	beq.n	8008a20 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008a14:	2206      	movs	r2, #6
 8008a16:	4910      	ldr	r1, [pc, #64]	; (8008a58 <pl_callback_getSensor+0x220>)
 8008a18:	480b      	ldr	r0, [pc, #44]	; (8008a48 <pl_callback_getSensor+0x210>)
 8008a1a:	f011 fc9d 	bl	801a358 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8008a1e:	e002      	b.n	8008a26 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8008a20:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <pl_callback_getSensor+0x214>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	66666666 	.word	0x66666666
 8008a34:	400a6666 	.word	0x400a6666
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	40affe00 	.word	0x40affe00
 8008a40:	00000000 	.word	0x00000000
 8008a44:	4062c000 	.word	0x4062c000
 8008a48:	20000740 	.word	0x20000740
 8008a4c:	20000714 	.word	0x20000714
 8008a50:	48000400 	.word	0x48000400
 8008a54:	48000800 	.word	0x48000800
 8008a58:	20000708 	.word	0x20000708
 8008a5c:	20000718 	.word	0x20000718
 8008a60:	20000724 	.word	0x20000724
 8008a64:	40490000 	.word	0x40490000
 8008a68:	20000730 	.word	0x20000730

08008a6c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008a70:	2206      	movs	r2, #6
 8008a72:	4903      	ldr	r1, [pc, #12]	; (8008a80 <pl_interupt_getSensor+0x14>)
 8008a74:	4803      	ldr	r0, [pc, #12]	; (8008a84 <pl_interupt_getSensor+0x18>)
 8008a76:	f011 fc6f 	bl	801a358 <HAL_ADC_Start_DMA>

}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000708 	.word	0x20000708
 8008a84:	20000740 	.word	0x20000740

08008a88 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
	count_mode=0;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <pl_timer_init+0x1c>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <pl_timer_init+0x20>)
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8008a9a:	4804      	ldr	r0, [pc, #16]	; (8008aac <pl_timer_init+0x24>)
 8008a9c:	f015 ff66 	bl	801e96c <HAL_TIM_Base_Start_IT>
}
 8008aa0:	bf00      	nop
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	2000073c 	.word	0x2000073c
 8008aa8:	20000738 	.word	0x20000738
 8008aac:	2000f360 	.word	0x2000f360

08008ab0 <interrupt_timer>:

void interrupt_timer(void){
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
	g_timCount++;
 8008ab4:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <interrupt_timer+0x48>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <interrupt_timer+0x48>)
 8008abc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8008abe:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <interrupt_timer+0x4c>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d112      	bne.n	8008aec <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <interrupt_timer+0x50>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f7 fd64 	bl	8000598 <__aeabi_f2d>
 8008ad0:	a307      	add	r3, pc, #28	; (adr r3, 8008af0 <interrupt_timer+0x40>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fc01 	bl	80002dc <__adddf3>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f7f8 f889 	bl	8000bf8 <__aeabi_d2f>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4a05      	ldr	r2, [pc, #20]	; (8008b00 <interrupt_timer+0x50>)
 8008aea:	6013      	str	r3, [r2, #0]
	}

}
 8008aec:	bf00      	nop
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008af4:	3f50624d 	.word	0x3f50624d
 8008af8:	20000734 	.word	0x20000734
 8008afc:	2000073c 	.word	0x2000073c
 8008b00:	20000738 	.word	0x20000738

08008b04 <tic_timer>:

void tic_timer(void){
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
	count_mode=1;
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <tic_timer+0x1c>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008b0e:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <tic_timer+0x20>)
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	2000073c 	.word	0x2000073c
 8008b24:	20000738 	.word	0x20000738

08008b28 <toc_timer>:

float toc_timer(void){
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8008b2e:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <toc_timer+0x30>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <toc_timer+0x34>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008b3a:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <toc_timer+0x30>)
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
	return timer;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	ee07 3a90 	vmov	s15, r3
}
 8008b48:	eeb0 0a67 	vmov.f32	s0, s15
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	20000738 	.word	0x20000738
 8008b5c:	2000073c 	.word	0x2000073c

08008b60 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008b60:	b5b0      	push	{r4, r5, r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008b68:	4b1d      	ldr	r3, [pc, #116]	; (8008be0 <wait_ms+0x80>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <wait_ms+0x84>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008b76:	bf00      	nop
 8008b78:	4b19      	ldr	r3, [pc, #100]	; (8008be0 <wait_ms+0x80>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b84:	ee17 0a90 	vmov	r0, s15
 8008b88:	f7f7 fd06 	bl	8000598 <__aeabi_f2d>
 8008b8c:	a312      	add	r3, pc, #72	; (adr r3, 8008bd8 <wait_ms+0x78>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fd59 	bl	8000648 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	a30e      	add	r3, pc, #56	; (adr r3, 8008bd8 <wait_ms+0x78>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fe7a 	bl	800089c <__aeabi_ddiv>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4614      	mov	r4, r2
 8008bae:	461d      	mov	r5, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7f7 fccf 	bl	8000554 <__aeabi_ui2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 ffb5 	bl	8000b2c <__aeabi_dcmplt>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1d7      	bne.n	8008b78 <wait_ms+0x18>
        }

}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008bdc:	3f50624d 	.word	0x3f50624d
 8008be0:	20000734 	.word	0x20000734
 8008be4:	2000f360 	.word	0x2000f360

08008be8 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008be8:	b5b0      	push	{r4, r5, r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <wait_ms_NoReset+0x78>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008bf6:	bf00      	nop
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <wait_ms_NoReset+0x78>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c04:	ee17 0a90 	vmov	r0, s15
 8008c08:	f7f7 fcc6 	bl	8000598 <__aeabi_f2d>
 8008c0c:	a312      	add	r3, pc, #72	; (adr r3, 8008c58 <wait_ms_NoReset+0x70>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fd19 	bl	8000648 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	a30e      	add	r3, pc, #56	; (adr r3, 8008c58 <wait_ms_NoReset+0x70>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 fe3a 	bl	800089c <__aeabi_ddiv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	461d      	mov	r5, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7f7 fc8f 	bl	8000554 <__aeabi_ui2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 ff75 	bl	8000b2c <__aeabi_dcmplt>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1d7      	bne.n	8008bf8 <wait_ms_NoReset+0x10>
        }

}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bdb0      	pop	{r4, r5, r7, pc}
 8008c52:	bf00      	nop
 8008c54:	f3af 8000 	nop.w
 8008c58:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c5c:	3f50624d 	.word	0x3f50624d
 8008c60:	20000734 	.word	0x20000734

08008c64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08c      	sub	sp, #48	; 0x30
 8008c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	605a      	str	r2, [r3, #4]
 8008c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008c76:	1d3b      	adds	r3, r7, #4
 8008c78:	2220      	movs	r2, #32
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f017 fff1 	bl	8020c64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008c82:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008c84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008c8a:	4b54      	ldr	r3, [pc, #336]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008c8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008c92:	4b52      	ldr	r3, [pc, #328]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c98:	4b50      	ldr	r3, [pc, #320]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008c9e:	4b4f      	ldr	r3, [pc, #316]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008ca4:	4b4d      	ldr	r3, [pc, #308]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008caa:	4b4c      	ldr	r3, [pc, #304]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cac:	2208      	movs	r2, #8
 8008cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008cb0:	4b4a      	ldr	r3, [pc, #296]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008cb6:	4b49      	ldr	r3, [pc, #292]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008cbc:	4b47      	ldr	r3, [pc, #284]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cbe:	2206      	movs	r2, #6
 8008cc0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008cc2:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008cca:	4b44      	ldr	r3, [pc, #272]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008cd0:	4b42      	ldr	r3, [pc, #264]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008cd6:	4b41      	ldr	r3, [pc, #260]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008cde:	4b3f      	ldr	r3, [pc, #252]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008ce4:	4b3d      	ldr	r3, [pc, #244]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008cec:	483b      	ldr	r0, [pc, #236]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008cee:	f010 ff8d 	bl	8019c0c <HAL_ADC_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008cf8:	f001 fdd7 	bl	800a8aa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d04:	4619      	mov	r1, r3
 8008d06:	4835      	ldr	r0, [pc, #212]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008d08:	f012 fdda 	bl	801b8c0 <HAL_ADCEx_MultiModeConfigChannel>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008d12:	f001 fdca 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008d16:	4b32      	ldr	r3, [pc, #200]	; (8008de0 <MX_ADC1_Init+0x17c>)
 8008d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008d1a:	2306      	movs	r3, #6
 8008d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008d22:	237f      	movs	r3, #127	; 0x7f
 8008d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008d26:	2304      	movs	r3, #4
 8008d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d2e:	1d3b      	adds	r3, r7, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	482a      	ldr	r0, [pc, #168]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008d34:	f011 fea0 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008d3e:	f001 fdb4 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008d42:	4b28      	ldr	r3, [pc, #160]	; (8008de4 <MX_ADC1_Init+0x180>)
 8008d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008d46:	230c      	movs	r3, #12
 8008d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d4a:	1d3b      	adds	r3, r7, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4823      	ldr	r0, [pc, #140]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008d50:	f011 fe92 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008d5a:	f001 fda6 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008d5e:	4b22      	ldr	r3, [pc, #136]	; (8008de8 <MX_ADC1_Init+0x184>)
 8008d60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008d62:	2312      	movs	r3, #18
 8008d64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	481c      	ldr	r0, [pc, #112]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008d6c:	f011 fe84 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008d76:	f001 fd98 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	; (8008dec <MX_ADC1_Init+0x188>)
 8008d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008d7e:	2318      	movs	r3, #24
 8008d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	4619      	mov	r1, r3
 8008d86:	4815      	ldr	r0, [pc, #84]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008d88:	f011 fe76 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008d92:	f001 fd8a 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <MX_ADC1_Init+0x18c>)
 8008d98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008da0:	1d3b      	adds	r3, r7, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	480d      	ldr	r0, [pc, #52]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008da6:	f011 fe67 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008db0:	f001 fd7b 	bl	800a8aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <MX_ADC1_Init+0x190>)
 8008db6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008db8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008dbe:	1d3b      	adds	r3, r7, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4806      	ldr	r0, [pc, #24]	; (8008ddc <MX_ADC1_Init+0x178>)
 8008dc4:	f011 fe58 	bl	801aa78 <HAL_ADC_ConfigChannel>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008dce:	f001 fd6c 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008dd2:	bf00      	nop
 8008dd4:	3730      	adds	r7, #48	; 0x30
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000740 	.word	0x20000740
 8008de0:	2e300800 	.word	0x2e300800
 8008de4:	3ef08000 	.word	0x3ef08000
 8008de8:	10c00010 	.word	0x10c00010
 8008dec:	0c900008 	.word	0x0c900008
 8008df0:	08600004 	.word	0x08600004
 8008df4:	04300002 	.word	0x04300002

08008df8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b09e      	sub	sp, #120	; 0x78
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	605a      	str	r2, [r3, #4]
 8008e0a:	609a      	str	r2, [r3, #8]
 8008e0c:	60da      	str	r2, [r3, #12]
 8008e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	2250      	movs	r2, #80	; 0x50
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f017 ff23 	bl	8020c64 <memset>
  if(adcHandle->Instance==ADC1)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e26:	f040 8082 	bne.w	8008f2e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008e30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008e34:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f014 fbea 	bl	801d614 <HAL_RCCEx_PeriphCLKConfig>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008e46:	f001 fd30 	bl	800a8aa <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008e4a:	4b3b      	ldr	r3, [pc, #236]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	4a3a      	ldr	r2, [pc, #232]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e56:	4b38      	ldr	r3, [pc, #224]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e5e:	613b      	str	r3, [r7, #16]
 8008e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e62:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	4a34      	ldr	r2, [pc, #208]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e6e:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7a:	4b2f      	ldr	r3, [pc, #188]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7e:	4a2e      	ldr	r2, [pc, #184]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e80:	f043 0302 	orr.w	r3, r3, #2
 8008e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e86:	4b2c      	ldr	r3, [pc, #176]	; (8008f38 <HAL_ADC_MspInit+0x140>)
 8008e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008e92:	230f      	movs	r3, #15
 8008e94:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e96:	2303      	movs	r3, #3
 8008e98:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ea8:	f013 fc36 	bl	801c718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008eac:	f241 0301 	movw	r3, #4097	; 0x1001
 8008eb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	481e      	ldr	r0, [pc, #120]	; (8008f3c <HAL_ADC_MspInit+0x144>)
 8008ec2:	f013 fc29 	bl	801c718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008ec6:	4b1e      	ldr	r3, [pc, #120]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ec8:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <HAL_ADC_MspInit+0x14c>)
 8008eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008ecc:	4b1c      	ldr	r3, [pc, #112]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ece:	2205      	movs	r2, #5
 8008ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ed8:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008ede:	4b18      	ldr	r3, [pc, #96]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ee0:	2280      	movs	r2, #128	; 0x80
 8008ee2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008eec:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ef2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008ef4:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008efa:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008f02:	480f      	ldr	r0, [pc, #60]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008f04:	f012 fed4 	bl	801bcb0 <HAL_DMA_Init>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008f0e:	f001 fccc 	bl	800a8aa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008f16:	655a      	str	r2, [r3, #84]	; 0x54
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <HAL_ADC_MspInit+0x148>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	2012      	movs	r0, #18
 8008f24:	f012 fe8f 	bl	801bc46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008f28:	2012      	movs	r0, #18
 8008f2a:	f012 fea6 	bl	801bc7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008f2e:	bf00      	nop
 8008f30:	3778      	adds	r7, #120	; 0x78
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	48000400 	.word	0x48000400
 8008f40:	200007ac 	.word	0x200007ac
 8008f44:	40020008 	.word	0x40020008

08008f48 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008f50:	f7ff fc72 	bl	8008838 <pl_callback_getSensor>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	f107 0420 	add.w	r4, r7, #32
 8008f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008f6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7a:	f2c0 819d 	blt.w	80092b8 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008f7e:	4bcd      	ldr	r3, [pc, #820]	; (80092b4 <cal_table+0x358>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b06      	cmp	r3, #6
 8008f86:	f200 833a 	bhi.w	80095fe <cal_table+0x6a2>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <cal_table+0x34>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	080095f1 	.word	0x080095f1
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	0800911f 	.word	0x0800911f
 8008f9c:	0800923d 	.word	0x0800923d
 8008fa0:	080095f1 	.word	0x080095f1
 8008fa4:	08009269 	.word	0x08009269
 8008fa8:	0800928f 	.word	0x0800928f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	ed93 7a00 	vldr	s14, [r3]
 8008fb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	db0a      	blt.n	8008fd6 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	f04f 0200 	mov.w	r2, #0
 8008fcc:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008fce:	4bb9      	ldr	r3, [pc, #740]	; (80092b4 <cal_table+0x358>)
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008fd4:	e313      	b.n	80095fe <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008fd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	edd3 7a00 	vldr	s15, [r3]
 8008fe0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	edd3 7a00 	vldr	s15, [r3]
 8008fea:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008fee:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008ff2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ff6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008ffa:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008ffe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009002:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009006:	ee66 7a27 	vmul.f32	s15, s12, s15
 800900a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800900e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009012:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009016:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800901a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800901e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009026:	d900      	bls.n	800902a <cal_table+0xce>
		break;
 8009028:	e2e9      	b.n	80095fe <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	edd3 7a00 	vldr	s15, [r3]
 8009030:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	edd3 7a00 	vldr	s15, [r3]
 800903a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800903e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009042:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800904a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800904e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009052:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800905a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800905e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009062:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009066:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009072:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800907c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009080:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4618      	mov	r0, r3
 800908a:	f7f7 fa85 	bl	8000598 <__aeabi_f2d>
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	4618      	mov	r0, r3
 8009096:	f7f7 fa7f 	bl	8000598 <__aeabi_f2d>
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	f7f7 fad1 	bl	8000648 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4690      	mov	r8, r2
 80090ac:	4699      	mov	r9, r3
 80090ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80090b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090b6:	ee17 0a90 	vmov	r0, s15
 80090ba:	f7f7 fa6d 	bl	8000598 <__aeabi_f2d>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 fabf 	bl	8000648 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4620      	mov	r0, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	f7f7 f901 	bl	80002d8 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4610      	mov	r0, r2
 80090dc:	4619      	mov	r1, r3
 80090de:	f7f7 fd8b 	bl	8000bf8 <__aeabi_d2f>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	ed93 7a00 	vldr	s14, [r3]
 80090ee:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80090f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80090f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8009108:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800910c:	eef1 7a67 	vneg.f32	s15, s15
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009116:	4b67      	ldr	r3, [pc, #412]	; (80092b4 <cal_table+0x358>)
 8009118:	2203      	movs	r2, #3
 800911a:	701a      	strb	r2, [r3, #0]
		break;
 800911c:	e26f      	b.n	80095fe <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800911e:	ed97 7a08 	vldr	s14, [r7, #32]
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	edd3 7a02 	vldr	s15, [r3, #8]
 8009128:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800912c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009130:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009134:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009138:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800913c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009140:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009144:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009148:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800914c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009150:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009154:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8009158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800915c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009160:	d900      	bls.n	8009164 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8009162:	e24c      	b.n	80095fe <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	ed93 7a02 	vldr	s14, [r3, #8]
 800916a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800916e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009172:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8009176:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800917a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800917e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009182:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009186:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800918a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800918e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009192:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009196:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800919a:	edd7 7a08 	vldr	s15, [r7, #32]
 800919e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80091a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ac:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f7 f9ef 	bl	8000598 <__aeabi_f2d>
 80091ba:	4604      	mov	r4, r0
 80091bc:	460d      	mov	r5, r1
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7f7 f9e9 	bl	8000598 <__aeabi_f2d>
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	f7f7 fa3b 	bl	8000648 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4690      	mov	r8, r2
 80091d8:	4699      	mov	r9, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7f7 f9dc 	bl	8000598 <__aeabi_f2d>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4640      	mov	r0, r8
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7f7 fa2e 	bl	8000648 <__aeabi_dmul>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 f870 	bl	80002d8 <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4610      	mov	r0, r2
 80091fe:	4619      	mov	r1, r3
 8009200:	f7f7 fcfa 	bl	8000bf8 <__aeabi_d2f>
 8009204:	4602      	mov	r2, r0
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	ed93 7a00 	vldr	s14, [r3]
 8009210:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009214:	edd7 7a01 	vldr	s15, [r7, #4]
 8009218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800921c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8009226:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800922a:	eef1 7a67 	vneg.f32	s15, s15
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8009234:	4b1f      	ldr	r3, [pc, #124]	; (80092b4 <cal_table+0x358>)
 8009236:	2203      	movs	r2, #3
 8009238:	701a      	strb	r2, [r3, #0]
		break;
 800923a:	e1e0      	b.n	80095fe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	ed93 7a00 	vldr	s14, [r3]
 8009242:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	d900      	bls.n	8009252 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009250:	e1d5      	b.n	80095fe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8009252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009260:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <cal_table+0x358>)
 8009262:	2204      	movs	r2, #4
 8009264:	701a      	strb	r2, [r3, #0]
		break;
 8009266:	e1ca      	b.n	80095fe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	ed93 7a02 	vldr	s14, [r3, #8]
 800926e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927a:	da00      	bge.n	800927e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800927c:	e1bf      	b.n	80095fe <cal_table+0x6a2>
			target->acceleration = 0;
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <cal_table+0x358>)
 8009288:	2204      	movs	r2, #4
 800928a:	701a      	strb	r2, [r3, #0]
		break;
 800928c:	e1b7      	b.n	80095fe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	ed93 7a02 	vldr	s14, [r3, #8]
 8009294:	edd7 7a08 	vldr	s15, [r7, #32]
 8009298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a0:	da00      	bge.n	80092a4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80092a2:	e1ac      	b.n	80095fe <cal_table+0x6a2>
			target->acceleration = 0;
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80092ac:	4b01      	ldr	r3, [pc, #4]	; (80092b4 <cal_table+0x358>)
 80092ae:	2204      	movs	r2, #4
 80092b0:	701a      	strb	r2, [r3, #0]
		break;
 80092b2:	e1a4      	b.n	80095fe <cal_table+0x6a2>
 80092b4:	20000810 	.word	0x20000810
	}
}else{
	switch (g_acc_flag) {
 80092b8:	4bce      	ldr	r3, [pc, #824]	; (80095f4 <cal_table+0x698>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b06      	cmp	r3, #6
 80092c0:	f200 819d 	bhi.w	80095fe <cal_table+0x6a2>
 80092c4:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <cal_table+0x370>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080095fd 	.word	0x080095fd
 80092d0:	080092e9 	.word	0x080092e9
 80092d4:	0800945b 	.word	0x0800945b
 80092d8:	08009571 	.word	0x08009571
 80092dc:	0800959d 	.word	0x0800959d
 80092e0:	080095a5 	.word	0x080095a5
 80092e4:	080095cb 	.word	0x080095cb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	ed93 7a00 	vldr	s14, [r3]
 80092ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80092f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fa:	d80a      	bhi.n	8009312 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 80092fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800930a:	4bba      	ldr	r3, [pc, #744]	; (80095f4 <cal_table+0x698>)
 800930c:	2202      	movs	r2, #2
 800930e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8009310:	e175      	b.n	80095fe <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8009312:	edd7 7a08 	vldr	s15, [r7, #32]
 8009316:	eeb1 7a67 	vneg.f32	s14, s15
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	edd3 7a00 	vldr	s15, [r3]
 8009320:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	edd3 7a00 	vldr	s15, [r3]
 800932a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800932e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8009332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009336:	ee66 7a27 	vmul.f32	s15, s12, s15
 800933a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800933e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009342:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009346:	ee66 7a27 	vmul.f32	s15, s12, s15
 800934a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800934e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009352:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009356:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800935a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800935e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009366:	d900      	bls.n	800936a <cal_table+0x40e>
		break;
 8009368:	e149      	b.n	80095fe <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	edd3 7a00 	vldr	s15, [r3]
 8009370:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	edd3 7a00 	vldr	s15, [r3]
 800937a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800937e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009382:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800938a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800938e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009392:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800939a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800939e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80093a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80093a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80093b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80093c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093c4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f7 f8e3 	bl	8000598 <__aeabi_f2d>
 80093d2:	4604      	mov	r4, r0
 80093d4:	460d      	mov	r5, r1
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	4618      	mov	r0, r3
 80093da:	f7f7 f8dd 	bl	8000598 <__aeabi_f2d>
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	f7f7 f92f 	bl	8000648 <__aeabi_dmul>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4690      	mov	r8, r2
 80093f0:	4699      	mov	r9, r3
 80093f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80093f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80093fa:	ee17 0a90 	vmov	r0, s15
 80093fe:	f7f7 f8cb 	bl	8000598 <__aeabi_f2d>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	f7f7 f91d 	bl	8000648 <__aeabi_dmul>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4620      	mov	r0, r4
 8009414:	4629      	mov	r1, r5
 8009416:	f7f6 ff61 	bl	80002dc <__adddf3>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4610      	mov	r0, r2
 8009420:	4619      	mov	r1, r3
 8009422:	f7f7 fbe9 	bl	8000bf8 <__aeabi_d2f>
 8009426:	4602      	mov	r2, r0
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	ed93 7a00 	vldr	s14, [r3]
 8009432:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009436:	edd7 7a01 	vldr	s15, [r7, #4]
 800943a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800943e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 800944c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8009452:	4b68      	ldr	r3, [pc, #416]	; (80095f4 <cal_table+0x698>)
 8009454:	2203      	movs	r2, #3
 8009456:	701a      	strb	r2, [r3, #0]
		break;
 8009458:	e0d1      	b.n	80095fe <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009460:	edd7 7a08 	vldr	s15, [r7, #32]
 8009464:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8009468:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800946c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009470:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009474:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009478:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800947c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009480:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009484:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009488:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800948c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009490:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8009494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800949c:	d900      	bls.n	80094a0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 800949e:	e0ae      	b.n	80095fe <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80094a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80094aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80094ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80094b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80094b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80094be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80094c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80094c6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80094ca:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80094ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80094d2:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80094d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80094da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80094e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e8:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f7 f851 	bl	8000598 <__aeabi_f2d>
 80094f6:	4604      	mov	r4, r0
 80094f8:	460d      	mov	r5, r1
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f7 f84b 	bl	8000598 <__aeabi_f2d>
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	f7f7 f89d 	bl	8000648 <__aeabi_dmul>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4690      	mov	r8, r2
 8009514:	4699      	mov	r9, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7f7 f83e 	bl	8000598 <__aeabi_f2d>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 f890 	bl	8000648 <__aeabi_dmul>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f6 fed4 	bl	80002dc <__adddf3>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4610      	mov	r0, r2
 800953a:	4619      	mov	r1, r3
 800953c:	f7f7 fb5c 	bl	8000bf8 <__aeabi_d2f>
 8009540:	4602      	mov	r2, r0
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	ed93 7a00 	vldr	s14, [r3]
 800954c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009550:	edd7 7a01 	vldr	s15, [r7, #4]
 8009554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8009562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009568:	4b22      	ldr	r3, [pc, #136]	; (80095f4 <cal_table+0x698>)
 800956a:	2203      	movs	r2, #3
 800956c:	701a      	strb	r2, [r3, #0]
		break;
 800956e:	e046      	b.n	80095fe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	ed93 7a00 	vldr	s14, [r3]
 8009576:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800957a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009582:	da00      	bge.n	8009586 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009584:	e03b      	b.n	80095fe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8009586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	f04f 0200 	mov.w	r2, #0
 8009592:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009594:	4b17      	ldr	r3, [pc, #92]	; (80095f4 <cal_table+0x698>)
 8009596:	2204      	movs	r2, #4
 8009598:	701a      	strb	r2, [r3, #0]
		break;
 800959a:	e030      	b.n	80095fe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 800959c:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <cal_table+0x69c>)
 800959e:	2201      	movs	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
		break;
 80095a2:	e02c      	b.n	80095fe <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80095aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80095ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b6:	d900      	bls.n	80095ba <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80095b8:	e021      	b.n	80095fe <cal_table+0x6a2>
			target->acceleration = 0;
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80095c2:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <cal_table+0x698>)
 80095c4:	2204      	movs	r2, #4
 80095c6:	701a      	strb	r2, [r3, #0]
		break;
 80095c8:	e019      	b.n	80095fe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80095d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80095d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	d900      	bls.n	80095e0 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80095de:	e00e      	b.n	80095fe <cal_table+0x6a2>
			target->acceleration = 0;
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80095e8:	4b02      	ldr	r3, [pc, #8]	; (80095f4 <cal_table+0x698>)
 80095ea:	2204      	movs	r2, #4
 80095ec:	701a      	strb	r2, [r3, #0]
		break;
 80095ee:	e006      	b.n	80095fe <cal_table+0x6a2>
		break;
 80095f0:	bf00      	nop
 80095f2:	e004      	b.n	80095fe <cal_table+0x6a2>
 80095f4:	20000810 	.word	0x20000810
 80095f8:	20000811 	.word	0x20000811
		break;
 80095fc:	bf00      	nop
	}

}

}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009608:	b004      	add	sp, #16
 800960a:	4770      	bx	lr

0800960c <cal_table_dis>:



// 減速をより速くした機能を追加
void cal_table_dis(TRAPEZOID input,TARGET *target){
 800960c:	b084      	sub	sp, #16
 800960e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800961a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
float acc_distance;//初速度から現在の速度に達するまでに使った距離
float dec_distance;//現在の速度から終端速度になるのに必要なた距離
float velocity=(fusion_speedL+fusion_speedR)/2;
 800961e:	4bb3      	ldr	r3, [pc, #716]	; (80098ec <cal_table_dis+0x2e0>)
 8009620:	ed93 7a00 	vldr	s14, [r3]
 8009624:	4bb2      	ldr	r3, [pc, #712]	; (80098f0 <cal_table_dis+0x2e4>)
 8009626:	edd3 7a00 	vldr	s15, [r3]
 800962a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800962e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009636:	edc7 7a05 	vstr	s15, [r7, #20]
float distance=(fusion_distanceL+fusion_distanceL)/2;
 800963a:	4bae      	ldr	r3, [pc, #696]	; (80098f4 <cal_table_dis+0x2e8>)
 800963c:	edd3 7a00 	vldr	s15, [r3]
 8009640:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009644:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800964c:	edc7 7a04 	vstr	s15, [r7, #16]
if (input.displacement>=0){
 8009650:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965c:	f2c0 812f 	blt.w	80098be <cal_table_dis+0x2b2>
	switch (g_acc_flag) {
 8009660:	4ba5      	ldr	r3, [pc, #660]	; (80098f8 <cal_table_dis+0x2ec>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b06      	cmp	r3, #6
 8009668:	f200 82d7 	bhi.w	8009c1a <cal_table_dis+0x60e>
 800966c:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <cal_table_dis+0x68>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	08009c11 	.word	0x08009c11
 8009678:	08009691 	.word	0x08009691
 800967c:	08009719 	.word	0x08009719
 8009680:	08009847 	.word	0x08009847
 8009684:	08009c11 	.word	0x08009c11
 8009688:	08009873 	.word	0x08009873
 800968c:	08009899 	.word	0x08009899
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			acc_distance = distance;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	60fb      	str	r3, [r7, #12]
			dec_distance = (velocity*velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009694:	edd7 7a05 	vldr	s15, [r7, #20]
 8009698:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800969c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80096a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80096a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096b4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80096b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096bc:	edc7 7a02 	vstr	s15, [r7, #8]
			target->displacement = distance;
 80096c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	609a      	str	r2, [r3, #8]
			target->velocity = velocity;
 80096c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	601a      	str	r2, [r3, #0]
			target->acceleration = 10000000;
 80096cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ce:	4a8b      	ldr	r2, [pc, #556]	; (80098fc <cal_table_dis+0x2f0>)
 80096d0:	605a      	str	r2, [r3, #4]
			if (velocity >= input.count_velocity){
 80096d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80096d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80096da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e2:	f280 8297 	bge.w	8009c14 <cal_table_dis+0x608>
//				velocity = input.count_velocity;
//				target->acceleration = 0;
//				g_acc_flag=2;
			}
			else if(input.displacement <= (acc_distance + dec_distance)){
 80096e6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80096ea:	edd7 6a03 	vldr	s13, [r7, #12]
 80096ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fe:	d900      	bls.n	8009702 <cal_table_dis+0xf6>
//				velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.deceleration;
				g_acc_flag=3;
			}
		break;
 8009700:	e288      	b.n	8009c14 <cal_table_dis+0x608>
				target->acceleration = -input.deceleration;
 8009702:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009706:	eef1 7a67 	vneg.f32	s15, s15
 800970a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800970c:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009710:	4b79      	ldr	r3, [pc, #484]	; (80098f8 <cal_table_dis+0x2ec>)
 8009712:	2203      	movs	r2, #3
 8009714:	701a      	strb	r2, [r3, #0]
		break;
 8009716:	e27d      	b.n	8009c14 <cal_table_dis+0x608>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009718:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800971c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009724:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009728:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800972c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009734:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009738:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800973c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009744:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009748:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800974c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009754:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009758:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800975c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009764:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009768:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800976c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009774:	edc7 7a02 	vstr	s15, [r7, #8]
		if (input.displacement-target->displacement <= dec_distance) {
 8009778:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800977c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009786:	ed97 7a02 	vldr	s14, [r7, #8]
 800978a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800978e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009792:	da00      	bge.n	8009796 <cal_table_dis+0x18a>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.deceleration;
			g_acc_flag=3;
		}
		break;
 8009794:	e241      	b.n	8009c1a <cal_table_dis+0x60e>
			time_over=(target->displacement+dec_distance-input.displacement)/target->velocity;
 8009796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009798:	ed93 7a02 	vldr	s14, [r3, #8]
 800979c:	edd7 7a02 	vldr	s15, [r7, #8]
 80097a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80097a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80097ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ae:	ed93 7a00 	vldr	s14, [r3]
 80097b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b6:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80097ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f6 feea 	bl	8000598 <__aeabi_f2d>
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f6 fee4 	bl	8000598 <__aeabi_f2d>
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	f7f6 ff36 	bl	8000648 <__aeabi_dmul>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	4690      	mov	r8, r2
 80097e2:	4699      	mov	r9, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7f6 fed7 	bl	8000598 <__aeabi_f2d>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4640      	mov	r0, r8
 80097f0:	4649      	mov	r1, r9
 80097f2:	f7f6 ff29 	bl	8000648 <__aeabi_dmul>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 fd6b 	bl	80002d8 <__aeabi_dsub>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f7f7 f9f5 	bl	8000bf8 <__aeabi_d2f>
 800980e:	4602      	mov	r2, r0
 8009810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009812:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8009814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009816:	ed93 7a00 	vldr	s14, [r3]
 800981a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800981e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800982c:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.deceleration;
 8009830:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009834:	eef1 7a67 	vneg.f32	s15, s15
 8009838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983a:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800983e:	4b2e      	ldr	r3, [pc, #184]	; (80098f8 <cal_table_dis+0x2ec>)
 8009840:	2203      	movs	r2, #3
 8009842:	701a      	strb	r2, [r3, #0]
		break;
 8009844:	e1e9      	b.n	8009c1a <cal_table_dis+0x60e>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8009846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009848:	ed93 7a00 	vldr	s14, [r3]
 800984c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	d900      	bls.n	800985c <cal_table_dis+0x250>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800985a:	e1de      	b.n	8009c1a <cal_table_dis+0x60e>
			target->velocity = input.end_velocity;
 800985c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009860:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009864:	f04f 0200 	mov.w	r2, #0
 8009868:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800986a:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <cal_table_dis+0x2ec>)
 800986c:	2204      	movs	r2, #4
 800986e:	701a      	strb	r2, [r3, #0]
		break;
 8009870:	e1d3      	b.n	8009c1a <cal_table_dis+0x60e>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	ed93 7a02 	vldr	s14, [r3, #8]
 8009878:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800987c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	da00      	bge.n	8009888 <cal_table_dis+0x27c>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009886:	e1c8      	b.n	8009c1a <cal_table_dis+0x60e>
			target->acceleration = 0;
 8009888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988a:	f04f 0200 	mov.w	r2, #0
 800988e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009890:	4b19      	ldr	r3, [pc, #100]	; (80098f8 <cal_table_dis+0x2ec>)
 8009892:	2204      	movs	r2, #4
 8009894:	701a      	strb	r2, [r3, #0]
		break;
 8009896:	e1c0      	b.n	8009c1a <cal_table_dis+0x60e>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8009898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989a:	ed93 7a02 	vldr	s14, [r3, #8]
 800989e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80098a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098aa:	da00      	bge.n	80098ae <cal_table_dis+0x2a2>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80098ac:	e1b5      	b.n	8009c1a <cal_table_dis+0x60e>
			target->acceleration = 0;
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80098b6:	4b10      	ldr	r3, [pc, #64]	; (80098f8 <cal_table_dis+0x2ec>)
 80098b8:	2204      	movs	r2, #4
 80098ba:	701a      	strb	r2, [r3, #0]
		break;
 80098bc:	e1ad      	b.n	8009c1a <cal_table_dis+0x60e>
	}
}else{
	switch (g_acc_flag) {
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <cal_table_dis+0x2ec>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b06      	cmp	r3, #6
 80098c6:	f200 81a8 	bhi.w	8009c1a <cal_table_dis+0x60e>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <cal_table_dis+0x2c4>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009c19 	.word	0x08009c19
 80098d4:	08009901 	.word	0x08009901
 80098d8:	08009a6b 	.word	0x08009a6b
 80098dc:	08009b91 	.word	0x08009b91
 80098e0:	08009bbd 	.word	0x08009bbd
 80098e4:	08009bc5 	.word	0x08009bc5
 80098e8:	08009beb 	.word	0x08009beb
 80098ec:	20000258 	.word	0x20000258
 80098f0:	2000025c 	.word	0x2000025c
 80098f4:	20000250 	.word	0x20000250
 80098f8:	20000810 	.word	0x20000810
 80098fc:	4b189680 	.word	0x4b189680
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009902:	ed93 7a00 	vldr	s14, [r3]
 8009906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009908:	edd3 7a00 	vldr	s15, [r3]
 800990c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009910:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009914:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800991c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009920:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009924:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009928:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800992c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009930:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009936:	ed93 7a00 	vldr	s14, [r3]
 800993a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800993c:	edd3 7a00 	vldr	s15, [r3]
 8009940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009944:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009948:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800994c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009954:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009958:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800995c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009964:	edc7 7a02 	vstr	s15, [r7, #8]
			if (target->velocity <= input.count_velocity){
 8009968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996a:	ed93 7a00 	vldr	s14, [r3]
 800996e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997a:	d80a      	bhi.n	8009992 <cal_table_dis+0x386>
				target->velocity = input.count_velocity;
 800997c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800997e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009980:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8009982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800998a:	4ba7      	ldr	r3, [pc, #668]	; (8009c28 <cal_table_dis+0x61c>)
 800998c:	2202      	movs	r2, #2
 800998e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.deceleration;
				g_acc_flag=3;
			}
		break;
 8009990:	e143      	b.n	8009c1a <cal_table_dis+0x60e>
			else if(-input.displacement <= (acc_distance + dec_distance)){
 8009992:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009996:	eeb1 7a67 	vneg.f32	s14, s15
 800999a:	edd7 6a03 	vldr	s13, [r7, #12]
 800999e:	edd7 7a02 	vldr	s15, [r7, #8]
 80099a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ae:	d900      	bls.n	80099b2 <cal_table_dis+0x3a6>
		break;
 80099b0:	e133      	b.n	8009c1a <cal_table_dis+0x60e>
				time_over=( -acc_distance - dec_distance - input.displacement)/target->velocity;
 80099b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80099b6:	eeb1 7a67 	vneg.f32	s14, s15
 80099ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80099be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80099ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099cc:	ed93 7a00 	vldr	s14, [r3]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80099d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f6 fddb 	bl	8000598 <__aeabi_f2d>
 80099e2:	4604      	mov	r4, r0
 80099e4:	460d      	mov	r5, r1
 80099e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7f6 fdd5 	bl	8000598 <__aeabi_f2d>
 80099ee:	f04f 0200 	mov.w	r2, #0
 80099f2:	f04f 0300 	mov.w	r3, #0
 80099f6:	f7f6 fe27 	bl	8000648 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4690      	mov	r8, r2
 8009a00:	4699      	mov	r9, r3
 8009a02:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a0a:	ee17 0a90 	vmov	r0, s15
 8009a0e:	f7f6 fdc3 	bl	8000598 <__aeabi_f2d>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4640      	mov	r0, r8
 8009a18:	4649      	mov	r1, r9
 8009a1a:	f7f6 fe15 	bl	8000648 <__aeabi_dmul>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7f6 fc59 	bl	80002dc <__adddf3>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7f7 f8e1 	bl	8000bf8 <__aeabi_d2f>
 8009a36:	4602      	mov	r2, r0
 8009a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8009a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3e:	ed93 7a00 	vldr	s14, [r3]
 8009a42:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a58:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.deceleration;
 8009a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a60:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8009a62:	4b71      	ldr	r3, [pc, #452]	; (8009c28 <cal_table_dis+0x61c>)
 8009a64:	2203      	movs	r2, #3
 8009a66:	701a      	strb	r2, [r3, #0]
		break;
 8009a68:	e0d7      	b.n	8009c1a <cal_table_dis+0x60e>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009a6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009a6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a76:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009a7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a8e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a96:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009a9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009a9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009aa6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009aaa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ab6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009aba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009abe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac6:	edc7 7a02 	vstr	s15, [r7, #8]
		if (-input.displacement+target->displacement <= dec_distance) {
 8009aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009acc:	ed93 7a02 	vldr	s14, [r3, #8]
 8009ad0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ad8:	ed97 7a02 	vldr	s14, [r7, #8]
 8009adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae4:	da00      	bge.n	8009ae8 <cal_table_dis+0x4dc>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.deceleration;
			g_acc_flag=3;
		}
		break;
 8009ae6:	e098      	b.n	8009c1a <cal_table_dis+0x60e>
			time_over=(target->displacement-dec_distance-input.displacement)/target->velocity;
 8009ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aea:	ed93 7a02 	vldr	s14, [r3, #8]
 8009aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8009af2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009af6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009afa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b00:	ed93 7a00 	vldr	s14, [r3]
 8009b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b08:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f6 fd41 	bl	8000598 <__aeabi_f2d>
 8009b16:	4604      	mov	r4, r0
 8009b18:	460d      	mov	r5, r1
 8009b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7f6 fd3b 	bl	8000598 <__aeabi_f2d>
 8009b22:	f04f 0200 	mov.w	r2, #0
 8009b26:	f04f 0300 	mov.w	r3, #0
 8009b2a:	f7f6 fd8d 	bl	8000648 <__aeabi_dmul>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4690      	mov	r8, r2
 8009b34:	4699      	mov	r9, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f6 fd2e 	bl	8000598 <__aeabi_f2d>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4640      	mov	r0, r8
 8009b42:	4649      	mov	r1, r9
 8009b44:	f7f6 fd80 	bl	8000648 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fbc4 	bl	80002dc <__adddf3>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	f7f7 f84c 	bl	8000bf8 <__aeabi_d2f>
 8009b60:	4602      	mov	r2, r0
 8009b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b64:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b68:	ed93 7a00 	vldr	s14, [r3]
 8009b6c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.deceleration;
 8009b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b86:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009b88:	4b27      	ldr	r3, [pc, #156]	; (8009c28 <cal_table_dis+0x61c>)
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	701a      	strb	r2, [r3, #0]
		break;
 8009b8e:	e044      	b.n	8009c1a <cal_table_dis+0x60e>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b92:	ed93 7a00 	vldr	s14, [r3]
 8009b96:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba2:	da00      	bge.n	8009ba6 <cal_table_dis+0x59a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009ba4:	e039      	b.n	8009c1a <cal_table_dis+0x60e>
			target->velocity = input.end_velocity;
 8009ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009baa:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <cal_table_dis+0x61c>)
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	701a      	strb	r2, [r3, #0]
		break;
 8009bba:	e02e      	b.n	8009c1a <cal_table_dis+0x60e>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8009bbc:	4b1b      	ldr	r3, [pc, #108]	; (8009c2c <cal_table_dis+0x620>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
		break;
 8009bc2:	e02a      	b.n	8009c1a <cal_table_dis+0x60e>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8009bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009bca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd6:	d900      	bls.n	8009bda <cal_table_dis+0x5ce>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009bd8:	e01f      	b.n	8009c1a <cal_table_dis+0x60e>
			target->acceleration = 0;
 8009bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <cal_table_dis+0x61c>)
 8009be4:	2204      	movs	r2, #4
 8009be6:	701a      	strb	r2, [r3, #0]
		break;
 8009be8:	e017      	b.n	8009c1a <cal_table_dis+0x60e>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8009bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bec:	ed93 7a02 	vldr	s14, [r3, #8]
 8009bf0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfc:	d900      	bls.n	8009c00 <cal_table_dis+0x5f4>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009bfe:	e00c      	b.n	8009c1a <cal_table_dis+0x60e>
			target->acceleration = 0;
 8009c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009c08:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <cal_table_dis+0x61c>)
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	701a      	strb	r2, [r3, #0]
		break;
 8009c0e:	e004      	b.n	8009c1a <cal_table_dis+0x60e>
		break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <cal_table_dis+0x60e>
		break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <cal_table_dis+0x60e>
		break;
 8009c18:	bf00      	nop
	}

}

}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009c24:	b004      	add	sp, #16
 8009c26:	4770      	bx	lr
 8009c28:	20000810 	.word	0x20000810
 8009c2c:	20000811 	.word	0x20000811

08009c30 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8009c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c34:	b088      	sub	sp, #32
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	eef0 6a40 	vmov.f32	s13, s0
 8009c3c:	eeb0 7a60 	vmov.f32	s14, s1
 8009c40:	eef0 7a41 	vmov.f32	s15, s2
 8009c44:	6038      	str	r0, [r7, #0]
 8009c46:	edc7 6a01 	vstr	s13, [r7, #4]
 8009c4a:	ed87 7a02 	vstr	s14, [r7, #8]
 8009c4e:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 8009c52:	4bbf      	ldr	r3, [pc, #764]	; (8009f50 <cal_mollifier_table+0x320>)
 8009c54:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 8009c56:	4bbf      	ldr	r3, [pc, #764]	; (8009f54 <cal_mollifier_table+0x324>)
 8009c58:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 8009c5a:	4bbf      	ldr	r3, [pc, #764]	; (8009f58 <cal_mollifier_table+0x328>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7f6 fc9a 	bl	8000598 <__aeabi_f2d>
 8009c64:	a3b2      	add	r3, pc, #712	; (adr r3, 8009f30 <cal_mollifier_table+0x300>)
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7f6 fb37 	bl	80002dc <__adddf3>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4610      	mov	r0, r2
 8009c74:	4619      	mov	r1, r3
 8009c76:	f7f6 ffbf 	bl	8000bf8 <__aeabi_d2f>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4ab6      	ldr	r2, [pc, #728]	; (8009f58 <cal_mollifier_table+0x328>)
 8009c7e:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8009c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c84:	eef0 7ae7 	vabs.f32	s15, s15
 8009c88:	ee17 0a90 	vmov	r0, s15
 8009c8c:	f7f6 fc84 	bl	8000598 <__aeabi_f2d>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	f7f6 fb22 	bl	80002dc <__adddf3>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	a3a5      	add	r3, pc, #660	; (adr r3, 8009f38 <cal_mollifier_table+0x308>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fdf9 	bl	800089c <__aeabi_ddiv>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	a3a3      	add	r3, pc, #652	; (adr r3, 8009f40 <cal_mollifier_table+0x310>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fcc6 	bl	8000648 <__aeabi_dmul>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f6 fc66 	bl	8000598 <__aeabi_f2d>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	f7f6 fde2 	bl	800089c <__aeabi_ddiv>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f7f6 ff8a 	bl	8000bf8 <__aeabi_d2f>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8009ce8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cec:	eef1 7a67 	vneg.f32	s15, s15
 8009cf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009cf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009cf8:	4b97      	ldr	r3, [pc, #604]	; (8009f58 <cal_mollifier_table+0x328>)
 8009cfa:	edd3 7a00 	vldr	s15, [r3]
 8009cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d06:	f140 81a2 	bpl.w	800a04e <cal_mollifier_table+0x41e>
 8009d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009d16:	4b90      	ldr	r3, [pc, #576]	; (8009f58 <cal_mollifier_table+0x328>)
 8009d18:	edd3 7a00 	vldr	s15, [r3]
 8009d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d24:	f340 8193 	ble.w	800a04e <cal_mollifier_table+0x41e>
			old_velocity=target->velocity;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 8009d2e:	4b8a      	ldr	r3, [pc, #552]	; (8009f58 <cal_mollifier_table+0x328>)
 8009d30:	edd3 7a00 	vldr	s15, [r3]
 8009d34:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d38:	eeb0 1a47 	vmov.f32	s2, s14
 8009d3c:	edd7 0a05 	vldr	s1, [r7, #20]
 8009d40:	eeb0 0a67 	vmov.f32	s0, s15
 8009d44:	f000 f9ac 	bl	800a0a0 <cal_mollifier_velocity>
 8009d48:	eef0 7a40 	vmov.f32	s15, s0
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	edc3 7a00 	vstr	s15, [r3]

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009d52:	4b81      	ldr	r3, [pc, #516]	; (8009f58 <cal_mollifier_table+0x328>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fc1e 	bl	8000598 <__aeabi_f2d>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d64:	eef1 7a67 	vneg.f32	s15, s15
 8009d68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009d70:	ee16 0a90 	vmov	r0, s13
 8009d74:	f7f6 fc10 	bl	8000598 <__aeabi_f2d>
 8009d78:	a373      	add	r3, pc, #460	; (adr r3, 8009f48 <cal_mollifier_table+0x318>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	f7f6 fd8d 	bl	800089c <__aeabi_ddiv>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4690      	mov	r8, r2
 8009d88:	4699      	mov	r9, r3
 8009d8a:	69f8      	ldr	r0, [r7, #28]
 8009d8c:	f7f6 fc04 	bl	8000598 <__aeabi_f2d>
 8009d90:	a367      	add	r3, pc, #412	; (adr r3, 8009f30 <cal_mollifier_table+0x300>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fc57 	bl	8000648 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	f7f6 fa9b 	bl	80002dc <__adddf3>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 febd 	bl	8000b2c <__aeabi_dcmplt>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d027      	beq.n	8009e08 <cal_mollifier_table+0x1d8>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8009dbc:	eef1 7a67 	vneg.f32	s15, s15
 8009dc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009dc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009dc8:	ee16 0a90 	vmov	r0, s13
 8009dcc:	f7f6 fbe4 	bl	8000598 <__aeabi_f2d>
 8009dd0:	a35d      	add	r3, pc, #372	; (adr r3, 8009f48 <cal_mollifier_table+0x318>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 fd61 	bl	800089c <__aeabi_ddiv>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	f7f6 ff09 	bl	8000bf8 <__aeabi_d2f>
 8009de6:	4603      	mov	r3, r0
 8009de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8009dec:	eeb0 1a67 	vmov.f32	s2, s15
 8009df0:	edd7 0a05 	vldr	s1, [r7, #20]
 8009df4:	ee00 3a10 	vmov	s0, r3
 8009df8:	f000 f9b2 	bl	800a160 <cal_mollifier_acceleration>
 8009dfc:	eef0 7a40 	vmov.f32	s15, s0
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009e06:	e137      	b.n	800a078 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<0){
 8009e08:	4b53      	ldr	r3, [pc, #332]	; (8009f58 <cal_mollifier_table+0x328>)
 8009e0a:	edd3 7a00 	vldr	s15, [r3]
 8009e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e16:	d52b      	bpl.n	8009e70 <cal_mollifier_table+0x240>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009e18:	4b4f      	ldr	r3, [pc, #316]	; (8009f58 <cal_mollifier_table+0x328>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f6 fbbb 	bl	8000598 <__aeabi_f2d>
 8009e22:	4604      	mov	r4, r0
 8009e24:	460d      	mov	r5, r1
 8009e26:	69f8      	ldr	r0, [r7, #28]
 8009e28:	f7f6 fbb6 	bl	8000598 <__aeabi_f2d>
 8009e2c:	a340      	add	r3, pc, #256	; (adr r3, 8009f30 <cal_mollifier_table+0x300>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 fc09 	bl	8000648 <__aeabi_dmul>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 fa4b 	bl	80002d8 <__aeabi_dsub>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4610      	mov	r0, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7f6 fed5 	bl	8000bf8 <__aeabi_d2f>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e54:	eeb0 1a67 	vmov.f32	s2, s15
 8009e58:	edd7 0a05 	vldr	s1, [r7, #20]
 8009e5c:	ee00 3a10 	vmov	s0, r3
 8009e60:	f000 f97e 	bl	800a160 <cal_mollifier_acceleration>
 8009e64:	eef0 7a40 	vmov.f32	s15, s0
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009e6e:	e103      	b.n	800a078 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009e70:	4b39      	ldr	r3, [pc, #228]	; (8009f58 <cal_mollifier_table+0x328>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7f6 fb8f 	bl	8000598 <__aeabi_f2d>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009e8a:	ee16 0a90 	vmov	r0, s13
 8009e8e:	f7f6 fb83 	bl	8000598 <__aeabi_f2d>
 8009e92:	a32d      	add	r3, pc, #180	; (adr r3, 8009f48 <cal_mollifier_table+0x318>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fd00 	bl	800089c <__aeabi_ddiv>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4690      	mov	r8, r2
 8009ea2:	4699      	mov	r9, r3
 8009ea4:	69b8      	ldr	r0, [r7, #24]
 8009ea6:	f7f6 fb77 	bl	8000598 <__aeabi_f2d>
 8009eaa:	a321      	add	r3, pc, #132	; (adr r3, 8009f30 <cal_mollifier_table+0x300>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7f6 fbca 	bl	8000648 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fa0e 	bl	80002dc <__adddf3>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f7f6 fe30 	bl	8000b2c <__aeabi_dcmplt>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d044      	beq.n	8009f5c <cal_mollifier_table+0x32c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009ed2:	4b21      	ldr	r3, [pc, #132]	; (8009f58 <cal_mollifier_table+0x328>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f6 fb5e 	bl	8000598 <__aeabi_f2d>
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	69f8      	ldr	r0, [r7, #28]
 8009ee2:	f7f6 fb59 	bl	8000598 <__aeabi_f2d>
 8009ee6:	a312      	add	r3, pc, #72	; (adr r3, 8009f30 <cal_mollifier_table+0x300>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 fbac 	bl	8000648 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 f9ee 	bl	80002d8 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4610      	mov	r0, r2
 8009f02:	4619      	mov	r1, r3
 8009f04:	f7f6 fe78 	bl	8000bf8 <__aeabi_d2f>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f0e:	eeb0 1a67 	vmov.f32	s2, s15
 8009f12:	edd7 0a05 	vldr	s1, [r7, #20]
 8009f16:	ee00 3a10 	vmov	s0, r3
 8009f1a:	f000 f921 	bl	800a160 <cal_mollifier_acceleration>
 8009f1e:	eef0 7a40 	vmov.f32	s15, s0
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009f28:	e0a6      	b.n	800a078 <cal_mollifier_table+0x448>
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f34:	3f50624d 	.word	0x3f50624d
 8009f38:	f9db22d1 	.word	0xf9db22d1
 8009f3c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009f40:	362cef38 	.word	0x362cef38
 8009f44:	3fd78b56 	.word	0x3fd78b56
 8009f48:	04189375 	.word	0x04189375
 8009f4c:	3ff50e56 	.word	0x3ff50e56
 8009f50:	41400000 	.word	0x41400000
 8009f54:	c1200000 	.word	0xc1200000
 8009f58:	2000080c 	.word	0x2000080c
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 8009f5c:	4b4e      	ldr	r3, [pc, #312]	; (800a098 <cal_mollifier_table+0x468>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7f6 fb19 	bl	8000598 <__aeabi_f2d>
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f76:	ee16 0a90 	vmov	r0, s13
 8009f7a:	f7f6 fb0d 	bl	8000598 <__aeabi_f2d>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	4689      	mov	r9, r1
 8009f82:	69b8      	ldr	r0, [r7, #24]
 8009f84:	f7f6 fb08 	bl	8000598 <__aeabi_f2d>
 8009f88:	a33f      	add	r3, pc, #252	; (adr r3, 800a088 <cal_mollifier_table+0x458>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb5b 	bl	8000648 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 f99f 	bl	80002dc <__adddf3>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 fdc1 	bl	8000b2c <__aeabi_dcmplt>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d028      	beq.n	800a002 <cal_mollifier_table+0x3d2>
				time_delay=0;
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009fc2:	ee16 0a90 	vmov	r0, s13
 8009fc6:	f7f6 fae7 	bl	8000598 <__aeabi_f2d>
 8009fca:	a331      	add	r3, pc, #196	; (adr r3, 800a090 <cal_mollifier_table+0x460>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 fc64 	bl	800089c <__aeabi_ddiv>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f7f6 fe0c 	bl	8000bf8 <__aeabi_d2f>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fe6:	eeb0 1a67 	vmov.f32	s2, s15
 8009fea:	edd7 0a05 	vldr	s1, [r7, #20]
 8009fee:	ee00 3a10 	vmov	s0, r3
 8009ff2:	f000 f8b5 	bl	800a160 <cal_mollifier_acceleration>
 8009ff6:	eef0 7a40 	vmov.f32	s15, s0
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800a000:	e03a      	b.n	800a078 <cal_mollifier_table+0x448>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 800a002:	edd7 7a05 	vldr	s15, [r7, #20]
 800a006:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a00a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a00e:	ee16 0a90 	vmov	r0, s13
 800a012:	f7f6 fac1 	bl	8000598 <__aeabi_f2d>
 800a016:	a31c      	add	r3, pc, #112	; (adr r3, 800a088 <cal_mollifier_table+0x458>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 f95c 	bl	80002d8 <__aeabi_dsub>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4610      	mov	r0, r2
 800a026:	4619      	mov	r1, r3
 800a028:	f7f6 fde6 	bl	8000bf8 <__aeabi_d2f>
 800a02c:	4603      	mov	r3, r0
 800a02e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a032:	eeb0 1a67 	vmov.f32	s2, s15
 800a036:	edd7 0a05 	vldr	s1, [r7, #20]
 800a03a:	ee00 3a10 	vmov	s0, r3
 800a03e:	f000 f88f 	bl	800a160 <cal_mollifier_acceleration>
 800a042:	eef0 7a40 	vmov.f32	s15, s0
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800a04c:	e014      	b.n	800a078 <cal_mollifier_table+0x448>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	f04f 0200 	mov.w	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	edd3 7a00 	vldr	s15, [r3]
 800a062:	ed97 7a04 	vldr	s14, [r7, #16]
 800a066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <cal_mollifier_table+0x46c>)
 800a072:	2204      	movs	r2, #4
 800a074:	701a      	strb	r2, [r3, #0]

		}

}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a082:	bf00      	nop
 800a084:	f3af 8000 	nop.w
 800a088:	d2f1a9fc 	.word	0xd2f1a9fc
 800a08c:	3f50624d 	.word	0x3f50624d
 800a090:	04189375 	.word	0x04189375
 800a094:	3ff50e56 	.word	0x3ff50e56
 800a098:	2000080c 	.word	0x2000080c
 800a09c:	20000810 	.word	0x20000810

0800a0a0 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 800a0a0:	b5b0      	push	{r4, r5, r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0aa:	edc7 0a02 	vstr	s1, [r7, #8]
 800a0ae:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a0b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a0b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	edd7 7a01 	vldr	s15, [r7, #4]
 800a0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c6:	ee17 0a90 	vmov	r0, s15
 800a0ca:	f7f6 fa65 	bl	8000598 <__aeabi_f2d>
 800a0ce:	a322      	add	r3, pc, #136	; (adr r3, 800a158 <cal_mollifier_velocity+0xb8>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fbe2 	bl	800089c <__aeabi_ddiv>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	461d      	mov	r5, r3
 800a0e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0e4:	eeb1 7a67 	vneg.f32	s14, s15
 800a0e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a0f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a100:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a104:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a108:	edd7 7a03 	vldr	s15, [r7, #12]
 800a10c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a110:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a114:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a118:	ee16 0a90 	vmov	r0, s13
 800a11c:	f7f6 fa3c 	bl	8000598 <__aeabi_f2d>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	ec43 2b10 	vmov	d0, r2, r3
 800a128:	f019 fcc6 	bl	8023ab8 <exp>
 800a12c:	ec53 2b10 	vmov	r2, r3, d0
 800a130:	4620      	mov	r0, r4
 800a132:	4629      	mov	r1, r5
 800a134:	f7f6 fa88 	bl	8000648 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4610      	mov	r0, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	f7f6 fd5a 	bl	8000bf8 <__aeabi_d2f>
 800a144:	4603      	mov	r3, r0
 800a146:	617b      	str	r3, [r7, #20]
	return velocity;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	ee07 3a90 	vmov	s15, r3
}
 800a14e:	eeb0 0a67 	vmov.f32	s0, s15
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bdb0      	pop	{r4, r5, r7, pc}
 800a158:	f9db22d1 	.word	0xf9db22d1
 800a15c:	3fdc6a7e 	.word	0x3fdc6a7e

0800a160 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 800a160:	b5b0      	push	{r4, r5, r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	ed87 0a03 	vstr	s0, [r7, #12]
 800a16a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a16e:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7f6 fa10 	bl	8000598 <__aeabi_f2d>
 800a178:	a33d      	add	r3, pc, #244	; (adr r3, 800a270 <cal_mollifier_acceleration+0x110>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fb8d 	bl	800089c <__aeabi_ddiv>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4614      	mov	r4, r2
 800a188:	461d      	mov	r5, r3
 800a18a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a18e:	eeb1 7a67 	vneg.f32	s14, s15
 800a192:	edd7 7a03 	vldr	s15, [r7, #12]
 800a196:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a19a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a19e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1a2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a1a6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a1aa:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1c2:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a1c6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a1ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a1da:	ee16 0a90 	vmov	r0, s13
 800a1de:	f7f6 f9db 	bl	8000598 <__aeabi_f2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 fa2d 	bl	8000648 <__aeabi_dmul>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4614      	mov	r4, r2
 800a1f4:	461d      	mov	r5, r3
 800a1f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1fa:	eeb1 7a67 	vneg.f32	s14, s15
 800a1fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800a202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a206:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a20a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a20e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a216:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a21a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a21e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a226:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a22a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a22e:	ee16 0a90 	vmov	r0, s13
 800a232:	f7f6 f9b1 	bl	8000598 <__aeabi_f2d>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	ec43 2b10 	vmov	d0, r2, r3
 800a23e:	f019 fc3b 	bl	8023ab8 <exp>
 800a242:	ec53 2b10 	vmov	r2, r3, d0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 f9fd 	bl	8000648 <__aeabi_dmul>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4610      	mov	r0, r2
 800a254:	4619      	mov	r1, r3
 800a256:	f7f6 fccf 	bl	8000bf8 <__aeabi_d2f>
 800a25a:	4603      	mov	r3, r0
 800a25c:	617b      	str	r3, [r7, #20]
	return acceleration;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	ee07 3a90 	vmov	s15, r3
}
 800a264:	eeb0 0a67 	vmov.f32	s0, s15
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bdb0      	pop	{r4, r5, r7, pc}
 800a26e:	bf00      	nop
 800a270:	f9db22d1 	.word	0xf9db22d1
 800a274:	3fdc6a7e 	.word	0x3fdc6a7e

0800a278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a282:	4a11      	ldr	r2, [pc, #68]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a284:	f043 0304 	orr.w	r3, r3, #4
 800a288:	6493      	str	r3, [r2, #72]	; 0x48
 800a28a:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a28e:	f003 0304 	and.w	r3, r3, #4
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a29a:	4a0b      	ldr	r2, [pc, #44]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	6493      	str	r3, [r2, #72]	; 0x48
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <MX_DMA_Init+0x50>)
 800a2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	200b      	movs	r0, #11
 800a2b4:	f011 fcc7 	bl	801bc46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a2b8:	200b      	movs	r0, #11
 800a2ba:	f011 fcde 	bl	801bc7a <HAL_NVIC_EnableIRQ>

}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	40021000 	.word	0x40021000

0800a2cc <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800a2cc:	b480      	push	{r7}
 800a2ce:	af00      	add	r7, sp, #0
	error_mode=0;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <init_FailSafe+0x4c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <init_FailSafe+0x50>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <init_FailSafe+0x54>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <init_FailSafe+0x58>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 800a2e8:	4b0f      	ldr	r3, [pc, #60]	; (800a328 <init_FailSafe+0x5c>)
 800a2ea:	4a10      	ldr	r2, [pc, #64]	; (800a32c <init_FailSafe+0x60>)
 800a2ec:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800a2ee:	4b10      	ldr	r3, [pc, #64]	; (800a330 <init_FailSafe+0x64>)
 800a2f0:	4a10      	ldr	r2, [pc, #64]	; (800a334 <init_FailSafe+0x68>)
 800a2f2:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800a2f4:	4b10      	ldr	r3, [pc, #64]	; (800a338 <init_FailSafe+0x6c>)
 800a2f6:	4a0d      	ldr	r2, [pc, #52]	; (800a32c <init_FailSafe+0x60>)
 800a2f8:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <init_FailSafe+0x70>)
 800a2fc:	4a10      	ldr	r2, [pc, #64]	; (800a340 <init_FailSafe+0x74>)
 800a2fe:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 800a300:	4b10      	ldr	r3, [pc, #64]	; (800a344 <init_FailSafe+0x78>)
 800a302:	4a11      	ldr	r2, [pc, #68]	; (800a348 <init_FailSafe+0x7c>)
 800a304:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <init_FailSafe+0x80>)
 800a308:	4a0f      	ldr	r2, [pc, #60]	; (800a348 <init_FailSafe+0x7c>)
 800a30a:	601a      	str	r2, [r3, #0]
}
 800a30c:	bf00      	nop
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000813 	.word	0x20000813
 800a31c:	20000812 	.word	0x20000812
 800a320:	20000814 	.word	0x20000814
 800a324:	20000830 	.word	0x20000830
 800a328:	20000818 	.word	0x20000818
 800a32c:	44bb8000 	.word	0x44bb8000
 800a330:	2000081c 	.word	0x2000081c
 800a334:	44480000 	.word	0x44480000
 800a338:	20000820 	.word	0x20000820
 800a33c:	20000824 	.word	0x20000824
 800a340:	455ac000 	.word	0x455ac000
 800a344:	20000828 	.word	0x20000828
 800a348:	44ed8000 	.word	0x44ed8000
 800a34c:	2000082c 	.word	0x2000082c

0800a350 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800a356:	4b6e      	ldr	r3, [pc, #440]	; (800a510 <interrupt_FailSafe+0x1c0>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d109      	bne.n	800a372 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800a35e:	4b6d      	ldr	r3, [pc, #436]	; (800a514 <interrupt_FailSafe+0x1c4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800a364:	4b6c      	ldr	r3, [pc, #432]	; (800a518 <interrupt_FailSafe+0x1c8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800a36a:	4b6c      	ldr	r3, [pc, #432]	; (800a51c <interrupt_FailSafe+0x1cc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	607b      	str	r3, [r7, #4]
 800a370:	e008      	b.n	800a384 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800a372:	4b6b      	ldr	r3, [pc, #428]	; (800a520 <interrupt_FailSafe+0x1d0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800a378:	4b6a      	ldr	r3, [pc, #424]	; (800a524 <interrupt_FailSafe+0x1d4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800a37e:	4b6a      	ldr	r3, [pc, #424]	; (800a528 <interrupt_FailSafe+0x1d8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800a384:	4b69      	ldr	r3, [pc, #420]	; (800a52c <interrupt_FailSafe+0x1dc>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d062      	beq.n	800a452 <interrupt_FailSafe+0x102>
 800a38c:	4b67      	ldr	r3, [pc, #412]	; (800a52c <interrupt_FailSafe+0x1dc>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2b03      	cmp	r3, #3
 800a392:	d05e      	beq.n	800a452 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800a394:	4b66      	ldr	r3, [pc, #408]	; (800a530 <interrupt_FailSafe+0x1e0>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d15a      	bne.n	800a452 <interrupt_FailSafe+0x102>
 800a39c:	4b65      	ldr	r3, [pc, #404]	; (800a534 <interrupt_FailSafe+0x1e4>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d156      	bne.n	800a452 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800a3a4:	4b64      	ldr	r3, [pc, #400]	; (800a538 <interrupt_FailSafe+0x1e8>)
 800a3a6:	ed93 7a00 	vldr	s14, [r3]
 800a3aa:	4b64      	ldr	r3, [pc, #400]	; (800a53c <interrupt_FailSafe+0x1ec>)
 800a3ac:	edd3 7a00 	vldr	s15, [r3]
 800a3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b4:	eef0 7ae7 	vabs.f32	s15, s15
 800a3b8:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c4:	d809      	bhi.n	800a3da <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a3c6:	f7fe f973 	bl	80086b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f7fd fb9c 	bl	8007b08 <pl_yellow_LED_count>
						error_mode = 1;
 800a3d0:	4b58      	ldr	r3, [pc, #352]	; (800a534 <interrupt_FailSafe+0x1e4>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a3d6:	f7fa ff57 	bl	8005288 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800a3da:	4b59      	ldr	r3, [pc, #356]	; (800a540 <interrupt_FailSafe+0x1f0>)
 800a3dc:	edd3 7a00 	vldr	s15, [r3]
 800a3e0:	ed97 7a01 	vldr	s14, [r7, #4]
 800a3e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ec:	d809      	bhi.n	800a402 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a3ee:	f7fe f95f 	bl	80086b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800a3f2:	2002      	movs	r0, #2
 800a3f4:	f7fd fb88 	bl	8007b08 <pl_yellow_LED_count>
						error_mode = 1;
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <interrupt_FailSafe+0x1e4>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a3fe:	f7fa ff43 	bl	8005288 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800a402:	4b50      	ldr	r3, [pc, #320]	; (800a544 <interrupt_FailSafe+0x1f4>)
 800a404:	ed93 7a00 	vldr	s14, [r3]
 800a408:	4b4f      	ldr	r3, [pc, #316]	; (800a548 <interrupt_FailSafe+0x1f8>)
 800a40a:	edd3 6a00 	vldr	s13, [r3]
 800a40e:	4b4f      	ldr	r3, [pc, #316]	; (800a54c <interrupt_FailSafe+0x1fc>)
 800a410:	edd3 7a00 	vldr	s15, [r3]
 800a414:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a418:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a41c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a424:	eef0 7ae7 	vabs.f32	s15, s15
 800a428:	ed97 7a03 	vldr	s14, [r7, #12]
 800a42c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	d80d      	bhi.n	800a452 <interrupt_FailSafe+0x102>
 800a436:	4b3d      	ldr	r3, [pc, #244]	; (800a52c <interrupt_FailSafe+0x1dc>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d109      	bne.n	800a452 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a43e:	f7fe f937 	bl	80086b0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800a442:	2004      	movs	r0, #4
 800a444:	f7fd fb60 	bl	8007b08 <pl_yellow_LED_count>
						error_mode = 1;
 800a448:	4b3a      	ldr	r3, [pc, #232]	; (800a534 <interrupt_FailSafe+0x1e4>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a44e:	f7fa ff1b 	bl	8005288 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800a452:	4b38      	ldr	r3, [pc, #224]	; (800a534 <interrupt_FailSafe+0x1e4>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d153      	bne.n	800a502 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800a45a:	4b3d      	ldr	r3, [pc, #244]	; (800a550 <interrupt_FailSafe+0x200>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 800a460:	4b3c      	ldr	r3, [pc, #240]	; (800a554 <interrupt_FailSafe+0x204>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	4a3b      	ldr	r2, [pc, #236]	; (800a554 <interrupt_FailSafe+0x204>)
 800a468:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800a46a:	4b3a      	ldr	r3, [pc, #232]	; (800a554 <interrupt_FailSafe+0x204>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a472:	dc05      	bgt.n	800a480 <interrupt_FailSafe+0x130>
			init_WallControl();
 800a474:	f7fb f862 	bl	800553c <init_WallControl>
			modeacc=100;//エラー用
 800a478:	4b2c      	ldr	r3, [pc, #176]	; (800a52c <interrupt_FailSafe+0x1dc>)
 800a47a:	2264      	movs	r2, #100	; 0x64
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	e009      	b.n	800a494 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 800a480:	2000      	movs	r0, #0
 800a482:	f7fe f881 	bl	8008588 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800a486:	f7fe f8e5 	bl	8008654 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800a48a:	f7fe f911 	bl	80086b0 <pl_FunMotor_stop>
			modeacc=0;
 800a48e:	4b27      	ldr	r3, [pc, #156]	; (800a52c <interrupt_FailSafe+0x1dc>)
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <interrupt_FailSafe+0x208>)
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 800a49c:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <interrupt_FailSafe+0x20c>)
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a2:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800a4a4:	4b2e      	ldr	r3, [pc, #184]	; (800a560 <interrupt_FailSafe+0x210>)
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 800a4ac:	4b2d      	ldr	r3, [pc, #180]	; (800a564 <interrupt_FailSafe+0x214>)
 800a4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b2:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800a4b4:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <interrupt_FailSafe+0x218>)
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <interrupt_FailSafe+0x21c>)
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800a4c4:	4b2a      	ldr	r3, [pc, #168]	; (800a570 <interrupt_FailSafe+0x220>)
 800a4c6:	4a2b      	ldr	r2, [pc, #172]	; (800a574 <interrupt_FailSafe+0x224>)
 800a4c8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 800a4ca:	4b2b      	ldr	r3, [pc, #172]	; (800a578 <interrupt_FailSafe+0x228>)
 800a4cc:	4a29      	ldr	r2, [pc, #164]	; (800a574 <interrupt_FailSafe+0x224>)
 800a4ce:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 800a4d0:	4b2a      	ldr	r3, [pc, #168]	; (800a57c <interrupt_FailSafe+0x22c>)
 800a4d2:	4a2b      	ldr	r2, [pc, #172]	; (800a580 <interrupt_FailSafe+0x230>)
 800a4d4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800a4d6:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <interrupt_FailSafe+0x234>)
 800a4d8:	4a29      	ldr	r2, [pc, #164]	; (800a580 <interrupt_FailSafe+0x230>)
 800a4da:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 800a4dc:	4b2a      	ldr	r3, [pc, #168]	; (800a588 <interrupt_FailSafe+0x238>)
 800a4de:	4a2b      	ldr	r2, [pc, #172]	; (800a58c <interrupt_FailSafe+0x23c>)
 800a4e0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800a4e2:	4b2b      	ldr	r3, [pc, #172]	; (800a590 <interrupt_FailSafe+0x240>)
 800a4e4:	4a29      	ldr	r2, [pc, #164]	; (800a58c <interrupt_FailSafe+0x23c>)
 800a4e6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	; (800a594 <interrupt_FailSafe+0x244>)
 800a4ea:	4a28      	ldr	r2, [pc, #160]	; (800a58c <interrupt_FailSafe+0x23c>)
 800a4ec:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 800a4ee:	4b2a      	ldr	r3, [pc, #168]	; (800a598 <interrupt_FailSafe+0x248>)
 800a4f0:	4a26      	ldr	r2, [pc, #152]	; (800a58c <interrupt_FailSafe+0x23c>)
 800a4f2:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800a4f4:	4b29      	ldr	r3, [pc, #164]	; (800a59c <interrupt_FailSafe+0x24c>)
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 800a4fa:	4b29      	ldr	r3, [pc, #164]	; (800a5a0 <interrupt_FailSafe+0x250>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 800a500:	e002      	b.n	800a508 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 800a502:	4b14      	ldr	r3, [pc, #80]	; (800a554 <interrupt_FailSafe+0x204>)
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000814 	.word	0x20000814
 800a514:	20000818 	.word	0x20000818
 800a518:	2000081c 	.word	0x2000081c
 800a51c:	20000820 	.word	0x20000820
 800a520:	20000824 	.word	0x20000824
 800a524:	20000828 	.word	0x20000828
 800a528:	2000082c 	.word	0x2000082c
 800a52c:	20000534 	.word	0x20000534
 800a530:	20000812 	.word	0x20000812
 800a534:	20000813 	.word	0x20000813
 800a538:	200004e8 	.word	0x200004e8
 800a53c:	2000026c 	.word	0x2000026c
 800a540:	20000278 	.word	0x20000278
 800a544:	200004dc 	.word	0x200004dc
 800a548:	2000025c 	.word	0x2000025c
 800a54c:	20000258 	.word	0x20000258
 800a550:	2000f284 	.word	0x2000f284
 800a554:	20000830 	.word	0x20000830
 800a558:	200005c4 	.word	0x200005c4
 800a55c:	200005c0 	.word	0x200005c0
 800a560:	200005cc 	.word	0x200005cc
 800a564:	200005c8 	.word	0x200005c8
 800a568:	200005d4 	.word	0x200005d4
 800a56c:	200005d0 	.word	0x200005d0
 800a570:	200005dc 	.word	0x200005dc
 800a574:	42480000 	.word	0x42480000
 800a578:	200005d8 	.word	0x200005d8
 800a57c:	200005e4 	.word	0x200005e4
 800a580:	41a00000 	.word	0x41a00000
 800a584:	200005e0 	.word	0x200005e0
 800a588:	200005ec 	.word	0x200005ec
 800a58c:	420c0000 	.word	0x420c0000
 800a590:	200005e8 	.word	0x200005e8
 800a594:	200005f4 	.word	0x200005f4
 800a598:	200005f0 	.word	0x200005f0
 800a59c:	20000810 	.word	0x20000810
 800a5a0:	2000059e 	.word	0x2000059e

0800a5a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08a      	sub	sp, #40	; 0x28
 800a5a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5aa:	f107 0314 	add.w	r3, r7, #20
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	605a      	str	r2, [r3, #4]
 800a5b4:	609a      	str	r2, [r3, #8]
 800a5b6:	60da      	str	r2, [r3, #12]
 800a5b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5ba:	4b3a      	ldr	r3, [pc, #232]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5be:	4a39      	ldr	r2, [pc, #228]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5c0:	f043 0304 	orr.w	r3, r3, #4
 800a5c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5c6:	4b37      	ldr	r3, [pc, #220]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5d2:	4b34      	ldr	r3, [pc, #208]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d6:	4a33      	ldr	r2, [pc, #204]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5d8:	f043 0320 	orr.w	r3, r3, #32
 800a5dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5de:	4b31      	ldr	r3, [pc, #196]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ea:	4b2e      	ldr	r3, [pc, #184]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ee:	4a2d      	ldr	r2, [pc, #180]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5f0:	f043 0301 	orr.w	r3, r3, #1
 800a5f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5f6:	4b2b      	ldr	r3, [pc, #172]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	60bb      	str	r3, [r7, #8]
 800a600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a602:	4b28      	ldr	r3, [pc, #160]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	4a27      	ldr	r2, [pc, #156]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a608:	f043 0302 	orr.w	r3, r3, #2
 800a60c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a60e:	4b25      	ldr	r3, [pc, #148]	; (800a6a4 <MX_GPIO_Init+0x100>)
 800a610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	607b      	str	r3, [r7, #4]
 800a618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a61a:	2200      	movs	r2, #0
 800a61c:	f24e 0150 	movw	r1, #57424	; 0xe050
 800a620:	4821      	ldr	r0, [pc, #132]	; (800a6a8 <MX_GPIO_Init+0x104>)
 800a622:	f012 f9fb 	bl	801ca1c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 800a626:	2200      	movs	r2, #0
 800a628:	f648 1110 	movw	r1, #35088	; 0x8910
 800a62c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a630:	f012 f9f4 	bl	801ca1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a634:	2200      	movs	r2, #0
 800a636:	f64e 4196 	movw	r1, #60566	; 0xec96
 800a63a:	481c      	ldr	r0, [pc, #112]	; (800a6ac <MX_GPIO_Init+0x108>)
 800a63c:	f012 f9ee 	bl	801ca1c <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a640:	f24e 0350 	movw	r3, #57424	; 0xe050
 800a644:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a646:	2301      	movs	r3, #1
 800a648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a64e:	2300      	movs	r3, #0
 800a650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a652:	f107 0314 	add.w	r3, r7, #20
 800a656:	4619      	mov	r1, r3
 800a658:	4813      	ldr	r0, [pc, #76]	; (800a6a8 <MX_GPIO_Init+0x104>)
 800a65a:	f012 f85d 	bl	801c718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 800a65e:	f648 1310 	movw	r3, #35088	; 0x8910
 800a662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a664:	2301      	movs	r3, #1
 800a666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66c:	2300      	movs	r3, #0
 800a66e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	4619      	mov	r1, r3
 800a676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a67a:	f012 f84d 	bl	801c718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a67e:	f64e 4396 	movw	r3, #60566	; 0xec96
 800a682:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a684:	2301      	movs	r3, #1
 800a686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a68c:	2300      	movs	r3, #0
 800a68e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	4619      	mov	r1, r3
 800a696:	4805      	ldr	r0, [pc, #20]	; (800a6ac <MX_GPIO_Init+0x108>)
 800a698:	f012 f83e 	bl	801c718 <HAL_GPIO_Init>

}
 800a69c:	bf00      	nop
 800a69e:	3728      	adds	r7, #40	; 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	40021000 	.word	0x40021000
 800a6a8:	48000800 	.word	0x48000800
 800a6ac:	48000400 	.word	0x48000400

0800a6b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b089      	sub	sp, #36	; 0x24
 800a6b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a6b6:	f00e ff7d 	bl	80195b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a6ba:	f000 f8ab 	bl	800a814 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800a6be:	f7ff fddb 	bl	800a278 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a6c2:	f7ff ff6f 	bl	800a5a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a6c6:	f7fe facd 	bl	8008c64 <MX_ADC1_Init>
  MX_SPI1_Init();
 800a6ca:	f00d fa81 	bl	8017bd0 <MX_SPI1_Init>
  MX_TIM6_Init();
 800a6ce:	f00d fced 	bl	80180ac <MX_TIM6_Init>
  MX_TIM8_Init();
 800a6d2:	f00d fd21 	bl	8018118 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a6d6:	f00e fe9f 	bl	8019418 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800a6da:	f7ff fdcd 	bl	800a278 <MX_DMA_Init>
  MX_SPI3_Init();
 800a6de:	f00d fab5 	bl	8017c4c <MX_SPI3_Init>
  MX_TIM16_Init();
 800a6e2:	f00d fdb9 	bl	8018258 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800a6e6:	f7fe f9cf 	bl	8008a88 <pl_timer_init>
  pl_gyro_init();
 800a6ea:	f7fd fe61 	bl	80083b0 <pl_gyro_init>
  pl_sensor_init();
 800a6ee:	f7fe f80f 	bl	8008710 <pl_sensor_init>
  reset_distance();
 800a6f2:	f7f6 fc53 	bl	8000f9c <reset_distance>
  reset_gyro();
 800a6f6:	f7f7 fa87 	bl	8001c08 <reset_gyro>
  reset_speed();
 800a6fa:	f7f6 fc93 	bl	8001024 <reset_speed>
  record_reset();
 800a6fe:	f00c ffb9 	bl	8017674 <record_reset>
  pl_motor_init();
 800a702:	f7fd ff1b 	bl	800853c <pl_motor_init>
  PID_Init();
 800a706:	f7fa fd83 	bl	8005210 <PID_Init>
  init_WallControl();
 800a70a:	f7fa ff17 	bl	800553c <init_WallControl>
  Control_mode_Init();
 800a70e:	f7f7 fddd 	bl	80022cc <Control_mode_Init>
  init_FailSafe();
 800a712:	f7ff fddb 	bl	800a2cc <init_FailSafe>
  input_parameter();
 800a716:	f00d ff7f 	bl	8018618 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
  int a=0;
 800a71e:	2300      	movs	r3, #0
 800a720:	607b      	str	r3, [r7, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a722:	4b38      	ldr	r3, [pc, #224]	; (800a804 <main+0x154>)
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a728:	4b36      	ldr	r3, [pc, #216]	; (800a804 <main+0x154>)
 800a72a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a72c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a72e:	4b35      	ldr	r3, [pc, #212]	; (800a804 <main+0x154>)
 800a730:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a732:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a734:	4b33      	ldr	r3, [pc, #204]	; (800a804 <main+0x154>)
 800a736:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a738:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a73a:	4b32      	ldr	r3, [pc, #200]	; (800a804 <main+0x154>)
 800a73c:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	9200      	str	r2, [sp, #0]
 800a742:	4623      	mov	r3, r4
 800a744:	4602      	mov	r2, r0
 800a746:	4830      	ldr	r0, [pc, #192]	; (800a808 <main+0x158>)
 800a748:	f016 fefe 	bl	8021548 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a74c:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <main+0x15c>)
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a752:	4b2e      	ldr	r3, [pc, #184]	; (800a80c <main+0x15c>)
 800a754:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a756:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a758:	4b2c      	ldr	r3, [pc, #176]	; (800a80c <main+0x15c>)
 800a75a:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a75c:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a75e:	4b2b      	ldr	r3, [pc, #172]	; (800a80c <main+0x15c>)
 800a760:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a762:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a764:	4b29      	ldr	r3, [pc, #164]	; (800a80c <main+0x15c>)
 800a766:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	9200      	str	r2, [sp, #0]
 800a76c:	4623      	mov	r3, r4
 800a76e:	4602      	mov	r2, r0
 800a770:	4827      	ldr	r0, [pc, #156]	; (800a810 <main+0x160>)
 800a772:	f016 fee9 	bl	8021548 <iprintf>


//起動cheak
	int yellow_count=1;
 800a776:	2301      	movs	r3, #1
 800a778:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	e00d      	b.n	800a79c <main+0xec>
		pl_yellow_LED_count(yellow_count);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	4618      	mov	r0, r3
 800a786:	f7fd f9bf 	bl	8007b08 <pl_yellow_LED_count>
		HAL_Delay(50);
 800a78a:	2032      	movs	r0, #50	; 0x32
 800a78c:	f00e ff8a 	bl	80196a4 <HAL_Delay>
		yellow_count=yellow_count*2;
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b07      	cmp	r3, #7
 800a7a0:	ddee      	ble.n	800a780 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60bb      	str	r3, [r7, #8]
 800a7a6:	e00f      	b.n	800a7c8 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fd f9ab 	bl	8007b08 <pl_yellow_LED_count>
			HAL_Delay(50);
 800a7b2:	2032      	movs	r0, #50	; 0x32
 800a7b4:	f00e ff76 	bl	80196a4 <HAL_Delay>
			yellow_count=yellow_count/2;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	0fda      	lsrs	r2, r3, #31
 800a7bc:	4413      	add	r3, r2
 800a7be:	105b      	asrs	r3, r3, #1
 800a7c0:	613b      	str	r3, [r7, #16]
	for(int i=0;i<9;i++){
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60bb      	str	r3, [r7, #8]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	ddec      	ble.n	800a7a8 <main+0xf8>
	}
	battcheak();
 800a7ce:	f7f7 fc3f 	bl	8002050 <battcheak>
//		tim1 = toc_timer();
//		maze_display();
//		maze_display_Dijkstra();
//		printf("tim1=%f,tim2=%f\n", tim1, tim2);

	  		mode=mode_decision(mode);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f00b f8fe 	bl	80159d8 <mode_decision>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	617b      	str	r3, [r7, #20]
//	  		clear_Ierror();
	  		reset_distance();
 800a7e0:	f7f6 fbdc 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800a7e4:	f7f7 fa10 	bl	8001c08 <reset_gyro>
	  		reset_speed();
 800a7e8:	f7f6 fc1c 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f00b f9eb 	bl	8015bcc <mode_execution>

// failsafe後の修理
	  		Control_mode_Init();
 800a7f6:	f7f7 fd69 	bl	80022cc <Control_mode_Init>
	  		init_WallControl();
 800a7fa:	f7fa fe9f 	bl	800553c <init_WallControl>
	  		init_FailSafe();
 800a7fe:	f7ff fd65 	bl	800a2cc <init_FailSafe>
	  		mode=mode_decision(mode);
 800a802:	e7e6      	b.n	800a7d2 <main+0x122>
 800a804:	20000718 	.word	0x20000718
 800a808:	08024f48 	.word	0x08024f48
 800a80c:	20000724 	.word	0x20000724
 800a810:	08024f74 	.word	0x08024f74

0800a814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b094      	sub	sp, #80	; 0x50
 800a818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a81a:	f107 0318 	add.w	r3, r7, #24
 800a81e:	2238      	movs	r2, #56	; 0x38
 800a820:	2100      	movs	r1, #0
 800a822:	4618      	mov	r0, r3
 800a824:	f016 fa1e 	bl	8020c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a828:	1d3b      	adds	r3, r7, #4
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	605a      	str	r2, [r3, #4]
 800a830:	609a      	str	r2, [r3, #8]
 800a832:	60da      	str	r2, [r3, #12]
 800a834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a836:	2000      	movs	r0, #0
 800a838:	f012 f908 	bl	801ca4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a844:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a846:	2302      	movs	r3, #2
 800a848:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a84a:	2303      	movs	r3, #3
 800a84c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a84e:	2304      	movs	r3, #4
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a852:	2355      	movs	r3, #85	; 0x55
 800a854:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a856:	2302      	movs	r3, #2
 800a858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a85a:	2302      	movs	r3, #2
 800a85c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a85e:	2302      	movs	r3, #2
 800a860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a862:	f107 0318 	add.w	r3, r7, #24
 800a866:	4618      	mov	r0, r3
 800a868:	f012 f9a4 	bl	801cbb4 <HAL_RCC_OscConfig>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800a872:	f000 f81a 	bl	800a8aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a876:	230f      	movs	r3, #15
 800a878:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a87a:	2303      	movs	r3, #3
 800a87c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a87e:	2300      	movs	r3, #0
 800a880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a882:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a88c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a88e:	1d3b      	adds	r3, r7, #4
 800a890:	2104      	movs	r1, #4
 800a892:	4618      	mov	r0, r3
 800a894:	f012 fca6 	bl	801d1e4 <HAL_RCC_ClockConfig>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a89e:	f000 f804 	bl	800a8aa <Error_Handler>
  }
}
 800a8a2:	bf00      	nop
 800a8a4:	3750      	adds	r7, #80	; 0x50
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ae:	b672      	cpsid	i
}
 800a8b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a8b2:	e7fe      	b.n	800a8b2 <Error_Handler+0x8>

0800a8b4 <backTurn_controlWall>:
	}
	wait_ms_NoReset(150);

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	ed87 0a03 	vstr	s0, [r7, #12]
 800a8be:	edc7 0a02 	vstr	s1, [r7, #8]
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	71bb      	strb	r3, [r7, #6]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	717b      	strb	r3, [r7, #5]
	no_safty = 1;
 800a8ce:	4b5e      	ldr	r3, [pc, #376]	; (800aa48 <backTurn_controlWall+0x194>)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
	if(front_wall){
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <backTurn_controlWall+0x3c>
		no_frontwall_straight();
 800a8da:	f7fa f9f5 	bl	8004cc8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a8de:	2003      	movs	r0, #3
 800a8e0:	f7fd fe84 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a8e4:	2003      	movs	r0, #3
 800a8e6:	f7fd fe59 	bl	800859c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a8ea:	2032      	movs	r0, #50	; 0x32
 800a8ec:	f7fe f97c 	bl	8008be8 <wait_ms_NoReset>
	}
	if(left_wall){
 800a8f0:	79bb      	ldrb	r3, [r7, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d02c      	beq.n	800a950 <backTurn_controlWall+0x9c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a8f6:	ed97 2a02 	vldr	s4, [r7, #8]
 800a8fa:	edd7 1a03 	vldr	s3, [r7, #12]
 800a8fe:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800aa4c <backTurn_controlWall+0x198>
 800a902:	eddf 0a52 	vldr	s1, [pc, #328]	; 800aa4c <backTurn_controlWall+0x198>
 800a906:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800aa50 <backTurn_controlWall+0x19c>
 800a90a:	f7f9 fed7 	bl	80046bc <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a90e:	2003      	movs	r0, #3
 800a910:	f7fd fe6c 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a914:	2003      	movs	r0, #3
 800a916:	f7fd fe41 	bl	800859c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a91a:	2032      	movs	r0, #50	; 0x32
 800a91c:	f7fe f964 	bl	8008be8 <wait_ms_NoReset>
		no_frontwall_straight();
 800a920:	f7fa f9d2 	bl	8004cc8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a924:	2003      	movs	r0, #3
 800a926:	f7fd fe61 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a92a:	2003      	movs	r0, #3
 800a92c:	f7fd fe36 	bl	800859c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a930:	2032      	movs	r0, #50	; 0x32
 800a932:	f7fe f959 	bl	8008be8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a936:	ed97 2a02 	vldr	s4, [r7, #8]
 800a93a:	edd7 1a03 	vldr	s3, [r7, #12]
 800a93e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800aa4c <backTurn_controlWall+0x198>
 800a942:	eddf 0a42 	vldr	s1, [pc, #264]	; 800aa4c <backTurn_controlWall+0x198>
 800a946:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800aa50 <backTurn_controlWall+0x19c>
 800a94a:	f7f9 feb7 	bl	80046bc <turning_table2>
 800a94e:	e06a      	b.n	800aa26 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall){
 800a950:	79bb      	ldrb	r3, [r7, #6]
 800a952:	f083 0301 	eor.w	r3, r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d037      	beq.n	800a9cc <backTurn_controlWall+0x118>
 800a95c:	797b      	ldrb	r3, [r7, #5]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d034      	beq.n	800a9cc <backTurn_controlWall+0x118>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a962:	edd7 7a03 	vldr	s15, [r7, #12]
 800a966:	eef1 7a67 	vneg.f32	s15, s15
 800a96a:	ed97 2a02 	vldr	s4, [r7, #8]
 800a96e:	eef0 1a67 	vmov.f32	s3, s15
 800a972:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800aa4c <backTurn_controlWall+0x198>
 800a976:	eddf 0a35 	vldr	s1, [pc, #212]	; 800aa4c <backTurn_controlWall+0x198>
 800a97a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800aa54 <backTurn_controlWall+0x1a0>
 800a97e:	f7f9 fe9d 	bl	80046bc <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a982:	2003      	movs	r0, #3
 800a984:	f7fd fe32 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a988:	2003      	movs	r0, #3
 800a98a:	f7fd fe07 	bl	800859c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a98e:	2032      	movs	r0, #50	; 0x32
 800a990:	f7fe f92a 	bl	8008be8 <wait_ms_NoReset>
		no_frontwall_straight();
 800a994:	f7fa f998 	bl	8004cc8 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a998:	2003      	movs	r0, #3
 800a99a:	f7fd fe27 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a99e:	2003      	movs	r0, #3
 800a9a0:	f7fd fdfc 	bl	800859c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a9a4:	2032      	movs	r0, #50	; 0x32
 800a9a6:	f7fe f91f 	bl	8008be8 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a9aa:	edd7 7a03 	vldr	s15, [r7, #12]
 800a9ae:	eef1 7a67 	vneg.f32	s15, s15
 800a9b2:	ed97 2a02 	vldr	s4, [r7, #8]
 800a9b6:	eef0 1a67 	vmov.f32	s3, s15
 800a9ba:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800aa4c <backTurn_controlWall+0x198>
 800a9be:	eddf 0a23 	vldr	s1, [pc, #140]	; 800aa4c <backTurn_controlWall+0x198>
 800a9c2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800aa54 <backTurn_controlWall+0x1a0>
 800a9c6:	f7f9 fe79 	bl	80046bc <turning_table2>
 800a9ca:	e02c      	b.n	800aa26 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall==0){
 800a9cc:	79bb      	ldrb	r3, [r7, #6]
 800a9ce:	f083 0301 	eor.w	r3, r3, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d026      	beq.n	800aa26 <backTurn_controlWall+0x172>
 800a9d8:	797b      	ldrb	r3, [r7, #5]
 800a9da:	f083 0301 	eor.w	r3, r3, #1
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d020      	beq.n	800aa26 <backTurn_controlWall+0x172>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a9e4:	ed97 2a02 	vldr	s4, [r7, #8]
 800a9e8:	edd7 1a03 	vldr	s3, [r7, #12]
 800a9ec:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800aa4c <backTurn_controlWall+0x198>
 800a9f0:	eddf 0a16 	vldr	s1, [pc, #88]	; 800aa4c <backTurn_controlWall+0x198>
 800a9f4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800aa50 <backTurn_controlWall+0x19c>
 800a9f8:	f7f9 fe60 	bl	80046bc <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a9fc:	2003      	movs	r0, #3
 800a9fe:	f7fd fdf5 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800aa02:	2003      	movs	r0, #3
 800aa04:	f7fd fdca 	bl	800859c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800aa08:	2032      	movs	r0, #50	; 0x32
 800aa0a:	f7fe f8ed 	bl	8008be8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800aa0e:	ed97 2a02 	vldr	s4, [r7, #8]
 800aa12:	edd7 1a03 	vldr	s3, [r7, #12]
 800aa16:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800aa4c <backTurn_controlWall+0x198>
 800aa1a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800aa4c <backTurn_controlWall+0x198>
 800aa1e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa50 <backTurn_controlWall+0x19c>
 800aa22:	f7f9 fe4b 	bl	80046bc <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800aa26:	2003      	movs	r0, #3
 800aa28:	f7fd fde0 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800aa2c:	2003      	movs	r0, #3
 800aa2e:	f7fd fdb5 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(150);
 800aa32:	2096      	movs	r0, #150	; 0x96
 800aa34:	f7fe f8d8 	bl	8008be8 <wait_ms_NoReset>
	no_safty = 0;
 800aa38:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <backTurn_controlWall+0x194>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000812 	.word	0x20000812
 800aa4c:	00000000 	.word	0x00000000
 800aa50:	42b40000 	.word	0x42b40000
 800aa54:	c2b40000 	.word	0xc2b40000

0800aa58 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800aa58:	b084      	sub	sp, #16
 800aa5a:	b5b0      	push	{r4, r5, r7, lr}
 800aa5c:	ed2d 8b02 	vpush	{d8}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aa68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800aa70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	f040 80f5 	bne.w	800ac64 <slalomR+0x20c>
		highspeed_mode = 0;
 800aa7a:	4be3      	ldr	r3, [pc, #908]	; (800ae08 <slalomR+0x3b0>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa80:	2301      	movs	r3, #1
 800aa82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800aa90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d11f      	bne.n	800aad8 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aa98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaa0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aaa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aab0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aab4:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800ae0c <slalomR+0x3b4>
 800aab8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	eeb0 2a47 	vmov.f32	s4, s14
 800aac2:	eef0 1a46 	vmov.f32	s3, s12
 800aac6:	eeb0 1a66 	vmov.f32	s2, s13
 800aaca:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800ae10 <slalomR+0x3b8>
 800aace:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800ae14 <slalomR+0x3bc>
 800aad2:	f7f9 f8c9 	bl	8003c68 <straight_table2>
 800aad6:	e01e      	b.n	800ab16 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aad8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aadc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aae0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aae4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aaf0:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aaf4:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800ae0c <slalomR+0x3b4>
 800aaf8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	eeb0 2a47 	vmov.f32	s4, s14
 800ab02:	eef0 1a46 	vmov.f32	s3, s12
 800ab06:	eeb0 1a66 	vmov.f32	s2, s13
 800ab0a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800ae10 <slalomR+0x3b8>
 800ab0e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800ae18 <slalomR+0x3c0>
 800ab12:	f7f9 f8a9 	bl	8003c68 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800ab1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d127      	bne.n	800ab76 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ab2a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ab2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab32:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab36:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab3a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab4a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab4e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab52:	eddf 4aae 	vldr	s9, [pc, #696]	; 800ae0c <slalomR+0x3b4>
 800ab56:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab60:	eef0 1a45 	vmov.f32	s3, s10
 800ab64:	eeb0 1a65 	vmov.f32	s2, s11
 800ab68:	eef0 0a46 	vmov.f32	s1, s12
 800ab6c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab70:	f7f9 f87a 	bl	8003c68 <straight_table2>
 800ab74:	e022      	b.n	800abbc <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab76:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab7a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab7e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab82:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab92:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab96:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab9a:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800ae0c <slalomR+0x3b4>
 800ab9e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	eeb0 2a47 	vmov.f32	s4, s14
 800aba8:	eef0 1a45 	vmov.f32	s3, s10
 800abac:	eeb0 1a65 	vmov.f32	s2, s11
 800abb0:	eef0 0a46 	vmov.f32	s1, s12
 800abb4:	eeb0 0a66 	vmov.f32	s0, s13
 800abb8:	f7f9 f856 	bl	8003c68 <straight_table2>
		}
		if(mollifier_mode == ON){
 800abbc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d10c      	bne.n	800abde <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800abc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abc8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abcc:	eeb0 1a47 	vmov.f32	s2, s14
 800abd0:	eddf 0a92 	vldr	s1, [pc, #584]	; 800ae1c <slalomR+0x3c4>
 800abd4:	eeb0 0a67 	vmov.f32	s0, s15
 800abd8:	f7f9 ffe2 	bl	8004ba0 <mollifier_slalom_table>
 800abdc:	e015      	b.n	800ac0a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800abde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800abe6:	eef1 7a67 	vneg.f32	s15, s15
 800abea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abee:	eef0 2a66 	vmov.f32	s5, s13
 800abf2:	eeb0 2a67 	vmov.f32	s4, s15
 800abf6:	eddf 1a86 	vldr	s3, [pc, #536]	; 800ae10 <slalomR+0x3b8>
 800abfa:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800ae10 <slalomR+0x3b8>
 800abfe:	eddf 0a87 	vldr	s1, [pc, #540]	; 800ae1c <slalomR+0x3c4>
 800ac02:	eeb0 0a47 	vmov.f32	s0, s14
 800ac06:	f7f9 fe7b 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ac12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ac16:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ae0c <slalomR+0x3b4>
 800ac1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac32:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ac36:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ac3a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ae0c <slalomR+0x3b4>
 800ac3e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	eeb0 2a47 	vmov.f32	s4, s14
 800ac48:	eef0 1a65 	vmov.f32	s3, s11
 800ac4c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800ae10 <slalomR+0x3b8>
 800ac50:	eef0 0a46 	vmov.f32	s1, s12
 800ac54:	eeb0 0a66 	vmov.f32	s0, s13
 800ac58:	f7f9 f806 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800ac5c:	4b6a      	ldr	r3, [pc, #424]	; (800ae08 <slalomR+0x3b0>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800ac62:	e0c8      	b.n	800adf6 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800ac64:	2300      	movs	r3, #0
 800ac66:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800ac74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d127      	bne.n	800accc <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ac80:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ac84:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac88:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac8c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac90:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aca0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aca4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aca8:	eddf 4a58 	vldr	s9, [pc, #352]	; 800ae0c <slalomR+0x3b4>
 800acac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	eeb0 2a47 	vmov.f32	s4, s14
 800acb6:	eef0 1a45 	vmov.f32	s3, s10
 800acba:	eeb0 1a65 	vmov.f32	s2, s11
 800acbe:	eef0 0a46 	vmov.f32	s1, s12
 800acc2:	eeb0 0a66 	vmov.f32	s0, s13
 800acc6:	f7f8 ffcf 	bl	8003c68 <straight_table2>
 800acca:	e022      	b.n	800ad12 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800accc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800acd0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acd4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acd8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acdc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ace0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ace4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ace8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800acec:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acf0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ae0c <slalomR+0x3b4>
 800acf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	eeb0 2a47 	vmov.f32	s4, s14
 800acfe:	eef0 1a45 	vmov.f32	s3, s10
 800ad02:	eeb0 1a65 	vmov.f32	s2, s11
 800ad06:	eef0 0a46 	vmov.f32	s1, s12
 800ad0a:	eeb0 0a66 	vmov.f32	s0, s13
 800ad0e:	f7f8 ffab 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800ad12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d10c      	bne.n	800ad34 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ad1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad22:	eeb0 1a47 	vmov.f32	s2, s14
 800ad26:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800ae1c <slalomR+0x3c4>
 800ad2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2e:	f7f9 ff37 	bl	8004ba0 <mollifier_slalom_table>
 800ad32:	e015      	b.n	800ad60 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad3c:	eef1 7a67 	vneg.f32	s15, s15
 800ad40:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad44:	eef0 2a66 	vmov.f32	s5, s13
 800ad48:	eeb0 2a67 	vmov.f32	s4, s15
 800ad4c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ae10 <slalomR+0x3b8>
 800ad50:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ae10 <slalomR+0x3b8>
 800ad54:	eddf 0a31 	vldr	s1, [pc, #196]	; 800ae1c <slalomR+0x3c4>
 800ad58:	eeb0 0a47 	vmov.f32	s0, s14
 800ad5c:	f7f9 fdd0 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800ad60:	2300      	movs	r3, #0
 800ad62:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ad68:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ad6c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ad70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ad84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad88:	eef0 7ae7 	vabs.f32	s15, s15
 800ad8c:	ee17 0a90 	vmov	r0, s15
 800ad90:	f7f5 fc02 	bl	8000598 <__aeabi_f2d>
 800ad94:	f04f 0200 	mov.w	r2, #0
 800ad98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad9c:	f7f5 fd7e 	bl	800089c <__aeabi_ddiv>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	461d      	mov	r5, r3
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	4618      	mov	r0, r3
 800adac:	f7f5 fbf4 	bl	8000598 <__aeabi_f2d>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fd70 	bl	800089c <__aeabi_ddiv>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4610      	mov	r0, r2
 800adc2:	4619      	mov	r1, r3
 800adc4:	f04f 0200 	mov.w	r2, #0
 800adc8:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <slalomR+0x3c8>)
 800adca:	f7f5 fa87 	bl	80002dc <__adddf3>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800add2:	4610      	mov	r0, r2
 800add4:	4619      	mov	r1, r3
 800add6:	f7f5 ff0f 	bl	8000bf8 <__aeabi_d2f>
 800adda:	4603      	mov	r3, r0
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	ee02 3a10 	vmov	s4, r3
 800ade2:	edd7 1a01 	vldr	s3, [r7, #4]
 800ade6:	ed97 1a01 	vldr	s2, [r7, #4]
 800adea:	eef0 0a68 	vmov.f32	s1, s17
 800adee:	eeb0 0a48 	vmov.f32	s0, s16
 800adf2:	f7f8 ff39 	bl	8003c68 <straight_table2>
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	ecbd 8b02 	vpop	{d8}
 800ae00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ae04:	b004      	add	sp, #16
 800ae06:	4770      	bx	lr
 800ae08:	20000814 	.word	0x20000814
 800ae0c:	42340000 	.word	0x42340000
 800ae10:	00000000 	.word	0x00000000
 800ae14:	431b8000 	.word	0x431b8000
 800ae18:	43138000 	.word	0x43138000
 800ae1c:	c2b40000 	.word	0xc2b40000
 800ae20:	408f4000 	.word	0x408f4000

0800ae24 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800ae24:	b084      	sub	sp, #16
 800ae26:	b5b0      	push	{r4, r5, r7, lr}
 800ae28:	ed2d 8b02 	vpush	{d8}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ae34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae38:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800ae3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	f040 80f3 	bne.w	800b02c <slalomL+0x208>
		highspeed_mode = 0;
 800ae46:	4be1      	ldr	r3, [pc, #900]	; (800b1cc <slalomL+0x3a8>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800ae5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11f      	bne.n	800aea4 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ae64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ae68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae78:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ae7c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ae80:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800b1d0 <slalomL+0x3ac>
 800ae84:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	eeb0 2a47 	vmov.f32	s4, s14
 800ae8e:	eef0 1a46 	vmov.f32	s3, s12
 800ae92:	eeb0 1a66 	vmov.f32	s2, s13
 800ae96:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b1d4 <slalomL+0x3b0>
 800ae9a:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800b1d8 <slalomL+0x3b4>
 800ae9e:	f7f8 fee3 	bl	8003c68 <straight_table2>
 800aea2:	e01e      	b.n	800aee2 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aea4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aea8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aeac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aeb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aeb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeb8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aebc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aec0:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800b1d0 <slalomL+0x3ac>
 800aec4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	eeb0 2a47 	vmov.f32	s4, s14
 800aece:	eef0 1a46 	vmov.f32	s3, s12
 800aed2:	eeb0 1a66 	vmov.f32	s2, s13
 800aed6:	eddf 0abf 	vldr	s1, [pc, #764]	; 800b1d4 <slalomL+0x3b0>
 800aeda:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800b1dc <slalomL+0x3b8>
 800aede:	f7f8 fec3 	bl	8003c68 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800aee2:	2300      	movs	r3, #0
 800aee4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800aeea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d127      	bne.n	800af42 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aef2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aef6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800aefa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aefe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af02:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af06:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af12:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af16:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af1a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af1e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800b1d0 <slalomL+0x3ac>
 800af22:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	eeb0 2a47 	vmov.f32	s4, s14
 800af2c:	eef0 1a45 	vmov.f32	s3, s10
 800af30:	eeb0 1a65 	vmov.f32	s2, s11
 800af34:	eef0 0a46 	vmov.f32	s1, s12
 800af38:	eeb0 0a66 	vmov.f32	s0, s13
 800af3c:	f7f8 fe94 	bl	8003c68 <straight_table2>
 800af40:	e022      	b.n	800af88 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800af46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af4e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af5e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af62:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af66:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800b1d0 <slalomL+0x3ac>
 800af6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	eeb0 2a47 	vmov.f32	s4, s14
 800af74:	eef0 1a45 	vmov.f32	s3, s10
 800af78:	eeb0 1a65 	vmov.f32	s2, s11
 800af7c:	eef0 0a46 	vmov.f32	s1, s12
 800af80:	eeb0 0a66 	vmov.f32	s0, s13
 800af84:	f7f8 fe70 	bl	8003c68 <straight_table2>
		}
		if(mollifier_mode == ON){
 800af88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d10c      	bne.n	800afaa <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800af90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af98:	eeb0 1a47 	vmov.f32	s2, s14
 800af9c:	eddf 0a90 	vldr	s1, [pc, #576]	; 800b1e0 <slalomL+0x3bc>
 800afa0:	eeb0 0a67 	vmov.f32	s0, s15
 800afa4:	f7f9 fdfc 	bl	8004ba0 <mollifier_slalom_table>
 800afa8:	e013      	b.n	800afd2 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800afaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afb2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800afb6:	eef0 2a66 	vmov.f32	s5, s13
 800afba:	eeb0 2a47 	vmov.f32	s4, s14
 800afbe:	eddf 1a85 	vldr	s3, [pc, #532]	; 800b1d4 <slalomL+0x3b0>
 800afc2:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800b1d4 <slalomL+0x3b0>
 800afc6:	eddf 0a86 	vldr	s1, [pc, #536]	; 800b1e0 <slalomL+0x3bc>
 800afca:	eeb0 0a67 	vmov.f32	s0, s15
 800afce:	f7f9 fc97 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800afd2:	2300      	movs	r3, #0
 800afd4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800afda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800afde:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b1d0 <slalomL+0x3ac>
 800afe2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800afe6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800afea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aff2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800affa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800affe:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b002:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800b1d0 <slalomL+0x3ac>
 800b006:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	eeb0 2a47 	vmov.f32	s4, s14
 800b010:	eef0 1a65 	vmov.f32	s3, s11
 800b014:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b1d4 <slalomL+0x3b0>
 800b018:	eef0 0a46 	vmov.f32	s1, s12
 800b01c:	eeb0 0a66 	vmov.f32	s0, s13
 800b020:	f7f8 fe22 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800b024:	4b69      	ldr	r3, [pc, #420]	; (800b1cc <slalomL+0x3a8>)
 800b026:	2200      	movs	r2, #0
 800b028:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800b02a:	e0c6      	b.n	800b1ba <slalomL+0x396>
		wallmode.WallControlMode=0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b030:	2300      	movs	r3, #0
 800b032:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800b034:	2301      	movs	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b038:	2300      	movs	r3, #0
 800b03a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800b03c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d127      	bne.n	800b094 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b044:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b048:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b04c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b050:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b054:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b058:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b05c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b060:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b064:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b068:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b06c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b070:	eddf 4a57 	vldr	s9, [pc, #348]	; 800b1d0 <slalomL+0x3ac>
 800b074:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	eeb0 2a47 	vmov.f32	s4, s14
 800b07e:	eef0 1a45 	vmov.f32	s3, s10
 800b082:	eeb0 1a65 	vmov.f32	s2, s11
 800b086:	eef0 0a46 	vmov.f32	s1, s12
 800b08a:	eeb0 0a66 	vmov.f32	s0, s13
 800b08e:	f7f8 fdeb 	bl	8003c68 <straight_table2>
 800b092:	e022      	b.n	800b0da <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b094:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b098:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b09c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0a0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0b4:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0b8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b1d0 <slalomL+0x3ac>
 800b0bc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	eeb0 2a47 	vmov.f32	s4, s14
 800b0c6:	eef0 1a45 	vmov.f32	s3, s10
 800b0ca:	eeb0 1a65 	vmov.f32	s2, s11
 800b0ce:	eef0 0a46 	vmov.f32	s1, s12
 800b0d2:	eeb0 0a66 	vmov.f32	s0, s13
 800b0d6:	f7f8 fdc7 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b0da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d10c      	bne.n	800b0fc <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b0e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0ea:	eeb0 1a47 	vmov.f32	s2, s14
 800b0ee:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b1e0 <slalomL+0x3bc>
 800b0f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0f6:	f7f9 fd53 	bl	8004ba0 <mollifier_slalom_table>
 800b0fa:	e013      	b.n	800b124 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b0fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b100:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b104:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b108:	eef0 2a66 	vmov.f32	s5, s13
 800b10c:	eeb0 2a47 	vmov.f32	s4, s14
 800b110:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b1d4 <slalomL+0x3b0>
 800b114:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b1d4 <slalomL+0x3b0>
 800b118:	eddf 0a31 	vldr	s1, [pc, #196]	; 800b1e0 <slalomL+0x3bc>
 800b11c:	eeb0 0a67 	vmov.f32	s0, s15
 800b120:	f7f9 fbee 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800b124:	2300      	movs	r3, #0
 800b126:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b12c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b130:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b134:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b138:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b140:	edd7 7a01 	vldr	s15, [r7, #4]
 800b144:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b14c:	eef0 7ae7 	vabs.f32	s15, s15
 800b150:	ee17 0a90 	vmov	r0, s15
 800b154:	f7f5 fa20 	bl	8000598 <__aeabi_f2d>
 800b158:	f04f 0200 	mov.w	r2, #0
 800b15c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b160:	f7f5 fb9c 	bl	800089c <__aeabi_ddiv>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4614      	mov	r4, r2
 800b16a:	461d      	mov	r5, r3
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	4618      	mov	r0, r3
 800b170:	f7f5 fa12 	bl	8000598 <__aeabi_f2d>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 fb8e 	bl	800089c <__aeabi_ddiv>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4610      	mov	r0, r2
 800b186:	4619      	mov	r1, r3
 800b188:	f04f 0200 	mov.w	r2, #0
 800b18c:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <slalomL+0x3c0>)
 800b18e:	f7f5 f8a5 	bl	80002dc <__adddf3>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b196:	4610      	mov	r0, r2
 800b198:	4619      	mov	r1, r3
 800b19a:	f7f5 fd2d 	bl	8000bf8 <__aeabi_d2f>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	ee02 3a10 	vmov	s4, r3
 800b1a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b1aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800b1ae:	eef0 0a68 	vmov.f32	s1, s17
 800b1b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b1b6:	f7f8 fd57 	bl	8003c68 <straight_table2>
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	ecbd 8b02 	vpop	{d8}
 800b1c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b1c8:	b004      	add	sp, #16
 800b1ca:	4770      	bx	lr
 800b1cc:	20000814 	.word	0x20000814
 800b1d0:	42340000 	.word	0x42340000
 800b1d4:	00000000 	.word	0x00000000
 800b1d8:	431b8000 	.word	0x431b8000
 800b1dc:	43138000 	.word	0x43138000
 800b1e0:	42b40000 	.word	0x42b40000
 800b1e4:	408f4000 	.word	0x408f4000

0800b1e8 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	b5b0      	push	{r4, r5, r7, lr}
 800b1ec:	ed2d 8b02 	vpush	{d8}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b1f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b1fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b204:	2b01      	cmp	r3, #1
 800b206:	f040 80a5 	bne.w	800b354 <turn90R+0x16c>
		highspeed_mode = 1;
 800b20a:	4ba5      	ldr	r3, [pc, #660]	; (800b4a0 <turn90R+0x2b8>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b210:	2301      	movs	r3, #1
 800b212:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b214:	2300      	movs	r3, #0
 800b216:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b220:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b224:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b228:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b22c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b230:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b234:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b238:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b23c:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b4a4 <turn90R+0x2bc>
 800b240:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	eeb0 2a47 	vmov.f32	s4, s14
 800b24a:	eef0 1a46 	vmov.f32	s3, s12
 800b24e:	eeb0 1a66 	vmov.f32	s2, s13
 800b252:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b4a8 <turn90R+0x2c0>
 800b256:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b4ac <turn90R+0x2c4>
 800b25a:	f7f8 fd05 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800b25e:	2300      	movs	r3, #0
 800b260:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b262:	2302      	movs	r3, #2
 800b264:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b266:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b26a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b26e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b272:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b276:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b27a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b282:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b286:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b28a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b4a4 <turn90R+0x2bc>
 800b28e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	eeb0 2a47 	vmov.f32	s4, s14
 800b298:	eef0 1a45 	vmov.f32	s3, s10
 800b29c:	eeb0 1a65 	vmov.f32	s2, s11
 800b2a0:	eef0 0a46 	vmov.f32	s1, s12
 800b2a4:	eeb0 0a66 	vmov.f32	s0, s13
 800b2a8:	f7f8 fcde 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b2ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d10c      	bne.n	800b2ce <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b2b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b2bc:	eeb0 1a47 	vmov.f32	s2, s14
 800b2c0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b4b0 <turn90R+0x2c8>
 800b2c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b2c8:	f7f9 fc6a 	bl	8004ba0 <mollifier_slalom_table>
 800b2cc:	e015      	b.n	800b2fa <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b2ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b2d6:	eef1 7a67 	vneg.f32	s15, s15
 800b2da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b2de:	eef0 2a66 	vmov.f32	s5, s13
 800b2e2:	eeb0 2a67 	vmov.f32	s4, s15
 800b2e6:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b4a8 <turn90R+0x2c0>
 800b2ea:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b4a8 <turn90R+0x2c0>
 800b2ee:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b4b0 <turn90R+0x2c8>
 800b2f2:	eeb0 0a47 	vmov.f32	s0, s14
 800b2f6:	f7f9 fb03 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b302:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b306:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b4b4 <turn90R+0x2cc>
 800b30a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b30e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b312:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b316:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b31a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b322:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b326:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b32a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b4a4 <turn90R+0x2bc>
 800b32e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	eeb0 2a47 	vmov.f32	s4, s14
 800b338:	eef0 1a65 	vmov.f32	s3, s11
 800b33c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b4a8 <turn90R+0x2c0>
 800b340:	eef0 0a46 	vmov.f32	s1, s12
 800b344:	eeb0 0a66 	vmov.f32	s0, s13
 800b348:	f7f8 fc8e 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800b34c:	4b54      	ldr	r3, [pc, #336]	; (800b4a0 <turn90R+0x2b8>)
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b352:	e09c      	b.n	800b48e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b354:	2300      	movs	r3, #0
 800b356:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b358:	2300      	movs	r3, #0
 800b35a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b35c:	2302      	movs	r3, #2
 800b35e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b360:	2300      	movs	r3, #0
 800b362:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b364:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b368:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b36c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b370:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b378:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b37c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b380:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b384:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b388:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b4a4 <turn90R+0x2bc>
 800b38c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	eeb0 2a47 	vmov.f32	s4, s14
 800b396:	eef0 1a45 	vmov.f32	s3, s10
 800b39a:	eeb0 1a65 	vmov.f32	s2, s11
 800b39e:	eef0 0a46 	vmov.f32	s1, s12
 800b3a2:	eeb0 0a66 	vmov.f32	s0, s13
 800b3a6:	f7f8 fc5f 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b3aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d10c      	bne.n	800b3cc <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b3b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3ba:	eeb0 1a47 	vmov.f32	s2, s14
 800b3be:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b4b0 <turn90R+0x2c8>
 800b3c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b3c6:	f7f9 fbeb 	bl	8004ba0 <mollifier_slalom_table>
 800b3ca:	e015      	b.n	800b3f8 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b3cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b3d4:	eef1 7a67 	vneg.f32	s15, s15
 800b3d8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b3dc:	eef0 2a66 	vmov.f32	s5, s13
 800b3e0:	eeb0 2a67 	vmov.f32	s4, s15
 800b3e4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b4a8 <turn90R+0x2c0>
 800b3e8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b4a8 <turn90R+0x2c0>
 800b3ec:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b4b0 <turn90R+0x2c8>
 800b3f0:	eeb0 0a47 	vmov.f32	s0, s14
 800b3f4:	f7f9 fa84 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b400:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b404:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b408:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b40c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b410:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b414:	edd7 7a01 	vldr	s15, [r7, #4]
 800b418:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b41c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b420:	eef0 7ae7 	vabs.f32	s15, s15
 800b424:	ee17 0a90 	vmov	r0, s15
 800b428:	f7f5 f8b6 	bl	8000598 <__aeabi_f2d>
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b434:	f7f5 fa32 	bl	800089c <__aeabi_ddiv>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4614      	mov	r4, r2
 800b43e:	461d      	mov	r5, r3
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	4618      	mov	r0, r3
 800b444:	f7f5 f8a8 	bl	8000598 <__aeabi_f2d>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 fa24 	bl	800089c <__aeabi_ddiv>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4610      	mov	r0, r2
 800b45a:	4619      	mov	r1, r3
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <turn90R+0x2d0>)
 800b462:	f7f4 ff3b 	bl	80002dc <__adddf3>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b46a:	4610      	mov	r0, r2
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7f5 fbc3 	bl	8000bf8 <__aeabi_d2f>
 800b472:	4603      	mov	r3, r0
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	ee02 3a10 	vmov	s4, r3
 800b47a:	edd7 1a01 	vldr	s3, [r7, #4]
 800b47e:	ed97 1a01 	vldr	s2, [r7, #4]
 800b482:	eef0 0a68 	vmov.f32	s1, s17
 800b486:	eeb0 0a48 	vmov.f32	s0, s16
 800b48a:	f7f8 fbed 	bl	8003c68 <straight_table2>
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	ecbd 8b02 	vpop	{d8}
 800b498:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b49c:	b004      	add	sp, #16
 800b49e:	4770      	bx	lr
 800b4a0:	20000814 	.word	0x20000814
 800b4a4:	42340000 	.word	0x42340000
 800b4a8:	00000000 	.word	0x00000000
 800b4ac:	42cd0000 	.word	0x42cd0000
 800b4b0:	c2b40000 	.word	0xc2b40000
 800b4b4:	42b40000 	.word	0x42b40000
 800b4b8:	408f4000 	.word	0x408f4000

0800b4bc <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b4bc:	b084      	sub	sp, #16
 800b4be:	b5b0      	push	{r4, r5, r7, lr}
 800b4c0:	ed2d 8b02 	vpush	{d8}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b4cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4d0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b4d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	f040 80a3 	bne.w	800b624 <turn90L+0x168>
		highspeed_mode = 1;
 800b4de:	4ba3      	ldr	r3, [pc, #652]	; (800b76c <turn90L+0x2b0>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b4f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b4f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b500:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b504:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b508:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b50c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b510:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b770 <turn90L+0x2b4>
 800b514:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	eeb0 2a47 	vmov.f32	s4, s14
 800b51e:	eef0 1a46 	vmov.f32	s3, s12
 800b522:	eeb0 1a66 	vmov.f32	s2, s13
 800b526:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b774 <turn90L+0x2b8>
 800b52a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b778 <turn90L+0x2bc>
 800b52e:	f7f8 fb9b 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800b532:	2300      	movs	r3, #0
 800b534:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b536:	2302      	movs	r3, #2
 800b538:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b53a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b53e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b542:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b546:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b54a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b54e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b552:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b556:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b55a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b55e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b770 <turn90L+0x2b4>
 800b562:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	eeb0 2a47 	vmov.f32	s4, s14
 800b56c:	eef0 1a45 	vmov.f32	s3, s10
 800b570:	eeb0 1a65 	vmov.f32	s2, s11
 800b574:	eef0 0a46 	vmov.f32	s1, s12
 800b578:	eeb0 0a66 	vmov.f32	s0, s13
 800b57c:	f7f8 fb74 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b580:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b584:	2b01      	cmp	r3, #1
 800b586:	d10c      	bne.n	800b5a2 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b588:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b58c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b590:	eeb0 1a47 	vmov.f32	s2, s14
 800b594:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b77c <turn90L+0x2c0>
 800b598:	eeb0 0a67 	vmov.f32	s0, s15
 800b59c:	f7f9 fb00 	bl	8004ba0 <mollifier_slalom_table>
 800b5a0:	e013      	b.n	800b5ca <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b5a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b5ae:	eef0 2a66 	vmov.f32	s5, s13
 800b5b2:	eeb0 2a47 	vmov.f32	s4, s14
 800b5b6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b774 <turn90L+0x2b8>
 800b5ba:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b774 <turn90L+0x2b8>
 800b5be:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b77c <turn90L+0x2c0>
 800b5c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c6:	f7f9 f99b 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b5d6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800b77c <turn90L+0x2c0>
 800b5da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b5de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b5e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5f2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b5f6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b5fa:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b770 <turn90L+0x2b4>
 800b5fe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	eeb0 2a47 	vmov.f32	s4, s14
 800b608:	eef0 1a65 	vmov.f32	s3, s11
 800b60c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b774 <turn90L+0x2b8>
 800b610:	eef0 0a46 	vmov.f32	s1, s12
 800b614:	eeb0 0a66 	vmov.f32	s0, s13
 800b618:	f7f8 fb26 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800b61c:	4b53      	ldr	r3, [pc, #332]	; (800b76c <turn90L+0x2b0>)
 800b61e:	2200      	movs	r2, #0
 800b620:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b622:	e09a      	b.n	800b75a <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b624:	2300      	movs	r3, #0
 800b626:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b628:	2300      	movs	r3, #0
 800b62a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b62c:	2302      	movs	r3, #2
 800b62e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b630:	2300      	movs	r3, #0
 800b632:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b634:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b638:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b63c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b640:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b650:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b654:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b658:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b770 <turn90L+0x2b4>
 800b65c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	eeb0 2a47 	vmov.f32	s4, s14
 800b666:	eef0 1a45 	vmov.f32	s3, s10
 800b66a:	eeb0 1a65 	vmov.f32	s2, s11
 800b66e:	eef0 0a46 	vmov.f32	s1, s12
 800b672:	eeb0 0a66 	vmov.f32	s0, s13
 800b676:	f7f8 faf7 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b67a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d10c      	bne.n	800b69c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b682:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b686:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b68a:	eeb0 1a47 	vmov.f32	s2, s14
 800b68e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b77c <turn90L+0x2c0>
 800b692:	eeb0 0a67 	vmov.f32	s0, s15
 800b696:	f7f9 fa83 	bl	8004ba0 <mollifier_slalom_table>
 800b69a:	e013      	b.n	800b6c4 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b69c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b6a8:	eef0 2a66 	vmov.f32	s5, s13
 800b6ac:	eeb0 2a47 	vmov.f32	s4, s14
 800b6b0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b774 <turn90L+0x2b8>
 800b6b4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b774 <turn90L+0x2b8>
 800b6b8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b77c <turn90L+0x2c0>
 800b6bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c0:	f7f9 f91e 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b6cc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b6d0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b6d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6ec:	eef0 7ae7 	vabs.f32	s15, s15
 800b6f0:	ee17 0a90 	vmov	r0, s15
 800b6f4:	f7f4 ff50 	bl	8000598 <__aeabi_f2d>
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b700:	f7f5 f8cc 	bl	800089c <__aeabi_ddiv>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4614      	mov	r4, r2
 800b70a:	461d      	mov	r5, r3
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	4618      	mov	r0, r3
 800b710:	f7f4 ff42 	bl	8000598 <__aeabi_f2d>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4620      	mov	r0, r4
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7f5 f8be 	bl	800089c <__aeabi_ddiv>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4610      	mov	r0, r2
 800b726:	4619      	mov	r1, r3
 800b728:	f04f 0200 	mov.w	r2, #0
 800b72c:	4b14      	ldr	r3, [pc, #80]	; (800b780 <turn90L+0x2c4>)
 800b72e:	f7f4 fdd5 	bl	80002dc <__adddf3>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b736:	4610      	mov	r0, r2
 800b738:	4619      	mov	r1, r3
 800b73a:	f7f5 fa5d 	bl	8000bf8 <__aeabi_d2f>
 800b73e:	4603      	mov	r3, r0
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	ee02 3a10 	vmov	s4, r3
 800b746:	edd7 1a01 	vldr	s3, [r7, #4]
 800b74a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b74e:	eef0 0a68 	vmov.f32	s1, s17
 800b752:	eeb0 0a48 	vmov.f32	s0, s16
 800b756:	f7f8 fa87 	bl	8003c68 <straight_table2>
}
 800b75a:	bf00      	nop
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	ecbd 8b02 	vpop	{d8}
 800b764:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b768:	b004      	add	sp, #16
 800b76a:	4770      	bx	lr
 800b76c:	20000814 	.word	0x20000814
 800b770:	42340000 	.word	0x42340000
 800b774:	00000000 	.word	0x00000000
 800b778:	42cd0000 	.word	0x42cd0000
 800b77c:	42b40000 	.word	0x42b40000
 800b780:	408f4000 	.word	0x408f4000

0800b784 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b784:	b084      	sub	sp, #16
 800b786:	b5b0      	push	{r4, r5, r7, lr}
 800b788:	ed2d 8b02 	vpush	{d8}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b798:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b79c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	f040 80a5 	bne.w	800b8f0 <turn180R+0x16c>
		highspeed_mode = 1;
 800b7a6:	4ba5      	ldr	r3, [pc, #660]	; (800ba3c <turn180R+0x2b8>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b7c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b7d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b7d8:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ba40 <turn180R+0x2bc>
 800b7dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	eeb0 2a47 	vmov.f32	s4, s14
 800b7e6:	eef0 1a46 	vmov.f32	s3, s12
 800b7ea:	eeb0 1a66 	vmov.f32	s2, s13
 800b7ee:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ba44 <turn180R+0x2c0>
 800b7f2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ba48 <turn180R+0x2c4>
 800b7f6:	f7f8 fa37 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b7fe:	2302      	movs	r3, #2
 800b800:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b802:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b806:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b80a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b80e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b812:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b816:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b81a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b81e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b822:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b826:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ba40 <turn180R+0x2bc>
 800b82a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	eeb0 2a47 	vmov.f32	s4, s14
 800b834:	eef0 1a45 	vmov.f32	s3, s10
 800b838:	eeb0 1a65 	vmov.f32	s2, s11
 800b83c:	eef0 0a46 	vmov.f32	s1, s12
 800b840:	eeb0 0a66 	vmov.f32	s0, s13
 800b844:	f7f8 fa10 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b848:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d10c      	bne.n	800b86a <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b854:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b858:	eeb0 1a47 	vmov.f32	s2, s14
 800b85c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ba4c <turn180R+0x2c8>
 800b860:	eeb0 0a67 	vmov.f32	s0, s15
 800b864:	f7f9 f99c 	bl	8004ba0 <mollifier_slalom_table>
 800b868:	e015      	b.n	800b896 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b86a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b86e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b872:	eef1 7a67 	vneg.f32	s15, s15
 800b876:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b87a:	eef0 2a66 	vmov.f32	s5, s13
 800b87e:	eeb0 2a67 	vmov.f32	s4, s15
 800b882:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ba44 <turn180R+0x2c0>
 800b886:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ba44 <turn180R+0x2c0>
 800b88a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ba4c <turn180R+0x2c8>
 800b88e:	eeb0 0a47 	vmov.f32	s0, s14
 800b892:	f7f9 f835 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b896:	2300      	movs	r3, #0
 800b898:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b89e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b8a2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ba50 <turn180R+0x2cc>
 800b8a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b8aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b8ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b8b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8be:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b8c2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b8c6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ba40 <turn180R+0x2bc>
 800b8ca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	eeb0 2a47 	vmov.f32	s4, s14
 800b8d4:	eef0 1a65 	vmov.f32	s3, s11
 800b8d8:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ba44 <turn180R+0x2c0>
 800b8dc:	eef0 0a46 	vmov.f32	s1, s12
 800b8e0:	eeb0 0a66 	vmov.f32	s0, s13
 800b8e4:	f7f8 f9c0 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800b8e8:	4b54      	ldr	r3, [pc, #336]	; (800ba3c <turn180R+0x2b8>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b8ee:	e09c      	b.n	800ba2a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b900:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b904:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b908:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b90c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b910:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b914:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b91c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b920:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b924:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ba40 <turn180R+0x2bc>
 800b928:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	eeb0 2a47 	vmov.f32	s4, s14
 800b932:	eef0 1a45 	vmov.f32	s3, s10
 800b936:	eeb0 1a65 	vmov.f32	s2, s11
 800b93a:	eef0 0a46 	vmov.f32	s1, s12
 800b93e:	eeb0 0a66 	vmov.f32	s0, s13
 800b942:	f7f8 f991 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800b946:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d10c      	bne.n	800b968 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b94e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b952:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b956:	eeb0 1a47 	vmov.f32	s2, s14
 800b95a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ba4c <turn180R+0x2c8>
 800b95e:	eeb0 0a67 	vmov.f32	s0, s15
 800b962:	f7f9 f91d 	bl	8004ba0 <mollifier_slalom_table>
 800b966:	e015      	b.n	800b994 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b968:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b96c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b970:	eef1 7a67 	vneg.f32	s15, s15
 800b974:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b978:	eef0 2a66 	vmov.f32	s5, s13
 800b97c:	eeb0 2a67 	vmov.f32	s4, s15
 800b980:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ba44 <turn180R+0x2c0>
 800b984:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ba44 <turn180R+0x2c0>
 800b988:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ba4c <turn180R+0x2c8>
 800b98c:	eeb0 0a47 	vmov.f32	s0, s14
 800b990:	f7f8 ffb6 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b994:	2301      	movs	r3, #1
 800b996:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b99c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b9a0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b9a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9bc:	eef0 7ae7 	vabs.f32	s15, s15
 800b9c0:	ee17 0a90 	vmov	r0, s15
 800b9c4:	f7f4 fde8 	bl	8000598 <__aeabi_f2d>
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9d0:	f7f4 ff64 	bl	800089c <__aeabi_ddiv>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4614      	mov	r4, r2
 800b9da:	461d      	mov	r5, r3
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f4 fdda 	bl	8000598 <__aeabi_f2d>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f4 ff56 	bl	800089c <__aeabi_ddiv>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <turn180R+0x2d0>)
 800b9fe:	f7f4 fc6d 	bl	80002dc <__adddf3>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba06:	4610      	mov	r0, r2
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f7f5 f8f5 	bl	8000bf8 <__aeabi_d2f>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	ee02 3a10 	vmov	s4, r3
 800ba16:	edd7 1a01 	vldr	s3, [r7, #4]
 800ba1a:	ed97 1a01 	vldr	s2, [r7, #4]
 800ba1e:	eef0 0a68 	vmov.f32	s1, s17
 800ba22:	eeb0 0a48 	vmov.f32	s0, s16
 800ba26:	f7f8 f91f 	bl	8003c68 <straight_table2>
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	ecbd 8b02 	vpop	{d8}
 800ba34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ba38:	b004      	add	sp, #16
 800ba3a:	4770      	bx	lr
 800ba3c:	20000814 	.word	0x20000814
 800ba40:	42340000 	.word	0x42340000
 800ba44:	00000000 	.word	0x00000000
 800ba48:	42cd0000 	.word	0x42cd0000
 800ba4c:	c3340000 	.word	0xc3340000
 800ba50:	42b40000 	.word	0x42b40000
 800ba54:	408f4000 	.word	0x408f4000

0800ba58 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ba58:	b084      	sub	sp, #16
 800ba5a:	b5b0      	push	{r4, r5, r7, lr}
 800ba5c:	ed2d 8b02 	vpush	{d8}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ba68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ba70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	f040 80a3 	bne.w	800bbc0 <turn180L+0x168>
		highspeed_mode = 1;
 800ba7a:	4ba3      	ldr	r3, [pc, #652]	; (800bd08 <turn180L+0x2b0>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ba80:	2301      	movs	r3, #1
 800ba82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba90:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baa4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800baa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800baac:	eddf 5a97 	vldr	s11, [pc, #604]	; 800bd0c <turn180L+0x2b4>
 800bab0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	eeb0 2a47 	vmov.f32	s4, s14
 800baba:	eef0 1a46 	vmov.f32	s3, s12
 800babe:	eeb0 1a66 	vmov.f32	s2, s13
 800bac2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800bd10 <turn180L+0x2b8>
 800bac6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800bd14 <turn180L+0x2bc>
 800baca:	f7f8 f8cd 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800bace:	2300      	movs	r3, #0
 800bad0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bad2:	2302      	movs	r3, #2
 800bad4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bad6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bada:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bade:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bae2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bae6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baf2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800baf6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bafa:	eddf 4a84 	vldr	s9, [pc, #528]	; 800bd0c <turn180L+0x2b4>
 800bafe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	eeb0 2a47 	vmov.f32	s4, s14
 800bb08:	eef0 1a45 	vmov.f32	s3, s10
 800bb0c:	eeb0 1a65 	vmov.f32	s2, s11
 800bb10:	eef0 0a46 	vmov.f32	s1, s12
 800bb14:	eeb0 0a66 	vmov.f32	s0, s13
 800bb18:	f7f8 f8a6 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800bb1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d10c      	bne.n	800bb3e <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800bb24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb2c:	eeb0 1a47 	vmov.f32	s2, s14
 800bb30:	eddf 0a79 	vldr	s1, [pc, #484]	; 800bd18 <turn180L+0x2c0>
 800bb34:	eeb0 0a67 	vmov.f32	s0, s15
 800bb38:	f7f9 f832 	bl	8004ba0 <mollifier_slalom_table>
 800bb3c:	e013      	b.n	800bb66 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bb3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb46:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bb4a:	eef0 2a66 	vmov.f32	s5, s13
 800bb4e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb52:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800bd10 <turn180L+0x2b8>
 800bb56:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800bd10 <turn180L+0x2b8>
 800bb5a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800bd18 <turn180L+0x2c0>
 800bb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb62:	f7f8 fecd 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb6e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bb72:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800bd1c <turn180L+0x2c4>
 800bb76:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bb7a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb7e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb8e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb92:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb96:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800bd0c <turn180L+0x2b4>
 800bb9a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	eeb0 2a47 	vmov.f32	s4, s14
 800bba4:	eef0 1a65 	vmov.f32	s3, s11
 800bba8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800bd10 <turn180L+0x2b8>
 800bbac:	eef0 0a46 	vmov.f32	s1, s12
 800bbb0:	eeb0 0a66 	vmov.f32	s0, s13
 800bbb4:	f7f8 f858 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800bbb8:	4b53      	ldr	r3, [pc, #332]	; (800bd08 <turn180L+0x2b0>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800bbbe:	e09a      	b.n	800bcf6 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbd0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbd8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbdc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbe0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbf0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbf4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800bd0c <turn180L+0x2b4>
 800bbf8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	eeb0 2a47 	vmov.f32	s4, s14
 800bc02:	eef0 1a45 	vmov.f32	s3, s10
 800bc06:	eeb0 1a65 	vmov.f32	s2, s11
 800bc0a:	eef0 0a46 	vmov.f32	s1, s12
 800bc0e:	eeb0 0a66 	vmov.f32	s0, s13
 800bc12:	f7f8 f829 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800bc16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d10c      	bne.n	800bc38 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800bc1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc26:	eeb0 1a47 	vmov.f32	s2, s14
 800bc2a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800bd18 <turn180L+0x2c0>
 800bc2e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc32:	f7f8 ffb5 	bl	8004ba0 <mollifier_slalom_table>
 800bc36:	e013      	b.n	800bc60 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bc38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc40:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc44:	eef0 2a66 	vmov.f32	s5, s13
 800bc48:	eeb0 2a47 	vmov.f32	s4, s14
 800bc4c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800bd10 <turn180L+0x2b8>
 800bc50:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800bd10 <turn180L+0x2b8>
 800bc54:	eddf 0a30 	vldr	s1, [pc, #192]	; 800bd18 <turn180L+0x2c0>
 800bc58:	eeb0 0a67 	vmov.f32	s0, s15
 800bc5c:	f7f8 fe50 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800bc60:	2301      	movs	r3, #1
 800bc62:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bc68:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bc6c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bc70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bc84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc88:	eef0 7ae7 	vabs.f32	s15, s15
 800bc8c:	ee17 0a90 	vmov	r0, s15
 800bc90:	f7f4 fc82 	bl	8000598 <__aeabi_f2d>
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc9c:	f7f4 fdfe 	bl	800089c <__aeabi_ddiv>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	461d      	mov	r5, r3
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7f4 fc74 	bl	8000598 <__aeabi_f2d>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f7f4 fdf0 	bl	800089c <__aeabi_ddiv>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <turn180L+0x2c8>)
 800bcca:	f7f4 fb07 	bl	80002dc <__adddf3>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f7f4 ff8f 	bl	8000bf8 <__aeabi_d2f>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	ee02 3a10 	vmov	s4, r3
 800bce2:	edd7 1a01 	vldr	s3, [r7, #4]
 800bce6:	ed97 1a01 	vldr	s2, [r7, #4]
 800bcea:	eef0 0a68 	vmov.f32	s1, s17
 800bcee:	eeb0 0a48 	vmov.f32	s0, s16
 800bcf2:	f7f7 ffb9 	bl	8003c68 <straight_table2>
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	ecbd 8b02 	vpop	{d8}
 800bd00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bd04:	b004      	add	sp, #16
 800bd06:	4770      	bx	lr
 800bd08:	20000814 	.word	0x20000814
 800bd0c:	42340000 	.word	0x42340000
 800bd10:	00000000 	.word	0x00000000
 800bd14:	42cd0000 	.word	0x42cd0000
 800bd18:	43340000 	.word	0x43340000
 800bd1c:	42b40000 	.word	0x42b40000
 800bd20:	408f4000 	.word	0x408f4000
 800bd24:	00000000 	.word	0x00000000

0800bd28 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bd28:	b084      	sub	sp, #16
 800bd2a:	b5b0      	push	{r4, r5, r7, lr}
 800bd2c:	ed2d 8b02 	vpush	{d8}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bd38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd3c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bd40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	f040 80ae 	bne.w	800bea6 <turn45inR+0x17e>
		highspeed_mode = 1;
 800bd4a:	4bdd      	ldr	r3, [pc, #884]	; (800c0c0 <turn45inR+0x398>)
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bd50:	2301      	movs	r3, #1
 800bd52:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd60:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd64:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd74:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bd78:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bd7c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c0c4 <turn45inR+0x39c>
 800bd80:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	eeb0 2a47 	vmov.f32	s4, s14
 800bd8a:	eef0 1a46 	vmov.f32	s3, s12
 800bd8e:	eeb0 1a66 	vmov.f32	s2, s13
 800bd92:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c0d0 <turn45inR+0x3a8>
 800bd96:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c0c8 <turn45inR+0x3a0>
 800bd9a:	f7f7 ff65 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bda2:	2302      	movs	r3, #2
 800bda4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bda6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bdaa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bdae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bdb2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bdc6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdca:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c0c4 <turn45inR+0x39c>
 800bdce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	eeb0 2a47 	vmov.f32	s4, s14
 800bdd8:	eef0 1a45 	vmov.f32	s3, s10
 800bddc:	eeb0 1a65 	vmov.f32	s2, s11
 800bde0:	eef0 0a46 	vmov.f32	s1, s12
 800bde4:	eeb0 0a66 	vmov.f32	s0, s13
 800bde8:	f7f7 ff3e 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800bdec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d10c      	bne.n	800be0e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800bdf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdf8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bdfc:	eeb0 1a47 	vmov.f32	s2, s14
 800be00:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c0d4 <turn45inR+0x3ac>
 800be04:	eeb0 0a67 	vmov.f32	s0, s15
 800be08:	f7f8 feca 	bl	8004ba0 <mollifier_slalom_table>
 800be0c:	e015      	b.n	800be3a <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800be0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800be16:	eef1 7a67 	vneg.f32	s15, s15
 800be1a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be1e:	eef0 2a66 	vmov.f32	s5, s13
 800be22:	eeb0 2a67 	vmov.f32	s4, s15
 800be26:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c0d0 <turn45inR+0x3a8>
 800be2a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c0d0 <turn45inR+0x3a8>
 800be2e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c0d4 <turn45inR+0x3ac>
 800be32:	eeb0 0a47 	vmov.f32	s0, s14
 800be36:	f7f8 fd63 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800be3e:	2300      	movs	r3, #0
 800be40:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	4618      	mov	r0, r3
 800be46:	f7f4 fba7 	bl	8000598 <__aeabi_f2d>
 800be4a:	a39b      	add	r3, pc, #620	; (adr r3, 800c0b8 <turn45inR+0x390>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 fa44 	bl	80002dc <__adddf3>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4610      	mov	r0, r2
 800be5a:	4619      	mov	r1, r3
 800be5c:	f7f4 fecc 	bl	8000bf8 <__aeabi_d2f>
 800be60:	4603      	mov	r3, r0
 800be62:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be76:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be7a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800be7e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c0c4 <turn45inR+0x39c>
 800be82:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	eeb0 2a47 	vmov.f32	s4, s14
 800be8c:	eef0 1a46 	vmov.f32	s3, s12
 800be90:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c0d0 <turn45inR+0x3a8>
 800be94:	eef0 0a66 	vmov.f32	s1, s13
 800be98:	ee00 3a10 	vmov	s0, r3
 800be9c:	f7f7 fee4 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800bea0:	4b87      	ldr	r3, [pc, #540]	; (800c0c0 <turn45inR+0x398>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bea6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f040 809d 	bne.w	800bfea <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800beb0:	2300      	movs	r3, #0
 800beb2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800beb8:	2302      	movs	r3, #2
 800beba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bec0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bec4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bec8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800becc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bed0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bed4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bedc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bee0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bee4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c0c4 <turn45inR+0x39c>
 800bee8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	eeb0 2a47 	vmov.f32	s4, s14
 800bef2:	eef0 1a45 	vmov.f32	s3, s10
 800bef6:	eeb0 1a65 	vmov.f32	s2, s11
 800befa:	eef0 0a46 	vmov.f32	s1, s12
 800befe:	eeb0 0a66 	vmov.f32	s0, s13
 800bf02:	f7f7 feb1 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800bf06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d10c      	bne.n	800bf28 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800bf0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf16:	eeb0 1a47 	vmov.f32	s2, s14
 800bf1a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c0d4 <turn45inR+0x3ac>
 800bf1e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf22:	f7f8 fe3d 	bl	8004ba0 <mollifier_slalom_table>
 800bf26:	e015      	b.n	800bf54 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf30:	eef1 7a67 	vneg.f32	s15, s15
 800bf34:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf38:	eef0 2a66 	vmov.f32	s5, s13
 800bf3c:	eeb0 2a67 	vmov.f32	s4, s15
 800bf40:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c0d0 <turn45inR+0x3a8>
 800bf44:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c0d0 <turn45inR+0x3a8>
 800bf48:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c0d4 <turn45inR+0x3ac>
 800bf4c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf50:	f7f8 fcd6 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf5c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bf60:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bf64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf70:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf7c:	eef0 7ae7 	vabs.f32	s15, s15
 800bf80:	ee17 0a90 	vmov	r0, s15
 800bf84:	f7f4 fb08 	bl	8000598 <__aeabi_f2d>
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf90:	f7f4 fc84 	bl	800089c <__aeabi_ddiv>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	4614      	mov	r4, r2
 800bf9a:	461d      	mov	r5, r3
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f4 fafa 	bl	8000598 <__aeabi_f2d>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f7f4 fc76 	bl	800089c <__aeabi_ddiv>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	4b43      	ldr	r3, [pc, #268]	; (800c0cc <turn45inR+0x3a4>)
 800bfbe:	f7f4 f98d 	bl	80002dc <__adddf3>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f7f4 fe15 	bl	8000bf8 <__aeabi_d2f>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	ee02 3a10 	vmov	s4, r3
 800bfd6:	edd7 1a01 	vldr	s3, [r7, #4]
 800bfda:	ed97 1a01 	vldr	s2, [r7, #4]
 800bfde:	eef0 0a68 	vmov.f32	s1, s17
 800bfe2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfe6:	f7f7 fe3f 	bl	8003c68 <straight_table2>

	}
	if (test_mode >= 2) {
 800bfea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	f240 80d0 	bls.w	800c194 <turn45inR+0x46c>

		highspeed_mode = 1;
 800bff4:	4b32      	ldr	r3, [pc, #200]	; (800c0c0 <turn45inR+0x398>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bffa:	2301      	movs	r3, #1
 800bffc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bffe:	2300      	movs	r3, #0
 800c000:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c006:	2300      	movs	r3, #0
 800c008:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c00a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c00e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c012:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c016:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c01a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c01e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c022:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c026:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c0c4 <turn45inR+0x39c>
 800c02a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	eeb0 2a47 	vmov.f32	s4, s14
 800c034:	eef0 1a46 	vmov.f32	s3, s12
 800c038:	eeb0 1a66 	vmov.f32	s2, s13
 800c03c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c0d0 <turn45inR+0x3a8>
 800c040:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c0c8 <turn45inR+0x3a0>
 800c044:	f7f7 fe10 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800c048:	2300      	movs	r3, #0
 800c04a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c04c:	2302      	movs	r3, #2
 800c04e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c050:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c054:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c058:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c05c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c060:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c064:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c06c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c070:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c074:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c0c4 <turn45inR+0x39c>
 800c078:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	eeb0 2a47 	vmov.f32	s4, s14
 800c082:	eef0 1a45 	vmov.f32	s3, s10
 800c086:	eeb0 1a65 	vmov.f32	s2, s11
 800c08a:	eef0 0a46 	vmov.f32	s1, s12
 800c08e:	eeb0 0a66 	vmov.f32	s0, s13
 800c092:	f7f7 fde9 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c096:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d11c      	bne.n	800c0d8 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c09e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0a6:	eeb0 1a47 	vmov.f32	s2, s14
 800c0aa:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c0d4 <turn45inR+0x3ac>
 800c0ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b2:	f7f8 fd75 	bl	8004ba0 <mollifier_slalom_table>
 800c0b6:	e025      	b.n	800c104 <turn45inR+0x3dc>
 800c0b8:	c022ec18 	.word	0xc022ec18
 800c0bc:	405fd1de 	.word	0x405fd1de
 800c0c0:	20000814 	.word	0x20000814
 800c0c4:	42340000 	.word	0x42340000
 800c0c8:	42cd0000 	.word	0x42cd0000
 800c0cc:	408f4000 	.word	0x408f4000
 800c0d0:	00000000 	.word	0x00000000
 800c0d4:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c0d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c0e0:	eef1 7a67 	vneg.f32	s15, s15
 800c0e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0e8:	eef0 2a66 	vmov.f32	s5, s13
 800c0ec:	eeb0 2a67 	vmov.f32	s4, s15
 800c0f0:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c0d0 <turn45inR+0x3a8>
 800c0f4:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c0d0 <turn45inR+0x3a8>
 800c0f8:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c0d4 <turn45inR+0x3ac>
 800c0fc:	eeb0 0a47 	vmov.f32	s0, s14
 800c100:	f7f8 fbfe 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c104:	2300      	movs	r3, #0
 800c106:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c108:	2300      	movs	r3, #0
 800c10a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c10c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c110:	3b02      	subs	r3, #2
 800c112:	4618      	mov	r0, r3
 800c114:	f7f4 fa2e 	bl	8000574 <__aeabi_i2d>
 800c118:	a325      	add	r3, pc, #148	; (adr r3, 800c1b0 <turn45inR+0x488>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f7f4 fa93 	bl	8000648 <__aeabi_dmul>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4614      	mov	r4, r2
 800c128:	461d      	mov	r5, r3
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f4 fa33 	bl	8000598 <__aeabi_f2d>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	f7f4 f8cf 	bl	80002dc <__adddf3>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4610      	mov	r0, r2
 800c144:	4619      	mov	r1, r3
 800c146:	f7f4 fd57 	bl	8000bf8 <__aeabi_d2f>
 800c14a:	4603      	mov	r3, r0
 800c14c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c150:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c154:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c158:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c160:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c164:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c168:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c16c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c1a8 <turn45inR+0x480>
 800c170:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	eeb0 2a47 	vmov.f32	s4, s14
 800c17a:	eef0 1a65 	vmov.f32	s3, s11
 800c17e:	eeb0 1a46 	vmov.f32	s2, s12
 800c182:	eef0 0a66 	vmov.f32	s1, s13
 800c186:	ee00 3a10 	vmov	s0, r3
 800c18a:	f7f7 fd6d 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <turn45inR+0x484>)
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
	}

}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	ecbd 8b02 	vpop	{d8}
 800c19e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c1a2:	b004      	add	sp, #16
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	42340000 	.word	0x42340000
 800c1ac:	20000814 	.word	0x20000814
 800c1b0:	c022ec18 	.word	0xc022ec18
 800c1b4:	404fd1de 	.word	0x404fd1de

0800c1b8 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	b5b0      	push	{r4, r5, r7, lr}
 800c1bc:	ed2d 8b02 	vpush	{d8}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c1c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c1cc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c1d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	f040 80ac 	bne.w	800c332 <turn45inL+0x17a>
		highspeed_mode = 1;
 800c1da:	4bdb      	ldr	r3, [pc, #876]	; (800c548 <turn45inL+0x390>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c1f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c1f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c200:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c204:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c208:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c20c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800c558 <turn45inL+0x3a0>
 800c210:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	eeb0 2a47 	vmov.f32	s4, s14
 800c21a:	eef0 1a46 	vmov.f32	s3, s12
 800c21e:	eeb0 1a66 	vmov.f32	s2, s13
 800c222:	eddf 0acc 	vldr	s1, [pc, #816]	; 800c554 <turn45inL+0x39c>
 800c226:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800c54c <turn45inL+0x394>
 800c22a:	f7f7 fd1d 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800c22e:	2300      	movs	r3, #0
 800c230:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c232:	2302      	movs	r3, #2
 800c234:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c23a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c23e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c242:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c246:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c24a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c252:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c256:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c25a:	eddf 4abf 	vldr	s9, [pc, #764]	; 800c558 <turn45inL+0x3a0>
 800c25e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	eeb0 2a47 	vmov.f32	s4, s14
 800c268:	eef0 1a45 	vmov.f32	s3, s10
 800c26c:	eeb0 1a65 	vmov.f32	s2, s11
 800c270:	eef0 0a46 	vmov.f32	s1, s12
 800c274:	eeb0 0a66 	vmov.f32	s0, s13
 800c278:	f7f7 fcf6 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c27c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c280:	2b01      	cmp	r3, #1
 800c282:	d10c      	bne.n	800c29e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c288:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c28c:	eeb0 1a47 	vmov.f32	s2, s14
 800c290:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800c558 <turn45inL+0x3a0>
 800c294:	eeb0 0a67 	vmov.f32	s0, s15
 800c298:	f7f8 fc82 	bl	8004ba0 <mollifier_slalom_table>
 800c29c:	e013      	b.n	800c2c6 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c29e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c2aa:	eef0 2a66 	vmov.f32	s5, s13
 800c2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800c2b2:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800c554 <turn45inL+0x39c>
 800c2b6:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800c554 <turn45inL+0x39c>
 800c2ba:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800c558 <turn45inL+0x3a0>
 800c2be:	eeb0 0a67 	vmov.f32	s0, s15
 800c2c2:	f7f8 fb1d 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7f4 f961 	bl	8000598 <__aeabi_f2d>
 800c2d6:	a39a      	add	r3, pc, #616	; (adr r3, 800c540 <turn45inL+0x388>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 fffe 	bl	80002dc <__adddf3>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f7f4 fc86 	bl	8000bf8 <__aeabi_d2f>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c302:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c306:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c30a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800c558 <turn45inL+0x3a0>
 800c30e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	eeb0 2a47 	vmov.f32	s4, s14
 800c318:	eef0 1a46 	vmov.f32	s3, s12
 800c31c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800c554 <turn45inL+0x39c>
 800c320:	eef0 0a66 	vmov.f32	s1, s13
 800c324:	ee00 3a10 	vmov	s0, r3
 800c328:	f7f7 fc9e 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800c32c:	4b86      	ldr	r3, [pc, #536]	; (800c548 <turn45inL+0x390>)
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c332:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 809b 	bne.w	800c472 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c33c:	2300      	movs	r3, #0
 800c33e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c340:	2300      	movs	r3, #0
 800c342:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c344:	2302      	movs	r3, #2
 800c346:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c348:	2300      	movs	r3, #0
 800c34a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c34c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c350:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c354:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c358:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c35c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c368:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c36c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c370:	eddf 4a79 	vldr	s9, [pc, #484]	; 800c558 <turn45inL+0x3a0>
 800c374:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	eeb0 2a47 	vmov.f32	s4, s14
 800c37e:	eef0 1a45 	vmov.f32	s3, s10
 800c382:	eeb0 1a65 	vmov.f32	s2, s11
 800c386:	eef0 0a46 	vmov.f32	s1, s12
 800c38a:	eeb0 0a66 	vmov.f32	s0, s13
 800c38e:	f7f7 fc6b 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c392:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c396:	2b01      	cmp	r3, #1
 800c398:	d10c      	bne.n	800c3b4 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c39a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c39e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3a2:	eeb0 1a47 	vmov.f32	s2, s14
 800c3a6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c558 <turn45inL+0x3a0>
 800c3aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ae:	f7f8 fbf7 	bl	8004ba0 <mollifier_slalom_table>
 800c3b2:	e013      	b.n	800c3dc <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c3b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3bc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3c0:	eef0 2a66 	vmov.f32	s5, s13
 800c3c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c3c8:	eddf 1a62 	vldr	s3, [pc, #392]	; 800c554 <turn45inL+0x39c>
 800c3cc:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800c554 <turn45inL+0x39c>
 800c3d0:	eddf 0a61 	vldr	s1, [pc, #388]	; 800c558 <turn45inL+0x3a0>
 800c3d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c3d8:	f7f8 fa92 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c3e4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c3e8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c3ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c400:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c404:	eef0 7ae7 	vabs.f32	s15, s15
 800c408:	ee17 0a90 	vmov	r0, s15
 800c40c:	f7f4 f8c4 	bl	8000598 <__aeabi_f2d>
 800c410:	f04f 0200 	mov.w	r2, #0
 800c414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c418:	f7f4 fa40 	bl	800089c <__aeabi_ddiv>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4614      	mov	r4, r2
 800c422:	461d      	mov	r5, r3
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	4618      	mov	r0, r3
 800c428:	f7f4 f8b6 	bl	8000598 <__aeabi_f2d>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	4620      	mov	r0, r4
 800c432:	4629      	mov	r1, r5
 800c434:	f7f4 fa32 	bl	800089c <__aeabi_ddiv>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4610      	mov	r0, r2
 800c43e:	4619      	mov	r1, r3
 800c440:	f04f 0200 	mov.w	r2, #0
 800c444:	4b42      	ldr	r3, [pc, #264]	; (800c550 <turn45inL+0x398>)
 800c446:	f7f3 ff49 	bl	80002dc <__adddf3>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	f7f4 fbd1 	bl	8000bf8 <__aeabi_d2f>
 800c456:	4603      	mov	r3, r0
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	ee02 3a10 	vmov	s4, r3
 800c45e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c462:	ed97 1a01 	vldr	s2, [r7, #4]
 800c466:	eef0 0a68 	vmov.f32	s1, s17
 800c46a:	eeb0 0a48 	vmov.f32	s0, s16
 800c46e:	f7f7 fbfb 	bl	8003c68 <straight_table2>

	}
	if (test_mode >= 2) {
 800c472:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c476:	2b01      	cmp	r3, #1
 800c478:	f240 80cc 	bls.w	800c614 <turn45inL+0x45c>

		highspeed_mode = 1;
 800c47c:	4b32      	ldr	r3, [pc, #200]	; (800c548 <turn45inL+0x390>)
 800c47e:	2201      	movs	r2, #1
 800c480:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c482:	2301      	movs	r3, #1
 800c484:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c486:	2300      	movs	r3, #0
 800c488:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c48e:	2300      	movs	r3, #0
 800c490:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c492:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c496:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c49a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c49e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4aa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c4ae:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800c558 <turn45inL+0x3a0>
 800c4b2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	eeb0 2a47 	vmov.f32	s4, s14
 800c4bc:	eef0 1a46 	vmov.f32	s3, s12
 800c4c0:	eeb0 1a66 	vmov.f32	s2, s13
 800c4c4:	eddf 0a23 	vldr	s1, [pc, #140]	; 800c554 <turn45inL+0x39c>
 800c4c8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c54c <turn45inL+0x394>
 800c4cc:	f7f7 fbcc 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4d8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4e0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4e4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c4f8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4fc:	eddf 4a16 	vldr	s9, [pc, #88]	; 800c558 <turn45inL+0x3a0>
 800c500:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	eeb0 2a47 	vmov.f32	s4, s14
 800c50a:	eef0 1a45 	vmov.f32	s3, s10
 800c50e:	eeb0 1a65 	vmov.f32	s2, s11
 800c512:	eef0 0a46 	vmov.f32	s1, s12
 800c516:	eeb0 0a66 	vmov.f32	s0, s13
 800c51a:	f7f7 fba5 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c51e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c522:	2b01      	cmp	r3, #1
 800c524:	d11a      	bne.n	800c55c <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c526:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c52a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c52e:	eeb0 1a47 	vmov.f32	s2, s14
 800c532:	eddf 0a09 	vldr	s1, [pc, #36]	; 800c558 <turn45inL+0x3a0>
 800c536:	eeb0 0a67 	vmov.f32	s0, s15
 800c53a:	f7f8 fb31 	bl	8004ba0 <mollifier_slalom_table>
 800c53e:	e021      	b.n	800c584 <turn45inL+0x3cc>
 800c540:	c022ec18 	.word	0xc022ec18
 800c544:	405fd1de 	.word	0x405fd1de
 800c548:	20000814 	.word	0x20000814
 800c54c:	42cd0000 	.word	0x42cd0000
 800c550:	408f4000 	.word	0x408f4000
 800c554:	00000000 	.word	0x00000000
 800c558:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c55c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c560:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c564:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c568:	eef0 2a66 	vmov.f32	s5, s13
 800c56c:	eeb0 2a47 	vmov.f32	s4, s14
 800c570:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c554 <turn45inL+0x39c>
 800c574:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c554 <turn45inL+0x39c>
 800c578:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c558 <turn45inL+0x3a0>
 800c57c:	eeb0 0a67 	vmov.f32	s0, s15
 800c580:	f7f8 f9be 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c584:	2300      	movs	r3, #0
 800c586:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c58c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c590:	3b02      	subs	r3, #2
 800c592:	4618      	mov	r0, r3
 800c594:	f7f3 ffee 	bl	8000574 <__aeabi_i2d>
 800c598:	a325      	add	r3, pc, #148	; (adr r3, 800c630 <turn45inL+0x478>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f4 f853 	bl	8000648 <__aeabi_dmul>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4614      	mov	r4, r2
 800c5a8:	461d      	mov	r5, r3
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7f3 fff3 	bl	8000598 <__aeabi_f2d>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7f3 fe8f 	bl	80002dc <__adddf3>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	4610      	mov	r0, r2
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f7f4 fb17 	bl	8000bf8 <__aeabi_d2f>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c5d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5e4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5e8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5ec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c628 <turn45inL+0x470>
 800c5f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	eeb0 2a47 	vmov.f32	s4, s14
 800c5fa:	eef0 1a65 	vmov.f32	s3, s11
 800c5fe:	eeb0 1a46 	vmov.f32	s2, s12
 800c602:	eef0 0a66 	vmov.f32	s1, s13
 800c606:	ee00 3a10 	vmov	s0, r3
 800c60a:	f7f7 fb2d 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800c60e:	4b07      	ldr	r3, [pc, #28]	; (800c62c <turn45inL+0x474>)
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
	}

}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	ecbd 8b02 	vpop	{d8}
 800c61e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c622:	b004      	add	sp, #16
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	42340000 	.word	0x42340000
 800c62c:	20000814 	.word	0x20000814
 800c630:	c022ec18 	.word	0xc022ec18
 800c634:	404fd1de 	.word	0x404fd1de

0800c638 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c638:	b084      	sub	sp, #16
 800c63a:	b5b0      	push	{r4, r5, r7, lr}
 800c63c:	ed2d 8b02 	vpush	{d8}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c64c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c650:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c654:	2b01      	cmp	r3, #1
 800c656:	f040 80ae 	bne.w	800c7b6 <turn135inR+0x17e>
		highspeed_mode = 1;
 800c65a:	4bdd      	ldr	r3, [pc, #884]	; (800c9d0 <turn135inR+0x398>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c660:	2301      	movs	r3, #1
 800c662:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c664:	2300      	movs	r3, #0
 800c666:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c670:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c674:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c678:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c67c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c680:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c684:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c688:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c68c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c9d4 <turn135inR+0x39c>
 800c690:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	eeb0 2a47 	vmov.f32	s4, s14
 800c69a:	eef0 1a46 	vmov.f32	s3, s12
 800c69e:	eeb0 1a66 	vmov.f32	s2, s13
 800c6a2:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c9e0 <turn135inR+0x3a8>
 800c6a6:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c9d8 <turn135inR+0x3a0>
 800c6aa:	f7f7 fadd 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6be:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6c2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6d2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6d6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6da:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c9d4 <turn135inR+0x39c>
 800c6de:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	eeb0 2a47 	vmov.f32	s4, s14
 800c6e8:	eef0 1a45 	vmov.f32	s3, s10
 800c6ec:	eeb0 1a65 	vmov.f32	s2, s11
 800c6f0:	eef0 0a46 	vmov.f32	s1, s12
 800c6f4:	eeb0 0a66 	vmov.f32	s0, s13
 800c6f8:	f7f7 fab6 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c6fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c700:	2b01      	cmp	r3, #1
 800c702:	d10c      	bne.n	800c71e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c704:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c708:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c70c:	eeb0 1a47 	vmov.f32	s2, s14
 800c710:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c9e4 <turn135inR+0x3ac>
 800c714:	eeb0 0a67 	vmov.f32	s0, s15
 800c718:	f7f8 fa42 	bl	8004ba0 <mollifier_slalom_table>
 800c71c:	e015      	b.n	800c74a <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c71e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c722:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c726:	eef1 7a67 	vneg.f32	s15, s15
 800c72a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c72e:	eef0 2a66 	vmov.f32	s5, s13
 800c732:	eeb0 2a67 	vmov.f32	s4, s15
 800c736:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c9e0 <turn135inR+0x3a8>
 800c73a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c9e0 <turn135inR+0x3a8>
 800c73e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c9e4 <turn135inR+0x3ac>
 800c742:	eeb0 0a47 	vmov.f32	s0, s14
 800c746:	f7f8 f8db 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	4618      	mov	r0, r3
 800c756:	f7f3 ff1f 	bl	8000598 <__aeabi_f2d>
 800c75a:	a39b      	add	r3, pc, #620	; (adr r3, 800c9c8 <turn135inR+0x390>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	f7f3 fdbc 	bl	80002dc <__adddf3>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	4610      	mov	r0, r2
 800c76a:	4619      	mov	r1, r3
 800c76c:	f7f4 fa44 	bl	8000bf8 <__aeabi_d2f>
 800c770:	4603      	mov	r3, r0
 800c772:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c776:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c77a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c77e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c782:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c786:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c78a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c78e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c9d4 <turn135inR+0x39c>
 800c792:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	eeb0 2a47 	vmov.f32	s4, s14
 800c79c:	eef0 1a46 	vmov.f32	s3, s12
 800c7a0:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c9e0 <turn135inR+0x3a8>
 800c7a4:	eef0 0a66 	vmov.f32	s1, s13
 800c7a8:	ee00 3a10 	vmov	s0, r3
 800c7ac:	f7f7 fa5c 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800c7b0:	4b87      	ldr	r3, [pc, #540]	; (800c9d0 <turn135inR+0x398>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c7b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f040 809d 	bne.w	800c8fa <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c7dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c7f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7f4:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c9d4 <turn135inR+0x39c>
 800c7f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	eeb0 2a47 	vmov.f32	s4, s14
 800c802:	eef0 1a45 	vmov.f32	s3, s10
 800c806:	eeb0 1a65 	vmov.f32	s2, s11
 800c80a:	eef0 0a46 	vmov.f32	s1, s12
 800c80e:	eeb0 0a66 	vmov.f32	s0, s13
 800c812:	f7f7 fa29 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c816:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d10c      	bne.n	800c838 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c81e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c822:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c826:	eeb0 1a47 	vmov.f32	s2, s14
 800c82a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c9e4 <turn135inR+0x3ac>
 800c82e:	eeb0 0a67 	vmov.f32	s0, s15
 800c832:	f7f8 f9b5 	bl	8004ba0 <mollifier_slalom_table>
 800c836:	e015      	b.n	800c864 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c838:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c83c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c840:	eef1 7a67 	vneg.f32	s15, s15
 800c844:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c848:	eef0 2a66 	vmov.f32	s5, s13
 800c84c:	eeb0 2a67 	vmov.f32	s4, s15
 800c850:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c9e0 <turn135inR+0x3a8>
 800c854:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c9e0 <turn135inR+0x3a8>
 800c858:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c9e4 <turn135inR+0x3ac>
 800c85c:	eeb0 0a47 	vmov.f32	s0, s14
 800c860:	f7f8 f84e 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c864:	2303      	movs	r3, #3
 800c866:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c86c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c870:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c874:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c880:	edd7 7a01 	vldr	s15, [r7, #4]
 800c884:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c88c:	eef0 7ae7 	vabs.f32	s15, s15
 800c890:	ee17 0a90 	vmov	r0, s15
 800c894:	f7f3 fe80 	bl	8000598 <__aeabi_f2d>
 800c898:	f04f 0200 	mov.w	r2, #0
 800c89c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8a0:	f7f3 fffc 	bl	800089c <__aeabi_ddiv>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4614      	mov	r4, r2
 800c8aa:	461d      	mov	r5, r3
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f3 fe72 	bl	8000598 <__aeabi_f2d>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 ffee 	bl	800089c <__aeabi_ddiv>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f04f 0200 	mov.w	r2, #0
 800c8cc:	4b43      	ldr	r3, [pc, #268]	; (800c9dc <turn135inR+0x3a4>)
 800c8ce:	f7f3 fd05 	bl	80002dc <__adddf3>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f7f4 f98d 	bl	8000bf8 <__aeabi_d2f>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	ee02 3a10 	vmov	s4, r3
 800c8e6:	edd7 1a01 	vldr	s3, [r7, #4]
 800c8ea:	ed97 1a01 	vldr	s2, [r7, #4]
 800c8ee:	eef0 0a68 	vmov.f32	s1, s17
 800c8f2:	eeb0 0a48 	vmov.f32	s0, s16
 800c8f6:	f7f7 f9b7 	bl	8003c68 <straight_table2>

	}
	if (test_mode >= 2) {
 800c8fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	f240 80d0 	bls.w	800caa4 <turn135inR+0x46c>

		highspeed_mode = 1;
 800c904:	4b32      	ldr	r3, [pc, #200]	; (800c9d0 <turn135inR+0x398>)
 800c906:	2201      	movs	r2, #1
 800c908:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c90a:	2301      	movs	r3, #1
 800c90c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c90e:	2300      	movs	r3, #0
 800c910:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c916:	2300      	movs	r3, #0
 800c918:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c91a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c91e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c922:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c926:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c92a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c92e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c932:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c936:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c9d4 <turn135inR+0x39c>
 800c93a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	eeb0 2a47 	vmov.f32	s4, s14
 800c944:	eef0 1a46 	vmov.f32	s3, s12
 800c948:	eeb0 1a66 	vmov.f32	s2, s13
 800c94c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c9e0 <turn135inR+0x3a8>
 800c950:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c9d8 <turn135inR+0x3a0>
 800c954:	f7f7 f988 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800c958:	2300      	movs	r3, #0
 800c95a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c95c:	2302      	movs	r3, #2
 800c95e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c960:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c964:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c968:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c96c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c970:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c974:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c97c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c980:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c984:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c9d4 <turn135inR+0x39c>
 800c988:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	eeb0 2a47 	vmov.f32	s4, s14
 800c992:	eef0 1a45 	vmov.f32	s3, s10
 800c996:	eeb0 1a65 	vmov.f32	s2, s11
 800c99a:	eef0 0a46 	vmov.f32	s1, s12
 800c99e:	eeb0 0a66 	vmov.f32	s0, s13
 800c9a2:	f7f7 f961 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800c9a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d11c      	bne.n	800c9e8 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c9ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9b6:	eeb0 1a47 	vmov.f32	s2, s14
 800c9ba:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c9e4 <turn135inR+0x3ac>
 800c9be:	eeb0 0a67 	vmov.f32	s0, s15
 800c9c2:	f7f8 f8ed 	bl	8004ba0 <mollifier_slalom_table>
 800c9c6:	e025      	b.n	800ca14 <turn135inR+0x3dc>
 800c9c8:	c022ec18 	.word	0xc022ec18
 800c9cc:	405fd1de 	.word	0x405fd1de
 800c9d0:	20000814 	.word	0x20000814
 800c9d4:	42340000 	.word	0x42340000
 800c9d8:	42cd0000 	.word	0x42cd0000
 800c9dc:	408f4000 	.word	0x408f4000
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c9e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c9f0:	eef1 7a67 	vneg.f32	s15, s15
 800c9f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c9f8:	eef0 2a66 	vmov.f32	s5, s13
 800c9fc:	eeb0 2a67 	vmov.f32	s4, s15
 800ca00:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c9e0 <turn135inR+0x3a8>
 800ca04:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c9e0 <turn135inR+0x3a8>
 800ca08:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c9e4 <turn135inR+0x3ac>
 800ca0c:	eeb0 0a47 	vmov.f32	s0, s14
 800ca10:	f7f7 ff76 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ca14:	2300      	movs	r3, #0
 800ca16:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca20:	3b02      	subs	r3, #2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f3 fda6 	bl	8000574 <__aeabi_i2d>
 800ca28:	a325      	add	r3, pc, #148	; (adr r3, 800cac0 <turn135inR+0x488>)
 800ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2e:	f7f3 fe0b 	bl	8000648 <__aeabi_dmul>
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	4614      	mov	r4, r2
 800ca38:	461d      	mov	r5, r3
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f3 fdab 	bl	8000598 <__aeabi_f2d>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4620      	mov	r0, r4
 800ca48:	4629      	mov	r1, r5
 800ca4a:	f7f3 fc47 	bl	80002dc <__adddf3>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	f7f4 f8cf 	bl	8000bf8 <__aeabi_d2f>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ca60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca74:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca78:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca7c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800cab8 <turn135inR+0x480>
 800ca80:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	eeb0 2a47 	vmov.f32	s4, s14
 800ca8a:	eef0 1a65 	vmov.f32	s3, s11
 800ca8e:	eeb0 1a46 	vmov.f32	s2, s12
 800ca92:	eef0 0a66 	vmov.f32	s1, s13
 800ca96:	ee00 3a10 	vmov	s0, r3
 800ca9a:	f7f7 f8e5 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <turn135inR+0x484>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]
	}

}
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	ecbd 8b02 	vpop	{d8}
 800caae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cab2:	b004      	add	sp, #16
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	42340000 	.word	0x42340000
 800cabc:	20000814 	.word	0x20000814
 800cac0:	c022ec18 	.word	0xc022ec18
 800cac4:	404fd1de 	.word	0x404fd1de

0800cac8 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800cac8:	b084      	sub	sp, #16
 800caca:	b5b0      	push	{r4, r5, r7, lr}
 800cacc:	ed2d 8b02 	vpush	{d8}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cadc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cae0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	f040 80ac 	bne.w	800cc42 <turn135inL+0x17a>
		highspeed_mode = 1;
 800caea:	4bdb      	ldr	r3, [pc, #876]	; (800ce58 <turn135inL+0x390>)
 800caec:	2201      	movs	r2, #1
 800caee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800caf0:	2301      	movs	r3, #1
 800caf2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cb00:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb14:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cb18:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cb1c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800ce5c <turn135inL+0x394>
 800cb20:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	eeb0 2a47 	vmov.f32	s4, s14
 800cb2a:	eef0 1a46 	vmov.f32	s3, s12
 800cb2e:	eeb0 1a66 	vmov.f32	s2, s13
 800cb32:	eddf 0acd 	vldr	s1, [pc, #820]	; 800ce68 <turn135inL+0x3a0>
 800cb36:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800ce60 <turn135inL+0x398>
 800cb3a:	f7f7 f895 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cb42:	2302      	movs	r3, #2
 800cb44:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb46:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb4a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb4e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb52:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb62:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb66:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb6a:	eddf 4abc 	vldr	s9, [pc, #752]	; 800ce5c <turn135inL+0x394>
 800cb6e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	eeb0 2a47 	vmov.f32	s4, s14
 800cb78:	eef0 1a45 	vmov.f32	s3, s10
 800cb7c:	eeb0 1a65 	vmov.f32	s2, s11
 800cb80:	eef0 0a46 	vmov.f32	s1, s12
 800cb84:	eeb0 0a66 	vmov.f32	s0, s13
 800cb88:	f7f7 f86e 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800cb8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d10c      	bne.n	800cbae <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cb94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb98:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb9c:	eeb0 1a47 	vmov.f32	s2, s14
 800cba0:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800ce6c <turn135inL+0x3a4>
 800cba4:	eeb0 0a67 	vmov.f32	s0, s15
 800cba8:	f7f7 fffa 	bl	8004ba0 <mollifier_slalom_table>
 800cbac:	e013      	b.n	800cbd6 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cbae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbb2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbb6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cbba:	eef0 2a66 	vmov.f32	s5, s13
 800cbbe:	eeb0 2a47 	vmov.f32	s4, s14
 800cbc2:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800ce68 <turn135inL+0x3a0>
 800cbc6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800ce68 <turn135inL+0x3a0>
 800cbca:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800ce6c <turn135inL+0x3a4>
 800cbce:	eeb0 0a67 	vmov.f32	s0, s15
 800cbd2:	f7f7 fe95 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7f3 fcd9 	bl	8000598 <__aeabi_f2d>
 800cbe6:	a39a      	add	r3, pc, #616	; (adr r3, 800ce50 <turn135inL+0x388>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f3 fb76 	bl	80002dc <__adddf3>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	f7f3 fffe 	bl	8000bf8 <__aeabi_d2f>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc02:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc12:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc16:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cc1a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800ce5c <turn135inL+0x394>
 800cc1e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	eeb0 2a47 	vmov.f32	s4, s14
 800cc28:	eef0 1a46 	vmov.f32	s3, s12
 800cc2c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800ce68 <turn135inL+0x3a0>
 800cc30:	eef0 0a66 	vmov.f32	s1, s13
 800cc34:	ee00 3a10 	vmov	s0, r3
 800cc38:	f7f7 f816 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800cc3c:	4b86      	ldr	r3, [pc, #536]	; (800ce58 <turn135inL+0x390>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800cc42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 809b 	bne.w	800cd82 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800cc54:	2302      	movs	r3, #2
 800cc56:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc68:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc7c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc80:	eddf 4a76 	vldr	s9, [pc, #472]	; 800ce5c <turn135inL+0x394>
 800cc84:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	eeb0 2a47 	vmov.f32	s4, s14
 800cc8e:	eef0 1a45 	vmov.f32	s3, s10
 800cc92:	eeb0 1a65 	vmov.f32	s2, s11
 800cc96:	eef0 0a46 	vmov.f32	s1, s12
 800cc9a:	eeb0 0a66 	vmov.f32	s0, s13
 800cc9e:	f7f6 ffe3 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800cca2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d10c      	bne.n	800ccc4 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ccaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccb2:	eeb0 1a47 	vmov.f32	s2, s14
 800ccb6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800ce6c <turn135inL+0x3a4>
 800ccba:	eeb0 0a67 	vmov.f32	s0, s15
 800ccbe:	f7f7 ff6f 	bl	8004ba0 <mollifier_slalom_table>
 800ccc2:	e013      	b.n	800ccec <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ccc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cccc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ccd0:	eef0 2a66 	vmov.f32	s5, s13
 800ccd4:	eeb0 2a47 	vmov.f32	s4, s14
 800ccd8:	eddf 1a63 	vldr	s3, [pc, #396]	; 800ce68 <turn135inL+0x3a0>
 800ccdc:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800ce68 <turn135inL+0x3a0>
 800cce0:	eddf 0a62 	vldr	s1, [pc, #392]	; 800ce6c <turn135inL+0x3a4>
 800cce4:	eeb0 0a67 	vmov.f32	s0, s15
 800cce8:	f7f7 fe0a 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ccf4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ccf8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ccfc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd08:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd14:	eef0 7ae7 	vabs.f32	s15, s15
 800cd18:	ee17 0a90 	vmov	r0, s15
 800cd1c:	f7f3 fc3c 	bl	8000598 <__aeabi_f2d>
 800cd20:	f04f 0200 	mov.w	r2, #0
 800cd24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd28:	f7f3 fdb8 	bl	800089c <__aeabi_ddiv>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4614      	mov	r4, r2
 800cd32:	461d      	mov	r5, r3
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7f3 fc2e 	bl	8000598 <__aeabi_f2d>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	4620      	mov	r0, r4
 800cd42:	4629      	mov	r1, r5
 800cd44:	f7f3 fdaa 	bl	800089c <__aeabi_ddiv>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4619      	mov	r1, r3
 800cd50:	f04f 0200 	mov.w	r2, #0
 800cd54:	4b43      	ldr	r3, [pc, #268]	; (800ce64 <turn135inL+0x39c>)
 800cd56:	f7f3 fac1 	bl	80002dc <__adddf3>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cd5e:	4610      	mov	r0, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	f7f3 ff49 	bl	8000bf8 <__aeabi_d2f>
 800cd66:	4603      	mov	r3, r0
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	ee02 3a10 	vmov	s4, r3
 800cd6e:	edd7 1a01 	vldr	s3, [r7, #4]
 800cd72:	ed97 1a01 	vldr	s2, [r7, #4]
 800cd76:	eef0 0a68 	vmov.f32	s1, s17
 800cd7a:	eeb0 0a48 	vmov.f32	s0, s16
 800cd7e:	f7f6 ff73 	bl	8003c68 <straight_table2>

	}
	if (test_mode >= 2) {
 800cd82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	f240 80ce 	bls.w	800cf28 <turn135inL+0x460>

		highspeed_mode = 1;
 800cd8c:	4b32      	ldr	r3, [pc, #200]	; (800ce58 <turn135inL+0x390>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800cd92:	2301      	movs	r3, #1
 800cd94:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cda2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cda6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cdba:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cdbe:	eddf 5a27 	vldr	s11, [pc, #156]	; 800ce5c <turn135inL+0x394>
 800cdc2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	eeb0 2a47 	vmov.f32	s4, s14
 800cdcc:	eef0 1a46 	vmov.f32	s3, s12
 800cdd0:	eeb0 1a66 	vmov.f32	s2, s13
 800cdd4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800ce68 <turn135inL+0x3a0>
 800cdd8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800ce60 <turn135inL+0x398>
 800cddc:	f7f6 ff44 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cde4:	2302      	movs	r3, #2
 800cde6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cde8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdf0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdf4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce04:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce08:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce0c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800ce5c <turn135inL+0x394>
 800ce10:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	eeb0 2a47 	vmov.f32	s4, s14
 800ce1a:	eef0 1a45 	vmov.f32	s3, s10
 800ce1e:	eeb0 1a65 	vmov.f32	s2, s11
 800ce22:	eef0 0a46 	vmov.f32	s1, s12
 800ce26:	eeb0 0a66 	vmov.f32	s0, s13
 800ce2a:	f7f6 ff1d 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800ce2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d11c      	bne.n	800ce70 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ce36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce3e:	eeb0 1a47 	vmov.f32	s2, s14
 800ce42:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ce6c <turn135inL+0x3a4>
 800ce46:	eeb0 0a67 	vmov.f32	s0, s15
 800ce4a:	f7f7 fea9 	bl	8004ba0 <mollifier_slalom_table>
 800ce4e:	e023      	b.n	800ce98 <turn135inL+0x3d0>
 800ce50:	c022ec18 	.word	0xc022ec18
 800ce54:	405fd1de 	.word	0x405fd1de
 800ce58:	20000814 	.word	0x20000814
 800ce5c:	42340000 	.word	0x42340000
 800ce60:	42cd0000 	.word	0x42cd0000
 800ce64:	408f4000 	.word	0x408f4000
 800ce68:	00000000 	.word	0x00000000
 800ce6c:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce78:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce7c:	eef0 2a66 	vmov.f32	s5, s13
 800ce80:	eeb0 2a47 	vmov.f32	s4, s14
 800ce84:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ce68 <turn135inL+0x3a0>
 800ce88:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ce68 <turn135inL+0x3a0>
 800ce8c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ce6c <turn135inL+0x3a4>
 800ce90:	eeb0 0a67 	vmov.f32	s0, s15
 800ce94:	f7f7 fd34 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cea0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cea4:	3b02      	subs	r3, #2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f3 fb64 	bl	8000574 <__aeabi_i2d>
 800ceac:	a326      	add	r3, pc, #152	; (adr r3, 800cf48 <turn135inL+0x480>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 fbc9 	bl	8000648 <__aeabi_dmul>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4614      	mov	r4, r2
 800cebc:	461d      	mov	r5, r3
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f3 fb69 	bl	8000598 <__aeabi_f2d>
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	4620      	mov	r0, r4
 800cecc:	4629      	mov	r1, r5
 800cece:	f7f3 fa05 	bl	80002dc <__adddf3>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	f7f3 fe8d 	bl	8000bf8 <__aeabi_d2f>
 800cede:	4603      	mov	r3, r0
 800cee0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cee4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cee8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ceec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cef0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cef8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cefc:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf00:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800cf40 <turn135inL+0x478>
 800cf04:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	eeb0 2a47 	vmov.f32	s4, s14
 800cf0e:	eef0 1a65 	vmov.f32	s3, s11
 800cf12:	eeb0 1a46 	vmov.f32	s2, s12
 800cf16:	eef0 0a66 	vmov.f32	s1, s13
 800cf1a:	ee00 3a10 	vmov	s0, r3
 800cf1e:	f7f6 fea3 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800cf22:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <turn135inL+0x47c>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
	}

}
 800cf28:	bf00      	nop
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	ecbd 8b02 	vpop	{d8}
 800cf32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cf36:	b004      	add	sp, #16
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	f3af 8000 	nop.w
 800cf40:	42340000 	.word	0x42340000
 800cf44:	20000814 	.word	0x20000814
 800cf48:	c022ec18 	.word	0xc022ec18
 800cf4c:	404fd1de 	.word	0x404fd1de

0800cf50 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cf50:	b084      	sub	sp, #16
 800cf52:	b5b0      	push	{r4, r5, r7, lr}
 800cf54:	ed2d 8b02 	vpush	{d8}
 800cf58:	b084      	sub	sp, #16
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cf60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf64:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800cf68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	f040 80a5 	bne.w	800d0bc <turn45outR+0x16c>
		highspeed_mode = 1;
 800cf72:	4be9      	ldr	r3, [pc, #932]	; (800d318 <turn45outR+0x3c8>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cf88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cf8c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf9c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cfa0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cfa4:	eddf 5add 	vldr	s11, [pc, #884]	; 800d31c <turn45outR+0x3cc>
 800cfa8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	eeb0 2a47 	vmov.f32	s4, s14
 800cfb2:	eef0 1a46 	vmov.f32	s3, s12
 800cfb6:	eeb0 1a66 	vmov.f32	s2, s13
 800cfba:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d320 <turn45outR+0x3d0>
 800cfbe:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d324 <turn45outR+0x3d4>
 800cfc2:	f7f6 fe51 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cfce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cfd2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfd6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cfda:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfe2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cfee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cff2:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d31c <turn45outR+0x3cc>
 800cff6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	eeb0 2a47 	vmov.f32	s4, s14
 800d000:	eef0 1a45 	vmov.f32	s3, s10
 800d004:	eeb0 1a65 	vmov.f32	s2, s11
 800d008:	eef0 0a46 	vmov.f32	s1, s12
 800d00c:	eeb0 0a66 	vmov.f32	s0, s13
 800d010:	f7f6 fe2a 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d014:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d10c      	bne.n	800d036 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d01c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d020:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d024:	eeb0 1a47 	vmov.f32	s2, s14
 800d028:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d328 <turn45outR+0x3d8>
 800d02c:	eeb0 0a67 	vmov.f32	s0, s15
 800d030:	f7f7 fdb6 	bl	8004ba0 <mollifier_slalom_table>
 800d034:	e015      	b.n	800d062 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d036:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d03a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d03e:	eef1 7a67 	vneg.f32	s15, s15
 800d042:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d046:	eef0 2a66 	vmov.f32	s5, s13
 800d04a:	eeb0 2a67 	vmov.f32	s4, s15
 800d04e:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d320 <turn45outR+0x3d0>
 800d052:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d320 <turn45outR+0x3d0>
 800d056:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d328 <turn45outR+0x3d8>
 800d05a:	eeb0 0a47 	vmov.f32	s0, s14
 800d05e:	f7f7 fc4f 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d062:	2300      	movs	r3, #0
 800d064:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d06a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d06e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d32c <turn45outR+0x3dc>
 800d072:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d076:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d07a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d07e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d082:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d08a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d08e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d092:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d31c <turn45outR+0x3cc>
 800d096:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	eeb0 2a47 	vmov.f32	s4, s14
 800d0a0:	eef0 1a65 	vmov.f32	s3, s11
 800d0a4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d320 <turn45outR+0x3d0>
 800d0a8:	eef0 0a46 	vmov.f32	s1, s12
 800d0ac:	eeb0 0a66 	vmov.f32	s0, s13
 800d0b0:	f7f6 fdda 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800d0b4:	4b98      	ldr	r3, [pc, #608]	; (800d318 <turn45outR+0x3c8>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d0ba:	e123      	b.n	800d304 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800d0bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	f240 8082 	bls.w	800d1ca <turn45outR+0x27a>
		highspeed_mode = 1;
 800d0c6:	4b94      	ldr	r3, [pc, #592]	; (800d318 <turn45outR+0x3c8>)
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0dc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d0e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0e4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d0e8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0f8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0fc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d100:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d31c <turn45outR+0x3cc>
 800d104:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	eeb0 2a47 	vmov.f32	s4, s14
 800d10e:	eef0 1a45 	vmov.f32	s3, s10
 800d112:	eeb0 1a65 	vmov.f32	s2, s11
 800d116:	eef0 0a46 	vmov.f32	s1, s12
 800d11a:	eeb0 0a66 	vmov.f32	s0, s13
 800d11e:	f7f6 fda3 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d122:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d126:	2b01      	cmp	r3, #1
 800d128:	d10c      	bne.n	800d144 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d12a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d12e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d132:	eeb0 1a47 	vmov.f32	s2, s14
 800d136:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d328 <turn45outR+0x3d8>
 800d13a:	eeb0 0a67 	vmov.f32	s0, s15
 800d13e:	f7f7 fd2f 	bl	8004ba0 <mollifier_slalom_table>
 800d142:	e015      	b.n	800d170 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d144:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d148:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d14c:	eef1 7a67 	vneg.f32	s15, s15
 800d150:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d154:	eef0 2a66 	vmov.f32	s5, s13
 800d158:	eeb0 2a67 	vmov.f32	s4, s15
 800d15c:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d320 <turn45outR+0x3d0>
 800d160:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d320 <turn45outR+0x3d0>
 800d164:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d328 <turn45outR+0x3d8>
 800d168:	eeb0 0a47 	vmov.f32	s0, s14
 800d16c:	f7f7 fbc8 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800d170:	2300      	movs	r3, #0
 800d172:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d178:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d17c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d32c <turn45outR+0x3dc>
 800d180:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d184:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d188:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d18c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d190:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d194:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d198:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d19c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1a0:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d31c <turn45outR+0x3cc>
 800d1a4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	eeb0 2a47 	vmov.f32	s4, s14
 800d1ae:	eef0 1a65 	vmov.f32	s3, s11
 800d1b2:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d320 <turn45outR+0x3d0>
 800d1b6:	eef0 0a46 	vmov.f32	s1, s12
 800d1ba:	eeb0 0a66 	vmov.f32	s0, s13
 800d1be:	f7f6 fd53 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800d1c2:	4b55      	ldr	r3, [pc, #340]	; (800d318 <turn45outR+0x3c8>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	701a      	strb	r2, [r3, #0]
}
 800d1c8:	e09c      	b.n	800d304 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1fe:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d31c <turn45outR+0x3cc>
 800d202:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	eeb0 2a47 	vmov.f32	s4, s14
 800d20c:	eef0 1a45 	vmov.f32	s3, s10
 800d210:	eeb0 1a65 	vmov.f32	s2, s11
 800d214:	eef0 0a46 	vmov.f32	s1, s12
 800d218:	eeb0 0a66 	vmov.f32	s0, s13
 800d21c:	f7f6 fd24 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d220:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d224:	2b01      	cmp	r3, #1
 800d226:	d10c      	bne.n	800d242 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d22c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d230:	eeb0 1a47 	vmov.f32	s2, s14
 800d234:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d328 <turn45outR+0x3d8>
 800d238:	eeb0 0a67 	vmov.f32	s0, s15
 800d23c:	f7f7 fcb0 	bl	8004ba0 <mollifier_slalom_table>
 800d240:	e015      	b.n	800d26e <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d242:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d246:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d24a:	eef1 7a67 	vneg.f32	s15, s15
 800d24e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d252:	eef0 2a66 	vmov.f32	s5, s13
 800d256:	eeb0 2a67 	vmov.f32	s4, s15
 800d25a:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d320 <turn45outR+0x3d0>
 800d25e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d320 <turn45outR+0x3d0>
 800d262:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d328 <turn45outR+0x3d8>
 800d266:	eeb0 0a47 	vmov.f32	s0, s14
 800d26a:	f7f7 fb49 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d26e:	2301      	movs	r3, #1
 800d270:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d276:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d27a:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d27e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d282:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d28a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d28e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d292:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d296:	eef0 7ae7 	vabs.f32	s15, s15
 800d29a:	ee17 0a90 	vmov	r0, s15
 800d29e:	f7f3 f97b 	bl	8000598 <__aeabi_f2d>
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d2aa:	f7f3 faf7 	bl	800089c <__aeabi_ddiv>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	461d      	mov	r5, r3
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f3 f96d 	bl	8000598 <__aeabi_f2d>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f3 fae9 	bl	800089c <__aeabi_ddiv>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	f04f 0200 	mov.w	r2, #0
 800d2d6:	4b16      	ldr	r3, [pc, #88]	; (800d330 <turn45outR+0x3e0>)
 800d2d8:	f7f3 f800 	bl	80002dc <__adddf3>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f7f3 fc88 	bl	8000bf8 <__aeabi_d2f>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	ee02 3a10 	vmov	s4, r3
 800d2f0:	edd7 1a01 	vldr	s3, [r7, #4]
 800d2f4:	ed97 1a01 	vldr	s2, [r7, #4]
 800d2f8:	eef0 0a68 	vmov.f32	s1, s17
 800d2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800d300:	f7f6 fcb2 	bl	8003c68 <straight_table2>
}
 800d304:	bf00      	nop
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	ecbd 8b02 	vpop	{d8}
 800d30e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d312:	b004      	add	sp, #16
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	20000814 	.word	0x20000814
 800d31c:	42340000 	.word	0x42340000
 800d320:	00000000 	.word	0x00000000
 800d324:	42c4477b 	.word	0x42c4477b
 800d328:	c2340000 	.word	0xc2340000
 800d32c:	42b40000 	.word	0x42b40000
 800d330:	408f4000 	.word	0x408f4000

0800d334 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d334:	b084      	sub	sp, #16
 800d336:	b5b0      	push	{r4, r5, r7, lr}
 800d338:	ed2d 8b02 	vpush	{d8}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d348:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d34c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d350:	2b01      	cmp	r3, #1
 800d352:	f040 80a3 	bne.w	800d49c <turn45outL+0x168>
			highspeed_mode = 1;
 800d356:	4be5      	ldr	r3, [pc, #916]	; (800d6ec <turn45outL+0x3b8>)
 800d358:	2201      	movs	r2, #1
 800d35a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d360:	2300      	movs	r3, #0
 800d362:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d368:	2300      	movs	r3, #0
 800d36a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d36c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d370:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d378:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d37c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d380:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d384:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d388:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d6f0 <turn45outL+0x3bc>
 800d38c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	eeb0 2a47 	vmov.f32	s4, s14
 800d396:	eef0 1a46 	vmov.f32	s3, s12
 800d39a:	eeb0 1a66 	vmov.f32	s2, s13
 800d39e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d6f4 <turn45outL+0x3c0>
 800d3a2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d6f8 <turn45outL+0x3c4>
 800d3a6:	f7f6 fc5f 	bl	8003c68 <straight_table2>
			wallmode.WallControlMode=0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800d3ae:	2304      	movs	r3, #4
 800d3b0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d3b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3ba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d3be:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d3d2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3d6:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d6f0 <turn45outL+0x3bc>
 800d3da:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	eeb0 2a47 	vmov.f32	s4, s14
 800d3e4:	eef0 1a45 	vmov.f32	s3, s10
 800d3e8:	eeb0 1a65 	vmov.f32	s2, s11
 800d3ec:	eef0 0a46 	vmov.f32	s1, s12
 800d3f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d3f4:	f7f6 fc38 	bl	8003c68 <straight_table2>
			if(mollifier_mode == ON){
 800d3f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d10c      	bne.n	800d41a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d400:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d404:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d408:	eeb0 1a47 	vmov.f32	s2, s14
 800d40c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800d6f0 <turn45outL+0x3bc>
 800d410:	eeb0 0a67 	vmov.f32	s0, s15
 800d414:	f7f7 fbc4 	bl	8004ba0 <mollifier_slalom_table>
 800d418:	e013      	b.n	800d442 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d41a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d41e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d422:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d426:	eef0 2a66 	vmov.f32	s5, s13
 800d42a:	eeb0 2a47 	vmov.f32	s4, s14
 800d42e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d6f4 <turn45outL+0x3c0>
 800d432:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d6f4 <turn45outL+0x3c0>
 800d436:	eddf 0aae 	vldr	s1, [pc, #696]	; 800d6f0 <turn45outL+0x3bc>
 800d43a:	eeb0 0a67 	vmov.f32	s0, s15
 800d43e:	f7f7 fa5f 	bl	8004900 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d442:	2300      	movs	r3, #0
 800d444:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d44a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d44e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d6fc <turn45outL+0x3c8>
 800d452:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d456:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d45a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d45e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d462:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d46a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d46e:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d472:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d6f0 <turn45outL+0x3bc>
 800d476:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	eeb0 2a47 	vmov.f32	s4, s14
 800d480:	eef0 1a65 	vmov.f32	s3, s11
 800d484:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d6f4 <turn45outL+0x3c0>
 800d488:	eef0 0a46 	vmov.f32	s1, s12
 800d48c:	eeb0 0a66 	vmov.f32	s0, s13
 800d490:	f7f6 fbea 	bl	8003c68 <straight_table2>
			highspeed_mode = 0;
 800d494:	4b95      	ldr	r3, [pc, #596]	; (800d6ec <turn45outL+0x3b8>)
 800d496:	2200      	movs	r2, #0
 800d498:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d49a:	e11e      	b.n	800d6da <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800d49c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d97f      	bls.n	800d5a4 <turn45outL+0x270>
		highspeed_mode = 1;
 800d4a4:	4b91      	ldr	r3, [pc, #580]	; (800d6ec <turn45outL+0x3b8>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d4be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d4c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d4da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4de:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d6f0 <turn45outL+0x3bc>
 800d4e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	eeb0 2a47 	vmov.f32	s4, s14
 800d4ec:	eef0 1a45 	vmov.f32	s3, s10
 800d4f0:	eeb0 1a65 	vmov.f32	s2, s11
 800d4f4:	eef0 0a46 	vmov.f32	s1, s12
 800d4f8:	eeb0 0a66 	vmov.f32	s0, s13
 800d4fc:	f7f6 fbb4 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d500:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d504:	2b01      	cmp	r3, #1
 800d506:	d10c      	bne.n	800d522 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d508:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d50c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d510:	eeb0 1a47 	vmov.f32	s2, s14
 800d514:	eddf 0a76 	vldr	s1, [pc, #472]	; 800d6f0 <turn45outL+0x3bc>
 800d518:	eeb0 0a67 	vmov.f32	s0, s15
 800d51c:	f7f7 fb40 	bl	8004ba0 <mollifier_slalom_table>
 800d520:	e013      	b.n	800d54a <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d522:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d526:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d52a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d52e:	eef0 2a66 	vmov.f32	s5, s13
 800d532:	eeb0 2a47 	vmov.f32	s4, s14
 800d536:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d6f4 <turn45outL+0x3c0>
 800d53a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d6f4 <turn45outL+0x3c0>
 800d53e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800d6f0 <turn45outL+0x3bc>
 800d542:	eeb0 0a67 	vmov.f32	s0, s15
 800d546:	f7f7 f9db 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d552:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d556:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800d6fc <turn45outL+0x3c8>
 800d55a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d55e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d562:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d566:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d56a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d56e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d572:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d576:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d57a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d6f0 <turn45outL+0x3bc>
 800d57e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	eeb0 2a47 	vmov.f32	s4, s14
 800d588:	eef0 1a65 	vmov.f32	s3, s11
 800d58c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d6f4 <turn45outL+0x3c0>
 800d590:	eef0 0a46 	vmov.f32	s1, s12
 800d594:	eeb0 0a66 	vmov.f32	s0, s13
 800d598:	f7f6 fb66 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800d59c:	4b53      	ldr	r3, [pc, #332]	; (800d6ec <turn45outL+0x3b8>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	701a      	strb	r2, [r3, #0]
}
 800d5a2:	e09a      	b.n	800d6da <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d5ac:	2304      	movs	r3, #4
 800d5ae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d5b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d5bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d5c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5d8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d6f0 <turn45outL+0x3bc>
 800d5dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	eeb0 2a47 	vmov.f32	s4, s14
 800d5e6:	eef0 1a45 	vmov.f32	s3, s10
 800d5ea:	eeb0 1a65 	vmov.f32	s2, s11
 800d5ee:	eef0 0a46 	vmov.f32	s1, s12
 800d5f2:	eeb0 0a66 	vmov.f32	s0, s13
 800d5f6:	f7f6 fb37 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d5fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d10c      	bne.n	800d61c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d602:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d606:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d60a:	eeb0 1a47 	vmov.f32	s2, s14
 800d60e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800d6f0 <turn45outL+0x3bc>
 800d612:	eeb0 0a67 	vmov.f32	s0, s15
 800d616:	f7f7 fac3 	bl	8004ba0 <mollifier_slalom_table>
 800d61a:	e013      	b.n	800d644 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d61c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d620:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d624:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d628:	eef0 2a66 	vmov.f32	s5, s13
 800d62c:	eeb0 2a47 	vmov.f32	s4, s14
 800d630:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d6f4 <turn45outL+0x3c0>
 800d634:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d6f4 <turn45outL+0x3c0>
 800d638:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800d6f0 <turn45outL+0x3bc>
 800d63c:	eeb0 0a67 	vmov.f32	s0, s15
 800d640:	f7f7 f95e 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d644:	2301      	movs	r3, #1
 800d646:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d648:	2300      	movs	r3, #0
 800d64a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d64c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d650:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d65c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d660:	edd7 7a01 	vldr	s15, [r7, #4]
 800d664:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d66c:	eef0 7ae7 	vabs.f32	s15, s15
 800d670:	ee17 0a90 	vmov	r0, s15
 800d674:	f7f2 ff90 	bl	8000598 <__aeabi_f2d>
 800d678:	f04f 0200 	mov.w	r2, #0
 800d67c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d680:	f7f3 f90c 	bl	800089c <__aeabi_ddiv>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	4614      	mov	r4, r2
 800d68a:	461d      	mov	r5, r3
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f2 ff82 	bl	8000598 <__aeabi_f2d>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4620      	mov	r0, r4
 800d69a:	4629      	mov	r1, r5
 800d69c:	f7f3 f8fe 	bl	800089c <__aeabi_ddiv>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	f04f 0200 	mov.w	r2, #0
 800d6ac:	4b14      	ldr	r3, [pc, #80]	; (800d700 <turn45outL+0x3cc>)
 800d6ae:	f7f2 fe15 	bl	80002dc <__adddf3>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f7f3 fa9d 	bl	8000bf8 <__aeabi_d2f>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	ee02 3a10 	vmov	s4, r3
 800d6c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800d6ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800d6ce:	eef0 0a68 	vmov.f32	s1, s17
 800d6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6d6:	f7f6 fac7 	bl	8003c68 <straight_table2>
}
 800d6da:	bf00      	nop
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	ecbd 8b02 	vpop	{d8}
 800d6e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d6e8:	b004      	add	sp, #16
 800d6ea:	4770      	bx	lr
 800d6ec:	20000814 	.word	0x20000814
 800d6f0:	42340000 	.word	0x42340000
 800d6f4:	00000000 	.word	0x00000000
 800d6f8:	42c4477b 	.word	0x42c4477b
 800d6fc:	42b40000 	.word	0x42b40000
 800d700:	408f4000 	.word	0x408f4000

0800d704 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d704:	b084      	sub	sp, #16
 800d706:	b5b0      	push	{r4, r5, r7, lr}
 800d708:	ed2d 8b02 	vpush	{d8}
 800d70c:	b084      	sub	sp, #16
 800d70e:	af00      	add	r7, sp, #0
 800d710:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d718:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d71c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d720:	2b01      	cmp	r3, #1
 800d722:	f040 80a5 	bne.w	800d870 <turn135outR+0x16c>
			highspeed_mode = 1;
 800d726:	4be9      	ldr	r3, [pc, #932]	; (800dacc <turn135outR+0x3c8>)
 800d728:	2201      	movs	r2, #1
 800d72a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d730:	2300      	movs	r3, #0
 800d732:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d734:	2300      	movs	r3, #0
 800d736:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d738:	2300      	movs	r3, #0
 800d73a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d73c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d740:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d744:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d750:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d754:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d758:	eddf 5add 	vldr	s11, [pc, #884]	; 800dad0 <turn135outR+0x3cc>
 800d75c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	eeb0 2a47 	vmov.f32	s4, s14
 800d766:	eef0 1a46 	vmov.f32	s3, s12
 800d76a:	eeb0 1a66 	vmov.f32	s2, s13
 800d76e:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800dad4 <turn135outR+0x3d0>
 800d772:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800dad8 <turn135outR+0x3d4>
 800d776:	f7f6 fa77 	bl	8003c68 <straight_table2>
			wallmode.WallControlMode=0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d77e:	2303      	movs	r3, #3
 800d780:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d782:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d786:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d78a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d78e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d792:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d796:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d79a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d79e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d7a2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d7a6:	eddf 4aca 	vldr	s9, [pc, #808]	; 800dad0 <turn135outR+0x3cc>
 800d7aa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	eeb0 2a47 	vmov.f32	s4, s14
 800d7b4:	eef0 1a45 	vmov.f32	s3, s10
 800d7b8:	eeb0 1a65 	vmov.f32	s2, s11
 800d7bc:	eef0 0a46 	vmov.f32	s1, s12
 800d7c0:	eeb0 0a66 	vmov.f32	s0, s13
 800d7c4:	f7f6 fa50 	bl	8003c68 <straight_table2>
			if(mollifier_mode == ON){
 800d7c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d10c      	bne.n	800d7ea <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d7d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7d8:	eeb0 1a47 	vmov.f32	s2, s14
 800d7dc:	eddf 0abf 	vldr	s1, [pc, #764]	; 800dadc <turn135outR+0x3d8>
 800d7e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d7e4:	f7f7 f9dc 	bl	8004ba0 <mollifier_slalom_table>
 800d7e8:	e015      	b.n	800d816 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d7ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d7f2:	eef1 7a67 	vneg.f32	s15, s15
 800d7f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d7fa:	eef0 2a66 	vmov.f32	s5, s13
 800d7fe:	eeb0 2a67 	vmov.f32	s4, s15
 800d802:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800dad4 <turn135outR+0x3d0>
 800d806:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800dad4 <turn135outR+0x3d0>
 800d80a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800dadc <turn135outR+0x3d8>
 800d80e:	eeb0 0a47 	vmov.f32	s0, s14
 800d812:	f7f7 f875 	bl	8004900 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d816:	2300      	movs	r3, #0
 800d818:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d81e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d822:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800dae0 <turn135outR+0x3dc>
 800d826:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d82a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d82e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d832:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d836:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d83e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d842:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d846:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800dad0 <turn135outR+0x3cc>
 800d84a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	eeb0 2a47 	vmov.f32	s4, s14
 800d854:	eef0 1a65 	vmov.f32	s3, s11
 800d858:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800dad4 <turn135outR+0x3d0>
 800d85c:	eef0 0a46 	vmov.f32	s1, s12
 800d860:	eeb0 0a66 	vmov.f32	s0, s13
 800d864:	f7f6 fa00 	bl	8003c68 <straight_table2>
			highspeed_mode = 0;
 800d868:	4b98      	ldr	r3, [pc, #608]	; (800dacc <turn135outR+0x3c8>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d86e:	e123      	b.n	800dab8 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800d870:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d874:	2b01      	cmp	r3, #1
 800d876:	f240 8082 	bls.w	800d97e <turn135outR+0x27a>
		highspeed_mode = 1;
 800d87a:	4b94      	ldr	r3, [pc, #592]	; (800dacc <turn135outR+0x3c8>)
 800d87c:	2201      	movs	r2, #1
 800d87e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d880:	2300      	movs	r3, #0
 800d882:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d884:	2300      	movs	r3, #0
 800d886:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d888:	2303      	movs	r3, #3
 800d88a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d890:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d894:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d898:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d89c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d8b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8b4:	eddf 4a86 	vldr	s9, [pc, #536]	; 800dad0 <turn135outR+0x3cc>
 800d8b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	eeb0 2a47 	vmov.f32	s4, s14
 800d8c2:	eef0 1a45 	vmov.f32	s3, s10
 800d8c6:	eeb0 1a65 	vmov.f32	s2, s11
 800d8ca:	eef0 0a46 	vmov.f32	s1, s12
 800d8ce:	eeb0 0a66 	vmov.f32	s0, s13
 800d8d2:	f7f6 f9c9 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d8d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d10c      	bne.n	800d8f8 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d8de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8e6:	eeb0 1a47 	vmov.f32	s2, s14
 800d8ea:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800dadc <turn135outR+0x3d8>
 800d8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d8f2:	f7f7 f955 	bl	8004ba0 <mollifier_slalom_table>
 800d8f6:	e015      	b.n	800d924 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d8f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d900:	eef1 7a67 	vneg.f32	s15, s15
 800d904:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d908:	eef0 2a66 	vmov.f32	s5, s13
 800d90c:	eeb0 2a67 	vmov.f32	s4, s15
 800d910:	eddf 1a70 	vldr	s3, [pc, #448]	; 800dad4 <turn135outR+0x3d0>
 800d914:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800dad4 <turn135outR+0x3d0>
 800d918:	eddf 0a70 	vldr	s1, [pc, #448]	; 800dadc <turn135outR+0x3d8>
 800d91c:	eeb0 0a47 	vmov.f32	s0, s14
 800d920:	f7f6 ffee 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800d924:	2300      	movs	r3, #0
 800d926:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d92c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d930:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800dae0 <turn135outR+0x3dc>
 800d934:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d938:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d93c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d940:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d944:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d94c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d950:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d954:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800dad0 <turn135outR+0x3cc>
 800d958:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	eeb0 2a47 	vmov.f32	s4, s14
 800d962:	eef0 1a65 	vmov.f32	s3, s11
 800d966:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800dad4 <turn135outR+0x3d0>
 800d96a:	eef0 0a46 	vmov.f32	s1, s12
 800d96e:	eeb0 0a66 	vmov.f32	s0, s13
 800d972:	f7f6 f979 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800d976:	4b55      	ldr	r3, [pc, #340]	; (800dacc <turn135outR+0x3c8>)
 800d978:	2200      	movs	r2, #0
 800d97a:	701a      	strb	r2, [r3, #0]
}
 800d97c:	e09c      	b.n	800dab8 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d97e:	2300      	movs	r3, #0
 800d980:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d982:	2300      	movs	r3, #0
 800d984:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d986:	2303      	movs	r3, #3
 800d988:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d98e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d992:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d996:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d99a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d99e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9b2:	eddf 4a47 	vldr	s9, [pc, #284]	; 800dad0 <turn135outR+0x3cc>
 800d9b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	eeb0 2a47 	vmov.f32	s4, s14
 800d9c0:	eef0 1a45 	vmov.f32	s3, s10
 800d9c4:	eeb0 1a65 	vmov.f32	s2, s11
 800d9c8:	eef0 0a46 	vmov.f32	s1, s12
 800d9cc:	eeb0 0a66 	vmov.f32	s0, s13
 800d9d0:	f7f6 f94a 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800d9d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d10c      	bne.n	800d9f6 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d9dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9e4:	eeb0 1a47 	vmov.f32	s2, s14
 800d9e8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800dadc <turn135outR+0x3d8>
 800d9ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d9f0:	f7f7 f8d6 	bl	8004ba0 <mollifier_slalom_table>
 800d9f4:	e015      	b.n	800da22 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d9f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d9fe:	eef1 7a67 	vneg.f32	s15, s15
 800da02:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da06:	eef0 2a66 	vmov.f32	s5, s13
 800da0a:	eeb0 2a67 	vmov.f32	s4, s15
 800da0e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800dad4 <turn135outR+0x3d0>
 800da12:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800dad4 <turn135outR+0x3d0>
 800da16:	eddf 0a31 	vldr	s1, [pc, #196]	; 800dadc <turn135outR+0x3d8>
 800da1a:	eeb0 0a47 	vmov.f32	s0, s14
 800da1e:	f7f6 ff6f 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800da22:	2301      	movs	r3, #1
 800da24:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da26:	2300      	movs	r3, #0
 800da28:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da2a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800da2e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800da32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da3e:	edd7 7a01 	vldr	s15, [r7, #4]
 800da42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da4a:	eef0 7ae7 	vabs.f32	s15, s15
 800da4e:	ee17 0a90 	vmov	r0, s15
 800da52:	f7f2 fda1 	bl	8000598 <__aeabi_f2d>
 800da56:	f04f 0200 	mov.w	r2, #0
 800da5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da5e:	f7f2 ff1d 	bl	800089c <__aeabi_ddiv>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4614      	mov	r4, r2
 800da68:	461d      	mov	r5, r3
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7f2 fd93 	bl	8000598 <__aeabi_f2d>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4620      	mov	r0, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	f7f2 ff0f 	bl	800089c <__aeabi_ddiv>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4610      	mov	r0, r2
 800da84:	4619      	mov	r1, r3
 800da86:	f04f 0200 	mov.w	r2, #0
 800da8a:	4b16      	ldr	r3, [pc, #88]	; (800dae4 <turn135outR+0x3e0>)
 800da8c:	f7f2 fc26 	bl	80002dc <__adddf3>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da94:	4610      	mov	r0, r2
 800da96:	4619      	mov	r1, r3
 800da98:	f7f3 f8ae 	bl	8000bf8 <__aeabi_d2f>
 800da9c:	4603      	mov	r3, r0
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	ee02 3a10 	vmov	s4, r3
 800daa4:	edd7 1a01 	vldr	s3, [r7, #4]
 800daa8:	ed97 1a01 	vldr	s2, [r7, #4]
 800daac:	eef0 0a68 	vmov.f32	s1, s17
 800dab0:	eeb0 0a48 	vmov.f32	s0, s16
 800dab4:	f7f6 f8d8 	bl	8003c68 <straight_table2>
}
 800dab8:	bf00      	nop
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	ecbd 8b02 	vpop	{d8}
 800dac2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dac6:	b004      	add	sp, #16
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20000814 	.word	0x20000814
 800dad0:	42340000 	.word	0x42340000
 800dad4:	00000000 	.word	0x00000000
 800dad8:	42c4477b 	.word	0x42c4477b
 800dadc:	c3070000 	.word	0xc3070000
 800dae0:	42b40000 	.word	0x42b40000
 800dae4:	408f4000 	.word	0x408f4000

0800dae8 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800dae8:	b084      	sub	sp, #16
 800daea:	b5b0      	push	{r4, r5, r7, lr}
 800daec:	ed2d 8b02 	vpush	{d8}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800daf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dafc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800db00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db04:	2b01      	cmp	r3, #1
 800db06:	f040 80a3 	bne.w	800dc50 <turn135outL+0x168>
		highspeed_mode = 1;
 800db0a:	4be5      	ldr	r3, [pc, #916]	; (800dea0 <turn135outL+0x3b8>)
 800db0c:	2201      	movs	r2, #1
 800db0e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800db10:	2300      	movs	r3, #0
 800db12:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800db14:	2300      	movs	r3, #0
 800db16:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800db18:	2300      	movs	r3, #0
 800db1a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800db20:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800db24:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db34:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800db38:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800db3c:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800dea4 <turn135outL+0x3bc>
 800db40:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	eeb0 2a47 	vmov.f32	s4, s14
 800db4a:	eef0 1a46 	vmov.f32	s3, s12
 800db4e:	eeb0 1a66 	vmov.f32	s2, s13
 800db52:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800dea8 <turn135outL+0x3c0>
 800db56:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800deac <turn135outL+0x3c4>
 800db5a:	f7f6 f885 	bl	8003c68 <straight_table2>
		wallmode.WallControlMode=0;
 800db5e:	2300      	movs	r3, #0
 800db60:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800db62:	2304      	movs	r3, #4
 800db64:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db66:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800db6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800db6e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800db72:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db82:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800db86:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db8a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800dea4 <turn135outL+0x3bc>
 800db8e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	eeb0 2a47 	vmov.f32	s4, s14
 800db98:	eef0 1a45 	vmov.f32	s3, s10
 800db9c:	eeb0 1a65 	vmov.f32	s2, s11
 800dba0:	eef0 0a46 	vmov.f32	s1, s12
 800dba4:	eeb0 0a66 	vmov.f32	s0, s13
 800dba8:	f7f6 f85e 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800dbac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d10c      	bne.n	800dbce <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dbb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbb8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dbbc:	eeb0 1a47 	vmov.f32	s2, s14
 800dbc0:	eddf 0abb 	vldr	s1, [pc, #748]	; 800deb0 <turn135outL+0x3c8>
 800dbc4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbc8:	f7f6 ffea 	bl	8004ba0 <mollifier_slalom_table>
 800dbcc:	e013      	b.n	800dbf6 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dbce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbd2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dbd6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dbda:	eef0 2a66 	vmov.f32	s5, s13
 800dbde:	eeb0 2a47 	vmov.f32	s4, s14
 800dbe2:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800dea8 <turn135outL+0x3c0>
 800dbe6:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800dea8 <turn135outL+0x3c0>
 800dbea:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800deb0 <turn135outL+0x3c8>
 800dbee:	eeb0 0a67 	vmov.f32	s0, s15
 800dbf2:	f7f6 fe85 	bl	8004900 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dbfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc02:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800deb4 <turn135outL+0x3cc>
 800dc06:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dc0a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc0e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc1e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dc22:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc26:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800dea4 <turn135outL+0x3bc>
 800dc2a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	eeb0 2a47 	vmov.f32	s4, s14
 800dc34:	eef0 1a65 	vmov.f32	s3, s11
 800dc38:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800dea8 <turn135outL+0x3c0>
 800dc3c:	eef0 0a46 	vmov.f32	s1, s12
 800dc40:	eeb0 0a66 	vmov.f32	s0, s13
 800dc44:	f7f6 f810 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800dc48:	4b95      	ldr	r3, [pc, #596]	; (800dea0 <turn135outL+0x3b8>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dc4e:	e11e      	b.n	800de8e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800dc50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d97f      	bls.n	800dd58 <turn135outL+0x270>
		highspeed_mode = 1;
 800dc58:	4b91      	ldr	r3, [pc, #580]	; (800dea0 <turn135outL+0x3b8>)
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dc66:	2304      	movs	r3, #4
 800dc68:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc6e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dc72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc76:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dc7a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc8a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dc8e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc92:	eddf 4a84 	vldr	s9, [pc, #528]	; 800dea4 <turn135outL+0x3bc>
 800dc96:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	eeb0 2a47 	vmov.f32	s4, s14
 800dca0:	eef0 1a45 	vmov.f32	s3, s10
 800dca4:	eeb0 1a65 	vmov.f32	s2, s11
 800dca8:	eef0 0a46 	vmov.f32	s1, s12
 800dcac:	eeb0 0a66 	vmov.f32	s0, s13
 800dcb0:	f7f5 ffda 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800dcb4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d10c      	bne.n	800dcd6 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dcbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dcc4:	eeb0 1a47 	vmov.f32	s2, s14
 800dcc8:	eddf 0a79 	vldr	s1, [pc, #484]	; 800deb0 <turn135outL+0x3c8>
 800dccc:	eeb0 0a67 	vmov.f32	s0, s15
 800dcd0:	f7f6 ff66 	bl	8004ba0 <mollifier_slalom_table>
 800dcd4:	e013      	b.n	800dcfe <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dcd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dcde:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dce2:	eef0 2a66 	vmov.f32	s5, s13
 800dce6:	eeb0 2a47 	vmov.f32	s4, s14
 800dcea:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800dea8 <turn135outL+0x3c0>
 800dcee:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800dea8 <turn135outL+0x3c0>
 800dcf2:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800deb0 <turn135outL+0x3c8>
 800dcf6:	eeb0 0a67 	vmov.f32	s0, s15
 800dcfa:	f7f6 fe01 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dd0a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800deb4 <turn135outL+0x3cc>
 800dd0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dd12:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd16:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd26:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dd2a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd2e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800dea4 <turn135outL+0x3bc>
 800dd32:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	eeb0 2a47 	vmov.f32	s4, s14
 800dd3c:	eef0 1a65 	vmov.f32	s3, s11
 800dd40:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800dea8 <turn135outL+0x3c0>
 800dd44:	eef0 0a46 	vmov.f32	s1, s12
 800dd48:	eeb0 0a66 	vmov.f32	s0, s13
 800dd4c:	f7f5 ff8c 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800dd50:	4b53      	ldr	r3, [pc, #332]	; (800dea0 <turn135outL+0x3b8>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]
}
 800dd56:	e09a      	b.n	800de8e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dd60:	2304      	movs	r3, #4
 800dd62:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dd6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dd70:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dd74:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd84:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dd88:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dd8c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800dea4 <turn135outL+0x3bc>
 800dd90:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	eeb0 2a47 	vmov.f32	s4, s14
 800dd9a:	eef0 1a45 	vmov.f32	s3, s10
 800dd9e:	eeb0 1a65 	vmov.f32	s2, s11
 800dda2:	eef0 0a46 	vmov.f32	s1, s12
 800dda6:	eeb0 0a66 	vmov.f32	s0, s13
 800ddaa:	f7f5 ff5d 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800ddae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d10c      	bne.n	800ddd0 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ddb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ddbe:	eeb0 1a47 	vmov.f32	s2, s14
 800ddc2:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800deb0 <turn135outL+0x3c8>
 800ddc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ddca:	f7f6 fee9 	bl	8004ba0 <mollifier_slalom_table>
 800ddce:	e013      	b.n	800ddf8 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ddd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddd4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ddd8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dddc:	eef0 2a66 	vmov.f32	s5, s13
 800dde0:	eeb0 2a47 	vmov.f32	s4, s14
 800dde4:	eddf 1a30 	vldr	s3, [pc, #192]	; 800dea8 <turn135outL+0x3c0>
 800dde8:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800dea8 <turn135outL+0x3c0>
 800ddec:	eddf 0a30 	vldr	s1, [pc, #192]	; 800deb0 <turn135outL+0x3c8>
 800ddf0:	eeb0 0a67 	vmov.f32	s0, s15
 800ddf4:	f7f6 fd84 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de00:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800de04:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800de08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800de0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de14:	edd7 7a01 	vldr	s15, [r7, #4]
 800de18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de20:	eef0 7ae7 	vabs.f32	s15, s15
 800de24:	ee17 0a90 	vmov	r0, s15
 800de28:	f7f2 fbb6 	bl	8000598 <__aeabi_f2d>
 800de2c:	f04f 0200 	mov.w	r2, #0
 800de30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de34:	f7f2 fd32 	bl	800089c <__aeabi_ddiv>
 800de38:	4602      	mov	r2, r0
 800de3a:	460b      	mov	r3, r1
 800de3c:	4614      	mov	r4, r2
 800de3e:	461d      	mov	r5, r3
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	4618      	mov	r0, r3
 800de44:	f7f2 fba8 	bl	8000598 <__aeabi_f2d>
 800de48:	4602      	mov	r2, r0
 800de4a:	460b      	mov	r3, r1
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fd24 	bl	800089c <__aeabi_ddiv>
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	4610      	mov	r0, r2
 800de5a:	4619      	mov	r1, r3
 800de5c:	f04f 0200 	mov.w	r2, #0
 800de60:	4b15      	ldr	r3, [pc, #84]	; (800deb8 <turn135outL+0x3d0>)
 800de62:	f7f2 fa3b 	bl	80002dc <__adddf3>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de6a:	4610      	mov	r0, r2
 800de6c:	4619      	mov	r1, r3
 800de6e:	f7f2 fec3 	bl	8000bf8 <__aeabi_d2f>
 800de72:	4603      	mov	r3, r0
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	ee02 3a10 	vmov	s4, r3
 800de7a:	edd7 1a01 	vldr	s3, [r7, #4]
 800de7e:	ed97 1a01 	vldr	s2, [r7, #4]
 800de82:	eef0 0a68 	vmov.f32	s1, s17
 800de86:	eeb0 0a48 	vmov.f32	s0, s16
 800de8a:	f7f5 feed 	bl	8003c68 <straight_table2>
}
 800de8e:	bf00      	nop
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	ecbd 8b02 	vpop	{d8}
 800de98:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800de9c:	b004      	add	sp, #16
 800de9e:	4770      	bx	lr
 800dea0:	20000814 	.word	0x20000814
 800dea4:	42340000 	.word	0x42340000
 800dea8:	00000000 	.word	0x00000000
 800deac:	42c4477b 	.word	0x42c4477b
 800deb0:	43070000 	.word	0x43070000
 800deb4:	42b40000 	.word	0x42b40000
 800deb8:	408f4000 	.word	0x408f4000
 800debc:	00000000 	.word	0x00000000

0800dec0 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800dec0:	b084      	sub	sp, #16
 800dec2:	b5b0      	push	{r4, r5, r7, lr}
 800dec4:	ed2d 8b02 	vpush	{d8}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ded0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ded4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ded8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	f040 80af 	bne.w	800e040 <V90R+0x180>
			highspeed_mode = 1;
 800dee2:	4bc1      	ldr	r3, [pc, #772]	; (800e1e8 <V90R+0x328>)
 800dee4:	2201      	movs	r2, #1
 800dee6:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800dee8:	2300      	movs	r3, #0
 800deea:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800deec:	2300      	movs	r3, #0
 800deee:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800def4:	2300      	movs	r3, #0
 800def6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800def8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800defc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df0c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800df10:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800df14:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800e1ec <V90R+0x32c>
 800df18:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	eeb0 2a47 	vmov.f32	s4, s14
 800df22:	eef0 1a46 	vmov.f32	s3, s12
 800df26:	eeb0 1a66 	vmov.f32	s2, s13
 800df2a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800e1f4 <V90R+0x334>
 800df2e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800e1f0 <V90R+0x330>
 800df32:	f7f5 fe99 	bl	8003c68 <straight_table2>
			wallmode.WallControlMode=0;
 800df36:	2300      	movs	r3, #0
 800df38:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800df3a:	2303      	movs	r3, #3
 800df3c:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df3e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800df42:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800df46:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800df4a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df5a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800df5e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df62:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800e1ec <V90R+0x32c>
 800df66:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	eeb0 2a47 	vmov.f32	s4, s14
 800df70:	eef0 1a45 	vmov.f32	s3, s10
 800df74:	eeb0 1a65 	vmov.f32	s2, s11
 800df78:	eef0 0a46 	vmov.f32	s1, s12
 800df7c:	eeb0 0a66 	vmov.f32	s0, s13
 800df80:	f7f5 fe72 	bl	8003c68 <straight_table2>
			if(mollifier_mode == ON){
 800df84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d10c      	bne.n	800dfa6 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800df8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800df94:	eeb0 1a47 	vmov.f32	s2, s14
 800df98:	eddf 0a97 	vldr	s1, [pc, #604]	; 800e1f8 <V90R+0x338>
 800df9c:	eeb0 0a67 	vmov.f32	s0, s15
 800dfa0:	f7f6 fdfe 	bl	8004ba0 <mollifier_slalom_table>
 800dfa4:	e015      	b.n	800dfd2 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800dfa6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dfaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfae:	eef1 7a67 	vneg.f32	s15, s15
 800dfb2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dfb6:	eef0 2a66 	vmov.f32	s5, s13
 800dfba:	eeb0 2a67 	vmov.f32	s4, s15
 800dfbe:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800e1f4 <V90R+0x334>
 800dfc2:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800e1f4 <V90R+0x334>
 800dfc6:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800e1f8 <V90R+0x338>
 800dfca:	eeb0 0a47 	vmov.f32	s0, s14
 800dfce:	f7f6 fc97 	bl	8004900 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f2 fadb 	bl	8000598 <__aeabi_f2d>
 800dfe2:	a37f      	add	r3, pc, #508	; (adr r3, 800e1e0 <V90R+0x320>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 f978 	bl	80002dc <__adddf3>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4610      	mov	r0, r2
 800dff2:	4619      	mov	r1, r3
 800dff4:	f7f2 fe00 	bl	8000bf8 <__aeabi_d2f>
 800dff8:	4603      	mov	r3, r0
 800dffa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dffe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e002:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e006:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e00a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e00e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e012:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e016:	eddf 5a75 	vldr	s11, [pc, #468]	; 800e1ec <V90R+0x32c>
 800e01a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	eeb0 2a47 	vmov.f32	s4, s14
 800e024:	eef0 1a46 	vmov.f32	s3, s12
 800e028:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800e1f4 <V90R+0x334>
 800e02c:	eef0 0a66 	vmov.f32	s1, s13
 800e030:	ee00 3a10 	vmov	s0, r3
 800e034:	f7f5 fe18 	bl	8003c68 <straight_table2>
			highspeed_mode = 0;
 800e038:	4b6b      	ldr	r3, [pc, #428]	; (800e1e8 <V90R+0x328>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e03e:	e13e      	b.n	800e2be <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800e040:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e044:	2b01      	cmp	r3, #1
 800e046:	f240 808c 	bls.w	800e162 <V90R+0x2a2>
		highspeed_mode = 1;
 800e04a:	4b67      	ldr	r3, [pc, #412]	; (800e1e8 <V90R+0x328>)
 800e04c:	2201      	movs	r2, #1
 800e04e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e050:	2300      	movs	r3, #0
 800e052:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e054:	2300      	movs	r3, #0
 800e056:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e058:	2303      	movs	r3, #3
 800e05a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e060:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e064:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e068:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e06c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e070:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e074:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e07c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e080:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e084:	eddf 4a59 	vldr	s9, [pc, #356]	; 800e1ec <V90R+0x32c>
 800e088:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	eeb0 2a47 	vmov.f32	s4, s14
 800e092:	eef0 1a45 	vmov.f32	s3, s10
 800e096:	eeb0 1a65 	vmov.f32	s2, s11
 800e09a:	eef0 0a46 	vmov.f32	s1, s12
 800e09e:	eeb0 0a66 	vmov.f32	s0, s13
 800e0a2:	f7f5 fde1 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800e0a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d10c      	bne.n	800e0c8 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e0ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e0b6:	eeb0 1a47 	vmov.f32	s2, s14
 800e0ba:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800e1f8 <V90R+0x338>
 800e0be:	eeb0 0a67 	vmov.f32	s0, s15
 800e0c2:	f7f6 fd6d 	bl	8004ba0 <mollifier_slalom_table>
 800e0c6:	e015      	b.n	800e0f4 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e0c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e0cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e0d0:	eef1 7a67 	vneg.f32	s15, s15
 800e0d4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e0d8:	eef0 2a66 	vmov.f32	s5, s13
 800e0dc:	eeb0 2a67 	vmov.f32	s4, s15
 800e0e0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e1f4 <V90R+0x334>
 800e0e4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e1f4 <V90R+0x334>
 800e0e8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e1f8 <V90R+0x338>
 800e0ec:	eeb0 0a47 	vmov.f32	s0, s14
 800e0f0:	f7f6 fc06 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f2 fa4a 	bl	8000598 <__aeabi_f2d>
 800e104:	a336      	add	r3, pc, #216	; (adr r3, 800e1e0 <V90R+0x320>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	f7f2 f8e7 	bl	80002dc <__adddf3>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4610      	mov	r0, r2
 800e114:	4619      	mov	r1, r3
 800e116:	f7f2 fd6f 	bl	8000bf8 <__aeabi_d2f>
 800e11a:	4603      	mov	r3, r0
 800e11c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e120:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e124:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e128:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e130:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e134:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e138:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e1ec <V90R+0x32c>
 800e13c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	eeb0 2a47 	vmov.f32	s4, s14
 800e146:	eef0 1a46 	vmov.f32	s3, s12
 800e14a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e1f4 <V90R+0x334>
 800e14e:	eef0 0a66 	vmov.f32	s1, s13
 800e152:	ee00 3a10 	vmov	s0, r3
 800e156:	f7f5 fd87 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800e15a:	4b23      	ldr	r3, [pc, #140]	; (800e1e8 <V90R+0x328>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	701a      	strb	r2, [r3, #0]
}
 800e160:	e0ad      	b.n	800e2be <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e162:	2300      	movs	r3, #0
 800e164:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e166:	2300      	movs	r3, #0
 800e168:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e16a:	2303      	movs	r3, #3
 800e16c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e16e:	2300      	movs	r3, #0
 800e170:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e172:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e176:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e17a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e17e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e182:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e18a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e18e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e192:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e196:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e1ec <V90R+0x32c>
 800e19a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	eeb0 2a47 	vmov.f32	s4, s14
 800e1a4:	eef0 1a45 	vmov.f32	s3, s10
 800e1a8:	eeb0 1a65 	vmov.f32	s2, s11
 800e1ac:	eef0 0a46 	vmov.f32	s1, s12
 800e1b0:	eeb0 0a66 	vmov.f32	s0, s13
 800e1b4:	f7f5 fd58 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800e1b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d11d      	bne.n	800e1fc <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e1c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e1c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e1c8:	eeb0 1a47 	vmov.f32	s2, s14
 800e1cc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e1f8 <V90R+0x338>
 800e1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1d4:	f7f6 fce4 	bl	8004ba0 <mollifier_slalom_table>
 800e1d8:	e026      	b.n	800e228 <V90R+0x368>
 800e1da:	bf00      	nop
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	c022ec18 	.word	0xc022ec18
 800e1e4:	405fd1de 	.word	0x405fd1de
 800e1e8:	20000814 	.word	0x20000814
 800e1ec:	42340000 	.word	0x42340000
 800e1f0:	42c4477b 	.word	0x42c4477b
 800e1f4:	00000000 	.word	0x00000000
 800e1f8:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e1fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e200:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e204:	eef1 7a67 	vneg.f32	s15, s15
 800e208:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e20c:	eef0 2a66 	vmov.f32	s5, s13
 800e210:	eeb0 2a67 	vmov.f32	s4, s15
 800e214:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800e1f4 <V90R+0x334>
 800e218:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800e1f4 <V90R+0x334>
 800e21c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800e1f8 <V90R+0x338>
 800e220:	eeb0 0a47 	vmov.f32	s0, s14
 800e224:	f7f6 fb6c 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e228:	2303      	movs	r3, #3
 800e22a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e230:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e234:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e238:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e23c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e240:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e244:	edd7 7a01 	vldr	s15, [r7, #4]
 800e248:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e24c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e250:	eef0 7ae7 	vabs.f32	s15, s15
 800e254:	ee17 0a90 	vmov	r0, s15
 800e258:	f7f2 f99e 	bl	8000598 <__aeabi_f2d>
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e264:	f7f2 fb1a 	bl	800089c <__aeabi_ddiv>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	4614      	mov	r4, r2
 800e26e:	461d      	mov	r5, r3
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	4618      	mov	r0, r3
 800e274:	f7f2 f990 	bl	8000598 <__aeabi_f2d>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 fb0c 	bl	800089c <__aeabi_ddiv>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4610      	mov	r0, r2
 800e28a:	4619      	mov	r1, r3
 800e28c:	f04f 0200 	mov.w	r2, #0
 800e290:	4b0f      	ldr	r3, [pc, #60]	; (800e2d0 <V90R+0x410>)
 800e292:	f7f2 f823 	bl	80002dc <__adddf3>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e29a:	4610      	mov	r0, r2
 800e29c:	4619      	mov	r1, r3
 800e29e:	f7f2 fcab 	bl	8000bf8 <__aeabi_d2f>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	ee02 3a10 	vmov	s4, r3
 800e2aa:	edd7 1a01 	vldr	s3, [r7, #4]
 800e2ae:	ed97 1a01 	vldr	s2, [r7, #4]
 800e2b2:	eef0 0a68 	vmov.f32	s1, s17
 800e2b6:	eeb0 0a48 	vmov.f32	s0, s16
 800e2ba:	f7f5 fcd5 	bl	8003c68 <straight_table2>
}
 800e2be:	bf00      	nop
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	ecbd 8b02 	vpop	{d8}
 800e2c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e2cc:	b004      	add	sp, #16
 800e2ce:	4770      	bx	lr
 800e2d0:	408f4000 	.word	0x408f4000
 800e2d4:	00000000 	.word	0x00000000

0800e2d8 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e2d8:	b084      	sub	sp, #16
 800e2da:	b5b0      	push	{r4, r5, r7, lr}
 800e2dc:	ed2d 8b02 	vpush	{d8}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e2e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e2ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800e2f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	f040 80ad 	bne.w	800e454 <V90L+0x17c>
				highspeed_mode = 1;
 800e2fa:	4bbf      	ldr	r3, [pc, #764]	; (800e5f8 <V90L+0x320>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800e300:	2300      	movs	r3, #0
 800e302:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800e304:	2300      	movs	r3, #0
 800e306:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800e308:	2300      	movs	r3, #0
 800e30a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e310:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e314:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e318:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e31c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e320:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e324:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e328:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e32c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800e5fc <V90L+0x324>
 800e330:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	eeb0 2a47 	vmov.f32	s4, s14
 800e33a:	eef0 1a46 	vmov.f32	s3, s12
 800e33e:	eeb0 1a66 	vmov.f32	s2, s13
 800e342:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800e604 <V90L+0x32c>
 800e346:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800e600 <V90L+0x328>
 800e34a:	f7f5 fc8d 	bl	8003c68 <straight_table2>
				wallmode.WallControlMode=0;
 800e34e:	2300      	movs	r3, #0
 800e350:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800e352:	2304      	movs	r3, #4
 800e354:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e356:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e35a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e35e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e362:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e366:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e36a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e36e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e372:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e376:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e37a:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800e5fc <V90L+0x324>
 800e37e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	eeb0 2a47 	vmov.f32	s4, s14
 800e388:	eef0 1a45 	vmov.f32	s3, s10
 800e38c:	eeb0 1a65 	vmov.f32	s2, s11
 800e390:	eef0 0a46 	vmov.f32	s1, s12
 800e394:	eeb0 0a66 	vmov.f32	s0, s13
 800e398:	f7f5 fc66 	bl	8003c68 <straight_table2>
				if(mollifier_mode == ON){
 800e39c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d10c      	bne.n	800e3be <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e3a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e3ac:	eeb0 1a47 	vmov.f32	s2, s14
 800e3b0:	eddf 0a95 	vldr	s1, [pc, #596]	; 800e608 <V90L+0x330>
 800e3b4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3b8:	f7f6 fbf2 	bl	8004ba0 <mollifier_slalom_table>
 800e3bc:	e013      	b.n	800e3e6 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e3be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e3c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e3ca:	eef0 2a66 	vmov.f32	s5, s13
 800e3ce:	eeb0 2a47 	vmov.f32	s4, s14
 800e3d2:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800e604 <V90L+0x32c>
 800e3d6:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800e604 <V90L+0x32c>
 800e3da:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800e608 <V90L+0x330>
 800e3de:	eeb0 0a67 	vmov.f32	s0, s15
 800e3e2:	f7f6 fa8d 	bl	8004900 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f2 f8d1 	bl	8000598 <__aeabi_f2d>
 800e3f6:	a37e      	add	r3, pc, #504	; (adr r3, 800e5f0 <V90L+0x318>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f7f1 ff6e 	bl	80002dc <__adddf3>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4610      	mov	r0, r2
 800e406:	4619      	mov	r1, r3
 800e408:	f7f2 fbf6 	bl	8000bf8 <__aeabi_d2f>
 800e40c:	4603      	mov	r3, r0
 800e40e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e412:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e416:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e41a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e41e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e422:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e426:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e42a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800e5fc <V90L+0x324>
 800e42e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	eeb0 2a47 	vmov.f32	s4, s14
 800e438:	eef0 1a46 	vmov.f32	s3, s12
 800e43c:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800e604 <V90L+0x32c>
 800e440:	eef0 0a66 	vmov.f32	s1, s13
 800e444:	ee00 3a10 	vmov	s0, r3
 800e448:	f7f5 fc0e 	bl	8003c68 <straight_table2>
				highspeed_mode = 0;
 800e44c:	4b6a      	ldr	r3, [pc, #424]	; (800e5f8 <V90L+0x320>)
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e452:	e13a      	b.n	800e6ca <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800e454:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e458:	2b01      	cmp	r3, #1
 800e45a:	f240 808a 	bls.w	800e572 <V90L+0x29a>
		highspeed_mode = 1;
 800e45e:	4b66      	ldr	r3, [pc, #408]	; (800e5f8 <V90L+0x320>)
 800e460:	2201      	movs	r2, #1
 800e462:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e464:	2300      	movs	r3, #0
 800e466:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e468:	2300      	movs	r3, #0
 800e46a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e46c:	2304      	movs	r3, #4
 800e46e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e470:	2300      	movs	r3, #0
 800e472:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e474:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e478:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e47c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e480:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e484:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e490:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e494:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e498:	eddf 4a58 	vldr	s9, [pc, #352]	; 800e5fc <V90L+0x324>
 800e49c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	eeb0 2a47 	vmov.f32	s4, s14
 800e4a6:	eef0 1a45 	vmov.f32	s3, s10
 800e4aa:	eeb0 1a65 	vmov.f32	s2, s11
 800e4ae:	eef0 0a46 	vmov.f32	s1, s12
 800e4b2:	eeb0 0a66 	vmov.f32	s0, s13
 800e4b6:	f7f5 fbd7 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800e4ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d10c      	bne.n	800e4dc <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e4c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e4ca:	eeb0 1a47 	vmov.f32	s2, s14
 800e4ce:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800e608 <V90L+0x330>
 800e4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800e4d6:	f7f6 fb63 	bl	8004ba0 <mollifier_slalom_table>
 800e4da:	e013      	b.n	800e504 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e4dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e4e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e4e8:	eef0 2a66 	vmov.f32	s5, s13
 800e4ec:	eeb0 2a47 	vmov.f32	s4, s14
 800e4f0:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e604 <V90L+0x32c>
 800e4f4:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e604 <V90L+0x32c>
 800e4f8:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e608 <V90L+0x330>
 800e4fc:	eeb0 0a67 	vmov.f32	s0, s15
 800e500:	f7f6 f9fe 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=0;
 800e504:	2300      	movs	r3, #0
 800e506:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e508:	2300      	movs	r3, #0
 800e50a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f2 f842 	bl	8000598 <__aeabi_f2d>
 800e514:	a336      	add	r3, pc, #216	; (adr r3, 800e5f0 <V90L+0x318>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f7f1 fedf 	bl	80002dc <__adddf3>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4610      	mov	r0, r2
 800e524:	4619      	mov	r1, r3
 800e526:	f7f2 fb67 	bl	8000bf8 <__aeabi_d2f>
 800e52a:	4603      	mov	r3, r0
 800e52c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e530:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e534:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e538:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e53c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e540:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e544:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e548:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e5fc <V90L+0x324>
 800e54c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	eeb0 2a47 	vmov.f32	s4, s14
 800e556:	eef0 1a46 	vmov.f32	s3, s12
 800e55a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e604 <V90L+0x32c>
 800e55e:	eef0 0a66 	vmov.f32	s1, s13
 800e562:	ee00 3a10 	vmov	s0, r3
 800e566:	f7f5 fb7f 	bl	8003c68 <straight_table2>
		highspeed_mode = 0;
 800e56a:	4b23      	ldr	r3, [pc, #140]	; (800e5f8 <V90L+0x320>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	701a      	strb	r2, [r3, #0]
}
 800e570:	e0ab      	b.n	800e6ca <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e572:	2300      	movs	r3, #0
 800e574:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e576:	2300      	movs	r3, #0
 800e578:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e57a:	2304      	movs	r3, #4
 800e57c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e57e:	2300      	movs	r3, #0
 800e580:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e582:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e586:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e58a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e58e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e592:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e596:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e59a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e59e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e5a2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e5a6:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e5fc <V90L+0x324>
 800e5aa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	eeb0 2a47 	vmov.f32	s4, s14
 800e5b4:	eef0 1a45 	vmov.f32	s3, s10
 800e5b8:	eeb0 1a65 	vmov.f32	s2, s11
 800e5bc:	eef0 0a46 	vmov.f32	s1, s12
 800e5c0:	eeb0 0a66 	vmov.f32	s0, s13
 800e5c4:	f7f5 fb50 	bl	8003c68 <straight_table2>
		if(mollifier_mode == ON){
 800e5c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d11d      	bne.n	800e60c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e5d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e5d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e5d8:	eeb0 1a47 	vmov.f32	s2, s14
 800e5dc:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e608 <V90L+0x330>
 800e5e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e4:	f7f6 fadc 	bl	8004ba0 <mollifier_slalom_table>
 800e5e8:	e024      	b.n	800e634 <V90L+0x35c>
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	c022ec18 	.word	0xc022ec18
 800e5f4:	405fd1de 	.word	0x405fd1de
 800e5f8:	20000814 	.word	0x20000814
 800e5fc:	42340000 	.word	0x42340000
 800e600:	42d4477b 	.word	0x42d4477b
 800e604:	00000000 	.word	0x00000000
 800e608:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e60c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e610:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e614:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e618:	eef0 2a66 	vmov.f32	s5, s13
 800e61c:	eeb0 2a47 	vmov.f32	s4, s14
 800e620:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800e604 <V90L+0x32c>
 800e624:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800e604 <V90L+0x32c>
 800e628:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800e608 <V90L+0x330>
 800e62c:	eeb0 0a67 	vmov.f32	s0, s15
 800e630:	f7f6 f966 	bl	8004900 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e634:	2303      	movs	r3, #3
 800e636:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e638:	2300      	movs	r3, #0
 800e63a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e63c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e640:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e650:	edd7 7a01 	vldr	s15, [r7, #4]
 800e654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e65c:	eef0 7ae7 	vabs.f32	s15, s15
 800e660:	ee17 0a90 	vmov	r0, s15
 800e664:	f7f1 ff98 	bl	8000598 <__aeabi_f2d>
 800e668:	f04f 0200 	mov.w	r2, #0
 800e66c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e670:	f7f2 f914 	bl	800089c <__aeabi_ddiv>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4614      	mov	r4, r2
 800e67a:	461d      	mov	r5, r3
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	4618      	mov	r0, r3
 800e680:	f7f1 ff8a 	bl	8000598 <__aeabi_f2d>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4620      	mov	r0, r4
 800e68a:	4629      	mov	r1, r5
 800e68c:	f7f2 f906 	bl	800089c <__aeabi_ddiv>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4610      	mov	r0, r2
 800e696:	4619      	mov	r1, r3
 800e698:	f04f 0200 	mov.w	r2, #0
 800e69c:	4b0f      	ldr	r3, [pc, #60]	; (800e6dc <V90L+0x404>)
 800e69e:	f7f1 fe1d 	bl	80002dc <__adddf3>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	f7f2 faa5 	bl	8000bf8 <__aeabi_d2f>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	ee02 3a10 	vmov	s4, r3
 800e6b6:	edd7 1a01 	vldr	s3, [r7, #4]
 800e6ba:	ed97 1a01 	vldr	s2, [r7, #4]
 800e6be:	eef0 0a68 	vmov.f32	s1, s17
 800e6c2:	eeb0 0a48 	vmov.f32	s0, s16
 800e6c6:	f7f5 facf 	bl	8003c68 <straight_table2>
}
 800e6ca:	bf00      	nop
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	ecbd 8b02 	vpop	{d8}
 800e6d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e6d8:	b004      	add	sp, #16
 800e6da:	4770      	bx	lr
 800e6dc:	408f4000 	.word	0x408f4000

0800e6e0 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	af04      	add	r7, sp, #16
 800e6e8:	f107 0c10 	add.w	ip, r7, #16
 800e6ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e6f0:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800e6f4:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d116      	bne.n	800e72a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800e6fc:	2001      	movs	r0, #1
 800e6fe:	f7f9 ff43 	bl	8008588 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e702:	2003      	movs	r0, #3
 800e704:	f7f9 ff4a 	bl	800859c <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800e708:	ed97 0a01 	vldr	s0, [r7, #4]
 800e70c:	f7f9 ffda 	bl	80086c4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800e710:	f7f9 ffc4 	bl	800869c <pl_FunMotor_start>
		HAL_Delay(600);
 800e714:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e718:	f00a ffc4 	bl	80196a4 <HAL_Delay>
		reset_gyro();
 800e71c:	f7f3 fa74 	bl	8001c08 <reset_gyro>
		reset_speed();
 800e720:	f7f2 fc80 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e724:	f7f6 fdb0 	bl	8005288 <clear_Ierror>
 800e728:	e00b      	b.n	800e742 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800e72a:	2001      	movs	r0, #1
 800e72c:	f7f9 ff2c 	bl	8008588 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e730:	2003      	movs	r0, #3
 800e732:	f7f9 ff33 	bl	800859c <pl_L_DriveMotor_mode>
		reset_gyro();
 800e736:	f7f3 fa67 	bl	8001c08 <reset_gyro>
		reset_speed();
 800e73a:	f7f2 fc73 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e73e:	f7f6 fda3 	bl	8005288 <clear_Ierror>

	}
	record_mode=12;
 800e742:	4ba8      	ldr	r3, [pc, #672]	; (800e9e4 <testturning+0x304>)
 800e744:	220c      	movs	r2, #12
 800e746:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800e748:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d110      	bne.n	800e772 <testturning+0x92>
 800e750:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e754:	9303      	str	r3, [sp, #12]
 800e756:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e75a:	9302      	str	r3, [sp, #8]
 800e75c:	2301      	movs	r3, #1
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	9300      	str	r3, [sp, #0]
 800e764:	f107 0318 	add.w	r3, r7, #24
 800e768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e76a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800e9e8 <testturning+0x308>
 800e76e:	f7fc f973 	bl	800aa58 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800e772:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e776:	2b01      	cmp	r3, #1
 800e778:	d110      	bne.n	800e79c <testturning+0xbc>
 800e77a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e77e:	9303      	str	r3, [sp, #12]
 800e780:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e784:	9302      	str	r3, [sp, #8]
 800e786:	2301      	movs	r3, #1
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e794:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e9e8 <testturning+0x308>
 800e798:	f7fc fb44 	bl	800ae24 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800e79c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d10d      	bne.n	800e7c0 <testturning+0xe0>
 800e7a4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e7b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7b8:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e9e8 <testturning+0x308>
 800e7bc:	f7fc fd14 	bl	800b1e8 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800e7c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d10d      	bne.n	800e7e4 <testturning+0x104>
 800e7c8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7cc:	9302      	str	r3, [sp, #8]
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e7da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7dc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e9e8 <testturning+0x308>
 800e7e0:	f7fc fe6c 	bl	800b4bc <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800e7e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7e8:	2b04      	cmp	r3, #4
 800e7ea:	d10d      	bne.n	800e808 <testturning+0x128>
 800e7ec:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7f0:	9302      	str	r3, [sp, #8]
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e7fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e800:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e9e8 <testturning+0x308>
 800e804:	f7fc ffbe 	bl	800b784 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800e808:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e80c:	2b05      	cmp	r3, #5
 800e80e:	d10e      	bne.n	800e82e <testturning+0x14e>
 800e810:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	2301      	movs	r3, #1
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e826:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e9e8 <testturning+0x308>
 800e82a:	f7fd f915 	bl	800ba58 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800e82e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e832:	2b06      	cmp	r3, #6
 800e834:	d10e      	bne.n	800e854 <testturning+0x174>
 800e836:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e83a:	9302      	str	r3, [sp, #8]
 800e83c:	2301      	movs	r3, #1
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e84a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e84c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800e9e8 <testturning+0x308>
 800e850:	f7fd fa6a 	bl	800bd28 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800e854:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e858:	2b07      	cmp	r3, #7
 800e85a:	d10e      	bne.n	800e87a <testturning+0x19a>
 800e85c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	2301      	movs	r3, #1
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e872:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e9e8 <testturning+0x308>
 800e876:	f7fd fc9f 	bl	800c1b8 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800e87a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e87e:	2b08      	cmp	r3, #8
 800e880:	d10e      	bne.n	800e8a0 <testturning+0x1c0>
 800e882:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e886:	9302      	str	r3, [sp, #8]
 800e888:	2301      	movs	r3, #1
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e898:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800e9e8 <testturning+0x308>
 800e89c:	f7fd fecc 	bl	800c638 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800e8a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8a4:	2b09      	cmp	r3, #9
 800e8a6:	d10e      	bne.n	800e8c6 <testturning+0x1e6>
 800e8a8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	9301      	str	r3, [sp, #4]
 800e8b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e8bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8be:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e9e8 <testturning+0x308>
 800e8c2:	f7fe f901 	bl	800cac8 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800e8c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8ca:	2b0a      	cmp	r3, #10
 800e8cc:	d10e      	bne.n	800e8ec <testturning+0x20c>
 800e8ce:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8d2:	9302      	str	r3, [sp, #8]
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	9301      	str	r3, [sp, #4]
 800e8d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800e8e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8e4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e9e8 <testturning+0x308>
 800e8e8:	f7fe fb32 	bl	800cf50 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800e8ec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8f0:	2b0b      	cmp	r3, #11
 800e8f2:	d10e      	bne.n	800e912 <testturning+0x232>
 800e8f4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8f8:	9302      	str	r3, [sp, #8]
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800e908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e90a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800e9e8 <testturning+0x308>
 800e90e:	f7fe fd11 	bl	800d334 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800e912:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e916:	2b0c      	cmp	r3, #12
 800e918:	d10e      	bne.n	800e938 <testturning+0x258>
 800e91a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e91e:	9302      	str	r3, [sp, #8]
 800e920:	2301      	movs	r3, #1
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e92e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e930:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e9e8 <testturning+0x308>
 800e934:	f7fe fee6 	bl	800d704 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800e938:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e93c:	2b0d      	cmp	r3, #13
 800e93e:	d10e      	bne.n	800e95e <testturning+0x27e>
 800e940:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	2301      	movs	r3, #1
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e956:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800e9e8 <testturning+0x308>
 800e95a:	f7ff f8c5 	bl	800dae8 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800e95e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e962:	2b0e      	cmp	r3, #14
 800e964:	d10e      	bne.n	800e984 <testturning+0x2a4>
 800e966:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e96a:	9302      	str	r3, [sp, #8]
 800e96c:	2301      	movs	r3, #1
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e97a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e97c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e9e8 <testturning+0x308>
 800e980:	f7ff fa9e 	bl	800dec0 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800e984:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e988:	2b0f      	cmp	r3, #15
 800e98a:	d10e      	bne.n	800e9aa <testturning+0x2ca>
 800e98c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e990:	9302      	str	r3, [sp, #8]
 800e992:	2301      	movs	r3, #1
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800e9a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e9e8 <testturning+0x308>
 800e9a6:	f7ff fc97 	bl	800e2d8 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800e9aa:	4b0e      	ldr	r3, [pc, #56]	; (800e9e4 <testturning+0x304>)
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9b0:	2003      	movs	r0, #3
 800e9b2:	f7f9 fe1b 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9b6:	2003      	movs	r0, #3
 800e9b8:	f7f9 fdf0 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e9bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9c0:	f7fa f912 	bl	8008be8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e9c4:	f7f9 fe74 	bl	80086b0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e9c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e9cc:	f7fa f90c 	bl	8008be8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	f7f9 fdd9 	bl	8008588 <pl_DriveMotor_standby>

}
 800e9d6:	bf00      	nop
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9e0:	b004      	add	sp, #16
 800e9e2:	4770      	bx	lr
 800e9e4:	2000f284 	.word	0x2000f284
 800e9e8:	c2c80000 	.word	0xc2c80000

0800e9ec <get_wallData_sensor>:





void get_wallData_sensor(_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]

	*front_wall = (g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <get_wallData_sensor+0x58>)
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	2b86      	cmp	r3, #134	; 0x86
 800e9fe:	bfcc      	ite	gt
 800ea00:	2301      	movgt	r3, #1
 800ea02:	2300      	movle	r3, #0
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	701a      	strb	r2, [r3, #0]
	*right_wall = (g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800ea0a:	4b0e      	ldr	r3, [pc, #56]	; (800ea44 <get_wallData_sensor+0x58>)
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea12:	4293      	cmp	r3, r2
 800ea14:	bfcc      	ite	gt
 800ea16:	2301      	movgt	r3, #1
 800ea18:	2300      	movle	r3, #0
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	701a      	strb	r2, [r3, #0]
	*left_wall  = (g_sensor_mean[SENSOR_LEFT]  >= L_PRESENCE);
 800ea20:	4b08      	ldr	r3, [pc, #32]	; (800ea44 <get_wallData_sensor+0x58>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	bfcc      	ite	gt
 800ea2c:	2301      	movgt	r3, #1
 800ea2e:	2300      	movle	r3, #0
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	701a      	strb	r2, [r3, #0]

}
 800ea36:	bf00      	nop
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20000474 	.word	0x20000474

0800ea48 <update_coordinate>:


void update_coordinate(int *x,int *y,int direction){
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3b01      	subs	r3, #1
 800ea58:	2b03      	cmp	r3, #3
 800ea5a:	d823      	bhi.n	800eaa4 <update_coordinate+0x5c>
 800ea5c:	a201      	add	r2, pc, #4	; (adr r2, 800ea64 <update_coordinate+0x1c>)
 800ea5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea62:	bf00      	nop
 800ea64:	0800ea75 	.word	0x0800ea75
 800ea68:	0800ea81 	.word	0x0800ea81
 800ea6c:	0800ea8d 	.word	0x0800ea8d
 800ea70:	0800ea99 	.word	0x0800ea99
	case 1://北
		*y += 1;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	601a      	str	r2, [r3, #0]
		break;
 800ea7e:	e011      	b.n	800eaa4 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	1c5a      	adds	r2, r3, #1
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	601a      	str	r2, [r3, #0]
		break;
 800ea8a:	e00b      	b.n	800eaa4 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	1e5a      	subs	r2, r3, #1
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	601a      	str	r2, [r3, #0]
		break;
 800ea96:	e005      	b.n	800eaa4 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	601a      	str	r2, [r3, #0]
		break;
 800eaa2:	bf00      	nop
	}



}
 800eaa4:	bf00      	nop
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <run_movement_continuity>:

void run_movement_continuity(int *direction,unsigned short front_count,unsigned short right_count,
		unsigned short back_count,unsigned short left_count,float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b08e      	sub	sp, #56	; 0x38
 800eab4:	af04      	add	r7, sp, #16
 800eab6:	61f8      	str	r0, [r7, #28]
 800eab8:	4608      	mov	r0, r1
 800eaba:	4611      	mov	r1, r2
 800eabc:	461a      	mov	r2, r3
 800eabe:	ed87 0a04 	vstr	s0, [r7, #16]
 800eac2:	edc7 0a03 	vstr	s1, [r7, #12]
 800eac6:	ed87 1a02 	vstr	s2, [r7, #8]
 800eaca:	edc7 1a01 	vstr	s3, [r7, #4]
 800eace:	4603      	mov	r3, r0
 800ead0:	837b      	strh	r3, [r7, #26]
 800ead2:	460b      	mov	r3, r1
 800ead4:	833b      	strh	r3, [r7, #24]
 800ead6:	4613      	mov	r3, r2
 800ead8:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800eada:	8b7a      	ldrh	r2, [r7, #26]
 800eadc:	8b3b      	ldrh	r3, [r7, #24]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d81d      	bhi.n	800eb1e <run_movement_continuity+0x6e>
 800eae2:	8b7a      	ldrh	r2, [r7, #26]
 800eae4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d819      	bhi.n	800eb1e <run_movement_continuity+0x6e>
 800eaea:	8b7a      	ldrh	r2, [r7, #26]
 800eaec:	8afb      	ldrh	r3, [r7, #22]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d815      	bhi.n	800eb1e <run_movement_continuity+0x6e>
		// 直進
		mode.WallControlMode=1;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb06:	ed97 2a02 	vldr	s4, [r7, #8]
 800eb0a:	edd7 1a04 	vldr	s3, [r7, #16]
 800eb0e:	ed97 1a04 	vldr	s2, [r7, #16]
 800eb12:	edd7 0a04 	vldr	s1, [r7, #16]
 800eb16:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800ec94 <run_movement_continuity+0x1e4>
 800eb1a:	f7f5 f8a5 	bl	8003c68 <straight_table2>
	}
	if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800eb1e:	8b3a      	ldrh	r2, [r7, #24]
 800eb20:	8b7b      	ldrh	r3, [r7, #26]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d21b      	bcs.n	800eb5e <run_movement_continuity+0xae>
 800eb26:	8b3a      	ldrh	r2, [r7, #24]
 800eb28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d817      	bhi.n	800eb5e <run_movement_continuity+0xae>
 800eb2e:	8b3a      	ldrh	r2, [r7, #24]
 800eb30:	8afb      	ldrh	r3, [r7, #22]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d813      	bhi.n	800eb5e <run_movement_continuity+0xae>
		// 右旋回
		slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800eb36:	2300      	movs	r3, #0
 800eb38:	9303      	str	r3, [sp, #12]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	9302      	str	r3, [sp, #8]
 800eb3e:	2300      	movs	r3, #0
 800eb40:	9301      	str	r3, [sp, #4]
 800eb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eb4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb4c:	ed97 0a04 	vldr	s0, [r7, #16]
 800eb50:	f7fb ff82 	bl	800aa58 <slalomR>
		*direction += 1;
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	601a      	str	r2, [r3, #0]
	}
	if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800eb5e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb60:	8b7b      	ldrh	r3, [r7, #26]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d21b      	bcs.n	800eb9e <run_movement_continuity+0xee>
 800eb66:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb68:	8b3b      	ldrh	r3, [r7, #24]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d217      	bcs.n	800eb9e <run_movement_continuity+0xee>
 800eb6e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eb70:	8afb      	ldrh	r3, [r7, #22]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d813      	bhi.n	800eb9e <run_movement_continuity+0xee>
		// 左旋回
		slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800eb76:	2300      	movs	r3, #0
 800eb78:	9303      	str	r3, [sp, #12]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	9302      	str	r3, [sp, #8]
 800eb7e:	2300      	movs	r3, #0
 800eb80:	9301      	str	r3, [sp, #4]
 800eb82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eb8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb8c:	ed97 0a04 	vldr	s0, [r7, #16]
 800eb90:	f7fc f948 	bl	800ae24 <slalomL>
		*direction -= 1;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	1e5a      	subs	r2, r3, #1
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800eb9e:	8afa      	ldrh	r2, [r7, #22]
 800eba0:	8b7b      	ldrh	r3, [r7, #26]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d272      	bcs.n	800ec8c <run_movement_continuity+0x1dc>
 800eba6:	8afa      	ldrh	r2, [r7, #22]
 800eba8:	8b3b      	ldrh	r3, [r7, #24]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d26e      	bcs.n	800ec8c <run_movement_continuity+0x1dc>
			&& back_count < left_count){
 800ebae:	8afa      	ldrh	r2, [r7, #22]
 800ebb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d26a      	bcs.n	800ec8c <run_movement_continuity+0x1dc>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		mode.WallControlMode=1;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebca:	ed97 2a02 	vldr	s4, [r7, #8]
 800ebce:	edd7 1a04 	vldr	s3, [r7, #16]
 800ebd2:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ec98 <run_movement_continuity+0x1e8>
 800ebd6:	edd7 0a04 	vldr	s1, [r7, #16]
 800ebda:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ec9c <run_movement_continuity+0x1ec>
 800ebde:	f7f5 f843 	bl	8003c68 <straight_table2>
		create_DijkstraMap();
 800ebe2:	f003 f9c3 	bl	8011f6c <create_DijkstraMap>
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ebe6:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800ebea:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800ebee:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	edd7 0a01 	vldr	s1, [r7, #4]
 800ebf8:	ed97 0a03 	vldr	s0, [r7, #12]
 800ebfc:	f7fb fe5a 	bl	800a8b4 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800ec00:	2064      	movs	r0, #100	; 0x64
 800ec02:	f7f9 fff1 	bl	8008be8 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800ec0c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d024      	beq.n	800ec5e <run_movement_continuity+0x1ae>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800ec14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec16:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800eca0 <run_movement_continuity+0x1f0>
 800ec1a:	eddf 1a22 	vldr	s3, [pc, #136]	; 800eca4 <run_movement_continuity+0x1f4>
 800ec1e:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800ec98 <run_movement_continuity+0x1e8>
 800ec22:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ec98 <run_movement_continuity+0x1e8>
 800ec26:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800ec2a:	f7f5 f81d 	bl	8003c68 <straight_table2>
		wait_ms_NoReset(100);
 800ec2e:	2064      	movs	r0, #100	; 0x64
 800ec30:	f7f9 ffda 	bl	8008be8 <wait_ms_NoReset>
		clear_Ierror();
 800ec34:	f7f6 fb28 	bl	8005288 <clear_Ierror>
		reset_speed();
 800ec38:	f7f2 f9f4 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec44:	ed97 2a02 	vldr	s4, [r7, #8]
 800ec48:	edd7 1a04 	vldr	s3, [r7, #16]
 800ec4c:	ed97 1a04 	vldr	s2, [r7, #16]
 800ec50:	eddf 0a11 	vldr	s1, [pc, #68]	; 800ec98 <run_movement_continuity+0x1e8>
 800ec54:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800eca8 <run_movement_continuity+0x1f8>
 800ec58:	f7f5 f806 	bl	8003c68 <straight_table2>
 800ec5c:	e011      	b.n	800ec82 <run_movement_continuity+0x1d2>
		}else{
			clear_Ierror();
 800ec5e:	f7f6 fb13 	bl	8005288 <clear_Ierror>
			mode.WallControlMode=0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ec68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec6a:	ed97 2a02 	vldr	s4, [r7, #8]
 800ec6e:	edd7 1a04 	vldr	s3, [r7, #16]
 800ec72:	ed97 1a04 	vldr	s2, [r7, #16]
 800ec76:	eddf 0a08 	vldr	s1, [pc, #32]	; 800ec98 <run_movement_continuity+0x1e8>
 800ec7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ecac <run_movement_continuity+0x1fc>
 800ec7e:	f7f4 fff3 	bl	8003c68 <straight_table2>
		}
		*direction = *direction + 2;
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	1c9a      	adds	r2, r3, #2
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	601a      	str	r2, [r3, #0]
	}

}
 800ec8c:	bf00      	nop
 800ec8e:	3728      	adds	r7, #40	; 0x28
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	42a40000 	.word	0x42a40000
 800ec98:	00000000 	.word	0x00000000
 800ec9c:	42140000 	.word	0x42140000
 800eca0:	447a0000 	.word	0x447a0000
 800eca4:	c3160000 	.word	0xc3160000
 800eca8:	42830000 	.word	0x42830000
 800ecac:	42540000 	.word	0x42540000

0800ecb0 <run_movement_suspension>:
void run_movement_suspension(int *direction, unsigned short front_count,
		unsigned short right_count, unsigned short back_count,
		unsigned short left_count, float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,
		_Bool front_wall, _Bool right_wall, _Bool left_wall,int x,int y,uint8_t MazeRecord_mode,uint8_t Dijkstra_mode) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08e      	sub	sp, #56	; 0x38
 800ecb4:	af04      	add	r7, sp, #16
 800ecb6:	61f8      	str	r0, [r7, #28]
 800ecb8:	4608      	mov	r0, r1
 800ecba:	4611      	mov	r1, r2
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	ed87 0a04 	vstr	s0, [r7, #16]
 800ecc2:	edc7 0a03 	vstr	s1, [r7, #12]
 800ecc6:	ed87 1a02 	vstr	s2, [r7, #8]
 800ecca:	edc7 1a01 	vstr	s3, [r7, #4]
 800ecce:	4603      	mov	r3, r0
 800ecd0:	837b      	strh	r3, [r7, #26]
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	833b      	strh	r3, [r7, #24]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	mode.WallControlMode = 1;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.calMazeMode = 0;
 800ece0:	2300      	movs	r3, #0
 800ece2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mode.WallCutMode = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	straight_table2(MAZE_SECTION / 2 - MAZE_OFFSET - (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), input_StraightVelocity, 0, input_StraightVelocity, input_StraightAcceleration, mode);
 800ecec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecee:	ed97 2a02 	vldr	s4, [r7, #8]
 800ecf2:	edd7 1a04 	vldr	s3, [r7, #16]
 800ecf6:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800ef84 <run_movement_suspension+0x2d4>
 800ecfa:	edd7 0a04 	vldr	s1, [r7, #16]
 800ecfe:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800ed02:	f7f4 ffb1 	bl	8003c68 <straight_table2>

	if(MazeRecord_mode==1){
 800ed06:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d10e      	bne.n	800ed2c <run_movement_suspension+0x7c>
		if(error_mode==0){
 800ed0e:	4b9e      	ldr	r3, [pc, #632]	; (800ef88 <run_movement_suspension+0x2d8>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <run_movement_suspension+0x6a>
		record_in();
 800ed16:	f7f9 f959 	bl	8007fcc <record_in>
		}
		clear_Ierror();
 800ed1a:	f7f6 fab5 	bl	8005288 <clear_Ierror>
		reset_gyro();
 800ed1e:	f7f2 ff73 	bl	8001c08 <reset_gyro>
		reset_speed();
 800ed22:	f7f2 f97f 	bl	8001024 <reset_speed>
		maze_mode = 1;
 800ed26:	4b99      	ldr	r3, [pc, #612]	; (800ef8c <run_movement_suspension+0x2dc>)
 800ed28:	2201      	movs	r2, #1
 800ed2a:	701a      	strb	r2, [r3, #0]
	}

	if(Dijkstra_mode==1){
 800ed2c:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d144      	bne.n	800edbe <run_movement_suspension+0x10e>
		create_DijkstraMap();
 800ed34:	f003 f91a 	bl	8011f6c <create_DijkstraMap>
		route_Dijkstra(); //ダイクストラ法の結果から最短ルートをスタックに入れる
 800ed38:	f004 fe50 	bl	80139dc <route_Dijkstra>
		create_StepCountMap_unknown();
 800ed3c:	f005 fb04 	bl	8014348 <create_StepCountMap_unknown>
		search_AroundWalkCount(&front_count, &right_count, &back_count, &left_count, x, y, *direction);
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f107 0216 	add.w	r2, r7, #22
 800ed48:	f107 0118 	add.w	r1, r7, #24
 800ed4c:	f107 001a 	add.w	r0, r7, #26
 800ed50:	9302      	str	r3, [sp, #8]
 800ed52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed62:	f002 ffdb 	bl	8011d1c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800ed66:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <run_movement_suspension+0xc2>
 800ed6e:	23ff      	movs	r3, #255	; 0xff
 800ed70:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800ed72:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <run_movement_suspension+0xce>
 800ed7a:	23ff      	movs	r3, #255	; 0xff
 800ed7c:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800ed7e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d001      	beq.n	800ed8a <run_movement_suspension+0xda>
 800ed86:	23ff      	movs	r3, #255	; 0xff
 800ed88:	863b      	strh	r3, [r7, #48]	; 0x30
		if (front_count == MAX_WALKCOUNT && right_count == MAX_WALKCOUNT && left_count == MAX_WALKCOUNT && back_count == MAX_WALKCOUNT) {
 800ed8a:	8b7b      	ldrh	r3, [r7, #26]
 800ed8c:	2bff      	cmp	r3, #255	; 0xff
 800ed8e:	d116      	bne.n	800edbe <run_movement_suspension+0x10e>
 800ed90:	8b3b      	ldrh	r3, [r7, #24]
 800ed92:	2bff      	cmp	r3, #255	; 0xff
 800ed94:	d113      	bne.n	800edbe <run_movement_suspension+0x10e>
 800ed96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed98:	2bff      	cmp	r3, #255	; 0xff
 800ed9a:	d110      	bne.n	800edbe <run_movement_suspension+0x10e>
 800ed9c:	8afb      	ldrh	r3, [r7, #22]
 800ed9e:	2bff      	cmp	r3, #255	; 0xff
 800eda0:	d10d      	bne.n	800edbe <run_movement_suspension+0x10e>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode = 1;
 800eda2:	4b79      	ldr	r3, [pc, #484]	; (800ef88 <run_movement_suspension+0x2d8>)
 800eda4:	2201      	movs	r2, #1
 800eda6:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode = 0;
 800eda8:	4b79      	ldr	r3, [pc, #484]	; (800ef90 <run_movement_suspension+0x2e0>)
 800edaa:	2200      	movs	r2, #0
 800edac:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2 * 2 * 2 * 2 * 2);
 800edae:	2020      	movs	r0, #32
 800edb0:	f7f8 feaa 	bl	8007b08 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800edb4:	f7f9 fc4e 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800edb8:	2000      	movs	r0, #0
 800edba:	f7f9 fbe5 	bl	8008588 <pl_DriveMotor_standby>
			//break;
		}
	}

if(error_mode==0){
 800edbe:	4b72      	ldr	r3, [pc, #456]	; (800ef88 <run_movement_suspension+0x2d8>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f040 80d9 	bne.w	800ef7a <run_movement_suspension+0x2ca>
	mode.WallControlMode = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.WallCutMode = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	mode.calMazeMode = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count) {
 800edda:	8b7a      	ldrh	r2, [r7, #26]
 800eddc:	8b3b      	ldrh	r3, [r7, #24]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d814      	bhi.n	800ee0c <run_movement_suspension+0x15c>
 800ede2:	8b7a      	ldrh	r2, [r7, #26]
 800ede4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d810      	bhi.n	800ee0c <run_movement_suspension+0x15c>
 800edea:	8b7a      	ldrh	r2, [r7, #26]
 800edec:	8afb      	ldrh	r3, [r7, #22]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d80c      	bhi.n	800ee0c <run_movement_suspension+0x15c>
		// 直進
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800edf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edf4:	ed97 2a02 	vldr	s4, [r7, #8]
 800edf8:	edd7 1a04 	vldr	s3, [r7, #16]
 800edfc:	ed97 1a04 	vldr	s2, [r7, #16]
 800ee00:	eddf 0a60 	vldr	s1, [pc, #384]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee04:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800ef94 <run_movement_suspension+0x2e4>
 800ee08:	f7f4 ff2e 	bl	8003c68 <straight_table2>
	}
	if (right_count < front_count && right_count <= left_count && right_count <= back_count) {
 800ee0c:	8b3a      	ldrh	r2, [r7, #24]
 800ee0e:	8b7b      	ldrh	r3, [r7, #26]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d229      	bcs.n	800ee68 <run_movement_suspension+0x1b8>
 800ee14:	8b3a      	ldrh	r2, [r7, #24]
 800ee16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d825      	bhi.n	800ee68 <run_movement_suspension+0x1b8>
 800ee1c:	8b3a      	ldrh	r2, [r7, #24]
 800ee1e:	8afb      	ldrh	r3, [r7, #22]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d821      	bhi.n	800ee68 <run_movement_suspension+0x1b8>
		// 右旋回
		turning_table2(-90, 0, 0, -input_TurningVelocity, input_TurningAcceleration);
 800ee24:	edd7 7a03 	vldr	s15, [r7, #12]
 800ee28:	eef1 7a67 	vneg.f32	s15, s15
 800ee2c:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee30:	eef0 1a67 	vmov.f32	s3, s15
 800ee34:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee38:	eddf 0a52 	vldr	s1, [pc, #328]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee3c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800ef98 <run_movement_suspension+0x2e8>
 800ee40:	f7f5 fc3c 	bl	80046bc <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ee44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee46:	ed97 2a02 	vldr	s4, [r7, #8]
 800ee4a:	edd7 1a04 	vldr	s3, [r7, #16]
 800ee4e:	ed97 1a04 	vldr	s2, [r7, #16]
 800ee52:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee56:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800ef94 <run_movement_suspension+0x2e4>
 800ee5a:	f7f4 ff05 	bl	8003c68 <straight_table2>
		*direction += 1;
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	601a      	str	r2, [r3, #0]
	}
	if (left_count < front_count && left_count < right_count && left_count <= back_count) {
 800ee68:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee6a:	8b7b      	ldrh	r3, [r7, #26]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d225      	bcs.n	800eebc <run_movement_suspension+0x20c>
 800ee70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee72:	8b3b      	ldrh	r3, [r7, #24]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d221      	bcs.n	800eebc <run_movement_suspension+0x20c>
 800ee78:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee7a:	8afb      	ldrh	r3, [r7, #22]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d81d      	bhi.n	800eebc <run_movement_suspension+0x20c>
		// 左旋回
		turning_table2(90, 0, 0, input_TurningVelocity, input_TurningAcceleration);
 800ee80:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee84:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee88:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee8c:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800ef84 <run_movement_suspension+0x2d4>
 800ee90:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800ef9c <run_movement_suspension+0x2ec>
 800ee94:	f7f5 fc12 	bl	80046bc <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ee98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee9a:	ed97 2a02 	vldr	s4, [r7, #8]
 800ee9e:	edd7 1a04 	vldr	s3, [r7, #16]
 800eea2:	ed97 1a04 	vldr	s2, [r7, #16]
 800eea6:	eddf 0a37 	vldr	s1, [pc, #220]	; 800ef84 <run_movement_suspension+0x2d4>
 800eeaa:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800ef94 <run_movement_suspension+0x2e4>
 800eeae:	f7f4 fedb 	bl	8003c68 <straight_table2>
		*direction -= 1;
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	1e5a      	subs	r2, r3, #1
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800eebc:	8afa      	ldrh	r2, [r7, #22]
 800eebe:	8b7b      	ldrh	r3, [r7, #26]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d25a      	bcs.n	800ef7a <run_movement_suspension+0x2ca>
 800eec4:	8afa      	ldrh	r2, [r7, #22]
 800eec6:	8b3b      	ldrh	r3, [r7, #24]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d256      	bcs.n	800ef7a <run_movement_suspension+0x2ca>
			&& back_count < left_count){
 800eecc:	8afa      	ldrh	r2, [r7, #22]
 800eece:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d252      	bcs.n	800ef7a <run_movement_suspension+0x2ca>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800eed4:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800eed8:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800eedc:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800eee0:	4618      	mov	r0, r3
 800eee2:	edd7 0a01 	vldr	s1, [r7, #4]
 800eee6:	ed97 0a03 	vldr	s0, [r7, #12]
 800eeea:	f7fb fce3 	bl	800a8b4 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800eeee:	2064      	movs	r0, #100	; 0x64
 800eef0:	f7f9 fe7a 	bl	8008be8 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800eefa:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d024      	beq.n	800ef4c <run_movement_suspension+0x29c>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800ef02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef04:	ed9f 2a26 	vldr	s4, [pc, #152]	; 800efa0 <run_movement_suspension+0x2f0>
 800ef08:	eddf 1a26 	vldr	s3, [pc, #152]	; 800efa4 <run_movement_suspension+0x2f4>
 800ef0c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800ef84 <run_movement_suspension+0x2d4>
 800ef10:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ef84 <run_movement_suspension+0x2d4>
 800ef14:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800ef18:	f7f4 fea6 	bl	8003c68 <straight_table2>
		wait_ms_NoReset(100);
 800ef1c:	2064      	movs	r0, #100	; 0x64
 800ef1e:	f7f9 fe63 	bl	8008be8 <wait_ms_NoReset>
		clear_Ierror();
 800ef22:	f7f6 f9b1 	bl	8005288 <clear_Ierror>
		reset_speed();
 800ef26:	f7f2 f87d 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ef30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef32:	ed97 2a02 	vldr	s4, [r7, #8]
 800ef36:	edd7 1a04 	vldr	s3, [r7, #16]
 800ef3a:	ed97 1a04 	vldr	s2, [r7, #16]
 800ef3e:	eddf 0a11 	vldr	s1, [pc, #68]	; 800ef84 <run_movement_suspension+0x2d4>
 800ef42:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800efa8 <run_movement_suspension+0x2f8>
 800ef46:	f7f4 fe8f 	bl	8003c68 <straight_table2>
 800ef4a:	e011      	b.n	800ef70 <run_movement_suspension+0x2c0>
		}else{
			clear_Ierror();
 800ef4c:	f7f6 f99c 	bl	8005288 <clear_Ierror>
			mode.WallControlMode=0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ef56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef58:	ed97 2a02 	vldr	s4, [r7, #8]
 800ef5c:	edd7 1a04 	vldr	s3, [r7, #16]
 800ef60:	ed97 1a04 	vldr	s2, [r7, #16]
 800ef64:	eddf 0a07 	vldr	s1, [pc, #28]	; 800ef84 <run_movement_suspension+0x2d4>
 800ef68:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ef94 <run_movement_suspension+0x2e4>
 800ef6c:	f7f4 fe7c 	bl	8003c68 <straight_table2>
		}
		*direction = *direction + 2;
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	1c9a      	adds	r2, r3, #2
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	601a      	str	r2, [r3, #0]
	}
}

}
 800ef7a:	bf00      	nop
 800ef7c:	3728      	adds	r7, #40	; 0x28
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	00000000 	.word	0x00000000
 800ef88:	20000813 	.word	0x20000813
 800ef8c:	20000836 	.word	0x20000836
 800ef90:	2000059c 	.word	0x2000059c
 800ef94:	42540000 	.word	0x42540000
 800ef98:	c2b40000 	.word	0xc2b40000
 800ef9c:	42b40000 	.word	0x42b40000
 800efa0:	447a0000 	.word	0x447a0000
 800efa4:	c3160000 	.word	0xc3160000
 800efa8:	42830000 	.word	0x42830000

0800efac <AdatiWayReturn>:



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800efac:	b084      	sub	sp, #16
 800efae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb2:	b0ea      	sub	sp, #424	; 0x1a8
 800efb4:	af5a      	add	r7, sp, #360	; 0x168
 800efb6:	ed87 0a05 	vstr	s0, [r7, #20]
 800efba:	edc7 0a04 	vstr	s1, [r7, #16]
 800efbe:	ed87 1a03 	vstr	s2, [r7, #12]
 800efc2:	edc7 1a02 	vstr	s3, [r7, #8]
 800efc6:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800efca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	//初期化
	maze_mode = 1; //迷路探索開始フラグ
 800efce:	4bb7      	ldr	r3, [pc, #732]	; (800f2ac <AdatiWayReturn+0x300>)
 800efd0:	2201      	movs	r2, #1
 800efd2:	701a      	strb	r2, [r3, #0]
	unsigned short front_count, right_count, back_count, left_count;
	int x=0;//構造体にしたい
 800efd4:	2300      	movs	r3, #0
 800efd6:	633b      	str	r3, [r7, #48]	; 0x30
	int y=0;
 800efd8:	2300      	movs	r3, #0
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
	int direction=1;
 800efdc:	2301      	movs	r3, #1
 800efde:	62bb      	str	r3, [r7, #40]	; 0x28
	_Bool front_wall,right_wall,left_wall;
	char timer_end_mode=0;
 800efe0:	2300      	movs	r3, #0
 800efe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int kitiku_distance;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800efe6:	2301      	movs	r3, #1
 800efe8:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800efea:	2300      	movs	r3, #0
 800efec:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800efee:	2300      	movs	r3, #0
 800eff0:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	77bb      	strb	r3, [r7, #30]

	//モータenable
	pl_DriveMotor_standby(ON);
 800eff6:	2001      	movs	r0, #1
 800eff8:	f7f9 fac6 	bl	8008588 <pl_DriveMotor_standby>
	wait_ms_NoReset(500);
 800effc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f000:	f7f9 fdf2 	bl	8008be8 <wait_ms_NoReset>
	//初期位置のセンサー確認
	get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f004:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f008:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f00c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fceb 	bl	800e9ec <get_wallData_sensor>
	//初期位置での壁更新
	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f01a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f01c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f024:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f028:	9201      	str	r2, [sp, #4]
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	462b      	mov	r3, r5
 800f02e:	4622      	mov	r2, r4
 800f030:	f002 f9a2 	bl	8011378 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800f034:	f005 fcba 	bl	80149ac <create_StepCountMap_queue>
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f038:	69f8      	ldr	r0, [r7, #28]
 800f03a:	ed97 2a03 	vldr	s4, [r7, #12]
 800f03e:	edd7 1a05 	vldr	s3, [r7, #20]
 800f042:	ed97 1a05 	vldr	s2, [r7, #20]
 800f046:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800f2b0 <AdatiWayReturn+0x304>
 800f04a:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800f2b4 <AdatiWayReturn+0x308>
 800f04e:	f7f4 fe0b 	bl	8003c68 <straight_table2>

	while (1) {

		update_coordinate(&x,&y,direction);
 800f052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff fcf3 	bl	800ea48 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f062:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f066:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f06a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff fcbc 	bl	800e9ec <get_wallData_sensor>

		mode.WallControlMode=1;
 800f074:	2301      	movs	r3, #1
 800f076:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800f078:	2301      	movs	r3, #1
 800f07a:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f080:	69f8      	ldr	r0, [r7, #28]
 800f082:	ed97 2a03 	vldr	s4, [r7, #12]
 800f086:	edd7 1a05 	vldr	s3, [r7, #20]
 800f08a:	ed97 1a05 	vldr	s2, [r7, #20]
 800f08e:	edd7 0a05 	vldr	s1, [r7, #20]
 800f092:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f096:	f7f4 fde7 	bl	8003c68 <straight_table2>
		//走行中計算
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f09a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f09c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f09e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f0a0:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f0ac:	9201      	str	r2, [sp, #4]
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	462b      	mov	r3, r5
 800f0b2:	4622      	mov	r2, r4
 800f0b4:	f002 f960 	bl	8011378 <update_wall>
		create_StepCountMap_queue();
 800f0b8:	f005 fc78 	bl	80149ac <create_StepCountMap_queue>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0c2:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f0c6:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f0ca:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f0ce:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f0d2:	9102      	str	r1, [sp, #8]
 800f0d4:	9201      	str	r2, [sp, #4]
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	4633      	mov	r3, r6
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4621      	mov	r1, r4
 800f0de:	f002 fe1d 	bl	8011d1c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <AdatiWayReturn+0x142>
 800f0ea:	23ff      	movs	r3, #255	; 0xff
 800f0ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f0ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <AdatiWayReturn+0x14e>
 800f0f6:	23ff      	movs	r3, #255	; 0xff
 800f0f8:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f0fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <AdatiWayReturn+0x15a>
 800f102:	23ff      	movs	r3, #255	; 0xff
 800f104:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f108:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f10a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f10c:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f10e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f110:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f112:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f114:	9102      	str	r1, [sp, #8]
 800f116:	9201      	str	r2, [sp, #4]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	4633      	mov	r3, r6
 800f11c:	462a      	mov	r2, r5
 800f11e:	4621      	mov	r1, r4
 800f120:	f001 fdd6 	bl	8010cd0 <decision_kitiku>

		mode.WallCutMode=1;
 800f124:	2301      	movs	r3, #1
 800f126:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800f128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f12c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f130:	4619      	mov	r1, r3
 800f132:	69f8      	ldr	r0, [r7, #28]
 800f134:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f138:	f7f5 fa54 	bl	80045e4 <End_straight>


		//異常終了
		if (x == 0 && y == 0) {
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d10b      	bne.n	800f15a <AdatiWayReturn+0x1ae>
 800f142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f144:	2b00      	cmp	r3, #0
 800f146:	d108      	bne.n	800f15a <AdatiWayReturn+0x1ae>
			error_mode=1;
 800f148:	4b5b      	ldr	r3, [pc, #364]	; (800f2b8 <AdatiWayReturn+0x30c>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f14e:	f7f9 fa81 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f152:	2000      	movs	r0, #0
 800f154:	f7f9 fa18 	bl	8008588 <pl_DriveMotor_standby>
			break;
 800f158:	e10b      	b.n	800f372 <AdatiWayReturn+0x3c6>
		}
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f15a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f15c:	2bff      	cmp	r3, #255	; 0xff
 800f15e:	d111      	bne.n	800f184 <AdatiWayReturn+0x1d8>
 800f160:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f162:	2bff      	cmp	r3, #255	; 0xff
 800f164:	d10e      	bne.n	800f184 <AdatiWayReturn+0x1d8>
 800f166:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f168:	2bff      	cmp	r3, #255	; 0xff
 800f16a:	d10b      	bne.n	800f184 <AdatiWayReturn+0x1d8>
 800f16c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f16e:	2bff      	cmp	r3, #255	; 0xff
 800f170:	d108      	bne.n	800f184 <AdatiWayReturn+0x1d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 800f172:	4b51      	ldr	r3, [pc, #324]	; (800f2b8 <AdatiWayReturn+0x30c>)
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f178:	f7f9 fa6c 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f17c:	2000      	movs	r0, #0
 800f17e:	f7f9 fa03 	bl	8008588 <pl_DriveMotor_standby>
			break;
 800f182:	e0f6      	b.n	800f372 <AdatiWayReturn+0x3c6>
		}
		//　時間制限
		if (g_timCount_sec>240){
 800f184:	4b4d      	ldr	r3, [pc, #308]	; (800f2bc <AdatiWayReturn+0x310>)
 800f186:	edd3 7a00 	vldr	s15, [r3]
 800f18a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f2c0 <AdatiWayReturn+0x314>
 800f18e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	dd08      	ble.n	800f1aa <AdatiWayReturn+0x1fe>
			timer_end_mode=1;
 800f198:	2301      	movs	r3, #1
 800f19a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f19e:	f7f9 fa59 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	f7f9 f9f0 	bl	8008588 <pl_DriveMotor_standby>
			break;
 800f1a8:	e0e3      	b.n	800f372 <AdatiWayReturn+0x3c6>
		}
		//正常終了
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d002      	beq.n	800f1b6 <AdatiWayReturn+0x20a>
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d146      	bne.n	800f244 <AdatiWayReturn+0x298>
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d002      	beq.n	800f1c2 <AdatiWayReturn+0x216>
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d140      	bne.n	800f244 <AdatiWayReturn+0x298>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f1c2:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f1c6:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f1ca:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f1ce:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1d4:	607b      	str	r3, [r7, #4]
 800f1d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f1da:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f1de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f1e2:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	9359      	str	r3, [sp, #356]	; 0x164
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	9358      	str	r3, [sp, #352]	; 0x160
 800f1ee:	9557      	str	r5, [sp, #348]	; 0x15c
 800f1f0:	9056      	str	r0, [sp, #344]	; 0x158
 800f1f2:	9155      	str	r1, [sp, #340]	; 0x154
 800f1f4:	9254      	str	r2, [sp, #336]	; 0x150
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	9353      	str	r3, [sp, #332]	; 0x14c
 800f1fa:	ab01      	add	r3, sp, #4
 800f1fc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f200:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f204:	4618      	mov	r0, r3
 800f206:	f011 fd1f 	bl	8020c48 <memcpy>
 800f20a:	9400      	str	r4, [sp, #0]
 800f20c:	edd7 1a02 	vldr	s3, [r7, #8]
 800f210:	ed97 1a03 	vldr	s2, [r7, #12]
 800f214:	edd7 0a04 	vldr	s1, [r7, #16]
 800f218:	ed97 0a05 	vldr	s0, [r7, #20]
 800f21c:	4653      	mov	r3, sl
 800f21e:	464a      	mov	r2, r9
 800f220:	4641      	mov	r1, r8
 800f222:	4630      	mov	r0, r6
 800f224:	f7ff fd44 	bl	800ecb0 <run_movement_suspension>
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 1, 1);
			if (direction >= 5) {direction = direction-4;}
 800f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22a:	2b04      	cmp	r3, #4
 800f22c:	dd02      	ble.n	800f234 <AdatiWayReturn+0x288>
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	3b04      	subs	r3, #4
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
			if (direction <= 0) {direction = direction+4;}
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	f300 8098 	bgt.w	800f36c <AdatiWayReturn+0x3c0>
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	3304      	adds	r3, #4
 800f240:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800f242:	e093      	b.n	800f36c <AdatiWayReturn+0x3c0>
		}

		if(know_mode==0){kitikukan = 0;}
 800f244:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d102      	bne.n	800f252 <AdatiWayReturn+0x2a6>
 800f24c:	4b1d      	ldr	r3, [pc, #116]	; (800f2c4 <AdatiWayReturn+0x318>)
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
		if (kitikukan == OFF) {
 800f252:	4b1c      	ldr	r3, [pc, #112]	; (800f2c4 <AdatiWayReturn+0x318>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d13a      	bne.n	800f2d0 <AdatiWayReturn+0x324>

			run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f25a:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f25c:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f260:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f264:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f26a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f26e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f272:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f276:	9155      	str	r1, [sp, #340]	; 0x154
 800f278:	9254      	str	r2, [sp, #336]	; 0x150
 800f27a:	9353      	str	r3, [sp, #332]	; 0x14c
 800f27c:	ab01      	add	r3, sp, #4
 800f27e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f282:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f286:	4618      	mov	r0, r3
 800f288:	f011 fcde 	bl	8020c48 <memcpy>
 800f28c:	9400      	str	r4, [sp, #0]
 800f28e:	edd7 1a02 	vldr	s3, [r7, #8]
 800f292:	ed97 1a03 	vldr	s2, [r7, #12]
 800f296:	edd7 0a04 	vldr	s1, [r7, #16]
 800f29a:	ed97 0a05 	vldr	s0, [r7, #20]
 800f29e:	464b      	mov	r3, r9
 800f2a0:	4642      	mov	r2, r8
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f7ff fc03 	bl	800eab0 <run_movement_continuity>
 800f2aa:	e04e      	b.n	800f34a <AdatiWayReturn+0x39e>
 800f2ac:	20000836 	.word	0x20000836
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	42830000 	.word	0x42830000
 800f2b8:	20000813 	.word	0x20000813
 800f2bc:	20000738 	.word	0x20000738
 800f2c0:	43700000 	.word	0x43700000
 800f2c4:	20000838 	.word	0x20000838
 800f2c8:	42140000 	.word	0x42140000
 800f2cc:	44610000 	.word	0x44610000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall);

		} else {
			mode.WallControlMode=1;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=1;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f2dc:	69f8      	ldr	r0, [r7, #28]
 800f2de:	ed97 2a03 	vldr	s4, [r7, #12]
 800f2e2:	edd7 1a05 	vldr	s3, [r7, #20]
 800f2e6:	ed97 1a05 	vldr	s2, [r7, #20]
 800f2ea:	edd7 0a05 	vldr	s1, [r7, #20]
 800f2ee:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 800f2c8 <AdatiWayReturn+0x31c>
 800f2f2:	f7f4 fcb9 	bl	8003c68 <straight_table2>
			compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f2f6:	f107 0320 	add.w	r3, r7, #32
 800f2fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f2fe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f302:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f306:	f001 fd55 	bl	8010db4 <compress_kitiku>
			End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f30a:	2201      	movs	r2, #1
 800f30c:	2101      	movs	r1, #1
 800f30e:	69f8      	ldr	r0, [r7, #28]
 800f310:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800f2c8 <AdatiWayReturn+0x31c>
 800f314:	f7f5 f966 	bl	80045e4 <End_straight>
			mode.calMazeMode=0;
 800f318:	2300      	movs	r3, #0
 800f31a:	77bb      	strb	r3, [r7, #30]
			straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800f31c:	6a3a      	ldr	r2, [r7, #32]
 800f31e:	4613      	mov	r3, r2
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	4413      	add	r3, r2
 800f324:	011a      	lsls	r2, r3, #4
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	ee07 3a90 	vmov	s15, r3
 800f32c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f330:	69f8      	ldr	r0, [r7, #28]
 800f332:	ed97 2a03 	vldr	s4, [r7, #12]
 800f336:	ed5f 1a1b 	vldr	s3, [pc, #-108]	; 800f2cc <AdatiWayReturn+0x320>
 800f33a:	ed97 1a05 	vldr	s2, [r7, #20]
 800f33e:	edd7 0a05 	vldr	s1, [r7, #20]
 800f342:	eeb0 0a67 	vmov.f32	s0, s15
 800f346:	f7f4 fc8f 	bl	8003c68 <straight_table2>
		}

		if (direction >= 5) {direction = direction-4;}
 800f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34c:	2b04      	cmp	r3, #4
 800f34e:	dd02      	ble.n	800f356 <AdatiWayReturn+0x3aa>
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	3b04      	subs	r3, #4
 800f354:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	2b00      	cmp	r3, #0
 800f35a:	dc02      	bgt.n	800f362 <AdatiWayReturn+0x3b6>
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	3304      	adds	r3, #4
 800f360:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f362:	4ba1      	ldr	r3, [pc, #644]	; (800f5e8 <AdatiWayReturn+0x63c>)
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	2b01      	cmp	r3, #1
 800f368:	d002      	beq.n	800f370 <AdatiWayReturn+0x3c4>
		update_coordinate(&x,&y,direction);
 800f36a:	e672      	b.n	800f052 <AdatiWayReturn+0xa6>
			break;
 800f36c:	bf00      	nop
 800f36e:	e000      	b.n	800f372 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f370:	bf00      	nop




	while (1) {
		update_coordinate(&x,&y,direction);
 800f372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f374:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f378:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff fb63 	bl	800ea48 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f382:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f386:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f38a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fb2c 	bl	800e9ec <get_wallData_sensor>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	2b02      	cmp	r3, #2
 800f398:	d002      	beq.n	800f3a0 <AdatiWayReturn+0x3f4>
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	d109      	bne.n	800f3b4 <AdatiWayReturn+0x408>
 800f3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <AdatiWayReturn+0x400>
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d103      	bne.n	800f3b4 <AdatiWayReturn+0x408>
			noGoalPillarMode=1;
 800f3ac:	4b8f      	ldr	r3, [pc, #572]	; (800f5ec <AdatiWayReturn+0x640>)
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	701a      	strb	r2, [r3, #0]
 800f3b2:	e002      	b.n	800f3ba <AdatiWayReturn+0x40e>
		}else{
			noGoalPillarMode=0;
 800f3b4:	4b8d      	ldr	r3, [pc, #564]	; (800f5ec <AdatiWayReturn+0x640>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
		}

		mode.WallControlMode=1;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f3c6:	69f8      	ldr	r0, [r7, #28]
 800f3c8:	ed97 2a03 	vldr	s4, [r7, #12]
 800f3cc:	edd7 1a05 	vldr	s3, [r7, #20]
 800f3d0:	ed97 1a05 	vldr	s2, [r7, #20]
 800f3d4:	edd7 0a05 	vldr	s1, [r7, #20]
 800f3d8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f3dc:	f7f4 fc44 	bl	8003c68 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3e4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f3e6:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f3ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3ee:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f3f2:	9201      	str	r2, [sp, #4]
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	4622      	mov	r2, r4
 800f3fa:	f001 ffbd 	bl	8011378 <update_wall>
		if(Dijkstra_mode==1){
 800f3fe:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 800f402:	2b01      	cmp	r3, #1
 800f404:	d104      	bne.n	800f410 <AdatiWayReturn+0x464>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800f406:	f004 fae9 	bl	80139dc <route_Dijkstra>
			create_StepCountMap_unknown();
 800f40a:	f004 ff9d 	bl	8014348 <create_StepCountMap_unknown>
 800f40e:	e001      	b.n	800f414 <AdatiWayReturn+0x468>
		}else{
			create_StepCountMapBack_queue();
 800f410:	f005 fdb2 	bl	8014f78 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f41a:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f41e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f422:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f426:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f42a:	9102      	str	r1, [sp, #8]
 800f42c:	9201      	str	r2, [sp, #4]
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	4633      	mov	r3, r6
 800f432:	462a      	mov	r2, r5
 800f434:	4621      	mov	r1, r4
 800f436:	f002 fc71 	bl	8011d1c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f43a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <AdatiWayReturn+0x49a>
 800f442:	23ff      	movs	r3, #255	; 0xff
 800f444:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <AdatiWayReturn+0x4a6>
 800f44e:	23ff      	movs	r3, #255	; 0xff
 800f450:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f452:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <AdatiWayReturn+0x4b2>
 800f45a:	23ff      	movs	r3, #255	; 0xff
 800f45c:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f45e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f460:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f462:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f464:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f466:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f468:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f46a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f46c:	9102      	str	r1, [sp, #8]
 800f46e:	9201      	str	r2, [sp, #4]
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	4633      	mov	r3, r6
 800f474:	462a      	mov	r2, r5
 800f476:	4621      	mov	r1, r4
 800f478:	f001 fc2a 	bl	8010cd0 <decision_kitiku>
		mode.WallCutMode=1;
 800f47c:	2301      	movs	r3, #1
 800f47e:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800f480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f484:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f488:	4619      	mov	r1, r3
 800f48a:	69f8      	ldr	r0, [r7, #28]
 800f48c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f490:	f7f5 f8a8 	bl	80045e4 <End_straight>

		//異常終了
        if(back_count < front_count && back_count < right_count && back_count < left_count){
 800f494:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f498:	429a      	cmp	r2, r3
 800f49a:	d20a      	bcs.n	800f4b2 <AdatiWayReturn+0x506>
 800f49c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f49e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d206      	bcs.n	800f4b2 <AdatiWayReturn+0x506>
 800f4a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f4a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d202      	bcs.n	800f4b2 <AdatiWayReturn+0x506>
            Dijkstra_maker_flag=1;
 800f4ac:	4b50      	ldr	r3, [pc, #320]	; (800f5f0 <AdatiWayReturn+0x644>)
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	701a      	strb	r2, [r3, #0]
        }
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f4b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4b4:	2bff      	cmp	r3, #255	; 0xff
 800f4b6:	d10b      	bne.n	800f4d0 <AdatiWayReturn+0x524>
 800f4b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4ba:	2bff      	cmp	r3, #255	; 0xff
 800f4bc:	d108      	bne.n	800f4d0 <AdatiWayReturn+0x524>
 800f4be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4c0:	2bff      	cmp	r3, #255	; 0xff
 800f4c2:	d105      	bne.n	800f4d0 <AdatiWayReturn+0x524>
 800f4c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f4c6:	2bff      	cmp	r3, #255	; 0xff
 800f4c8:	d102      	bne.n	800f4d0 <AdatiWayReturn+0x524>
			// 迷路破損のため、ダイクストラ法更新
			Dijkstra_maker_flag=1;
 800f4ca:	4b49      	ldr	r3, [pc, #292]	; (800f5f0 <AdatiWayReturn+0x644>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	701a      	strb	r2, [r3, #0]
		}
		if (x<0 || y<0 || x>15 || y>15){
 800f4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	db08      	blt.n	800f4e8 <AdatiWayReturn+0x53c>
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	db05      	blt.n	800f4e8 <AdatiWayReturn+0x53c>
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	2b0f      	cmp	r3, #15
 800f4e0:	dc02      	bgt.n	800f4e8 <AdatiWayReturn+0x53c>
 800f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e4:	2b0f      	cmp	r3, #15
 800f4e6:	dd0e      	ble.n	800f506 <AdatiWayReturn+0x55a>
			// 自己位置の破損
			error_mode=1;
 800f4e8:	4b3f      	ldr	r3, [pc, #252]	; (800f5e8 <AdatiWayReturn+0x63c>)
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode=0;
 800f4ee:	4b41      	ldr	r3, [pc, #260]	; (800f5f4 <AdatiWayReturn+0x648>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2*2*2*2);
 800f4f4:	2010      	movs	r0, #16
 800f4f6:	f7f8 fb07 	bl	8007b08 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800f4fa:	f7f9 f8ab 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f4fe:	2000      	movs	r0, #0
 800f500:	f7f9 f842 	bl	8008588 <pl_DriveMotor_standby>
			break;
 800f504:	e105      	b.n	800f712 <AdatiWayReturn+0x766>
		}
		if (g_timCount_sec>240){
 800f506:	4b3c      	ldr	r3, [pc, #240]	; (800f5f8 <AdatiWayReturn+0x64c>)
 800f508:	edd3 7a00 	vldr	s15, [r3]
 800f50c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f5fc <AdatiWayReturn+0x650>
 800f510:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f518:	dd08      	ble.n	800f52c <AdatiWayReturn+0x580>
			// 秒数エンド
			timer_end_mode=1;
 800f51a:	2301      	movs	r3, #1
 800f51c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f520:	f7f9 f898 	bl	8008654 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f524:	2000      	movs	r0, #0
 800f526:	f7f9 f82f 	bl	8008588 <pl_DriveMotor_standby>
			break;
 800f52a:	e0f2      	b.n	800f712 <AdatiWayReturn+0x766>
		}
		//正常終了
		if(x == 0 && y == 0) {
 800f52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d122      	bne.n	800f578 <AdatiWayReturn+0x5cc>
 800f532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d11f      	bne.n	800f578 <AdatiWayReturn+0x5cc>
			mode.WallControlMode=0;
 800f538:	2300      	movs	r3, #0
 800f53a:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f540:	2300      	movs	r3, #0
 800f542:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800f544:	69f8      	ldr	r0, [r7, #28]
 800f546:	ed97 2a03 	vldr	s4, [r7, #12]
 800f54a:	edd7 1a05 	vldr	s3, [r7, #20]
 800f54e:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800f600 <AdatiWayReturn+0x654>
 800f552:	edd7 0a05 	vldr	s1, [r7, #20]
 800f556:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800f604 <AdatiWayReturn+0x658>
 800f55a:	f7f4 fb85 	bl	8003c68 <straight_table2>
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800f55e:	ed97 2a02 	vldr	s4, [r7, #8]
 800f562:	edd7 1a04 	vldr	s3, [r7, #16]
 800f566:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800f600 <AdatiWayReturn+0x654>
 800f56a:	eddf 0a25 	vldr	s1, [pc, #148]	; 800f600 <AdatiWayReturn+0x654>
 800f56e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800f608 <AdatiWayReturn+0x65c>
 800f572:	f7f5 f8a3 	bl	80046bc <turning_table2>
			break;
 800f576:	e0cc      	b.n	800f712 <AdatiWayReturn+0x766>
		}


		if(Dijkstra_maker_flag==1){
 800f578:	4b1d      	ldr	r3, [pc, #116]	; (800f5f0 <AdatiWayReturn+0x644>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d145      	bne.n	800f60c <AdatiWayReturn+0x660>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f580:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f584:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f588:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f58c:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f592:	607b      	str	r3, [r7, #4]
 800f594:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f598:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f59e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f5a0:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	9359      	str	r3, [sp, #356]	; 0x164
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9358      	str	r3, [sp, #352]	; 0x160
 800f5ac:	9557      	str	r5, [sp, #348]	; 0x15c
 800f5ae:	9056      	str	r0, [sp, #344]	; 0x158
 800f5b0:	9155      	str	r1, [sp, #340]	; 0x154
 800f5b2:	9254      	str	r2, [sp, #336]	; 0x150
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	9353      	str	r3, [sp, #332]	; 0x14c
 800f5b8:	ab01      	add	r3, sp, #4
 800f5ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f5be:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f011 fb40 	bl	8020c48 <memcpy>
 800f5c8:	9400      	str	r4, [sp, #0]
 800f5ca:	edd7 1a02 	vldr	s3, [r7, #8]
 800f5ce:	ed97 1a03 	vldr	s2, [r7, #12]
 800f5d2:	edd7 0a04 	vldr	s1, [r7, #16]
 800f5d6:	ed97 0a05 	vldr	s0, [r7, #20]
 800f5da:	4653      	mov	r3, sl
 800f5dc:	464a      	mov	r2, r9
 800f5de:	4641      	mov	r1, r8
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7ff fb65 	bl	800ecb0 <run_movement_suspension>
 800f5e6:	e082      	b.n	800f6ee <AdatiWayReturn+0x742>
 800f5e8:	20000813 	.word	0x20000813
 800f5ec:	20000535 	.word	0x20000535
 800f5f0:	200011f0 	.word	0x200011f0
 800f5f4:	2000059c 	.word	0x2000059c
 800f5f8:	20000738 	.word	0x20000738
 800f5fc:	43700000 	.word	0x43700000
 800f600:	00000000 	.word	0x00000000
 800f604:	42140000 	.word	0x42140000
 800f608:	43340000 	.word	0x43340000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 0, 1);
		}else{

			if(know_mode==0){kitikukan = 0;}
 800f60c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f610:	2b00      	cmp	r3, #0
 800f612:	d102      	bne.n	800f61a <AdatiWayReturn+0x66e>
 800f614:	4b54      	ldr	r3, [pc, #336]	; (800f768 <AdatiWayReturn+0x7bc>)
 800f616:	2200      	movs	r2, #0
 800f618:	601a      	str	r2, [r3, #0]
			if (kitikukan == OFF) {
 800f61a:	4b53      	ldr	r3, [pc, #332]	; (800f768 <AdatiWayReturn+0x7bc>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d128      	bne.n	800f674 <AdatiWayReturn+0x6c8>
				run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f622:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f624:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f628:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f62c:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f632:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f636:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f63a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f63e:	9155      	str	r1, [sp, #340]	; 0x154
 800f640:	9254      	str	r2, [sp, #336]	; 0x150
 800f642:	9353      	str	r3, [sp, #332]	; 0x14c
 800f644:	ab01      	add	r3, sp, #4
 800f646:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f64a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f64e:	4618      	mov	r0, r3
 800f650:	f011 fafa 	bl	8020c48 <memcpy>
 800f654:	9400      	str	r4, [sp, #0]
 800f656:	edd7 1a02 	vldr	s3, [r7, #8]
 800f65a:	ed97 1a03 	vldr	s2, [r7, #12]
 800f65e:	edd7 0a04 	vldr	s1, [r7, #16]
 800f662:	ed97 0a05 	vldr	s0, [r7, #20]
 800f666:	464b      	mov	r3, r9
 800f668:	4642      	mov	r2, r8
 800f66a:	4631      	mov	r1, r6
 800f66c:	4628      	mov	r0, r5
 800f66e:	f7ff fa1f 	bl	800eab0 <run_movement_continuity>
 800f672:	e03c      	b.n	800f6ee <AdatiWayReturn+0x742>
						input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
						front_wall, right_wall, left_wall);
			} else {
				mode.WallControlMode=1;
 800f674:	2301      	movs	r3, #1
 800f676:	773b      	strb	r3, [r7, #28]
				mode.calMazeMode=1;
 800f678:	2301      	movs	r3, #1
 800f67a:	77bb      	strb	r3, [r7, #30]
				mode.WallCutMode=0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	77fb      	strb	r3, [r7, #31]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f680:	69f8      	ldr	r0, [r7, #28]
 800f682:	ed97 2a03 	vldr	s4, [r7, #12]
 800f686:	edd7 1a05 	vldr	s3, [r7, #20]
 800f68a:	ed97 1a05 	vldr	s2, [r7, #20]
 800f68e:	edd7 0a05 	vldr	s1, [r7, #20]
 800f692:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800f76c <AdatiWayReturn+0x7c0>
 800f696:	f7f4 fae7 	bl	8003c68 <straight_table2>
				compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f69a:	f107 0320 	add.w	r3, r7, #32
 800f69e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f6a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f6a6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f6aa:	f001 fb83 	bl	8010db4 <compress_kitiku>
				End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	2101      	movs	r1, #1
 800f6b2:	69f8      	ldr	r0, [r7, #28]
 800f6b4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f76c <AdatiWayReturn+0x7c0>
 800f6b8:	f7f4 ff94 	bl	80045e4 <End_straight>
				mode.calMazeMode=0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	77bb      	strb	r3, [r7, #30]
				straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800f6c0:	6a3a      	ldr	r2, [r7, #32]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	4413      	add	r3, r2
 800f6c8:	011a      	lsls	r2, r3, #4
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	ee07 3a90 	vmov	s15, r3
 800f6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6d4:	69f8      	ldr	r0, [r7, #28]
 800f6d6:	ed97 2a03 	vldr	s4, [r7, #12]
 800f6da:	eddf 1a25 	vldr	s3, [pc, #148]	; 800f770 <AdatiWayReturn+0x7c4>
 800f6de:	ed97 1a05 	vldr	s2, [r7, #20]
 800f6e2:	edd7 0a05 	vldr	s1, [r7, #20]
 800f6e6:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ea:	f7f4 fabd 	bl	8003c68 <straight_table2>
			}

		}

		if (direction >= 5) {direction = direction-4;}
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	2b04      	cmp	r3, #4
 800f6f2:	dd02      	ble.n	800f6fa <AdatiWayReturn+0x74e>
 800f6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f6:	3b04      	subs	r3, #4
 800f6f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	dc02      	bgt.n	800f706 <AdatiWayReturn+0x75a>
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	3304      	adds	r3, #4
 800f704:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f706:	4b1b      	ldr	r3, [pc, #108]	; (800f774 <AdatiWayReturn+0x7c8>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d000      	beq.n	800f710 <AdatiWayReturn+0x764>
		update_coordinate(&x,&y,direction);
 800f70e:	e630      	b.n	800f372 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f710:	bf00      	nop

		}



	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800f712:	2000      	movs	r0, #0
 800f714:	f7f8 ff38 	bl	8008588 <pl_DriveMotor_standby>
	maze_mode = 0;
 800f718:	4b17      	ldr	r3, [pc, #92]	; (800f778 <AdatiWayReturn+0x7cc>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(100);
 800f71e:	2064      	movs	r0, #100	; 0x64
 800f720:	f7f9 fa62 	bl	8008be8 <wait_ms_NoReset>
	maze_display();
 800f724:	f005 ff60 	bl	80155e8 <maze_display>
	create_StepCountMap_queue();
 800f728:	f005 f940 	bl	80149ac <create_StepCountMap_queue>
	if(walk_count[0][0] == MAX_WALKCOUNT){
 800f72c:	4b13      	ldr	r3, [pc, #76]	; (800f77c <AdatiWayReturn+0x7d0>)
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	2bff      	cmp	r3, #255	; 0xff
 800f732:	d102      	bne.n	800f73a <AdatiWayReturn+0x78e>
		error_mode = 1;
 800f734:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <AdatiWayReturn+0x7c8>)
 800f736:	2201      	movs	r2, #1
 800f738:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800f73a:	4b0e      	ldr	r3, [pc, #56]	; (800f774 <AdatiWayReturn+0x7c8>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d102      	bne.n	800f748 <AdatiWayReturn+0x79c>
		record_in();
 800f742:	f7f8 fc43 	bl	8007fcc <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800f746:	e008      	b.n	800f75a <AdatiWayReturn+0x7ae>
	} else if(timer_end_mode==0) {
 800f748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <AdatiWayReturn+0x7aa>
		record_out();
 800f750:	f7f8 fcf2 	bl	8008138 <record_out>
}
 800f754:	e001      	b.n	800f75a <AdatiWayReturn+0x7ae>
		record_in();
 800f756:	f7f8 fc39 	bl	8007fcc <record_in>
}
 800f75a:	bf00      	nop
 800f75c:	3740      	adds	r7, #64	; 0x40
 800f75e:	46bd      	mov	sp, r7
 800f760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f764:	b004      	add	sp, #16
 800f766:	4770      	bx	lr
 800f768:	20000838 	.word	0x20000838
 800f76c:	42140000 	.word	0x42140000
 800f770:	447a0000 	.word	0x447a0000
 800f774:	20000813 	.word	0x20000813
 800f778:	20000836 	.word	0x20000836
 800f77c:	200011f4 	.word	0x200011f4

0800f780 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f782:	b08b      	sub	sp, #44	; 0x2c
 800f784:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	607b      	str	r3, [r7, #4]
	int y = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800f78e:	2301      	movs	r3, #1
 800f790:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800f792:	4b8b      	ldr	r3, [pc, #556]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f794:	2200      	movs	r2, #0
 800f796:	801a      	strh	r2, [r3, #0]
	create_DijkstraMap();
 800f798:	f002 fbe8 	bl	8011f6c <create_DijkstraMap>
	maze_display_Dijkstra();
 800f79c:	f006 f838 	bl	8015810 <maze_display_Dijkstra>
	pass[0] = 1;
 800f7a0:	4b88      	ldr	r3, [pc, #544]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	1d3b      	adds	r3, r7, #4
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7ff f94b 	bl	800ea48 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d002      	beq.n	800f7be <pass_maker_Dijkstra+0x3e>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b03      	cmp	r3, #3
 800f7bc:	d13a      	bne.n	800f834 <pass_maker_Dijkstra+0xb4>
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <pass_maker_Dijkstra+0x4a>
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d134      	bne.n	800f834 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800f7ca:	4b7d      	ldr	r3, [pc, #500]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	4b7c      	ldr	r3, [pc, #496]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	da05      	bge.n	800f7e6 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800f7da:	4b79      	ldr	r3, [pc, #484]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	4b77      	ldr	r3, [pc, #476]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f7e4:	801a      	strh	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800f7e6:	4b76      	ldr	r3, [pc, #472]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	4b75      	ldr	r3, [pc, #468]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f2:	4a73      	ldr	r2, [pc, #460]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f7f4:	8812      	ldrh	r2, [r2, #0]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	4a72      	ldr	r2, [pc, #456]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f7fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	3302      	adds	r3, #2
 800f804:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2b05      	cmp	r3, #5
 800f80a:	d101      	bne.n	800f810 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800f80c:	2301      	movs	r3, #1
 800f80e:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	2b06      	cmp	r3, #6
 800f814:	d101      	bne.n	800f81a <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800f816:	2302      	movs	r3, #2
 800f818:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d101      	bne.n	800f824 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800f820:	2304      	movs	r3, #4
 800f822:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f82a:	f040 80c2 	bne.w	800f9b2 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f82e:	2303      	movs	r3, #3
 800f830:	617b      	str	r3, [r7, #20]
					}
					break;
 800f832:	e0be      	b.n	800f9b2 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	6839      	ldr	r1, [r7, #0]
 800f838:	f107 020b 	add.w	r2, r7, #11
 800f83c:	f107 0309 	add.w	r3, r7, #9
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	f107 030a 	add.w	r3, r7, #10
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	4613      	mov	r3, r2
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	f001 ffa8 	bl	80117a0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	f107 060c 	add.w	r6, r7, #12
 800f858:	f107 050e 	add.w	r5, r7, #14
 800f85c:	f107 0410 	add.w	r4, r7, #16
 800f860:	f107 0012 	add.w	r0, r7, #18
 800f864:	6979      	ldr	r1, [r7, #20]
 800f866:	9102      	str	r1, [sp, #8]
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	4633      	mov	r3, r6
 800f86e:	462a      	mov	r2, r5
 800f870:	4621      	mov	r1, r4
 800f872:	f002 fae1 	bl	8011e38 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f876:	7afb      	ldrb	r3, [r7, #11]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <pass_maker_Dijkstra+0x102>
 800f87c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f880:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f882:	7abb      	ldrb	r3, [r7, #10]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <pass_maker_Dijkstra+0x10e>
 800f888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f88c:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f88e:	7a7b      	ldrb	r3, [r7, #9]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <pass_maker_Dijkstra+0x11a>
 800f894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f898:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f89a:	8a7b      	ldrh	r3, [r7, #18]
 800f89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d10e      	bne.n	800f8c2 <pass_maker_Dijkstra+0x142>
 800f8a4:	8a3b      	ldrh	r3, [r7, #16]
 800f8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d109      	bne.n	800f8c2 <pass_maker_Dijkstra+0x142>
 800f8ae:	89bb      	ldrh	r3, [r7, #12]
 800f8b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d104      	bne.n	800f8c2 <pass_maker_Dijkstra+0x142>
 800f8b8:	89fb      	ldrh	r3, [r7, #14]
 800f8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d079      	beq.n	800f9b6 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f8c2:	8a7a      	ldrh	r2, [r7, #18]
 800f8c4:	8a3b      	ldrh	r3, [r7, #16]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d822      	bhi.n	800f910 <pass_maker_Dijkstra+0x190>
 800f8ca:	8a7a      	ldrh	r2, [r7, #18]
 800f8cc:	89bb      	ldrh	r3, [r7, #12]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d81e      	bhi.n	800f910 <pass_maker_Dijkstra+0x190>
 800f8d2:	8a7a      	ldrh	r2, [r7, #18]
 800f8d4:	89fb      	ldrh	r3, [r7, #14]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d81a      	bhi.n	800f910 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f8da:	4b39      	ldr	r3, [pc, #228]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	4b38      	ldr	r3, [pc, #224]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	da05      	bge.n	800f8f6 <pass_maker_Dijkstra+0x176>
 800f8ea:	4b35      	ldr	r3, [pc, #212]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f8ec:	881b      	ldrh	r3, [r3, #0]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	4b33      	ldr	r3, [pc, #204]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f8f4:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f8f6:	4b32      	ldr	r3, [pc, #200]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	4b31      	ldr	r3, [pc, #196]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f902:	4a2f      	ldr	r2, [pc, #188]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f904:	8812      	ldrh	r2, [r2, #0]
 800f906:	4611      	mov	r1, r2
 800f908:	3302      	adds	r3, #2
 800f90a:	4a2e      	ldr	r2, [pc, #184]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f90c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f910:	8a3a      	ldrh	r2, [r7, #16]
 800f912:	8a7b      	ldrh	r3, [r7, #18]
 800f914:	429a      	cmp	r2, r3
 800f916:	d218      	bcs.n	800f94a <pass_maker_Dijkstra+0x1ca>
 800f918:	8a3a      	ldrh	r2, [r7, #16]
 800f91a:	89bb      	ldrh	r3, [r7, #12]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d814      	bhi.n	800f94a <pass_maker_Dijkstra+0x1ca>
 800f920:	8a3a      	ldrh	r2, [r7, #16]
 800f922:	89fb      	ldrh	r3, [r7, #14]
 800f924:	429a      	cmp	r2, r3
 800f926:	d810      	bhi.n	800f94a <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f928:	4b25      	ldr	r3, [pc, #148]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f92a:	881b      	ldrh	r3, [r3, #0]
 800f92c:	3301      	adds	r3, #1
 800f92e:	b29a      	uxth	r2, r3
 800f930:	4b23      	ldr	r3, [pc, #140]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f932:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -2;
 800f934:	4b22      	ldr	r3, [pc, #136]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	4619      	mov	r1, r3
 800f93a:	4b22      	ldr	r3, [pc, #136]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f93c:	f06f 0201 	mvn.w	r2, #1
 800f940:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	3301      	adds	r3, #1
 800f948:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f94a:	89ba      	ldrh	r2, [r7, #12]
 800f94c:	8a7b      	ldrh	r3, [r7, #18]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d218      	bcs.n	800f984 <pass_maker_Dijkstra+0x204>
 800f952:	89ba      	ldrh	r2, [r7, #12]
 800f954:	8a3b      	ldrh	r3, [r7, #16]
 800f956:	429a      	cmp	r2, r3
 800f958:	d214      	bcs.n	800f984 <pass_maker_Dijkstra+0x204>
 800f95a:	89ba      	ldrh	r2, [r7, #12]
 800f95c:	89fb      	ldrh	r3, [r7, #14]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d810      	bhi.n	800f984 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f962:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	b29a      	uxth	r2, r3
 800f96a:	4b15      	ldr	r3, [pc, #84]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f96c:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -3;
 800f96e:	4b14      	ldr	r3, [pc, #80]	; (800f9c0 <pass_maker_Dijkstra+0x240>)
 800f970:	881b      	ldrh	r3, [r3, #0]
 800f972:	4619      	mov	r1, r3
 800f974:	4b13      	ldr	r3, [pc, #76]	; (800f9c4 <pass_maker_Dijkstra+0x244>)
 800f976:	f06f 0202 	mvn.w	r2, #2
 800f97a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	3b01      	subs	r3, #1
 800f982:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b05      	cmp	r3, #5
 800f988:	d101      	bne.n	800f98e <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f98a:	2301      	movs	r3, #1
 800f98c:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b06      	cmp	r3, #6
 800f992:	d101      	bne.n	800f998 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f994:	2302      	movs	r3, #2
 800f996:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f99e:	2304      	movs	r3, #4
 800f9a0:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a8:	f47f aefd 	bne.w	800f7a6 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f9b0:	e6f9      	b.n	800f7a6 <pass_maker_Dijkstra+0x26>
					break;
 800f9b2:	bf00      	nop
 800f9b4:	e000      	b.n	800f9b8 <pass_maker_Dijkstra+0x238>
			break;
 800f9b6:	bf00      	nop
		}

	}
}
 800f9b8:	bf00      	nop
 800f9ba:	371c      	adds	r7, #28
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9c0:	20000834 	.word	0x20000834
 800f9c4:	2000083c 	.word	0x2000083c

0800f9c8 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b0e2      	sub	sp, #392	; 0x188
 800f9cc:	af50      	add	r7, sp, #320	; 0x140
 800f9ce:	ed87 0a05 	vstr	s0, [r7, #20]
 800f9d2:	edc7 0a04 	vstr	s1, [r7, #16]
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	4608      	mov	r0, r1
 800f9da:	4611      	mov	r1, r2
 800f9dc:	461a      	mov	r2, r3
 800f9de:	ed87 1a01 	vstr	s2, [r7, #4]
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	72fb      	strb	r3, [r7, #11]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	72bb      	strb	r3, [r7, #10]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f9ee:	f06f 0301 	mvn.w	r3, #1
 800f9f2:	643b      	str	r3, [r7, #64]	; 0x40

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800fa00:	2300      	movs	r3, #0
 800fa02:	77bb      	strb	r3, [r7, #30]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800fa04:	2300      	movs	r3, #0
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
 800fa08:	e007      	b.n	800fa1a <run_shortest+0x52>
 800fa0a:	4a07      	ldr	r2, [pc, #28]	; (800fa28 <run_shortest+0x60>)
 800fa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0e:	2100      	movs	r1, #0
 800fa10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800fa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa16:	3301      	adds	r3, #1
 800fa18:	637b      	str	r3, [r7, #52]	; 0x34
 800fa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1c:	2bfe      	cmp	r3, #254	; 0xfe
 800fa1e:	ddf4      	ble.n	800fa0a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800fa20:	2300      	movs	r3, #0
 800fa22:	633b      	str	r3, [r7, #48]	; 0x30
 800fa24:	e068      	b.n	800faf8 <run_shortest+0x130>
 800fa26:	bf00      	nop
 800fa28:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800fa2c:	4aa8      	ldr	r2, [pc, #672]	; (800fcd0 <run_shortest+0x308>)
 800fa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa34:	49a7      	ldr	r1, [pc, #668]	; (800fcd4 <run_shortest+0x30c>)
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[i] = wall.column[i];
 800fa3c:	4aa4      	ldr	r2, [pc, #656]	; (800fcd0 <run_shortest+0x308>)
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	330e      	adds	r3, #14
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	685a      	ldr	r2, [r3, #4]
 800fa48:	49a2      	ldr	r1, [pc, #648]	; (800fcd4 <run_shortest+0x30c>)
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4c:	330e      	adds	r3, #14
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	440b      	add	r3, r1
 800fa52:	605a      	str	r2, [r3, #4]
		record.row_look[i] = wall.row_look[i];
 800fa54:	4a9e      	ldr	r2, [pc, #632]	; (800fcd0 <run_shortest+0x308>)
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	331e      	adds	r3, #30
 800fa5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa5e:	499d      	ldr	r1, [pc, #628]	; (800fcd4 <run_shortest+0x30c>)
 800fa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa62:	331e      	adds	r3, #30
 800fa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[i] = wall.column_look[i];
 800fa68:	4a99      	ldr	r2, [pc, #612]	; (800fcd0 <run_shortest+0x308>)
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	332c      	adds	r3, #44	; 0x2c
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	4413      	add	r3, r2
 800fa72:	685a      	ldr	r2, [r3, #4]
 800fa74:	4997      	ldr	r1, [pc, #604]	; (800fcd4 <run_shortest+0x30c>)
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	332c      	adds	r3, #44	; 0x2c
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	440b      	add	r3, r1
 800fa7e:	605a      	str	r2, [r3, #4]
		wall.row_look[i] = ~wall.row_look[i];
 800fa80:	4a93      	ldr	r2, [pc, #588]	; (800fcd0 <run_shortest+0x308>)
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	331e      	adds	r3, #30
 800fa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa8a:	43da      	mvns	r2, r3
 800fa8c:	4990      	ldr	r1, [pc, #576]	; (800fcd0 <run_shortest+0x308>)
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa90:	331e      	adds	r3, #30
 800fa92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[i] = ~wall.column_look[i];
 800fa96:	4a8e      	ldr	r2, [pc, #568]	; (800fcd0 <run_shortest+0x308>)
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	332c      	adds	r3, #44	; 0x2c
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	43da      	mvns	r2, r3
 800faa4:	498a      	ldr	r1, [pc, #552]	; (800fcd0 <run_shortest+0x308>)
 800faa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa8:	332c      	adds	r3, #44	; 0x2c
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	440b      	add	r3, r1
 800faae:	605a      	str	r2, [r3, #4]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800fab0:	4a87      	ldr	r2, [pc, #540]	; (800fcd0 <run_shortest+0x308>)
 800fab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fab8:	4985      	ldr	r1, [pc, #532]	; (800fcd0 <run_shortest+0x308>)
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	331e      	adds	r3, #30
 800fabe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fac2:	431a      	orrs	r2, r3
 800fac4:	4982      	ldr	r1, [pc, #520]	; (800fcd0 <run_shortest+0x308>)
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800facc:	4a80      	ldr	r2, [pc, #512]	; (800fcd0 <run_shortest+0x308>)
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	330e      	adds	r3, #14
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	4413      	add	r3, r2
 800fad6:	685a      	ldr	r2, [r3, #4]
 800fad8:	497d      	ldr	r1, [pc, #500]	; (800fcd0 <run_shortest+0x308>)
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	332c      	adds	r3, #44	; 0x2c
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	440b      	add	r3, r1
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	431a      	orrs	r2, r3
 800fae6:	497a      	ldr	r1, [pc, #488]	; (800fcd0 <run_shortest+0x308>)
 800fae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faea:	330e      	adds	r3, #14
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	440b      	add	r3, r1
 800faf0:	605a      	str	r2, [r3, #4]
	for(int i = 0; i <= 14; i++){
 800faf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf4:	3301      	adds	r3, #1
 800faf6:	633b      	str	r3, [r7, #48]	; 0x30
 800faf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafa:	2b0e      	cmp	r3, #14
 800fafc:	dd96      	ble.n	800fa2c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800fafe:	f7ff fe3f 	bl	800f780 <pass_maker_Dijkstra>

	pass_count = 1;
 800fb02:	4b75      	ldr	r3, [pc, #468]	; (800fcd8 <run_shortest+0x310>)
 800fb04:	2201      	movs	r2, #1
 800fb06:	801a      	strh	r2, [r3, #0]
if(pass_mode==1){
 800fb08:	7afb      	ldrb	r3, [r7, #11]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	f040 84b6 	bne.w	801047c <run_shortest+0xab4>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800fb10:	4b71      	ldr	r3, [pc, #452]	; (800fcd8 <run_shortest+0x310>)
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	461a      	mov	r2, r3
 800fb16:	4b71      	ldr	r3, [pc, #452]	; (800fcdc <run_shortest+0x314>)
 800fb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 813b 	beq.w	800fd98 <run_shortest+0x3d0>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800fb22:	4b6d      	ldr	r3, [pc, #436]	; (800fcd8 <run_shortest+0x310>)
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	461a      	mov	r2, r3
 800fb28:	4b6c      	ldr	r3, [pc, #432]	; (800fcdc <run_shortest+0x314>)
 800fb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2e:	f113 0f02 	cmn.w	r3, #2
 800fb32:	d131      	bne.n	800fb98 <run_shortest+0x1d0>
 800fb34:	4b68      	ldr	r3, [pc, #416]	; (800fcd8 <run_shortest+0x310>)
 800fb36:	881b      	ldrh	r3, [r3, #0]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	4a68      	ldr	r2, [pc, #416]	; (800fcdc <run_shortest+0x314>)
 800fb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	dd29      	ble.n	800fb98 <run_shortest+0x1d0>
		&& pass[pass_count + 1] >= 1) {
 800fb44:	4b64      	ldr	r3, [pc, #400]	; (800fcd8 <run_shortest+0x310>)
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	4a64      	ldr	r2, [pc, #400]	; (800fcdc <run_shortest+0x314>)
 800fb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	dd21      	ble.n	800fb98 <run_shortest+0x1d0>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fb54:	4b60      	ldr	r3, [pc, #384]	; (800fcd8 <run_shortest+0x310>)
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	4a60      	ldr	r2, [pc, #384]	; (800fcdc <run_shortest+0x314>)
 800fb5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb60:	4b5d      	ldr	r3, [pc, #372]	; (800fcd8 <run_shortest+0x310>)
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	3a01      	subs	r2, #1
 800fb68:	495c      	ldr	r1, [pc, #368]	; (800fcdc <run_shortest+0x314>)
 800fb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fb6e:	4b5a      	ldr	r3, [pc, #360]	; (800fcd8 <run_shortest+0x310>)
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	3301      	adds	r3, #1
 800fb74:	4a59      	ldr	r2, [pc, #356]	; (800fcdc <run_shortest+0x314>)
 800fb76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb7a:	4b57      	ldr	r3, [pc, #348]	; (800fcd8 <run_shortest+0x310>)
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	3a01      	subs	r2, #1
 800fb82:	4956      	ldr	r1, [pc, #344]	; (800fcdc <run_shortest+0x314>)
 800fb84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800fb88:	4b53      	ldr	r3, [pc, #332]	; (800fcd8 <run_shortest+0x310>)
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4b53      	ldr	r3, [pc, #332]	; (800fcdc <run_shortest+0x314>)
 800fb90:	f06f 0203 	mvn.w	r2, #3
 800fb94:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800fb98:	4b4f      	ldr	r3, [pc, #316]	; (800fcd8 <run_shortest+0x310>)
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4b4f      	ldr	r3, [pc, #316]	; (800fcdc <run_shortest+0x314>)
 800fba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fba4:	f113 0f03 	cmn.w	r3, #3
 800fba8:	d131      	bne.n	800fc0e <run_shortest+0x246>
 800fbaa:	4b4b      	ldr	r3, [pc, #300]	; (800fcd8 <run_shortest+0x310>)
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	4a4a      	ldr	r2, [pc, #296]	; (800fcdc <run_shortest+0x314>)
 800fbb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dd29      	ble.n	800fc0e <run_shortest+0x246>
		&& pass[pass_count + 1] >= 1) {
 800fbba:	4b47      	ldr	r3, [pc, #284]	; (800fcd8 <run_shortest+0x310>)
 800fbbc:	881b      	ldrh	r3, [r3, #0]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	4a46      	ldr	r2, [pc, #280]	; (800fcdc <run_shortest+0x314>)
 800fbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	dd21      	ble.n	800fc0e <run_shortest+0x246>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fbca:	4b43      	ldr	r3, [pc, #268]	; (800fcd8 <run_shortest+0x310>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	4a42      	ldr	r2, [pc, #264]	; (800fcdc <run_shortest+0x314>)
 800fbd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fbd6:	4b40      	ldr	r3, [pc, #256]	; (800fcd8 <run_shortest+0x310>)
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	3a01      	subs	r2, #1
 800fbde:	493f      	ldr	r1, [pc, #252]	; (800fcdc <run_shortest+0x314>)
 800fbe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fbe4:	4b3c      	ldr	r3, [pc, #240]	; (800fcd8 <run_shortest+0x310>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	4a3c      	ldr	r2, [pc, #240]	; (800fcdc <run_shortest+0x314>)
 800fbec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fbf0:	4b39      	ldr	r3, [pc, #228]	; (800fcd8 <run_shortest+0x310>)
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	4938      	ldr	r1, [pc, #224]	; (800fcdc <run_shortest+0x314>)
 800fbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800fbfe:	4b36      	ldr	r3, [pc, #216]	; (800fcd8 <run_shortest+0x310>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	4619      	mov	r1, r3
 800fc04:	4b35      	ldr	r3, [pc, #212]	; (800fcdc <run_shortest+0x314>)
 800fc06:	f06f 0204 	mvn.w	r2, #4
 800fc0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800fc0e:	4b32      	ldr	r3, [pc, #200]	; (800fcd8 <run_shortest+0x310>)
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	4a31      	ldr	r2, [pc, #196]	; (800fcdc <run_shortest+0x314>)
 800fc16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	dd43      	ble.n	800fca6 <run_shortest+0x2de>
 800fc1e:	4b2e      	ldr	r3, [pc, #184]	; (800fcd8 <run_shortest+0x310>)
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	461a      	mov	r2, r3
 800fc24:	4b2d      	ldr	r3, [pc, #180]	; (800fcdc <run_shortest+0x314>)
 800fc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc2a:	f113 0f02 	cmn.w	r3, #2
 800fc2e:	d13a      	bne.n	800fca6 <run_shortest+0x2de>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800fc30:	4b29      	ldr	r3, [pc, #164]	; (800fcd8 <run_shortest+0x310>)
 800fc32:	881b      	ldrh	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	4a29      	ldr	r2, [pc, #164]	; (800fcdc <run_shortest+0x314>)
 800fc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3c:	f113 0f02 	cmn.w	r3, #2
 800fc40:	d131      	bne.n	800fca6 <run_shortest+0x2de>
 800fc42:	4b25      	ldr	r3, [pc, #148]	; (800fcd8 <run_shortest+0x310>)
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	3302      	adds	r3, #2
 800fc48:	4a24      	ldr	r2, [pc, #144]	; (800fcdc <run_shortest+0x314>)
 800fc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	dd29      	ble.n	800fca6 <run_shortest+0x2de>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fc52:	4b21      	ldr	r3, [pc, #132]	; (800fcd8 <run_shortest+0x310>)
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	4a20      	ldr	r2, [pc, #128]	; (800fcdc <run_shortest+0x314>)
 800fc5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc5e:	4b1e      	ldr	r3, [pc, #120]	; (800fcd8 <run_shortest+0x310>)
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	3b01      	subs	r3, #1
 800fc64:	3a01      	subs	r2, #1
 800fc66:	491d      	ldr	r1, [pc, #116]	; (800fcdc <run_shortest+0x314>)
 800fc68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800fc6c:	4b1a      	ldr	r3, [pc, #104]	; (800fcd8 <run_shortest+0x310>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	4619      	mov	r1, r3
 800fc72:	4b1a      	ldr	r3, [pc, #104]	; (800fcdc <run_shortest+0x314>)
 800fc74:	f06f 0205 	mvn.w	r2, #5
 800fc78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fc7c:	4b16      	ldr	r3, [pc, #88]	; (800fcd8 <run_shortest+0x310>)
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	3301      	adds	r3, #1
 800fc82:	4a16      	ldr	r2, [pc, #88]	; (800fcdc <run_shortest+0x314>)
 800fc84:	f04f 31ff 	mov.w	r1, #4294967295
 800fc88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fc8c:	4b12      	ldr	r3, [pc, #72]	; (800fcd8 <run_shortest+0x310>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	3302      	adds	r3, #2
 800fc92:	4a12      	ldr	r2, [pc, #72]	; (800fcdc <run_shortest+0x314>)
 800fc94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <run_shortest+0x310>)
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	3302      	adds	r3, #2
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	490e      	ldr	r1, [pc, #56]	; (800fcdc <run_shortest+0x314>)
 800fca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800fca6:	4b0c      	ldr	r3, [pc, #48]	; (800fcd8 <run_shortest+0x310>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	4a0b      	ldr	r2, [pc, #44]	; (800fcdc <run_shortest+0x314>)
 800fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	dd4c      	ble.n	800fd50 <run_shortest+0x388>
 800fcb6:	4b08      	ldr	r3, [pc, #32]	; (800fcd8 <run_shortest+0x310>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	4b07      	ldr	r3, [pc, #28]	; (800fcdc <run_shortest+0x314>)
 800fcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcc2:	f113 0f03 	cmn.w	r3, #3
 800fcc6:	d143      	bne.n	800fd50 <run_shortest+0x388>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800fcc8:	4b03      	ldr	r3, [pc, #12]	; (800fcd8 <run_shortest+0x310>)
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	3301      	adds	r3, #1
 800fcce:	e007      	b.n	800fce0 <run_shortest+0x318>
 800fcd0:	20001010 	.word	0x20001010
 800fcd4:	20001100 	.word	0x20001100
 800fcd8:	20000834 	.word	0x20000834
 800fcdc:	2000083c 	.word	0x2000083c
 800fce0:	4a2b      	ldr	r2, [pc, #172]	; (800fd90 <run_shortest+0x3c8>)
 800fce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce6:	f113 0f03 	cmn.w	r3, #3
 800fcea:	d131      	bne.n	800fd50 <run_shortest+0x388>
 800fcec:	4b29      	ldr	r3, [pc, #164]	; (800fd94 <run_shortest+0x3cc>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	3302      	adds	r3, #2
 800fcf2:	4a27      	ldr	r2, [pc, #156]	; (800fd90 <run_shortest+0x3c8>)
 800fcf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	dd29      	ble.n	800fd50 <run_shortest+0x388>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fcfc:	4b25      	ldr	r3, [pc, #148]	; (800fd94 <run_shortest+0x3cc>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	3b01      	subs	r3, #1
 800fd02:	4a23      	ldr	r2, [pc, #140]	; (800fd90 <run_shortest+0x3c8>)
 800fd04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd08:	4b22      	ldr	r3, [pc, #136]	; (800fd94 <run_shortest+0x3cc>)
 800fd0a:	881b      	ldrh	r3, [r3, #0]
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	3a01      	subs	r2, #1
 800fd10:	491f      	ldr	r1, [pc, #124]	; (800fd90 <run_shortest+0x3c8>)
 800fd12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800fd16:	4b1f      	ldr	r3, [pc, #124]	; (800fd94 <run_shortest+0x3cc>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4b1c      	ldr	r3, [pc, #112]	; (800fd90 <run_shortest+0x3c8>)
 800fd1e:	f06f 0206 	mvn.w	r2, #6
 800fd22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fd26:	4b1b      	ldr	r3, [pc, #108]	; (800fd94 <run_shortest+0x3cc>)
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	4a18      	ldr	r2, [pc, #96]	; (800fd90 <run_shortest+0x3c8>)
 800fd2e:	f04f 31ff 	mov.w	r1, #4294967295
 800fd32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fd36:	4b17      	ldr	r3, [pc, #92]	; (800fd94 <run_shortest+0x3cc>)
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	3302      	adds	r3, #2
 800fd3c:	4a14      	ldr	r2, [pc, #80]	; (800fd90 <run_shortest+0x3c8>)
 800fd3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd42:	4b14      	ldr	r3, [pc, #80]	; (800fd94 <run_shortest+0x3cc>)
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	3302      	adds	r3, #2
 800fd48:	3a01      	subs	r2, #1
 800fd4a:	4911      	ldr	r1, [pc, #68]	; (800fd90 <run_shortest+0x3c8>)
 800fd4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800fd50:	4b10      	ldr	r3, [pc, #64]	; (800fd94 <run_shortest+0x3cc>)
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	461a      	mov	r2, r3
 800fd56:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <run_shortest+0x3c8>)
 800fd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5c:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800fd60:	4b0c      	ldr	r3, [pc, #48]	; (800fd94 <run_shortest+0x3cc>)
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	4a0a      	ldr	r2, [pc, #40]	; (800fd90 <run_shortest+0x3c8>)
 800fd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d107      	bne.n	800fd80 <run_shortest+0x3b8>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800fd70:	4b08      	ldr	r3, [pc, #32]	; (800fd94 <run_shortest+0x3cc>)
 800fd72:	881b      	ldrh	r3, [r3, #0]
 800fd74:	3b01      	subs	r3, #1
 800fd76:	4a06      	ldr	r2, [pc, #24]	; (800fd90 <run_shortest+0x3c8>)
 800fd78:	f04f 31ff 	mov.w	r1, #4294967295
 800fd7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <run_shortest+0x3cc>)
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	3301      	adds	r3, #1
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	4b02      	ldr	r3, [pc, #8]	; (800fd94 <run_shortest+0x3cc>)
 800fd8a:	801a      	strh	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800fd8c:	e6c0      	b.n	800fb10 <run_shortest+0x148>
 800fd8e:	bf00      	nop
 800fd90:	2000083c 	.word	0x2000083c
 800fd94:	20000834 	.word	0x20000834
			break;
 800fd98:	bf00      	nop
	}

	pass_count = 1;
 800fd9a:	4b8c      	ldr	r3, [pc, #560]	; (800ffcc <run_shortest+0x604>)
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	801a      	strh	r2, [r3, #0]
	if (slant_mode == 1) {
 800fda0:	7a7b      	ldrb	r3, [r7, #9]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	f040 836a 	bne.w	801047c <run_shortest+0xab4>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800fda8:	4b88      	ldr	r3, [pc, #544]	; (800ffcc <run_shortest+0x604>)
 800fdaa:	881b      	ldrh	r3, [r3, #0]
 800fdac:	461a      	mov	r2, r3
 800fdae:	4b88      	ldr	r3, [pc, #544]	; (800ffd0 <run_shortest+0x608>)
 800fdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f000 81f1 	beq.w	801019c <run_shortest+0x7d4>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800fdba:	4b84      	ldr	r3, [pc, #528]	; (800ffcc <run_shortest+0x604>)
 800fdbc:	881b      	ldrh	r3, [r3, #0]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	4a83      	ldr	r2, [pc, #524]	; (800ffd0 <run_shortest+0x608>)
 800fdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f340 81dc 	ble.w	8010184 <run_shortest+0x7bc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800fdcc:	4b7f      	ldr	r3, [pc, #508]	; (800ffcc <run_shortest+0x604>)
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4b7f      	ldr	r3, [pc, #508]	; (800ffd0 <run_shortest+0x608>)
 800fdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd8:	f113 0f02 	cmn.w	r3, #2
 800fddc:	d009      	beq.n	800fdf2 <run_shortest+0x42a>
 800fdde:	4b7b      	ldr	r3, [pc, #492]	; (800ffcc <run_shortest+0x604>)
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	4b7a      	ldr	r3, [pc, #488]	; (800ffd0 <run_shortest+0x608>)
 800fde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdea:	f113 0f03 	cmn.w	r3, #3
 800fdee:	f040 81c9 	bne.w	8010184 <run_shortest+0x7bc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800fdf2:	4b76      	ldr	r3, [pc, #472]	; (800ffcc <run_shortest+0x604>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	4b75      	ldr	r3, [pc, #468]	; (800ffd0 <run_shortest+0x608>)
 800fdfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdfe:	f113 0f02 	cmn.w	r3, #2
 800fe02:	d12d      	bne.n	800fe60 <run_shortest+0x498>
 800fe04:	4b71      	ldr	r3, [pc, #452]	; (800ffcc <run_shortest+0x604>)
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	4a71      	ldr	r2, [pc, #452]	; (800ffd0 <run_shortest+0x608>)
 800fe0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe10:	f113 0f03 	cmn.w	r3, #3
 800fe14:	d124      	bne.n	800fe60 <run_shortest+0x498>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fe16:	4b6d      	ldr	r3, [pc, #436]	; (800ffcc <run_shortest+0x604>)
 800fe18:	881b      	ldrh	r3, [r3, #0]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	4a6c      	ldr	r2, [pc, #432]	; (800ffd0 <run_shortest+0x608>)
 800fe1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fe22:	4b6a      	ldr	r3, [pc, #424]	; (800ffcc <run_shortest+0x604>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	3a01      	subs	r2, #1
 800fe2a:	4969      	ldr	r1, [pc, #420]	; (800ffd0 <run_shortest+0x608>)
 800fe2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fe30:	4b66      	ldr	r3, [pc, #408]	; (800ffcc <run_shortest+0x604>)
 800fe32:	881b      	ldrh	r3, [r3, #0]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	4a66      	ldr	r2, [pc, #408]	; (800ffd0 <run_shortest+0x608>)
 800fe38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d107      	bne.n	800fe50 <run_shortest+0x488>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fe40:	4b62      	ldr	r3, [pc, #392]	; (800ffcc <run_shortest+0x604>)
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	3b01      	subs	r3, #1
 800fe46:	4a62      	ldr	r2, [pc, #392]	; (800ffd0 <run_shortest+0x608>)
 800fe48:	f04f 31ff 	mov.w	r1, #4294967295
 800fe4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800fe50:	4b5e      	ldr	r3, [pc, #376]	; (800ffcc <run_shortest+0x604>)
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	4619      	mov	r1, r3
 800fe56:	4b5e      	ldr	r3, [pc, #376]	; (800ffd0 <run_shortest+0x608>)
 800fe58:	f06f 0207 	mvn.w	r2, #7
 800fe5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800fe60:	4b5a      	ldr	r3, [pc, #360]	; (800ffcc <run_shortest+0x604>)
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	461a      	mov	r2, r3
 800fe66:	4b5a      	ldr	r3, [pc, #360]	; (800ffd0 <run_shortest+0x608>)
 800fe68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6c:	f113 0f03 	cmn.w	r3, #3
 800fe70:	d12d      	bne.n	800fece <run_shortest+0x506>
 800fe72:	4b56      	ldr	r3, [pc, #344]	; (800ffcc <run_shortest+0x604>)
 800fe74:	881b      	ldrh	r3, [r3, #0]
 800fe76:	3301      	adds	r3, #1
 800fe78:	4a55      	ldr	r2, [pc, #340]	; (800ffd0 <run_shortest+0x608>)
 800fe7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe7e:	f113 0f02 	cmn.w	r3, #2
 800fe82:	d124      	bne.n	800fece <run_shortest+0x506>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fe84:	4b51      	ldr	r3, [pc, #324]	; (800ffcc <run_shortest+0x604>)
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	4a51      	ldr	r2, [pc, #324]	; (800ffd0 <run_shortest+0x608>)
 800fe8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fe90:	4b4e      	ldr	r3, [pc, #312]	; (800ffcc <run_shortest+0x604>)
 800fe92:	881b      	ldrh	r3, [r3, #0]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	3a01      	subs	r2, #1
 800fe98:	494d      	ldr	r1, [pc, #308]	; (800ffd0 <run_shortest+0x608>)
 800fe9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fe9e:	4b4b      	ldr	r3, [pc, #300]	; (800ffcc <run_shortest+0x604>)
 800fea0:	881b      	ldrh	r3, [r3, #0]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	4a4a      	ldr	r2, [pc, #296]	; (800ffd0 <run_shortest+0x608>)
 800fea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d107      	bne.n	800febe <run_shortest+0x4f6>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800feae:	4b47      	ldr	r3, [pc, #284]	; (800ffcc <run_shortest+0x604>)
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	3b01      	subs	r3, #1
 800feb4:	4a46      	ldr	r2, [pc, #280]	; (800ffd0 <run_shortest+0x608>)
 800feb6:	f04f 31ff 	mov.w	r1, #4294967295
 800feba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800febe:	4b43      	ldr	r3, [pc, #268]	; (800ffcc <run_shortest+0x604>)
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	4619      	mov	r1, r3
 800fec4:	4b42      	ldr	r3, [pc, #264]	; (800ffd0 <run_shortest+0x608>)
 800fec6:	f06f 0208 	mvn.w	r2, #8
 800feca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800fece:	4b3f      	ldr	r3, [pc, #252]	; (800ffcc <run_shortest+0x604>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	4b3e      	ldr	r3, [pc, #248]	; (800ffd0 <run_shortest+0x608>)
 800fed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feda:	f113 0f02 	cmn.w	r3, #2
 800fede:	d135      	bne.n	800ff4c <run_shortest+0x584>
 800fee0:	4b3a      	ldr	r3, [pc, #232]	; (800ffcc <run_shortest+0x604>)
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	3301      	adds	r3, #1
 800fee6:	4a3a      	ldr	r2, [pc, #232]	; (800ffd0 <run_shortest+0x608>)
 800fee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feec:	f113 0f02 	cmn.w	r3, #2
 800fef0:	d12c      	bne.n	800ff4c <run_shortest+0x584>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fef2:	4b36      	ldr	r3, [pc, #216]	; (800ffcc <run_shortest+0x604>)
 800fef4:	881b      	ldrh	r3, [r3, #0]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	4a35      	ldr	r2, [pc, #212]	; (800ffd0 <run_shortest+0x608>)
 800fefa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fefe:	4b33      	ldr	r3, [pc, #204]	; (800ffcc <run_shortest+0x604>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	3b01      	subs	r3, #1
 800ff04:	3a01      	subs	r2, #1
 800ff06:	4932      	ldr	r1, [pc, #200]	; (800ffd0 <run_shortest+0x608>)
 800ff08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800ff0c:	4b2f      	ldr	r3, [pc, #188]	; (800ffcc <run_shortest+0x604>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	4a2f      	ldr	r2, [pc, #188]	; (800ffd0 <run_shortest+0x608>)
 800ff14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d107      	bne.n	800ff2c <run_shortest+0x564>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800ff1c:	4b2b      	ldr	r3, [pc, #172]	; (800ffcc <run_shortest+0x604>)
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	4a2b      	ldr	r2, [pc, #172]	; (800ffd0 <run_shortest+0x608>)
 800ff24:	f04f 31ff 	mov.w	r1, #4294967295
 800ff28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800ff2c:	4b27      	ldr	r3, [pc, #156]	; (800ffcc <run_shortest+0x604>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	4619      	mov	r1, r3
 800ff32:	4b27      	ldr	r3, [pc, #156]	; (800ffd0 <run_shortest+0x608>)
 800ff34:	f06f 0209 	mvn.w	r2, #9
 800ff38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800ff3c:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <run_shortest+0x604>)
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	3301      	adds	r3, #1
 800ff42:	4a23      	ldr	r2, [pc, #140]	; (800ffd0 <run_shortest+0x608>)
 800ff44:	f04f 31ff 	mov.w	r1, #4294967295
 800ff48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800ff4c:	4b1f      	ldr	r3, [pc, #124]	; (800ffcc <run_shortest+0x604>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	461a      	mov	r2, r3
 800ff52:	4b1f      	ldr	r3, [pc, #124]	; (800ffd0 <run_shortest+0x608>)
 800ff54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff58:	f113 0f03 	cmn.w	r3, #3
 800ff5c:	d140      	bne.n	800ffe0 <run_shortest+0x618>
 800ff5e:	4b1b      	ldr	r3, [pc, #108]	; (800ffcc <run_shortest+0x604>)
 800ff60:	881b      	ldrh	r3, [r3, #0]
 800ff62:	3301      	adds	r3, #1
 800ff64:	4a1a      	ldr	r2, [pc, #104]	; (800ffd0 <run_shortest+0x608>)
 800ff66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff6a:	f113 0f03 	cmn.w	r3, #3
 800ff6e:	d137      	bne.n	800ffe0 <run_shortest+0x618>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800ff70:	4b16      	ldr	r3, [pc, #88]	; (800ffcc <run_shortest+0x604>)
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	3b01      	subs	r3, #1
 800ff76:	4a16      	ldr	r2, [pc, #88]	; (800ffd0 <run_shortest+0x608>)
 800ff78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ff7c:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <run_shortest+0x604>)
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	3b01      	subs	r3, #1
 800ff82:	3a01      	subs	r2, #1
 800ff84:	4912      	ldr	r1, [pc, #72]	; (800ffd0 <run_shortest+0x608>)
 800ff86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800ff8a:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <run_shortest+0x604>)
 800ff8c:	881b      	ldrh	r3, [r3, #0]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	4a0f      	ldr	r2, [pc, #60]	; (800ffd0 <run_shortest+0x608>)
 800ff92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d107      	bne.n	800ffaa <run_shortest+0x5e2>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800ff9a:	4b0c      	ldr	r3, [pc, #48]	; (800ffcc <run_shortest+0x604>)
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	4a0b      	ldr	r2, [pc, #44]	; (800ffd0 <run_shortest+0x608>)
 800ffa2:	f04f 31ff 	mov.w	r1, #4294967295
 800ffa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800ffaa:	4b08      	ldr	r3, [pc, #32]	; (800ffcc <run_shortest+0x604>)
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <run_shortest+0x608>)
 800ffb2:	f06f 020a 	mvn.w	r2, #10
 800ffb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800ffba:	4b04      	ldr	r3, [pc, #16]	; (800ffcc <run_shortest+0x604>)
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	4a03      	ldr	r2, [pc, #12]	; (800ffd0 <run_shortest+0x608>)
 800ffc2:	f04f 31ff 	mov.w	r1, #4294967295
 800ffc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800ffca:	e009      	b.n	800ffe0 <run_shortest+0x618>
 800ffcc:	20000834 	.word	0x20000834
 800ffd0:	2000083c 	.word	0x2000083c
						pass_count++;
 800ffd4:	4b6f      	ldr	r3, [pc, #444]	; (8010194 <run_shortest+0x7cc>)
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	4b6d      	ldr	r3, [pc, #436]	; (8010194 <run_shortest+0x7cc>)
 800ffde:	801a      	strh	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800ffe0:	4b6c      	ldr	r3, [pc, #432]	; (8010194 <run_shortest+0x7cc>)
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4b6c      	ldr	r3, [pc, #432]	; (8010198 <run_shortest+0x7d0>)
 800ffe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	dbf1      	blt.n	800ffd4 <run_shortest+0x60c>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800fff0:	4b68      	ldr	r3, [pc, #416]	; (8010194 <run_shortest+0x7cc>)
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	4a68      	ldr	r2, [pc, #416]	; (8010198 <run_shortest+0x7d0>)
 800fff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fffc:	f113 0f02 	cmn.w	r3, #2
 8010000:	d15b      	bne.n	80100ba <run_shortest+0x6f2>
						if (pass[pass_count - 2] == -2) {
 8010002:	4b64      	ldr	r3, [pc, #400]	; (8010194 <run_shortest+0x7cc>)
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	3b02      	subs	r3, #2
 8010008:	4a63      	ldr	r2, [pc, #396]	; (8010198 <run_shortest+0x7d0>)
 801000a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801000e:	f113 0f02 	cmn.w	r3, #2
 8010012:	d12d      	bne.n	8010070 <run_shortest+0x6a8>
							pass[pass_count] = pass[pass_count] - 1;
 8010014:	4b5f      	ldr	r3, [pc, #380]	; (8010194 <run_shortest+0x7cc>)
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	461a      	mov	r2, r3
 801001a:	4b5f      	ldr	r3, [pc, #380]	; (8010198 <run_shortest+0x7d0>)
 801001c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010020:	4a5c      	ldr	r2, [pc, #368]	; (8010194 <run_shortest+0x7cc>)
 8010022:	8812      	ldrh	r2, [r2, #0]
 8010024:	4611      	mov	r1, r2
 8010026:	3b01      	subs	r3, #1
 8010028:	4a5b      	ldr	r2, [pc, #364]	; (8010198 <run_shortest+0x7d0>)
 801002a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 801002e:	4b59      	ldr	r3, [pc, #356]	; (8010194 <run_shortest+0x7cc>)
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	461a      	mov	r2, r3
 8010034:	4b58      	ldr	r3, [pc, #352]	; (8010198 <run_shortest+0x7d0>)
 8010036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d107      	bne.n	801004e <run_shortest+0x686>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 801003e:	4b55      	ldr	r3, [pc, #340]	; (8010194 <run_shortest+0x7cc>)
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	4619      	mov	r1, r3
 8010044:	4b54      	ldr	r3, [pc, #336]	; (8010198 <run_shortest+0x7d0>)
 8010046:	f04f 32ff 	mov.w	r2, #4294967295
 801004a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 801004e:	4b51      	ldr	r3, [pc, #324]	; (8010194 <run_shortest+0x7cc>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	3b01      	subs	r3, #1
 8010054:	4a50      	ldr	r2, [pc, #320]	; (8010198 <run_shortest+0x7d0>)
 8010056:	f06f 010d 	mvn.w	r1, #13
 801005a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 801005e:	4b4d      	ldr	r3, [pc, #308]	; (8010194 <run_shortest+0x7cc>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	3b02      	subs	r3, #2
 8010064:	4a4c      	ldr	r2, [pc, #304]	; (8010198 <run_shortest+0x7d0>)
 8010066:	f04f 31ff 	mov.w	r1, #4294967295
 801006a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801006e:	e024      	b.n	80100ba <run_shortest+0x6f2>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 8010070:	4b48      	ldr	r3, [pc, #288]	; (8010194 <run_shortest+0x7cc>)
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	461a      	mov	r2, r3
 8010076:	4b48      	ldr	r3, [pc, #288]	; (8010198 <run_shortest+0x7d0>)
 8010078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007c:	4a45      	ldr	r2, [pc, #276]	; (8010194 <run_shortest+0x7cc>)
 801007e:	8812      	ldrh	r2, [r2, #0]
 8010080:	4611      	mov	r1, r2
 8010082:	3b01      	subs	r3, #1
 8010084:	4a44      	ldr	r2, [pc, #272]	; (8010198 <run_shortest+0x7d0>)
 8010086:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 801008a:	4b42      	ldr	r3, [pc, #264]	; (8010194 <run_shortest+0x7cc>)
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	461a      	mov	r2, r3
 8010090:	4b41      	ldr	r3, [pc, #260]	; (8010198 <run_shortest+0x7d0>)
 8010092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d107      	bne.n	80100aa <run_shortest+0x6e2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 801009a:	4b3e      	ldr	r3, [pc, #248]	; (8010194 <run_shortest+0x7cc>)
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	4619      	mov	r1, r3
 80100a0:	4b3d      	ldr	r3, [pc, #244]	; (8010198 <run_shortest+0x7d0>)
 80100a2:	f04f 32ff 	mov.w	r2, #4294967295
 80100a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 80100aa:	4b3a      	ldr	r3, [pc, #232]	; (8010194 <run_shortest+0x7cc>)
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	3b01      	subs	r3, #1
 80100b0:	4a39      	ldr	r2, [pc, #228]	; (8010198 <run_shortest+0x7d0>)
 80100b2:	f06f 010b 	mvn.w	r1, #11
 80100b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 80100ba:	4b36      	ldr	r3, [pc, #216]	; (8010194 <run_shortest+0x7cc>)
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	3b01      	subs	r3, #1
 80100c0:	4a35      	ldr	r2, [pc, #212]	; (8010198 <run_shortest+0x7d0>)
 80100c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100c6:	f113 0f03 	cmn.w	r3, #3
 80100ca:	d15b      	bne.n	8010184 <run_shortest+0x7bc>
						if (pass[pass_count - 2] == -3) {
 80100cc:	4b31      	ldr	r3, [pc, #196]	; (8010194 <run_shortest+0x7cc>)
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	3b02      	subs	r3, #2
 80100d2:	4a31      	ldr	r2, [pc, #196]	; (8010198 <run_shortest+0x7d0>)
 80100d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100d8:	f113 0f03 	cmn.w	r3, #3
 80100dc:	d12d      	bne.n	801013a <run_shortest+0x772>
							pass[pass_count] = pass[pass_count] - 1;
 80100de:	4b2d      	ldr	r3, [pc, #180]	; (8010194 <run_shortest+0x7cc>)
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	461a      	mov	r2, r3
 80100e4:	4b2c      	ldr	r3, [pc, #176]	; (8010198 <run_shortest+0x7d0>)
 80100e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ea:	4a2a      	ldr	r2, [pc, #168]	; (8010194 <run_shortest+0x7cc>)
 80100ec:	8812      	ldrh	r2, [r2, #0]
 80100ee:	4611      	mov	r1, r2
 80100f0:	3b01      	subs	r3, #1
 80100f2:	4a29      	ldr	r2, [pc, #164]	; (8010198 <run_shortest+0x7d0>)
 80100f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 80100f8:	4b26      	ldr	r3, [pc, #152]	; (8010194 <run_shortest+0x7cc>)
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	461a      	mov	r2, r3
 80100fe:	4b26      	ldr	r3, [pc, #152]	; (8010198 <run_shortest+0x7d0>)
 8010100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d107      	bne.n	8010118 <run_shortest+0x750>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8010108:	4b22      	ldr	r3, [pc, #136]	; (8010194 <run_shortest+0x7cc>)
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	4619      	mov	r1, r3
 801010e:	4b22      	ldr	r3, [pc, #136]	; (8010198 <run_shortest+0x7d0>)
 8010110:	f04f 32ff 	mov.w	r2, #4294967295
 8010114:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8010118:	4b1e      	ldr	r3, [pc, #120]	; (8010194 <run_shortest+0x7cc>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	3b01      	subs	r3, #1
 801011e:	4a1e      	ldr	r2, [pc, #120]	; (8010198 <run_shortest+0x7d0>)
 8010120:	f06f 010e 	mvn.w	r1, #14
 8010124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 8010128:	4b1a      	ldr	r3, [pc, #104]	; (8010194 <run_shortest+0x7cc>)
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	3b02      	subs	r3, #2
 801012e:	4a1a      	ldr	r2, [pc, #104]	; (8010198 <run_shortest+0x7d0>)
 8010130:	f04f 31ff 	mov.w	r1, #4294967295
 8010134:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8010138:	e024      	b.n	8010184 <run_shortest+0x7bc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 801013a:	4b16      	ldr	r3, [pc, #88]	; (8010194 <run_shortest+0x7cc>)
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	461a      	mov	r2, r3
 8010140:	4b15      	ldr	r3, [pc, #84]	; (8010198 <run_shortest+0x7d0>)
 8010142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010146:	4a13      	ldr	r2, [pc, #76]	; (8010194 <run_shortest+0x7cc>)
 8010148:	8812      	ldrh	r2, [r2, #0]
 801014a:	4611      	mov	r1, r2
 801014c:	3b01      	subs	r3, #1
 801014e:	4a12      	ldr	r2, [pc, #72]	; (8010198 <run_shortest+0x7d0>)
 8010150:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8010154:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <run_shortest+0x7cc>)
 8010156:	881b      	ldrh	r3, [r3, #0]
 8010158:	461a      	mov	r2, r3
 801015a:	4b0f      	ldr	r3, [pc, #60]	; (8010198 <run_shortest+0x7d0>)
 801015c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d107      	bne.n	8010174 <run_shortest+0x7ac>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8010164:	4b0b      	ldr	r3, [pc, #44]	; (8010194 <run_shortest+0x7cc>)
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	4619      	mov	r1, r3
 801016a:	4b0b      	ldr	r3, [pc, #44]	; (8010198 <run_shortest+0x7d0>)
 801016c:	f04f 32ff 	mov.w	r2, #4294967295
 8010170:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 8010174:	4b07      	ldr	r3, [pc, #28]	; (8010194 <run_shortest+0x7cc>)
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	3b01      	subs	r3, #1
 801017a:	4a07      	ldr	r2, [pc, #28]	; (8010198 <run_shortest+0x7d0>)
 801017c:	f06f 010c 	mvn.w	r1, #12
 8010180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 8010184:	4b03      	ldr	r3, [pc, #12]	; (8010194 <run_shortest+0x7cc>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	3301      	adds	r3, #1
 801018a:	b29a      	uxth	r2, r3
 801018c:	4b01      	ldr	r3, [pc, #4]	; (8010194 <run_shortest+0x7cc>)
 801018e:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 8010190:	e60a      	b.n	800fda8 <run_shortest+0x3e0>
 8010192:	bf00      	nop
 8010194:	20000834 	.word	0x20000834
 8010198:	2000083c 	.word	0x2000083c
				break;
 801019c:	bf00      	nop
		}

		pass_count = 1;
 801019e:	4ba3      	ldr	r3, [pc, #652]	; (801042c <run_shortest+0xa64>)
 80101a0:	2201      	movs	r2, #1
 80101a2:	801a      	strh	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 80101a4:	4ba1      	ldr	r3, [pc, #644]	; (801042c <run_shortest+0xa64>)
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	461a      	mov	r2, r3
 80101aa:	4ba1      	ldr	r3, [pc, #644]	; (8010430 <run_shortest+0xa68>)
 80101ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 813f 	beq.w	8010434 <run_shortest+0xa6c>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 80101b6:	4b9d      	ldr	r3, [pc, #628]	; (801042c <run_shortest+0xa64>)
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	461a      	mov	r2, r3
 80101bc:	4b9c      	ldr	r3, [pc, #624]	; (8010430 <run_shortest+0xa68>)
 80101be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c2:	f113 0f08 	cmn.w	r3, #8
 80101c6:	d01b      	beq.n	8010200 <run_shortest+0x838>
 80101c8:	4b98      	ldr	r3, [pc, #608]	; (801042c <run_shortest+0xa64>)
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	461a      	mov	r2, r3
 80101ce:	4b98      	ldr	r3, [pc, #608]	; (8010430 <run_shortest+0xa68>)
 80101d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d4:	f113 0f09 	cmn.w	r3, #9
 80101d8:	d012      	beq.n	8010200 <run_shortest+0x838>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 80101da:	4b94      	ldr	r3, [pc, #592]	; (801042c <run_shortest+0xa64>)
 80101dc:	881b      	ldrh	r3, [r3, #0]
 80101de:	461a      	mov	r2, r3
 80101e0:	4b93      	ldr	r3, [pc, #588]	; (8010430 <run_shortest+0xa68>)
 80101e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e6:	f113 0f0a 	cmn.w	r3, #10
 80101ea:	d009      	beq.n	8010200 <run_shortest+0x838>
 80101ec:	4b8f      	ldr	r3, [pc, #572]	; (801042c <run_shortest+0xa64>)
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	461a      	mov	r2, r3
 80101f2:	4b8f      	ldr	r3, [pc, #572]	; (8010430 <run_shortest+0xa68>)
 80101f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f8:	f113 0f0b 	cmn.w	r3, #11
 80101fc:	f040 810f 	bne.w	801041e <run_shortest+0xa56>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8010200:	4b8a      	ldr	r3, [pc, #552]	; (801042c <run_shortest+0xa64>)
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	461a      	mov	r2, r3
 8010206:	4b8a      	ldr	r3, [pc, #552]	; (8010430 <run_shortest+0xa68>)
 8010208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801020c:	f113 0f08 	cmn.w	r3, #8
 8010210:	d008      	beq.n	8010224 <run_shortest+0x85c>
 8010212:	4b86      	ldr	r3, [pc, #536]	; (801042c <run_shortest+0xa64>)
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	4b85      	ldr	r3, [pc, #532]	; (8010430 <run_shortest+0xa68>)
 801021a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801021e:	f113 0f0a 	cmn.w	r3, #10
 8010222:	d102      	bne.n	801022a <run_shortest+0x862>
					slant_direction = -3;
 8010224:	f06f 0302 	mvn.w	r3, #2
 8010228:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 801022a:	4b80      	ldr	r3, [pc, #512]	; (801042c <run_shortest+0xa64>)
 801022c:	881b      	ldrh	r3, [r3, #0]
 801022e:	461a      	mov	r2, r3
 8010230:	4b7f      	ldr	r3, [pc, #508]	; (8010430 <run_shortest+0xa68>)
 8010232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010236:	f113 0f09 	cmn.w	r3, #9
 801023a:	d008      	beq.n	801024e <run_shortest+0x886>
 801023c:	4b7b      	ldr	r3, [pc, #492]	; (801042c <run_shortest+0xa64>)
 801023e:	881b      	ldrh	r3, [r3, #0]
 8010240:	461a      	mov	r2, r3
 8010242:	4b7b      	ldr	r3, [pc, #492]	; (8010430 <run_shortest+0xa68>)
 8010244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010248:	f113 0f0b 	cmn.w	r3, #11
 801024c:	d102      	bne.n	8010254 <run_shortest+0x88c>
					slant_direction = -2;
 801024e:	f06f 0301 	mvn.w	r3, #1
 8010252:	643b      	str	r3, [r7, #64]	; 0x40
				}
				pass_count++;
 8010254:	4b75      	ldr	r3, [pc, #468]	; (801042c <run_shortest+0xa64>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	3301      	adds	r3, #1
 801025a:	b29a      	uxth	r2, r3
 801025c:	4b73      	ldr	r3, [pc, #460]	; (801042c <run_shortest+0xa64>)
 801025e:	801a      	strh	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 8010260:	4b72      	ldr	r3, [pc, #456]	; (801042c <run_shortest+0xa64>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	4b72      	ldr	r3, [pc, #456]	; (8010430 <run_shortest+0xa68>)
 8010268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010270:	d105      	bne.n	801027e <run_shortest+0x8b6>
					pass_count++;
 8010272:	4b6e      	ldr	r3, [pc, #440]	; (801042c <run_shortest+0xa64>)
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	3301      	adds	r3, #1
 8010278:	b29a      	uxth	r2, r3
 801027a:	4b6c      	ldr	r3, [pc, #432]	; (801042c <run_shortest+0xa64>)
 801027c:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 801027e:	4b6b      	ldr	r3, [pc, #428]	; (801042c <run_shortest+0xa64>)
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	4b6a      	ldr	r3, [pc, #424]	; (8010430 <run_shortest+0xa68>)
 8010286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801028a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801028e:	d105      	bne.n	801029c <run_shortest+0x8d4>
					pass_count++;
 8010290:	4b66      	ldr	r3, [pc, #408]	; (801042c <run_shortest+0xa64>)
 8010292:	881b      	ldrh	r3, [r3, #0]
 8010294:	3301      	adds	r3, #1
 8010296:	b29a      	uxth	r2, r3
 8010298:	4b64      	ldr	r3, [pc, #400]	; (801042c <run_shortest+0xa64>)
 801029a:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 801029c:	4b63      	ldr	r3, [pc, #396]	; (801042c <run_shortest+0xa64>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	461a      	mov	r2, r3
 80102a2:	4b63      	ldr	r3, [pc, #396]	; (8010430 <run_shortest+0xa68>)
 80102a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a8:	f113 0f03 	cmn.w	r3, #3
 80102ac:	f2c0 80ad 	blt.w	801040a <run_shortest+0xa42>
					slant_count = pass_count;
 80102b0:	4b5e      	ldr	r3, [pc, #376]	; (801042c <run_shortest+0xa64>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pass[slant_count] = 51;
 80102b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102bc:	4a5c      	ldr	r2, [pc, #368]	; (8010430 <run_shortest+0xa68>)
 80102be:	2133      	movs	r1, #51	; 0x33
 80102c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 80102c4:	4b59      	ldr	r3, [pc, #356]	; (801042c <run_shortest+0xa64>)
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	3301      	adds	r3, #1
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	4b57      	ldr	r3, [pc, #348]	; (801042c <run_shortest+0xa64>)
 80102ce:	801a      	strh	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 80102d0:	e09b      	b.n	801040a <run_shortest+0xa42>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80102d2:	4b56      	ldr	r3, [pc, #344]	; (801042c <run_shortest+0xa64>)
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	461a      	mov	r2, r3
 80102d8:	4b55      	ldr	r3, [pc, #340]	; (8010430 <run_shortest+0xa68>)
 80102da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e2:	d105      	bne.n	80102f0 <run_shortest+0x928>
						pass_count++;
 80102e4:	4b51      	ldr	r3, [pc, #324]	; (801042c <run_shortest+0xa64>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	3301      	adds	r3, #1
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	4b4f      	ldr	r3, [pc, #316]	; (801042c <run_shortest+0xa64>)
 80102ee:	801a      	strh	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 80102f0:	4b4e      	ldr	r3, [pc, #312]	; (801042c <run_shortest+0xa64>)
 80102f2:	881b      	ldrh	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
 80102f6:	4b4e      	ldr	r3, [pc, #312]	; (8010430 <run_shortest+0xa68>)
 80102f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fc:	f113 0f0c 	cmn.w	r3, #12
 8010300:	f000 808d 	beq.w	801041e <run_shortest+0xa56>
 8010304:	4b49      	ldr	r3, [pc, #292]	; (801042c <run_shortest+0xa64>)
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	461a      	mov	r2, r3
 801030a:	4b49      	ldr	r3, [pc, #292]	; (8010430 <run_shortest+0xa68>)
 801030c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010310:	f113 0f0d 	cmn.w	r3, #13
 8010314:	f000 8083 	beq.w	801041e <run_shortest+0xa56>
							|| pass[pass_count] == -14
 8010318:	4b44      	ldr	r3, [pc, #272]	; (801042c <run_shortest+0xa64>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	461a      	mov	r2, r3
 801031e:	4b44      	ldr	r3, [pc, #272]	; (8010430 <run_shortest+0xa68>)
 8010320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010324:	f113 0f0e 	cmn.w	r3, #14
 8010328:	d079      	beq.n	801041e <run_shortest+0xa56>
							|| pass[pass_count] == -15) {
 801032a:	4b40      	ldr	r3, [pc, #256]	; (801042c <run_shortest+0xa64>)
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	4b3f      	ldr	r3, [pc, #252]	; (8010430 <run_shortest+0xa68>)
 8010332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010336:	f113 0f0f 	cmn.w	r3, #15
 801033a:	d070      	beq.n	801041e <run_shortest+0xa56>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 801033c:	4b3b      	ldr	r3, [pc, #236]	; (801042c <run_shortest+0xa64>)
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	461a      	mov	r2, r3
 8010342:	4b3b      	ldr	r3, [pc, #236]	; (8010430 <run_shortest+0xa68>)
 8010344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801034a:	429a      	cmp	r2, r3
 801034c:	d127      	bne.n	801039e <run_shortest+0x9d6>
						pass[slant_count] = pass[slant_count] - 1;
 801034e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010352:	4a37      	ldr	r2, [pc, #220]	; (8010430 <run_shortest+0xa68>)
 8010354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801035c:	3a01      	subs	r2, #1
 801035e:	4934      	ldr	r1, [pc, #208]	; (8010430 <run_shortest+0xa68>)
 8010360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 8010364:	4b31      	ldr	r3, [pc, #196]	; (801042c <run_shortest+0xa64>)
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (slant_direction == -2) {
 801036c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801036e:	f113 0f02 	cmn.w	r3, #2
 8010372:	d107      	bne.n	8010384 <run_shortest+0x9bc>
							pass[pass_count] = -16;
 8010374:	4b2d      	ldr	r3, [pc, #180]	; (801042c <run_shortest+0xa64>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	4619      	mov	r1, r3
 801037a:	4b2d      	ldr	r3, [pc, #180]	; (8010430 <run_shortest+0xa68>)
 801037c:	f06f 020f 	mvn.w	r2, #15
 8010380:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 8010384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010386:	f113 0f03 	cmn.w	r3, #3
 801038a:	d138      	bne.n	80103fe <run_shortest+0xa36>
							pass[pass_count] = -17;
 801038c:	4b27      	ldr	r3, [pc, #156]	; (801042c <run_shortest+0xa64>)
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	4619      	mov	r1, r3
 8010392:	4b27      	ldr	r3, [pc, #156]	; (8010430 <run_shortest+0xa68>)
 8010394:	f06f 0210 	mvn.w	r2, #16
 8010398:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801039c:	e02f      	b.n	80103fe <run_shortest+0xa36>
						}

					} else {
						if (pass[slant_count] >= 50) {
 801039e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103a2:	4a23      	ldr	r2, [pc, #140]	; (8010430 <run_shortest+0xa68>)
 80103a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a8:	2b31      	cmp	r3, #49	; 0x31
 80103aa:	dd08      	ble.n	80103be <run_shortest+0x9f6>
							pass[pass_count] = -1;
 80103ac:	4b1f      	ldr	r3, [pc, #124]	; (801042c <run_shortest+0xa64>)
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	4619      	mov	r1, r3
 80103b2:	4b1f      	ldr	r3, [pc, #124]	; (8010430 <run_shortest+0xa68>)
 80103b4:	f04f 32ff 	mov.w	r2, #4294967295
 80103b8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80103bc:	e009      	b.n	80103d2 <run_shortest+0xa0a>
						} else {
							slant_count = pass_count;
 80103be:	4b1b      	ldr	r3, [pc, #108]	; (801042c <run_shortest+0xa64>)
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							pass[slant_count] = 50;
 80103c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103ca:	4a19      	ldr	r2, [pc, #100]	; (8010430 <run_shortest+0xa68>)
 80103cc:	2132      	movs	r1, #50	; 0x32
 80103ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 80103d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103d6:	4a16      	ldr	r2, [pc, #88]	; (8010430 <run_shortest+0xa68>)
 80103d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80103dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103e0:	3201      	adds	r2, #1
 80103e2:	4913      	ldr	r1, [pc, #76]	; (8010430 <run_shortest+0xa68>)
 80103e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 80103e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ea:	f113 0f02 	cmn.w	r3, #2
 80103ee:	d103      	bne.n	80103f8 <run_shortest+0xa30>
							slant_direction = -3;
 80103f0:	f06f 0302 	mvn.w	r3, #2
 80103f4:	643b      	str	r3, [r7, #64]	; 0x40
 80103f6:	e002      	b.n	80103fe <run_shortest+0xa36>
						} else {
							slant_direction = -2;
 80103f8:	f06f 0301 	mvn.w	r3, #1
 80103fc:	643b      	str	r3, [r7, #64]	; 0x40
						}

					}

					pass_count++;
 80103fe:	4b0b      	ldr	r3, [pc, #44]	; (801042c <run_shortest+0xa64>)
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	3301      	adds	r3, #1
 8010404:	b29a      	uxth	r2, r3
 8010406:	4b09      	ldr	r3, [pc, #36]	; (801042c <run_shortest+0xa64>)
 8010408:	801a      	strh	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 801040a:	4b08      	ldr	r3, [pc, #32]	; (801042c <run_shortest+0xa64>)
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	4b07      	ldr	r3, [pc, #28]	; (8010430 <run_shortest+0xa68>)
 8010412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010416:	f113 0f03 	cmn.w	r3, #3
 801041a:	f6bf af5a 	bge.w	80102d2 <run_shortest+0x90a>

			}

			//		if(){}

			pass_count++;
 801041e:	4b03      	ldr	r3, [pc, #12]	; (801042c <run_shortest+0xa64>)
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	3301      	adds	r3, #1
 8010424:	b29a      	uxth	r2, r3
 8010426:	4b01      	ldr	r3, [pc, #4]	; (801042c <run_shortest+0xa64>)
 8010428:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 801042a:	e6bb      	b.n	80101a4 <run_shortest+0x7dc>
 801042c:	20000834 	.word	0x20000834
 8010430:	2000083c 	.word	0x2000083c
				break;
 8010434:	bf00      	nop
		}
		pass_count=0;
 8010436:	4bb1      	ldr	r3, [pc, #708]	; (80106fc <run_shortest+0xd34>)
 8010438:	2200      	movs	r2, #0
 801043a:	801a      	strh	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 801043c:	4baf      	ldr	r3, [pc, #700]	; (80106fc <run_shortest+0xd34>)
 801043e:	881b      	ldrh	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	4baf      	ldr	r3, [pc, #700]	; (8010700 <run_shortest+0xd38>)
 8010444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010448:	2b32      	cmp	r3, #50	; 0x32
 801044a:	d107      	bne.n	801045c <run_shortest+0xa94>
				pass[pass_count] =-1;
 801044c:	4bab      	ldr	r3, [pc, #684]	; (80106fc <run_shortest+0xd34>)
 801044e:	881b      	ldrh	r3, [r3, #0]
 8010450:	4619      	mov	r1, r3
 8010452:	4bab      	ldr	r3, [pc, #684]	; (8010700 <run_shortest+0xd38>)
 8010454:	f04f 32ff 	mov.w	r2, #4294967295
 8010458:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 801045c:	4ba7      	ldr	r3, [pc, #668]	; (80106fc <run_shortest+0xd34>)
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	461a      	mov	r2, r3
 8010462:	4ba7      	ldr	r3, [pc, #668]	; (8010700 <run_shortest+0xd38>)
 8010464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d006      	beq.n	801047a <run_shortest+0xab2>
				break;
			}
			pass_count++;
 801046c:	4ba3      	ldr	r3, [pc, #652]	; (80106fc <run_shortest+0xd34>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	3301      	adds	r3, #1
 8010472:	b29a      	uxth	r2, r3
 8010474:	4ba1      	ldr	r3, [pc, #644]	; (80106fc <run_shortest+0xd34>)
 8010476:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 8010478:	e7e0      	b.n	801043c <run_shortest+0xa74>
				break;
 801047a:	bf00      	nop
		}

	}
}
	int j = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 8010480:	e00b      	b.n	801049a <run_shortest+0xad2>
		printf("pass_count %d pass %d\n", j, pass[j]);
 8010482:	4a9f      	ldr	r2, [pc, #636]	; (8010700 <run_shortest+0xd38>)
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801048a:	461a      	mov	r2, r3
 801048c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801048e:	489d      	ldr	r0, [pc, #628]	; (8010704 <run_shortest+0xd3c>)
 8010490:	f011 f85a 	bl	8021548 <iprintf>
		j++;
 8010494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010496:	3301      	adds	r3, #1
 8010498:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 801049a:	4a99      	ldr	r2, [pc, #612]	; (8010700 <run_shortest+0xd38>)
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1ed      	bne.n	8010482 <run_shortest+0xaba>
	}
	int pass_count2;
	pass_count2=0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80104aa:	e002      	b.n	80104b2 <run_shortest+0xaea>
		pass_count2++;
 80104ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ae:	3301      	adds	r3, #1
 80104b0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80104b2:	4a93      	ldr	r2, [pc, #588]	; (8010700 <run_shortest+0xd38>)
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104be:	d0f5      	beq.n	80104ac <run_shortest+0xae4>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 80104c0:	4a8f      	ldr	r2, [pc, #572]	; (8010700 <run_shortest+0xd38>)
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104c8:	934e      	str	r3, [sp, #312]	; 0x138
 80104ca:	4668      	mov	r0, sp
 80104cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80104d0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80104d4:	4619      	mov	r1, r3
 80104d6:	f010 fbb7 	bl	8020c48 <memcpy>
 80104da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80104de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104e0:	f007 fffa 	bl	80184d8 <get_center_velocity>
 80104e4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	printf("%d,%f\n",pass_count2, end_velocity);
 80104e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104ea:	f7f0 f855 	bl	8000598 <__aeabi_f2d>
 80104ee:	4602      	mov	r2, r0
 80104f0:	460b      	mov	r3, r1
 80104f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104f4:	4884      	ldr	r0, [pc, #528]	; (8010708 <run_shortest+0xd40>)
 80104f6:	f011 f827 	bl	8021548 <iprintf>

	wait_ms_NoReset(500);
 80104fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80104fe:	f7f8 fb73 	bl	8008be8 <wait_ms_NoReset>
	pl_DriveMotor_standby(ON);
 8010502:	2001      	movs	r0, #1
 8010504:	f7f8 f840 	bl	8008588 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8010508:	2003      	movs	r0, #3
 801050a:	f7f8 f86f 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801050e:	2003      	movs	r0, #3
 8010510:	f7f8 f844 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8010514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010518:	f7f8 fb66 	bl	8008be8 <wait_ms_NoReset>
	no_safty = 1;
 801051c:	4b7b      	ldr	r3, [pc, #492]	; (801070c <run_shortest+0xd44>)
 801051e:	2201      	movs	r2, #1
 8010520:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 8010522:	4b7a      	ldr	r3, [pc, #488]	; (801070c <run_shortest+0xd44>)
 8010524:	2200      	movs	r2, #0
 8010526:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 8010528:	f7f4 feae 	bl	8005288 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 801052c:	7abb      	ldrb	r3, [r7, #10]
 801052e:	2b01      	cmp	r3, #1
 8010530:	d10f      	bne.n	8010552 <run_shortest+0xb8a>
		pl_FunMotor_duty(fun_ratio);
 8010532:	ed97 0a01 	vldr	s0, [r7, #4]
 8010536:	f7f8 f8c5 	bl	80086c4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 801053a:	f7f8 f8af 	bl	800869c <pl_FunMotor_start>
		wait_ms_NoReset(600);
 801053e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010542:	f7f8 fb51 	bl	8008be8 <wait_ms_NoReset>
		reset_gyro();
 8010546:	f7f1 fb5f 	bl	8001c08 <reset_gyro>
		reset_speed();
 801054a:	f7f0 fd6b 	bl	8001024 <reset_speed>
		clear_Ierror();
 801054e:	f7f4 fe9b 	bl	8005288 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						wait_ms_NoReset(2000);	//候補1

	}
	maze_mode = 1;
 8010552:	4b6f      	ldr	r3, [pc, #444]	; (8010710 <run_shortest+0xd48>)
 8010554:	2201      	movs	r2, #1
 8010556:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 8010558:	4b6e      	ldr	r3, [pc, #440]	; (8010714 <run_shortest+0xd4c>)
 801055a:	2201      	movs	r2, #1
 801055c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 801055e:	4b6e      	ldr	r3, [pc, #440]	; (8010718 <run_shortest+0xd50>)
 8010560:	2212      	movs	r2, #18
 8010562:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	pass_count = 0;
 8010564:	4b65      	ldr	r3, [pc, #404]	; (80106fc <run_shortest+0xd34>)
 8010566:	2200      	movs	r2, #0
 8010568:	801a      	strh	r2, [r3, #0]


	mode.WallControlMode=1;
 801056a:	2301      	movs	r3, #1
 801056c:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 801056e:	2300      	movs	r3, #0
 8010570:	777b      	strb	r3, [r7, #29]
	mode.calMazeMode=0;
 8010572:	2300      	movs	r3, #0
 8010574:	77bb      	strb	r3, [r7, #30]
	mode.WallCutMode=0;
 8010576:	2300      	movs	r3, #0
 8010578:	77fb      	strb	r3, [r7, #31]
	pass_count2=0;
 801057a:	2300      	movs	r3, #0
 801057c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 801057e:	e002      	b.n	8010586 <run_shortest+0xbbe>
		pass_count2++;
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	3301      	adds	r3, #1
 8010584:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 8010586:	4a5e      	ldr	r2, [pc, #376]	; (8010700 <run_shortest+0xd38>)
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010592:	d0f5      	beq.n	8010580 <run_shortest+0xbb8>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8010594:	4a5a      	ldr	r2, [pc, #360]	; (8010700 <run_shortest+0xd38>)
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801059c:	934e      	str	r3, [sp, #312]	; 0x138
 801059e:	4668      	mov	r0, sp
 80105a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80105a4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80105a8:	4619      	mov	r1, r3
 80105aa:	f010 fb4d 	bl	8020c48 <memcpy>
 80105ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80105b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105b4:	f007 ff90 	bl	80184d8 <get_center_velocity>
 80105b8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 80105bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80105c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80105c4:	ee17 0a90 	vmov	r0, s15
 80105c8:	f7ef ffe6 	bl	8000598 <__aeabi_f2d>
 80105cc:	f04f 0200 	mov.w	r2, #0
 80105d0:	4b52      	ldr	r3, [pc, #328]	; (801071c <run_shortest+0xd54>)
 80105d2:	f7f0 f963 	bl	800089c <__aeabi_ddiv>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4610      	mov	r0, r2
 80105dc:	4619      	mov	r1, r3
 80105de:	f04f 0200 	mov.w	r2, #0
 80105e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105e6:	f7f0 f959 	bl	800089c <__aeabi_ddiv>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4610      	mov	r0, r2
 80105f0:	4619      	mov	r1, r3
 80105f2:	f7f0 fb01 	bl	8000bf8 <__aeabi_d2f>
 80105f6:	4603      	mov	r3, r0
 80105f8:	69f8      	ldr	r0, [r7, #28]
 80105fa:	ee02 3a10 	vmov	s4, r3
 80105fe:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 8010602:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010606:	eddf 0a46 	vldr	s1, [pc, #280]	; 8010720 <run_shortest+0xd58>
 801060a:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 801060e:	f7f3 fb2b 	bl	8003c68 <straight_table2>


	while (pass_count <= 500) {
 8010612:	e2d5      	b.n	8010bc0 <run_shortest+0x11f8>
		pass_count2=pass_count+1;
 8010614:	4b39      	ldr	r3, [pc, #228]	; (80106fc <run_shortest+0xd34>)
 8010616:	881b      	ldrh	r3, [r3, #0]
 8010618:	3301      	adds	r3, #1
 801061a:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 801061c:	e002      	b.n	8010624 <run_shortest+0xc5c>
			pass_count2++;
 801061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010620:	3301      	adds	r3, #1
 8010622:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 8010624:	4a36      	ldr	r2, [pc, #216]	; (8010700 <run_shortest+0xd38>)
 8010626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801062c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010630:	d0f5      	beq.n	801061e <run_shortest+0xc56>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8010632:	4a33      	ldr	r2, [pc, #204]	; (8010700 <run_shortest+0xd38>)
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801063a:	934e      	str	r3, [sp, #312]	; 0x138
 801063c:	4668      	mov	r0, sp
 801063e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010642:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010646:	4619      	mov	r1, r3
 8010648:	f010 fafe 	bl	8020c48 <memcpy>
 801064c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010650:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010652:	f007 ff41 	bl	80184d8 <get_center_velocity>
 8010656:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (pass[pass_count] == -1) {
 801065a:	4b28      	ldr	r3, [pc, #160]	; (80106fc <run_shortest+0xd34>)
 801065c:	881b      	ldrh	r3, [r3, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	4b27      	ldr	r3, [pc, #156]	; (8010700 <run_shortest+0xd38>)
 8010662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066a:	d106      	bne.n	801067a <run_shortest+0xcb2>
			pass_count++;
 801066c:	4b23      	ldr	r3, [pc, #140]	; (80106fc <run_shortest+0xd34>)
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	3301      	adds	r3, #1
 8010672:	b29a      	uxth	r2, r3
 8010674:	4b21      	ldr	r3, [pc, #132]	; (80106fc <run_shortest+0xd34>)
 8010676:	801a      	strh	r2, [r3, #0]
 8010678:	e29a      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -2) {
 801067a:	4b20      	ldr	r3, [pc, #128]	; (80106fc <run_shortest+0xd34>)
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	4b1f      	ldr	r3, [pc, #124]	; (8010700 <run_shortest+0xd38>)
 8010682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010686:	f113 0f02 	cmn.w	r3, #2
 801068a:	d116      	bne.n	80106ba <run_shortest+0xcf2>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 801068c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010690:	9303      	str	r3, [sp, #12]
 8010692:	2301      	movs	r3, #1
 8010694:	9302      	str	r3, [sp, #8]
 8010696:	2300      	movs	r3, #0
 8010698:	9301      	str	r3, [sp, #4]
 801069a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80106a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106a4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80106a8:	f7fa f9d6 	bl	800aa58 <slalomR>

			pass_count++;
 80106ac:	4b13      	ldr	r3, [pc, #76]	; (80106fc <run_shortest+0xd34>)
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	3301      	adds	r3, #1
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	4b11      	ldr	r3, [pc, #68]	; (80106fc <run_shortest+0xd34>)
 80106b6:	801a      	strh	r2, [r3, #0]
 80106b8:	e27a      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -3) {
 80106ba:	4b10      	ldr	r3, [pc, #64]	; (80106fc <run_shortest+0xd34>)
 80106bc:	881b      	ldrh	r3, [r3, #0]
 80106be:	461a      	mov	r2, r3
 80106c0:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <run_shortest+0xd38>)
 80106c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106c6:	f113 0f03 	cmn.w	r3, #3
 80106ca:	d12b      	bne.n	8010724 <run_shortest+0xd5c>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 80106cc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	2301      	movs	r3, #1
 80106d4:	9302      	str	r3, [sp, #8]
 80106d6:	2300      	movs	r3, #0
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80106e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106e4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80106e8:	f7fa fb9c 	bl	800ae24 <slalomL>

			pass_count++;
 80106ec:	4b03      	ldr	r3, [pc, #12]	; (80106fc <run_shortest+0xd34>)
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	3301      	adds	r3, #1
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	4b01      	ldr	r3, [pc, #4]	; (80106fc <run_shortest+0xd34>)
 80106f6:	801a      	strh	r2, [r3, #0]
 80106f8:	e25a      	b.n	8010bb0 <run_shortest+0x11e8>
 80106fa:	bf00      	nop
 80106fc:	20000834 	.word	0x20000834
 8010700:	2000083c 	.word	0x2000083c
 8010704:	08024fa4 	.word	0x08024fa4
 8010708:	08024fbc 	.word	0x08024fbc
 801070c:	20000812 	.word	0x20000812
 8010710:	20000836 	.word	0x20000836
 8010714:	20000814 	.word	0x20000814
 8010718:	2000f284 	.word	0x2000f284
 801071c:	40290000 	.word	0x40290000
 8010720:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -4) {
 8010724:	4baa      	ldr	r3, [pc, #680]	; (80109d0 <run_shortest+0x1008>)
 8010726:	881b      	ldrh	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	4baa      	ldr	r3, [pc, #680]	; (80109d4 <run_shortest+0x100c>)
 801072c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010730:	f113 0f04 	cmn.w	r3, #4
 8010734:	d115      	bne.n	8010762 <run_shortest+0xd9a>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 8010736:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801073a:	9302      	str	r3, [sp, #8]
 801073c:	2300      	movs	r3, #0
 801073e:	9301      	str	r3, [sp, #4]
 8010740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801074a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801074c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010750:	f7fa fd4a 	bl	800b1e8 <turn90R>
			pass_count++;
 8010754:	4b9e      	ldr	r3, [pc, #632]	; (80109d0 <run_shortest+0x1008>)
 8010756:	881b      	ldrh	r3, [r3, #0]
 8010758:	3301      	adds	r3, #1
 801075a:	b29a      	uxth	r2, r3
 801075c:	4b9c      	ldr	r3, [pc, #624]	; (80109d0 <run_shortest+0x1008>)
 801075e:	801a      	strh	r2, [r3, #0]
 8010760:	e226      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -5) {
 8010762:	4b9b      	ldr	r3, [pc, #620]	; (80109d0 <run_shortest+0x1008>)
 8010764:	881b      	ldrh	r3, [r3, #0]
 8010766:	461a      	mov	r2, r3
 8010768:	4b9a      	ldr	r3, [pc, #616]	; (80109d4 <run_shortest+0x100c>)
 801076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801076e:	f113 0f05 	cmn.w	r3, #5
 8010772:	d115      	bne.n	80107a0 <run_shortest+0xdd8>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 8010774:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010778:	9302      	str	r3, [sp, #8]
 801077a:	2300      	movs	r3, #0
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801078a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801078e:	f7fa fe95 	bl	800b4bc <turn90L>
			pass_count++;
 8010792:	4b8f      	ldr	r3, [pc, #572]	; (80109d0 <run_shortest+0x1008>)
 8010794:	881b      	ldrh	r3, [r3, #0]
 8010796:	3301      	adds	r3, #1
 8010798:	b29a      	uxth	r2, r3
 801079a:	4b8d      	ldr	r3, [pc, #564]	; (80109d0 <run_shortest+0x1008>)
 801079c:	801a      	strh	r2, [r3, #0]
 801079e:	e207      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -6) {
 80107a0:	4b8b      	ldr	r3, [pc, #556]	; (80109d0 <run_shortest+0x1008>)
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b8b      	ldr	r3, [pc, #556]	; (80109d4 <run_shortest+0x100c>)
 80107a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ac:	f113 0f06 	cmn.w	r3, #6
 80107b0:	d115      	bne.n	80107de <run_shortest+0xe16>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 80107b2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80107b6:	9302      	str	r3, [sp, #8]
 80107b8:	2300      	movs	r3, #0
 80107ba:	9301      	str	r3, [sp, #4]
 80107bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80107c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107c8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80107cc:	f7fa ffda 	bl	800b784 <turn180R>
			pass_count++;
 80107d0:	4b7f      	ldr	r3, [pc, #508]	; (80109d0 <run_shortest+0x1008>)
 80107d2:	881b      	ldrh	r3, [r3, #0]
 80107d4:	3301      	adds	r3, #1
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	4b7d      	ldr	r3, [pc, #500]	; (80109d0 <run_shortest+0x1008>)
 80107da:	801a      	strh	r2, [r3, #0]
 80107dc:	e1e8      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -7) {
 80107de:	4b7c      	ldr	r3, [pc, #496]	; (80109d0 <run_shortest+0x1008>)
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	461a      	mov	r2, r3
 80107e4:	4b7b      	ldr	r3, [pc, #492]	; (80109d4 <run_shortest+0x100c>)
 80107e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ea:	f113 0f07 	cmn.w	r3, #7
 80107ee:	d115      	bne.n	801081c <run_shortest+0xe54>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 80107f0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80107f4:	9302      	str	r3, [sp, #8]
 80107f6:	2300      	movs	r3, #0
 80107f8:	9301      	str	r3, [sp, #4]
 80107fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010806:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801080a:	f7fb f925 	bl	800ba58 <turn180L>
			pass_count++;
 801080e:	4b70      	ldr	r3, [pc, #448]	; (80109d0 <run_shortest+0x1008>)
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	3301      	adds	r3, #1
 8010814:	b29a      	uxth	r2, r3
 8010816:	4b6e      	ldr	r3, [pc, #440]	; (80109d0 <run_shortest+0x1008>)
 8010818:	801a      	strh	r2, [r3, #0]
 801081a:	e1c9      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -8) { //入り45R
 801081c:	4b6c      	ldr	r3, [pc, #432]	; (80109d0 <run_shortest+0x1008>)
 801081e:	881b      	ldrh	r3, [r3, #0]
 8010820:	461a      	mov	r2, r3
 8010822:	4b6c      	ldr	r3, [pc, #432]	; (80109d4 <run_shortest+0x100c>)
 8010824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010828:	f113 0f08 	cmn.w	r3, #8
 801082c:	d115      	bne.n	801085a <run_shortest+0xe92>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 801082e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010832:	9302      	str	r3, [sp, #8]
 8010834:	2300      	movs	r3, #0
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010844:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010848:	f7fb fa6e 	bl	800bd28 <turn45inR>
			pass_count++;
 801084c:	4b60      	ldr	r3, [pc, #384]	; (80109d0 <run_shortest+0x1008>)
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	3301      	adds	r3, #1
 8010852:	b29a      	uxth	r2, r3
 8010854:	4b5e      	ldr	r3, [pc, #376]	; (80109d0 <run_shortest+0x1008>)
 8010856:	801a      	strh	r2, [r3, #0]
 8010858:	e1aa      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801085a:	4b5d      	ldr	r3, [pc, #372]	; (80109d0 <run_shortest+0x1008>)
 801085c:	881b      	ldrh	r3, [r3, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	4b5c      	ldr	r3, [pc, #368]	; (80109d4 <run_shortest+0x100c>)
 8010862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010866:	f113 0f09 	cmn.w	r3, #9
 801086a:	d115      	bne.n	8010898 <run_shortest+0xed0>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 801086c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010870:	9302      	str	r3, [sp, #8]
 8010872:	2300      	movs	r3, #0
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010882:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010886:	f7fb fc97 	bl	800c1b8 <turn45inL>
			pass_count++;
 801088a:	4b51      	ldr	r3, [pc, #324]	; (80109d0 <run_shortest+0x1008>)
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	3301      	adds	r3, #1
 8010890:	b29a      	uxth	r2, r3
 8010892:	4b4f      	ldr	r3, [pc, #316]	; (80109d0 <run_shortest+0x1008>)
 8010894:	801a      	strh	r2, [r3, #0]
 8010896:	e18b      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -10) { //入り135R
 8010898:	4b4d      	ldr	r3, [pc, #308]	; (80109d0 <run_shortest+0x1008>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	461a      	mov	r2, r3
 801089e:	4b4d      	ldr	r3, [pc, #308]	; (80109d4 <run_shortest+0x100c>)
 80108a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a4:	f113 0f0a 	cmn.w	r3, #10
 80108a8:	d115      	bne.n	80108d6 <run_shortest+0xf0e>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 80108aa:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80108ae:	9302      	str	r3, [sp, #8]
 80108b0:	2300      	movs	r3, #0
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80108be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108c0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80108c4:	f7fb feb8 	bl	800c638 <turn135inR>
			pass_count++;
 80108c8:	4b41      	ldr	r3, [pc, #260]	; (80109d0 <run_shortest+0x1008>)
 80108ca:	881b      	ldrh	r3, [r3, #0]
 80108cc:	3301      	adds	r3, #1
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	4b3f      	ldr	r3, [pc, #252]	; (80109d0 <run_shortest+0x1008>)
 80108d2:	801a      	strh	r2, [r3, #0]
 80108d4:	e16c      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80108d6:	4b3e      	ldr	r3, [pc, #248]	; (80109d0 <run_shortest+0x1008>)
 80108d8:	881b      	ldrh	r3, [r3, #0]
 80108da:	461a      	mov	r2, r3
 80108dc:	4b3d      	ldr	r3, [pc, #244]	; (80109d4 <run_shortest+0x100c>)
 80108de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e2:	f113 0f0b 	cmn.w	r3, #11
 80108e6:	d115      	bne.n	8010914 <run_shortest+0xf4c>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80108e8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80108ec:	9302      	str	r3, [sp, #8]
 80108ee:	2300      	movs	r3, #0
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80108f6:	9300      	str	r3, [sp, #0]
 80108f8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80108fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108fe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010902:	f7fc f8e1 	bl	800cac8 <turn135inL>
			pass_count++;
 8010906:	4b32      	ldr	r3, [pc, #200]	; (80109d0 <run_shortest+0x1008>)
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	3301      	adds	r3, #1
 801090c:	b29a      	uxth	r2, r3
 801090e:	4b30      	ldr	r3, [pc, #192]	; (80109d0 <run_shortest+0x1008>)
 8010910:	801a      	strh	r2, [r3, #0]
 8010912:	e14d      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010914:	4b2e      	ldr	r3, [pc, #184]	; (80109d0 <run_shortest+0x1008>)
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	461a      	mov	r2, r3
 801091a:	4b2e      	ldr	r3, [pc, #184]	; (80109d4 <run_shortest+0x100c>)
 801091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010920:	f113 0f0c 	cmn.w	r3, #12
 8010924:	d115      	bne.n	8010952 <run_shortest+0xf8a>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 8010926:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801092a:	9302      	str	r3, [sp, #8]
 801092c:	2300      	movs	r3, #0
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801093c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010940:	f7fc fb06 	bl	800cf50 <turn45outR>
			pass_count++;
 8010944:	4b22      	ldr	r3, [pc, #136]	; (80109d0 <run_shortest+0x1008>)
 8010946:	881b      	ldrh	r3, [r3, #0]
 8010948:	3301      	adds	r3, #1
 801094a:	b29a      	uxth	r2, r3
 801094c:	4b20      	ldr	r3, [pc, #128]	; (80109d0 <run_shortest+0x1008>)
 801094e:	801a      	strh	r2, [r3, #0]
 8010950:	e12e      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010952:	4b1f      	ldr	r3, [pc, #124]	; (80109d0 <run_shortest+0x1008>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	4b1e      	ldr	r3, [pc, #120]	; (80109d4 <run_shortest+0x100c>)
 801095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801095e:	f113 0f0d 	cmn.w	r3, #13
 8010962:	d115      	bne.n	8010990 <run_shortest+0xfc8>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010964:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010968:	9302      	str	r3, [sp, #8]
 801096a:	2300      	movs	r3, #0
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8010978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801097a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801097e:	f7fc fcd9 	bl	800d334 <turn45outL>
			pass_count++;
 8010982:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <run_shortest+0x1008>)
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	3301      	adds	r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	4b11      	ldr	r3, [pc, #68]	; (80109d0 <run_shortest+0x1008>)
 801098c:	801a      	strh	r2, [r3, #0]
 801098e:	e10f      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -14) { //出り135R
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <run_shortest+0x1008>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	461a      	mov	r2, r3
 8010996:	4b0f      	ldr	r3, [pc, #60]	; (80109d4 <run_shortest+0x100c>)
 8010998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801099c:	f113 0f0e 	cmn.w	r3, #14
 80109a0:	d11a      	bne.n	80109d8 <run_shortest+0x1010>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 80109a2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80109a6:	9302      	str	r3, [sp, #8]
 80109a8:	2300      	movs	r3, #0
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80109b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80109b8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80109bc:	f7fc fea2 	bl	800d704 <turn135outR>
			pass_count++;
 80109c0:	4b03      	ldr	r3, [pc, #12]	; (80109d0 <run_shortest+0x1008>)
 80109c2:	881b      	ldrh	r3, [r3, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	4b01      	ldr	r3, [pc, #4]	; (80109d0 <run_shortest+0x1008>)
 80109ca:	801a      	strh	r2, [r3, #0]
 80109cc:	e0f0      	b.n	8010bb0 <run_shortest+0x11e8>
 80109ce:	bf00      	nop
 80109d0:	20000834 	.word	0x20000834
 80109d4:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -15) { //出り135L
 80109d8:	4ba1      	ldr	r3, [pc, #644]	; (8010c60 <run_shortest+0x1298>)
 80109da:	881b      	ldrh	r3, [r3, #0]
 80109dc:	461a      	mov	r2, r3
 80109de:	4ba1      	ldr	r3, [pc, #644]	; (8010c64 <run_shortest+0x129c>)
 80109e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109e4:	f113 0f0f 	cmn.w	r3, #15
 80109e8:	d115      	bne.n	8010a16 <run_shortest+0x104e>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80109ea:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80109ee:	9302      	str	r3, [sp, #8]
 80109f0:	2300      	movs	r3, #0
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80109fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a00:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a04:	f7fd f870 	bl	800dae8 <turn135outL>
			pass_count++;
 8010a08:	4b95      	ldr	r3, [pc, #596]	; (8010c60 <run_shortest+0x1298>)
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	4b93      	ldr	r3, [pc, #588]	; (8010c60 <run_shortest+0x1298>)
 8010a12:	801a      	strh	r2, [r3, #0]
 8010a14:	e0cc      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010a16:	4b92      	ldr	r3, [pc, #584]	; (8010c60 <run_shortest+0x1298>)
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	4b91      	ldr	r3, [pc, #580]	; (8010c64 <run_shortest+0x129c>)
 8010a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a22:	f113 0f10 	cmn.w	r3, #16
 8010a26:	d115      	bne.n	8010a54 <run_shortest+0x108c>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 8010a28:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010a2c:	9302      	str	r3, [sp, #8]
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9301      	str	r3, [sp, #4]
 8010a32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a3e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a42:	f7fd fa3d 	bl	800dec0 <V90R>
			pass_count++;
 8010a46:	4b86      	ldr	r3, [pc, #536]	; (8010c60 <run_shortest+0x1298>)
 8010a48:	881b      	ldrh	r3, [r3, #0]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	4b84      	ldr	r3, [pc, #528]	; (8010c60 <run_shortest+0x1298>)
 8010a50:	801a      	strh	r2, [r3, #0]
 8010a52:	e0ad      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010a54:	4b82      	ldr	r3, [pc, #520]	; (8010c60 <run_shortest+0x1298>)
 8010a56:	881b      	ldrh	r3, [r3, #0]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	4b82      	ldr	r3, [pc, #520]	; (8010c64 <run_shortest+0x129c>)
 8010a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a60:	f113 0f11 	cmn.w	r3, #17
 8010a64:	d115      	bne.n	8010a92 <run_shortest+0x10ca>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010a66:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010a6a:	9302      	str	r3, [sp, #8]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	9301      	str	r3, [sp, #4]
 8010a70:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8010a74:	9300      	str	r3, [sp, #0]
 8010a76:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a7c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a80:	f7fd fc2a 	bl	800e2d8 <V90L>
			pass_count++;
 8010a84:	4b76      	ldr	r3, [pc, #472]	; (8010c60 <run_shortest+0x1298>)
 8010a86:	881b      	ldrh	r3, [r3, #0]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	4b74      	ldr	r3, [pc, #464]	; (8010c60 <run_shortest+0x1298>)
 8010a8e:	801a      	strh	r2, [r3, #0]
 8010a90:	e08e      	b.n	8010bb0 <run_shortest+0x11e8>
		}
		else if (pass[pass_count] >= 1) {
 8010a92:	4b73      	ldr	r3, [pc, #460]	; (8010c60 <run_shortest+0x1298>)
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	461a      	mov	r2, r3
 8010a98:	4b72      	ldr	r3, [pc, #456]	; (8010c64 <run_shortest+0x129c>)
 8010a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f340 8086 	ble.w	8010bb0 <run_shortest+0x11e8>
			first_v = howspeed.TurnCentervelocity;
 8010aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
			last_v = howspeed.TurnCentervelocity;
 8010aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aaa:	623b      	str	r3, [r7, #32]
			if (pass_count >= 1) {
 8010aac:	4b6c      	ldr	r3, [pc, #432]	; (8010c60 <run_shortest+0x1298>)
 8010aae:	881b      	ldrh	r3, [r3, #0]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d013      	beq.n	8010adc <run_shortest+0x1114>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010ab4:	4b6a      	ldr	r3, [pc, #424]	; (8010c60 <run_shortest+0x1298>)
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	4a6a      	ldr	r2, [pc, #424]	; (8010c64 <run_shortest+0x129c>)
 8010abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ac0:	f113 0f02 	cmn.w	r3, #2
 8010ac4:	d008      	beq.n	8010ad8 <run_shortest+0x1110>
 8010ac6:	4b66      	ldr	r3, [pc, #408]	; (8010c60 <run_shortest+0x1298>)
 8010ac8:	881b      	ldrh	r3, [r3, #0]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	4a65      	ldr	r2, [pc, #404]	; (8010c64 <run_shortest+0x129c>)
 8010ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ad2:	f113 0f03 	cmn.w	r3, #3
 8010ad6:	d101      	bne.n	8010adc <run_shortest+0x1114>
					first_v = howspeed.SlalomCentervelocity;
 8010ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ada:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010adc:	4b60      	ldr	r3, [pc, #384]	; (8010c60 <run_shortest+0x1298>)
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	4a60      	ldr	r2, [pc, #384]	; (8010c64 <run_shortest+0x129c>)
 8010ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ae8:	f113 0f02 	cmn.w	r3, #2
 8010aec:	d008      	beq.n	8010b00 <run_shortest+0x1138>
 8010aee:	4b5c      	ldr	r3, [pc, #368]	; (8010c60 <run_shortest+0x1298>)
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	3301      	adds	r3, #1
 8010af4:	4a5b      	ldr	r2, [pc, #364]	; (8010c64 <run_shortest+0x129c>)
 8010af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010afa:	f113 0f03 	cmn.w	r3, #3
 8010afe:	d101      	bne.n	8010b04 <run_shortest+0x113c>
				last_v = howspeed.SlalomCentervelocity;
 8010b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b02:	623b      	str	r3, [r7, #32]
			}
			if (pass[pass_count] >= 50) {
 8010b04:	4b56      	ldr	r3, [pc, #344]	; (8010c60 <run_shortest+0x1298>)
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4b56      	ldr	r3, [pc, #344]	; (8010c64 <run_shortest+0x129c>)
 8010b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b10:	2b31      	cmp	r3, #49	; 0x31
 8010b12:	dd27      	ble.n	8010b64 <run_shortest+0x119c>
				mode.WallControlMode=3;
 8010b14:	2303      	movs	r3, #3
 8010b16:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8010b1c:	4b50      	ldr	r3, [pc, #320]	; (8010c60 <run_shortest+0x1298>)
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	4b50      	ldr	r3, [pc, #320]	; (8010c64 <run_shortest+0x129c>)
 8010b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b28:	3b32      	subs	r3, #50	; 0x32
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7ef fd22 	bl	8000574 <__aeabi_i2d>
 8010b30:	a349      	add	r3, pc, #292	; (adr r3, 8010c58 <run_shortest+0x1290>)
 8010b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b36:	f7ef fd87 	bl	8000648 <__aeabi_dmul>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	4610      	mov	r0, r2
 8010b40:	4619      	mov	r1, r3
 8010b42:	f7f0 f859 	bl	8000bf8 <__aeabi_d2f>
 8010b46:	4603      	mov	r3, r0
 8010b48:	69f8      	ldr	r0, [r7, #28]
 8010b4a:	ed97 2a04 	vldr	s4, [r7, #16]
 8010b4e:	edd7 1a05 	vldr	s3, [r7, #20]
 8010b52:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010b56:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010b5a:	ee00 3a10 	vmov	s0, r3
 8010b5e:	f7f3 f883 	bl	8003c68 <straight_table2>
 8010b62:	e01f      	b.n	8010ba4 <run_shortest+0x11dc>
				//straight_table_max((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc,35000, mode);
			} else {
				mode.WallControlMode=1;
 8010b64:	2301      	movs	r3, #1
 8010b66:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8010b6c:	4b3c      	ldr	r3, [pc, #240]	; (8010c60 <run_shortest+0x1298>)
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	461a      	mov	r2, r3
 8010b72:	4b3c      	ldr	r3, [pc, #240]	; (8010c64 <run_shortest+0x129c>)
 8010b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	011a      	lsls	r2, r3, #4
 8010b80:	1ad3      	subs	r3, r2, r3
 8010b82:	ee07 3a90 	vmov	s15, r3
 8010b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b8a:	69f8      	ldr	r0, [r7, #28]
 8010b8c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010b90:	edd7 1a05 	vldr	s3, [r7, #20]
 8010b94:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010b98:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8010ba0:	f7f3 f862 	bl	8003c68 <straight_table2>
				//straight_table_max((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc,35000, mode);
			}

			pass_count++;
 8010ba4:	4b2e      	ldr	r3, [pc, #184]	; (8010c60 <run_shortest+0x1298>)
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	3301      	adds	r3, #1
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	4b2c      	ldr	r3, [pc, #176]	; (8010c60 <run_shortest+0x1298>)
 8010bae:	801a      	strh	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010bb0:	4b2b      	ldr	r3, [pc, #172]	; (8010c60 <run_shortest+0x1298>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4b2b      	ldr	r3, [pc, #172]	; (8010c64 <run_shortest+0x129c>)
 8010bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d006      	beq.n	8010bce <run_shortest+0x1206>
	while (pass_count <= 500) {
 8010bc0:	4b27      	ldr	r3, [pc, #156]	; (8010c60 <run_shortest+0x1298>)
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010bc8:	f67f ad24 	bls.w	8010614 <run_shortest+0xc4c>
 8010bcc:	e000      	b.n	8010bd0 <run_shortest+0x1208>
			break;
 8010bce:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	773b      	strb	r3, [r7, #28]
		mode.WallControlStatus=0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	777b      	strb	r3, [r7, #29]
		straight_table2(MAZE_SECTION,end_velocity, 0,inspeed, inacc, mode);
 8010bd8:	69f8      	ldr	r0, [r7, #28]
 8010bda:	ed97 2a04 	vldr	s4, [r7, #16]
 8010bde:	edd7 1a05 	vldr	s3, [r7, #20]
 8010be2:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8010c68 <run_shortest+0x12a0>
 8010be6:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8010bea:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8010c6c <run_shortest+0x12a4>
 8010bee:	f7f3 f83b 	bl	8003c68 <straight_table2>
		wait_ms_NoReset(700);
 8010bf2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010bf6:	f7f7 fff7 	bl	8008be8 <wait_ms_NoReset>
		pl_FunMotor_stop();
 8010bfa:	f7f7 fd59 	bl	80086b0 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8010bfe:	4b1c      	ldr	r3, [pc, #112]	; (8010c70 <run_shortest+0x12a8>)
 8010c00:	2200      	movs	r2, #0
 8010c02:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010c04:	4b1b      	ldr	r3, [pc, #108]	; (8010c74 <run_shortest+0x12ac>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010c0a:	4b1b      	ldr	r3, [pc, #108]	; (8010c78 <run_shortest+0x12b0>)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010c10:	2000      	movs	r0, #0
 8010c12:	f7f7 fcb9 	bl	8008588 <pl_DriveMotor_standby>
	int t = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24

	while (t <= 14) {
 8010c1a:	e016      	b.n	8010c4a <run_shortest+0x1282>
		wall.row[t] = record.row[t];
 8010c1c:	4a17      	ldr	r2, [pc, #92]	; (8010c7c <run_shortest+0x12b4>)
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010c24:	4916      	ldr	r1, [pc, #88]	; (8010c80 <run_shortest+0x12b8>)
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8010c2c:	4a13      	ldr	r2, [pc, #76]	; (8010c7c <run_shortest+0x12b4>)
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	330e      	adds	r3, #14
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	685a      	ldr	r2, [r3, #4]
 8010c38:	4911      	ldr	r1, [pc, #68]	; (8010c80 <run_shortest+0x12b8>)
 8010c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3c:	330e      	adds	r3, #14
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	440b      	add	r3, r1
 8010c42:	605a      	str	r2, [r3, #4]
		t++;
 8010c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c46:	3301      	adds	r3, #1
 8010c48:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	2b0e      	cmp	r3, #14
 8010c4e:	dde5      	ble.n	8010c1c <run_shortest+0x1254>
	}
	t = 0;
 8010c50:	2300      	movs	r3, #0
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c54:	e031      	b.n	8010cba <run_shortest+0x12f2>
 8010c56:	bf00      	nop
 8010c58:	c022ec18 	.word	0xc022ec18
 8010c5c:	404fd1de 	.word	0x404fd1de
 8010c60:	20000834 	.word	0x20000834
 8010c64:	2000083c 	.word	0x2000083c
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	42b40000 	.word	0x42b40000
 8010c70:	20000836 	.word	0x20000836
 8010c74:	20000814 	.word	0x20000814
 8010c78:	2000f284 	.word	0x2000f284
 8010c7c:	20001100 	.word	0x20001100
 8010c80:	20001010 	.word	0x20001010
		wall.row_look[t] = ~wall.row_look[t];
 8010c84:	4a11      	ldr	r2, [pc, #68]	; (8010ccc <run_shortest+0x1304>)
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	331e      	adds	r3, #30
 8010c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c8e:	43da      	mvns	r2, r3
 8010c90:	490e      	ldr	r1, [pc, #56]	; (8010ccc <run_shortest+0x1304>)
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	331e      	adds	r3, #30
 8010c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = ~wall.column_look[t];
 8010c9a:	4a0c      	ldr	r2, [pc, #48]	; (8010ccc <run_shortest+0x1304>)
 8010c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9e:	332c      	adds	r3, #44	; 0x2c
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	4413      	add	r3, r2
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	43da      	mvns	r2, r3
 8010ca8:	4908      	ldr	r1, [pc, #32]	; (8010ccc <run_shortest+0x1304>)
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	332c      	adds	r3, #44	; 0x2c
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	605a      	str	r2, [r3, #4]
		t++;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	2b0e      	cmp	r3, #14
 8010cbe:	dde1      	ble.n	8010c84 <run_shortest+0x12bc>
	}

}
 8010cc0:	bf00      	nop
 8010cc2:	bf00      	nop
 8010cc4:	3748      	adds	r7, #72	; 0x48
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20001010 	.word	0x20001010

08010cd0 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b08a      	sub	sp, #40	; 0x28
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010cf2:	f107 0114 	add.w	r1, r7, #20
 8010cf6:	f107 0318 	add.w	r3, r7, #24
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fd fea3 	bl	800ea48 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010d02:	69b8      	ldr	r0, [r7, #24]
 8010d04:	6979      	ldr	r1, [r7, #20]
 8010d06:	f107 021e 	add.w	r2, r7, #30
 8010d0a:	f107 031c 	add.w	r3, r7, #28
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	f107 031d 	add.w	r3, r7, #29
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	4613      	mov	r3, r2
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	f000 fe9d 	bl	8011a58 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8010d1e:	7fbb      	ldrb	r3, [r7, #30]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d007      	beq.n	8010d34 <decision_kitiku+0x64>
 8010d24:	7f7b      	ldrb	r3, [r7, #29]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d004      	beq.n	8010d34 <decision_kitiku+0x64>
 8010d2a:	7f3b      	ldrb	r3, [r7, #28]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d001      	beq.n	8010d34 <decision_kitiku+0x64>
 8010d30:	2301      	movs	r3, #1
 8010d32:	e000      	b.n	8010d36 <decision_kitiku+0x66>
 8010d34:	2300      	movs	r3, #0
 8010d36:	77fb      	strb	r3, [r7, #31]
 8010d38:	7ffb      	ldrb	r3, [r7, #31]
 8010d3a:	f003 0301 	and.w	r3, r3, #1
 8010d3e:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010d40:	7ffb      	ldrb	r3, [r7, #31]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d02b      	beq.n	8010d9e <decision_kitiku+0xce>
 8010d46:	887a      	ldrh	r2, [r7, #2]
 8010d48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d827      	bhi.n	8010d9e <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010d4e:	887a      	ldrh	r2, [r7, #2]
 8010d50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d823      	bhi.n	8010d9e <decision_kitiku+0xce>
 8010d56:	887a      	ldrh	r2, [r7, #2]
 8010d58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d81f      	bhi.n	8010d9e <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d102      	bne.n	8010d6a <decision_kitiku+0x9a>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b0d      	cmp	r3, #13
 8010d68:	dc11      	bgt.n	8010d8e <decision_kitiku+0xbe>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	d102      	bne.n	8010d76 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b0d      	cmp	r3, #13
 8010d74:	dc0b      	bgt.n	8010d8e <decision_kitiku+0xbe>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b03      	cmp	r3, #3
 8010d7a:	d102      	bne.n	8010d82 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	dd05      	ble.n	8010d8e <decision_kitiku+0xbe>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	d106      	bne.n	8010d96 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	dc03      	bgt.n	8010d96 <decision_kitiku+0xc6>
			kitikukan = 0;
 8010d8e:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <decision_kitiku+0xe0>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010d94:	e007      	b.n	8010da6 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010d96:	4b06      	ldr	r3, [pc, #24]	; (8010db0 <decision_kitiku+0xe0>)
 8010d98:	2201      	movs	r2, #1
 8010d9a:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010d9c:	e003      	b.n	8010da6 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010d9e:	4b04      	ldr	r3, [pc, #16]	; (8010db0 <decision_kitiku+0xe0>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	601a      	str	r2, [r3, #0]
	}


}
 8010da4:	bf00      	nop
 8010da6:	bf00      	nop
 8010da8:	3720      	adds	r7, #32
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20000838 	.word	0x20000838

08010db4 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction,int *kitiku_distance) {
 8010db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db6:	b09b      	sub	sp, #108	; 0x6c
 8010db8:	af04      	add	r7, sp, #16
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	607a      	str	r2, [r7, #4]
 8010dc0:	603b      	str	r3, [r7, #0]
	*kitiku_distance = 1;
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	601a      	str	r2, [r3, #0]
	int kitiku = 1;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	647b      	str	r3, [r7, #68]	; 0x44
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010dde:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010de6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fd fe2d 	bl	800ea48 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	633b      	str	r3, [r7, #48]	; 0x30
 8010df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e00:	623b      	str	r3, [r7, #32]
 8010e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e04:	61fb      	str	r3, [r7, #28]

		update_coordinate(&x_front,&y_front,direction_now);
 8010e06:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010e0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fd fe19 	bl	800ea48 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010e1e:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010e22:	9301      	str	r3, [sp, #4]
 8010e24:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e2e:	f000 fe13 	bl	8011a58 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010e32:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d009      	beq.n	8010e4e <compress_kitiku+0x9a>
 8010e3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d005      	beq.n	8010e4e <compress_kitiku+0x9a>
 8010e42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d001      	beq.n	8010e4e <compress_kitiku+0x9a>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e000      	b.n	8010e50 <compress_kitiku+0x9c>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e62:	2b04      	cmp	r3, #4
 8010e64:	d102      	bne.n	8010e6c <compress_kitiku+0xb8>
 8010e66:	2301      	movs	r3, #1
 8010e68:	653b      	str	r3, [r7, #80]	; 0x50
 8010e6a:	e002      	b.n	8010e72 <compress_kitiku+0xbe>
 8010e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e6e:	3301      	adds	r3, #1
 8010e70:	653b      	str	r3, [r7, #80]	; 0x50
		update_coordinate(&x_right,&y_right,direction_right);
 8010e72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7fd fde3 	bl	800ea48 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e86:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010e8a:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010e8e:	9301      	str	r3, [sp, #4]
 8010e90:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	4613      	mov	r3, r2
 8010e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e9a:	f000 fddd 	bl	8011a58 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010e9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d009      	beq.n	8010eba <compress_kitiku+0x106>
 8010ea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d005      	beq.n	8010eba <compress_kitiku+0x106>
 8010eae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d001      	beq.n	8010eba <compress_kitiku+0x106>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e000      	b.n	8010ebc <compress_kitiku+0x108>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ec0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d102      	bne.n	8010ed8 <compress_kitiku+0x124>
 8010ed2:	2304      	movs	r3, #4
 8010ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ed6:	e002      	b.n	8010ede <compress_kitiku+0x12a>
 8010ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eda:	3b01      	subs	r3, #1
 8010edc:	64fb      	str	r3, [r7, #76]	; 0x4c
		update_coordinate(&x_left,&y_left,direction_left);
 8010ede:	f107 011c 	add.w	r1, r7, #28
 8010ee2:	f107 0320 	add.w	r3, r7, #32
 8010ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fd fdad 	bl	800ea48 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010eee:	6a38      	ldr	r0, [r7, #32]
 8010ef0:	69f9      	ldr	r1, [r7, #28]
 8010ef2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010ef6:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	4613      	mov	r3, r2
 8010f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f06:	f000 fda7 	bl	8011a58 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010f0a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d009      	beq.n	8010f26 <compress_kitiku+0x172>
 8010f12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d005      	beq.n	8010f26 <compress_kitiku+0x172>
 8010f1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <compress_kitiku+0x172>
 8010f22:	2301      	movs	r3, #1
 8010f24:	e000      	b.n	8010f28 <compress_kitiku+0x174>
 8010f26:	2300      	movs	r3, #0
 8010f28:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8010f2c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8010f30:	f003 0301 	and.w	r3, r3, #1
 8010f34:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010f38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f3c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010f40:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010f4a:	9300      	str	r3, [sp, #0]
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f50:	f000 fc26 	bl	80117a0 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f58:	f107 0614 	add.w	r6, r7, #20
 8010f5c:	f107 0516 	add.w	r5, r7, #22
 8010f60:	f107 0418 	add.w	r4, r7, #24
 8010f64:	f107 001a 	add.w	r0, r7, #26
 8010f68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f6a:	9102      	str	r1, [sp, #8]
 8010f6c:	9201      	str	r2, [sp, #4]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4633      	mov	r3, r6
 8010f72:	462a      	mov	r2, r5
 8010f74:	4621      	mov	r1, r4
 8010f76:	f000 fed1 	bl	8011d1c <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010f7a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <compress_kitiku+0x1d2>
 8010f82:	23ff      	movs	r3, #255	; 0xff
 8010f84:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010f86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d001      	beq.n	8010f92 <compress_kitiku+0x1de>
 8010f8e:	23ff      	movs	r3, #255	; 0xff
 8010f90:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010f92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <compress_kitiku+0x1ea>
 8010f9a:	23ff      	movs	r3, #255	; 0xff
 8010f9c:	82bb      	strh	r3, [r7, #20]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 8010f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa2:	496c      	ldr	r1, [pc, #432]	; (8011154 <compress_kitiku+0x3a0>)
 8010fa4:	0112      	lsls	r2, r2, #4
 8010fa6:	4413      	add	r3, r2
 8010fa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	f240 8099 	bls.w	80110e4 <compress_kitiku+0x330>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d103      	bne.n	8010fc0 <compress_kitiku+0x20c>
 8010fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fba:	2b0d      	cmp	r3, #13
 8010fbc:	f300 8094 	bgt.w	80110e8 <compress_kitiku+0x334>
		if (direction_now==2 && x_now>=14) {break;}
 8010fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fc2:	2b02      	cmp	r3, #2
 8010fc4:	d103      	bne.n	8010fce <compress_kitiku+0x21a>
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	2b0d      	cmp	r3, #13
 8010fca:	f300 808f 	bgt.w	80110ec <compress_kitiku+0x338>
		if (direction_now==3 && y_now<=1) {break;}
 8010fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d103      	bne.n	8010fdc <compress_kitiku+0x228>
 8010fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	f340 808a 	ble.w	80110f0 <compress_kitiku+0x33c>
		if (direction_now==4 && x_now<=1) {break;}
 8010fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fde:	2b04      	cmp	r3, #4
 8010fe0:	d103      	bne.n	8010fea <compress_kitiku+0x236>
 8010fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	f340 8085 	ble.w	80110f4 <compress_kitiku+0x340>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010fea:	8b7b      	ldrh	r3, [r7, #26]
 8010fec:	2bff      	cmp	r3, #255	; 0xff
 8010fee:	d10c      	bne.n	801100a <compress_kitiku+0x256>
 8010ff0:	8b3b      	ldrh	r3, [r7, #24]
 8010ff2:	2bff      	cmp	r3, #255	; 0xff
 8010ff4:	d109      	bne.n	801100a <compress_kitiku+0x256>
 8010ff6:	8abb      	ldrh	r3, [r7, #20]
 8010ff8:	2bff      	cmp	r3, #255	; 0xff
 8010ffa:	d106      	bne.n	801100a <compress_kitiku+0x256>
 8010ffc:	8afb      	ldrh	r3, [r7, #22]
 8010ffe:	2bff      	cmp	r3, #255	; 0xff
 8011000:	d103      	bne.n	801100a <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8011002:	4b55      	ldr	r3, [pc, #340]	; (8011158 <compress_kitiku+0x3a4>)
 8011004:	2201      	movs	r2, #1
 8011006:	701a      	strb	r2, [r3, #0]
		break;
 8011008:	e077      	b.n	80110fa <compress_kitiku+0x346>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801100a:	8b7a      	ldrh	r2, [r7, #26]
 801100c:	8b3b      	ldrh	r3, [r7, #24]
 801100e:	429a      	cmp	r2, r3
 8011010:	d814      	bhi.n	801103c <compress_kitiku+0x288>
 8011012:	8b7a      	ldrh	r2, [r7, #26]
 8011014:	8abb      	ldrh	r3, [r7, #20]
 8011016:	429a      	cmp	r2, r3
 8011018:	d810      	bhi.n	801103c <compress_kitiku+0x288>
 801101a:	8b7a      	ldrh	r2, [r7, #26]
 801101c:	8afb      	ldrh	r3, [r7, #22]
 801101e:	429a      	cmp	r2, r3
 8011020:	d80c      	bhi.n	801103c <compress_kitiku+0x288>
		// 直進
			if(look_f){
 8011022:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011026:	2b00      	cmp	r3, #0
 8011028:	d005      	beq.n	8011036 <compress_kitiku+0x282>
				*kitiku_distance += 2;
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	1c9a      	adds	r2, r3, #2
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	601a      	str	r2, [r3, #0]
 8011034:	e002      	b.n	801103c <compress_kitiku+0x288>
			}else{
				kitiku = 0;
 8011036:	2300      	movs	r3, #0
 8011038:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801103a:	e05e      	b.n	80110fa <compress_kitiku+0x346>
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801103c:	8b3a      	ldrh	r2, [r7, #24]
 801103e:	8b7b      	ldrh	r3, [r7, #26]
 8011040:	429a      	cmp	r2, r3
 8011042:	d211      	bcs.n	8011068 <compress_kitiku+0x2b4>
 8011044:	8b3a      	ldrh	r2, [r7, #24]
 8011046:	8abb      	ldrh	r3, [r7, #20]
 8011048:	429a      	cmp	r2, r3
 801104a:	d80d      	bhi.n	8011068 <compress_kitiku+0x2b4>
 801104c:	8b3a      	ldrh	r2, [r7, #24]
 801104e:	8afb      	ldrh	r3, [r7, #22]
 8011050:	429a      	cmp	r2, r3
 8011052:	d809      	bhi.n	8011068 <compress_kitiku+0x2b4>
		// 右旋回
			if(look_r){
 8011054:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <compress_kitiku+0x2ae>
				kitiku = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011060:	e04b      	b.n	80110fa <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 8011062:	2300      	movs	r3, #0
 8011064:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011066:	e048      	b.n	80110fa <compress_kitiku+0x346>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8011068:	8aba      	ldrh	r2, [r7, #20]
 801106a:	8b7b      	ldrh	r3, [r7, #26]
 801106c:	429a      	cmp	r2, r3
 801106e:	d211      	bcs.n	8011094 <compress_kitiku+0x2e0>
 8011070:	8aba      	ldrh	r2, [r7, #20]
 8011072:	8b3b      	ldrh	r3, [r7, #24]
 8011074:	429a      	cmp	r2, r3
 8011076:	d20d      	bcs.n	8011094 <compress_kitiku+0x2e0>
 8011078:	8aba      	ldrh	r2, [r7, #20]
 801107a:	8afb      	ldrh	r3, [r7, #22]
 801107c:	429a      	cmp	r2, r3
 801107e:	d809      	bhi.n	8011094 <compress_kitiku+0x2e0>
		// 左旋回
			if(look_l){
 8011080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8011084:	2b00      	cmp	r3, #0
 8011086:	d002      	beq.n	801108e <compress_kitiku+0x2da>
				kitiku = 0;
 8011088:	2300      	movs	r3, #0
 801108a:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801108c:	e035      	b.n	80110fa <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 801108e:	2300      	movs	r3, #0
 8011090:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011092:	e032      	b.n	80110fa <compress_kitiku+0x346>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8011094:	8afa      	ldrh	r2, [r7, #22]
 8011096:	8b7b      	ldrh	r3, [r7, #26]
 8011098:	429a      	cmp	r2, r3
 801109a:	d20a      	bcs.n	80110b2 <compress_kitiku+0x2fe>
 801109c:	8afa      	ldrh	r2, [r7, #22]
 801109e:	8b3b      	ldrh	r3, [r7, #24]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d206      	bcs.n	80110b2 <compress_kitiku+0x2fe>
								&& back_count < left_count){
 80110a4:	8afa      	ldrh	r2, [r7, #22]
 80110a6:	8abb      	ldrh	r3, [r7, #20]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d202      	bcs.n	80110b2 <compress_kitiku+0x2fe>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80110b0:	e023      	b.n	80110fa <compress_kitiku+0x346>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80110b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110b4:	2b05      	cmp	r3, #5
 80110b6:	d101      	bne.n	80110bc <compress_kitiku+0x308>
			direction_now = 1;
 80110b8:	2301      	movs	r3, #1
 80110ba:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 6) {
 80110bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110be:	2b06      	cmp	r3, #6
 80110c0:	d101      	bne.n	80110c6 <compress_kitiku+0x312>
			direction_now = 2;
 80110c2:	2302      	movs	r3, #2
 80110c4:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 0) {
 80110c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d101      	bne.n	80110d0 <compress_kitiku+0x31c>
			direction_now = 4;
 80110cc:	2304      	movs	r3, #4
 80110ce:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == -1) {
 80110d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d6:	d101      	bne.n	80110dc <compress_kitiku+0x328>
			direction_now = 3;
 80110d8:	2303      	movs	r3, #3
 80110da:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (kitiku == 0) {
 80110dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00a      	beq.n	80110f8 <compress_kitiku+0x344>
		update_coordinate(&x_now,&y_now,direction_now);
 80110e2:	e67c      	b.n	8010dde <compress_kitiku+0x2a>
			break;
 80110e4:	bf00      	nop
 80110e6:	e008      	b.n	80110fa <compress_kitiku+0x346>
		if (direction_now==1 && y_now>=14) {break;}
 80110e8:	bf00      	nop
 80110ea:	e006      	b.n	80110fa <compress_kitiku+0x346>
		if (direction_now==2 && x_now>=14) {break;}
 80110ec:	bf00      	nop
 80110ee:	e004      	b.n	80110fa <compress_kitiku+0x346>
		if (direction_now==3 && y_now<=1) {break;}
 80110f0:	bf00      	nop
 80110f2:	e002      	b.n	80110fa <compress_kitiku+0x346>
		if (direction_now==4 && x_now<=1) {break;}
 80110f4:	bf00      	nop
 80110f6:	e000      	b.n	80110fa <compress_kitiku+0x346>

			break;
 80110f8:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80110fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110fc:	3302      	adds	r3, #2
 80110fe:	64bb      	str	r3, [r7, #72]	; 0x48
	if (direction2 == 5) {
 8011100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011102:	2b05      	cmp	r3, #5
 8011104:	d101      	bne.n	801110a <compress_kitiku+0x356>
				direction2 = 1;
 8011106:	2301      	movs	r3, #1
 8011108:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 6) {
 801110a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801110c:	2b06      	cmp	r3, #6
 801110e:	d101      	bne.n	8011114 <compress_kitiku+0x360>
				direction2 = 2;
 8011110:	2302      	movs	r3, #2
 8011112:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 0) {
 8011114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <compress_kitiku+0x36a>
				direction2 = 4;
 801111a:	2304      	movs	r3, #4
 801111c:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == -1) {
 801111e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011124:	d101      	bne.n	801112a <compress_kitiku+0x376>
				direction2 = 3;
 8011126:	2303      	movs	r3, #3
 8011128:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	update_coordinate(&x_now,&y_now,direction2);
 801112a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801112e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011134:	4618      	mov	r0, r3
 8011136:	f7fd fc87 	bl	800ea48 <update_coordinate>

	*x=x_now;
 801113a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8011140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801114a:	601a      	str	r2, [r3, #0]

}
 801114c:	bf00      	nop
 801114e:	375c      	adds	r7, #92	; 0x5c
 8011150:	46bd      	mov	sp, r7
 8011152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011154:	200011f4 	.word	0x200011f4
 8011158:	20000813 	.word	0x20000813

0801115c <maze_out_matlab>:
uint16_t walk_count[16][16]; //歩数いれる箱
DIJKSTRA Dijkstra;
STACK_T g_Goal_x;
STACK_T g_Goal_y;

void maze_out_matlab(void){
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0

	int tt=0;
 8011162:	2300      	movs	r3, #0
 8011164:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 8011166:	e018      	b.n	801119a <maze_out_matlab+0x3e>
		printf("g_maze_row(%d) = %d;\n",tt+1,wall.row[tt]);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	1c59      	adds	r1, r3, #1
 801116c:	4a0f      	ldr	r2, [pc, #60]	; (80111ac <maze_out_matlab+0x50>)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011174:	461a      	mov	r2, r3
 8011176:	480e      	ldr	r0, [pc, #56]	; (80111b0 <maze_out_matlab+0x54>)
 8011178:	f010 f9e6 	bl	8021548 <iprintf>
		printf("g_maze_column(%d) = %d;\n",tt+1,wall.column[tt]);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	1c59      	adds	r1, r3, #1
 8011180:	4a0a      	ldr	r2, [pc, #40]	; (80111ac <maze_out_matlab+0x50>)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	330e      	adds	r3, #14
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4413      	add	r3, r2
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	461a      	mov	r2, r3
 801118e:	4809      	ldr	r0, [pc, #36]	; (80111b4 <maze_out_matlab+0x58>)
 8011190:	f010 f9da 	bl	8021548 <iprintf>
		tt++;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3301      	adds	r3, #1
 8011198:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b0e      	cmp	r3, #14
 801119e:	dde3      	ble.n	8011168 <maze_out_matlab+0xc>
	}
	tt = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	607b      	str	r3, [r7, #4]

}
 80111a4:	bf00      	nop
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	20001010 	.word	0x20001010
 80111b0:	08024fc4 	.word	0x08024fc4
 80111b4:	08024fdc 	.word	0x08024fdc

080111b8 <maze_clear>:



void maze_clear(void) { //初期化
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0

	Dijkstra_maker_flag=0;
 80111be:	4b6b      	ldr	r3, [pc, #428]	; (801136c <maze_clear+0x1b4>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	701a      	strb	r2, [r3, #0]
	int tt = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 80111c8:	e01b      	b.n	8011202 <maze_clear+0x4a>
		wall.row[tt] = 0;
 80111ca:	4a69      	ldr	r2, [pc, #420]	; (8011370 <maze_clear+0x1b8>)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2100      	movs	r1, #0
 80111d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[tt] = 0;
 80111d4:	4a66      	ldr	r2, [pc, #408]	; (8011370 <maze_clear+0x1b8>)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	330e      	adds	r3, #14
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	4413      	add	r3, r2
 80111de:	2200      	movs	r2, #0
 80111e0:	605a      	str	r2, [r3, #4]
		wall.row_look[tt] = 0;
 80111e2:	4a63      	ldr	r2, [pc, #396]	; (8011370 <maze_clear+0x1b8>)
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	331e      	adds	r3, #30
 80111e8:	2100      	movs	r1, #0
 80111ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[tt] = 0;
 80111ee:	4a60      	ldr	r2, [pc, #384]	; (8011370 <maze_clear+0x1b8>)
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	332c      	adds	r3, #44	; 0x2c
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4413      	add	r3, r2
 80111f8:	2200      	movs	r2, #0
 80111fa:	605a      	str	r2, [r3, #4]
		tt++;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	3301      	adds	r3, #1
 8011200:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b0e      	cmp	r3, #14
 8011206:	dde0      	ble.n	80111ca <maze_clear+0x12>
	}
	tt = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
//	wall.row[0]=0;wall.row[1]=2;wall.row[2]=32762;wall.row[3]=50;wall.row[4]=16320;wall.row[5]=423;wall.row[6]=105;wall.row[7]=32490;
//	wall.row[8]=469;wall.row[9]=533;wall.row[10]=1258;wall.row[11]=3182;wall.row[12]=7837;wall.row[13]=13818;wall.row[14]=57342;
//	wall.column[0] = 20499;wall.column[1] = 8301;wall.column[2] = 61;wall.column[3] = 50;wall.column[4] = 6261;wall.column[5] = 10130;wall.column[6] = 4117;wall.column[7] = 3149;
//	wall.column[8] = 16085;wall.column[9] = 365;wall.column[10] = 725;wall.column[11] = 9837;wall.column[12] = 2773;wall.column[13] = 23149;wall.column[14] = 16381;
	    wall.column[0] = 0b0000011000011011;
 801120c:	4b58      	ldr	r3, [pc, #352]	; (8011370 <maze_clear+0x1b8>)
 801120e:	f240 621b 	movw	r2, #1563	; 0x61b
 8011212:	63da      	str	r2, [r3, #60]	; 0x3c
	    wall.column[1] = 0b0000000011001000;
 8011214:	4b56      	ldr	r3, [pc, #344]	; (8011370 <maze_clear+0x1b8>)
 8011216:	22c8      	movs	r2, #200	; 0xc8
 8011218:	641a      	str	r2, [r3, #64]	; 0x40
	    wall.column[2] = 0b0000000110000100;
 801121a:	4b55      	ldr	r3, [pc, #340]	; (8011370 <maze_clear+0x1b8>)
 801121c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011220:	645a      	str	r2, [r3, #68]	; 0x44
	    wall.column[3] = 0b0000011110110000;
 8011222:	4b53      	ldr	r3, [pc, #332]	; (8011370 <maze_clear+0x1b8>)
 8011224:	f44f 62f6 	mov.w	r2, #1968	; 0x7b0
 8011228:	649a      	str	r2, [r3, #72]	; 0x48
	    wall.column[4] = 0b0000100100011000;
 801122a:	4b51      	ldr	r3, [pc, #324]	; (8011370 <maze_clear+0x1b8>)
 801122c:	f640 1218 	movw	r2, #2328	; 0x918
 8011230:	64da      	str	r2, [r3, #76]	; 0x4c
	    wall.column[5] = 0b0000000000000000;
 8011232:	4b4f      	ldr	r3, [pc, #316]	; (8011370 <maze_clear+0x1b8>)
 8011234:	2200      	movs	r2, #0
 8011236:	651a      	str	r2, [r3, #80]	; 0x50
	    wall.column[6] = 0b0000000101000000;
 8011238:	4b4d      	ldr	r3, [pc, #308]	; (8011370 <maze_clear+0x1b8>)
 801123a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801123e:	655a      	str	r2, [r3, #84]	; 0x54
	    wall.column[7] = 0b0011101111111110;
 8011240:	4b4b      	ldr	r3, [pc, #300]	; (8011370 <maze_clear+0x1b8>)
 8011242:	f643 32fe 	movw	r2, #15358	; 0x3bfe
 8011246:	659a      	str	r2, [r3, #88]	; 0x58
	    wall.column[8] = 0b0011111001011100;
 8011248:	4b49      	ldr	r3, [pc, #292]	; (8011370 <maze_clear+0x1b8>)
 801124a:	f643 625c 	movw	r2, #15964	; 0x3e5c
 801124e:	65da      	str	r2, [r3, #92]	; 0x5c
	    wall.column[9] = 0b0000000000000000;
 8011250:	4b47      	ldr	r3, [pc, #284]	; (8011370 <maze_clear+0x1b8>)
 8011252:	2200      	movs	r2, #0
 8011254:	661a      	str	r2, [r3, #96]	; 0x60
	    wall.column[10] = 0b0000110110000000;
 8011256:	4b46      	ldr	r3, [pc, #280]	; (8011370 <maze_clear+0x1b8>)
 8011258:	f44f 6258 	mov.w	r2, #3456	; 0xd80
 801125c:	665a      	str	r2, [r3, #100]	; 0x64
	    wall.column[11] = 0b0000001001000100;
 801125e:	4b44      	ldr	r3, [pc, #272]	; (8011370 <maze_clear+0x1b8>)
 8011260:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011264:	669a      	str	r2, [r3, #104]	; 0x68
	    wall.column[12] = 0b0110111001101010;
 8011266:	4b42      	ldr	r3, [pc, #264]	; (8011370 <maze_clear+0x1b8>)
 8011268:	f646 626a 	movw	r2, #28266	; 0x6e6a
 801126c:	66da      	str	r2, [r3, #108]	; 0x6c
	    wall.column[13] = 0b0011111111010100;
 801126e:	4b40      	ldr	r3, [pc, #256]	; (8011370 <maze_clear+0x1b8>)
 8011270:	f643 72d4 	movw	r2, #16340	; 0x3fd4
 8011274:	671a      	str	r2, [r3, #112]	; 0x70
	    wall.column[14] = 0b0111011010101000;
 8011276:	4b3e      	ldr	r3, [pc, #248]	; (8011370 <maze_clear+0x1b8>)
 8011278:	f247 62a8 	movw	r2, #30376	; 0x76a8
 801127c:	675a      	str	r2, [r3, #116]	; 0x74
	    wall.row[14] = 0b0110000000000000;
 801127e:	4b3c      	ldr	r3, [pc, #240]	; (8011370 <maze_clear+0x1b8>)
 8011280:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8011284:	639a      	str	r2, [r3, #56]	; 0x38
	    wall.row[13] = 0b0000000100000000;
 8011286:	4b3a      	ldr	r3, [pc, #232]	; (8011370 <maze_clear+0x1b8>)
 8011288:	f44f 7280 	mov.w	r2, #256	; 0x100
 801128c:	635a      	str	r2, [r3, #52]	; 0x34
	    wall.row[12] = 0b0000000000000000;
 801128e:	4b38      	ldr	r3, [pc, #224]	; (8011370 <maze_clear+0x1b8>)
 8011290:	2200      	movs	r2, #0
 8011292:	631a      	str	r2, [r3, #48]	; 0x30
	    wall.row[11] = 0b0000100000000110;
 8011294:	4b36      	ldr	r3, [pc, #216]	; (8011370 <maze_clear+0x1b8>)
 8011296:	f640 0206 	movw	r2, #2054	; 0x806
 801129a:	62da      	str	r2, [r3, #44]	; 0x2c
	    wall.row[10] = 0b0000000011101110;
 801129c:	4b34      	ldr	r3, [pc, #208]	; (8011370 <maze_clear+0x1b8>)
 801129e:	22ee      	movs	r2, #238	; 0xee
 80112a0:	629a      	str	r2, [r3, #40]	; 0x28
	    wall.row[9] = 0b0000000011110000;
 80112a2:	4b33      	ldr	r3, [pc, #204]	; (8011370 <maze_clear+0x1b8>)
 80112a4:	22f0      	movs	r2, #240	; 0xf0
 80112a6:	625a      	str	r2, [r3, #36]	; 0x24
	    wall.row[8] = 0b0001011001100110;
 80112a8:	4b31      	ldr	r3, [pc, #196]	; (8011370 <maze_clear+0x1b8>)
 80112aa:	f241 6266 	movw	r2, #5734	; 0x1666
 80112ae:	621a      	str	r2, [r3, #32]
	    wall.row[7] = 0b0011001100000010;
 80112b0:	4b2f      	ldr	r3, [pc, #188]	; (8011370 <maze_clear+0x1b8>)
 80112b2:	f243 3202 	movw	r2, #13058	; 0x3302
 80112b6:	61da      	str	r2, [r3, #28]
	    wall.row[6] = 0b1011011000001000;
 80112b8:	4b2d      	ldr	r3, [pc, #180]	; (8011370 <maze_clear+0x1b8>)
 80112ba:	f24b 6208 	movw	r2, #46600	; 0xb608
 80112be:	619a      	str	r2, [r3, #24]
	    wall.row[5] = 0b0100111001111000;
 80112c0:	4b2b      	ldr	r3, [pc, #172]	; (8011370 <maze_clear+0x1b8>)
 80112c2:	f644 6278 	movw	r2, #20088	; 0x4e78
 80112c6:	615a      	str	r2, [r3, #20]
	    wall.row[4] = 0b0101111001100001;
 80112c8:	4b29      	ldr	r3, [pc, #164]	; (8011370 <maze_clear+0x1b8>)
 80112ca:	f645 6261 	movw	r2, #24161	; 0x5e61
 80112ce:	611a      	str	r2, [r3, #16]
	    wall.row[3] = 0b0010000000001100;
 80112d0:	4b27      	ldr	r3, [pc, #156]	; (8011370 <maze_clear+0x1b8>)
 80112d2:	f242 020c 	movw	r2, #8204	; 0x200c
 80112d6:	60da      	str	r2, [r3, #12]
	    wall.row[2] = 0b0101000000011010;
 80112d8:	4b25      	ldr	r3, [pc, #148]	; (8011370 <maze_clear+0x1b8>)
 80112da:	f245 021a 	movw	r2, #20506	; 0x501a
 80112de:	609a      	str	r2, [r3, #8]
	    wall.row[1] = 0b0010011000000010;
 80112e0:	4b23      	ldr	r3, [pc, #140]	; (8011370 <maze_clear+0x1b8>)
 80112e2:	f242 6202 	movw	r2, #9730	; 0x2602
 80112e6:	605a      	str	r2, [r3, #4]
	    wall.row[0] = 0b0001101100000000;
 80112e8:	4b21      	ldr	r3, [pc, #132]	; (8011370 <maze_clear+0x1b8>)
 80112ea:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 80112ee:	601a      	str	r2, [r3, #0]


	for(int i=0;i<=15;i++){
 80112f0:	2300      	movs	r3, #0
 80112f2:	60bb      	str	r3, [r7, #8]
 80112f4:	e022      	b.n	801133c <maze_clear+0x184>
		for(int j=0;j<=14;j++){
 80112f6:	2300      	movs	r3, #0
 80112f8:	607b      	str	r3, [r7, #4]
 80112fa:	e019      	b.n	8011330 <maze_clear+0x178>
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80112fc:	491d      	ldr	r1, [pc, #116]	; (8011374 <maze_clear+0x1bc>)
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	4613      	mov	r3, r2
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	4413      	add	r3, r2
 801130a:	33f0      	adds	r3, #240	; 0xf0
 801130c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011310:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8011314:	4917      	ldr	r1, [pc, #92]	; (8011374 <maze_clear+0x1bc>)
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	4613      	mov	r3, r2
 801131a:	011b      	lsls	r3, r3, #4
 801131c:	1a9b      	subs	r3, r3, r2
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	4413      	add	r3, r2
 8011322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011326:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3301      	adds	r3, #1
 801132e:	607b      	str	r3, [r7, #4]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b0e      	cmp	r3, #14
 8011334:	dde2      	ble.n	80112fc <maze_clear+0x144>
	for(int i=0;i<=15;i++){
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	3301      	adds	r3, #1
 801133a:	60bb      	str	r3, [r7, #8]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	2b0f      	cmp	r3, #15
 8011340:	ddd9      	ble.n	80112f6 <maze_clear+0x13e>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 8011342:	4b0c      	ldr	r3, [pc, #48]	; (8011374 <maze_clear+0x1bc>)
 8011344:	2200      	movs	r2, #0
 8011346:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 8011348:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <maze_clear+0x1bc>)
 801134a:	2200      	movs	r2, #0
 801134c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 8011350:	4b08      	ldr	r3, [pc, #32]	; (8011374 <maze_clear+0x1bc>)
 8011352:	2200      	movs	r2, #0
 8011354:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 8011358:	4b06      	ldr	r3, [pc, #24]	; (8011374 <maze_clear+0x1bc>)
 801135a:	2200      	movs	r2, #0
 801135c:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202


//ここから歩数マップの初期状態を作る．
create_StepCountMap_queue();
 8011360:	f003 fb24 	bl	80149ac <create_StepCountMap_queue>

//kokomade

}
 8011364:	bf00      	nop
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	200011f0 	.word	0x200011f0
 8011370:	20001010 	.word	0x20001010
 8011374:	200013f4 	.word	0x200013f4

08011378 <update_wall>:



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3b01      	subs	r3, #1
 801138a:	2b03      	cmp	r3, #3
 801138c:	f200 81ff 	bhi.w	801178e <update_wall+0x416>
 8011390:	a201      	add	r2, pc, #4	; (adr r2, 8011398 <update_wall+0x20>)
 8011392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011396:	bf00      	nop
 8011398:	080113a9 	.word	0x080113a9
 801139c:	0801149f 	.word	0x0801149f
 80113a0:	0801158d 	.word	0x0801158d
 80113a4:	0801168f 	.word	0x0801168f
	case 1:
		if (y <= 14) {
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	2b0e      	cmp	r3, #14
 80113ac:	dc1e      	bgt.n	80113ec <update_wall+0x74>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 80113ae:	4a76      	ldr	r2, [pc, #472]	; (8011588 <update_wall+0x210>)
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	331e      	adds	r3, #30
 80113b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113b8:	2101      	movs	r1, #1
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	fa01 f202 	lsl.w	r2, r1, r2
 80113c0:	431a      	orrs	r2, r3
 80113c2:	4971      	ldr	r1, [pc, #452]	; (8011588 <update_wall+0x210>)
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	331e      	adds	r3, #30
 80113c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y] = wall.row[y] | (1 << x);}
 80113cc:	78fb      	ldrb	r3, [r7, #3]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00c      	beq.n	80113ec <update_wall+0x74>
 80113d2:	4a6d      	ldr	r2, [pc, #436]	; (8011588 <update_wall+0x210>)
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113da:	2101      	movs	r1, #1
 80113dc:	68fa      	ldr	r2, [r7, #12]
 80113de:	fa01 f202 	lsl.w	r2, r1, r2
 80113e2:	431a      	orrs	r2, r3
 80113e4:	4968      	ldr	r1, [pc, #416]	; (8011588 <update_wall+0x210>)
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x >= 1) {
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	dd2a      	ble.n	8011448 <update_wall+0xd0>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	4a64      	ldr	r2, [pc, #400]	; (8011588 <update_wall+0x210>)
 80113f8:	332c      	adds	r3, #44	; 0x2c
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	2101      	movs	r1, #1
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	fa01 f303 	lsl.w	r3, r1, r3
 8011408:	4619      	mov	r1, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3b01      	subs	r3, #1
 801140e:	430a      	orrs	r2, r1
 8011410:	495d      	ldr	r1, [pc, #372]	; (8011588 <update_wall+0x210>)
 8011412:	332c      	adds	r3, #44	; 0x2c
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	440b      	add	r3, r1
 8011418:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 801141a:	7f3b      	ldrb	r3, [r7, #28]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d013      	beq.n	8011448 <update_wall+0xd0>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	3b01      	subs	r3, #1
 8011424:	4a58      	ldr	r2, [pc, #352]	; (8011588 <update_wall+0x210>)
 8011426:	330e      	adds	r3, #14
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	2101      	movs	r1, #1
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	fa01 f303 	lsl.w	r3, r1, r3
 8011436:	4619      	mov	r1, r3
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	3b01      	subs	r3, #1
 801143c:	430a      	orrs	r2, r1
 801143e:	4952      	ldr	r1, [pc, #328]	; (8011588 <update_wall+0x210>)
 8011440:	330e      	adds	r3, #14
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	440b      	add	r3, r1
 8011446:	605a      	str	r2, [r3, #4]
		}

		if (x <= 14) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b0e      	cmp	r3, #14
 801144c:	f300 8198 	bgt.w	8011780 <update_wall+0x408>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8011450:	4a4d      	ldr	r2, [pc, #308]	; (8011588 <update_wall+0x210>)
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	332c      	adds	r3, #44	; 0x2c
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	2101      	movs	r1, #1
 801145e:	68ba      	ldr	r2, [r7, #8]
 8011460:	fa01 f202 	lsl.w	r2, r1, r2
 8011464:	431a      	orrs	r2, r3
 8011466:	4948      	ldr	r1, [pc, #288]	; (8011588 <update_wall+0x210>)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	332c      	adds	r3, #44	; 0x2c
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	440b      	add	r3, r1
 8011470:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x] = wall.column[x] | (1 << y);}
 8011472:	7e3b      	ldrb	r3, [r7, #24]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 8183 	beq.w	8011780 <update_wall+0x408>
 801147a:	4a43      	ldr	r2, [pc, #268]	; (8011588 <update_wall+0x210>)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	330e      	adds	r3, #14
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	2101      	movs	r1, #1
 8011488:	68ba      	ldr	r2, [r7, #8]
 801148a:	fa01 f202 	lsl.w	r2, r1, r2
 801148e:	431a      	orrs	r2, r3
 8011490:	493d      	ldr	r1, [pc, #244]	; (8011588 <update_wall+0x210>)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	330e      	adds	r3, #14
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	440b      	add	r3, r1
 801149a:	605a      	str	r2, [r3, #4]
		}

		break;
 801149c:	e170      	b.n	8011780 <update_wall+0x408>
	case 2:
		if (x <= 14) {
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b0e      	cmp	r3, #14
 80114a2:	dc24      	bgt.n	80114ee <update_wall+0x176>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 80114a4:	4a38      	ldr	r2, [pc, #224]	; (8011588 <update_wall+0x210>)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	332c      	adds	r3, #44	; 0x2c
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	4413      	add	r3, r2
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	2101      	movs	r1, #1
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	fa01 f202 	lsl.w	r2, r1, r2
 80114b8:	431a      	orrs	r2, r3
 80114ba:	4933      	ldr	r1, [pc, #204]	; (8011588 <update_wall+0x210>)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	332c      	adds	r3, #44	; 0x2c
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	440b      	add	r3, r1
 80114c4:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x] = wall.column[x] | (1 << y);}
 80114c6:	78fb      	ldrb	r3, [r7, #3]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d010      	beq.n	80114ee <update_wall+0x176>
 80114cc:	4a2e      	ldr	r2, [pc, #184]	; (8011588 <update_wall+0x210>)
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	330e      	adds	r3, #14
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	4413      	add	r3, r2
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	2101      	movs	r1, #1
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	fa01 f202 	lsl.w	r2, r1, r2
 80114e0:	431a      	orrs	r2, r3
 80114e2:	4929      	ldr	r1, [pc, #164]	; (8011588 <update_wall+0x210>)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	330e      	adds	r3, #14
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	440b      	add	r3, r1
 80114ec:	605a      	str	r2, [r3, #4]
		}

		if (y <= 14) {
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2b0e      	cmp	r3, #14
 80114f2:	dc1e      	bgt.n	8011532 <update_wall+0x1ba>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 80114f4:	4a24      	ldr	r2, [pc, #144]	; (8011588 <update_wall+0x210>)
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	331e      	adds	r3, #30
 80114fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114fe:	2101      	movs	r1, #1
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	fa01 f202 	lsl.w	r2, r1, r2
 8011506:	431a      	orrs	r2, r3
 8011508:	491f      	ldr	r1, [pc, #124]	; (8011588 <update_wall+0x210>)
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	331e      	adds	r3, #30
 801150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8011512:	7f3b      	ldrb	r3, [r7, #28]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00c      	beq.n	8011532 <update_wall+0x1ba>
 8011518:	4a1b      	ldr	r2, [pc, #108]	; (8011588 <update_wall+0x210>)
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011520:	2101      	movs	r1, #1
 8011522:	68fa      	ldr	r2, [r7, #12]
 8011524:	fa01 f202 	lsl.w	r2, r1, r2
 8011528:	431a      	orrs	r2, r3
 801152a:	4917      	ldr	r1, [pc, #92]	; (8011588 <update_wall+0x210>)
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y >= 1) {
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	2b00      	cmp	r3, #0
 8011536:	f340 8125 	ble.w	8011784 <update_wall+0x40c>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	3b01      	subs	r3, #1
 801153e:	4a12      	ldr	r2, [pc, #72]	; (8011588 <update_wall+0x210>)
 8011540:	331e      	adds	r3, #30
 8011542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011546:	2101      	movs	r1, #1
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	fa01 f303 	lsl.w	r3, r1, r3
 801154e:	4619      	mov	r1, r3
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	3b01      	subs	r3, #1
 8011554:	430a      	orrs	r2, r1
 8011556:	490c      	ldr	r1, [pc, #48]	; (8011588 <update_wall+0x210>)
 8011558:	331e      	adds	r3, #30
 801155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 801155e:	7e3b      	ldrb	r3, [r7, #24]
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 810f 	beq.w	8011784 <update_wall+0x40c>
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	3b01      	subs	r3, #1
 801156a:	4a07      	ldr	r2, [pc, #28]	; (8011588 <update_wall+0x210>)
 801156c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011570:	2101      	movs	r1, #1
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	fa01 f303 	lsl.w	r3, r1, r3
 8011578:	4619      	mov	r1, r3
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	3b01      	subs	r3, #1
 801157e:	430a      	orrs	r2, r1
 8011580:	4901      	ldr	r1, [pc, #4]	; (8011588 <update_wall+0x210>)
 8011582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 8011586:	e0fd      	b.n	8011784 <update_wall+0x40c>
 8011588:	20001010 	.word	0x20001010
	case 3:
		if (y >= 1) {
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd24      	ble.n	80115dc <update_wall+0x264>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	3b01      	subs	r3, #1
 8011596:	4a81      	ldr	r2, [pc, #516]	; (801179c <update_wall+0x424>)
 8011598:	331e      	adds	r3, #30
 801159a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801159e:	2101      	movs	r1, #1
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	fa01 f303 	lsl.w	r3, r1, r3
 80115a6:	4619      	mov	r1, r3
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	3b01      	subs	r3, #1
 80115ac:	430a      	orrs	r2, r1
 80115ae:	497b      	ldr	r1, [pc, #492]	; (801179c <update_wall+0x424>)
 80115b0:	331e      	adds	r3, #30
 80115b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 80115b6:	78fb      	ldrb	r3, [r7, #3]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00f      	beq.n	80115dc <update_wall+0x264>
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	3b01      	subs	r3, #1
 80115c0:	4a76      	ldr	r2, [pc, #472]	; (801179c <update_wall+0x424>)
 80115c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80115c6:	2101      	movs	r1, #1
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	fa01 f303 	lsl.w	r3, r1, r3
 80115ce:	4619      	mov	r1, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	3b01      	subs	r3, #1
 80115d4:	430a      	orrs	r2, r1
 80115d6:	4971      	ldr	r1, [pc, #452]	; (801179c <update_wall+0x424>)
 80115d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x <= 14) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2b0e      	cmp	r3, #14
 80115e0:	dc24      	bgt.n	801162c <update_wall+0x2b4>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 80115e2:	4a6e      	ldr	r2, [pc, #440]	; (801179c <update_wall+0x424>)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	332c      	adds	r3, #44	; 0x2c
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	4413      	add	r3, r2
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	2101      	movs	r1, #1
 80115f0:	68ba      	ldr	r2, [r7, #8]
 80115f2:	fa01 f202 	lsl.w	r2, r1, r2
 80115f6:	431a      	orrs	r2, r3
 80115f8:	4968      	ldr	r1, [pc, #416]	; (801179c <update_wall+0x424>)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	332c      	adds	r3, #44	; 0x2c
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	440b      	add	r3, r1
 8011602:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x] = wall.column[x] | (1 << y);}
 8011604:	7f3b      	ldrb	r3, [r7, #28]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d010      	beq.n	801162c <update_wall+0x2b4>
 801160a:	4a64      	ldr	r2, [pc, #400]	; (801179c <update_wall+0x424>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	330e      	adds	r3, #14
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4413      	add	r3, r2
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	2101      	movs	r1, #1
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	fa01 f202 	lsl.w	r2, r1, r2
 801161e:	431a      	orrs	r2, r3
 8011620:	495e      	ldr	r1, [pc, #376]	; (801179c <update_wall+0x424>)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	330e      	adds	r3, #14
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	440b      	add	r3, r1
 801162a:	605a      	str	r2, [r3, #4]
		}

		if (x >= 1) {
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	f340 80aa 	ble.w	8011788 <update_wall+0x410>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	3b01      	subs	r3, #1
 8011638:	4a58      	ldr	r2, [pc, #352]	; (801179c <update_wall+0x424>)
 801163a:	332c      	adds	r3, #44	; 0x2c
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	2101      	movs	r1, #1
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	fa01 f303 	lsl.w	r3, r1, r3
 801164a:	4619      	mov	r1, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	3b01      	subs	r3, #1
 8011650:	430a      	orrs	r2, r1
 8011652:	4952      	ldr	r1, [pc, #328]	; (801179c <update_wall+0x424>)
 8011654:	332c      	adds	r3, #44	; 0x2c
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	440b      	add	r3, r1
 801165a:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 801165c:	7e3b      	ldrb	r3, [r7, #24]
 801165e:	2b00      	cmp	r3, #0
 8011660:	f000 8092 	beq.w	8011788 <update_wall+0x410>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	3b01      	subs	r3, #1
 8011668:	4a4c      	ldr	r2, [pc, #304]	; (801179c <update_wall+0x424>)
 801166a:	330e      	adds	r3, #14
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	4413      	add	r3, r2
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	2101      	movs	r1, #1
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	fa01 f303 	lsl.w	r3, r1, r3
 801167a:	4619      	mov	r1, r3
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	3b01      	subs	r3, #1
 8011680:	430a      	orrs	r2, r1
 8011682:	4946      	ldr	r1, [pc, #280]	; (801179c <update_wall+0x424>)
 8011684:	330e      	adds	r3, #14
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	440b      	add	r3, r1
 801168a:	605a      	str	r2, [r3, #4]
		}

		break;
 801168c:	e07c      	b.n	8011788 <update_wall+0x410>
	case 4:
		if (x >= 1) {
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	dd2a      	ble.n	80116ea <update_wall+0x372>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	3b01      	subs	r3, #1
 8011698:	4a40      	ldr	r2, [pc, #256]	; (801179c <update_wall+0x424>)
 801169a:	332c      	adds	r3, #44	; 0x2c
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	4413      	add	r3, r2
 80116a0:	685a      	ldr	r2, [r3, #4]
 80116a2:	2101      	movs	r1, #1
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	fa01 f303 	lsl.w	r3, r1, r3
 80116aa:	4619      	mov	r1, r3
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	3b01      	subs	r3, #1
 80116b0:	430a      	orrs	r2, r1
 80116b2:	493a      	ldr	r1, [pc, #232]	; (801179c <update_wall+0x424>)
 80116b4:	332c      	adds	r3, #44	; 0x2c
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	440b      	add	r3, r1
 80116ba:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 80116bc:	78fb      	ldrb	r3, [r7, #3]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d013      	beq.n	80116ea <update_wall+0x372>
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3b01      	subs	r3, #1
 80116c6:	4a35      	ldr	r2, [pc, #212]	; (801179c <update_wall+0x424>)
 80116c8:	330e      	adds	r3, #14
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	4413      	add	r3, r2
 80116ce:	685a      	ldr	r2, [r3, #4]
 80116d0:	2101      	movs	r1, #1
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	fa01 f303 	lsl.w	r3, r1, r3
 80116d8:	4619      	mov	r1, r3
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	3b01      	subs	r3, #1
 80116de:	430a      	orrs	r2, r1
 80116e0:	492e      	ldr	r1, [pc, #184]	; (801179c <update_wall+0x424>)
 80116e2:	330e      	adds	r3, #14
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	440b      	add	r3, r1
 80116e8:	605a      	str	r2, [r3, #4]
		}

		if (y >= 1) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd24      	ble.n	801173a <update_wall+0x3c2>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	3b01      	subs	r3, #1
 80116f4:	4a29      	ldr	r2, [pc, #164]	; (801179c <update_wall+0x424>)
 80116f6:	331e      	adds	r3, #30
 80116f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80116fc:	2101      	movs	r1, #1
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	fa01 f303 	lsl.w	r3, r1, r3
 8011704:	4619      	mov	r1, r3
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	3b01      	subs	r3, #1
 801170a:	430a      	orrs	r2, r1
 801170c:	4923      	ldr	r1, [pc, #140]	; (801179c <update_wall+0x424>)
 801170e:	331e      	adds	r3, #30
 8011710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 8011714:	7f3b      	ldrb	r3, [r7, #28]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00f      	beq.n	801173a <update_wall+0x3c2>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	3b01      	subs	r3, #1
 801171e:	4a1f      	ldr	r2, [pc, #124]	; (801179c <update_wall+0x424>)
 8011720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011724:	2101      	movs	r1, #1
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	fa01 f303 	lsl.w	r3, r1, r3
 801172c:	4619      	mov	r1, r3
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	3b01      	subs	r3, #1
 8011732:	430a      	orrs	r2, r1
 8011734:	4919      	ldr	r1, [pc, #100]	; (801179c <update_wall+0x424>)
 8011736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y <= 14) {
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	2b0e      	cmp	r3, #14
 801173e:	dc25      	bgt.n	801178c <update_wall+0x414>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8011740:	4a16      	ldr	r2, [pc, #88]	; (801179c <update_wall+0x424>)
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	331e      	adds	r3, #30
 8011746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801174a:	2101      	movs	r1, #1
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	fa01 f202 	lsl.w	r2, r1, r2
 8011752:	431a      	orrs	r2, r3
 8011754:	4911      	ldr	r1, [pc, #68]	; (801179c <update_wall+0x424>)
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	331e      	adds	r3, #30
 801175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y] = wall.row[y] | (1 << x);}
 801175e:	7e3b      	ldrb	r3, [r7, #24]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d013      	beq.n	801178c <update_wall+0x414>
 8011764:	4a0d      	ldr	r2, [pc, #52]	; (801179c <update_wall+0x424>)
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801176c:	2101      	movs	r1, #1
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	fa01 f202 	lsl.w	r2, r1, r2
 8011774:	431a      	orrs	r2, r3
 8011776:	4909      	ldr	r1, [pc, #36]	; (801179c <update_wall+0x424>)
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 801177e:	e005      	b.n	801178c <update_wall+0x414>
		break;
 8011780:	bf00      	nop
 8011782:	e004      	b.n	801178e <update_wall+0x416>
		break;
 8011784:	bf00      	nop
 8011786:	e002      	b.n	801178e <update_wall+0x416>
		break;
 8011788:	bf00      	nop
 801178a:	e000      	b.n	801178e <update_wall+0x416>
		break;
 801178c:	bf00      	nop

	}


}
 801178e:	bf00      	nop
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	20001010 	.word	0x20001010

080117a0 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	2201      	movs	r2, #1
 80117b2:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 80117b4:	69bb      	ldr	r3, [r7, #24]
 80117b6:	2201      	movs	r2, #1
 80117b8:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	2201      	movs	r2, #1
 80117be:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	3b01      	subs	r3, #1
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	f200 813e 	bhi.w	8011a46 <get_wall+0x2a6>
 80117ca:	a201      	add	r2, pc, #4	; (adr r2, 80117d0 <get_wall+0x30>)
 80117cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d0:	080117e1 	.word	0x080117e1
 80117d4:	08011879 	.word	0x08011879
 80117d8:	0801190d 	.word	0x0801190d
 80117dc:	080119a5 	.word	0x080119a5
	case 1:
		if (y <= 14) {
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	2b0e      	cmp	r3, #14
 80117e4:	dc13      	bgt.n	801180e <get_wall+0x6e>
			*front_wall=((wall.row[y] & (1 << x)) == (1 << x));
 80117e6:	4a9b      	ldr	r2, [pc, #620]	; (8011a54 <get_wall+0x2b4>)
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117ee:	2101      	movs	r1, #1
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	fa01 f202 	lsl.w	r2, r1, r2
 80117f6:	4013      	ands	r3, r2
 80117f8:	2101      	movs	r1, #1
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	fa01 f202 	lsl.w	r2, r1, r2
 8011800:	4293      	cmp	r3, r2
 8011802:	bf0c      	ite	eq
 8011804:	2301      	moveq	r3, #1
 8011806:	2300      	movne	r3, #0
 8011808:	b2da      	uxtb	r2, r3
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	dd16      	ble.n	8011842 <get_wall+0xa2>
			*left_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	3b01      	subs	r3, #1
 8011818:	4a8e      	ldr	r2, [pc, #568]	; (8011a54 <get_wall+0x2b4>)
 801181a:	330e      	adds	r3, #14
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4413      	add	r3, r2
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	2101      	movs	r1, #1
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	fa01 f202 	lsl.w	r2, r1, r2
 801182a:	4013      	ands	r3, r2
 801182c:	2101      	movs	r1, #1
 801182e:	68ba      	ldr	r2, [r7, #8]
 8011830:	fa01 f202 	lsl.w	r2, r1, r2
 8011834:	4293      	cmp	r3, r2
 8011836:	bf0c      	ite	eq
 8011838:	2301      	moveq	r3, #1
 801183a:	2300      	movne	r3, #0
 801183c:	b2da      	uxtb	r2, r3
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2b0e      	cmp	r3, #14
 8011846:	f300 80f7 	bgt.w	8011a38 <get_wall+0x298>
			*right_wall=((wall.column[x] & (1 << y)) == (1 << y));
 801184a:	4a82      	ldr	r2, [pc, #520]	; (8011a54 <get_wall+0x2b4>)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	330e      	adds	r3, #14
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	2101      	movs	r1, #1
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	fa01 f202 	lsl.w	r2, r1, r2
 801185e:	4013      	ands	r3, r2
 8011860:	2101      	movs	r1, #1
 8011862:	68ba      	ldr	r2, [r7, #8]
 8011864:	fa01 f202 	lsl.w	r2, r1, r2
 8011868:	4293      	cmp	r3, r2
 801186a:	bf0c      	ite	eq
 801186c:	2301      	moveq	r3, #1
 801186e:	2300      	movne	r3, #0
 8011870:	b2da      	uxtb	r2, r3
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011876:	e0df      	b.n	8011a38 <get_wall+0x298>
	case 2:
		if (x <= 14) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2b0e      	cmp	r3, #14
 801187c:	dc15      	bgt.n	80118aa <get_wall+0x10a>
			*front_wall=((wall.column[x] & (1 << y)) == (1 << y));
 801187e:	4a75      	ldr	r2, [pc, #468]	; (8011a54 <get_wall+0x2b4>)
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	330e      	adds	r3, #14
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	2101      	movs	r1, #1
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	fa01 f202 	lsl.w	r2, r1, r2
 8011892:	4013      	ands	r3, r2
 8011894:	2101      	movs	r1, #1
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	fa01 f202 	lsl.w	r2, r1, r2
 801189c:	4293      	cmp	r3, r2
 801189e:	bf0c      	ite	eq
 80118a0:	2301      	moveq	r3, #1
 80118a2:	2300      	movne	r3, #0
 80118a4:	b2da      	uxtb	r2, r3
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2b0e      	cmp	r3, #14
 80118ae:	dc13      	bgt.n	80118d8 <get_wall+0x138>
			*left_wall=((wall.row[y] & (1 << x)) == (1 << x));
 80118b0:	4a68      	ldr	r2, [pc, #416]	; (8011a54 <get_wall+0x2b4>)
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118b8:	2101      	movs	r1, #1
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	fa01 f202 	lsl.w	r2, r1, r2
 80118c0:	4013      	ands	r3, r2
 80118c2:	2101      	movs	r1, #1
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	fa01 f202 	lsl.w	r2, r1, r2
 80118ca:	4293      	cmp	r3, r2
 80118cc:	bf0c      	ite	eq
 80118ce:	2301      	moveq	r3, #1
 80118d0:	2300      	movne	r3, #0
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f340 80ae 	ble.w	8011a3c <get_wall+0x29c>
			*right_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	3b01      	subs	r3, #1
 80118e4:	4a5b      	ldr	r2, [pc, #364]	; (8011a54 <get_wall+0x2b4>)
 80118e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118ea:	2101      	movs	r1, #1
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	fa01 f202 	lsl.w	r2, r1, r2
 80118f2:	4013      	ands	r3, r2
 80118f4:	2101      	movs	r1, #1
 80118f6:	68fa      	ldr	r2, [r7, #12]
 80118f8:	fa01 f202 	lsl.w	r2, r1, r2
 80118fc:	4293      	cmp	r3, r2
 80118fe:	bf0c      	ite	eq
 8011900:	2301      	moveq	r3, #1
 8011902:	2300      	movne	r3, #0
 8011904:	b2da      	uxtb	r2, r3
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	701a      	strb	r2, [r3, #0]
		}
		break;
 801190a:	e097      	b.n	8011a3c <get_wall+0x29c>
	case 3:
		if (y >= 1) {
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	2b00      	cmp	r3, #0
 8011910:	dd14      	ble.n	801193c <get_wall+0x19c>
			*front_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	3b01      	subs	r3, #1
 8011916:	4a4f      	ldr	r2, [pc, #316]	; (8011a54 <get_wall+0x2b4>)
 8011918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801191c:	2101      	movs	r1, #1
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	fa01 f202 	lsl.w	r2, r1, r2
 8011924:	4013      	ands	r3, r2
 8011926:	2101      	movs	r1, #1
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	fa01 f202 	lsl.w	r2, r1, r2
 801192e:	4293      	cmp	r3, r2
 8011930:	bf0c      	ite	eq
 8011932:	2301      	moveq	r3, #1
 8011934:	2300      	movne	r3, #0
 8011936:	b2da      	uxtb	r2, r3
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2b0e      	cmp	r3, #14
 8011940:	dc15      	bgt.n	801196e <get_wall+0x1ce>
			*left_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8011942:	4a44      	ldr	r2, [pc, #272]	; (8011a54 <get_wall+0x2b4>)
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	330e      	adds	r3, #14
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	2101      	movs	r1, #1
 8011950:	68ba      	ldr	r2, [r7, #8]
 8011952:	fa01 f202 	lsl.w	r2, r1, r2
 8011956:	4013      	ands	r3, r2
 8011958:	2101      	movs	r1, #1
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	fa01 f202 	lsl.w	r2, r1, r2
 8011960:	4293      	cmp	r3, r2
 8011962:	bf0c      	ite	eq
 8011964:	2301      	moveq	r3, #1
 8011966:	2300      	movne	r3, #0
 8011968:	b2da      	uxtb	r2, r3
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	dd65      	ble.n	8011a40 <get_wall+0x2a0>
			*right_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3b01      	subs	r3, #1
 8011978:	4a36      	ldr	r2, [pc, #216]	; (8011a54 <get_wall+0x2b4>)
 801197a:	330e      	adds	r3, #14
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	4413      	add	r3, r2
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	2101      	movs	r1, #1
 8011984:	68ba      	ldr	r2, [r7, #8]
 8011986:	fa01 f202 	lsl.w	r2, r1, r2
 801198a:	4013      	ands	r3, r2
 801198c:	2101      	movs	r1, #1
 801198e:	68ba      	ldr	r2, [r7, #8]
 8011990:	fa01 f202 	lsl.w	r2, r1, r2
 8011994:	4293      	cmp	r3, r2
 8011996:	bf0c      	ite	eq
 8011998:	2301      	moveq	r3, #1
 801199a:	2300      	movne	r3, #0
 801199c:	b2da      	uxtb	r2, r3
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80119a2:	e04d      	b.n	8011a40 <get_wall+0x2a0>
	case 4:
		if (x >= 1) {
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	dd16      	ble.n	80119d8 <get_wall+0x238>
			*front_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	4a29      	ldr	r2, [pc, #164]	; (8011a54 <get_wall+0x2b4>)
 80119b0:	330e      	adds	r3, #14
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	2101      	movs	r1, #1
 80119ba:	68ba      	ldr	r2, [r7, #8]
 80119bc:	fa01 f202 	lsl.w	r2, r1, r2
 80119c0:	4013      	ands	r3, r2
 80119c2:	2101      	movs	r1, #1
 80119c4:	68ba      	ldr	r2, [r7, #8]
 80119c6:	fa01 f202 	lsl.w	r2, r1, r2
 80119ca:	4293      	cmp	r3, r2
 80119cc:	bf0c      	ite	eq
 80119ce:	2301      	moveq	r3, #1
 80119d0:	2300      	movne	r3, #0
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	dd14      	ble.n	8011a08 <get_wall+0x268>
			*left_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	3b01      	subs	r3, #1
 80119e2:	4a1c      	ldr	r2, [pc, #112]	; (8011a54 <get_wall+0x2b4>)
 80119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119e8:	2101      	movs	r1, #1
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	fa01 f202 	lsl.w	r2, r1, r2
 80119f0:	4013      	ands	r3, r2
 80119f2:	2101      	movs	r1, #1
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	fa01 f202 	lsl.w	r2, r1, r2
 80119fa:	4293      	cmp	r3, r2
 80119fc:	bf0c      	ite	eq
 80119fe:	2301      	moveq	r3, #1
 8011a00:	2300      	movne	r3, #0
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	2b0e      	cmp	r3, #14
 8011a0c:	dc1a      	bgt.n	8011a44 <get_wall+0x2a4>
			*right_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8011a0e:	4a11      	ldr	r2, [pc, #68]	; (8011a54 <get_wall+0x2b4>)
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a16:	2101      	movs	r1, #1
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8011a1e:	4013      	ands	r3, r2
 8011a20:	2101      	movs	r1, #1
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	fa01 f202 	lsl.w	r2, r1, r2
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	bf0c      	ite	eq
 8011a2c:	2301      	moveq	r3, #1
 8011a2e:	2300      	movne	r3, #0
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011a36:	e005      	b.n	8011a44 <get_wall+0x2a4>
		break;
 8011a38:	bf00      	nop
 8011a3a:	e004      	b.n	8011a46 <get_wall+0x2a6>
		break;
 8011a3c:	bf00      	nop
 8011a3e:	e002      	b.n	8011a46 <get_wall+0x2a6>
		break;
 8011a40:	bf00      	nop
 8011a42:	e000      	b.n	8011a46 <get_wall+0x2a6>
		break;
 8011a44:	bf00      	nop
	}

}
 8011a46:	bf00      	nop
 8011a48:	3714      	adds	r7, #20
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	20001010 	.word	0x20001010

08011a58 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	2201      	movs	r2, #1
 8011a76:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	2b03      	cmp	r3, #3
 8011a7e:	f200 8144 	bhi.w	8011d0a <get_wall_look+0x2b2>
 8011a82:	a201      	add	r2, pc, #4	; (adr r2, 8011a88 <get_wall_look+0x30>)
 8011a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a88:	08011a99 	.word	0x08011a99
 8011a8c:	08011b33 	.word	0x08011b33
 8011a90:	08011bcb 	.word	0x08011bcb
 8011a94:	08011c65 	.word	0x08011c65
	case 1:
		if (y <= 14) {
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2b0e      	cmp	r3, #14
 8011a9c:	dc14      	bgt.n	8011ac8 <get_wall_look+0x70>
			*front_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011a9e:	4a9e      	ldr	r2, [pc, #632]	; (8011d18 <get_wall_look+0x2c0>)
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	331e      	adds	r3, #30
 8011aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011aa8:	2101      	movs	r1, #1
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	fa01 f202 	lsl.w	r2, r1, r2
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8011aba:	4293      	cmp	r3, r2
 8011abc:	bf0c      	ite	eq
 8011abe:	2301      	moveq	r3, #1
 8011ac0:	2300      	movne	r3, #0
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dd16      	ble.n	8011afc <get_wall_look+0xa4>
			*left_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	4a91      	ldr	r2, [pc, #580]	; (8011d18 <get_wall_look+0x2c0>)
 8011ad4:	332c      	adds	r3, #44	; 0x2c
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	4413      	add	r3, r2
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	2101      	movs	r1, #1
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	2101      	movs	r1, #1
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	fa01 f202 	lsl.w	r2, r1, r2
 8011aee:	4293      	cmp	r3, r2
 8011af0:	bf0c      	ite	eq
 8011af2:	2301      	moveq	r3, #1
 8011af4:	2300      	movne	r3, #0
 8011af6:	b2da      	uxtb	r2, r3
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b0e      	cmp	r3, #14
 8011b00:	f300 80fc 	bgt.w	8011cfc <get_wall_look+0x2a4>
			*right_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011b04:	4a84      	ldr	r2, [pc, #528]	; (8011d18 <get_wall_look+0x2c0>)
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	332c      	adds	r3, #44	; 0x2c
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	2101      	movs	r1, #1
 8011b12:	68ba      	ldr	r2, [r7, #8]
 8011b14:	fa01 f202 	lsl.w	r2, r1, r2
 8011b18:	4013      	ands	r3, r2
 8011b1a:	2101      	movs	r1, #1
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8011b22:	4293      	cmp	r3, r2
 8011b24:	bf0c      	ite	eq
 8011b26:	2301      	moveq	r3, #1
 8011b28:	2300      	movne	r3, #0
 8011b2a:	b2da      	uxtb	r2, r3
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011b30:	e0e4      	b.n	8011cfc <get_wall_look+0x2a4>
	case 2:
		if (x <= 14) {
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2b0e      	cmp	r3, #14
 8011b36:	dc15      	bgt.n	8011b64 <get_wall_look+0x10c>
			*front_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011b38:	4a77      	ldr	r2, [pc, #476]	; (8011d18 <get_wall_look+0x2c0>)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	332c      	adds	r3, #44	; 0x2c
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	4413      	add	r3, r2
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	2101      	movs	r1, #1
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	fa01 f202 	lsl.w	r2, r1, r2
 8011b4c:	4013      	ands	r3, r2
 8011b4e:	2101      	movs	r1, #1
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	fa01 f202 	lsl.w	r2, r1, r2
 8011b56:	4293      	cmp	r3, r2
 8011b58:	bf0c      	ite	eq
 8011b5a:	2301      	moveq	r3, #1
 8011b5c:	2300      	movne	r3, #0
 8011b5e:	b2da      	uxtb	r2, r3
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b0e      	cmp	r3, #14
 8011b68:	dc14      	bgt.n	8011b94 <get_wall_look+0x13c>
			*left_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011b6a:	4a6b      	ldr	r2, [pc, #428]	; (8011d18 <get_wall_look+0x2c0>)
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	331e      	adds	r3, #30
 8011b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b74:	2101      	movs	r1, #1
 8011b76:	68fa      	ldr	r2, [r7, #12]
 8011b78:	fa01 f202 	lsl.w	r2, r1, r2
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	2101      	movs	r1, #1
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	fa01 f202 	lsl.w	r2, r1, r2
 8011b86:	4293      	cmp	r3, r2
 8011b88:	bf0c      	ite	eq
 8011b8a:	2301      	moveq	r3, #1
 8011b8c:	2300      	movne	r3, #0
 8011b8e:	b2da      	uxtb	r2, r3
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f340 80b2 	ble.w	8011d00 <get_wall_look+0x2a8>
			*right_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	4a5d      	ldr	r2, [pc, #372]	; (8011d18 <get_wall_look+0x2c0>)
 8011ba2:	331e      	adds	r3, #30
 8011ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ba8:	2101      	movs	r1, #1
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	fa01 f202 	lsl.w	r2, r1, r2
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	2101      	movs	r1, #1
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	bf0c      	ite	eq
 8011bbe:	2301      	moveq	r3, #1
 8011bc0:	2300      	movne	r3, #0
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011bc8:	e09a      	b.n	8011d00 <get_wall_look+0x2a8>
	case 3:
		if (y >= 1) {
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	dd15      	ble.n	8011bfc <get_wall_look+0x1a4>
			*front_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	4a50      	ldr	r2, [pc, #320]	; (8011d18 <get_wall_look+0x2c0>)
 8011bd6:	331e      	adds	r3, #30
 8011bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bdc:	2101      	movs	r1, #1
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	fa01 f202 	lsl.w	r2, r1, r2
 8011be4:	4013      	ands	r3, r2
 8011be6:	2101      	movs	r1, #1
 8011be8:	68fa      	ldr	r2, [r7, #12]
 8011bea:	fa01 f202 	lsl.w	r2, r1, r2
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	bf0c      	ite	eq
 8011bf2:	2301      	moveq	r3, #1
 8011bf4:	2300      	movne	r3, #0
 8011bf6:	b2da      	uxtb	r2, r3
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2b0e      	cmp	r3, #14
 8011c00:	dc15      	bgt.n	8011c2e <get_wall_look+0x1d6>
			*left_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011c02:	4a45      	ldr	r2, [pc, #276]	; (8011d18 <get_wall_look+0x2c0>)
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	332c      	adds	r3, #44	; 0x2c
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	2101      	movs	r1, #1
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	fa01 f202 	lsl.w	r2, r1, r2
 8011c16:	4013      	ands	r3, r2
 8011c18:	2101      	movs	r1, #1
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8011c20:	4293      	cmp	r3, r2
 8011c22:	bf0c      	ite	eq
 8011c24:	2301      	moveq	r3, #1
 8011c26:	2300      	movne	r3, #0
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	dd67      	ble.n	8011d04 <get_wall_look+0x2ac>
			*right_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	3b01      	subs	r3, #1
 8011c38:	4a37      	ldr	r2, [pc, #220]	; (8011d18 <get_wall_look+0x2c0>)
 8011c3a:	332c      	adds	r3, #44	; 0x2c
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	4413      	add	r3, r2
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	2101      	movs	r1, #1
 8011c44:	68ba      	ldr	r2, [r7, #8]
 8011c46:	fa01 f202 	lsl.w	r2, r1, r2
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2101      	movs	r1, #1
 8011c4e:	68ba      	ldr	r2, [r7, #8]
 8011c50:	fa01 f202 	lsl.w	r2, r1, r2
 8011c54:	4293      	cmp	r3, r2
 8011c56:	bf0c      	ite	eq
 8011c58:	2301      	moveq	r3, #1
 8011c5a:	2300      	movne	r3, #0
 8011c5c:	b2da      	uxtb	r2, r3
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011c62:	e04f      	b.n	8011d04 <get_wall_look+0x2ac>
	case 4:
		if (x >= 1) {
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	dd16      	ble.n	8011c98 <get_wall_look+0x240>
			*front_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	4a2a      	ldr	r2, [pc, #168]	; (8011d18 <get_wall_look+0x2c0>)
 8011c70:	332c      	adds	r3, #44	; 0x2c
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4413      	add	r3, r2
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	2101      	movs	r1, #1
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8011c80:	4013      	ands	r3, r2
 8011c82:	2101      	movs	r1, #1
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	fa01 f202 	lsl.w	r2, r1, r2
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	bf0c      	ite	eq
 8011c8e:	2301      	moveq	r3, #1
 8011c90:	2300      	movne	r3, #0
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	dd15      	ble.n	8011cca <get_wall_look+0x272>
			*left_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	4a1d      	ldr	r2, [pc, #116]	; (8011d18 <get_wall_look+0x2c0>)
 8011ca4:	331e      	adds	r3, #30
 8011ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011caa:	2101      	movs	r1, #1
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	fa01 f202 	lsl.w	r2, r1, r2
 8011cb2:	4013      	ands	r3, r2
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	bf0c      	ite	eq
 8011cc0:	2301      	moveq	r3, #1
 8011cc2:	2300      	movne	r3, #0
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	2b0e      	cmp	r3, #14
 8011cce:	dc1b      	bgt.n	8011d08 <get_wall_look+0x2b0>
			*right_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011cd0:	4a11      	ldr	r2, [pc, #68]	; (8011d18 <get_wall_look+0x2c0>)
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	331e      	adds	r3, #30
 8011cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cda:	2101      	movs	r1, #1
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	fa01 f202 	lsl.w	r2, r1, r2
 8011ce2:	4013      	ands	r3, r2
 8011ce4:	2101      	movs	r1, #1
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8011cec:	4293      	cmp	r3, r2
 8011cee:	bf0c      	ite	eq
 8011cf0:	2301      	moveq	r3, #1
 8011cf2:	2300      	movne	r3, #0
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011cfa:	e005      	b.n	8011d08 <get_wall_look+0x2b0>
		break;
 8011cfc:	bf00      	nop
 8011cfe:	e004      	b.n	8011d0a <get_wall_look+0x2b2>
		break;
 8011d00:	bf00      	nop
 8011d02:	e002      	b.n	8011d0a <get_wall_look+0x2b2>
		break;
 8011d04:	bf00      	nop
 8011d06:	e000      	b.n	8011d0a <get_wall_look+0x2b2>
		break;
 8011d08:	bf00      	nop
	}

}
 8011d0a:	bf00      	nop
 8011d0c:	3714      	adds	r7, #20
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	20001010 	.word	0x20001010

08011d1c <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011d1c:	b480      	push	{r7}
 8011d1e:	b087      	sub	sp, #28
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b0e      	cmp	r3, #14
 8011d2e:	dd02      	ble.n	8011d36 <search_AroundWalkCount+0x1a>
 8011d30:	23ff      	movs	r3, #255	; 0xff
 8011d32:	82fb      	strh	r3, [r7, #22]
 8011d34:	e008      	b.n	8011d48 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	3301      	adds	r3, #1
 8011d3a:	493e      	ldr	r1, [pc, #248]	; (8011e34 <search_AroundWalkCount+0x118>)
 8011d3c:	6a3a      	ldr	r2, [r7, #32]
 8011d3e:	0112      	lsls	r2, r2, #4
 8011d40:	4413      	add	r3, r2
 8011d42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d46:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	2b0e      	cmp	r3, #14
 8011d4c:	dd02      	ble.n	8011d54 <search_AroundWalkCount+0x38>
 8011d4e:	23ff      	movs	r3, #255	; 0xff
 8011d50:	82bb      	strh	r3, [r7, #20]
 8011d52:	e008      	b.n	8011d66 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011d54:	6a3b      	ldr	r3, [r7, #32]
 8011d56:	3301      	adds	r3, #1
 8011d58:	4936      	ldr	r1, [pc, #216]	; (8011e34 <search_AroundWalkCount+0x118>)
 8011d5a:	011a      	lsls	r2, r3, #4
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	4413      	add	r3, r2
 8011d60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d64:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dc02      	bgt.n	8011d72 <search_AroundWalkCount+0x56>
 8011d6c:	23ff      	movs	r3, #255	; 0xff
 8011d6e:	827b      	strh	r3, [r7, #18]
 8011d70:	e008      	b.n	8011d84 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 8011d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d74:	3b01      	subs	r3, #1
 8011d76:	492f      	ldr	r1, [pc, #188]	; (8011e34 <search_AroundWalkCount+0x118>)
 8011d78:	6a3a      	ldr	r2, [r7, #32]
 8011d7a:	0112      	lsls	r2, r2, #4
 8011d7c:	4413      	add	r3, r2
 8011d7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d82:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	dc02      	bgt.n	8011d90 <search_AroundWalkCount+0x74>
 8011d8a:	23ff      	movs	r3, #255	; 0xff
 8011d8c:	823b      	strh	r3, [r7, #16]
 8011d8e:	e008      	b.n	8011da2 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8011d90:	6a3b      	ldr	r3, [r7, #32]
 8011d92:	3b01      	subs	r3, #1
 8011d94:	4927      	ldr	r1, [pc, #156]	; (8011e34 <search_AroundWalkCount+0x118>)
 8011d96:	011a      	lsls	r2, r3, #4
 8011d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011da0:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da4:	3b01      	subs	r3, #1
 8011da6:	2b03      	cmp	r3, #3
 8011da8:	d83e      	bhi.n	8011e28 <search_AroundWalkCount+0x10c>
 8011daa:	a201      	add	r2, pc, #4	; (adr r2, 8011db0 <search_AroundWalkCount+0x94>)
 8011dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db0:	08011dc1 	.word	0x08011dc1
 8011db4:	08011ddb 	.word	0x08011ddb
 8011db8:	08011df5 	.word	0x08011df5
 8011dbc:	08011e0f 	.word	0x08011e0f
	case 1:
		*front_count = north_count;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	8afa      	ldrh	r2, [r7, #22]
 8011dc4:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	8aba      	ldrh	r2, [r7, #20]
 8011dca:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	8a7a      	ldrh	r2, [r7, #18]
 8011dd0:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	8a3a      	ldrh	r2, [r7, #16]
 8011dd6:	801a      	strh	r2, [r3, #0]
		break;
 8011dd8:	e026      	b.n	8011e28 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	8aba      	ldrh	r2, [r7, #20]
 8011dde:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	8a7a      	ldrh	r2, [r7, #18]
 8011de4:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	8a3a      	ldrh	r2, [r7, #16]
 8011dea:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	8afa      	ldrh	r2, [r7, #22]
 8011df0:	801a      	strh	r2, [r3, #0]
		break;
 8011df2:	e019      	b.n	8011e28 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	8a7a      	ldrh	r2, [r7, #18]
 8011df8:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	8a3a      	ldrh	r2, [r7, #16]
 8011dfe:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8afa      	ldrh	r2, [r7, #22]
 8011e04:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	8aba      	ldrh	r2, [r7, #20]
 8011e0a:	801a      	strh	r2, [r3, #0]
		break;
 8011e0c:	e00c      	b.n	8011e28 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	8a3a      	ldrh	r2, [r7, #16]
 8011e12:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	8afa      	ldrh	r2, [r7, #22]
 8011e18:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	8aba      	ldrh	r2, [r7, #20]
 8011e1e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	8a7a      	ldrh	r2, [r7, #18]
 8011e24:	801a      	strh	r2, [r3, #0]
		break;
 8011e26:	bf00      	nop

	}


}
 8011e28:	bf00      	nop
 8011e2a:	371c      	adds	r7, #28
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	200011f4 	.word	0x200011f4

08011e38 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011e38:	b480      	push	{r7}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
 8011e44:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	2b0e      	cmp	r3, #14
 8011e4a:	dd03      	ble.n	8011e54 <search_AroundDijkstraCount+0x1c>
 8011e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e50:	82fb      	strh	r3, [r7, #22]
 8011e52:	e009      	b.n	8011e68 <search_AroundDijkstraCount+0x30>
	else {north_count = Dijkstra.row_count[x][y];}
 8011e54:	4944      	ldr	r1, [pc, #272]	; (8011f68 <search_AroundDijkstraCount+0x130>)
 8011e56:	6a3a      	ldr	r2, [r7, #32]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	011b      	lsls	r3, r3, #4
 8011e5c:	1a9b      	subs	r3, r3, r2
 8011e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e60:	4413      	add	r3, r2
 8011e62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e66:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e68:	6a3b      	ldr	r3, [r7, #32]
 8011e6a:	2b0e      	cmp	r3, #14
 8011e6c:	dd03      	ble.n	8011e76 <search_AroundDijkstraCount+0x3e>
 8011e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e72:	82bb      	strh	r3, [r7, #20]
 8011e74:	e00a      	b.n	8011e8c <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.column_count[y][x];}
 8011e76:	493c      	ldr	r1, [pc, #240]	; (8011f68 <search_AroundDijkstraCount+0x130>)
 8011e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	011b      	lsls	r3, r3, #4
 8011e7e:	1a9b      	subs	r3, r3, r2
 8011e80:	6a3a      	ldr	r2, [r7, #32]
 8011e82:	4413      	add	r3, r2
 8011e84:	33f0      	adds	r3, #240	; 0xf0
 8011e86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e8a:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	dc03      	bgt.n	8011e9a <search_AroundDijkstraCount+0x62>
 8011e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e96:	827b      	strh	r3, [r7, #18]
 8011e98:	e00a      	b.n	8011eb0 <search_AroundDijkstraCount+0x78>
	else {south_count = Dijkstra.row_count[x][y-1];}
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	1e59      	subs	r1, r3, #1
 8011e9e:	4832      	ldr	r0, [pc, #200]	; (8011f68 <search_AroundDijkstraCount+0x130>)
 8011ea0:	6a3a      	ldr	r2, [r7, #32]
 8011ea2:	4613      	mov	r3, r2
 8011ea4:	011b      	lsls	r3, r3, #4
 8011ea6:	1a9b      	subs	r3, r3, r2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011eae:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011eb0:	6a3b      	ldr	r3, [r7, #32]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	dc03      	bgt.n	8011ebe <search_AroundDijkstraCount+0x86>
 8011eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011eba:	823b      	strh	r3, [r7, #16]
 8011ebc:	e00b      	b.n	8011ed6 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.column_count[y][x-1];}
 8011ebe:	6a3b      	ldr	r3, [r7, #32]
 8011ec0:	1e59      	subs	r1, r3, #1
 8011ec2:	4829      	ldr	r0, [pc, #164]	; (8011f68 <search_AroundDijkstraCount+0x130>)
 8011ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	011b      	lsls	r3, r3, #4
 8011eca:	1a9b      	subs	r3, r3, r2
 8011ecc:	440b      	add	r3, r1
 8011ece:	33f0      	adds	r3, #240	; 0xf0
 8011ed0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ed4:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	2b03      	cmp	r3, #3
 8011edc:	d83e      	bhi.n	8011f5c <search_AroundDijkstraCount+0x124>
 8011ede:	a201      	add	r2, pc, #4	; (adr r2, 8011ee4 <search_AroundDijkstraCount+0xac>)
 8011ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee4:	08011ef5 	.word	0x08011ef5
 8011ee8:	08011f0f 	.word	0x08011f0f
 8011eec:	08011f29 	.word	0x08011f29
 8011ef0:	08011f43 	.word	0x08011f43
	case 1:
		*front_count = north_count;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	8afa      	ldrh	r2, [r7, #22]
 8011ef8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	8aba      	ldrh	r2, [r7, #20]
 8011efe:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8a7a      	ldrh	r2, [r7, #18]
 8011f04:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	8a3a      	ldrh	r2, [r7, #16]
 8011f0a:	801a      	strh	r2, [r3, #0]
		break;
 8011f0c:	e026      	b.n	8011f5c <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	8aba      	ldrh	r2, [r7, #20]
 8011f12:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	8a7a      	ldrh	r2, [r7, #18]
 8011f18:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	8a3a      	ldrh	r2, [r7, #16]
 8011f1e:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	8afa      	ldrh	r2, [r7, #22]
 8011f24:	801a      	strh	r2, [r3, #0]
		break;
 8011f26:	e019      	b.n	8011f5c <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	8a7a      	ldrh	r2, [r7, #18]
 8011f2c:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	8a3a      	ldrh	r2, [r7, #16]
 8011f32:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	8afa      	ldrh	r2, [r7, #22]
 8011f38:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	8aba      	ldrh	r2, [r7, #20]
 8011f3e:	801a      	strh	r2, [r3, #0]
		break;
 8011f40:	e00c      	b.n	8011f5c <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	8a3a      	ldrh	r2, [r7, #16]
 8011f46:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	8afa      	ldrh	r2, [r7, #22]
 8011f4c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	8aba      	ldrh	r2, [r7, #20]
 8011f52:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	8a7a      	ldrh	r2, [r7, #18]
 8011f58:	801a      	strh	r2, [r3, #0]
		break;
 8011f5a:	bf00      	nop

	}


}
 8011f5c:	bf00      	nop
 8011f5e:	371c      	adds	r7, #28
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr
 8011f68:	200013f4 	.word	0x200013f4

08011f6c <create_DijkstraMap>:




void create_DijkstraMap(void){
 8011f6c:	b590      	push	{r4, r7, lr}
 8011f6e:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8011f72:	b081      	sub	sp, #4
 8011f74:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011f76:	23b4      	movs	r3, #180	; 0xb4
 8011f78:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f7c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011f80:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011f82:	237f      	movs	r3, #127	; 0x7f
 8011f84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f88:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f8c:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011f8e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f92:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011f96:	4a1d      	ldr	r2, [pc, #116]	; (801200c <create_DijkstraMap+0xa0>)
 8011f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f9a:	c303      	stmia	r3!, {r0, r1}
 8011f9c:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011f9e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011fa2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011fa6:	4a1a      	ldr	r2, [pc, #104]	; (8012010 <create_DijkstraMap+0xa4>)
 8011fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8011faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011fae:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011fb2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f003 fab2 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_y);
 8011fbc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011fc0:	f103 0320 	add.w	r3, r3, #32
 8011fc4:	3b0c      	subs	r3, #12
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f003 faaa 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011fcc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011fd0:	3b14      	subs	r3, #20
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f003 faa4 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_direction);
 8011fd8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fdc:	3b3c      	subs	r3, #60	; 0x3c
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f003 fa9e 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_cost);
 8011fe4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011fe8:	3b64      	subs	r3, #100	; 0x64
 8011fea:	4618      	mov	r0, r3
 8011fec:	f003 fa98 	bl	8015520 <initStack_walk>
	for(int i=0;i<=15;i++){
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ff6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011ffa:	6013      	str	r3, [r2, #0]
 8011ffc:	e04e      	b.n	801209c <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 8011ffe:	2300      	movs	r3, #0
 8012000:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012004:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012008:	6013      	str	r3, [r2, #0]
 801200a:	e035      	b.n	8012078 <create_DijkstraMap+0x10c>
 801200c:	08024ff8 	.word	0x08024ff8
 8012010:	08025004 	.word	0x08025004
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8012014:	49c6      	ldr	r1, [pc, #792]	; (8012330 <create_DijkstraMap+0x3c4>)
 8012016:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801201a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	4613      	mov	r3, r2
 8012022:	011b      	lsls	r3, r3, #4
 8012024:	1a9b      	subs	r3, r3, r2
 8012026:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801202a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801202e:	6812      	ldr	r2, [r2, #0]
 8012030:	4413      	add	r3, r2
 8012032:	33f0      	adds	r3, #240	; 0xf0
 8012034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012038:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 801203c:	49bc      	ldr	r1, [pc, #752]	; (8012330 <create_DijkstraMap+0x3c4>)
 801203e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012042:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	4613      	mov	r3, r2
 801204a:	011b      	lsls	r3, r3, #4
 801204c:	1a9b      	subs	r3, r3, r2
 801204e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012052:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012056:	6812      	ldr	r2, [r2, #0]
 8012058:	4413      	add	r3, r2
 801205a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801205e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8012062:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012066:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	3301      	adds	r3, #1
 801206e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012072:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012076:	6013      	str	r3, [r2, #0]
 8012078:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801207c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b0e      	cmp	r3, #14
 8012084:	ddc6      	ble.n	8012014 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 8012086:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801208a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	3301      	adds	r3, #1
 8012092:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012096:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120a0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b0f      	cmp	r3, #15
 80120a8:	dda9      	ble.n	8011ffe <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 80120aa:	4ba1      	ldr	r3, [pc, #644]	; (8012330 <create_DijkstraMap+0x3c4>)
 80120ac:	2200      	movs	r2, #0
 80120ae:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 80120b0:	4b9f      	ldr	r3, [pc, #636]	; (8012330 <create_DijkstraMap+0x3c4>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 80120b8:	4b9d      	ldr	r3, [pc, #628]	; (8012330 <create_DijkstraMap+0x3c4>)
 80120ba:	2200      	movs	r2, #0
 80120bc:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 80120c0:	4b9b      	ldr	r3, [pc, #620]	; (8012330 <create_DijkstraMap+0x3c4>)
 80120c2:	2200      	movs	r2, #0
 80120c4:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80120c8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80120cc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80120d0:	2102      	movs	r1, #2
 80120d2:	4618      	mov	r0, r3
 80120d4:	f003 fa34 	bl	8015540 <pushStack_walk>
 80120d8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80120dc:	f103 0320 	add.w	r3, r3, #32
 80120e0:	3b0c      	subs	r3, #12
 80120e2:	2100      	movs	r1, #0
 80120e4:	4618      	mov	r0, r3
 80120e6:	f003 fa2b 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80120ea:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80120ee:	3b14      	subs	r3, #20
 80120f0:	2100      	movs	r1, #0
 80120f2:	4618      	mov	r0, r3
 80120f4:	f003 fa24 	bl	8015540 <pushStack_walk>
 80120f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80120fc:	3b3c      	subs	r3, #60	; 0x3c
 80120fe:	2108      	movs	r1, #8
 8012100:	4618      	mov	r0, r3
 8012102:	f003 fa1d 	bl	8015540 <pushStack_walk>
 8012106:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801210a:	3b64      	subs	r3, #100	; 0x64
 801210c:	2100      	movs	r1, #0
 801210e:	4618      	mov	r0, r3
 8012110:	f003 fa16 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8012114:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012118:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801211c:	2103      	movs	r1, #3
 801211e:	4618      	mov	r0, r3
 8012120:	f003 fa0e 	bl	8015540 <pushStack_walk>
 8012124:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012128:	f103 0320 	add.w	r3, r3, #32
 801212c:	3b0c      	subs	r3, #12
 801212e:	2100      	movs	r1, #0
 8012130:	4618      	mov	r0, r3
 8012132:	f003 fa05 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8012136:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801213a:	3b14      	subs	r3, #20
 801213c:	2100      	movs	r1, #0
 801213e:	4618      	mov	r0, r3
 8012140:	f003 f9fe 	bl	8015540 <pushStack_walk>
 8012144:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012148:	3b3c      	subs	r3, #60	; 0x3c
 801214a:	2108      	movs	r1, #8
 801214c:	4618      	mov	r0, r3
 801214e:	f003 f9f7 	bl	8015540 <pushStack_walk>
 8012152:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012156:	3b64      	subs	r3, #100	; 0x64
 8012158:	2100      	movs	r1, #0
 801215a:	4618      	mov	r0, r3
 801215c:	f003 f9f0 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8012160:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012164:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012168:	2102      	movs	r1, #2
 801216a:	4618      	mov	r0, r3
 801216c:	f003 f9e8 	bl	8015540 <pushStack_walk>
 8012170:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012174:	f103 0320 	add.w	r3, r3, #32
 8012178:	3b0c      	subs	r3, #12
 801217a:	2100      	movs	r1, #0
 801217c:	4618      	mov	r0, r3
 801217e:	f003 f9df 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8012182:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012186:	3b14      	subs	r3, #20
 8012188:	2101      	movs	r1, #1
 801218a:	4618      	mov	r0, r3
 801218c:	f003 f9d8 	bl	8015540 <pushStack_walk>
 8012190:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012194:	3b3c      	subs	r3, #60	; 0x3c
 8012196:	2108      	movs	r1, #8
 8012198:	4618      	mov	r0, r3
 801219a:	f003 f9d1 	bl	8015540 <pushStack_walk>
 801219e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121a2:	3b64      	subs	r3, #100	; 0x64
 80121a4:	2100      	movs	r1, #0
 80121a6:	4618      	mov	r0, r3
 80121a8:	f003 f9ca 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 80121ac:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80121b0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80121b4:	2102      	movs	r1, #2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f003 f9c2 	bl	8015540 <pushStack_walk>
 80121bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80121c0:	f103 0320 	add.w	r3, r3, #32
 80121c4:	3b0c      	subs	r3, #12
 80121c6:	2101      	movs	r1, #1
 80121c8:	4618      	mov	r0, r3
 80121ca:	f003 f9b9 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80121ce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80121d2:	3b14      	subs	r3, #20
 80121d4:	2101      	movs	r1, #1
 80121d6:	4618      	mov	r0, r3
 80121d8:	f003 f9b2 	bl	8015540 <pushStack_walk>
 80121dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121e0:	3b3c      	subs	r3, #60	; 0x3c
 80121e2:	2108      	movs	r1, #8
 80121e4:	4618      	mov	r0, r3
 80121e6:	f003 f9ab 	bl	8015540 <pushStack_walk>
 80121ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121ee:	3b64      	subs	r3, #100	; 0x64
 80121f0:	2100      	movs	r1, #0
 80121f2:	4618      	mov	r0, r3
 80121f4:	f003 f9a4 	bl	8015540 <pushStack_walk>



	unsigned short count_number = 1;
 80121f8:	2301      	movs	r3, #1
 80121fa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121fe:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8012202:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8012204:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012208:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801220c:	4618      	mov	r0, r3
 801220e:	f003 f9c1 	bl	8015594 <popStack_walk>
 8012212:	4603      	mov	r3, r0
 8012214:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012218:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801221c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801221e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012222:	f103 0320 	add.w	r3, r3, #32
 8012226:	3b0c      	subs	r3, #12
 8012228:	4618      	mov	r0, r3
 801222a:	f003 f9b3 	bl	8015594 <popStack_walk>
 801222e:	4603      	mov	r3, r0
 8012230:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012234:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012238:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 801223a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801223e:	3b14      	subs	r3, #20
 8012240:	4618      	mov	r0, r3
 8012242:	f003 f9a7 	bl	8015594 <popStack_walk>
 8012246:	4603      	mov	r3, r0
 8012248:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801224c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8012250:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8012252:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012256:	3b3c      	subs	r3, #60	; 0x3c
 8012258:	4618      	mov	r0, r3
 801225a:	f003 f99b 	bl	8015594 <popStack_walk>
 801225e:	4603      	mov	r3, r0
 8012260:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012264:	f102 0266 	add.w	r2, r2, #102	; 0x66
 8012268:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 801226a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801226e:	3b64      	subs	r3, #100	; 0x64
 8012270:	4618      	mov	r0, r3
 8012272:	f003 f98f 	bl	8015594 <popStack_walk>
 8012276:	4603      	mov	r3, r0
 8012278:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801227c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8012280:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8012282:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012286:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012290:	4293      	cmp	r3, r2
 8012292:	f001 8398 	beq.w	80139c6 <create_DijkstraMap+0x1a5a>
 8012296:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801229a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801229e:	881b      	ldrh	r3, [r3, #0]
 80122a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122a4:	4293      	cmp	r3, r2
 80122a6:	f001 838e 	beq.w	80139c6 <create_DijkstraMap+0x1a5a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==ROW){
 80122aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ae:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80122b2:	881b      	ldrh	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	f040 85b7 	bne.w	8012e28 <create_DijkstraMap+0xebc>
			if(Ycoordinate <= 13){
 80122ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122be:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122c2:	881b      	ldrh	r3, [r3, #0]
 80122c4:	2b0d      	cmp	r3, #13
 80122c6:	f200 80ea 	bhi.w	801249e <create_DijkstraMap+0x532>
				if(Direction==SLANT_NORTH){
 80122ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ce:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d12d      	bne.n	8012334 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80122d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122dc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	3301      	adds	r3, #1
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122ea:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122ee:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80122f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122f4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122fc:	2b04      	cmp	r3, #4
 80122fe:	dd05      	ble.n	801230c <create_DijkstraMap+0x3a0>
 8012300:	2304      	movs	r3, #4
 8012302:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012306:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801230a:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 801230c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012310:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012314:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012318:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801231c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012320:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012324:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012328:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801232c:	8013      	strh	r3, [r2, #0]
 801232e:	e011      	b.n	8012354 <create_DijkstraMap+0x3e8>
 8012330:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012334:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012338:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012342:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012346:	8013      	strh	r3, [r2, #0]
 8012348:	2300      	movs	r3, #0
 801234a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801234e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012352:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate+1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8012354:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012358:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	3301      	adds	r3, #1
 8012360:	4a6c      	ldr	r2, [pc, #432]	; (8012514 <create_DijkstraMap+0x5a8>)
 8012362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012366:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801236a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801236e:	8812      	ldrh	r2, [r2, #0]
 8012370:	2101      	movs	r1, #1
 8012372:	fa01 f202 	lsl.w	r2, r1, r2
 8012376:	4013      	ands	r3, r2
 8012378:	2b00      	cmp	r3, #0
 801237a:	f040 8090 	bne.w	801249e <create_DijkstraMap+0x532>
 801237e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012382:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012386:	881a      	ldrh	r2, [r3, #0]
 8012388:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801238c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	1c59      	adds	r1, r3, #1
 8012394:	4860      	ldr	r0, [pc, #384]	; (8012518 <create_DijkstraMap+0x5ac>)
 8012396:	4613      	mov	r3, r2
 8012398:	011b      	lsls	r3, r3, #4
 801239a:	1a9b      	subs	r3, r3, r2
 801239c:	440b      	add	r3, r1
 801239e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123a2:	461c      	mov	r4, r3
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123ac:	881a      	ldrh	r2, [r3, #0]
 80123ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123b2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123b6:	8819      	ldrh	r1, [r3, #0]
 80123b8:	4857      	ldr	r0, [pc, #348]	; (8012518 <create_DijkstraMap+0x5ac>)
 80123ba:	4613      	mov	r3, r2
 80123bc:	011b      	lsls	r3, r3, #4
 80123be:	1a9b      	subs	r3, r3, r2
 80123c0:	440b      	add	r3, r1
 80123c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123c6:	461a      	mov	r2, r3
 80123c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123cc:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80123d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123d4:	4413      	add	r3, r2
 80123d6:	429c      	cmp	r4, r3
 80123d8:	dd61      	ble.n	801249e <create_DijkstraMap+0x532>
					Dijkstra.row_count[Xcoordinate][Ycoordinate+1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80123da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123e2:	881a      	ldrh	r2, [r3, #0]
 80123e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123ec:	8819      	ldrh	r1, [r3, #0]
 80123ee:	484a      	ldr	r0, [pc, #296]	; (8012518 <create_DijkstraMap+0x5ac>)
 80123f0:	4613      	mov	r3, r2
 80123f2:	011b      	lsls	r3, r3, #4
 80123f4:	1a9b      	subs	r3, r3, r2
 80123f6:	440b      	add	r3, r1
 80123f8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80123fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012400:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801240a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801240e:	8812      	ldrh	r2, [r2, #0]
 8012410:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012414:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012418:	8809      	ldrh	r1, [r1, #0]
 801241a:	3101      	adds	r1, #1
 801241c:	4403      	add	r3, r0
 801241e:	b29c      	uxth	r4, r3
 8012420:	483d      	ldr	r0, [pc, #244]	; (8012518 <create_DijkstraMap+0x5ac>)
 8012422:	4613      	mov	r3, r2
 8012424:	011b      	lsls	r3, r3, #4
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	440b      	add	r3, r1
 801242a:	4622      	mov	r2, r4
 801242c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012430:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012434:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012438:	881a      	ldrh	r2, [r3, #0]
 801243a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801243e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012442:	4611      	mov	r1, r2
 8012444:	4618      	mov	r0, r3
 8012446:	f003 f87b 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 801244a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801244e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012452:	881b      	ldrh	r3, [r3, #0]
 8012454:	3301      	adds	r3, #1
 8012456:	b29a      	uxth	r2, r3
 8012458:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801245c:	f103 0320 	add.w	r3, r3, #32
 8012460:	3b0c      	subs	r3, #12
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f003 f86b 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801246a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801246e:	3b14      	subs	r3, #20
 8012470:	2100      	movs	r1, #0
 8012472:	4618      	mov	r0, r3
 8012474:	f003 f864 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8012478:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801247c:	3b3c      	subs	r3, #60	; 0x3c
 801247e:	2100      	movs	r1, #0
 8012480:	4618      	mov	r0, r3
 8012482:	f003 f85d 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012486:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801248a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801248e:	881a      	ldrh	r2, [r3, #0]
 8012490:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012494:	3b64      	subs	r3, #100	; 0x64
 8012496:	4611      	mov	r1, r2
 8012498:	4618      	mov	r0, r3
 801249a:	f003 f851 	bl	8015540 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 801249e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124a2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 80ec 	beq.w	8012686 <create_DijkstraMap+0x71a>
				if(Direction==SLANT_SOUTH){
 80124ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	2b04      	cmp	r3, #4
 80124ba:	d12f      	bne.n	801251c <create_DijkstraMap+0x5b0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80124bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80124c4:	881b      	ldrh	r3, [r3, #0]
 80124c6:	3301      	adds	r3, #1
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124ce:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124d2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80124d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124d8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124e0:	2b04      	cmp	r3, #4
 80124e2:	dd05      	ble.n	80124f0 <create_DijkstraMap+0x584>
 80124e4:	2304      	movs	r3, #4
 80124e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124ea:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124ee:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80124f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124f4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012500:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012504:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012508:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801250c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012510:	8013      	strh	r3, [r2, #0]
 8012512:	e013      	b.n	801253c <create_DijkstraMap+0x5d0>
 8012514:	20001010 	.word	0x20001010
 8012518:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801251c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012520:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801252a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801252e:	8013      	strh	r3, [r2, #0]
 8012530:	2300      	movs	r3, #0
 8012532:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012536:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801253a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 801253c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012540:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	3b01      	subs	r3, #1
 8012548:	4a6c      	ldr	r2, [pc, #432]	; (80126fc <create_DijkstraMap+0x790>)
 801254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801254e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012552:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012556:	8812      	ldrh	r2, [r2, #0]
 8012558:	2101      	movs	r1, #1
 801255a:	fa01 f202 	lsl.w	r2, r1, r2
 801255e:	4013      	ands	r3, r2
 8012560:	2b00      	cmp	r3, #0
 8012562:	f040 8090 	bne.w	8012686 <create_DijkstraMap+0x71a>
 8012566:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801256a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801256e:	881a      	ldrh	r2, [r3, #0]
 8012570:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012574:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012578:	881b      	ldrh	r3, [r3, #0]
 801257a:	1e59      	subs	r1, r3, #1
 801257c:	4860      	ldr	r0, [pc, #384]	; (8012700 <create_DijkstraMap+0x794>)
 801257e:	4613      	mov	r3, r2
 8012580:	011b      	lsls	r3, r3, #4
 8012582:	1a9b      	subs	r3, r3, r2
 8012584:	440b      	add	r3, r1
 8012586:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801258a:	461c      	mov	r4, r3
 801258c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012590:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012594:	881a      	ldrh	r2, [r3, #0]
 8012596:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801259a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801259e:	8819      	ldrh	r1, [r3, #0]
 80125a0:	4857      	ldr	r0, [pc, #348]	; (8012700 <create_DijkstraMap+0x794>)
 80125a2:	4613      	mov	r3, r2
 80125a4:	011b      	lsls	r3, r3, #4
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	440b      	add	r3, r1
 80125aa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125ae:	461a      	mov	r2, r3
 80125b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b4:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125bc:	4413      	add	r3, r2
 80125be:	429c      	cmp	r4, r3
 80125c0:	dd61      	ble.n	8012686 <create_DijkstraMap+0x71a>
					Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80125c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125c6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125ca:	881a      	ldrh	r2, [r3, #0]
 80125cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125d4:	8819      	ldrh	r1, [r3, #0]
 80125d6:	484a      	ldr	r0, [pc, #296]	; (8012700 <create_DijkstraMap+0x794>)
 80125d8:	4613      	mov	r3, r2
 80125da:	011b      	lsls	r3, r3, #4
 80125dc:	1a9b      	subs	r3, r3, r2
 80125de:	440b      	add	r3, r1
 80125e0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80125e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125e8:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125ec:	881b      	ldrh	r3, [r3, #0]
 80125ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125f2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80125f6:	8812      	ldrh	r2, [r2, #0]
 80125f8:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80125fc:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012600:	8809      	ldrh	r1, [r1, #0]
 8012602:	3901      	subs	r1, #1
 8012604:	4403      	add	r3, r0
 8012606:	b29c      	uxth	r4, r3
 8012608:	483d      	ldr	r0, [pc, #244]	; (8012700 <create_DijkstraMap+0x794>)
 801260a:	4613      	mov	r3, r2
 801260c:	011b      	lsls	r3, r3, #4
 801260e:	1a9b      	subs	r3, r3, r2
 8012610:	440b      	add	r3, r1
 8012612:	4622      	mov	r2, r4
 8012614:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012618:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801261c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012620:	881a      	ldrh	r2, [r3, #0]
 8012622:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012626:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801262a:	4611      	mov	r1, r2
 801262c:	4618      	mov	r0, r3
 801262e:	f002 ff87 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8012632:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012636:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801263a:	881b      	ldrh	r3, [r3, #0]
 801263c:	3b01      	subs	r3, #1
 801263e:	b29a      	uxth	r2, r3
 8012640:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012644:	f103 0320 	add.w	r3, r3, #32
 8012648:	3b0c      	subs	r3, #12
 801264a:	4611      	mov	r1, r2
 801264c:	4618      	mov	r0, r3
 801264e:	f002 ff77 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012652:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012656:	3b14      	subs	r3, #20
 8012658:	2100      	movs	r1, #0
 801265a:	4618      	mov	r0, r3
 801265c:	f002 ff70 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8012660:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012664:	3b3c      	subs	r3, #60	; 0x3c
 8012666:	2104      	movs	r1, #4
 8012668:	4618      	mov	r0, r3
 801266a:	f002 ff69 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801266e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012672:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012676:	881a      	ldrh	r2, [r3, #0]
 8012678:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801267c:	3b64      	subs	r3, #100	; 0x64
 801267e:	4611      	mov	r1, r2
 8012680:	4618      	mov	r0, r3
 8012682:	f002 ff5d 	bl	8015540 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8012686:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801268a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801268e:	881b      	ldrh	r3, [r3, #0]
 8012690:	2b0e      	cmp	r3, #14
 8012692:	f200 81dc 	bhi.w	8012a4e <create_DijkstraMap+0xae2>
				if(Direction==SLANT_SOUTH_EAST){
 8012696:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801269a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801269e:	881b      	ldrh	r3, [r3, #0]
 80126a0:	2b03      	cmp	r3, #3
 80126a2:	d12f      	bne.n	8012704 <create_DijkstraMap+0x798>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80126a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126a8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	3301      	adds	r3, #1
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126b6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126ba:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80126bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126c0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126c8:	2b05      	cmp	r3, #5
 80126ca:	dd05      	ble.n	80126d8 <create_DijkstraMap+0x76c>
 80126cc:	2305      	movs	r3, #5
 80126ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126d2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126d6:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80126d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126dc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126e4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80126e8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80126ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80126f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126f4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80126f8:	8013      	strh	r3, [r2, #0]
 80126fa:	e013      	b.n	8012724 <create_DijkstraMap+0x7b8>
 80126fc:	20001010 	.word	0x20001010
 8012700:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012704:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012708:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012712:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012716:	8013      	strh	r3, [r2, #0]
 8012718:	2300      	movs	r3, #0
 801271a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801271e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012722:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012724:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012728:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801272c:	881b      	ldrh	r3, [r3, #0]
 801272e:	4a69      	ldr	r2, [pc, #420]	; (80128d4 <create_DijkstraMap+0x968>)
 8012730:	330e      	adds	r3, #14
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801273c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012740:	8812      	ldrh	r2, [r2, #0]
 8012742:	2101      	movs	r1, #1
 8012744:	fa01 f202 	lsl.w	r2, r1, r2
 8012748:	4013      	ands	r3, r2
 801274a:	2b00      	cmp	r3, #0
 801274c:	f040 808e 	bne.w	801286c <create_DijkstraMap+0x900>
 8012750:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012754:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801275e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012762:	8819      	ldrh	r1, [r3, #0]
 8012764:	485c      	ldr	r0, [pc, #368]	; (80128d8 <create_DijkstraMap+0x96c>)
 8012766:	4613      	mov	r3, r2
 8012768:	011b      	lsls	r3, r3, #4
 801276a:	1a9b      	subs	r3, r3, r2
 801276c:	440b      	add	r3, r1
 801276e:	33f0      	adds	r3, #240	; 0xf0
 8012770:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012774:	461c      	mov	r4, r3
 8012776:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801277a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801277e:	881a      	ldrh	r2, [r3, #0]
 8012780:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012784:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012788:	8819      	ldrh	r1, [r3, #0]
 801278a:	4853      	ldr	r0, [pc, #332]	; (80128d8 <create_DijkstraMap+0x96c>)
 801278c:	4613      	mov	r3, r2
 801278e:	011b      	lsls	r3, r3, #4
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	440b      	add	r3, r1
 8012794:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012798:	461a      	mov	r2, r3
 801279a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801279e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127a6:	4413      	add	r3, r2
 80127a8:	429c      	cmp	r4, r3
 80127aa:	dd5f      	ble.n	801286c <create_DijkstraMap+0x900>
					Dijkstra.column_count[Ycoordinate][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80127ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127b0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127be:	8819      	ldrh	r1, [r3, #0]
 80127c0:	4845      	ldr	r0, [pc, #276]	; (80128d8 <create_DijkstraMap+0x96c>)
 80127c2:	4613      	mov	r3, r2
 80127c4:	011b      	lsls	r3, r3, #4
 80127c6:	1a9b      	subs	r3, r3, r2
 80127c8:	440b      	add	r3, r1
 80127ca:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80127ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127d2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127dc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80127e0:	8812      	ldrh	r2, [r2, #0]
 80127e2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80127e6:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80127ea:	8809      	ldrh	r1, [r1, #0]
 80127ec:	4403      	add	r3, r0
 80127ee:	b29c      	uxth	r4, r3
 80127f0:	4839      	ldr	r0, [pc, #228]	; (80128d8 <create_DijkstraMap+0x96c>)
 80127f2:	4613      	mov	r3, r2
 80127f4:	011b      	lsls	r3, r3, #4
 80127f6:	1a9b      	subs	r3, r3, r2
 80127f8:	440b      	add	r3, r1
 80127fa:	33f0      	adds	r3, #240	; 0xf0
 80127fc:	4622      	mov	r2, r4
 80127fe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8012802:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012806:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801280a:	881a      	ldrh	r2, [r3, #0]
 801280c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012810:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012814:	4611      	mov	r1, r2
 8012816:	4618      	mov	r0, r3
 8012818:	f002 fe92 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 801281c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012820:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012824:	881a      	ldrh	r2, [r3, #0]
 8012826:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801282a:	f103 0320 	add.w	r3, r3, #32
 801282e:	3b0c      	subs	r3, #12
 8012830:	4611      	mov	r1, r2
 8012832:	4618      	mov	r0, r3
 8012834:	f002 fe84 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012838:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801283c:	3b14      	subs	r3, #20
 801283e:	2101      	movs	r1, #1
 8012840:	4618      	mov	r0, r3
 8012842:	f002 fe7d 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012846:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801284a:	3b3c      	subs	r3, #60	; 0x3c
 801284c:	2103      	movs	r1, #3
 801284e:	4618      	mov	r0, r3
 8012850:	f002 fe76 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012858:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801285c:	881a      	ldrh	r2, [r3, #0]
 801285e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012862:	3b64      	subs	r3, #100	; 0x64
 8012864:	4611      	mov	r1, r2
 8012866:	4618      	mov	r0, r3
 8012868:	f002 fe6a 	bl	8015540 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 801286c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012870:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012874:	881b      	ldrh	r3, [r3, #0]
 8012876:	2b01      	cmp	r3, #1
 8012878:	d130      	bne.n	80128dc <create_DijkstraMap+0x970>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801287a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801287e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012882:	881b      	ldrh	r3, [r3, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	b29b      	uxth	r3, r3
 8012888:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801288c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012890:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012892:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012896:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801289a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801289e:	2b05      	cmp	r3, #5
 80128a0:	dd05      	ble.n	80128ae <create_DijkstraMap+0x942>
 80128a2:	2305      	movs	r3, #5
 80128a4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128a8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128ac:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80128ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128b2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128ba:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128be:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80128c6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ca:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128ce:	8013      	strh	r3, [r2, #0]
 80128d0:	e014      	b.n	80128fc <create_DijkstraMap+0x990>
 80128d2:	bf00      	nop
 80128d4:	20001010 	.word	0x20001010
 80128d8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80128dc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128e0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128ea:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128ee:	8013      	strh	r3, [r2, #0]
 80128f0:	2300      	movs	r3, #0
 80128f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128f6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128fa:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80128fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012900:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	4a6f      	ldr	r2, [pc, #444]	; (8012ac4 <create_DijkstraMap+0xb58>)
 8012908:	330e      	adds	r3, #14
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	4413      	add	r3, r2
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012914:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012918:	8812      	ldrh	r2, [r2, #0]
 801291a:	3201      	adds	r2, #1
 801291c:	2101      	movs	r1, #1
 801291e:	fa01 f202 	lsl.w	r2, r1, r2
 8012922:	4013      	ands	r3, r2
 8012924:	2b00      	cmp	r3, #0
 8012926:	f040 8092 	bne.w	8012a4e <create_DijkstraMap+0xae2>
 801292a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801292e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	1c5a      	adds	r2, r3, #1
 8012936:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801293a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801293e:	8819      	ldrh	r1, [r3, #0]
 8012940:	4861      	ldr	r0, [pc, #388]	; (8012ac8 <create_DijkstraMap+0xb5c>)
 8012942:	4613      	mov	r3, r2
 8012944:	011b      	lsls	r3, r3, #4
 8012946:	1a9b      	subs	r3, r3, r2
 8012948:	440b      	add	r3, r1
 801294a:	33f0      	adds	r3, #240	; 0xf0
 801294c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012950:	461c      	mov	r4, r3
 8012952:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012956:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801295a:	881a      	ldrh	r2, [r3, #0]
 801295c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012960:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012964:	8819      	ldrh	r1, [r3, #0]
 8012966:	4858      	ldr	r0, [pc, #352]	; (8012ac8 <create_DijkstraMap+0xb5c>)
 8012968:	4613      	mov	r3, r2
 801296a:	011b      	lsls	r3, r3, #4
 801296c:	1a9b      	subs	r3, r3, r2
 801296e:	440b      	add	r3, r1
 8012970:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012974:	461a      	mov	r2, r3
 8012976:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801297a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801297e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012982:	4413      	add	r3, r2
 8012984:	429c      	cmp	r4, r3
 8012986:	dd62      	ble.n	8012a4e <create_DijkstraMap+0xae2>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012988:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801298c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012990:	881a      	ldrh	r2, [r3, #0]
 8012992:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012996:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801299a:	8819      	ldrh	r1, [r3, #0]
 801299c:	484a      	ldr	r0, [pc, #296]	; (8012ac8 <create_DijkstraMap+0xb5c>)
 801299e:	4613      	mov	r3, r2
 80129a0:	011b      	lsls	r3, r3, #4
 80129a2:	1a9b      	subs	r3, r3, r2
 80129a4:	440b      	add	r3, r1
 80129a6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80129aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ae:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129b8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80129bc:	8812      	ldrh	r2, [r2, #0]
 80129be:	3201      	adds	r2, #1
 80129c0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80129c4:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80129c8:	8809      	ldrh	r1, [r1, #0]
 80129ca:	4403      	add	r3, r0
 80129cc:	b29c      	uxth	r4, r3
 80129ce:	483e      	ldr	r0, [pc, #248]	; (8012ac8 <create_DijkstraMap+0xb5c>)
 80129d0:	4613      	mov	r3, r2
 80129d2:	011b      	lsls	r3, r3, #4
 80129d4:	1a9b      	subs	r3, r3, r2
 80129d6:	440b      	add	r3, r1
 80129d8:	33f0      	adds	r3, #240	; 0xf0
 80129da:	4622      	mov	r2, r4
 80129dc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80129e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129e4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129e8:	881a      	ldrh	r2, [r3, #0]
 80129ea:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80129ee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80129f2:	4611      	mov	r1, r2
 80129f4:	4618      	mov	r0, r3
 80129f6:	f002 fda3 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80129fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129fe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	3301      	adds	r3, #1
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012a0c:	f103 0320 	add.w	r3, r3, #32
 8012a10:	3b0c      	subs	r3, #12
 8012a12:	4611      	mov	r1, r2
 8012a14:	4618      	mov	r0, r3
 8012a16:	f002 fd93 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012a1a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012a1e:	3b14      	subs	r3, #20
 8012a20:	2101      	movs	r1, #1
 8012a22:	4618      	mov	r0, r3
 8012a24:	f002 fd8c 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012a28:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012a2c:	3b3c      	subs	r3, #60	; 0x3c
 8012a2e:	2101      	movs	r1, #1
 8012a30:	4618      	mov	r0, r3
 8012a32:	f002 fd85 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012a36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a3a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a3e:	881a      	ldrh	r2, [r3, #0]
 8012a40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a44:	3b64      	subs	r3, #100	; 0x64
 8012a46:	4611      	mov	r1, r2
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f002 fd79 	bl	8015540 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012a4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a52:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a56:	881b      	ldrh	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 81e5 	beq.w	8012e28 <create_DijkstraMap+0xebc>
				if(Direction==SLANT_SOUTH_WEST){
 8012a5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a62:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a66:	881b      	ldrh	r3, [r3, #0]
 8012a68:	2b05      	cmp	r3, #5
 8012a6a:	d12f      	bne.n	8012acc <create_DijkstraMap+0xb60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a70:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	3301      	adds	r3, #1
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a7e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a82:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012a84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a88:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a90:	2b05      	cmp	r3, #5
 8012a92:	dd05      	ble.n	8012aa0 <create_DijkstraMap+0xb34>
 8012a94:	2305      	movs	r3, #5
 8012a96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a9e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012aa0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012aa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012aac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ab0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ab4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ab8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012abc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ac0:	8013      	strh	r3, [r2, #0]
 8012ac2:	e013      	b.n	8012aec <create_DijkstraMap+0xb80>
 8012ac4:	20001010 	.word	0x20001010
 8012ac8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012acc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ad0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ada:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ade:	8013      	strh	r3, [r2, #0]
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ae6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012aea:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012aec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012af0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	3b01      	subs	r3, #1
 8012af8:	4a6a      	ldr	r2, [pc, #424]	; (8012ca4 <create_DijkstraMap+0xd38>)
 8012afa:	330e      	adds	r3, #14
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	4413      	add	r3, r2
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b06:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012b0a:	8812      	ldrh	r2, [r2, #0]
 8012b0c:	2101      	movs	r1, #1
 8012b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8012b12:	4013      	ands	r3, r2
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f040 8092 	bne.w	8012c3e <create_DijkstraMap+0xcd2>
 8012b1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b1e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b22:	881a      	ldrh	r2, [r3, #0]
 8012b24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b28:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	1e59      	subs	r1, r3, #1
 8012b30:	485d      	ldr	r0, [pc, #372]	; (8012ca8 <create_DijkstraMap+0xd3c>)
 8012b32:	4613      	mov	r3, r2
 8012b34:	011b      	lsls	r3, r3, #4
 8012b36:	1a9b      	subs	r3, r3, r2
 8012b38:	440b      	add	r3, r1
 8012b3a:	33f0      	adds	r3, #240	; 0xf0
 8012b3c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b40:	461c      	mov	r4, r3
 8012b42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b46:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b4a:	881a      	ldrh	r2, [r3, #0]
 8012b4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b50:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b54:	8819      	ldrh	r1, [r3, #0]
 8012b56:	4854      	ldr	r0, [pc, #336]	; (8012ca8 <create_DijkstraMap+0xd3c>)
 8012b58:	4613      	mov	r3, r2
 8012b5a:	011b      	lsls	r3, r3, #4
 8012b5c:	1a9b      	subs	r3, r3, r2
 8012b5e:	440b      	add	r3, r1
 8012b60:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b64:	461a      	mov	r2, r3
 8012b66:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b6a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b72:	4413      	add	r3, r2
 8012b74:	429c      	cmp	r4, r3
 8012b76:	dd62      	ble.n	8012c3e <create_DijkstraMap+0xcd2>
					Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012b78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b7c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b80:	881a      	ldrh	r2, [r3, #0]
 8012b82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b86:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b8a:	8819      	ldrh	r1, [r3, #0]
 8012b8c:	4846      	ldr	r0, [pc, #280]	; (8012ca8 <create_DijkstraMap+0xd3c>)
 8012b8e:	4613      	mov	r3, r2
 8012b90:	011b      	lsls	r3, r3, #4
 8012b92:	1a9b      	subs	r3, r3, r2
 8012b94:	440b      	add	r3, r1
 8012b96:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012b9a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b9e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ba8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012bac:	8812      	ldrh	r2, [r2, #0]
 8012bae:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012bb2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012bb6:	8809      	ldrh	r1, [r1, #0]
 8012bb8:	3901      	subs	r1, #1
 8012bba:	4403      	add	r3, r0
 8012bbc:	b29c      	uxth	r4, r3
 8012bbe:	483a      	ldr	r0, [pc, #232]	; (8012ca8 <create_DijkstraMap+0xd3c>)
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	011b      	lsls	r3, r3, #4
 8012bc4:	1a9b      	subs	r3, r3, r2
 8012bc6:	440b      	add	r3, r1
 8012bc8:	33f0      	adds	r3, #240	; 0xf0
 8012bca:	4622      	mov	r2, r4
 8012bcc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012bd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bd4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	3b01      	subs	r3, #1
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012be2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012be6:	4611      	mov	r1, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f002 fca9 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012bee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bf2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bf6:	881a      	ldrh	r2, [r3, #0]
 8012bf8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012bfc:	f103 0320 	add.w	r3, r3, #32
 8012c00:	3b0c      	subs	r3, #12
 8012c02:	4611      	mov	r1, r2
 8012c04:	4618      	mov	r0, r3
 8012c06:	f002 fc9b 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012c0a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012c0e:	3b14      	subs	r3, #20
 8012c10:	2101      	movs	r1, #1
 8012c12:	4618      	mov	r0, r3
 8012c14:	f002 fc94 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012c18:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012c1c:	3b3c      	subs	r3, #60	; 0x3c
 8012c1e:	2105      	movs	r1, #5
 8012c20:	4618      	mov	r0, r3
 8012c22:	f002 fc8d 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012c26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c2a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c2e:	881a      	ldrh	r2, [r3, #0]
 8012c30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012c34:	3b64      	subs	r3, #100	; 0x64
 8012c36:	4611      	mov	r1, r2
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f002 fc81 	bl	8015540 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012c3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c42:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	2b07      	cmp	r3, #7
 8012c4a:	d12f      	bne.n	8012cac <create_DijkstraMap+0xd40>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012c4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c50:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	3301      	adds	r3, #1
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c5e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c62:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c68:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c70:	2b05      	cmp	r3, #5
 8012c72:	dd05      	ble.n	8012c80 <create_DijkstraMap+0xd14>
 8012c74:	2305      	movs	r3, #5
 8012c76:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c7a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c7e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012c80:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c84:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c8c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c90:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c98:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c9c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012ca0:	8013      	strh	r3, [r2, #0]
 8012ca2:	e013      	b.n	8012ccc <create_DijkstraMap+0xd60>
 8012ca4:	20001010 	.word	0x20001010
 8012ca8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012cac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012cb0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cba:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012cbe:	8013      	strh	r3, [r2, #0]
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cc6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012cca:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012ccc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cd0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	4a75      	ldr	r2, [pc, #468]	; (8012eb0 <create_DijkstraMap+0xf44>)
 8012cda:	330e      	adds	r3, #14
 8012cdc:	009b      	lsls	r3, r3, #2
 8012cde:	4413      	add	r3, r2
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ce6:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012cea:	8812      	ldrh	r2, [r2, #0]
 8012cec:	3201      	adds	r2, #1
 8012cee:	2101      	movs	r1, #1
 8012cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f040 8096 	bne.w	8012e28 <create_DijkstraMap+0xebc>
 8012cfc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d00:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	1c5a      	adds	r2, r3, #1
 8012d08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d0c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	1e59      	subs	r1, r3, #1
 8012d14:	4867      	ldr	r0, [pc, #412]	; (8012eb4 <create_DijkstraMap+0xf48>)
 8012d16:	4613      	mov	r3, r2
 8012d18:	011b      	lsls	r3, r3, #4
 8012d1a:	1a9b      	subs	r3, r3, r2
 8012d1c:	440b      	add	r3, r1
 8012d1e:	33f0      	adds	r3, #240	; 0xf0
 8012d20:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d24:	461c      	mov	r4, r3
 8012d26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d2a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d2e:	881a      	ldrh	r2, [r3, #0]
 8012d30:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d34:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d38:	8819      	ldrh	r1, [r3, #0]
 8012d3a:	485e      	ldr	r0, [pc, #376]	; (8012eb4 <create_DijkstraMap+0xf48>)
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	011b      	lsls	r3, r3, #4
 8012d40:	1a9b      	subs	r3, r3, r2
 8012d42:	440b      	add	r3, r1
 8012d44:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d56:	4413      	add	r3, r2
 8012d58:	429c      	cmp	r4, r3
 8012d5a:	dd65      	ble.n	8012e28 <create_DijkstraMap+0xebc>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012d5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d60:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d64:	881a      	ldrh	r2, [r3, #0]
 8012d66:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d6a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d6e:	8819      	ldrh	r1, [r3, #0]
 8012d70:	4850      	ldr	r0, [pc, #320]	; (8012eb4 <create_DijkstraMap+0xf48>)
 8012d72:	4613      	mov	r3, r2
 8012d74:	011b      	lsls	r3, r3, #4
 8012d76:	1a9b      	subs	r3, r3, r2
 8012d78:	440b      	add	r3, r1
 8012d7a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d82:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d8c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012d90:	8812      	ldrh	r2, [r2, #0]
 8012d92:	3201      	adds	r2, #1
 8012d94:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012d98:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012d9c:	8809      	ldrh	r1, [r1, #0]
 8012d9e:	3901      	subs	r1, #1
 8012da0:	4403      	add	r3, r0
 8012da2:	b29c      	uxth	r4, r3
 8012da4:	4843      	ldr	r0, [pc, #268]	; (8012eb4 <create_DijkstraMap+0xf48>)
 8012da6:	4613      	mov	r3, r2
 8012da8:	011b      	lsls	r3, r3, #4
 8012daa:	1a9b      	subs	r3, r3, r2
 8012dac:	440b      	add	r3, r1
 8012dae:	33f0      	adds	r3, #240	; 0xf0
 8012db0:	4622      	mov	r2, r4
 8012db2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012db6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012dc8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012dcc:	4611      	mov	r1, r2
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f002 fbb6 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012dd4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dd8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	3301      	adds	r3, #1
 8012de0:	b29a      	uxth	r2, r3
 8012de2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012de6:	f103 0320 	add.w	r3, r3, #32
 8012dea:	3b0c      	subs	r3, #12
 8012dec:	4611      	mov	r1, r2
 8012dee:	4618      	mov	r0, r3
 8012df0:	f002 fba6 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012df4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012df8:	3b14      	subs	r3, #20
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f002 fb9f 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012e02:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012e06:	3b3c      	subs	r3, #60	; 0x3c
 8012e08:	2107      	movs	r1, #7
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f002 fb98 	bl	8015540 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e14:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e18:	881a      	ldrh	r2, [r3, #0]
 8012e1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e1e:	3b64      	subs	r3, #100	; 0x64
 8012e20:	4611      	mov	r1, r2
 8012e22:	4618      	mov	r0, r3
 8012e24:	f002 fb8c 	bl	8015540 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==COLUMN){
 8012e28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e2c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8012e30:	881b      	ldrh	r3, [r3, #0]
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	f040 85ba 	bne.w	80139ac <create_DijkstraMap+0x1a40>
					if(Xcoordinate <= 13){
 8012e38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	2b0d      	cmp	r3, #13
 8012e44:	f200 80f3 	bhi.w	801302e <create_DijkstraMap+0x10c2>
						if(Direction==SLANT_EAST){
 8012e48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e4c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	2b02      	cmp	r3, #2
 8012e54:	d130      	bne.n	8012eb8 <create_DijkstraMap+0xf4c>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012e56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e5a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012e5e:	881b      	ldrh	r3, [r3, #0]
 8012e60:	3301      	adds	r3, #1
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e68:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e6c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012e6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e72:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e7a:	2b04      	cmp	r3, #4
 8012e7c:	dd05      	ble.n	8012e8a <create_DijkstraMap+0xf1e>
 8012e7e:	2304      	movs	r3, #4
 8012e80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e84:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e88:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012e8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e8e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e96:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e9a:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012e9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012ea2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ea6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012eaa:	8013      	strh	r3, [r2, #0]
 8012eac:	e014      	b.n	8012ed8 <create_DijkstraMap+0xf6c>
 8012eae:	bf00      	nop
 8012eb0:	20001010 	.word	0x20001010
 8012eb4:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012eb8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ebc:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012ec0:	881b      	ldrh	r3, [r3, #0]
 8012ec2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ec6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012eca:	8013      	strh	r3, [r2, #0]
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ed2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ed6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate+1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012ed8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012edc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	4a6f      	ldr	r2, [pc, #444]	; (80130a4 <create_DijkstraMap+0x1138>)
 8012ee6:	330e      	adds	r3, #14
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ef2:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012ef6:	8812      	ldrh	r2, [r2, #0]
 8012ef8:	2101      	movs	r1, #1
 8012efa:	fa01 f202 	lsl.w	r2, r1, r2
 8012efe:	4013      	ands	r3, r2
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f040 8094 	bne.w	801302e <create_DijkstraMap+0x10c2>
 8012f06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f0a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f0e:	881a      	ldrh	r2, [r3, #0]
 8012f10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f18:	881b      	ldrh	r3, [r3, #0]
 8012f1a:	1c59      	adds	r1, r3, #1
 8012f1c:	4862      	ldr	r0, [pc, #392]	; (80130a8 <create_DijkstraMap+0x113c>)
 8012f1e:	4613      	mov	r3, r2
 8012f20:	011b      	lsls	r3, r3, #4
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	440b      	add	r3, r1
 8012f26:	33f0      	adds	r3, #240	; 0xf0
 8012f28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f2c:	461c      	mov	r4, r3
 8012f2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f32:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f36:	881a      	ldrh	r2, [r3, #0]
 8012f38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f40:	8819      	ldrh	r1, [r3, #0]
 8012f42:	4859      	ldr	r0, [pc, #356]	; (80130a8 <create_DijkstraMap+0x113c>)
 8012f44:	4613      	mov	r3, r2
 8012f46:	011b      	lsls	r3, r3, #4
 8012f48:	1a9b      	subs	r3, r3, r2
 8012f4a:	440b      	add	r3, r1
 8012f4c:	33f0      	adds	r3, #240	; 0xf0
 8012f4e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f52:	461a      	mov	r2, r3
 8012f54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f58:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f60:	4413      	add	r3, r2
 8012f62:	429c      	cmp	r4, r3
 8012f64:	dd63      	ble.n	801302e <create_DijkstraMap+0x10c2>
							Dijkstra.column_count[Ycoordinate][Xcoordinate+1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012f66:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f6a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f6e:	881a      	ldrh	r2, [r3, #0]
 8012f70:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f74:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f78:	8819      	ldrh	r1, [r3, #0]
 8012f7a:	484b      	ldr	r0, [pc, #300]	; (80130a8 <create_DijkstraMap+0x113c>)
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	011b      	lsls	r3, r3, #4
 8012f80:	1a9b      	subs	r3, r3, r2
 8012f82:	440b      	add	r3, r1
 8012f84:	33f0      	adds	r3, #240	; 0xf0
 8012f86:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012f8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f8e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012f92:	881b      	ldrh	r3, [r3, #0]
 8012f94:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f98:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012f9c:	8812      	ldrh	r2, [r2, #0]
 8012f9e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012fa2:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012fa6:	8809      	ldrh	r1, [r1, #0]
 8012fa8:	3101      	adds	r1, #1
 8012faa:	4403      	add	r3, r0
 8012fac:	b29c      	uxth	r4, r3
 8012fae:	483e      	ldr	r0, [pc, #248]	; (80130a8 <create_DijkstraMap+0x113c>)
 8012fb0:	4613      	mov	r3, r2
 8012fb2:	011b      	lsls	r3, r3, #4
 8012fb4:	1a9b      	subs	r3, r3, r2
 8012fb6:	440b      	add	r3, r1
 8012fb8:	33f0      	adds	r3, #240	; 0xf0
 8012fba:	4622      	mov	r2, r4
 8012fbc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012fc0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fc4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012fd2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012fd6:	4611      	mov	r1, r2
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f002 fab1 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012fde:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fe2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fe6:	881a      	ldrh	r2, [r3, #0]
 8012fe8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012fec:	f103 0320 	add.w	r3, r3, #32
 8012ff0:	3b0c      	subs	r3, #12
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f002 faa3 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012ffa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012ffe:	3b14      	subs	r3, #20
 8013000:	2101      	movs	r1, #1
 8013002:	4618      	mov	r0, r3
 8013004:	f002 fa9c 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8013008:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801300c:	3b3c      	subs	r3, #60	; 0x3c
 801300e:	2102      	movs	r1, #2
 8013010:	4618      	mov	r0, r3
 8013012:	f002 fa95 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013016:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801301a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801301e:	881a      	ldrh	r2, [r3, #0]
 8013020:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013024:	3b64      	subs	r3, #100	; 0x64
 8013026:	4611      	mov	r1, r2
 8013028:	4618      	mov	r0, r3
 801302a:	f002 fa89 	bl	8015540 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 801302e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013032:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013036:	881b      	ldrh	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	f000 80f2 	beq.w	8013222 <create_DijkstraMap+0x12b6>
						if(Direction==SLANT_WEST){
 801303e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013042:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013046:	881b      	ldrh	r3, [r3, #0]
 8013048:	2b06      	cmp	r3, #6
 801304a:	d12f      	bne.n	80130ac <create_DijkstraMap+0x1140>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801304c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013050:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013054:	881b      	ldrh	r3, [r3, #0]
 8013056:	3301      	adds	r3, #1
 8013058:	b29b      	uxth	r3, r3
 801305a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801305e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013062:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8013064:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013068:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801306c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013070:	2b04      	cmp	r3, #4
 8013072:	dd05      	ble.n	8013080 <create_DijkstraMap+0x1114>
 8013074:	2304      	movs	r3, #4
 8013076:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801307a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801307e:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8013080:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013084:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013088:	f9b3 2000 	ldrsh.w	r2, [r3]
 801308c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013090:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8013094:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013098:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801309c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80130a0:	8013      	strh	r3, [r2, #0]
 80130a2:	e013      	b.n	80130cc <create_DijkstraMap+0x1160>
 80130a4:	20001010 	.word	0x20001010
 80130a8:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80130ac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80130b0:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80130b4:	881b      	ldrh	r3, [r3, #0]
 80130b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130ba:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80130be:	8013      	strh	r3, [r2, #0]
 80130c0:	2300      	movs	r3, #0
 80130c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130c6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80130ca:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80130cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	3b01      	subs	r3, #1
 80130d8:	4a6f      	ldr	r2, [pc, #444]	; (8013298 <create_DijkstraMap+0x132c>)
 80130da:	330e      	adds	r3, #14
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	4413      	add	r3, r2
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130e6:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80130ea:	8812      	ldrh	r2, [r2, #0]
 80130ec:	2101      	movs	r1, #1
 80130ee:	fa01 f202 	lsl.w	r2, r1, r2
 80130f2:	4013      	ands	r3, r2
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f040 8094 	bne.w	8013222 <create_DijkstraMap+0x12b6>
 80130fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130fe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013102:	881a      	ldrh	r2, [r3, #0]
 8013104:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013108:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	1e59      	subs	r1, r3, #1
 8013110:	4862      	ldr	r0, [pc, #392]	; (801329c <create_DijkstraMap+0x1330>)
 8013112:	4613      	mov	r3, r2
 8013114:	011b      	lsls	r3, r3, #4
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	440b      	add	r3, r1
 801311a:	33f0      	adds	r3, #240	; 0xf0
 801311c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013120:	461c      	mov	r4, r3
 8013122:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013126:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801312a:	881a      	ldrh	r2, [r3, #0]
 801312c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013130:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013134:	8819      	ldrh	r1, [r3, #0]
 8013136:	4859      	ldr	r0, [pc, #356]	; (801329c <create_DijkstraMap+0x1330>)
 8013138:	4613      	mov	r3, r2
 801313a:	011b      	lsls	r3, r3, #4
 801313c:	1a9b      	subs	r3, r3, r2
 801313e:	440b      	add	r3, r1
 8013140:	33f0      	adds	r3, #240	; 0xf0
 8013142:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013146:	461a      	mov	r2, r3
 8013148:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801314c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013154:	4413      	add	r3, r2
 8013156:	429c      	cmp	r4, r3
 8013158:	dd63      	ble.n	8013222 <create_DijkstraMap+0x12b6>
							Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801315a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801315e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013162:	881a      	ldrh	r2, [r3, #0]
 8013164:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013168:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801316c:	8819      	ldrh	r1, [r3, #0]
 801316e:	484b      	ldr	r0, [pc, #300]	; (801329c <create_DijkstraMap+0x1330>)
 8013170:	4613      	mov	r3, r2
 8013172:	011b      	lsls	r3, r3, #4
 8013174:	1a9b      	subs	r3, r3, r2
 8013176:	440b      	add	r3, r1
 8013178:	33f0      	adds	r3, #240	; 0xf0
 801317a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801317e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013182:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801318c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013190:	8812      	ldrh	r2, [r2, #0]
 8013192:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013196:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801319a:	8809      	ldrh	r1, [r1, #0]
 801319c:	3901      	subs	r1, #1
 801319e:	4403      	add	r3, r0
 80131a0:	b29c      	uxth	r4, r3
 80131a2:	483e      	ldr	r0, [pc, #248]	; (801329c <create_DijkstraMap+0x1330>)
 80131a4:	4613      	mov	r3, r2
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	1a9b      	subs	r3, r3, r2
 80131aa:	440b      	add	r3, r1
 80131ac:	33f0      	adds	r3, #240	; 0xf0
 80131ae:	4622      	mov	r2, r4
 80131b0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 80131b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131b8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80131bc:	881b      	ldrh	r3, [r3, #0]
 80131be:	3b01      	subs	r3, #1
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80131c6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80131ca:	4611      	mov	r1, r2
 80131cc:	4618      	mov	r0, r3
 80131ce:	f002 f9b7 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80131d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131d6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80131da:	881a      	ldrh	r2, [r3, #0]
 80131dc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131e0:	f103 0320 	add.w	r3, r3, #32
 80131e4:	3b0c      	subs	r3, #12
 80131e6:	4611      	mov	r1, r2
 80131e8:	4618      	mov	r0, r3
 80131ea:	f002 f9a9 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80131ee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80131f2:	3b14      	subs	r3, #20
 80131f4:	2101      	movs	r1, #1
 80131f6:	4618      	mov	r0, r3
 80131f8:	f002 f9a2 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80131fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013200:	3b3c      	subs	r3, #60	; 0x3c
 8013202:	2106      	movs	r1, #6
 8013204:	4618      	mov	r0, r3
 8013206:	f002 f99b 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801320a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801320e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013212:	881a      	ldrh	r2, [r3, #0]
 8013214:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013218:	3b64      	subs	r3, #100	; 0x64
 801321a:	4611      	mov	r1, r2
 801321c:	4618      	mov	r0, r3
 801321e:	f002 f98f 	bl	8015540 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 8013222:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013226:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	2b0e      	cmp	r3, #14
 801322e:	f200 81d8 	bhi.w	80135e2 <create_DijkstraMap+0x1676>
						if(Direction==SLANT_NORTH_WEST){
 8013232:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013236:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	2b07      	cmp	r3, #7
 801323e:	d12f      	bne.n	80132a0 <create_DijkstraMap+0x1334>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013240:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013244:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	3301      	adds	r3, #1
 801324c:	b29b      	uxth	r3, r3
 801324e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013252:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013256:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013258:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801325c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013264:	2b05      	cmp	r3, #5
 8013266:	dd05      	ble.n	8013274 <create_DijkstraMap+0x1308>
 8013268:	2305      	movs	r3, #5
 801326a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801326e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013272:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013274:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013278:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801327c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013280:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013284:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013288:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801328c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013290:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013294:	8013      	strh	r3, [r2, #0]
 8013296:	e013      	b.n	80132c0 <create_DijkstraMap+0x1354>
 8013298:	20001010 	.word	0x20001010
 801329c:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80132a0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80132a4:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80132a8:	881b      	ldrh	r3, [r3, #0]
 80132aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132ae:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80132b2:	8013      	strh	r3, [r2, #0]
 80132b4:	2300      	movs	r3, #0
 80132b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132ba:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80132be:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 80132c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132c4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	4a68      	ldr	r2, [pc, #416]	; (801346c <create_DijkstraMap+0x1500>)
 80132cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132d0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132d4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	2101      	movs	r1, #1
 80132dc:	fa01 f202 	lsl.w	r2, r1, r2
 80132e0:	4013      	ands	r3, r2
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f040 808e 	bne.w	8013404 <create_DijkstraMap+0x1498>
 80132e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132ec:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80132f0:	881a      	ldrh	r2, [r3, #0]
 80132f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132f6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80132fa:	8819      	ldrh	r1, [r3, #0]
 80132fc:	485c      	ldr	r0, [pc, #368]	; (8013470 <create_DijkstraMap+0x1504>)
 80132fe:	4613      	mov	r3, r2
 8013300:	011b      	lsls	r3, r3, #4
 8013302:	1a9b      	subs	r3, r3, r2
 8013304:	440b      	add	r3, r1
 8013306:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801330a:	461c      	mov	r4, r3
 801330c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013310:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013314:	881a      	ldrh	r2, [r3, #0]
 8013316:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801331a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801331e:	8819      	ldrh	r1, [r3, #0]
 8013320:	4853      	ldr	r0, [pc, #332]	; (8013470 <create_DijkstraMap+0x1504>)
 8013322:	4613      	mov	r3, r2
 8013324:	011b      	lsls	r3, r3, #4
 8013326:	1a9b      	subs	r3, r3, r2
 8013328:	440b      	add	r3, r1
 801332a:	33f0      	adds	r3, #240	; 0xf0
 801332c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013330:	461a      	mov	r2, r3
 8013332:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013336:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801333a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801333e:	4413      	add	r3, r2
 8013340:	429c      	cmp	r4, r3
 8013342:	dd5f      	ble.n	8013404 <create_DijkstraMap+0x1498>
							Dijkstra.row_count[Xcoordinate][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013344:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013348:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801334c:	881a      	ldrh	r2, [r3, #0]
 801334e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013352:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013356:	8819      	ldrh	r1, [r3, #0]
 8013358:	4845      	ldr	r0, [pc, #276]	; (8013470 <create_DijkstraMap+0x1504>)
 801335a:	4613      	mov	r3, r2
 801335c:	011b      	lsls	r3, r3, #4
 801335e:	1a9b      	subs	r3, r3, r2
 8013360:	440b      	add	r3, r1
 8013362:	33f0      	adds	r3, #240	; 0xf0
 8013364:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013368:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801336c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013370:	881b      	ldrh	r3, [r3, #0]
 8013372:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013376:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801337a:	8812      	ldrh	r2, [r2, #0]
 801337c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013380:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013384:	8809      	ldrh	r1, [r1, #0]
 8013386:	4403      	add	r3, r0
 8013388:	b29c      	uxth	r4, r3
 801338a:	4839      	ldr	r0, [pc, #228]	; (8013470 <create_DijkstraMap+0x1504>)
 801338c:	4613      	mov	r3, r2
 801338e:	011b      	lsls	r3, r3, #4
 8013390:	1a9b      	subs	r3, r3, r2
 8013392:	440b      	add	r3, r1
 8013394:	4622      	mov	r2, r4
 8013396:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 801339a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801339e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80133a2:	881a      	ldrh	r2, [r3, #0]
 80133a4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80133a8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80133ac:	4611      	mov	r1, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f002 f8c6 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80133b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133b8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80133bc:	881a      	ldrh	r2, [r3, #0]
 80133be:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80133c2:	f103 0320 	add.w	r3, r3, #32
 80133c6:	3b0c      	subs	r3, #12
 80133c8:	4611      	mov	r1, r2
 80133ca:	4618      	mov	r0, r3
 80133cc:	f002 f8b8 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80133d0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80133d4:	3b14      	subs	r3, #20
 80133d6:	2100      	movs	r1, #0
 80133d8:	4618      	mov	r0, r3
 80133da:	f002 f8b1 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80133de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80133e2:	3b3c      	subs	r3, #60	; 0x3c
 80133e4:	2107      	movs	r1, #7
 80133e6:	4618      	mov	r0, r3
 80133e8:	f002 f8aa 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80133ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133f0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80133f4:	881a      	ldrh	r2, [r3, #0]
 80133f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80133fa:	3b64      	subs	r3, #100	; 0x64
 80133fc:	4611      	mov	r1, r2
 80133fe:	4618      	mov	r0, r3
 8013400:	f002 f89e 	bl	8015540 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8013404:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013408:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801340c:	881b      	ldrh	r3, [r3, #0]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d130      	bne.n	8013474 <create_DijkstraMap+0x1508>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013412:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013416:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	3301      	adds	r3, #1
 801341e:	b29b      	uxth	r3, r3
 8013420:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013424:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013428:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801342a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801342e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013436:	2b05      	cmp	r3, #5
 8013438:	dd05      	ble.n	8013446 <create_DijkstraMap+0x14da>
 801343a:	2305      	movs	r3, #5
 801343c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013440:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013444:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013446:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801344a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801344e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013452:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013456:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801345a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801345e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013462:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013466:	8013      	strh	r3, [r2, #0]
 8013468:	e014      	b.n	8013494 <create_DijkstraMap+0x1528>
 801346a:	bf00      	nop
 801346c:	20001010 	.word	0x20001010
 8013470:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013474:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013478:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013482:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013486:	8013      	strh	r3, [r2, #0]
 8013488:	2300      	movs	r3, #0
 801348a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801348e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013492:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013494:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013498:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801349c:	881b      	ldrh	r3, [r3, #0]
 801349e:	4a6e      	ldr	r2, [pc, #440]	; (8013658 <create_DijkstraMap+0x16ec>)
 80134a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134a4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134a8:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80134ac:	8812      	ldrh	r2, [r2, #0]
 80134ae:	3201      	adds	r2, #1
 80134b0:	2101      	movs	r1, #1
 80134b2:	fa01 f202 	lsl.w	r2, r1, r2
 80134b6:	4013      	ands	r3, r2
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f040 8092 	bne.w	80135e2 <create_DijkstraMap+0x1676>
 80134be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134c2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	1c5a      	adds	r2, r3, #1
 80134ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134ce:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134d2:	8819      	ldrh	r1, [r3, #0]
 80134d4:	4861      	ldr	r0, [pc, #388]	; (801365c <create_DijkstraMap+0x16f0>)
 80134d6:	4613      	mov	r3, r2
 80134d8:	011b      	lsls	r3, r3, #4
 80134da:	1a9b      	subs	r3, r3, r2
 80134dc:	440b      	add	r3, r1
 80134de:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80134e2:	461c      	mov	r4, r3
 80134e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134ec:	881a      	ldrh	r2, [r3, #0]
 80134ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134f2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80134f6:	8819      	ldrh	r1, [r3, #0]
 80134f8:	4858      	ldr	r0, [pc, #352]	; (801365c <create_DijkstraMap+0x16f0>)
 80134fa:	4613      	mov	r3, r2
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	1a9b      	subs	r3, r3, r2
 8013500:	440b      	add	r3, r1
 8013502:	33f0      	adds	r3, #240	; 0xf0
 8013504:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013508:	461a      	mov	r2, r3
 801350a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801350e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013516:	4413      	add	r3, r2
 8013518:	429c      	cmp	r4, r3
 801351a:	dd62      	ble.n	80135e2 <create_DijkstraMap+0x1676>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801351c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013520:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013524:	881a      	ldrh	r2, [r3, #0]
 8013526:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801352a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801352e:	8819      	ldrh	r1, [r3, #0]
 8013530:	484a      	ldr	r0, [pc, #296]	; (801365c <create_DijkstraMap+0x16f0>)
 8013532:	4613      	mov	r3, r2
 8013534:	011b      	lsls	r3, r3, #4
 8013536:	1a9b      	subs	r3, r3, r2
 8013538:	440b      	add	r3, r1
 801353a:	33f0      	adds	r3, #240	; 0xf0
 801353c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013540:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013544:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013548:	881b      	ldrh	r3, [r3, #0]
 801354a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801354e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013552:	8812      	ldrh	r2, [r2, #0]
 8013554:	3201      	adds	r2, #1
 8013556:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801355a:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 801355e:	8809      	ldrh	r1, [r1, #0]
 8013560:	4403      	add	r3, r0
 8013562:	b29c      	uxth	r4, r3
 8013564:	483d      	ldr	r0, [pc, #244]	; (801365c <create_DijkstraMap+0x16f0>)
 8013566:	4613      	mov	r3, r2
 8013568:	011b      	lsls	r3, r3, #4
 801356a:	1a9b      	subs	r3, r3, r2
 801356c:	440b      	add	r3, r1
 801356e:	4622      	mov	r2, r4
 8013570:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8013574:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013578:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	3301      	adds	r3, #1
 8013580:	b29a      	uxth	r2, r3
 8013582:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013586:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801358a:	4611      	mov	r1, r2
 801358c:	4618      	mov	r0, r3
 801358e:	f001 ffd7 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8013592:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013596:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801359a:	881a      	ldrh	r2, [r3, #0]
 801359c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80135a0:	f103 0320 	add.w	r3, r3, #32
 80135a4:	3b0c      	subs	r3, #12
 80135a6:	4611      	mov	r1, r2
 80135a8:	4618      	mov	r0, r3
 80135aa:	f001 ffc9 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80135ae:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80135b2:	3b14      	subs	r3, #20
 80135b4:	2100      	movs	r1, #0
 80135b6:	4618      	mov	r0, r3
 80135b8:	f001 ffc2 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 80135bc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80135c0:	3b3c      	subs	r3, #60	; 0x3c
 80135c2:	2101      	movs	r1, #1
 80135c4:	4618      	mov	r0, r3
 80135c6:	f001 ffbb 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80135ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135ce:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80135d2:	881a      	ldrh	r2, [r3, #0]
 80135d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135d8:	3b64      	subs	r3, #100	; 0x64
 80135da:	4611      	mov	r1, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f001 ffaf 	bl	8015540 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 80135e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135e6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80135ea:	881b      	ldrh	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 81dd 	beq.w	80139ac <create_DijkstraMap+0x1a40>
						if(Direction==SLANT_SOUTH_WEST){
 80135f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135f6:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80135fa:	881b      	ldrh	r3, [r3, #0]
 80135fc:	2b05      	cmp	r3, #5
 80135fe:	d12f      	bne.n	8013660 <create_DijkstraMap+0x16f4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013600:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013604:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	3301      	adds	r3, #1
 801360c:	b29b      	uxth	r3, r3
 801360e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013612:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013616:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013618:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801361c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013624:	2b05      	cmp	r3, #5
 8013626:	dd05      	ble.n	8013634 <create_DijkstraMap+0x16c8>
 8013628:	2305      	movs	r3, #5
 801362a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801362e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013632:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013634:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013638:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801363c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013640:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013644:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013648:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801364c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013650:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013654:	8013      	strh	r3, [r2, #0]
 8013656:	e013      	b.n	8013680 <create_DijkstraMap+0x1714>
 8013658:	20001010 	.word	0x20001010
 801365c:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013660:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013664:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013668:	881b      	ldrh	r3, [r3, #0]
 801366a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801366e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013672:	8013      	strh	r3, [r2, #0]
 8013674:	2300      	movs	r3, #0
 8013676:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801367a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801367e:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013680:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013684:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	3b01      	subs	r3, #1
 801368c:	4ad1      	ldr	r2, [pc, #836]	; (80139d4 <create_DijkstraMap+0x1a68>)
 801368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013692:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013696:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801369a:	8812      	ldrh	r2, [r2, #0]
 801369c:	2101      	movs	r1, #1
 801369e:	fa01 f202 	lsl.w	r2, r1, r2
 80136a2:	4013      	ands	r3, r2
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f040 8092 	bne.w	80137ce <create_DijkstraMap+0x1862>
 80136aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136b2:	881a      	ldrh	r2, [r3, #0]
 80136b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136b8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	1e59      	subs	r1, r3, #1
 80136c0:	48c5      	ldr	r0, [pc, #788]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 80136c2:	4613      	mov	r3, r2
 80136c4:	011b      	lsls	r3, r3, #4
 80136c6:	1a9b      	subs	r3, r3, r2
 80136c8:	440b      	add	r3, r1
 80136ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80136ce:	461c      	mov	r4, r3
 80136d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136d8:	881a      	ldrh	r2, [r3, #0]
 80136da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136e2:	8819      	ldrh	r1, [r3, #0]
 80136e4:	48bc      	ldr	r0, [pc, #752]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 80136e6:	4613      	mov	r3, r2
 80136e8:	011b      	lsls	r3, r3, #4
 80136ea:	1a9b      	subs	r3, r3, r2
 80136ec:	440b      	add	r3, r1
 80136ee:	33f0      	adds	r3, #240	; 0xf0
 80136f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80136f4:	461a      	mov	r2, r3
 80136f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136fa:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80136fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013702:	4413      	add	r3, r2
 8013704:	429c      	cmp	r4, r3
 8013706:	dd62      	ble.n	80137ce <create_DijkstraMap+0x1862>
							Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013708:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801370c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013710:	881a      	ldrh	r2, [r3, #0]
 8013712:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013716:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801371a:	8819      	ldrh	r1, [r3, #0]
 801371c:	48ae      	ldr	r0, [pc, #696]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 801371e:	4613      	mov	r3, r2
 8013720:	011b      	lsls	r3, r3, #4
 8013722:	1a9b      	subs	r3, r3, r2
 8013724:	440b      	add	r3, r1
 8013726:	33f0      	adds	r3, #240	; 0xf0
 8013728:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801372c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013730:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801373a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801373e:	8812      	ldrh	r2, [r2, #0]
 8013740:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013744:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013748:	8809      	ldrh	r1, [r1, #0]
 801374a:	3901      	subs	r1, #1
 801374c:	4403      	add	r3, r0
 801374e:	b29c      	uxth	r4, r3
 8013750:	48a1      	ldr	r0, [pc, #644]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 8013752:	4613      	mov	r3, r2
 8013754:	011b      	lsls	r3, r3, #4
 8013756:	1a9b      	subs	r3, r3, r2
 8013758:	440b      	add	r3, r1
 801375a:	4622      	mov	r2, r4
 801375c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8013760:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013764:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013768:	881a      	ldrh	r2, [r3, #0]
 801376a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801376e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013772:	4611      	mov	r1, r2
 8013774:	4618      	mov	r0, r3
 8013776:	f001 fee3 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 801377a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801377e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013782:	881b      	ldrh	r3, [r3, #0]
 8013784:	3b01      	subs	r3, #1
 8013786:	b29a      	uxth	r2, r3
 8013788:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801378c:	f103 0320 	add.w	r3, r3, #32
 8013790:	3b0c      	subs	r3, #12
 8013792:	4611      	mov	r1, r2
 8013794:	4618      	mov	r0, r3
 8013796:	f001 fed3 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 801379a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801379e:	3b14      	subs	r3, #20
 80137a0:	2100      	movs	r1, #0
 80137a2:	4618      	mov	r0, r3
 80137a4:	f001 fecc 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80137a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80137ac:	3b3c      	subs	r3, #60	; 0x3c
 80137ae:	2105      	movs	r1, #5
 80137b0:	4618      	mov	r0, r3
 80137b2:	f001 fec5 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80137b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137ba:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137be:	881a      	ldrh	r2, [r3, #0]
 80137c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80137c4:	3b64      	subs	r3, #100	; 0x64
 80137c6:	4611      	mov	r1, r2
 80137c8:	4618      	mov	r0, r3
 80137ca:	f001 feb9 	bl	8015540 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 80137ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137d2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80137d6:	881b      	ldrh	r3, [r3, #0]
 80137d8:	2b03      	cmp	r3, #3
 80137da:	d12b      	bne.n	8013834 <create_DijkstraMap+0x18c8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80137dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137e0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	3301      	adds	r3, #1
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137ee:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80137f2:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80137f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137f8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013800:	2b05      	cmp	r3, #5
 8013802:	dd05      	ble.n	8013810 <create_DijkstraMap+0x18a4>
 8013804:	2305      	movs	r3, #5
 8013806:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801380a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801380e:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8013810:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013814:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013818:	f9b3 2000 	ldrsh.w	r2, [r3]
 801381c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013820:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013824:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013828:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801382c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013830:	8013      	strh	r3, [r2, #0]
 8013832:	e00f      	b.n	8013854 <create_DijkstraMap+0x18e8>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013834:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013838:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013842:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013846:	8013      	strh	r3, [r2, #0]
 8013848:	2300      	movs	r3, #0
 801384a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801384e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013852:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013858:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	3b01      	subs	r3, #1
 8013860:	4a5c      	ldr	r2, [pc, #368]	; (80139d4 <create_DijkstraMap+0x1a68>)
 8013862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013866:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801386a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801386e:	8812      	ldrh	r2, [r2, #0]
 8013870:	3201      	adds	r2, #1
 8013872:	2101      	movs	r1, #1
 8013874:	fa01 f202 	lsl.w	r2, r1, r2
 8013878:	4013      	ands	r3, r2
 801387a:	2b00      	cmp	r3, #0
 801387c:	f040 8096 	bne.w	80139ac <create_DijkstraMap+0x1a40>
 8013880:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013884:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	1c5a      	adds	r2, r3, #1
 801388c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013890:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013894:	881b      	ldrh	r3, [r3, #0]
 8013896:	1e59      	subs	r1, r3, #1
 8013898:	484f      	ldr	r0, [pc, #316]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 801389a:	4613      	mov	r3, r2
 801389c:	011b      	lsls	r3, r3, #4
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	440b      	add	r3, r1
 80138a2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80138a6:	461c      	mov	r4, r3
 80138a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138ac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80138b0:	881a      	ldrh	r2, [r3, #0]
 80138b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138b6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138ba:	8819      	ldrh	r1, [r3, #0]
 80138bc:	4846      	ldr	r0, [pc, #280]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 80138be:	4613      	mov	r3, r2
 80138c0:	011b      	lsls	r3, r3, #4
 80138c2:	1a9b      	subs	r3, r3, r2
 80138c4:	440b      	add	r3, r1
 80138c6:	33f0      	adds	r3, #240	; 0xf0
 80138c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80138cc:	461a      	mov	r2, r3
 80138ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138d2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80138d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138da:	4413      	add	r3, r2
 80138dc:	429c      	cmp	r4, r3
 80138de:	dd65      	ble.n	80139ac <create_DijkstraMap+0x1a40>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80138e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138e4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80138e8:	881a      	ldrh	r2, [r3, #0]
 80138ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138ee:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138f2:	8819      	ldrh	r1, [r3, #0]
 80138f4:	4838      	ldr	r0, [pc, #224]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 80138f6:	4613      	mov	r3, r2
 80138f8:	011b      	lsls	r3, r3, #4
 80138fa:	1a9b      	subs	r3, r3, r2
 80138fc:	440b      	add	r3, r1
 80138fe:	33f0      	adds	r3, #240	; 0xf0
 8013900:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013904:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013908:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013912:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013916:	8812      	ldrh	r2, [r2, #0]
 8013918:	3201      	adds	r2, #1
 801391a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801391e:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013922:	8809      	ldrh	r1, [r1, #0]
 8013924:	3901      	subs	r1, #1
 8013926:	4403      	add	r3, r0
 8013928:	b29c      	uxth	r4, r3
 801392a:	482b      	ldr	r0, [pc, #172]	; (80139d8 <create_DijkstraMap+0x1a6c>)
 801392c:	4613      	mov	r3, r2
 801392e:	011b      	lsls	r3, r3, #4
 8013930:	1a9b      	subs	r3, r3, r2
 8013932:	440b      	add	r3, r1
 8013934:	4622      	mov	r2, r4
 8013936:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 801393a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801393e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013942:	881b      	ldrh	r3, [r3, #0]
 8013944:	3301      	adds	r3, #1
 8013946:	b29a      	uxth	r2, r3
 8013948:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801394c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f001 fdf4 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8013958:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801395c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	3b01      	subs	r3, #1
 8013964:	b29a      	uxth	r2, r3
 8013966:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801396a:	f103 0320 	add.w	r3, r3, #32
 801396e:	3b0c      	subs	r3, #12
 8013970:	4611      	mov	r1, r2
 8013972:	4618      	mov	r0, r3
 8013974:	f001 fde4 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013978:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801397c:	3b14      	subs	r3, #20
 801397e:	2100      	movs	r1, #0
 8013980:	4618      	mov	r0, r3
 8013982:	f001 fddd 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8013986:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801398a:	3b3c      	subs	r3, #60	; 0x3c
 801398c:	2103      	movs	r1, #3
 801398e:	4618      	mov	r0, r3
 8013990:	f001 fdd6 	bl	8015540 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013994:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013998:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801399c:	881a      	ldrh	r2, [r3, #0]
 801399e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80139a2:	3b64      	subs	r3, #100	; 0x64
 80139a4:	4611      	mov	r1, r2
 80139a6:	4618      	mov	r0, r3
 80139a8:	f001 fdca 	bl	8015540 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 80139ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139b0:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 80139b4:	881b      	ldrh	r3, [r3, #0]
 80139b6:	3301      	adds	r3, #1
 80139b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80139bc:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80139c0:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80139c2:	f7fe bc1f 	b.w	8012204 <create_DijkstraMap+0x298>

		}



}
 80139c6:	bf00      	nop
 80139c8:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 80139cc:	3704      	adds	r7, #4
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd90      	pop	{r4, r7, pc}
 80139d2:	bf00      	nop
 80139d4:	20001010 	.word	0x20001010
 80139d8:	200013f4 	.word	0x200013f4

080139dc <route_Dijkstra>:





void route_Dijkstra(void){
 80139dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139de:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 80139e2:	b089      	sub	sp, #36	; 0x24
 80139e4:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 80139e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139ea:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80139ee:	4618      	mov	r0, r3
 80139f0:	f001 fd96 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_y);
 80139f4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80139f8:	f103 0310 	add.w	r3, r3, #16
 80139fc:	3b1c      	subs	r3, #28
 80139fe:	4618      	mov	r0, r3
 8013a00:	f001 fd8e 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_matrix);
 8013a04:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013a08:	f103 0310 	add.w	r3, r3, #16
 8013a0c:	3b04      	subs	r3, #4
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fd86 	bl	8015520 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013a14:	48be      	ldr	r0, [pc, #760]	; (8013d10 <route_Dijkstra+0x334>)
 8013a16:	f001 fd83 	bl	8015520 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8013a1a:	48be      	ldr	r0, [pc, #760]	; (8013d14 <route_Dijkstra+0x338>)
 8013a1c:	f001 fd80 	bl	8015520 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013a20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a24:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013a28:	2100      	movs	r1, #0
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f001 fd88 	bl	8015540 <pushStack_walk>
 8013a30:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013a34:	f103 0310 	add.w	r3, r3, #16
 8013a38:	3b1c      	subs	r3, #28
 8013a3a:	2100      	movs	r1, #0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f001 fd7f 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);
 8013a42:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013a46:	f103 0310 	add.w	r3, r3, #16
 8013a4a:	3b04      	subs	r3, #4
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f001 fd76 	bl	8015540 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int xd = 0;
 8013a54:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a58:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	601a      	str	r2, [r3, #0]
	int yd = 0;
 8013a60:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a64:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013a68:	2200      	movs	r2, #0
 8013a6a:	601a      	str	r2, [r3, #0]
	int direction_d = 1;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013a72:	f102 020c 	add.w	r2, r2, #12
 8013a76:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&xd,&yd,direction_d);
 8013a78:	f107 0110 	add.w	r1, r7, #16
 8013a7c:	390c      	subs	r1, #12
 8013a7e:	f107 0310 	add.w	r3, r7, #16
 8013a82:	3b08      	subs	r3, #8
 8013a84:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013a88:	f102 020c 	add.w	r2, r2, #12
 8013a8c:	6812      	ldr	r2, [r2, #0]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7fa ffda 	bl	800ea48 <update_coordinate>

		if((xd == GOAL_X || xd == GOAL_X+1) && (yd == GOAL_Y || yd == GOAL_Y+1)){
 8013a94:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a98:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b02      	cmp	r3, #2
 8013aa0:	d006      	beq.n	8013ab0 <route_Dijkstra+0xd4>
 8013aa2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013aa6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b03      	cmp	r3, #3
 8013aae:	d10f      	bne.n	8013ad0 <route_Dijkstra+0xf4>
 8013ab0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ab4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f000 8331 	beq.w	8014122 <route_Dijkstra+0x746>
 8013ac0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ac4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	f000 8329 	beq.w	8014122 <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,xd,yd,direction_d);
 8013ad0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ad4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013ad8:	6819      	ldr	r1, [r3, #0]
 8013ada:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ade:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ae2:	681c      	ldr	r4, [r3, #0]
 8013ae4:	f107 0310 	add.w	r3, r7, #16
 8013ae8:	3b04      	subs	r3, #4
 8013aea:	f107 0210 	add.w	r2, r7, #16
 8013aee:	3a02      	subs	r2, #2
 8013af0:	f107 0610 	add.w	r6, r7, #16
 8013af4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013af8:	387e      	subs	r0, #126	; 0x7e
 8013afa:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8013afe:	f105 050c 	add.w	r5, r5, #12
 8013b02:	682d      	ldr	r5, [r5, #0]
 8013b04:	9502      	str	r5, [sp, #8]
 8013b06:	9401      	str	r4, [sp, #4]
 8013b08:	9100      	str	r1, [sp, #0]
 8013b0a:	4631      	mov	r1, r6
 8013b0c:	f7fe f994 	bl	8011e38 <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013b10:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b14:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b18:	881b      	ldrh	r3, [r3, #0]
 8013b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	d11b      	bne.n	8013b5a <route_Dijkstra+0x17e>
 8013b22:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b26:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d112      	bne.n	8013b5a <route_Dijkstra+0x17e>
 8013b34:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b38:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013b3c:	881b      	ldrh	r3, [r3, #0]
 8013b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d109      	bne.n	8013b5a <route_Dijkstra+0x17e>
 8013b46:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b4a:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b54:	4293      	cmp	r3, r2
 8013b56:	f000 82e3 	beq.w	8014120 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013b5a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b5e:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b62:	881a      	ldrh	r2, [r3, #0]
 8013b64:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b68:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013b6c:	881b      	ldrh	r3, [r3, #0]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	f200 80d2 	bhi.w	8013d18 <route_Dijkstra+0x33c>
 8013b74:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b78:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b7c:	881a      	ldrh	r2, [r3, #0]
 8013b7e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b82:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	f200 80c5 	bhi.w	8013d18 <route_Dijkstra+0x33c>
 8013b8e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b92:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b96:	881a      	ldrh	r2, [r3, #0]
 8013b98:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b9c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013ba0:	881b      	ldrh	r3, [r3, #0]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	f200 80b8 	bhi.w	8013d18 <route_Dijkstra+0x33c>
			// 直進
			switch (direction_d) {		//
 8013ba8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013bac:	f103 030c 	add.w	r3, r3, #12
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	2b03      	cmp	r3, #3
 8013bb6:	f200 80b0 	bhi.w	8013d1a <route_Dijkstra+0x33e>
 8013bba:	a201      	add	r2, pc, #4	; (adr r2, 8013bc0 <route_Dijkstra+0x1e4>)
 8013bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc0:	08013bd1 	.word	0x08013bd1
 8013bc4:	08013c1f 	.word	0x08013c1f
 8013bc8:	08013c6d 	.word	0x08013c6d
 8013bcc:	08013cbf 	.word	0x08013cbf
			case 1:
				pushStack_walk(&stack_x,xd);
 8013bd0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bd4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013be0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013be4:	4611      	mov	r1, r2
 8013be6:	4618      	mov	r0, r3
 8013be8:	f001 fcaa 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013bec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bf0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013bfc:	f103 0310 	add.w	r3, r3, #16
 8013c00:	3b1c      	subs	r3, #28
 8013c02:	4611      	mov	r1, r2
 8013c04:	4618      	mov	r0, r3
 8013c06:	f001 fc9b 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013c0a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c0e:	f103 0310 	add.w	r3, r3, #16
 8013c12:	3b04      	subs	r3, #4
 8013c14:	2100      	movs	r1, #0
 8013c16:	4618      	mov	r0, r3
 8013c18:	f001 fc92 	bl	8015540 <pushStack_walk>
				break;
 8013c1c:	e07d      	b.n	8013d1a <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013c1e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c22:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	b29a      	uxth	r2, r3
 8013c2a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c2e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c32:	4611      	mov	r1, r2
 8013c34:	4618      	mov	r0, r3
 8013c36:	f001 fc83 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013c3a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c3e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c4a:	f103 0310 	add.w	r3, r3, #16
 8013c4e:	3b1c      	subs	r3, #28
 8013c50:	4611      	mov	r1, r2
 8013c52:	4618      	mov	r0, r3
 8013c54:	f001 fc74 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013c58:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c5c:	f103 0310 	add.w	r3, r3, #16
 8013c60:	3b04      	subs	r3, #4
 8013c62:	2101      	movs	r1, #1
 8013c64:	4618      	mov	r0, r3
 8013c66:	f001 fc6b 	bl	8015540 <pushStack_walk>
				break;
 8013c6a:	e056      	b.n	8013d1a <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,xd);
 8013c6c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c70:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c7c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c80:	4611      	mov	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f001 fc5c 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013c88:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c8c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	3b01      	subs	r3, #1
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c9c:	f103 0310 	add.w	r3, r3, #16
 8013ca0:	3b1c      	subs	r3, #28
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f001 fc4b 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013caa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013cae:	f103 0310 	add.w	r3, r3, #16
 8013cb2:	3b04      	subs	r3, #4
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f001 fc42 	bl	8015540 <pushStack_walk>
				break;
 8013cbc:	e02d      	b.n	8013d1a <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,xd-1);
 8013cbe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013cc2:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013cd2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f001 fc31 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013cde:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ce2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013cee:	f103 0310 	add.w	r3, r3, #16
 8013cf2:	3b1c      	subs	r3, #28
 8013cf4:	4611      	mov	r1, r2
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f001 fc22 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013cfc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013d00:	f103 0310 	add.w	r3, r3, #16
 8013d04:	3b04      	subs	r3, #4
 8013d06:	2101      	movs	r1, #1
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f001 fc19 	bl	8015540 <pushStack_walk>
				break;
 8013d0e:	e004      	b.n	8013d1a <route_Dijkstra+0x33e>
 8013d10:	200017b4 	.word	0x200017b4
 8013d14:	2000275c 	.word	0x2000275c
			}

		}
 8013d18:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013d1a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d1e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d22:	881a      	ldrh	r2, [r3, #0]
 8013d24:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d28:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	f080 80d9 	bcs.w	8013ee6 <route_Dijkstra+0x50a>
 8013d34:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d38:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d3c:	881a      	ldrh	r2, [r3, #0]
 8013d3e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d42:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	f200 80cc 	bhi.w	8013ee6 <route_Dijkstra+0x50a>
 8013d4e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d52:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d56:	881a      	ldrh	r2, [r3, #0]
 8013d58:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d5c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013d60:	881b      	ldrh	r3, [r3, #0]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	f200 80bf 	bhi.w	8013ee6 <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction_d) {		//
 8013d68:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013d6c:	f103 030c 	add.w	r3, r3, #12
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	3b01      	subs	r3, #1
 8013d74:	2b03      	cmp	r3, #3
 8013d76:	f200 80ab 	bhi.w	8013ed0 <route_Dijkstra+0x4f4>
 8013d7a:	a201      	add	r2, pc, #4	; (adr r2, 8013d80 <route_Dijkstra+0x3a4>)
 8013d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d80:	08013d91 	.word	0x08013d91
 8013d84:	08013ddf 	.word	0x08013ddf
 8013d88:	08013e31 	.word	0x08013e31
 8013d8c:	08013e83 	.word	0x08013e83
			case 1:
				pushStack_walk(&stack_x,xd);
 8013d90:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d94:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013da0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013da4:	4611      	mov	r1, r2
 8013da6:	4618      	mov	r0, r3
 8013da8:	f001 fbca 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013dac:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013db0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013dbc:	f103 0310 	add.w	r3, r3, #16
 8013dc0:	3b1c      	subs	r3, #28
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f001 fbbb 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013dca:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013dce:	f103 0310 	add.w	r3, r3, #16
 8013dd2:	3b04      	subs	r3, #4
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f001 fbb2 	bl	8015540 <pushStack_walk>
				break;
 8013ddc:	e078      	b.n	8013ed0 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013dde:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013de2:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013dee:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013df2:	4611      	mov	r1, r2
 8013df4:	4618      	mov	r0, r3
 8013df6:	f001 fba3 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013dfa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013dfe:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	3b01      	subs	r3, #1
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e0e:	f103 0310 	add.w	r3, r3, #16
 8013e12:	3b1c      	subs	r3, #28
 8013e14:	4611      	mov	r1, r2
 8013e16:	4618      	mov	r0, r3
 8013e18:	f001 fb92 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013e1c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e20:	f103 0310 	add.w	r3, r3, #16
 8013e24:	3b04      	subs	r3, #4
 8013e26:	2100      	movs	r1, #0
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f001 fb89 	bl	8015540 <pushStack_walk>
				break;
 8013e2e:	e04f      	b.n	8013ed0 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,xd-1);
 8013e30:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e34:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e44:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e48:	4611      	mov	r1, r2
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f001 fb78 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013e50:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e54:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e60:	f103 0310 	add.w	r3, r3, #16
 8013e64:	3b1c      	subs	r3, #28
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f001 fb69 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013e6e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e72:	f103 0310 	add.w	r3, r3, #16
 8013e76:	3b04      	subs	r3, #4
 8013e78:	2101      	movs	r1, #1
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f001 fb60 	bl	8015540 <pushStack_walk>
				break;
 8013e80:	e026      	b.n	8013ed0 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,xd);
 8013e82:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e86:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e92:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e96:	4611      	mov	r1, r2
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f001 fb51 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013e9e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ea2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013eae:	f103 0310 	add.w	r3, r3, #16
 8013eb2:	3b1c      	subs	r3, #28
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f001 fb42 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013ebc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013ec0:	f103 0310 	add.w	r3, r3, #16
 8013ec4:	3b04      	subs	r3, #4
 8013ec6:	2100      	movs	r1, #0
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f001 fb39 	bl	8015540 <pushStack_walk>
				break;
 8013ece:	bf00      	nop
			}
			direction_d++;
 8013ed0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ed4:	f103 030c 	add.w	r3, r3, #12
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	3301      	adds	r3, #1
 8013edc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013ee0:	f102 020c 	add.w	r2, r2, #12
 8013ee4:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013ee6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013eea:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013eee:	881a      	ldrh	r2, [r3, #0]
 8013ef0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ef4:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013ef8:	881b      	ldrh	r3, [r3, #0]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	f080 80d9 	bcs.w	80140b2 <route_Dijkstra+0x6d6>
 8013f00:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f04:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013f08:	881a      	ldrh	r2, [r3, #0]
 8013f0a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f0e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	f080 80cc 	bcs.w	80140b2 <route_Dijkstra+0x6d6>
 8013f1a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f1e:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013f22:	881a      	ldrh	r2, [r3, #0]
 8013f24:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f28:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	f200 80bf 	bhi.w	80140b2 <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction_d) {		//
 8013f34:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013f38:	f103 030c 	add.w	r3, r3, #12
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	2b03      	cmp	r3, #3
 8013f42:	f200 80ab 	bhi.w	801409c <route_Dijkstra+0x6c0>
 8013f46:	a201      	add	r2, pc, #4	; (adr r2, 8013f4c <route_Dijkstra+0x570>)
 8013f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f4c:	08013f5d 	.word	0x08013f5d
 8013f50:	08013faf 	.word	0x08013faf
 8013f54:	08013ffd 	.word	0x08013ffd
 8013f58:	0801404b 	.word	0x0801404b
			case 1:
				pushStack_walk(&stack_x,xd-1);
 8013f5c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f60:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	b29a      	uxth	r2, r3
 8013f6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f70:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013f74:	4611      	mov	r1, r2
 8013f76:	4618      	mov	r0, r3
 8013f78:	f001 fae2 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013f7c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f80:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	b29a      	uxth	r2, r3
 8013f88:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013f8c:	f103 0310 	add.w	r3, r3, #16
 8013f90:	3b1c      	subs	r3, #28
 8013f92:	4611      	mov	r1, r2
 8013f94:	4618      	mov	r0, r3
 8013f96:	f001 fad3 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013f9a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013f9e:	f103 0310 	add.w	r3, r3, #16
 8013fa2:	3b04      	subs	r3, #4
 8013fa4:	2101      	movs	r1, #1
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f001 faca 	bl	8015540 <pushStack_walk>
				break;
 8013fac:	e076      	b.n	801409c <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013fae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fb2:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013fbe:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f001 fabb 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013fca:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fce:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013fda:	f103 0310 	add.w	r3, r3, #16
 8013fde:	3b1c      	subs	r3, #28
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f001 faac 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013fe8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013fec:	f103 0310 	add.w	r3, r3, #16
 8013ff0:	3b04      	subs	r3, #4
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f001 faa3 	bl	8015540 <pushStack_walk>
				break;
 8013ffa:	e04f      	b.n	801409c <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,xd);
 8013ffc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014000:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	b29a      	uxth	r2, r3
 8014008:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801400c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014010:	4611      	mov	r1, r2
 8014012:	4618      	mov	r0, r3
 8014014:	f001 fa94 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8014018:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801401c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	b29a      	uxth	r2, r3
 8014024:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014028:	f103 0310 	add.w	r3, r3, #16
 801402c:	3b1c      	subs	r3, #28
 801402e:	4611      	mov	r1, r2
 8014030:	4618      	mov	r0, r3
 8014032:	f001 fa85 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8014036:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801403a:	f103 0310 	add.w	r3, r3, #16
 801403e:	3b04      	subs	r3, #4
 8014040:	2101      	movs	r1, #1
 8014042:	4618      	mov	r0, r3
 8014044:	f001 fa7c 	bl	8015540 <pushStack_walk>
				break;
 8014048:	e028      	b.n	801409c <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,xd);
 801404a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801404e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	b29a      	uxth	r2, r3
 8014056:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801405a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801405e:	4611      	mov	r1, r2
 8014060:	4618      	mov	r0, r3
 8014062:	f001 fa6d 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8014066:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801406a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	b29b      	uxth	r3, r3
 8014072:	3b01      	subs	r3, #1
 8014074:	b29a      	uxth	r2, r3
 8014076:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801407a:	f103 0310 	add.w	r3, r3, #16
 801407e:	3b1c      	subs	r3, #28
 8014080:	4611      	mov	r1, r2
 8014082:	4618      	mov	r0, r3
 8014084:	f001 fa5c 	bl	8015540 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8014088:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801408c:	f103 0310 	add.w	r3, r3, #16
 8014090:	3b04      	subs	r3, #4
 8014092:	2100      	movs	r1, #0
 8014094:	4618      	mov	r0, r3
 8014096:	f001 fa53 	bl	8015540 <pushStack_walk>
				break;
 801409a:	bf00      	nop
			}
			direction_d--;
 801409c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140a0:	f103 030c 	add.w	r3, r3, #12
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	3b01      	subs	r3, #1
 80140a8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140ac:	f102 020c 	add.w	r2, r2, #12
 80140b0:	6013      	str	r3, [r2, #0]
		}

		if (direction_d == 5) {
 80140b2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140b6:	f103 030c 	add.w	r3, r3, #12
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b05      	cmp	r3, #5
 80140be:	d105      	bne.n	80140cc <route_Dijkstra+0x6f0>
			direction_d = 1;
 80140c0:	2301      	movs	r3, #1
 80140c2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140c6:	f102 020c 	add.w	r2, r2, #12
 80140ca:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 6) {
 80140cc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140d0:	f103 030c 	add.w	r3, r3, #12
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	2b06      	cmp	r3, #6
 80140d8:	d105      	bne.n	80140e6 <route_Dijkstra+0x70a>
			direction_d = 2;
 80140da:	2302      	movs	r3, #2
 80140dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140e0:	f102 020c 	add.w	r2, r2, #12
 80140e4:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 0) {
 80140e6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140ea:	f103 030c 	add.w	r3, r3, #12
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d105      	bne.n	8014100 <route_Dijkstra+0x724>
			direction_d = 4;
 80140f4:	2304      	movs	r3, #4
 80140f6:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140fa:	f102 020c 	add.w	r2, r2, #12
 80140fe:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == -1) {
 8014100:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014104:	f103 030c 	add.w	r3, r3, #12
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801410e:	f47f acb3 	bne.w	8013a78 <route_Dijkstra+0x9c>
			direction_d = 3;
 8014112:	2303      	movs	r3, #3
 8014114:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014118:	f102 020c 	add.w	r2, r2, #12
 801411c:	6013      	str	r3, [r2, #0]
		update_coordinate(&xd,&yd,direction_d);
 801411e:	e4ab      	b.n	8013a78 <route_Dijkstra+0x9c>
			break;
 8014120:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8014122:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014126:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801412a:	4618      	mov	r0, r3
 801412c:	f001 fa32 	bl	8015594 <popStack_walk>
 8014130:	4603      	mov	r3, r0
 8014132:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014136:	f102 020a 	add.w	r2, r2, #10
 801413a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801413c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014140:	f103 0310 	add.w	r3, r3, #16
 8014144:	3b1c      	subs	r3, #28
 8014146:	4618      	mov	r0, r3
 8014148:	f001 fa24 	bl	8015594 <popStack_walk>
 801414c:	4603      	mov	r3, r0
 801414e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014152:	f102 0208 	add.w	r2, r2, #8
 8014156:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8014158:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801415c:	f103 0310 	add.w	r3, r3, #16
 8014160:	3b04      	subs	r3, #4
 8014162:	4618      	mov	r0, r3
 8014164:	f001 fa16 	bl	8015594 <popStack_walk>
 8014168:	4603      	mov	r3, r0
 801416a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801416e:	f102 0206 	add.w	r2, r2, #6
 8014172:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014174:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014178:	f103 030a 	add.w	r3, r3, #10
 801417c:	881b      	ldrh	r3, [r3, #0]
 801417e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014182:	4293      	cmp	r3, r2
 8014184:	f000 80d2 	beq.w	801432c <route_Dijkstra+0x950>
 8014188:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801418c:	f103 0308 	add.w	r3, r3, #8
 8014190:	881b      	ldrh	r3, [r3, #0]
 8014192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014196:	4293      	cmp	r3, r2
 8014198:	f000 80c8 	beq.w	801432c <route_Dijkstra+0x950>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==ROW && ((wall.row_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 801419c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141a0:	f103 0306 	add.w	r3, r3, #6
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d15a      	bne.n	8014260 <route_Dijkstra+0x884>
 80141aa:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141ae:	f103 0308 	add.w	r3, r3, #8
 80141b2:	881b      	ldrh	r3, [r3, #0]
 80141b4:	4a60      	ldr	r2, [pc, #384]	; (8014338 <route_Dijkstra+0x95c>)
 80141b6:	331e      	adds	r3, #30
 80141b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141bc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80141c0:	f102 020a 	add.w	r2, r2, #10
 80141c4:	8812      	ldrh	r2, [r2, #0]
 80141c6:	2101      	movs	r1, #1
 80141c8:	fa01 f202 	lsl.w	r2, r1, r2
 80141cc:	4013      	ands	r3, r2
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d146      	bne.n	8014260 <route_Dijkstra+0x884>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80141d2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141d6:	f103 030a 	add.w	r3, r3, #10
 80141da:	881a      	ldrh	r2, [r3, #0]
 80141dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141e0:	f103 0308 	add.w	r3, r3, #8
 80141e4:	881b      	ldrh	r3, [r3, #0]
 80141e6:	4955      	ldr	r1, [pc, #340]	; (801433c <route_Dijkstra+0x960>)
 80141e8:	0112      	lsls	r2, r2, #4
 80141ea:	4413      	add	r3, r2
 80141ec:	2200      	movs	r2, #0
 80141ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80141f2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141f6:	f103 030a 	add.w	r3, r3, #10
 80141fa:	881a      	ldrh	r2, [r3, #0]
 80141fc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014200:	f103 0308 	add.w	r3, r3, #8
 8014204:	881b      	ldrh	r3, [r3, #0]
 8014206:	3301      	adds	r3, #1
 8014208:	494c      	ldr	r1, [pc, #304]	; (801433c <route_Dijkstra+0x960>)
 801420a:	0112      	lsls	r2, r2, #4
 801420c:	4413      	add	r3, r2
 801420e:	2200      	movs	r2, #0
 8014210:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8014214:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014218:	f103 030a 	add.w	r3, r3, #10
 801421c:	881b      	ldrh	r3, [r3, #0]
 801421e:	4619      	mov	r1, r3
 8014220:	4847      	ldr	r0, [pc, #284]	; (8014340 <route_Dijkstra+0x964>)
 8014222:	f001 f98d 	bl	8015540 <pushStack_walk>
 8014226:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801422a:	f103 0308 	add.w	r3, r3, #8
 801422e:	881b      	ldrh	r3, [r3, #0]
 8014230:	4619      	mov	r1, r3
 8014232:	4844      	ldr	r0, [pc, #272]	; (8014344 <route_Dijkstra+0x968>)
 8014234:	f001 f984 	bl	8015540 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8014238:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801423c:	f103 030a 	add.w	r3, r3, #10
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	4619      	mov	r1, r3
 8014244:	483e      	ldr	r0, [pc, #248]	; (8014340 <route_Dijkstra+0x964>)
 8014246:	f001 f97b 	bl	8015540 <pushStack_walk>
 801424a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801424e:	f103 0308 	add.w	r3, r3, #8
 8014252:	881b      	ldrh	r3, [r3, #0]
 8014254:	3301      	adds	r3, #1
 8014256:	b29b      	uxth	r3, r3
 8014258:	4619      	mov	r1, r3
 801425a:	483a      	ldr	r0, [pc, #232]	; (8014344 <route_Dijkstra+0x968>)
 801425c:	f001 f970 	bl	8015540 <pushStack_walk>
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8014260:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014264:	f103 0306 	add.w	r3, r3, #6
 8014268:	881b      	ldrh	r3, [r3, #0]
 801426a:	2b01      	cmp	r3, #1
 801426c:	f47f af59 	bne.w	8014122 <route_Dijkstra+0x746>
 8014270:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014274:	f103 030a 	add.w	r3, r3, #10
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	4a2f      	ldr	r2, [pc, #188]	; (8014338 <route_Dijkstra+0x95c>)
 801427c:	332c      	adds	r3, #44	; 0x2c
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	4413      	add	r3, r2
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014288:	f102 0208 	add.w	r2, r2, #8
 801428c:	8812      	ldrh	r2, [r2, #0]
 801428e:	2101      	movs	r1, #1
 8014290:	fa01 f202 	lsl.w	r2, r1, r2
 8014294:	4013      	ands	r3, r2
 8014296:	2b00      	cmp	r3, #0
 8014298:	f47f af43 	bne.w	8014122 <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801429c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142a0:	f103 030a 	add.w	r3, r3, #10
 80142a4:	881a      	ldrh	r2, [r3, #0]
 80142a6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142aa:	f103 0308 	add.w	r3, r3, #8
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	4922      	ldr	r1, [pc, #136]	; (801433c <route_Dijkstra+0x960>)
 80142b2:	0112      	lsls	r2, r2, #4
 80142b4:	4413      	add	r3, r2
 80142b6:	2200      	movs	r2, #0
 80142b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 80142bc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142c0:	f103 030a 	add.w	r3, r3, #10
 80142c4:	881b      	ldrh	r3, [r3, #0]
 80142c6:	1c5a      	adds	r2, r3, #1
 80142c8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142cc:	f103 0308 	add.w	r3, r3, #8
 80142d0:	881b      	ldrh	r3, [r3, #0]
 80142d2:	491a      	ldr	r1, [pc, #104]	; (801433c <route_Dijkstra+0x960>)
 80142d4:	0112      	lsls	r2, r2, #4
 80142d6:	4413      	add	r3, r2
 80142d8:	2200      	movs	r2, #0
 80142da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80142de:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142e2:	f103 030a 	add.w	r3, r3, #10
 80142e6:	881b      	ldrh	r3, [r3, #0]
 80142e8:	4619      	mov	r1, r3
 80142ea:	4815      	ldr	r0, [pc, #84]	; (8014340 <route_Dijkstra+0x964>)
 80142ec:	f001 f928 	bl	8015540 <pushStack_walk>
 80142f0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142f4:	f103 0308 	add.w	r3, r3, #8
 80142f8:	881b      	ldrh	r3, [r3, #0]
 80142fa:	4619      	mov	r1, r3
 80142fc:	4811      	ldr	r0, [pc, #68]	; (8014344 <route_Dijkstra+0x968>)
 80142fe:	f001 f91f 	bl	8015540 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8014302:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014306:	f103 030a 	add.w	r3, r3, #10
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	3301      	adds	r3, #1
 801430e:	b29b      	uxth	r3, r3
 8014310:	4619      	mov	r1, r3
 8014312:	480b      	ldr	r0, [pc, #44]	; (8014340 <route_Dijkstra+0x964>)
 8014314:	f001 f914 	bl	8015540 <pushStack_walk>
 8014318:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801431c:	f103 0308 	add.w	r3, r3, #8
 8014320:	881b      	ldrh	r3, [r3, #0]
 8014322:	4619      	mov	r1, r3
 8014324:	4807      	ldr	r0, [pc, #28]	; (8014344 <route_Dijkstra+0x968>)
 8014326:	f001 f90b 	bl	8015540 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 801432a:	e6fa      	b.n	8014122 <route_Dijkstra+0x746>
			}
	}


}
 801432c:	bf00      	nop
 801432e:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8014332:	3714      	adds	r7, #20
 8014334:	46bd      	mov	sp, r7
 8014336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014338:	20001010 	.word	0x20001010
 801433c:	200011f4 	.word	0x200011f4
 8014340:	200017b4 	.word	0x200017b4
 8014344:	2000275c 	.word	0x2000275c

08014348 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8014348:	b580      	push	{r7, lr}
 801434a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014352:	2300      	movs	r3, #0
 8014354:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014358:	f102 0207 	add.w	r2, r2, #7
 801435c:	7013      	strb	r3, [r2, #0]
 801435e:	e033      	b.n	80143c8 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014360:	2300      	movs	r3, #0
 8014362:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014366:	f102 0206 	add.w	r2, r2, #6
 801436a:	7013      	strb	r3, [r2, #0]
 801436c:	e01a      	b.n	80143a4 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 801436e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014372:	f103 0307 	add.w	r3, r3, #7
 8014376:	781a      	ldrb	r2, [r3, #0]
 8014378:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801437c:	f103 0306 	add.w	r3, r3, #6
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	4966      	ldr	r1, [pc, #408]	; (801451c <create_StepCountMap_unknown+0x1d4>)
 8014384:	0112      	lsls	r2, r2, #4
 8014386:	4413      	add	r3, r2
 8014388:	22ff      	movs	r2, #255	; 0xff
 801438a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 801438e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014392:	f103 0306 	add.w	r3, r3, #6
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	3301      	adds	r3, #1
 801439a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801439e:	f102 0206 	add.w	r2, r2, #6
 80143a2:	7013      	strb	r3, [r2, #0]
 80143a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143a8:	f103 0306 	add.w	r3, r3, #6
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b0f      	cmp	r3, #15
 80143b0:	d9dd      	bls.n	801436e <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80143b2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143b6:	f103 0307 	add.w	r3, r3, #7
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	3301      	adds	r3, #1
 80143be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80143c2:	f102 0207 	add.w	r2, r2, #7
 80143c6:	7013      	strb	r3, [r2, #0]
 80143c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80143cc:	f103 0307 	add.w	r3, r3, #7
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	2b0f      	cmp	r3, #15
 80143d4:	d9c4      	bls.n	8014360 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 80143d6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80143da:	4618      	mov	r0, r3
 80143dc:	f001 f8a0 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_y);
 80143e0:	f107 0308 	add.w	r3, r7, #8
 80143e4:	3b04      	subs	r3, #4
 80143e6:	4618      	mov	r0, r3
 80143e8:	f001 f89a 	bl	8015520 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 80143ec:	484c      	ldr	r0, [pc, #304]	; (8014520 <create_StepCountMap_unknown+0x1d8>)
 80143ee:	f001 f8d1 	bl	8015594 <popStack_walk>
 80143f2:	4603      	mov	r3, r0
 80143f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143f8:	f102 021a 	add.w	r2, r2, #26
 80143fc:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 80143fe:	4849      	ldr	r0, [pc, #292]	; (8014524 <create_StepCountMap_unknown+0x1dc>)
 8014400:	f001 f8c8 	bl	8015594 <popStack_walk>
 8014404:	4603      	mov	r3, r0
 8014406:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801440a:	f102 0218 	add.w	r2, r2, #24
 801440e:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == MAX_WALKCOUNT_DIJKSTRA || goalY == MAX_WALKCOUNT_DIJKSTRA) {
 8014410:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014414:	f103 031a 	add.w	r3, r3, #26
 8014418:	881b      	ldrh	r3, [r3, #0]
 801441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801441e:	4293      	cmp	r3, r2
 8014420:	d030      	beq.n	8014484 <create_StepCountMap_unknown+0x13c>
 8014422:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014426:	f103 0318 	add.w	r3, r3, #24
 801442a:	881b      	ldrh	r3, [r3, #0]
 801442c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014430:	4293      	cmp	r3, r2
 8014432:	d027      	beq.n	8014484 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8014434:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014438:	f103 031a 	add.w	r3, r3, #26
 801443c:	881a      	ldrh	r2, [r3, #0]
 801443e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014442:	f103 0318 	add.w	r3, r3, #24
 8014446:	881b      	ldrh	r3, [r3, #0]
 8014448:	4934      	ldr	r1, [pc, #208]	; (801451c <create_StepCountMap_unknown+0x1d4>)
 801444a:	0112      	lsls	r2, r2, #4
 801444c:	4413      	add	r3, r2
 801444e:	2200      	movs	r2, #0
 8014450:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8014454:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014458:	f103 031a 	add.w	r3, r3, #26
 801445c:	881a      	ldrh	r2, [r3, #0]
 801445e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014462:	4611      	mov	r1, r2
 8014464:	4618      	mov	r0, r3
 8014466:	f001 f86b 	bl	8015540 <pushStack_walk>
 801446a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801446e:	f103 0318 	add.w	r3, r3, #24
 8014472:	881a      	ldrh	r2, [r3, #0]
 8014474:	f107 0308 	add.w	r3, r7, #8
 8014478:	3b04      	subs	r3, #4
 801447a:	4611      	mov	r1, r2
 801447c:	4618      	mov	r0, r3
 801447e:	f001 f85f 	bl	8015540 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8014482:	e7b3      	b.n	80143ec <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8014484:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014488:	f103 0308 	add.w	r3, r3, #8
 801448c:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8014490:	685a      	ldr	r2, [r3, #4]
 8014492:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014496:	f103 0308 	add.w	r3, r3, #8
 801449a:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d11b      	bne.n	80144dc <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 80144a4:	4b1d      	ldr	r3, [pc, #116]	; (801451c <create_StepCountMap_unknown+0x1d4>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80144aa:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80144ae:	2100      	movs	r1, #0
 80144b0:	4618      	mov	r0, r3
 80144b2:	f001 f845 	bl	8015540 <pushStack_walk>
 80144b6:	f107 0308 	add.w	r3, r7, #8
 80144ba:	3b04      	subs	r3, #4
 80144bc:	2100      	movs	r1, #0
 80144be:	4618      	mov	r0, r3
 80144c0:	f001 f83e 	bl	8015540 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 80144c4:	4b18      	ldr	r3, [pc, #96]	; (8014528 <create_StepCountMap_unknown+0x1e0>)
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d003      	beq.n	80144d4 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 80144cc:	4b16      	ldr	r3, [pc, #88]	; (8014528 <create_StepCountMap_unknown+0x1e0>)
 80144ce:	2202      	movs	r2, #2
 80144d0:	701a      	strb	r2, [r3, #0]
 80144d2:	e006      	b.n	80144e2 <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 80144d4:	4b14      	ldr	r3, [pc, #80]	; (8014528 <create_StepCountMap_unknown+0x1e0>)
 80144d6:	2201      	movs	r2, #1
 80144d8:	701a      	strb	r2, [r3, #0]
 80144da:	e002      	b.n	80144e2 <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 80144dc:	4b12      	ldr	r3, [pc, #72]	; (8014528 <create_StepCountMap_unknown+0x1e0>)
 80144de:	2200      	movs	r2, #0
 80144e0:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80144e2:	2301      	movs	r3, #1
 80144e4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144e8:	f102 0204 	add.w	r2, r2, #4
 80144ec:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80144ee:	2301      	movs	r3, #1
 80144f0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144f4:	f102 0202 	add.w	r2, r2, #2
 80144f8:	8013      	strh	r3, [r2, #0]
 80144fa:	2301      	movs	r3, #1
 80144fc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014500:	8013      	strh	r3, [r2, #0]
 8014502:	2301      	movs	r3, #1
 8014504:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014508:	f102 021e 	add.w	r2, r2, #30
 801450c:	8013      	strh	r3, [r2, #0]
 801450e:	2301      	movs	r3, #1
 8014510:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014514:	f102 021c 	add.w	r2, r2, #28
 8014518:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801451a:	e237      	b.n	801498c <create_StepCountMap_unknown+0x644>
 801451c:	200011f4 	.word	0x200011f4
 8014520:	200017b4 	.word	0x200017b4
 8014524:	2000275c 	.word	0x2000275c
 8014528:	200011f0 	.word	0x200011f0

		Xcoordinate = popStack_walk(&stack_x);
 801452c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014530:	4618      	mov	r0, r3
 8014532:	f001 f82f 	bl	8015594 <popStack_walk>
 8014536:	4603      	mov	r3, r0
 8014538:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801453c:	f102 0216 	add.w	r2, r2, #22
 8014540:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014542:	f107 0308 	add.w	r3, r7, #8
 8014546:	3b04      	subs	r3, #4
 8014548:	4618      	mov	r0, r3
 801454a:	f001 f823 	bl	8015594 <popStack_walk>
 801454e:	4603      	mov	r3, r0
 8014550:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014554:	f102 0214 	add.w	r2, r2, #20
 8014558:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 801455a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801455e:	f103 0316 	add.w	r3, r3, #22
 8014562:	881b      	ldrh	r3, [r3, #0]
 8014564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014568:	4293      	cmp	r3, r2
 801456a:	f000 8217 	beq.w	801499c <create_StepCountMap_unknown+0x654>
 801456e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014572:	f103 0314 	add.w	r3, r3, #20
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801457c:	4293      	cmp	r3, r2
 801457e:	f000 820d 	beq.w	801499c <create_StepCountMap_unknown+0x654>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014582:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014586:	f103 0314 	add.w	r3, r3, #20
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	2b0e      	cmp	r3, #14
 801458e:	d817      	bhi.n	80145c0 <create_StepCountMap_unknown+0x278>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8014590:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014594:	f103 0314 	add.w	r3, r3, #20
 8014598:	881b      	ldrh	r3, [r3, #0]
 801459a:	4acb      	ldr	r2, [pc, #812]	; (80148c8 <create_StepCountMap_unknown+0x580>)
 801459c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145a0:	b29a      	uxth	r2, r3
 80145a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a6:	f103 0316 	add.w	r3, r3, #22
 80145aa:	881b      	ldrh	r3, [r3, #0]
 80145ac:	2101      	movs	r1, #1
 80145ae:	fa01 f303 	lsl.w	r3, r1, r3
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	4013      	ands	r3, r2
 80145b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80145ba:	f102 0202 	add.w	r2, r2, #2
 80145be:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80145c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c4:	f103 0314 	add.w	r3, r3, #20
 80145c8:	881b      	ldrh	r3, [r3, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d016      	beq.n	80145fc <create_StepCountMap_unknown+0x2b4>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 80145ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145d2:	f103 0314 	add.w	r3, r3, #20
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	3b01      	subs	r3, #1
 80145da:	4abb      	ldr	r2, [pc, #748]	; (80148c8 <create_StepCountMap_unknown+0x580>)
 80145dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145e6:	f103 0316 	add.w	r3, r3, #22
 80145ea:	881b      	ldrh	r3, [r3, #0]
 80145ec:	2101      	movs	r1, #1
 80145ee:	fa01 f303 	lsl.w	r3, r1, r3
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	4013      	ands	r3, r2
 80145f6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80145fa:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80145fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014600:	f103 0316 	add.w	r3, r3, #22
 8014604:	881b      	ldrh	r3, [r3, #0]
 8014606:	2b0e      	cmp	r3, #14
 8014608:	d819      	bhi.n	801463e <create_StepCountMap_unknown+0x2f6>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 801460a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801460e:	f103 0316 	add.w	r3, r3, #22
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	4aac      	ldr	r2, [pc, #688]	; (80148c8 <create_StepCountMap_unknown+0x580>)
 8014616:	330e      	adds	r3, #14
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	4413      	add	r3, r2
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	b29a      	uxth	r2, r3
 8014620:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014624:	f103 0314 	add.w	r3, r3, #20
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	2101      	movs	r1, #1
 801462c:	fa01 f303 	lsl.w	r3, r1, r3
 8014630:	b29b      	uxth	r3, r3
 8014632:	4013      	ands	r3, r2
 8014634:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014638:	f102 021e 	add.w	r2, r2, #30
 801463c:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801463e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014642:	f103 0316 	add.w	r3, r3, #22
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d01a      	beq.n	8014682 <create_StepCountMap_unknown+0x33a>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 801464c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014650:	f103 0316 	add.w	r3, r3, #22
 8014654:	881b      	ldrh	r3, [r3, #0]
 8014656:	3b01      	subs	r3, #1
 8014658:	4a9b      	ldr	r2, [pc, #620]	; (80148c8 <create_StepCountMap_unknown+0x580>)
 801465a:	330e      	adds	r3, #14
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	b29a      	uxth	r2, r3
 8014664:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014668:	f103 0314 	add.w	r3, r3, #20
 801466c:	881b      	ldrh	r3, [r3, #0]
 801466e:	2101      	movs	r1, #1
 8014670:	fa01 f303 	lsl.w	r3, r1, r3
 8014674:	b29b      	uxth	r3, r3
 8014676:	4013      	ands	r3, r2
 8014678:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801467c:	f102 021c 	add.w	r2, r2, #28
 8014680:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8014682:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014686:	f103 0316 	add.w	r3, r3, #22
 801468a:	881a      	ldrh	r2, [r3, #0]
 801468c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014690:	f103 0314 	add.w	r3, r3, #20
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	3301      	adds	r3, #1
 8014698:	498c      	ldr	r1, [pc, #560]	; (80148cc <create_StepCountMap_unknown+0x584>)
 801469a:	0112      	lsls	r2, r2, #4
 801469c:	4413      	add	r3, r2
 801469e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146a2:	2bff      	cmp	r3, #255	; 0xff
 80146a4:	d148      	bne.n	8014738 <create_StepCountMap_unknown+0x3f0>
 80146a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146aa:	f103 0314 	add.w	r3, r3, #20
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	2b0f      	cmp	r3, #15
 80146b2:	d041      	beq.n	8014738 <create_StepCountMap_unknown+0x3f0>
 80146b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80146b8:	f103 0302 	add.w	r3, r3, #2
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d13a      	bne.n	8014738 <create_StepCountMap_unknown+0x3f0>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146c2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146c6:	f103 0316 	add.w	r3, r3, #22
 80146ca:	881a      	ldrh	r2, [r3, #0]
 80146cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d0:	f103 0314 	add.w	r3, r3, #20
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	497d      	ldr	r1, [pc, #500]	; (80148cc <create_StepCountMap_unknown+0x584>)
 80146d8:	0112      	lsls	r2, r2, #4
 80146da:	4413      	add	r3, r2
 80146dc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80146e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146e4:	f103 0316 	add.w	r3, r3, #22
 80146e8:	881a      	ldrh	r2, [r3, #0]
 80146ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ee:	f103 0314 	add.w	r3, r3, #20
 80146f2:	881b      	ldrh	r3, [r3, #0]
 80146f4:	3301      	adds	r3, #1
 80146f6:	3101      	adds	r1, #1
 80146f8:	b288      	uxth	r0, r1
 80146fa:	4974      	ldr	r1, [pc, #464]	; (80148cc <create_StepCountMap_unknown+0x584>)
 80146fc:	0112      	lsls	r2, r2, #4
 80146fe:	4413      	add	r3, r2
 8014700:	4602      	mov	r2, r0
 8014702:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014706:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470a:	f103 0316 	add.w	r3, r3, #22
 801470e:	881a      	ldrh	r2, [r3, #0]
 8014710:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014714:	4611      	mov	r1, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f000 ff12 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801471c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014720:	f103 0314 	add.w	r3, r3, #20
 8014724:	881b      	ldrh	r3, [r3, #0]
 8014726:	3301      	adds	r3, #1
 8014728:	b29a      	uxth	r2, r3
 801472a:	f107 0308 	add.w	r3, r7, #8
 801472e:	3b04      	subs	r3, #4
 8014730:	4611      	mov	r1, r2
 8014732:	4618      	mov	r0, r3
 8014734:	f000 ff04 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014738:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801473c:	f103 0316 	add.w	r3, r3, #22
 8014740:	881a      	ldrh	r2, [r3, #0]
 8014742:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014746:	f103 0314 	add.w	r3, r3, #20
 801474a:	881b      	ldrh	r3, [r3, #0]
 801474c:	3b01      	subs	r3, #1
 801474e:	495f      	ldr	r1, [pc, #380]	; (80148cc <create_StepCountMap_unknown+0x584>)
 8014750:	0112      	lsls	r2, r2, #4
 8014752:	4413      	add	r3, r2
 8014754:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014758:	2bff      	cmp	r3, #255	; 0xff
 801475a:	d146      	bne.n	80147ea <create_StepCountMap_unknown+0x4a2>
 801475c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014760:	f103 0314 	add.w	r3, r3, #20
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d03f      	beq.n	80147ea <create_StepCountMap_unknown+0x4a2>
 801476a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801476e:	881b      	ldrh	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d13a      	bne.n	80147ea <create_StepCountMap_unknown+0x4a2>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014774:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014778:	f103 0316 	add.w	r3, r3, #22
 801477c:	881a      	ldrh	r2, [r3, #0]
 801477e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014782:	f103 0314 	add.w	r3, r3, #20
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	4950      	ldr	r1, [pc, #320]	; (80148cc <create_StepCountMap_unknown+0x584>)
 801478a:	0112      	lsls	r2, r2, #4
 801478c:	4413      	add	r3, r2
 801478e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014792:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014796:	f103 0316 	add.w	r3, r3, #22
 801479a:	881a      	ldrh	r2, [r3, #0]
 801479c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147a0:	f103 0314 	add.w	r3, r3, #20
 80147a4:	881b      	ldrh	r3, [r3, #0]
 80147a6:	3b01      	subs	r3, #1
 80147a8:	3101      	adds	r1, #1
 80147aa:	b288      	uxth	r0, r1
 80147ac:	4947      	ldr	r1, [pc, #284]	; (80148cc <create_StepCountMap_unknown+0x584>)
 80147ae:	0112      	lsls	r2, r2, #4
 80147b0:	4413      	add	r3, r2
 80147b2:	4602      	mov	r2, r0
 80147b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80147b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147bc:	f103 0316 	add.w	r3, r3, #22
 80147c0:	881a      	ldrh	r2, [r3, #0]
 80147c2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80147c6:	4611      	mov	r1, r2
 80147c8:	4618      	mov	r0, r3
 80147ca:	f000 feb9 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80147ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147d2:	f103 0314 	add.w	r3, r3, #20
 80147d6:	881b      	ldrh	r3, [r3, #0]
 80147d8:	3b01      	subs	r3, #1
 80147da:	b29a      	uxth	r2, r3
 80147dc:	f107 0308 	add.w	r3, r7, #8
 80147e0:	3b04      	subs	r3, #4
 80147e2:	4611      	mov	r1, r2
 80147e4:	4618      	mov	r0, r3
 80147e6:	f000 feab 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 80147ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147ee:	f103 0316 	add.w	r3, r3, #22
 80147f2:	881b      	ldrh	r3, [r3, #0]
 80147f4:	1c5a      	adds	r2, r3, #1
 80147f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147fa:	f103 0314 	add.w	r3, r3, #20
 80147fe:	881b      	ldrh	r3, [r3, #0]
 8014800:	4932      	ldr	r1, [pc, #200]	; (80148cc <create_StepCountMap_unknown+0x584>)
 8014802:	0112      	lsls	r2, r2, #4
 8014804:	4413      	add	r3, r2
 8014806:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801480a:	2bff      	cmp	r3, #255	; 0xff
 801480c:	d148      	bne.n	80148a0 <create_StepCountMap_unknown+0x558>
 801480e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014812:	f103 0316 	add.w	r3, r3, #22
 8014816:	881b      	ldrh	r3, [r3, #0]
 8014818:	2b0f      	cmp	r3, #15
 801481a:	d041      	beq.n	80148a0 <create_StepCountMap_unknown+0x558>
 801481c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014820:	f103 031e 	add.w	r3, r3, #30
 8014824:	881b      	ldrh	r3, [r3, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d13a      	bne.n	80148a0 <create_StepCountMap_unknown+0x558>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801482a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801482e:	f103 0316 	add.w	r3, r3, #22
 8014832:	881a      	ldrh	r2, [r3, #0]
 8014834:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014838:	f103 0314 	add.w	r3, r3, #20
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	4923      	ldr	r1, [pc, #140]	; (80148cc <create_StepCountMap_unknown+0x584>)
 8014840:	0112      	lsls	r2, r2, #4
 8014842:	4413      	add	r3, r2
 8014844:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014848:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801484c:	f103 0316 	add.w	r3, r3, #22
 8014850:	881b      	ldrh	r3, [r3, #0]
 8014852:	1c5a      	adds	r2, r3, #1
 8014854:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014858:	f103 0314 	add.w	r3, r3, #20
 801485c:	881b      	ldrh	r3, [r3, #0]
 801485e:	3101      	adds	r1, #1
 8014860:	b288      	uxth	r0, r1
 8014862:	491a      	ldr	r1, [pc, #104]	; (80148cc <create_StepCountMap_unknown+0x584>)
 8014864:	0112      	lsls	r2, r2, #4
 8014866:	4413      	add	r3, r2
 8014868:	4602      	mov	r2, r0
 801486a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801486e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014872:	f103 0316 	add.w	r3, r3, #22
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	3301      	adds	r3, #1
 801487a:	b29a      	uxth	r2, r3
 801487c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014880:	4611      	mov	r1, r2
 8014882:	4618      	mov	r0, r3
 8014884:	f000 fe5c 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014888:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801488c:	f103 0314 	add.w	r3, r3, #20
 8014890:	881a      	ldrh	r2, [r3, #0]
 8014892:	f107 0308 	add.w	r3, r7, #8
 8014896:	3b04      	subs	r3, #4
 8014898:	4611      	mov	r1, r2
 801489a:	4618      	mov	r0, r3
 801489c:	f000 fe50 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 80148a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148a4:	f103 0316 	add.w	r3, r3, #22
 80148a8:	881b      	ldrh	r3, [r3, #0]
 80148aa:	1e5a      	subs	r2, r3, #1
 80148ac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148b0:	f103 0314 	add.w	r3, r3, #20
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	4905      	ldr	r1, [pc, #20]	; (80148cc <create_StepCountMap_unknown+0x584>)
 80148b8:	0112      	lsls	r2, r2, #4
 80148ba:	4413      	add	r3, r2
 80148bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80148c0:	2bff      	cmp	r3, #255	; 0xff
 80148c2:	d14e      	bne.n	8014962 <create_StepCountMap_unknown+0x61a>
 80148c4:	e004      	b.n	80148d0 <create_StepCountMap_unknown+0x588>
 80148c6:	bf00      	nop
 80148c8:	20001010 	.word	0x20001010
 80148cc:	200011f4 	.word	0x200011f4
 80148d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148d4:	f103 0316 	add.w	r3, r3, #22
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d041      	beq.n	8014962 <create_StepCountMap_unknown+0x61a>
 80148de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148e2:	f103 031c 	add.w	r3, r3, #28
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d13a      	bne.n	8014962 <create_StepCountMap_unknown+0x61a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80148ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148f0:	f103 0316 	add.w	r3, r3, #22
 80148f4:	881a      	ldrh	r2, [r3, #0]
 80148f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148fa:	f103 0314 	add.w	r3, r3, #20
 80148fe:	881b      	ldrh	r3, [r3, #0]
 8014900:	4929      	ldr	r1, [pc, #164]	; (80149a8 <create_StepCountMap_unknown+0x660>)
 8014902:	0112      	lsls	r2, r2, #4
 8014904:	4413      	add	r3, r2
 8014906:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801490a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801490e:	f103 0316 	add.w	r3, r3, #22
 8014912:	881b      	ldrh	r3, [r3, #0]
 8014914:	1e5a      	subs	r2, r3, #1
 8014916:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801491a:	f103 0314 	add.w	r3, r3, #20
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	3101      	adds	r1, #1
 8014922:	b288      	uxth	r0, r1
 8014924:	4920      	ldr	r1, [pc, #128]	; (80149a8 <create_StepCountMap_unknown+0x660>)
 8014926:	0112      	lsls	r2, r2, #4
 8014928:	4413      	add	r3, r2
 801492a:	4602      	mov	r2, r0
 801492c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014930:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014934:	f103 0316 	add.w	r3, r3, #22
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	3b01      	subs	r3, #1
 801493c:	b29a      	uxth	r2, r3
 801493e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014942:	4611      	mov	r1, r2
 8014944:	4618      	mov	r0, r3
 8014946:	f000 fdfb 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801494a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801494e:	f103 0314 	add.w	r3, r3, #20
 8014952:	881a      	ldrh	r2, [r3, #0]
 8014954:	f107 0308 	add.w	r3, r7, #8
 8014958:	3b04      	subs	r3, #4
 801495a:	4611      	mov	r1, r2
 801495c:	4618      	mov	r0, r3
 801495e:	f000 fdef 	bl	8015540 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014962:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014966:	f103 0316 	add.w	r3, r3, #22
 801496a:	881a      	ldrh	r2, [r3, #0]
 801496c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014970:	f103 0314 	add.w	r3, r3, #20
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	490c      	ldr	r1, [pc, #48]	; (80149a8 <create_StepCountMap_unknown+0x660>)
 8014978:	0112      	lsls	r2, r2, #4
 801497a:	4413      	add	r3, r2
 801497c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014980:	3301      	adds	r3, #1
 8014982:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014986:	f102 0204 	add.w	r2, r2, #4
 801498a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801498c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014990:	f103 0304 	add.w	r3, r3, #4
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	2bfe      	cmp	r3, #254	; 0xfe
 8014998:	f67f adc8 	bls.w	801452c <create_StepCountMap_unknown+0x1e4>

		}

}
 801499c:	bf00      	nop
 801499e:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	200011f4 	.word	0x200011f4

080149ac <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 80149ac:	b580      	push	{r7, lr}
 80149ae:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80149b2:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80149b4:	2300      	movs	r3, #0
 80149b6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149ba:	f102 021f 	add.w	r2, r2, #31
 80149be:	7013      	strb	r3, [r2, #0]
 80149c0:	e033      	b.n	8014a2a <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80149c2:	2300      	movs	r3, #0
 80149c4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149c8:	f102 021e 	add.w	r2, r2, #30
 80149cc:	7013      	strb	r3, [r2, #0]
 80149ce:	e01a      	b.n	8014a06 <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 80149d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149d4:	f103 031f 	add.w	r3, r3, #31
 80149d8:	781a      	ldrb	r2, [r3, #0]
 80149da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149de:	f103 031e 	add.w	r3, r3, #30
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	4946      	ldr	r1, [pc, #280]	; (8014b00 <create_StepCountMap_queue+0x154>)
 80149e6:	0112      	lsls	r2, r2, #4
 80149e8:	4413      	add	r3, r2
 80149ea:	22ff      	movs	r2, #255	; 0xff
 80149ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80149f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f4:	f103 031e 	add.w	r3, r3, #30
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	3301      	adds	r3, #1
 80149fc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a00:	f102 021e 	add.w	r2, r2, #30
 8014a04:	7013      	strb	r3, [r2, #0]
 8014a06:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a0a:	f103 031e 	add.w	r3, r3, #30
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	2b0f      	cmp	r3, #15
 8014a12:	d9dd      	bls.n	80149d0 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014a14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a18:	f103 031f 	add.w	r3, r3, #31
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	3301      	adds	r3, #1
 8014a20:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a24:	f102 021f 	add.w	r2, r2, #31
 8014a28:	7013      	strb	r3, [r2, #0]
 8014a2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a2e:	f103 031f 	add.w	r3, r3, #31
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	2b0f      	cmp	r3, #15
 8014a36:	d9c4      	bls.n	80149c2 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014a38:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f000 fd6f 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_y);
 8014a42:	463b      	mov	r3, r7
 8014a44:	4618      	mov	r0, r3
 8014a46:	f000 fd6b 	bl	8015520 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8014a4a:	4b2d      	ldr	r3, [pc, #180]	; (8014b00 <create_StepCountMap_queue+0x154>)
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014a52:	4b2b      	ldr	r3, [pc, #172]	; (8014b00 <create_StepCountMap_queue+0x154>)
 8014a54:	2200      	movs	r2, #0
 8014a56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014a5a:	4b29      	ldr	r3, [pc, #164]	; (8014b00 <create_StepCountMap_queue+0x154>)
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8014a62:	4b27      	ldr	r3, [pc, #156]	; (8014b00 <create_StepCountMap_queue+0x154>)
 8014a64:	2200      	movs	r2, #0
 8014a66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8014a6a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a6e:	2102      	movs	r1, #2
 8014a70:	4618      	mov	r0, r3
 8014a72:	f000 fd65 	bl	8015540 <pushStack_walk>
 8014a76:	463b      	mov	r3, r7
 8014a78:	2100      	movs	r1, #0
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f000 fd60 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8014a80:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a84:	2103      	movs	r1, #3
 8014a86:	4618      	mov	r0, r3
 8014a88:	f000 fd5a 	bl	8015540 <pushStack_walk>
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	2100      	movs	r1, #0
 8014a90:	4618      	mov	r0, r3
 8014a92:	f000 fd55 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014a96:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a9a:	2102      	movs	r1, #2
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 fd4f 	bl	8015540 <pushStack_walk>
 8014aa2:	463b      	mov	r3, r7
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 fd4a 	bl	8015540 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014aac:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014ab0:	2103      	movs	r1, #3
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 fd44 	bl	8015540 <pushStack_walk>
 8014ab8:	463b      	mov	r3, r7
 8014aba:	2101      	movs	r1, #1
 8014abc:	4618      	mov	r0, r3
 8014abe:	f000 fd3f 	bl	8015540 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ac8:	f102 021c 	add.w	r2, r2, #28
 8014acc:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014ace:	2301      	movs	r3, #1
 8014ad0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ad4:	f102 021a 	add.w	r2, r2, #26
 8014ad8:	8013      	strh	r3, [r2, #0]
 8014ada:	2301      	movs	r3, #1
 8014adc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ae0:	f102 0218 	add.w	r2, r2, #24
 8014ae4:	8013      	strh	r3, [r2, #0]
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014aec:	f102 0216 	add.w	r2, r2, #22
 8014af0:	8013      	strh	r3, [r2, #0]
 8014af2:	2301      	movs	r3, #1
 8014af4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014af8:	f102 0214 	add.w	r2, r2, #20
 8014afc:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014afe:	e22b      	b.n	8014f58 <create_StepCountMap_queue+0x5ac>
 8014b00:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8014b04:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f000 fd43 	bl	8015594 <popStack_walk>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b14:	f102 0212 	add.w	r2, r2, #18
 8014b18:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014b1a:	463b      	mov	r3, r7
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f000 fd39 	bl	8015594 <popStack_walk>
 8014b22:	4603      	mov	r3, r0
 8014b24:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b28:	f102 0210 	add.w	r2, r2, #16
 8014b2c:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014b2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b32:	f103 0312 	add.w	r3, r3, #18
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	f000 8213 	beq.w	8014f68 <create_StepCountMap_queue+0x5bc>
 8014b42:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b46:	f103 0310 	add.w	r3, r3, #16
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b50:	4293      	cmp	r3, r2
 8014b52:	f000 8209 	beq.w	8014f68 <create_StepCountMap_queue+0x5bc>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014b56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b5a:	f103 0310 	add.w	r3, r3, #16
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	2b0e      	cmp	r3, #14
 8014b62:	d817      	bhi.n	8014b94 <create_StepCountMap_queue+0x1e8>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8014b64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b68:	f103 0310 	add.w	r3, r3, #16
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	4aca      	ldr	r2, [pc, #808]	; (8014e98 <create_StepCountMap_queue+0x4ec>)
 8014b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b74:	b29a      	uxth	r2, r3
 8014b76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b7a:	f103 0312 	add.w	r3, r3, #18
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	2101      	movs	r1, #1
 8014b82:	fa01 f303 	lsl.w	r3, r1, r3
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	4013      	ands	r3, r2
 8014b8a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b8e:	f102 021a 	add.w	r2, r2, #26
 8014b92:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014b94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b98:	f103 0310 	add.w	r3, r3, #16
 8014b9c:	881b      	ldrh	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d018      	beq.n	8014bd4 <create_StepCountMap_queue+0x228>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8014ba2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ba6:	f103 0310 	add.w	r3, r3, #16
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	3b01      	subs	r3, #1
 8014bae:	4aba      	ldr	r2, [pc, #744]	; (8014e98 <create_StepCountMap_queue+0x4ec>)
 8014bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bb4:	b29a      	uxth	r2, r3
 8014bb6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bba:	f103 0312 	add.w	r3, r3, #18
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	2101      	movs	r1, #1
 8014bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	4013      	ands	r3, r2
 8014bca:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014bce:	f102 0218 	add.w	r2, r2, #24
 8014bd2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014bd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bd8:	f103 0312 	add.w	r3, r3, #18
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	2b0e      	cmp	r3, #14
 8014be0:	d819      	bhi.n	8014c16 <create_StepCountMap_queue+0x26a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8014be2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014be6:	f103 0312 	add.w	r3, r3, #18
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	4aaa      	ldr	r2, [pc, #680]	; (8014e98 <create_StepCountMap_queue+0x4ec>)
 8014bee:	330e      	adds	r3, #14
 8014bf0:	009b      	lsls	r3, r3, #2
 8014bf2:	4413      	add	r3, r2
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bfc:	f103 0310 	add.w	r3, r3, #16
 8014c00:	881b      	ldrh	r3, [r3, #0]
 8014c02:	2101      	movs	r1, #1
 8014c04:	fa01 f303 	lsl.w	r3, r1, r3
 8014c08:	b29b      	uxth	r3, r3
 8014c0a:	4013      	ands	r3, r2
 8014c0c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014c10:	f102 0216 	add.w	r2, r2, #22
 8014c14:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014c16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c1a:	f103 0312 	add.w	r3, r3, #18
 8014c1e:	881b      	ldrh	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d01a      	beq.n	8014c5a <create_StepCountMap_queue+0x2ae>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8014c24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c28:	f103 0312 	add.w	r3, r3, #18
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	3b01      	subs	r3, #1
 8014c30:	4a99      	ldr	r2, [pc, #612]	; (8014e98 <create_StepCountMap_queue+0x4ec>)
 8014c32:	330e      	adds	r3, #14
 8014c34:	009b      	lsls	r3, r3, #2
 8014c36:	4413      	add	r3, r2
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c40:	f103 0310 	add.w	r3, r3, #16
 8014c44:	881b      	ldrh	r3, [r3, #0]
 8014c46:	2101      	movs	r1, #1
 8014c48:	fa01 f303 	lsl.w	r3, r1, r3
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	4013      	ands	r3, r2
 8014c50:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014c54:	f102 0214 	add.w	r2, r2, #20
 8014c58:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8014c5a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c5e:	f103 0312 	add.w	r3, r3, #18
 8014c62:	881a      	ldrh	r2, [r3, #0]
 8014c64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c68:	f103 0310 	add.w	r3, r3, #16
 8014c6c:	881b      	ldrh	r3, [r3, #0]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	498a      	ldr	r1, [pc, #552]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014c72:	0112      	lsls	r2, r2, #4
 8014c74:	4413      	add	r3, r2
 8014c76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c7a:	2bff      	cmp	r3, #255	; 0xff
 8014c7c:	d146      	bne.n	8014d0c <create_StepCountMap_queue+0x360>
 8014c7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c82:	f103 0310 	add.w	r3, r3, #16
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	2b0f      	cmp	r3, #15
 8014c8a:	d03f      	beq.n	8014d0c <create_StepCountMap_queue+0x360>
 8014c8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c90:	f103 031a 	add.w	r3, r3, #26
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d138      	bne.n	8014d0c <create_StepCountMap_queue+0x360>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c9e:	f103 0312 	add.w	r3, r3, #18
 8014ca2:	881a      	ldrh	r2, [r3, #0]
 8014ca4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ca8:	f103 0310 	add.w	r3, r3, #16
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	497b      	ldr	r1, [pc, #492]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014cb0:	0112      	lsls	r2, r2, #4
 8014cb2:	4413      	add	r3, r2
 8014cb4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014cb8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cbc:	f103 0312 	add.w	r3, r3, #18
 8014cc0:	881a      	ldrh	r2, [r3, #0]
 8014cc2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc6:	f103 0310 	add.w	r3, r3, #16
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	3101      	adds	r1, #1
 8014cd0:	b288      	uxth	r0, r1
 8014cd2:	4972      	ldr	r1, [pc, #456]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014cd4:	0112      	lsls	r2, r2, #4
 8014cd6:	4413      	add	r3, r2
 8014cd8:	4602      	mov	r2, r0
 8014cda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014cde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ce2:	f103 0312 	add.w	r3, r3, #18
 8014ce6:	881a      	ldrh	r2, [r3, #0]
 8014ce8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014cec:	4611      	mov	r1, r2
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f000 fc26 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014cf4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cf8:	f103 0310 	add.w	r3, r3, #16
 8014cfc:	881b      	ldrh	r3, [r3, #0]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	463b      	mov	r3, r7
 8014d04:	4611      	mov	r1, r2
 8014d06:	4618      	mov	r0, r3
 8014d08:	f000 fc1a 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014d0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d10:	f103 0312 	add.w	r3, r3, #18
 8014d14:	881a      	ldrh	r2, [r3, #0]
 8014d16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d1a:	f103 0310 	add.w	r3, r3, #16
 8014d1e:	881b      	ldrh	r3, [r3, #0]
 8014d20:	3b01      	subs	r3, #1
 8014d22:	495e      	ldr	r1, [pc, #376]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014d24:	0112      	lsls	r2, r2, #4
 8014d26:	4413      	add	r3, r2
 8014d28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d2c:	2bff      	cmp	r3, #255	; 0xff
 8014d2e:	d146      	bne.n	8014dbe <create_StepCountMap_queue+0x412>
 8014d30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d34:	f103 0310 	add.w	r3, r3, #16
 8014d38:	881b      	ldrh	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d03f      	beq.n	8014dbe <create_StepCountMap_queue+0x412>
 8014d3e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d42:	f103 0318 	add.w	r3, r3, #24
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d138      	bne.n	8014dbe <create_StepCountMap_queue+0x412>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d4c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d50:	f103 0312 	add.w	r3, r3, #18
 8014d54:	881a      	ldrh	r2, [r3, #0]
 8014d56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d5a:	f103 0310 	add.w	r3, r3, #16
 8014d5e:	881b      	ldrh	r3, [r3, #0]
 8014d60:	494e      	ldr	r1, [pc, #312]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014d62:	0112      	lsls	r2, r2, #4
 8014d64:	4413      	add	r3, r2
 8014d66:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014d6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d6e:	f103 0312 	add.w	r3, r3, #18
 8014d72:	881a      	ldrh	r2, [r3, #0]
 8014d74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d78:	f103 0310 	add.w	r3, r3, #16
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	3101      	adds	r1, #1
 8014d82:	b288      	uxth	r0, r1
 8014d84:	4945      	ldr	r1, [pc, #276]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014d86:	0112      	lsls	r2, r2, #4
 8014d88:	4413      	add	r3, r2
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014d90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d94:	f103 0312 	add.w	r3, r3, #18
 8014d98:	881a      	ldrh	r2, [r3, #0]
 8014d9a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014d9e:	4611      	mov	r1, r2
 8014da0:	4618      	mov	r0, r3
 8014da2:	f000 fbcd 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014da6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014daa:	f103 0310 	add.w	r3, r3, #16
 8014dae:	881b      	ldrh	r3, [r3, #0]
 8014db0:	3b01      	subs	r3, #1
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	463b      	mov	r3, r7
 8014db6:	4611      	mov	r1, r2
 8014db8:	4618      	mov	r0, r3
 8014dba:	f000 fbc1 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8014dbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dc2:	f103 0312 	add.w	r3, r3, #18
 8014dc6:	881b      	ldrh	r3, [r3, #0]
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dce:	f103 0310 	add.w	r3, r3, #16
 8014dd2:	881b      	ldrh	r3, [r3, #0]
 8014dd4:	4931      	ldr	r1, [pc, #196]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014dd6:	0112      	lsls	r2, r2, #4
 8014dd8:	4413      	add	r3, r2
 8014dda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014dde:	2bff      	cmp	r3, #255	; 0xff
 8014de0:	d146      	bne.n	8014e70 <create_StepCountMap_queue+0x4c4>
 8014de2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014de6:	f103 0312 	add.w	r3, r3, #18
 8014dea:	881b      	ldrh	r3, [r3, #0]
 8014dec:	2b0f      	cmp	r3, #15
 8014dee:	d03f      	beq.n	8014e70 <create_StepCountMap_queue+0x4c4>
 8014df0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014df4:	f103 0316 	add.w	r3, r3, #22
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d138      	bne.n	8014e70 <create_StepCountMap_queue+0x4c4>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014dfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e02:	f103 0312 	add.w	r3, r3, #18
 8014e06:	881a      	ldrh	r2, [r3, #0]
 8014e08:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e0c:	f103 0310 	add.w	r3, r3, #16
 8014e10:	881b      	ldrh	r3, [r3, #0]
 8014e12:	4922      	ldr	r1, [pc, #136]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014e14:	0112      	lsls	r2, r2, #4
 8014e16:	4413      	add	r3, r2
 8014e18:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014e1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e20:	f103 0312 	add.w	r3, r3, #18
 8014e24:	881b      	ldrh	r3, [r3, #0]
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e2c:	f103 0310 	add.w	r3, r3, #16
 8014e30:	881b      	ldrh	r3, [r3, #0]
 8014e32:	3101      	adds	r1, #1
 8014e34:	b288      	uxth	r0, r1
 8014e36:	4919      	ldr	r1, [pc, #100]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014e38:	0112      	lsls	r2, r2, #4
 8014e3a:	4413      	add	r3, r2
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014e42:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e46:	f103 0312 	add.w	r3, r3, #18
 8014e4a:	881b      	ldrh	r3, [r3, #0]
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014e54:	4611      	mov	r1, r2
 8014e56:	4618      	mov	r0, r3
 8014e58:	f000 fb72 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014e5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e60:	f103 0310 	add.w	r3, r3, #16
 8014e64:	881a      	ldrh	r2, [r3, #0]
 8014e66:	463b      	mov	r3, r7
 8014e68:	4611      	mov	r1, r2
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f000 fb68 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8014e70:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e74:	f103 0312 	add.w	r3, r3, #18
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	1e5a      	subs	r2, r3, #1
 8014e7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e80:	f103 0310 	add.w	r3, r3, #16
 8014e84:	881b      	ldrh	r3, [r3, #0]
 8014e86:	4905      	ldr	r1, [pc, #20]	; (8014e9c <create_StepCountMap_queue+0x4f0>)
 8014e88:	0112      	lsls	r2, r2, #4
 8014e8a:	4413      	add	r3, r2
 8014e8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e90:	2bff      	cmp	r3, #255	; 0xff
 8014e92:	d14c      	bne.n	8014f2e <create_StepCountMap_queue+0x582>
 8014e94:	e004      	b.n	8014ea0 <create_StepCountMap_queue+0x4f4>
 8014e96:	bf00      	nop
 8014e98:	20001010 	.word	0x20001010
 8014e9c:	200011f4 	.word	0x200011f4
 8014ea0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ea4:	f103 0312 	add.w	r3, r3, #18
 8014ea8:	881b      	ldrh	r3, [r3, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d03f      	beq.n	8014f2e <create_StepCountMap_queue+0x582>
 8014eae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014eb2:	f103 0314 	add.w	r3, r3, #20
 8014eb6:	881b      	ldrh	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d138      	bne.n	8014f2e <create_StepCountMap_queue+0x582>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014ebc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ec0:	f103 0312 	add.w	r3, r3, #18
 8014ec4:	881a      	ldrh	r2, [r3, #0]
 8014ec6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014eca:	f103 0310 	add.w	r3, r3, #16
 8014ece:	881b      	ldrh	r3, [r3, #0]
 8014ed0:	4928      	ldr	r1, [pc, #160]	; (8014f74 <create_StepCountMap_queue+0x5c8>)
 8014ed2:	0112      	lsls	r2, r2, #4
 8014ed4:	4413      	add	r3, r2
 8014ed6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014eda:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ede:	f103 0312 	add.w	r3, r3, #18
 8014ee2:	881b      	ldrh	r3, [r3, #0]
 8014ee4:	1e5a      	subs	r2, r3, #1
 8014ee6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014eea:	f103 0310 	add.w	r3, r3, #16
 8014eee:	881b      	ldrh	r3, [r3, #0]
 8014ef0:	3101      	adds	r1, #1
 8014ef2:	b288      	uxth	r0, r1
 8014ef4:	491f      	ldr	r1, [pc, #124]	; (8014f74 <create_StepCountMap_queue+0x5c8>)
 8014ef6:	0112      	lsls	r2, r2, #4
 8014ef8:	4413      	add	r3, r2
 8014efa:	4602      	mov	r2, r0
 8014efc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014f00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f04:	f103 0312 	add.w	r3, r3, #18
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	3b01      	subs	r3, #1
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014f12:	4611      	mov	r1, r2
 8014f14:	4618      	mov	r0, r3
 8014f16:	f000 fb13 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014f1a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f1e:	f103 0310 	add.w	r3, r3, #16
 8014f22:	881a      	ldrh	r2, [r3, #0]
 8014f24:	463b      	mov	r3, r7
 8014f26:	4611      	mov	r1, r2
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 fb09 	bl	8015540 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014f2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f32:	f103 0312 	add.w	r3, r3, #18
 8014f36:	881a      	ldrh	r2, [r3, #0]
 8014f38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f3c:	f103 0310 	add.w	r3, r3, #16
 8014f40:	881b      	ldrh	r3, [r3, #0]
 8014f42:	490c      	ldr	r1, [pc, #48]	; (8014f74 <create_StepCountMap_queue+0x5c8>)
 8014f44:	0112      	lsls	r2, r2, #4
 8014f46:	4413      	add	r3, r2
 8014f48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014f52:	f102 021c 	add.w	r2, r2, #28
 8014f56:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014f58:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f5c:	f103 031c 	add.w	r3, r3, #28
 8014f60:	881b      	ldrh	r3, [r3, #0]
 8014f62:	2bfe      	cmp	r3, #254	; 0xfe
 8014f64:	f67f adce 	bls.w	8014b04 <create_StepCountMap_queue+0x158>

		}

}
 8014f68:	bf00      	nop
 8014f6a:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	200011f4 	.word	0x200011f4

08014f78 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014f82:	2300      	movs	r3, #0
 8014f84:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014f88:	f102 0207 	add.w	r2, r2, #7
 8014f8c:	7013      	strb	r3, [r2, #0]
 8014f8e:	e033      	b.n	8014ff8 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014f90:	2300      	movs	r3, #0
 8014f92:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014f96:	f102 0206 	add.w	r2, r2, #6
 8014f9a:	7013      	strb	r3, [r2, #0]
 8014f9c:	e01a      	b.n	8014fd4 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8014f9e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fa2:	f103 0307 	add.w	r3, r3, #7
 8014fa6:	781a      	ldrb	r2, [r3, #0]
 8014fa8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fac:	f103 0306 	add.w	r3, r3, #6
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	4931      	ldr	r1, [pc, #196]	; (8015078 <create_StepCountMapBack_queue+0x100>)
 8014fb4:	0112      	lsls	r2, r2, #4
 8014fb6:	4413      	add	r3, r2
 8014fb8:	22ff      	movs	r2, #255	; 0xff
 8014fba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014fbe:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fc2:	f103 0306 	add.w	r3, r3, #6
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014fce:	f102 0206 	add.w	r2, r2, #6
 8014fd2:	7013      	strb	r3, [r2, #0]
 8014fd4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fd8:	f103 0306 	add.w	r3, r3, #6
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	2b0f      	cmp	r3, #15
 8014fe0:	d9dd      	bls.n	8014f9e <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014fe2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fe6:	f103 0307 	add.w	r3, r3, #7
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	3301      	adds	r3, #1
 8014fee:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014ff2:	f102 0207 	add.w	r2, r2, #7
 8014ff6:	7013      	strb	r3, [r2, #0]
 8014ff8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014ffc:	f103 0307 	add.w	r3, r3, #7
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	2b0f      	cmp	r3, #15
 8015004:	d9c4      	bls.n	8014f90 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 8015006:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801500a:	4618      	mov	r0, r3
 801500c:	f000 fa88 	bl	8015520 <initStack_walk>
	initStack_walk(&stack_y);
 8015010:	f107 0308 	add.w	r3, r7, #8
 8015014:	3b04      	subs	r3, #4
 8015016:	4618      	mov	r0, r3
 8015018:	f000 fa82 	bl	8015520 <initStack_walk>


	walk_count[0][0] = 0;
 801501c:	4b16      	ldr	r3, [pc, #88]	; (8015078 <create_StepCountMapBack_queue+0x100>)
 801501e:	2200      	movs	r2, #0
 8015020:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8015022:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015026:	2100      	movs	r1, #0
 8015028:	4618      	mov	r0, r3
 801502a:	f000 fa89 	bl	8015540 <pushStack_walk>
 801502e:	f107 0308 	add.w	r3, r7, #8
 8015032:	3b04      	subs	r3, #4
 8015034:	2100      	movs	r1, #0
 8015036:	4618      	mov	r0, r3
 8015038:	f000 fa82 	bl	8015540 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 801503c:	2301      	movs	r3, #1
 801503e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015042:	f102 0204 	add.w	r2, r2, #4
 8015046:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8015048:	2301      	movs	r3, #1
 801504a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801504e:	f102 0202 	add.w	r2, r2, #2
 8015052:	8013      	strh	r3, [r2, #0]
 8015054:	2301      	movs	r3, #1
 8015056:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801505a:	8013      	strh	r3, [r2, #0]
 801505c:	2301      	movs	r3, #1
 801505e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015062:	f102 021e 	add.w	r2, r2, #30
 8015066:	8013      	strh	r3, [r2, #0]
 8015068:	2301      	movs	r3, #1
 801506a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801506e:	f102 021c 	add.w	r2, r2, #28
 8015072:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015074:	e244      	b.n	8015500 <create_StepCountMapBack_queue+0x588>
 8015076:	bf00      	nop
 8015078:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 801507c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015080:	4618      	mov	r0, r3
 8015082:	f000 fa87 	bl	8015594 <popStack_walk>
 8015086:	4603      	mov	r3, r0
 8015088:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801508c:	f102 021a 	add.w	r2, r2, #26
 8015090:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8015092:	f107 0308 	add.w	r3, r7, #8
 8015096:	3b04      	subs	r3, #4
 8015098:	4618      	mov	r0, r3
 801509a:	f000 fa7b 	bl	8015594 <popStack_walk>
 801509e:	4603      	mov	r3, r0
 80150a0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80150a4:	f102 0218 	add.w	r2, r2, #24
 80150a8:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 80150aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150ae:	f103 031a 	add.w	r3, r3, #26
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150b8:	4293      	cmp	r3, r2
 80150ba:	f000 8229 	beq.w	8015510 <create_StepCountMapBack_queue+0x598>
 80150be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150c2:	f103 0318 	add.w	r3, r3, #24
 80150c6:	881b      	ldrh	r3, [r3, #0]
 80150c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150cc:	4293      	cmp	r3, r2
 80150ce:	f000 821f 	beq.w	8015510 <create_StepCountMapBack_queue+0x598>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80150d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150d6:	f103 031a 	add.w	r3, r3, #26
 80150da:	881b      	ldrh	r3, [r3, #0]
 80150dc:	011b      	lsls	r3, r3, #4
 80150de:	b29a      	uxth	r2, r3
 80150e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150e4:	f103 0318 	add.w	r3, r3, #24
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	4413      	add	r3, r2
 80150ec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80150f0:	f102 0216 	add.w	r2, r2, #22
 80150f4:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80150f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150fa:	f103 0318 	add.w	r3, r3, #24
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	2b0e      	cmp	r3, #14
 8015102:	d817      	bhi.n	8015134 <create_StepCountMapBack_queue+0x1bc>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8015104:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015108:	f103 0318 	add.w	r3, r3, #24
 801510c:	881b      	ldrh	r3, [r3, #0]
 801510e:	4acb      	ldr	r2, [pc, #812]	; (801543c <create_StepCountMapBack_queue+0x4c4>)
 8015110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015114:	b29a      	uxth	r2, r3
 8015116:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801511a:	f103 031a 	add.w	r3, r3, #26
 801511e:	881b      	ldrh	r3, [r3, #0]
 8015120:	2101      	movs	r1, #1
 8015122:	fa01 f303 	lsl.w	r3, r1, r3
 8015126:	b29b      	uxth	r3, r3
 8015128:	4013      	ands	r3, r2
 801512a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801512e:	f102 0202 	add.w	r2, r2, #2
 8015132:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8015134:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015138:	f103 0318 	add.w	r3, r3, #24
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d016      	beq.n	8015170 <create_StepCountMapBack_queue+0x1f8>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8015142:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015146:	f103 0318 	add.w	r3, r3, #24
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	3b01      	subs	r3, #1
 801514e:	4abb      	ldr	r2, [pc, #748]	; (801543c <create_StepCountMapBack_queue+0x4c4>)
 8015150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015154:	b29a      	uxth	r2, r3
 8015156:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801515a:	f103 031a 	add.w	r3, r3, #26
 801515e:	881b      	ldrh	r3, [r3, #0]
 8015160:	2101      	movs	r1, #1
 8015162:	fa01 f303 	lsl.w	r3, r1, r3
 8015166:	b29b      	uxth	r3, r3
 8015168:	4013      	ands	r3, r2
 801516a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801516e:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8015170:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015174:	f103 031a 	add.w	r3, r3, #26
 8015178:	881b      	ldrh	r3, [r3, #0]
 801517a:	2b0e      	cmp	r3, #14
 801517c:	d819      	bhi.n	80151b2 <create_StepCountMapBack_queue+0x23a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 801517e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015182:	f103 031a 	add.w	r3, r3, #26
 8015186:	881b      	ldrh	r3, [r3, #0]
 8015188:	4aac      	ldr	r2, [pc, #688]	; (801543c <create_StepCountMapBack_queue+0x4c4>)
 801518a:	330e      	adds	r3, #14
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	4413      	add	r3, r2
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	b29a      	uxth	r2, r3
 8015194:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015198:	f103 0318 	add.w	r3, r3, #24
 801519c:	881b      	ldrh	r3, [r3, #0]
 801519e:	2101      	movs	r1, #1
 80151a0:	fa01 f303 	lsl.w	r3, r1, r3
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	4013      	ands	r3, r2
 80151a8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80151ac:	f102 021e 	add.w	r2, r2, #30
 80151b0:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80151b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151b6:	f103 031a 	add.w	r3, r3, #26
 80151ba:	881b      	ldrh	r3, [r3, #0]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d01a      	beq.n	80151f6 <create_StepCountMapBack_queue+0x27e>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 80151c0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151c4:	f103 031a 	add.w	r3, r3, #26
 80151c8:	881b      	ldrh	r3, [r3, #0]
 80151ca:	3b01      	subs	r3, #1
 80151cc:	4a9b      	ldr	r2, [pc, #620]	; (801543c <create_StepCountMapBack_queue+0x4c4>)
 80151ce:	330e      	adds	r3, #14
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	4413      	add	r3, r2
 80151d4:	685b      	ldr	r3, [r3, #4]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151dc:	f103 0318 	add.w	r3, r3, #24
 80151e0:	881b      	ldrh	r3, [r3, #0]
 80151e2:	2101      	movs	r1, #1
 80151e4:	fa01 f303 	lsl.w	r3, r1, r3
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	4013      	ands	r3, r2
 80151ec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80151f0:	f102 021c 	add.w	r2, r2, #28
 80151f4:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 80151f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151fa:	f103 031a 	add.w	r3, r3, #26
 80151fe:	881a      	ldrh	r2, [r3, #0]
 8015200:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015204:	f103 0318 	add.w	r3, r3, #24
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	3301      	adds	r3, #1
 801520c:	498c      	ldr	r1, [pc, #560]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 801520e:	0112      	lsls	r2, r2, #4
 8015210:	4413      	add	r3, r2
 8015212:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015216:	2bff      	cmp	r3, #255	; 0xff
 8015218:	d148      	bne.n	80152ac <create_StepCountMapBack_queue+0x334>
 801521a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801521e:	f103 0318 	add.w	r3, r3, #24
 8015222:	881b      	ldrh	r3, [r3, #0]
 8015224:	2b0f      	cmp	r3, #15
 8015226:	d041      	beq.n	80152ac <create_StepCountMapBack_queue+0x334>
 8015228:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801522c:	f103 0302 	add.w	r3, r3, #2
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d13a      	bne.n	80152ac <create_StepCountMapBack_queue+0x334>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015236:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801523a:	f103 031a 	add.w	r3, r3, #26
 801523e:	881a      	ldrh	r2, [r3, #0]
 8015240:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015244:	f103 0318 	add.w	r3, r3, #24
 8015248:	881b      	ldrh	r3, [r3, #0]
 801524a:	497d      	ldr	r1, [pc, #500]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 801524c:	0112      	lsls	r2, r2, #4
 801524e:	4413      	add	r3, r2
 8015250:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015254:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015258:	f103 031a 	add.w	r3, r3, #26
 801525c:	881a      	ldrh	r2, [r3, #0]
 801525e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015262:	f103 0318 	add.w	r3, r3, #24
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	3301      	adds	r3, #1
 801526a:	3101      	adds	r1, #1
 801526c:	b288      	uxth	r0, r1
 801526e:	4974      	ldr	r1, [pc, #464]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 8015270:	0112      	lsls	r2, r2, #4
 8015272:	4413      	add	r3, r2
 8015274:	4602      	mov	r2, r0
 8015276:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801527a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801527e:	f103 031a 	add.w	r3, r3, #26
 8015282:	881a      	ldrh	r2, [r3, #0]
 8015284:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015288:	4611      	mov	r1, r2
 801528a:	4618      	mov	r0, r3
 801528c:	f000 f958 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8015290:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015294:	f103 0318 	add.w	r3, r3, #24
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	3301      	adds	r3, #1
 801529c:	b29a      	uxth	r2, r3
 801529e:	f107 0308 	add.w	r3, r7, #8
 80152a2:	3b04      	subs	r3, #4
 80152a4:	4611      	mov	r1, r2
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 f94a 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 80152ac:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152b0:	f103 031a 	add.w	r3, r3, #26
 80152b4:	881a      	ldrh	r2, [r3, #0]
 80152b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152ba:	f103 0318 	add.w	r3, r3, #24
 80152be:	881b      	ldrh	r3, [r3, #0]
 80152c0:	3b01      	subs	r3, #1
 80152c2:	495f      	ldr	r1, [pc, #380]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 80152c4:	0112      	lsls	r2, r2, #4
 80152c6:	4413      	add	r3, r2
 80152c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80152cc:	2bff      	cmp	r3, #255	; 0xff
 80152ce:	d146      	bne.n	801535e <create_StepCountMapBack_queue+0x3e6>
 80152d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152d4:	f103 0318 	add.w	r3, r3, #24
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d03f      	beq.n	801535e <create_StepCountMapBack_queue+0x3e6>
 80152de:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80152e2:	881b      	ldrh	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d13a      	bne.n	801535e <create_StepCountMapBack_queue+0x3e6>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80152e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152ec:	f103 031a 	add.w	r3, r3, #26
 80152f0:	881a      	ldrh	r2, [r3, #0]
 80152f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152f6:	f103 0318 	add.w	r3, r3, #24
 80152fa:	881b      	ldrh	r3, [r3, #0]
 80152fc:	4950      	ldr	r1, [pc, #320]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 80152fe:	0112      	lsls	r2, r2, #4
 8015300:	4413      	add	r3, r2
 8015302:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015306:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801530a:	f103 031a 	add.w	r3, r3, #26
 801530e:	881a      	ldrh	r2, [r3, #0]
 8015310:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015314:	f103 0318 	add.w	r3, r3, #24
 8015318:	881b      	ldrh	r3, [r3, #0]
 801531a:	3b01      	subs	r3, #1
 801531c:	3101      	adds	r1, #1
 801531e:	b288      	uxth	r0, r1
 8015320:	4947      	ldr	r1, [pc, #284]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 8015322:	0112      	lsls	r2, r2, #4
 8015324:	4413      	add	r3, r2
 8015326:	4602      	mov	r2, r0
 8015328:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801532c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015330:	f103 031a 	add.w	r3, r3, #26
 8015334:	881a      	ldrh	r2, [r3, #0]
 8015336:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801533a:	4611      	mov	r1, r2
 801533c:	4618      	mov	r0, r3
 801533e:	f000 f8ff 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8015342:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015346:	f103 0318 	add.w	r3, r3, #24
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	3b01      	subs	r3, #1
 801534e:	b29a      	uxth	r2, r3
 8015350:	f107 0308 	add.w	r3, r7, #8
 8015354:	3b04      	subs	r3, #4
 8015356:	4611      	mov	r1, r2
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f8f1 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 801535e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015362:	f103 031a 	add.w	r3, r3, #26
 8015366:	881b      	ldrh	r3, [r3, #0]
 8015368:	1c5a      	adds	r2, r3, #1
 801536a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801536e:	f103 0318 	add.w	r3, r3, #24
 8015372:	881b      	ldrh	r3, [r3, #0]
 8015374:	4932      	ldr	r1, [pc, #200]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 8015376:	0112      	lsls	r2, r2, #4
 8015378:	4413      	add	r3, r2
 801537a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801537e:	2bff      	cmp	r3, #255	; 0xff
 8015380:	d148      	bne.n	8015414 <create_StepCountMapBack_queue+0x49c>
 8015382:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015386:	f103 031a 	add.w	r3, r3, #26
 801538a:	881b      	ldrh	r3, [r3, #0]
 801538c:	2b0f      	cmp	r3, #15
 801538e:	d041      	beq.n	8015414 <create_StepCountMapBack_queue+0x49c>
 8015390:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015394:	f103 031e 	add.w	r3, r3, #30
 8015398:	881b      	ldrh	r3, [r3, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d13a      	bne.n	8015414 <create_StepCountMapBack_queue+0x49c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801539e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153a2:	f103 031a 	add.w	r3, r3, #26
 80153a6:	881a      	ldrh	r2, [r3, #0]
 80153a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153ac:	f103 0318 	add.w	r3, r3, #24
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	4923      	ldr	r1, [pc, #140]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 80153b4:	0112      	lsls	r2, r2, #4
 80153b6:	4413      	add	r3, r2
 80153b8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80153bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153c0:	f103 031a 	add.w	r3, r3, #26
 80153c4:	881b      	ldrh	r3, [r3, #0]
 80153c6:	1c5a      	adds	r2, r3, #1
 80153c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153cc:	f103 0318 	add.w	r3, r3, #24
 80153d0:	881b      	ldrh	r3, [r3, #0]
 80153d2:	3101      	adds	r1, #1
 80153d4:	b288      	uxth	r0, r1
 80153d6:	491a      	ldr	r1, [pc, #104]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 80153d8:	0112      	lsls	r2, r2, #4
 80153da:	4413      	add	r3, r2
 80153dc:	4602      	mov	r2, r0
 80153de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80153e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153e6:	f103 031a 	add.w	r3, r3, #26
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	3301      	adds	r3, #1
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80153f4:	4611      	mov	r1, r2
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 f8a2 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80153fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015400:	f103 0318 	add.w	r3, r3, #24
 8015404:	881a      	ldrh	r2, [r3, #0]
 8015406:	f107 0308 	add.w	r3, r7, #8
 801540a:	3b04      	subs	r3, #4
 801540c:	4611      	mov	r1, r2
 801540e:	4618      	mov	r0, r3
 8015410:	f000 f896 	bl	8015540 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8015414:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015418:	f103 031a 	add.w	r3, r3, #26
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	1e5a      	subs	r2, r3, #1
 8015420:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015424:	f103 0318 	add.w	r3, r3, #24
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	4905      	ldr	r1, [pc, #20]	; (8015440 <create_StepCountMapBack_queue+0x4c8>)
 801542c:	0112      	lsls	r2, r2, #4
 801542e:	4413      	add	r3, r2
 8015430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015434:	2bff      	cmp	r3, #255	; 0xff
 8015436:	d14e      	bne.n	80154d6 <create_StepCountMapBack_queue+0x55e>
 8015438:	e004      	b.n	8015444 <create_StepCountMapBack_queue+0x4cc>
 801543a:	bf00      	nop
 801543c:	20001010 	.word	0x20001010
 8015440:	200011f4 	.word	0x200011f4
 8015444:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015448:	f103 031a 	add.w	r3, r3, #26
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d041      	beq.n	80154d6 <create_StepCountMapBack_queue+0x55e>
 8015452:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015456:	f103 031c 	add.w	r3, r3, #28
 801545a:	881b      	ldrh	r3, [r3, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d13a      	bne.n	80154d6 <create_StepCountMapBack_queue+0x55e>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015460:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015464:	f103 031a 	add.w	r3, r3, #26
 8015468:	881a      	ldrh	r2, [r3, #0]
 801546a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801546e:	f103 0318 	add.w	r3, r3, #24
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	4929      	ldr	r1, [pc, #164]	; (801551c <create_StepCountMapBack_queue+0x5a4>)
 8015476:	0112      	lsls	r2, r2, #4
 8015478:	4413      	add	r3, r2
 801547a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801547e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015482:	f103 031a 	add.w	r3, r3, #26
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	1e5a      	subs	r2, r3, #1
 801548a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801548e:	f103 0318 	add.w	r3, r3, #24
 8015492:	881b      	ldrh	r3, [r3, #0]
 8015494:	3101      	adds	r1, #1
 8015496:	b288      	uxth	r0, r1
 8015498:	4920      	ldr	r1, [pc, #128]	; (801551c <create_StepCountMapBack_queue+0x5a4>)
 801549a:	0112      	lsls	r2, r2, #4
 801549c:	4413      	add	r3, r2
 801549e:	4602      	mov	r2, r0
 80154a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80154a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154a8:	f103 031a 	add.w	r3, r3, #26
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	3b01      	subs	r3, #1
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80154b6:	4611      	mov	r1, r2
 80154b8:	4618      	mov	r0, r3
 80154ba:	f000 f841 	bl	8015540 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80154be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154c2:	f103 0318 	add.w	r3, r3, #24
 80154c6:	881a      	ldrh	r2, [r3, #0]
 80154c8:	f107 0308 	add.w	r3, r7, #8
 80154cc:	3b04      	subs	r3, #4
 80154ce:	4611      	mov	r1, r2
 80154d0:	4618      	mov	r0, r3
 80154d2:	f000 f835 	bl	8015540 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80154d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154da:	f103 031a 	add.w	r3, r3, #26
 80154de:	881a      	ldrh	r2, [r3, #0]
 80154e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154e4:	f103 0318 	add.w	r3, r3, #24
 80154e8:	881b      	ldrh	r3, [r3, #0]
 80154ea:	490c      	ldr	r1, [pc, #48]	; (801551c <create_StepCountMapBack_queue+0x5a4>)
 80154ec:	0112      	lsls	r2, r2, #4
 80154ee:	4413      	add	r3, r2
 80154f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80154f4:	3301      	adds	r3, #1
 80154f6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80154fa:	f102 0204 	add.w	r2, r2, #4
 80154fe:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015500:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015504:	f103 0304 	add.w	r3, r3, #4
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	2bfe      	cmp	r3, #254	; 0xfe
 801550c:	f67f adb6 	bls.w	801507c <create_StepCountMapBack_queue+0x104>

		}

}
 8015510:	bf00      	nop
 8015512:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	200011f4 	.word	0x200011f4

08015520 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8015520:	b480      	push	{r7}
 8015522:	b083      	sub	sp, #12
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2200      	movs	r2, #0
 801552c:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2200      	movs	r2, #0
 8015532:	605a      	str	r2, [r3, #4]
}
 8015534:	bf00      	nop
 8015536:	370c      	adds	r7, #12
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr

08015540 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	460b      	mov	r3, r1
 801554a:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	685a      	ldr	r2, [r3, #4]
 8015550:	8879      	ldrh	r1, [r7, #2]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	3202      	adds	r2, #2
 8015556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	1c5a      	adds	r2, r3, #1
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801556c:	d102      	bne.n	8015574 <pushStack_walk+0x34>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2200      	movs	r2, #0
 8015572:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	685a      	ldr	r2, [r3, #4]
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	429a      	cmp	r2, r3
 801557e:	d103      	bne.n	8015588 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8015580:	4803      	ldr	r0, [pc, #12]	; (8015590 <pushStack_walk+0x50>)
 8015582:	f00c f87d 	bl	8021680 <puts>
        return;
 8015586:	bf00      	nop
    }
}
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}
 801558e:	bf00      	nop
 8015590:	08025010 	.word	0x08025010

08015594 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 801559c:	2300      	movs	r3, #0
 801559e:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	685a      	ldr	r2, [r3, #4]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d102      	bne.n	80155b2 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return MAX_WALKCOUNT_DIJKSTRA;
 80155ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155b0:	e014      	b.n	80155dc <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681a      	ldr	r2, [r3, #0]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	3202      	adds	r2, #2
 80155ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155be:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	1c5a      	adds	r2, r3, #1
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80155d2:	d102      	bne.n	80155da <popStack_walk+0x46>
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 80155da:	89fb      	ldrh	r3, [r7, #14]
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3714      	adds	r7, #20
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0

	int tt = 14;
 80155ee:	230e      	movs	r3, #14
 80155f0:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80155f2:	2300      	movs	r3, #0
 80155f4:	603b      	str	r3, [r7, #0]

	printf(
 80155f6:	487c      	ldr	r0, [pc, #496]	; (80157e8 <maze_display+0x200>)
 80155f8:	f00c f842 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80155fc:	230e      	movs	r3, #14
 80155fe:	607b      	str	r3, [r7, #4]
 8015600:	e06a      	b.n	80156d8 <maze_display+0xf0>

		printf("|%5d", walk_count[0][tt + 1]);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	3301      	adds	r3, #1
 8015606:	4a79      	ldr	r2, [pc, #484]	; (80157ec <maze_display+0x204>)
 8015608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801560c:	4619      	mov	r1, r3
 801560e:	4878      	ldr	r0, [pc, #480]	; (80157f0 <maze_display+0x208>)
 8015610:	f00b ff9a 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015614:	2300      	movs	r3, #0
 8015616:	603b      	str	r3, [r7, #0]
 8015618:	e030      	b.n	801567c <maze_display+0x94>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801561a:	4a76      	ldr	r2, [pc, #472]	; (80157f4 <maze_display+0x20c>)
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	330e      	adds	r3, #14
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	4413      	add	r3, r2
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	3201      	adds	r2, #1
 801562a:	2101      	movs	r1, #1
 801562c:	fa01 f202 	lsl.w	r2, r1, r2
 8015630:	4013      	ands	r3, r2
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	3201      	adds	r2, #1
 8015636:	2101      	movs	r1, #1
 8015638:	fa01 f202 	lsl.w	r2, r1, r2
 801563c:	4293      	cmp	r3, r2
 801563e:	d10d      	bne.n	801565c <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	1c5a      	adds	r2, r3, #1
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	3301      	adds	r3, #1
 8015648:	4968      	ldr	r1, [pc, #416]	; (80157ec <maze_display+0x204>)
 801564a:	0112      	lsls	r2, r2, #4
 801564c:	4413      	add	r3, r2
 801564e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015652:	4619      	mov	r1, r3
 8015654:	4866      	ldr	r0, [pc, #408]	; (80157f0 <maze_display+0x208>)
 8015656:	f00b ff77 	bl	8021548 <iprintf>
 801565a:	e00c      	b.n	8015676 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	1c5a      	adds	r2, r3, #1
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	3301      	adds	r3, #1
 8015664:	4961      	ldr	r1, [pc, #388]	; (80157ec <maze_display+0x204>)
 8015666:	0112      	lsls	r2, r2, #4
 8015668:	4413      	add	r3, r2
 801566a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801566e:	4619      	mov	r1, r3
 8015670:	4861      	ldr	r0, [pc, #388]	; (80157f8 <maze_display+0x210>)
 8015672:	f00b ff69 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	3301      	adds	r3, #1
 801567a:	603b      	str	r3, [r7, #0]
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	2b0e      	cmp	r3, #14
 8015680:	ddcb      	ble.n	801561a <maze_display+0x32>
			}
		}
		printf("|\n");
 8015682:	485e      	ldr	r0, [pc, #376]	; (80157fc <maze_display+0x214>)
 8015684:	f00b fffc 	bl	8021680 <puts>
		if (tt <= -1) {
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2b00      	cmp	r3, #0
 801568c:	db29      	blt.n	80156e2 <maze_display+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801568e:	2300      	movs	r3, #0
 8015690:	603b      	str	r3, [r7, #0]
 8015692:	e018      	b.n	80156c6 <maze_display+0xde>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 8015694:	4a57      	ldr	r2, [pc, #348]	; (80157f4 <maze_display+0x20c>)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801569c:	2101      	movs	r1, #1
 801569e:	683a      	ldr	r2, [r7, #0]
 80156a0:	fa01 f202 	lsl.w	r2, r1, r2
 80156a4:	4013      	ands	r3, r2
 80156a6:	2101      	movs	r1, #1
 80156a8:	683a      	ldr	r2, [r7, #0]
 80156aa:	fa01 f202 	lsl.w	r2, r1, r2
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d103      	bne.n	80156ba <maze_display+0xd2>
				printf("+-----");
 80156b2:	4853      	ldr	r0, [pc, #332]	; (8015800 <maze_display+0x218>)
 80156b4:	f00b ff48 	bl	8021548 <iprintf>
 80156b8:	e002      	b.n	80156c0 <maze_display+0xd8>
			}else{
				printf("+     ");
 80156ba:	4852      	ldr	r0, [pc, #328]	; (8015804 <maze_display+0x21c>)
 80156bc:	f00b ff44 	bl	8021548 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	3301      	adds	r3, #1
 80156c4:	603b      	str	r3, [r7, #0]
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2b0f      	cmp	r3, #15
 80156ca:	dde3      	ble.n	8015694 <maze_display+0xac>
			}
		}

		printf("+\n");
 80156cc:	484e      	ldr	r0, [pc, #312]	; (8015808 <maze_display+0x220>)
 80156ce:	f00b ffd7 	bl	8021680 <puts>
	for (tt = 14;tt >= -1;tt--){
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	3b01      	subs	r3, #1
 80156d6:	607b      	str	r3, [r7, #4]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156de:	da90      	bge.n	8015602 <maze_display+0x1a>
 80156e0:	e000      	b.n	80156e4 <maze_display+0xfc>
			break;
 80156e2:	bf00      	nop

	}

	printf(
 80156e4:	4849      	ldr	r0, [pc, #292]	; (801580c <maze_display+0x224>)
 80156e6:	f00b ffcb 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80156ea:	483f      	ldr	r0, [pc, #252]	; (80157e8 <maze_display+0x200>)
 80156ec:	f00b ffc8 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 80156f0:	230e      	movs	r3, #14
 80156f2:	607b      	str	r3, [r7, #4]
 80156f4:	e06b      	b.n	80157ce <maze_display+0x1e6>
		printf("|%5d", walk_count[0][tt + 1]);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	3301      	adds	r3, #1
 80156fa:	4a3c      	ldr	r2, [pc, #240]	; (80157ec <maze_display+0x204>)
 80156fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015700:	4619      	mov	r1, r3
 8015702:	483b      	ldr	r0, [pc, #236]	; (80157f0 <maze_display+0x208>)
 8015704:	f00b ff20 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015708:	2300      	movs	r3, #0
 801570a:	603b      	str	r3, [r7, #0]
 801570c:	e030      	b.n	8015770 <maze_display+0x188>
			if ((wall.column_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801570e:	4a39      	ldr	r2, [pc, #228]	; (80157f4 <maze_display+0x20c>)
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	332c      	adds	r3, #44	; 0x2c
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	4413      	add	r3, r2
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	687a      	ldr	r2, [r7, #4]
 801571c:	3201      	adds	r2, #1
 801571e:	2101      	movs	r1, #1
 8015720:	fa01 f202 	lsl.w	r2, r1, r2
 8015724:	4013      	ands	r3, r2
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	3201      	adds	r2, #1
 801572a:	2101      	movs	r1, #1
 801572c:	fa01 f202 	lsl.w	r2, r1, r2
 8015730:	4293      	cmp	r3, r2
 8015732:	d10d      	bne.n	8015750 <maze_display+0x168>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	1c5a      	adds	r2, r3, #1
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	3301      	adds	r3, #1
 801573c:	492b      	ldr	r1, [pc, #172]	; (80157ec <maze_display+0x204>)
 801573e:	0112      	lsls	r2, r2, #4
 8015740:	4413      	add	r3, r2
 8015742:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015746:	4619      	mov	r1, r3
 8015748:	4829      	ldr	r0, [pc, #164]	; (80157f0 <maze_display+0x208>)
 801574a:	f00b fefd 	bl	8021548 <iprintf>
 801574e:	e00c      	b.n	801576a <maze_display+0x182>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	1c5a      	adds	r2, r3, #1
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	3301      	adds	r3, #1
 8015758:	4924      	ldr	r1, [pc, #144]	; (80157ec <maze_display+0x204>)
 801575a:	0112      	lsls	r2, r2, #4
 801575c:	4413      	add	r3, r2
 801575e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015762:	4619      	mov	r1, r3
 8015764:	4824      	ldr	r0, [pc, #144]	; (80157f8 <maze_display+0x210>)
 8015766:	f00b feef 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	3301      	adds	r3, #1
 801576e:	603b      	str	r3, [r7, #0]
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	2b0e      	cmp	r3, #14
 8015774:	ddcb      	ble.n	801570e <maze_display+0x126>
			}
		}
		printf("|\n");
 8015776:	4821      	ldr	r0, [pc, #132]	; (80157fc <maze_display+0x214>)
 8015778:	f00b ff82 	bl	8021680 <puts>
		if (tt <= -1) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	db2a      	blt.n	80157d8 <maze_display+0x1f0>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015782:	2300      	movs	r3, #0
 8015784:	603b      	str	r3, [r7, #0]
 8015786:	e019      	b.n	80157bc <maze_display+0x1d4>
			if ((wall.row_look[tt] & (1 << ss)) == (1 << ss)){
 8015788:	4a1a      	ldr	r2, [pc, #104]	; (80157f4 <maze_display+0x20c>)
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	331e      	adds	r3, #30
 801578e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015792:	2101      	movs	r1, #1
 8015794:	683a      	ldr	r2, [r7, #0]
 8015796:	fa01 f202 	lsl.w	r2, r1, r2
 801579a:	4013      	ands	r3, r2
 801579c:	2101      	movs	r1, #1
 801579e:	683a      	ldr	r2, [r7, #0]
 80157a0:	fa01 f202 	lsl.w	r2, r1, r2
 80157a4:	4293      	cmp	r3, r2
 80157a6:	d103      	bne.n	80157b0 <maze_display+0x1c8>
				printf("+-----");
 80157a8:	4815      	ldr	r0, [pc, #84]	; (8015800 <maze_display+0x218>)
 80157aa:	f00b fecd 	bl	8021548 <iprintf>
 80157ae:	e002      	b.n	80157b6 <maze_display+0x1ce>
			}else{
				printf("+     ");
 80157b0:	4814      	ldr	r0, [pc, #80]	; (8015804 <maze_display+0x21c>)
 80157b2:	f00b fec9 	bl	8021548 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	3301      	adds	r3, #1
 80157ba:	603b      	str	r3, [r7, #0]
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	2b0f      	cmp	r3, #15
 80157c0:	dde2      	ble.n	8015788 <maze_display+0x1a0>
			}
		}
		printf("+\n");
 80157c2:	4811      	ldr	r0, [pc, #68]	; (8015808 <maze_display+0x220>)
 80157c4:	f00b ff5c 	bl	8021680 <puts>
	for (tt = 14;tt >= -1;tt--){
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	3b01      	subs	r3, #1
 80157cc:	607b      	str	r3, [r7, #4]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157d4:	da8f      	bge.n	80156f6 <maze_display+0x10e>
 80157d6:	e000      	b.n	80157da <maze_display+0x1f2>
			break;
 80157d8:	bf00      	nop
	}

	printf(
 80157da:	480c      	ldr	r0, [pc, #48]	; (801580c <maze_display+0x224>)
 80157dc:	f00b ff50 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 80157e0:	bf00      	nop
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	0802501c 	.word	0x0802501c
 80157ec:	200011f4 	.word	0x200011f4
 80157f0:	08025080 	.word	0x08025080
 80157f4:	20001010 	.word	0x20001010
 80157f8:	08025088 	.word	0x08025088
 80157fc:	08025090 	.word	0x08025090
 8015800:	08025094 	.word	0x08025094
 8015804:	0802509c 	.word	0x0802509c
 8015808:	080250a4 	.word	0x080250a4
 801580c:	080250a8 	.word	0x080250a8

08015810 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0

	int tt = 14;
 8015816:	230e      	movs	r3, #14
 8015818:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	603b      	str	r3, [r7, #0]

	printf(
 801581e:	4863      	ldr	r0, [pc, #396]	; (80159ac <maze_display_Dijkstra+0x19c>)
 8015820:	f00b ff2e 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015824:	230e      	movs	r3, #14
 8015826:	607b      	str	r3, [r7, #4]
 8015828:	e066      	b.n	80158f8 <maze_display_Dijkstra+0xe8>

		printf("|   ");//walk_count[tt + 1]
 801582a:	4861      	ldr	r0, [pc, #388]	; (80159b0 <maze_display_Dijkstra+0x1a0>)
 801582c:	f00b fe8c 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015830:	2300      	movs	r3, #0
 8015832:	603b      	str	r3, [r7, #0]
 8015834:	e028      	b.n	8015888 <maze_display_Dijkstra+0x78>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8015836:	4a5f      	ldr	r2, [pc, #380]	; (80159b4 <maze_display_Dijkstra+0x1a4>)
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	330e      	adds	r3, #14
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	4413      	add	r3, r2
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	3201      	adds	r2, #1
 8015846:	2101      	movs	r1, #1
 8015848:	fa01 f202 	lsl.w	r2, r1, r2
 801584c:	4013      	ands	r3, r2
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	3201      	adds	r2, #1
 8015852:	2101      	movs	r1, #1
 8015854:	fa01 f202 	lsl.w	r2, r1, r2
 8015858:	4293      	cmp	r3, r2
 801585a:	d103      	bne.n	8015864 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 801585c:	4856      	ldr	r0, [pc, #344]	; (80159b8 <maze_display_Dijkstra+0x1a8>)
 801585e:	f00b fe73 	bl	8021548 <iprintf>
 8015862:	e00e      	b.n	8015882 <maze_display_Dijkstra+0x72>
			}else{
				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	1c5a      	adds	r2, r3, #1
 8015868:	4954      	ldr	r1, [pc, #336]	; (80159bc <maze_display_Dijkstra+0x1ac>)
 801586a:	4613      	mov	r3, r2
 801586c:	011b      	lsls	r3, r3, #4
 801586e:	1a9b      	subs	r3, r3, r2
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	4413      	add	r3, r2
 8015874:	33f0      	adds	r3, #240	; 0xf0
 8015876:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801587a:	4619      	mov	r1, r3
 801587c:	4850      	ldr	r0, [pc, #320]	; (80159c0 <maze_display_Dijkstra+0x1b0>)
 801587e:	f00b fe63 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	3301      	adds	r3, #1
 8015886:	603b      	str	r3, [r7, #0]
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	2b0e      	cmp	r3, #14
 801588c:	ddd3      	ble.n	8015836 <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 801588e:	484d      	ldr	r0, [pc, #308]	; (80159c4 <maze_display_Dijkstra+0x1b4>)
 8015890:	f00b fef6 	bl	8021680 <puts>
		if (tt <= -1) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	db33      	blt.n	8015902 <maze_display_Dijkstra+0xf2>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801589a:	2300      	movs	r3, #0
 801589c:	603b      	str	r3, [r7, #0]
 801589e:	e022      	b.n	80158e6 <maze_display_Dijkstra+0xd6>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 80158a0:	4a44      	ldr	r2, [pc, #272]	; (80159b4 <maze_display_Dijkstra+0x1a4>)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158a8:	2101      	movs	r1, #1
 80158aa:	683a      	ldr	r2, [r7, #0]
 80158ac:	fa01 f202 	lsl.w	r2, r1, r2
 80158b0:	4013      	ands	r3, r2
 80158b2:	2101      	movs	r1, #1
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	fa01 f202 	lsl.w	r2, r1, r2
 80158ba:	4293      	cmp	r3, r2
 80158bc:	d103      	bne.n	80158c6 <maze_display_Dijkstra+0xb6>
				printf("+-----");
 80158be:	4842      	ldr	r0, [pc, #264]	; (80159c8 <maze_display_Dijkstra+0x1b8>)
 80158c0:	f00b fe42 	bl	8021548 <iprintf>
 80158c4:	e00c      	b.n	80158e0 <maze_display_Dijkstra+0xd0>
			}else{
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 80158c6:	493d      	ldr	r1, [pc, #244]	; (80159bc <maze_display_Dijkstra+0x1ac>)
 80158c8:	683a      	ldr	r2, [r7, #0]
 80158ca:	4613      	mov	r3, r2
 80158cc:	011b      	lsls	r3, r3, #4
 80158ce:	1a9b      	subs	r3, r3, r2
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	4413      	add	r3, r2
 80158d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80158d8:	4619      	mov	r1, r3
 80158da:	483c      	ldr	r0, [pc, #240]	; (80159cc <maze_display_Dijkstra+0x1bc>)
 80158dc:	f00b fe34 	bl	8021548 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	3301      	adds	r3, #1
 80158e4:	603b      	str	r3, [r7, #0]
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	2b0f      	cmp	r3, #15
 80158ea:	ddd9      	ble.n	80158a0 <maze_display_Dijkstra+0x90>
			}
		}

		printf("+\n");
 80158ec:	4838      	ldr	r0, [pc, #224]	; (80159d0 <maze_display_Dijkstra+0x1c0>)
 80158ee:	f00b fec7 	bl	8021680 <puts>
	for (tt = 14;tt >= -1;tt--){
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	3b01      	subs	r3, #1
 80158f6:	607b      	str	r3, [r7, #4]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158fe:	da94      	bge.n	801582a <maze_display_Dijkstra+0x1a>
 8015900:	e000      	b.n	8015904 <maze_display_Dijkstra+0xf4>
			break;
 8015902:	bf00      	nop

	}

	printf(
 8015904:	4833      	ldr	r0, [pc, #204]	; (80159d4 <maze_display_Dijkstra+0x1c4>)
 8015906:	f00b febb 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801590a:	4828      	ldr	r0, [pc, #160]	; (80159ac <maze_display_Dijkstra+0x19c>)
 801590c:	f00b feb8 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015910:	230e      	movs	r3, #14
 8015912:	607b      	str	r3, [r7, #4]
 8015914:	e03c      	b.n	8015990 <maze_display_Dijkstra+0x180>

		printf("|   ");//walk_count[tt + 1]
 8015916:	4826      	ldr	r0, [pc, #152]	; (80159b0 <maze_display_Dijkstra+0x1a0>)
 8015918:	f00b fe16 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801591c:	2300      	movs	r3, #0
 801591e:	603b      	str	r3, [r7, #0]
 8015920:	e011      	b.n	8015946 <maze_display_Dijkstra+0x136>

				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	4925      	ldr	r1, [pc, #148]	; (80159bc <maze_display_Dijkstra+0x1ac>)
 8015928:	4613      	mov	r3, r2
 801592a:	011b      	lsls	r3, r3, #4
 801592c:	1a9b      	subs	r3, r3, r2
 801592e:	683a      	ldr	r2, [r7, #0]
 8015930:	4413      	add	r3, r2
 8015932:	33f0      	adds	r3, #240	; 0xf0
 8015934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015938:	4619      	mov	r1, r3
 801593a:	4821      	ldr	r0, [pc, #132]	; (80159c0 <maze_display_Dijkstra+0x1b0>)
 801593c:	f00b fe04 	bl	8021548 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	3301      	adds	r3, #1
 8015944:	603b      	str	r3, [r7, #0]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	2b0e      	cmp	r3, #14
 801594a:	ddea      	ble.n	8015922 <maze_display_Dijkstra+0x112>

		}
		printf("   |\n");
 801594c:	481d      	ldr	r0, [pc, #116]	; (80159c4 <maze_display_Dijkstra+0x1b4>)
 801594e:	f00b fe97 	bl	8021680 <puts>
		if (tt <= -1) {
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2b00      	cmp	r3, #0
 8015956:	db20      	blt.n	801599a <maze_display_Dijkstra+0x18a>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015958:	2300      	movs	r3, #0
 801595a:	603b      	str	r3, [r7, #0]
 801595c:	e00f      	b.n	801597e <maze_display_Dijkstra+0x16e>
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 801595e:	4917      	ldr	r1, [pc, #92]	; (80159bc <maze_display_Dijkstra+0x1ac>)
 8015960:	683a      	ldr	r2, [r7, #0]
 8015962:	4613      	mov	r3, r2
 8015964:	011b      	lsls	r3, r3, #4
 8015966:	1a9b      	subs	r3, r3, r2
 8015968:	687a      	ldr	r2, [r7, #4]
 801596a:	4413      	add	r3, r2
 801596c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015970:	4619      	mov	r1, r3
 8015972:	4816      	ldr	r0, [pc, #88]	; (80159cc <maze_display_Dijkstra+0x1bc>)
 8015974:	f00b fde8 	bl	8021548 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	3301      	adds	r3, #1
 801597c:	603b      	str	r3, [r7, #0]
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	2b0f      	cmp	r3, #15
 8015982:	ddec      	ble.n	801595e <maze_display_Dijkstra+0x14e>
		}

		printf("+\n");
 8015984:	4812      	ldr	r0, [pc, #72]	; (80159d0 <maze_display_Dijkstra+0x1c0>)
 8015986:	f00b fe7b 	bl	8021680 <puts>
	for (tt = 14;tt >= -1;tt--){
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	3b01      	subs	r3, #1
 801598e:	607b      	str	r3, [r7, #4]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015996:	dabe      	bge.n	8015916 <maze_display_Dijkstra+0x106>
 8015998:	e000      	b.n	801599c <maze_display_Dijkstra+0x18c>
			break;
 801599a:	bf00      	nop

	}

	printf(
 801599c:	480d      	ldr	r0, [pc, #52]	; (80159d4 <maze_display_Dijkstra+0x1c4>)
 801599e:	f00b fe6f 	bl	8021680 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80159a2:	bf00      	nop
 80159a4:	3708      	adds	r7, #8
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	0802501c 	.word	0x0802501c
 80159b0:	0802510c 	.word	0x0802510c
 80159b4:	20001010 	.word	0x20001010
 80159b8:	08025114 	.word	0x08025114
 80159bc:	200013f4 	.word	0x200013f4
 80159c0:	0802511c 	.word	0x0802511c
 80159c4:	08025124 	.word	0x08025124
 80159c8:	08025094 	.word	0x08025094
 80159cc:	0802512c 	.word	0x0802512c
 80159d0:	080250a4 	.word	0x080250a4
 80159d4:	080250a8 	.word	0x080250a8

080159d8 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	4603      	mov	r3, r0
 80159e0:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80159e6:	2300      	movs	r3, #0
 80159e8:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 80159ea:	2300      	movs	r3, #0
 80159ec:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 80159ee:	4b71      	ldr	r3, [pc, #452]	; (8015bb4 <mode_decision+0x1dc>)
 80159f0:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 80159f2:	79fb      	ldrb	r3, [r7, #7]
 80159f4:	f003 030f 	and.w	r3, r3, #15
 80159f8:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80159fa:	79fb      	ldrb	r3, [r7, #7]
 80159fc:	091b      	lsrs	r3, r3, #4
 80159fe:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a00:	7bbb      	ldrb	r3, [r7, #14]
 8015a02:	011b      	lsls	r3, r3, #4
 8015a04:	b2da      	uxtb	r2, r3
 8015a06:	7bfb      	ldrb	r3, [r7, #15]
 8015a08:	4413      	add	r3, r2
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7f2 f87b 	bl	8007b08 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8015a12:	e07f      	b.n	8015b14 <mode_decision+0x13c>
				HAL_Delay(1);
 8015a14:	2001      	movs	r0, #1
 8015a16:	f003 fe45 	bl	80196a4 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8015a1a:	4b67      	ldr	r3, [pc, #412]	; (8015bb8 <mode_decision+0x1e0>)
 8015a1c:	edd3 7a00 	vldr	s15, [r3]
 8015a20:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2c:	d813      	bhi.n	8015a56 <mode_decision+0x7e>
					if (main_modeR == 15) {
 8015a2e:	7bfb      	ldrb	r3, [r7, #15]
 8015a30:	2b0f      	cmp	r3, #15
 8015a32:	d102      	bne.n	8015a3a <mode_decision+0x62>
						main_modeR = 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	73fb      	strb	r3, [r7, #15]
 8015a38:	e002      	b.n	8015a40 <mode_decision+0x68>
					} else {
						main_modeR++;
 8015a3a:	7bfb      	ldrb	r3, [r7, #15]
 8015a3c:	3301      	adds	r3, #1
 8015a3e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015a40:	f7eb faac 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
 8015a46:	011b      	lsls	r3, r3, #4
 8015a48:	b2da      	uxtb	r2, r3
 8015a4a:	7bfb      	ldrb	r3, [r7, #15]
 8015a4c:	4413      	add	r3, r2
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f2 f859 	bl	8007b08 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8015a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a5a:	eeb1 7a67 	vneg.f32	s14, s15
 8015a5e:	4b56      	ldr	r3, [pc, #344]	; (8015bb8 <mode_decision+0x1e0>)
 8015a60:	edd3 7a00 	vldr	s15, [r3]
 8015a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a6c:	db13      	blt.n	8015a96 <mode_decision+0xbe>
					if (main_modeR == 0) {
 8015a6e:	7bfb      	ldrb	r3, [r7, #15]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d102      	bne.n	8015a7a <mode_decision+0xa2>
						main_modeR = 15;
 8015a74:	230f      	movs	r3, #15
 8015a76:	73fb      	strb	r3, [r7, #15]
 8015a78:	e002      	b.n	8015a80 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8015a7a:	7bfb      	ldrb	r3, [r7, #15]
 8015a7c:	3b01      	subs	r3, #1
 8015a7e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015a80:	f7eb fa8c 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
 8015a86:	011b      	lsls	r3, r3, #4
 8015a88:	b2da      	uxtb	r2, r3
 8015a8a:	7bfb      	ldrb	r3, [r7, #15]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7f2 f839 	bl	8007b08 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8015a96:	4b49      	ldr	r3, [pc, #292]	; (8015bbc <mode_decision+0x1e4>)
 8015a98:	edd3 7a00 	vldr	s15, [r3]
 8015a9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8015aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aa8:	d813      	bhi.n	8015ad2 <mode_decision+0xfa>
					if (main_modeL == 15) {
 8015aaa:	7bbb      	ldrb	r3, [r7, #14]
 8015aac:	2b0f      	cmp	r3, #15
 8015aae:	d102      	bne.n	8015ab6 <mode_decision+0xde>
						main_modeL = 0;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	73bb      	strb	r3, [r7, #14]
 8015ab4:	e002      	b.n	8015abc <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8015ab6:	7bbb      	ldrb	r3, [r7, #14]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015abc:	f7eb fa6e 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	011b      	lsls	r3, r3, #4
 8015ac4:	b2da      	uxtb	r2, r3
 8015ac6:	7bfb      	ldrb	r3, [r7, #15]
 8015ac8:	4413      	add	r3, r2
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f2 f81b 	bl	8007b08 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8015ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8015ad6:	eeb1 7a67 	vneg.f32	s14, s15
 8015ada:	4b38      	ldr	r3, [pc, #224]	; (8015bbc <mode_decision+0x1e4>)
 8015adc:	edd3 7a00 	vldr	s15, [r3]
 8015ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae8:	da00      	bge.n	8015aec <mode_decision+0x114>
 8015aea:	e013      	b.n	8015b14 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8015aec:	7bbb      	ldrb	r3, [r7, #14]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d102      	bne.n	8015af8 <mode_decision+0x120>
						main_modeL = 15;
 8015af2:	230f      	movs	r3, #15
 8015af4:	73bb      	strb	r3, [r7, #14]
 8015af6:	e002      	b.n	8015afe <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015af8:	7bbb      	ldrb	r3, [r7, #14]
 8015afa:	3b01      	subs	r3, #1
 8015afc:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015afe:	f7eb fa4d 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015b02:	7bbb      	ldrb	r3, [r7, #14]
 8015b04:	011b      	lsls	r3, r3, #4
 8015b06:	b2da      	uxtb	r2, r3
 8015b08:	7bfb      	ldrb	r3, [r7, #15]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7f1 fffa 	bl	8007b08 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8015b14:	4b2a      	ldr	r3, [pc, #168]	; (8015bc0 <mode_decision+0x1e8>)
 8015b16:	edd3 7a00 	vldr	s15, [r3]
 8015b1a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8015bc4 <mode_decision+0x1ec>
 8015b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b26:	f67f af75 	bls.w	8015a14 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8015b2a:	f7f1 ffb3 	bl	8007a94 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015b2e:	2001      	movs	r0, #1
 8015b30:	f7f2 f89a 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015b34:	2001      	movs	r0, #1
 8015b36:	f7f2 f8a9 	bl	8007c8c <pl_l_blue_LED>
			HAL_Delay(1000);
 8015b3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015b3e:	f003 fdb1 	bl	80196a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b42:	e011      	b.n	8015b68 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015b44:	4b1e      	ldr	r3, [pc, #120]	; (8015bc0 <mode_decision+0x1e8>)
 8015b46:	edd3 7a00 	vldr	s15, [r3]
 8015b4a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015bc4 <mode_decision+0x1ec>
 8015b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b56:	db04      	blt.n	8015b62 <mode_decision+0x18a>
					main_modeL = 0;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	73fb      	strb	r3, [r7, #15]
					break;
 8015b60:	e013      	b.n	8015b8a <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015b62:	2001      	movs	r0, #1
 8015b64:	f003 fd9e 	bl	80196a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b68:	4b17      	ldr	r3, [pc, #92]	; (8015bc8 <mode_decision+0x1f0>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b70:	dde8      	ble.n	8015b44 <mode_decision+0x16c>
 8015b72:	4b15      	ldr	r3, [pc, #84]	; (8015bc8 <mode_decision+0x1f0>)
 8015b74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015b78:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b7c:	dde2      	ble.n	8015b44 <mode_decision+0x16c>
 8015b7e:	4b12      	ldr	r3, [pc, #72]	; (8015bc8 <mode_decision+0x1f0>)
 8015b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015b84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b88:	dddc      	ble.n	8015b44 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	f7f2 f86c 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015b90:	2000      	movs	r0, #0
 8015b92:	f7f2 f87b 	bl	8007c8c <pl_l_blue_LED>
			pl_yellow_LED_off();
 8015b96:	f7f1 ff7d 	bl	8007a94 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8015b9a:	7bbb      	ldrb	r3, [r7, #14]
 8015b9c:	011b      	lsls	r3, r3, #4
 8015b9e:	b25a      	sxtb	r2, r3
 8015ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	b25b      	sxtb	r3, r3
 8015ba8:	737b      	strb	r3, [r7, #13]

return main_mode;
 8015baa:	7b7b      	ldrb	r3, [r7, #13]
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3710      	adds	r7, #16
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	41200000 	.word	0x41200000
 8015bb8:	20000224 	.word	0x20000224
 8015bbc:	20000220 	.word	0x20000220
 8015bc0:	20000274 	.word	0x20000274
 8015bc4:	43c80000 	.word	0x43c80000
 8015bc8:	200002bc 	.word	0x200002bc

08015bcc <mode_execution>:


void mode_execution(unsigned char now_mode){
 8015bcc:	b590      	push	{r4, r7, lr}
 8015bce:	b0d7      	sub	sp, #348	; 0x15c
 8015bd0:	af52      	add	r7, sp, #328	; 0x148
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8015bde:	79fb      	ldrb	r3, [r7, #7]
 8015be0:	f003 030f 	and.w	r3, r3, #15
 8015be4:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015be6:	79fb      	ldrb	r3, [r7, #7]
 8015be8:	091b      	lsrs	r3, r3, #4
 8015bea:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8015bec:	7bbb      	ldrb	r3, [r7, #14]
 8015bee:	2b0f      	cmp	r3, #15
 8015bf0:	f200 809e 	bhi.w	8015d30 <mode_execution+0x164>
 8015bf4:	a201      	add	r2, pc, #4	; (adr r2, 8015bfc <mode_execution+0x30>)
 8015bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bfa:	bf00      	nop
 8015bfc:	08015c3d 	.word	0x08015c3d
 8015c00:	08015c47 	.word	0x08015c47
 8015c04:	08015d2f 	.word	0x08015d2f
 8015c08:	08015c51 	.word	0x08015c51
 8015c0c:	08015c5b 	.word	0x08015c5b
 8015c10:	08015c65 	.word	0x08015c65
 8015c14:	08015c95 	.word	0x08015c95
 8015c18:	08015c9f 	.word	0x08015c9f
 8015c1c:	08015ccf 	.word	0x08015ccf
 8015c20:	08015cff 	.word	0x08015cff
 8015c24:	08015d2f 	.word	0x08015d2f
 8015c28:	08015d2f 	.word	0x08015d2f
 8015c2c:	08015d2f 	.word	0x08015d2f
 8015c30:	08015d2f 	.word	0x08015d2f
 8015c34:	08015d2f 	.word	0x08015d2f
 8015c38:	08015d2f 	.word	0x08015d2f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f000 f886 	bl	8015d50 <mode_PLtest>
	break;
 8015c44:	e074      	b.n	8015d30 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8015c46:	7bfb      	ldrb	r3, [r7, #15]
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f000 fa69 	bl	8016120 <mode_Running>
	break;
 8015c4e:	e06f      	b.n	8015d30 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015c50:	7bfb      	ldrb	r3, [r7, #15]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f000 fc96 	bl	8016584 <mode_Tuning0>
	break;
 8015c58:	e06a      	b.n	8015d30 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f001 f83d 	bl	8016cdc <mode_WallSensorTuning>
	break;
 8015c62:	e065      	b.n	8015d30 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
 8015c66:	4c34      	ldr	r4, [pc, #208]	; (8015d38 <mode_execution+0x16c>)
 8015c68:	2201      	movs	r2, #1
 8015c6a:	9251      	str	r2, [sp, #324]	; 0x144
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	9250      	str	r2, [sp, #320]	; 0x140
 8015c70:	2201      	movs	r2, #1
 8015c72:	924f      	str	r2, [sp, #316]	; 0x13c
 8015c74:	934e      	str	r3, [sp, #312]	; 0x138
 8015c76:	4668      	mov	r0, sp
 8015c78:	f104 0310 	add.w	r3, r4, #16
 8015c7c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015c80:	4619      	mov	r1, r3
 8015c82:	f00a ffe1 	bl	8020c48 <memcpy>
 8015c86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015c8a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015d3c <mode_execution+0x170>
 8015c8e:	f7f8 fd27 	bl	800e6e0 <testturning>
	break;
 8015c92:	e04d      	b.n	8015d30 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f001 fa58 	bl	801714c <mode_WallSensorTuning_fast>
	break;
 8015c9c:	e048      	b.n	8015d30 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ca0:	4c27      	ldr	r4, [pc, #156]	; (8015d40 <mode_execution+0x174>)
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	9251      	str	r2, [sp, #324]	; 0x144
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	9250      	str	r2, [sp, #320]	; 0x140
 8015caa:	2201      	movs	r2, #1
 8015cac:	924f      	str	r2, [sp, #316]	; 0x13c
 8015cae:	934e      	str	r3, [sp, #312]	; 0x138
 8015cb0:	4668      	mov	r0, sp
 8015cb2:	f104 0310 	add.w	r3, r4, #16
 8015cb6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cba:	4619      	mov	r1, r3
 8015cbc:	f00a ffc4 	bl	8020c48 <memcpy>
 8015cc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cc4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015d44 <mode_execution+0x178>
 8015cc8:	f7f8 fd0a 	bl	800e6e0 <testturning>
	break;
 8015ccc:	e030      	b.n	8015d30 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015cce:	7bfb      	ldrb	r3, [r7, #15]
 8015cd0:	4c1d      	ldr	r4, [pc, #116]	; (8015d48 <mode_execution+0x17c>)
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	9251      	str	r2, [sp, #324]	; 0x144
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	9250      	str	r2, [sp, #320]	; 0x140
 8015cda:	2201      	movs	r2, #1
 8015cdc:	924f      	str	r2, [sp, #316]	; 0x13c
 8015cde:	934e      	str	r3, [sp, #312]	; 0x138
 8015ce0:	4668      	mov	r0, sp
 8015ce2:	f104 0310 	add.w	r3, r4, #16
 8015ce6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cea:	4619      	mov	r1, r3
 8015cec:	f00a ffac 	bl	8020c48 <memcpy>
 8015cf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cf4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015d44 <mode_execution+0x178>
 8015cf8:	f7f8 fcf2 	bl	800e6e0 <testturning>
	break;
 8015cfc:	e018      	b.n	8015d30 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015cfe:	7bfb      	ldrb	r3, [r7, #15]
 8015d00:	4c12      	ldr	r4, [pc, #72]	; (8015d4c <mode_execution+0x180>)
 8015d02:	2201      	movs	r2, #1
 8015d04:	9251      	str	r2, [sp, #324]	; 0x144
 8015d06:	2201      	movs	r2, #1
 8015d08:	9250      	str	r2, [sp, #320]	; 0x140
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	924f      	str	r2, [sp, #316]	; 0x13c
 8015d0e:	934e      	str	r3, [sp, #312]	; 0x138
 8015d10:	4668      	mov	r0, sp
 8015d12:	f104 0310 	add.w	r3, r4, #16
 8015d16:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	f00a ff94 	bl	8020c48 <memcpy>
 8015d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d24:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015d44 <mode_execution+0x178>
 8015d28:	f7f8 fcda 	bl	800e6e0 <testturning>
	break;
 8015d2c:	e000      	b.n	8015d30 <mode_execution+0x164>
	break;
 8015d2e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015d30:	bf00      	nop
 8015d32:	3714      	adds	r7, #20
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd90      	pop	{r4, r7, pc}
 8015d38:	2000f81c 	.word	0x2000f81c
 8015d3c:	3f028f5c 	.word	0x3f028f5c
 8015d40:	2000f964 	.word	0x2000f964
 8015d44:	3f7d70a4 	.word	0x3f7d70a4
 8015d48:	2000faac 	.word	0x2000faac
 8015d4c:	2000fbf4 	.word	0x2000fbf4

08015d50 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d54:	b092      	sub	sp, #72	; 0x48
 8015d56:	af0a      	add	r7, sp, #40	; 0x28
 8015d58:	4603      	mov	r3, r0
 8015d5a:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	61fb      	str	r3, [r7, #28]
 8015d60:	2300      	movs	r3, #0
 8015d62:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015d64:	7dfb      	ldrb	r3, [r7, #23]
 8015d66:	2b0f      	cmp	r3, #15
 8015d68:	f200 81d2 	bhi.w	8016110 <mode_PLtest+0x3c0>
 8015d6c:	a201      	add	r2, pc, #4	; (adr r2, 8015d74 <mode_PLtest+0x24>)
 8015d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d72:	bf00      	nop
 8015d74:	0801610f 	.word	0x0801610f
 8015d78:	08015db5 	.word	0x08015db5
 8015d7c:	08015de7 	.word	0x08015de7
 8015d80:	08015e63 	.word	0x08015e63
 8015d84:	08015ec7 	.word	0x08015ec7
 8015d88:	08015f47 	.word	0x08015f47
 8015d8c:	08015f4d 	.word	0x08015f4d
 8015d90:	08016111 	.word	0x08016111
 8015d94:	08016111 	.word	0x08016111
 8015d98:	08015fd3 	.word	0x08015fd3
 8015d9c:	0801603b 	.word	0x0801603b
 8015da0:	080160c1 	.word	0x080160c1
 8015da4:	08016111 	.word	0x08016111
 8015da8:	08016111 	.word	0x08016111
 8015dac:	08016111 	.word	0x08016111
 8015db0:	08016109 	.word	0x08016109
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015db4:	4bbb      	ldr	r3, [pc, #748]	; (80160a4 <mode_PLtest+0x354>)
 8015db6:	6819      	ldr	r1, [r3, #0]
 8015db8:	4bba      	ldr	r3, [pc, #744]	; (80160a4 <mode_PLtest+0x354>)
 8015dba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015dbc:	4bb9      	ldr	r3, [pc, #740]	; (80160a4 <mode_PLtest+0x354>)
 8015dbe:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015dc2:	4bb8      	ldr	r3, [pc, #736]	; (80160a4 <mode_PLtest+0x354>)
 8015dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015dc8:	4ab6      	ldr	r2, [pc, #728]	; (80160a4 <mode_PLtest+0x354>)
 8015dca:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8015dce:	9201      	str	r2, [sp, #4]
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	4623      	mov	r3, r4
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	48b4      	ldr	r0, [pc, #720]	; (80160a8 <mode_PLtest+0x358>)
 8015dd8:	f00b fbb6 	bl	8021548 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8015ddc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015de0:	f7f2 febe 	bl	8008b60 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015de4:	e7e6      	b.n	8015db4 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8015de6:	2001      	movs	r0, #1
 8015de8:	f7f1 ff3e 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015dec:	2001      	movs	r0, #1
 8015dee:	f7f1 ff4d 	bl	8007c8c <pl_l_blue_LED>
		record_mode = 1;
 8015df2:	4bae      	ldr	r3, [pc, #696]	; (80160ac <mode_PLtest+0x35c>)
 8015df4:	2201      	movs	r2, #1
 8015df6:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015df8:	f44f 7161 	mov.w	r1, #900	; 0x384
 8015dfc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015e00:	f7f2 fc36 	bl	8008670 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8015e04:	2001      	movs	r0, #1
 8015e06:	f7f2 fbf1 	bl	80085ec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8015e0a:	2001      	movs	r0, #1
 8015e0c:	f7f2 fbc6 	bl	800859c <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015e10:	f7f2 fc12 	bl	8008638 <pl_DriveMotor_start>
		wait_ms(2500);
 8015e14:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015e18:	f7f2 fea2 	bl	8008b60 <wait_ms>
		pl_DriveMotor_stop();
 8015e1c:	f7f2 fc1a 	bl	8008654 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015e20:	2000      	movs	r0, #0
 8015e22:	f7f1 ff21 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015e26:	2000      	movs	r0, #0
 8015e28:	f7f1 ff30 	bl	8007c8c <pl_l_blue_LED>
		record_mode = 0;
 8015e2c:	4b9f      	ldr	r3, [pc, #636]	; (80160ac <mode_PLtest+0x35c>)
 8015e2e:	2200      	movs	r2, #0
 8015e30:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e32:	e002      	b.n	8015e3a <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015e34:	2001      	movs	r0, #1
 8015e36:	f7f2 fe93 	bl	8008b60 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e3a:	4b9a      	ldr	r3, [pc, #616]	; (80160a4 <mode_PLtest+0x354>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e42:	ddf7      	ble.n	8015e34 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015e44:	4b97      	ldr	r3, [pc, #604]	; (80160a4 <mode_PLtest+0x354>)
 8015e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e4e:	ddf1      	ble.n	8015e34 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e50:	4b94      	ldr	r3, [pc, #592]	; (80160a4 <mode_PLtest+0x354>)
 8015e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015e56:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e5a:	ddeb      	ble.n	8015e34 <mode_PLtest+0xe4>
		}
		record_print();
 8015e5c:	f001 fc66 	bl	801772c <record_print>
		break;
 8015e60:	e156      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b0011:	//gyro
		reset_gyro();
 8015e62:	f7eb fed1 	bl	8001c08 <reset_gyro>
		reset_speed();
 8015e66:	f7eb f8dd 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	f7f1 fefc 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015e70:	2001      	movs	r0, #1
 8015e72:	f7f1 ff0b 	bl	8007c8c <pl_l_blue_LED>
		record_mode = 2;
 8015e76:	4b8d      	ldr	r3, [pc, #564]	; (80160ac <mode_PLtest+0x35c>)
 8015e78:	2202      	movs	r2, #2
 8015e7a:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8015e7c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015e80:	f7f2 fe6e 	bl	8008b60 <wait_ms>
		pl_r_blue_LED(OFF);
 8015e84:	2000      	movs	r0, #0
 8015e86:	f7f1 feef 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	f7f1 fefe 	bl	8007c8c <pl_l_blue_LED>
		record_mode = 0;
 8015e90:	4b86      	ldr	r3, [pc, #536]	; (80160ac <mode_PLtest+0x35c>)
 8015e92:	2200      	movs	r2, #0
 8015e94:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e96:	e002      	b.n	8015e9e <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015e98:	2001      	movs	r0, #1
 8015e9a:	f7f2 fe61 	bl	8008b60 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e9e:	4b81      	ldr	r3, [pc, #516]	; (80160a4 <mode_PLtest+0x354>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ea6:	ddf7      	ble.n	8015e98 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015ea8:	4b7e      	ldr	r3, [pc, #504]	; (80160a4 <mode_PLtest+0x354>)
 8015eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015eae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015eb2:	ddf1      	ble.n	8015e98 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015eb4:	4b7b      	ldr	r3, [pc, #492]	; (80160a4 <mode_PLtest+0x354>)
 8015eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015eba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ebe:	ddeb      	ble.n	8015e98 <mode_PLtest+0x148>
		}
		record_print();
 8015ec0:	f001 fc34 	bl	801772c <record_print>
		break;
 8015ec4:	e124      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ec6:	4b7a      	ldr	r3, [pc, #488]	; (80160b0 <mode_PLtest+0x360>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7ea fb64 	bl	8000598 <__aeabi_f2d>
 8015ed0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ed4:	4b76      	ldr	r3, [pc, #472]	; (80160b0 <mode_PLtest+0x360>)
 8015ed6:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ea fb5d 	bl	8000598 <__aeabi_f2d>
 8015ede:	4604      	mov	r4, r0
 8015ee0:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ee2:	4b73      	ldr	r3, [pc, #460]	; (80160b0 <mode_PLtest+0x360>)
 8015ee4:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7ea fb56 	bl	8000598 <__aeabi_f2d>
 8015eec:	4680      	mov	r8, r0
 8015eee:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ef0:	4b6f      	ldr	r3, [pc, #444]	; (80160b0 <mode_PLtest+0x360>)
 8015ef2:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ea fb4f 	bl	8000598 <__aeabi_f2d>
 8015efa:	4682      	mov	sl, r0
 8015efc:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015efe:	4b6c      	ldr	r3, [pc, #432]	; (80160b0 <mode_PLtest+0x360>)
 8015f00:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7ea fb48 	bl	8000598 <__aeabi_f2d>
 8015f08:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015f0c:	4b68      	ldr	r3, [pc, #416]	; (80160b0 <mode_PLtest+0x360>)
 8015f0e:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7ea fb41 	bl	8000598 <__aeabi_f2d>
 8015f16:	4602      	mov	r2, r0
 8015f18:	460b      	mov	r3, r1
 8015f1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f1e:	ed97 7b00 	vldr	d7, [r7]
 8015f22:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f26:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015f2a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015f2e:	e9cd 4500 	strd	r4, r5, [sp]
 8015f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015f36:	485f      	ldr	r0, [pc, #380]	; (80160b4 <mode_PLtest+0x364>)
 8015f38:	f00b fb06 	bl	8021548 <iprintf>
			wait_ms(500);
 8015f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015f40:	f7f2 fe0e 	bl	8008b60 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f44:	e7bf      	b.n	8015ec6 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015f46:	f7f1 ffdf 	bl	8007f08 <test_flash>
		break;
 8015f4a:	e0e1      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b0110:
		record_mode=6;
 8015f4c:	4b57      	ldr	r3, [pc, #348]	; (80160ac <mode_PLtest+0x35c>)
 8015f4e:	2206      	movs	r2, #6
 8015f50:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015f52:	2001      	movs	r0, #1
 8015f54:	f7f1 fe88 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015f58:	2001      	movs	r0, #1
 8015f5a:	f7f1 fe97 	bl	8007c8c <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8015f5e:	f107 0218 	add.w	r2, r7, #24
 8015f62:	f107 031c 	add.w	r3, r7, #28
 8015f66:	4611      	mov	r1, r2
 8015f68:	4618      	mov	r0, r3
 8015f6a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8015f6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f72:	f7ec f9c7 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	69ba      	ldr	r2, [r7, #24]
 8015f7a:	4611      	mov	r1, r2
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7f2 fb77 	bl	8008670 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015f82:	f7f2 fb59 	bl	8008638 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f86:	e00a      	b.n	8015f9e <mode_PLtest+0x24e>
			wait_ms(1);
 8015f88:	2001      	movs	r0, #1
 8015f8a:	f7f2 fde9 	bl	8008b60 <wait_ms>
			if(record_rupe_flag==1){
 8015f8e:	4b4a      	ldr	r3, [pc, #296]	; (80160b8 <mode_PLtest+0x368>)
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d103      	bne.n	8015f9e <mode_PLtest+0x24e>
				record_mode=0;
 8015f96:	4b45      	ldr	r3, [pc, #276]	; (80160ac <mode_PLtest+0x35c>)
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]
				break;
 8015f9c:	e010      	b.n	8015fc0 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f9e:	4b41      	ldr	r3, [pc, #260]	; (80160a4 <mode_PLtest+0x354>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fa6:	ddef      	ble.n	8015f88 <mode_PLtest+0x238>
 8015fa8:	4b3e      	ldr	r3, [pc, #248]	; (80160a4 <mode_PLtest+0x354>)
 8015faa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015fae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fb2:	dde9      	ble.n	8015f88 <mode_PLtest+0x238>
 8015fb4:	4b3b      	ldr	r3, [pc, #236]	; (80160a4 <mode_PLtest+0x354>)
 8015fb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015fba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fbe:	dde3      	ble.n	8015f88 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015fc0:	f7f2 fb48 	bl	8008654 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	f7f1 fe4f 	bl	8007c68 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015fca:	2000      	movs	r0, #0
 8015fcc:	f7f1 fe5e 	bl	8007c8c <pl_l_blue_LED>

		break;
 8015fd0:	e09e      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015fd2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015fd6:	f7f2 fb75 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015fda:	f7f2 fb5f 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(2000);
 8015fde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015fe2:	f003 fb5f 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 8015fe6:	f7eb fe0f 	bl	8001c08 <reset_gyro>
			reset_speed();
 8015fea:	f7eb f81b 	bl	8001024 <reset_speed>
			clear_Ierror();
 8015fee:	f7ef f94b 	bl	8005288 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015ff2:	2001      	movs	r0, #1
 8015ff4:	f7f1 fe38 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015ff8:	2001      	movs	r0, #1
 8015ffa:	f7f1 fe47 	bl	8007c8c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ffe:	e002      	b.n	8016006 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8016000:	2001      	movs	r0, #1
 8016002:	f003 fb4f 	bl	80196a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016006:	4b27      	ldr	r3, [pc, #156]	; (80160a4 <mode_PLtest+0x354>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801600e:	ddf7      	ble.n	8016000 <mode_PLtest+0x2b0>
 8016010:	4b24      	ldr	r3, [pc, #144]	; (80160a4 <mode_PLtest+0x354>)
 8016012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016016:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801601a:	ddf1      	ble.n	8016000 <mode_PLtest+0x2b0>
 801601c:	4b21      	ldr	r3, [pc, #132]	; (80160a4 <mode_PLtest+0x354>)
 801601e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016022:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016026:	ddeb      	ble.n	8016000 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8016028:	2000      	movs	r0, #0
 801602a:	f7f1 fe1d 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801602e:	2000      	movs	r0, #0
 8016030:	f7f1 fe2c 	bl	8007c8c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8016034:	f7f2 fb3c 	bl	80086b0 <pl_FunMotor_stop>
		break;
 8016038:	e06a      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 801603a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80160bc <mode_PLtest+0x36c>
 801603e:	f7f2 fb41 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016042:	f7f2 fb2b 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(2000);
 8016046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801604a:	f003 fb2b 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 801604e:	f7eb fddb 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016052:	f7ea ffe7 	bl	8001024 <reset_speed>
			clear_Ierror();
 8016056:	f7ef f917 	bl	8005288 <clear_Ierror>
			pl_r_blue_LED(ON);
 801605a:	2001      	movs	r0, #1
 801605c:	f7f1 fe04 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016060:	2001      	movs	r0, #1
 8016062:	f7f1 fe13 	bl	8007c8c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016066:	e002      	b.n	801606e <mode_PLtest+0x31e>
				HAL_Delay(1);
 8016068:	2001      	movs	r0, #1
 801606a:	f003 fb1b 	bl	80196a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801606e:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <mode_PLtest+0x354>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016076:	ddf7      	ble.n	8016068 <mode_PLtest+0x318>
 8016078:	4b0a      	ldr	r3, [pc, #40]	; (80160a4 <mode_PLtest+0x354>)
 801607a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801607e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016082:	ddf1      	ble.n	8016068 <mode_PLtest+0x318>
 8016084:	4b07      	ldr	r3, [pc, #28]	; (80160a4 <mode_PLtest+0x354>)
 8016086:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801608a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801608e:	ddeb      	ble.n	8016068 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8016090:	2000      	movs	r0, #0
 8016092:	f7f1 fde9 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016096:	2000      	movs	r0, #0
 8016098:	f7f1 fdf8 	bl	8007c8c <pl_l_blue_LED>
			pl_FunMotor_stop();
 801609c:	f7f2 fb08 	bl	80086b0 <pl_FunMotor_stop>
		break;
 80160a0:	e036      	b.n	8016110 <mode_PLtest+0x3c0>
 80160a2:	bf00      	nop
 80160a4:	200002bc 	.word	0x200002bc
 80160a8:	08025134 	.word	0x08025134
 80160ac:	2000f284 	.word	0x2000f284
 80160b0:	200006f0 	.word	0x200006f0
 80160b4:	08025160 	.word	0x08025160
 80160b8:	2000f290 	.word	0x2000f290
 80160bc:	3f7d70a4 	.word	0x3f7d70a4
	case 0b1011://fun
			pl_FunMotor_duty(0.99);
 80160c0:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80160bc <mode_PLtest+0x36c>
 80160c4:	f7f2 fafe 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80160c8:	f7f2 fae8 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(2000);
 80160cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80160d0:	f003 fae8 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 80160d4:	f7eb fd98 	bl	8001c08 <reset_gyro>
			reset_speed();
 80160d8:	f7ea ffa4 	bl	8001024 <reset_speed>
			clear_Ierror();
 80160dc:	f7ef f8d4 	bl	8005288 <clear_Ierror>
			record_mode=2;
 80160e0:	4b0e      	ldr	r3, [pc, #56]	; (801611c <mode_PLtest+0x3cc>)
 80160e2:	2202      	movs	r2, #2
 80160e4:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80160e6:	2001      	movs	r0, #1
 80160e8:	f7f1 fdbe 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80160ec:	2001      	movs	r0, #1
 80160ee:	f7f1 fdcd 	bl	8007c8c <pl_l_blue_LED>
			no_angle();
 80160f2:	f7ee fd01 	bl	8004af8 <no_angle>
			pl_r_blue_LED(OFF);
 80160f6:	2000      	movs	r0, #0
 80160f8:	f7f1 fdb6 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160fc:	2000      	movs	r0, #0
 80160fe:	f7f1 fdc5 	bl	8007c8c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8016102:	f7f2 fad5 	bl	80086b0 <pl_FunMotor_stop>
		break;
 8016106:	e003      	b.n	8016110 <mode_PLtest+0x3c0>
	case 0b1111:	//record_out
		record_print();
 8016108:	f001 fb10 	bl	801772c <record_print>
		break;
 801610c:	e000      	b.n	8016110 <mode_PLtest+0x3c0>
		break;
 801610e:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8016110:	bf00      	nop
 8016112:	3720      	adds	r7, #32
 8016114:	46bd      	mov	sp, r7
 8016116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801611a:	bf00      	nop
 801611c:	2000f284 	.word	0x2000f284

08016120 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8016120:	b5b0      	push	{r4, r5, r7, lr}
 8016122:	b0da      	sub	sp, #360	; 0x168
 8016124:	af54      	add	r7, sp, #336	; 0x150
 8016126:	4603      	mov	r3, r0
 8016128:	71fb      	strb	r3, [r7, #7]

	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801612a:	2003      	movs	r0, #3
 801612c:	f7f2 fa36 	bl	800859c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016130:	2003      	movs	r0, #3
 8016132:	f7f2 fa5b 	bl	80085ec <pl_R_DriveMotor_mode>
	reset_gyro();
 8016136:	f7eb fd67 	bl	8001c08 <reset_gyro>
	reset_speed();
 801613a:	f7ea ff73 	bl	8001024 <reset_speed>
	reset_distance();
 801613e:	f7ea ff2d 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8016142:	f7ef f8a1 	bl	8005288 <clear_Ierror>
	switch (main_modeR) {
 8016146:	79fb      	ldrb	r3, [r7, #7]
 8016148:	2b0f      	cmp	r3, #15
 801614a:	f200 81e7 	bhi.w	801651c <mode_Running+0x3fc>
 801614e:	a201      	add	r2, pc, #4	; (adr r2, 8016154 <mode_Running+0x34>)
 8016150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016154:	08016195 	.word	0x08016195
 8016158:	0801624d 	.word	0x0801624d
 801615c:	08016285 	.word	0x08016285
 8016160:	0801628b 	.word	0x0801628b
 8016164:	080162c3 	.word	0x080162c3
 8016168:	080162f5 	.word	0x080162f5
 801616c:	08016327 	.word	0x08016327
 8016170:	08016359 	.word	0x08016359
 8016174:	0801638b 	.word	0x0801638b
 8016178:	080163bd 	.word	0x080163bd
 801617c:	080163ef 	.word	0x080163ef
 8016180:	08016421 	.word	0x08016421
 8016184:	08016453 	.word	0x08016453
 8016188:	08016485 	.word	0x08016485
 801618c:	080164b7 	.word	0x080164b7
 8016190:	080164e9 	.word	0x080164e9
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			maze_clear();
 8016194:	f7fb f810 	bl	80111b8 <maze_clear>
			maze_out_matlab();
 8016198:	f7fa ffe0 	bl	801115c <maze_out_matlab>

			create_StepCountMap_queue();
 801619c:	f7fe fc06 	bl	80149ac <create_StepCountMap_queue>
			maze_display();
 80161a0:	f7ff fa22 	bl	80155e8 <maze_display>

			create_DijkstraMap();
 80161a4:	f7fb fee2 	bl	8011f6c <create_DijkstraMap>
			maze_display_Dijkstra();
 80161a8:	f7ff fb32 	bl	8015810 <maze_display_Dijkstra>

			route_Dijkstra();
 80161ac:	f7fd fc16 	bl	80139dc <route_Dijkstra>
			create_StepCountMap_unknown();
 80161b0:	f7fe f8ca 	bl	8014348 <create_StepCountMap_unknown>
			maze_display();
 80161b4:	f7ff fa18 	bl	80155e8 <maze_display>

			tic_timer();
 80161b8:	f7f2 fca4 	bl	8008b04 <tic_timer>
			for(int j=0;j<5000;j++){
 80161bc:	2300      	movs	r3, #0
 80161be:	617b      	str	r3, [r7, #20]
 80161c0:	e004      	b.n	80161cc <mode_Running+0xac>
			create_StepCountMap_queue();
 80161c2:	f7fe fbf3 	bl	80149ac <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	3301      	adds	r3, #1
 80161ca:	617b      	str	r3, [r7, #20]
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80161d2:	4293      	cmp	r3, r2
 80161d4:	ddf5      	ble.n	80161c2 <mode_Running+0xa2>
			}
			float tim2 = toc_timer();
 80161d6:	f7f2 fca7 	bl	8008b28 <toc_timer>
 80161da:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80161de:	f7ff fa03 	bl	80155e8 <maze_display>
			printf("tim2=%f\n", tim2);
 80161e2:	68f8      	ldr	r0, [r7, #12]
 80161e4:	f7ea f9d8 	bl	8000598 <__aeabi_f2d>
 80161e8:	4602      	mov	r2, r0
 80161ea:	460b      	mov	r3, r1
 80161ec:	48cd      	ldr	r0, [pc, #820]	; (8016524 <mode_Running+0x404>)
 80161ee:	f00b f9ab 	bl	8021548 <iprintf>
			tic_timer();
 80161f2:	f7f2 fc87 	bl	8008b04 <tic_timer>
			create_DijkstraMap();
 80161f6:	f7fb feb9 	bl	8011f6c <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80161fa:	2300      	movs	r3, #0
 80161fc:	613b      	str	r3, [r7, #16]
 80161fe:	e006      	b.n	801620e <mode_Running+0xee>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8016200:	f7fd fbec 	bl	80139dc <route_Dijkstra>
			create_StepCountMap_unknown();
 8016204:	f7fe f8a0 	bl	8014348 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	3301      	adds	r3, #1
 801620c:	613b      	str	r3, [r7, #16]
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	f241 3287 	movw	r2, #4999	; 0x1387
 8016214:	4293      	cmp	r3, r2
 8016216:	ddf3      	ble.n	8016200 <mode_Running+0xe0>

			}
			float tim1 = toc_timer();
 8016218:	f7f2 fc86 	bl	8008b28 <toc_timer>
 801621c:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8016220:	f7ff f9e2 	bl	80155e8 <maze_display>
			maze_display_Dijkstra();
 8016224:	f7ff faf4 	bl	8015810 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8016228:	68b8      	ldr	r0, [r7, #8]
 801622a:	f7ea f9b5 	bl	8000598 <__aeabi_f2d>
 801622e:	4604      	mov	r4, r0
 8016230:	460d      	mov	r5, r1
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	f7ea f9b0 	bl	8000598 <__aeabi_f2d>
 8016238:	4602      	mov	r2, r0
 801623a:	460b      	mov	r3, r1
 801623c:	e9cd 2300 	strd	r2, r3, [sp]
 8016240:	4622      	mov	r2, r4
 8016242:	462b      	mov	r3, r5
 8016244:	48b8      	ldr	r0, [pc, #736]	; (8016528 <mode_Running+0x408>)
 8016246:	f00b f97f 	bl	8021548 <iprintf>
		break;
 801624a:	e167      	b.n	801651c <mode_Running+0x3fc>
		case 0b0001://足立法(遅い)
			tic_timer();
 801624c:	f7f2 fc5a 	bl	8008b04 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8016250:	4cb6      	ldr	r4, [pc, #728]	; (801652c <mode_Running+0x40c>)
 8016252:	2300      	movs	r3, #0
 8016254:	934f      	str	r3, [sp, #316]	; 0x13c
 8016256:	2301      	movs	r3, #1
 8016258:	934e      	str	r3, [sp, #312]	; 0x138
 801625a:	4668      	mov	r0, sp
 801625c:	f104 0310 	add.w	r3, r4, #16
 8016260:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016264:	4619      	mov	r1, r3
 8016266:	f00a fcef 	bl	8020c48 <memcpy>
 801626a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801626e:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8016530 <mode_Running+0x410>
 8016272:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8016534 <mode_Running+0x414>
 8016276:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016538 <mode_Running+0x418>
 801627a:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 801653c <mode_Running+0x41c>
 801627e:	f7f8 fe95 	bl	800efac <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8016282:	e14b      	b.n	801651c <mode_Running+0x3fc>
		case 0b0010://Flashから
			record_out();
 8016284:	f7f1 ff58 	bl	8008138 <record_out>
		break;
 8016288:	e148      	b.n	801651c <mode_Running+0x3fc>
		case 0b0011://ゴミ
			tic_timer();
 801628a:	f7f2 fc3b 	bl	8008b04 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 801628e:	4ca7      	ldr	r4, [pc, #668]	; (801652c <mode_Running+0x40c>)
 8016290:	2301      	movs	r3, #1
 8016292:	934f      	str	r3, [sp, #316]	; 0x13c
 8016294:	2301      	movs	r3, #1
 8016296:	934e      	str	r3, [sp, #312]	; 0x138
 8016298:	4668      	mov	r0, sp
 801629a:	f104 0310 	add.w	r3, r4, #16
 801629e:	f44f 729c 	mov.w	r2, #312	; 0x138
 80162a2:	4619      	mov	r1, r3
 80162a4:	f00a fcd0 	bl	8020c48 <memcpy>
 80162a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162ac:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8016530 <mode_Running+0x410>
 80162b0:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016534 <mode_Running+0x414>
 80162b4:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8016538 <mode_Running+0x418>
 80162b8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 801653c <mode_Running+0x41c>
 80162bc:	f7f8 fe76 	bl	800efac <AdatiWayReturn>
		break;
 80162c0:	e12c      	b.n	801651c <mode_Running+0x3fc>
		case 0b0100://ゴミ
			record_out();
 80162c2:	f7f1 ff39 	bl	8008138 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 80162c6:	2300      	movs	r3, #0
 80162c8:	9352      	str	r3, [sp, #328]	; 0x148
 80162ca:	4a9d      	ldr	r2, [pc, #628]	; (8016540 <mode_Running+0x420>)
 80162cc:	466b      	mov	r3, sp
 80162ce:	4611      	mov	r1, r2
 80162d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80162d4:	4618      	mov	r0, r3
 80162d6:	f00a fcb7 	bl	8020c48 <memcpy>
 80162da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8016544 <mode_Running+0x424>
 80162de:	2300      	movs	r3, #0
 80162e0:	2200      	movs	r2, #0
 80162e2:	2100      	movs	r1, #0
 80162e4:	2000      	movs	r0, #0
 80162e6:	eddf 0a92 	vldr	s1, [pc, #584]	; 8016530 <mode_Running+0x410>
 80162ea:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016548 <mode_Running+0x428>
 80162ee:	f7f9 fb6b 	bl	800f9c8 <run_shortest>
		break;
 80162f2:	e113      	b.n	801651c <mode_Running+0x3fc>
		case 0b0101://
			record_out();
 80162f4:	f7f1 ff20 	bl	8008138 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.99,1);
 80162f8:	2301      	movs	r3, #1
 80162fa:	9352      	str	r3, [sp, #328]	; 0x148
 80162fc:	4a93      	ldr	r2, [pc, #588]	; (801654c <mode_Running+0x42c>)
 80162fe:	466b      	mov	r3, sp
 8016300:	4611      	mov	r1, r2
 8016302:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016306:	4618      	mov	r0, r3
 8016308:	f00a fc9e 	bl	8020c48 <memcpy>
 801630c:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8016550 <mode_Running+0x430>
 8016310:	2300      	movs	r3, #0
 8016312:	2200      	movs	r2, #0
 8016314:	2101      	movs	r1, #1
 8016316:	2000      	movs	r0, #0
 8016318:	eddf 0a85 	vldr	s1, [pc, #532]	; 8016530 <mode_Running+0x410>
 801631c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016548 <mode_Running+0x428>
 8016320:	f7f9 fb52 	bl	800f9c8 <run_shortest>
		break;
 8016324:	e0fa      	b.n	801651c <mode_Running+0x3fc>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8016326:	f7f1 ff07 	bl	8008138 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 801632a:	2301      	movs	r3, #1
 801632c:	9352      	str	r3, [sp, #328]	; 0x148
 801632e:	4a87      	ldr	r2, [pc, #540]	; (801654c <mode_Running+0x42c>)
 8016330:	466b      	mov	r3, sp
 8016332:	4611      	mov	r1, r2
 8016334:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016338:	4618      	mov	r0, r3
 801633a:	f00a fc85 	bl	8020c48 <memcpy>
 801633e:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8016550 <mode_Running+0x430>
 8016342:	2301      	movs	r3, #1
 8016344:	2200      	movs	r2, #0
 8016346:	2101      	movs	r1, #1
 8016348:	2000      	movs	r0, #0
 801634a:	eddf 0a79 	vldr	s1, [pc, #484]	; 8016530 <mode_Running+0x410>
 801634e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016548 <mode_Running+0x428>
 8016352:	f7f9 fb39 	bl	800f9c8 <run_shortest>
		break;
 8016356:	e0e1      	b.n	801651c <mode_Running+0x3fc>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8016358:	f7f1 feee 	bl	8008138 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 801635c:	2301      	movs	r3, #1
 801635e:	9352      	str	r3, [sp, #328]	; 0x148
 8016360:	4a7c      	ldr	r2, [pc, #496]	; (8016554 <mode_Running+0x434>)
 8016362:	466b      	mov	r3, sp
 8016364:	4611      	mov	r1, r2
 8016366:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801636a:	4618      	mov	r0, r3
 801636c:	f00a fc6c 	bl	8020c48 <memcpy>
 8016370:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8016550 <mode_Running+0x430>
 8016374:	2301      	movs	r3, #1
 8016376:	2201      	movs	r2, #1
 8016378:	2101      	movs	r1, #1
 801637a:	2000      	movs	r0, #0
 801637c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8016558 <mode_Running+0x438>
 8016380:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016530 <mode_Running+0x410>
 8016384:	f7f9 fb20 	bl	800f9c8 <run_shortest>
		break;
 8016388:	e0c8      	b.n	801651c <mode_Running+0x3fc>
		case 0b1000://
			record_out();
 801638a:	f7f1 fed5 	bl	8008138 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 801638e:	2301      	movs	r3, #1
 8016390:	9352      	str	r3, [sp, #328]	; 0x148
 8016392:	4a70      	ldr	r2, [pc, #448]	; (8016554 <mode_Running+0x434>)
 8016394:	466b      	mov	r3, sp
 8016396:	4611      	mov	r1, r2
 8016398:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801639c:	4618      	mov	r0, r3
 801639e:	f00a fc53 	bl	8020c48 <memcpy>
 80163a2:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016550 <mode_Running+0x430>
 80163a6:	2301      	movs	r3, #1
 80163a8:	2201      	movs	r2, #1
 80163aa:	2101      	movs	r1, #1
 80163ac:	2000      	movs	r0, #0
 80163ae:	eddf 0a6b 	vldr	s1, [pc, #428]	; 801655c <mode_Running+0x43c>
 80163b2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016560 <mode_Running+0x440>
 80163b6:	f7f9 fb07 	bl	800f9c8 <run_shortest>
		break;
 80163ba:	e0af      	b.n	801651c <mode_Running+0x3fc>
		case 0b1001:
			record_out();
 80163bc:	f7f1 febc 	bl	8008138 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80163c0:	2301      	movs	r3, #1
 80163c2:	9352      	str	r3, [sp, #328]	; 0x148
 80163c4:	4a67      	ldr	r2, [pc, #412]	; (8016564 <mode_Running+0x444>)
 80163c6:	466b      	mov	r3, sp
 80163c8:	4611      	mov	r1, r2
 80163ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80163ce:	4618      	mov	r0, r3
 80163d0:	f00a fc3a 	bl	8020c48 <memcpy>
 80163d4:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8016550 <mode_Running+0x430>
 80163d8:	2301      	movs	r3, #1
 80163da:	2201      	movs	r2, #1
 80163dc:	2101      	movs	r1, #1
 80163de:	2000      	movs	r0, #0
 80163e0:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016558 <mode_Running+0x438>
 80163e4:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016530 <mode_Running+0x410>
 80163e8:	f7f9 faee 	bl	800f9c8 <run_shortest>
		break;
 80163ec:	e096      	b.n	801651c <mode_Running+0x3fc>
		case 0b1010:
			record_out();
 80163ee:	f7f1 fea3 	bl	8008138 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80163f2:	2301      	movs	r3, #1
 80163f4:	9352      	str	r3, [sp, #328]	; 0x148
 80163f6:	4a5b      	ldr	r2, [pc, #364]	; (8016564 <mode_Running+0x444>)
 80163f8:	466b      	mov	r3, sp
 80163fa:	4611      	mov	r1, r2
 80163fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016400:	4618      	mov	r0, r3
 8016402:	f00a fc21 	bl	8020c48 <memcpy>
 8016406:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8016550 <mode_Running+0x430>
 801640a:	2301      	movs	r3, #1
 801640c:	2201      	movs	r2, #1
 801640e:	2101      	movs	r1, #1
 8016410:	2000      	movs	r0, #0
 8016412:	eddf 0a52 	vldr	s1, [pc, #328]	; 801655c <mode_Running+0x43c>
 8016416:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016560 <mode_Running+0x440>
 801641a:	f7f9 fad5 	bl	800f9c8 <run_shortest>
		break;
 801641e:	e07d      	b.n	801651c <mode_Running+0x3fc>
		case 0b1011:
			record_out();
 8016420:	f7f1 fe8a 	bl	8008138 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8016424:	2301      	movs	r3, #1
 8016426:	9352      	str	r3, [sp, #328]	; 0x148
 8016428:	4a4a      	ldr	r2, [pc, #296]	; (8016554 <mode_Running+0x434>)
 801642a:	466b      	mov	r3, sp
 801642c:	4611      	mov	r1, r2
 801642e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016432:	4618      	mov	r0, r3
 8016434:	f00a fc08 	bl	8020c48 <memcpy>
 8016438:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8016550 <mode_Running+0x430>
 801643c:	2301      	movs	r3, #1
 801643e:	2201      	movs	r2, #1
 8016440:	2101      	movs	r1, #1
 8016442:	2000      	movs	r0, #0
 8016444:	eddf 0a48 	vldr	s1, [pc, #288]	; 8016568 <mode_Running+0x448>
 8016448:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801656c <mode_Running+0x44c>
 801644c:	f7f9 fabc 	bl	800f9c8 <run_shortest>
		break;
 8016450:	e064      	b.n	801651c <mode_Running+0x3fc>
		case 0b1100:
			record_out();
 8016452:	f7f1 fe71 	bl	8008138 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8016456:	2301      	movs	r3, #1
 8016458:	9352      	str	r3, [sp, #328]	; 0x148
 801645a:	4a42      	ldr	r2, [pc, #264]	; (8016564 <mode_Running+0x444>)
 801645c:	466b      	mov	r3, sp
 801645e:	4611      	mov	r1, r2
 8016460:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016464:	4618      	mov	r0, r3
 8016466:	f00a fbef 	bl	8020c48 <memcpy>
 801646a:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016550 <mode_Running+0x430>
 801646e:	2301      	movs	r3, #1
 8016470:	2201      	movs	r2, #1
 8016472:	2101      	movs	r1, #1
 8016474:	2000      	movs	r0, #0
 8016476:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8016568 <mode_Running+0x448>
 801647a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801656c <mode_Running+0x44c>
 801647e:	f7f9 faa3 	bl	800f9c8 <run_shortest>
		break;
 8016482:	e04b      	b.n	801651c <mode_Running+0x3fc>
		case 0b1101:
			record_out();
 8016484:	f7f1 fe58 	bl	8008138 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8016488:	2301      	movs	r3, #1
 801648a:	9352      	str	r3, [sp, #328]	; 0x148
 801648c:	4a38      	ldr	r2, [pc, #224]	; (8016570 <mode_Running+0x450>)
 801648e:	466b      	mov	r3, sp
 8016490:	4611      	mov	r1, r2
 8016492:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016496:	4618      	mov	r0, r3
 8016498:	f00a fbd6 	bl	8020c48 <memcpy>
 801649c:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8016550 <mode_Running+0x430>
 80164a0:	2301      	movs	r3, #1
 80164a2:	2201      	movs	r2, #1
 80164a4:	2101      	movs	r1, #1
 80164a6:	2000      	movs	r0, #0
 80164a8:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016574 <mode_Running+0x454>
 80164ac:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8016578 <mode_Running+0x458>
 80164b0:	f7f9 fa8a 	bl	800f9c8 <run_shortest>
		break;
 80164b4:	e032      	b.n	801651c <mode_Running+0x3fc>
		case 0b1110:
			record_out();
 80164b6:	f7f1 fe3f 	bl	8008138 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 80164ba:	2301      	movs	r3, #1
 80164bc:	9352      	str	r3, [sp, #328]	; 0x148
 80164be:	4a2c      	ldr	r2, [pc, #176]	; (8016570 <mode_Running+0x450>)
 80164c0:	466b      	mov	r3, sp
 80164c2:	4611      	mov	r1, r2
 80164c4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80164c8:	4618      	mov	r0, r3
 80164ca:	f00a fbbd 	bl	8020c48 <memcpy>
 80164ce:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8016550 <mode_Running+0x430>
 80164d2:	2301      	movs	r3, #1
 80164d4:	2201      	movs	r2, #1
 80164d6:	2101      	movs	r1, #1
 80164d8:	2000      	movs	r0, #0
 80164da:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016568 <mode_Running+0x448>
 80164de:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801656c <mode_Running+0x44c>
 80164e2:	f7f9 fa71 	bl	800f9c8 <run_shortest>
		break;
 80164e6:	e019      	b.n	801651c <mode_Running+0x3fc>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 80164e8:	4c24      	ldr	r4, [pc, #144]	; (801657c <mode_Running+0x45c>)
 80164ea:	2300      	movs	r3, #0
 80164ec:	934f      	str	r3, [sp, #316]	; 0x13c
 80164ee:	2301      	movs	r3, #1
 80164f0:	934e      	str	r3, [sp, #312]	; 0x138
 80164f2:	4668      	mov	r0, sp
 80164f4:	f104 0310 	add.w	r3, r4, #16
 80164f8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80164fc:	4619      	mov	r1, r3
 80164fe:	f00a fba3 	bl	8020c48 <memcpy>
 8016502:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016506:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8016530 <mode_Running+0x410>
 801650a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016534 <mode_Running+0x414>
 801650e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016538 <mode_Running+0x418>
 8016512:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8016580 <mode_Running+0x460>
 8016516:	f7f8 fd49 	bl	800efac <AdatiWayReturn>
		break;
 801651a:	bf00      	nop
	}


}
 801651c:	bf00      	nop
 801651e:	3718      	adds	r7, #24
 8016520:	46bd      	mov	sp, r7
 8016522:	bdb0      	pop	{r4, r5, r7, pc}
 8016524:	080251ac 	.word	0x080251ac
 8016528:	080251b8 	.word	0x080251b8
 801652c:	2000f444 	.word	0x2000f444
 8016530:	453b8000 	.word	0x453b8000
 8016534:	44fa0000 	.word	0x44fa0000
 8016538:	43c80000 	.word	0x43c80000
 801653c:	43960000 	.word	0x43960000
 8016540:	2000f6d4 	.word	0x2000f6d4
 8016544:	3e99999a 	.word	0x3e99999a
 8016548:	447a0000 	.word	0x447a0000
 801654c:	2000f81c 	.word	0x2000f81c
 8016550:	3f7d70a4 	.word	0x3f7d70a4
 8016554:	2000f964 	.word	0x2000f964
 8016558:	461c4000 	.word	0x461c4000
 801655c:	464b2000 	.word	0x464b2000
 8016560:	45480000 	.word	0x45480000
 8016564:	2000faac 	.word	0x2000faac
 8016568:	4684d000 	.word	0x4684d000
 801656c:	457a0000 	.word	0x457a0000
 8016570:	2000fbf4 	.word	0x2000fbf4
 8016574:	462be000 	.word	0x462be000
 8016578:	4541c000 	.word	0x4541c000
 801657c:	2000f58c 	.word	0x2000f58c
 8016580:	437a0000 	.word	0x437a0000

08016584 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8016584:	b590      	push	{r4, r7, lr}
 8016586:	b0db      	sub	sp, #364	; 0x16c
 8016588:	af52      	add	r7, sp, #328	; 0x148
 801658a:	4603      	mov	r3, r0
 801658c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 801658e:	2300      	movs	r3, #0
 8016590:	613b      	str	r3, [r7, #16]
 8016592:	2300      	movs	r3, #0
 8016594:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8016596:	2300      	movs	r3, #0
 8016598:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 801659a:	2300      	movs	r3, #0
 801659c:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 801659e:	2300      	movs	r3, #0
 80165a0:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 80165a2:	2300      	movs	r3, #0
 80165a4:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80165a6:	2003      	movs	r0, #3
 80165a8:	f7f1 fff8 	bl	800859c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80165ac:	2003      	movs	r0, #3
 80165ae:	f7f2 f81d 	bl	80085ec <pl_R_DriveMotor_mode>
	reset_gyro();
 80165b2:	f7eb fb29 	bl	8001c08 <reset_gyro>
	reset_speed();
 80165b6:	f7ea fd35 	bl	8001024 <reset_speed>
	reset_distance();
 80165ba:	f7ea fcef 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80165be:	f7ee fe63 	bl	8005288 <clear_Ierror>

	switch (main_modeR) {
 80165c2:	79fb      	ldrb	r3, [r7, #7]
 80165c4:	2b0f      	cmp	r3, #15
 80165c6:	f200 8329 	bhi.w	8016c1c <mode_Tuning0+0x698>
 80165ca:	a201      	add	r2, pc, #4	; (adr r2, 80165d0 <mode_Tuning0+0x4c>)
 80165cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165d0:	08016611 	.word	0x08016611
 80165d4:	0801669b 	.word	0x0801669b
 80165d8:	080166c1 	.word	0x080166c1
 80165dc:	080166e7 	.word	0x080166e7
 80165e0:	08016717 	.word	0x08016717
 80165e4:	08016747 	.word	0x08016747
 80165e8:	08016811 	.word	0x08016811
 80165ec:	08016865 	.word	0x08016865
 80165f0:	0801688b 	.word	0x0801688b
 80165f4:	080168af 	.word	0x080168af
 80165f8:	0801690b 	.word	0x0801690b
 80165fc:	08016a0d 	.word	0x08016a0d
 8016600:	08016a33 	.word	0x08016a33
 8016604:	08016a65 	.word	0x08016a65
 8016608:	08016b7d 	.word	0x08016b7d
 801660c:	08016bcd 	.word	0x08016bcd
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8016610:	4bd2      	ldr	r3, [pc, #840]	; (801695c <mode_Tuning0+0x3d8>)
 8016612:	2203      	movs	r2, #3
 8016614:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016616:	2300      	movs	r3, #0
 8016618:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 801661a:	6978      	ldr	r0, [r7, #20]
 801661c:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016960 <mode_Tuning0+0x3dc>
 8016620:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8016964 <mode_Tuning0+0x3e0>
 8016624:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8016968 <mode_Tuning0+0x3e4>
 8016628:	eddf 0acf 	vldr	s1, [pc, #828]	; 8016968 <mode_Tuning0+0x3e4>
 801662c:	ed9f 0acf 	vldr	s0, [pc, #828]	; 801696c <mode_Tuning0+0x3e8>
 8016630:	f7ed fb1a 	bl	8003c68 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8016634:	ed9f 2ace 	vldr	s4, [pc, #824]	; 8016970 <mode_Tuning0+0x3ec>
 8016638:	eddf 1ace 	vldr	s3, [pc, #824]	; 8016974 <mode_Tuning0+0x3f0>
 801663c:	ed9f 1aca 	vldr	s2, [pc, #808]	; 8016968 <mode_Tuning0+0x3e4>
 8016640:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8016968 <mode_Tuning0+0x3e4>
 8016644:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8016978 <mode_Tuning0+0x3f4>
 8016648:	f7ee f838 	bl	80046bc <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 801664c:	6978      	ldr	r0, [r7, #20]
 801664e:	ed9f 2acb 	vldr	s4, [pc, #812]	; 801697c <mode_Tuning0+0x3f8>
 8016652:	eddf 1acb 	vldr	s3, [pc, #812]	; 8016980 <mode_Tuning0+0x3fc>
 8016656:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 8016968 <mode_Tuning0+0x3e4>
 801665a:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8016968 <mode_Tuning0+0x3e4>
 801665e:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 801696c <mode_Tuning0+0x3e8>
 8016662:	f7ed fb01 	bl	8003c68 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8016666:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016970 <mode_Tuning0+0x3ec>
 801666a:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8016974 <mode_Tuning0+0x3f0>
 801666e:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8016968 <mode_Tuning0+0x3e4>
 8016672:	eddf 0abd 	vldr	s1, [pc, #756]	; 8016968 <mode_Tuning0+0x3e4>
 8016676:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8016978 <mode_Tuning0+0x3f4>
 801667a:	f7ee f81f 	bl	80046bc <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 801667e:	6978      	ldr	r0, [r7, #20]
 8016680:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 8016984 <mode_Tuning0+0x400>
 8016684:	eddf 1ac0 	vldr	s3, [pc, #768]	; 8016988 <mode_Tuning0+0x404>
 8016688:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8016968 <mode_Tuning0+0x3e4>
 801668c:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016968 <mode_Tuning0+0x3e4>
 8016690:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 801696c <mode_Tuning0+0x3e8>
 8016694:	f7ed fae8 	bl	8003c68 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8016698:	e2c0      	b.n	8016c1c <mode_Tuning0+0x698>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 801669a:	4bb0      	ldr	r3, [pc, #704]	; (801695c <mode_Tuning0+0x3d8>)
 801669c:	2205      	movs	r2, #5
 801669e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166a0:	2300      	movs	r3, #0
 80166a2:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 80166a4:	6978      	ldr	r0, [r7, #20]
 80166a6:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 801698c <mode_Tuning0+0x408>
 80166aa:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8016990 <mode_Tuning0+0x40c>
 80166ae:	ed9f 1aae 	vldr	s2, [pc, #696]	; 8016968 <mode_Tuning0+0x3e4>
 80166b2:	eddf 0aad 	vldr	s1, [pc, #692]	; 8016968 <mode_Tuning0+0x3e4>
 80166b6:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8016994 <mode_Tuning0+0x410>
 80166ba:	f7ed fad5 	bl	8003c68 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80166be:	e2ad      	b.n	8016c1c <mode_Tuning0+0x698>
		case 2://壁制御
			record_mode=4;
 80166c0:	4ba6      	ldr	r3, [pc, #664]	; (801695c <mode_Tuning0+0x3d8>)
 80166c2:	2204      	movs	r2, #4
 80166c4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80166c6:	2301      	movs	r3, #1
 80166c8:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80166ca:	6978      	ldr	r0, [r7, #20]
 80166cc:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016998 <mode_Tuning0+0x414>
 80166d0:	eddf 1ab2 	vldr	s3, [pc, #712]	; 801699c <mode_Tuning0+0x418>
 80166d4:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8016968 <mode_Tuning0+0x3e4>
 80166d8:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8016968 <mode_Tuning0+0x3e4>
 80166dc:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80169a0 <mode_Tuning0+0x41c>
 80166e0:	f7ed fac2 	bl	8003c68 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 80166e4:	e29a      	b.n	8016c1c <mode_Tuning0+0x698>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 80166e6:	4caf      	ldr	r4, [pc, #700]	; (80169a4 <mode_Tuning0+0x420>)
 80166e8:	2300      	movs	r3, #0
 80166ea:	9351      	str	r3, [sp, #324]	; 0x144
 80166ec:	2300      	movs	r3, #0
 80166ee:	9350      	str	r3, [sp, #320]	; 0x140
 80166f0:	2300      	movs	r3, #0
 80166f2:	934f      	str	r3, [sp, #316]	; 0x13c
 80166f4:	2300      	movs	r3, #0
 80166f6:	934e      	str	r3, [sp, #312]	; 0x138
 80166f8:	4668      	mov	r0, sp
 80166fa:	f104 0310 	add.w	r3, r4, #16
 80166fe:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016702:	4619      	mov	r1, r3
 8016704:	f00a faa0 	bl	8020c48 <memcpy>
 8016708:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801670c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8016968 <mode_Tuning0+0x3e4>
 8016710:	f7f7 ffe6 	bl	800e6e0 <testturning>
		break;
 8016714:	e282      	b.n	8016c1c <mode_Tuning0+0x698>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8016716:	4ca3      	ldr	r4, [pc, #652]	; (80169a4 <mode_Tuning0+0x420>)
 8016718:	2300      	movs	r3, #0
 801671a:	9351      	str	r3, [sp, #324]	; 0x144
 801671c:	2300      	movs	r3, #0
 801671e:	9350      	str	r3, [sp, #320]	; 0x140
 8016720:	2300      	movs	r3, #0
 8016722:	934f      	str	r3, [sp, #316]	; 0x13c
 8016724:	2301      	movs	r3, #1
 8016726:	934e      	str	r3, [sp, #312]	; 0x138
 8016728:	4668      	mov	r0, sp
 801672a:	f104 0310 	add.w	r3, r4, #16
 801672e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016732:	4619      	mov	r1, r3
 8016734:	f00a fa88 	bl	8020c48 <memcpy>
 8016738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801673c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016968 <mode_Tuning0+0x3e4>
 8016740:	f7f7 ffce 	bl	800e6e0 <testturning>
		break;
 8016744:	e26a      	b.n	8016c1c <mode_Tuning0+0x698>
		case 5://直進(制御なし)
			highspeed_mode = 1;
 8016746:	4b98      	ldr	r3, [pc, #608]	; (80169a8 <mode_Tuning0+0x424>)
 8016748:	2201      	movs	r2, #1
 801674a:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 801674c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80169ac <mode_Tuning0+0x428>
 8016750:	f7f1 ffb8 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016754:	f7f1 ffa2 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(600);
 8016758:	f44f 7016 	mov.w	r0, #600	; 0x258
 801675c:	f002 ffa2 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 8016760:	f7eb fa52 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016764:	f7ea fc5e 	bl	8001024 <reset_speed>
			reset_distance();
 8016768:	f7ea fc18 	bl	8000f9c <reset_distance>
			clear_Ierror();
 801676c:	f7ee fd8c 	bl	8005288 <clear_Ierror>
			record_mode=6;
 8016770:	4b7a      	ldr	r3, [pc, #488]	; (801695c <mode_Tuning0+0x3d8>)
 8016772:	2206      	movs	r2, #6
 8016774:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016776:	2301      	movs	r3, #1
 8016778:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 801677a:	4b8d      	ldr	r3, [pc, #564]	; (80169b0 <mode_Tuning0+0x42c>)
 801677c:	f04f 0200 	mov.w	r2, #0
 8016780:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8016782:	6978      	ldr	r0, [r7, #20]
 8016784:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 80169b4 <mode_Tuning0+0x430>
 8016788:	eddf 1a8b 	vldr	s3, [pc, #556]	; 80169b8 <mode_Tuning0+0x434>
 801678c:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8016968 <mode_Tuning0+0x3e4>
 8016790:	eddf 0a75 	vldr	s1, [pc, #468]	; 8016968 <mode_Tuning0+0x3e4>
 8016794:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80169a0 <mode_Tuning0+0x41c>
 8016798:	f7ed fa66 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 801679c:	2300      	movs	r3, #0
 801679e:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 80167a0:	4b83      	ldr	r3, [pc, #524]	; (80169b0 <mode_Tuning0+0x42c>)
 80167a2:	f04f 0200 	mov.w	r2, #0
 80167a6:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 80167a8:	6978      	ldr	r0, [r7, #20]
 80167aa:	ed9f 2a84 	vldr	s4, [pc, #528]	; 80169bc <mode_Tuning0+0x438>
 80167ae:	eddf 1a84 	vldr	s3, [pc, #528]	; 80169c0 <mode_Tuning0+0x43c>
 80167b2:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8016968 <mode_Tuning0+0x3e4>
 80167b6:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8016968 <mode_Tuning0+0x3e4>
 80167ba:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80169c4 <mode_Tuning0+0x440>
 80167be:	f7ed fa53 	bl	8003c68 <straight_table2>
			mode.WallControlMode=1;
 80167c2:	2301      	movs	r3, #1
 80167c4:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 80167c6:	4b7a      	ldr	r3, [pc, #488]	; (80169b0 <mode_Tuning0+0x42c>)
 80167c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80167cc:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 80167ce:	6978      	ldr	r0, [r7, #20]
 80167d0:	ed9f 2a78 	vldr	s4, [pc, #480]	; 80169b4 <mode_Tuning0+0x430>
 80167d4:	eddf 1a78 	vldr	s3, [pc, #480]	; 80169b8 <mode_Tuning0+0x434>
 80167d8:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8016968 <mode_Tuning0+0x3e4>
 80167dc:	eddf 0a62 	vldr	s1, [pc, #392]	; 8016968 <mode_Tuning0+0x3e4>
 80167e0:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80169a0 <mode_Tuning0+0x41c>
 80167e4:	f7ed fa40 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 80167e8:	2300      	movs	r3, #0
 80167ea:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 80167ec:	4b70      	ldr	r3, [pc, #448]	; (80169b0 <mode_Tuning0+0x42c>)
 80167ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80167f2:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 80167f4:	6978      	ldr	r0, [r7, #20]
 80167f6:	ed9f 2a71 	vldr	s4, [pc, #452]	; 80169bc <mode_Tuning0+0x438>
 80167fa:	eddf 1a71 	vldr	s3, [pc, #452]	; 80169c0 <mode_Tuning0+0x43c>
 80167fe:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8016968 <mode_Tuning0+0x3e4>
 8016802:	eddf 0a59 	vldr	s1, [pc, #356]	; 8016968 <mode_Tuning0+0x3e4>
 8016806:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80169c4 <mode_Tuning0+0x440>
 801680a:	f7ed fa2d 	bl	8003c68 <straight_table2>

		break;
 801680e:	e205      	b.n	8016c1c <mode_Tuning0+0x698>
		case 6://斜め直進(制御あり)
			highspeed_mode = 1;
 8016810:	4b65      	ldr	r3, [pc, #404]	; (80169a8 <mode_Tuning0+0x424>)
 8016812:	2201      	movs	r2, #1
 8016814:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016816:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80169ac <mode_Tuning0+0x428>
 801681a:	f7f1 ff53 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801681e:	f7f1 ff3d 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(600);
 8016822:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016826:	f002 ff3d 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 801682a:	f7eb f9ed 	bl	8001c08 <reset_gyro>
			reset_speed();
 801682e:	f7ea fbf9 	bl	8001024 <reset_speed>
			reset_distance();
 8016832:	f7ea fbb3 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016836:	f7ee fd27 	bl	8005288 <clear_Ierror>
			record_mode=3;
 801683a:	4b48      	ldr	r3, [pc, #288]	; (801695c <mode_Tuning0+0x3d8>)
 801683c:	2203      	movs	r2, #3
 801683e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016840:	2301      	movs	r3, #1
 8016842:	753b      	strb	r3, [r7, #20]
			straight_table_max(90*8, 0, 0, 4000, 17000,38000,mode);
 8016844:	6978      	ldr	r0, [r7, #20]
 8016846:	eddf 2a60 	vldr	s5, [pc, #384]	; 80169c8 <mode_Tuning0+0x444>
 801684a:	ed9f 2a60 	vldr	s4, [pc, #384]	; 80169cc <mode_Tuning0+0x448>
 801684e:	eddf 1a48 	vldr	s3, [pc, #288]	; 8016970 <mode_Tuning0+0x3ec>
 8016852:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8016968 <mode_Tuning0+0x3e4>
 8016856:	eddf 0a44 	vldr	s1, [pc, #272]	; 8016968 <mode_Tuning0+0x3e4>
 801685a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80169a0 <mode_Tuning0+0x41c>
 801685e:	f7ed f8c3 	bl	80039e8 <straight_table_max>
		break;
 8016862:	e1db      	b.n	8016c1c <mode_Tuning0+0x698>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016864:	4b3d      	ldr	r3, [pc, #244]	; (801695c <mode_Tuning0+0x3d8>)
 8016866:	2207      	movs	r2, #7
 8016868:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801686a:	2303      	movs	r3, #3
 801686c:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 801686e:	6978      	ldr	r0, [r7, #20]
 8016870:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8016998 <mode_Tuning0+0x414>
 8016874:	eddf 1a42 	vldr	s3, [pc, #264]	; 8016980 <mode_Tuning0+0x3fc>
 8016878:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016968 <mode_Tuning0+0x3e4>
 801687c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016968 <mode_Tuning0+0x3e4>
 8016880:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80169d0 <mode_Tuning0+0x44c>
 8016884:	f7ed f9f0 	bl	8003c68 <straight_table2>
		break;
 8016888:	e1c8      	b.n	8016c1c <mode_Tuning0+0x698>
		case 8://宴会芸
			record_mode=2;
 801688a:	4b34      	ldr	r3, [pc, #208]	; (801695c <mode_Tuning0+0x3d8>)
 801688c:	2202      	movs	r2, #2
 801688e:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016890:	2001      	movs	r0, #1
 8016892:	f7f1 f9e9 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016896:	2001      	movs	r0, #1
 8016898:	f7f1 f9f8 	bl	8007c8c <pl_l_blue_LED>
			no_angle();
 801689c:	f7ee f92c 	bl	8004af8 <no_angle>
			pl_r_blue_LED(OFF);
 80168a0:	2000      	movs	r0, #0
 80168a2:	f7f1 f9e1 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80168a6:	2000      	movs	r0, #0
 80168a8:	f7f1 f9f0 	bl	8007c8c <pl_l_blue_LED>
		break;
 80168ac:	e1b6      	b.n	8016c1c <mode_Tuning0+0x698>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 80168ae:	2001      	movs	r0, #1
 80168b0:	f7f1 f9da 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80168b4:	2001      	movs	r0, #1
 80168b6:	f7f1 f9e9 	bl	8007c8c <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 80168ba:	f107 020c 	add.w	r2, r7, #12
 80168be:	f107 0310 	add.w	r3, r7, #16
 80168c2:	4611      	mov	r1, r2
 80168c4:	4618      	mov	r0, r3
 80168c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80168ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168ce:	f7eb fd19 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	4611      	mov	r1, r2
 80168d8:	4618      	mov	r0, r3
 80168da:	f7f1 fec9 	bl	8008670 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 80168de:	f7f1 feab 	bl	8008638 <pl_DriveMotor_start>
			wait_ms(3000);
 80168e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80168e6:	f7f2 f93b 	bl	8008b60 <wait_ms>
			record_mode=11;
 80168ea:	4b1c      	ldr	r3, [pc, #112]	; (801695c <mode_Tuning0+0x3d8>)
 80168ec:	220b      	movs	r2, #11
 80168ee:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 80168f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80168f4:	f7f2 f934 	bl	8008b60 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 80168f8:	f7f1 feac 	bl	8008654 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80168fc:	2000      	movs	r0, #0
 80168fe:	f7f1 f9b3 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016902:	2000      	movs	r0, #0
 8016904:	f7f1 f9c2 	bl	8007c8c <pl_l_blue_LED>
		break;
 8016908:	e188      	b.n	8016c1c <mode_Tuning0+0x698>
		case 10://システム同定gyro
			record_mode=6;
 801690a:	4b14      	ldr	r3, [pc, #80]	; (801695c <mode_Tuning0+0x3d8>)
 801690c:	2206      	movs	r2, #6
 801690e:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016910:	2001      	movs	r0, #1
 8016912:	f7f1 f9a9 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016916:	2001      	movs	r0, #1
 8016918:	f7f1 f9b8 	bl	8007c8c <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 801691c:	f107 020c 	add.w	r2, r7, #12
 8016920:	f107 0310 	add.w	r3, r7, #16
 8016924:	4611      	mov	r1, r2
 8016926:	4618      	mov	r0, r3
 8016928:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801692c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016930:	f7eb fce8 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	68fa      	ldr	r2, [r7, #12]
 8016938:	4611      	mov	r1, r2
 801693a:	4618      	mov	r0, r3
 801693c:	f7f1 fe98 	bl	8008670 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016940:	f7f1 fe7a 	bl	8008638 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016944:	e048      	b.n	80169d8 <mode_Tuning0+0x454>
				wait_ms(1);
 8016946:	2001      	movs	r0, #1
 8016948:	f7f2 f90a 	bl	8008b60 <wait_ms>
				if(record_rupe_flag==1){
 801694c:	4b21      	ldr	r3, [pc, #132]	; (80169d4 <mode_Tuning0+0x450>)
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	2b01      	cmp	r3, #1
 8016952:	d141      	bne.n	80169d8 <mode_Tuning0+0x454>
					record_mode=0;
 8016954:	4b01      	ldr	r3, [pc, #4]	; (801695c <mode_Tuning0+0x3d8>)
 8016956:	2200      	movs	r2, #0
 8016958:	701a      	strb	r2, [r3, #0]
					break;
 801695a:	e04e      	b.n	80169fa <mode_Tuning0+0x476>
 801695c:	2000f284 	.word	0x2000f284
 8016960:	464b2000 	.word	0x464b2000
 8016964:	44c80000 	.word	0x44c80000
 8016968:	00000000 	.word	0x00000000
 801696c:	44070000 	.word	0x44070000
 8016970:	457a0000 	.word	0x457a0000
 8016974:	43c80000 	.word	0x43c80000
 8016978:	43340000 	.word	0x43340000
 801697c:	466a6000 	.word	0x466a6000
 8016980:	44fa0000 	.word	0x44fa0000
 8016984:	469c4000 	.word	0x469c4000
 8016988:	45160000 	.word	0x45160000
 801698c:	447a0000 	.word	0x447a0000
 8016990:	c3160000 	.word	0xc3160000
 8016994:	c1a40000 	.word	0xc1a40000
 8016998:	45bb8000 	.word	0x45bb8000
 801699c:	43960000 	.word	0x43960000
 80169a0:	44340000 	.word	0x44340000
 80169a4:	2000f444 	.word	0x2000f444
 80169a8:	20000814 	.word	0x20000814
 80169ac:	3f7d70a4 	.word	0x3f7d70a4
 80169b0:	20000264 	.word	0x20000264
 80169b4:	468ca000 	.word	0x468ca000
 80169b8:	452f0000 	.word	0x452f0000
 80169bc:	465ac000 	.word	0x465ac000
 80169c0:	c4fa0000 	.word	0xc4fa0000
 80169c4:	c4340000 	.word	0xc4340000
 80169c8:	47147000 	.word	0x47147000
 80169cc:	4684d000 	.word	0x4684d000
 80169d0:	443eeb39 	.word	0x443eeb39
 80169d4:	2000f290 	.word	0x2000f290
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80169d8:	4bad      	ldr	r3, [pc, #692]	; (8016c90 <mode_Tuning0+0x70c>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169e0:	ddb1      	ble.n	8016946 <mode_Tuning0+0x3c2>
 80169e2:	4bab      	ldr	r3, [pc, #684]	; (8016c90 <mode_Tuning0+0x70c>)
 80169e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80169e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169ec:	ddab      	ble.n	8016946 <mode_Tuning0+0x3c2>
 80169ee:	4ba8      	ldr	r3, [pc, #672]	; (8016c90 <mode_Tuning0+0x70c>)
 80169f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80169f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169f8:	dda5      	ble.n	8016946 <mode_Tuning0+0x3c2>
				}
			}
			pl_DriveMotor_stop();
 80169fa:	f7f1 fe2b 	bl	8008654 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80169fe:	2000      	movs	r0, #0
 8016a00:	f7f1 f932 	bl	8007c68 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016a04:	2000      	movs	r0, #0
 8016a06:	f7f1 f941 	bl	8007c8c <pl_l_blue_LED>
		break;
 8016a0a:	e107      	b.n	8016c1c <mode_Tuning0+0x698>
		case 11:
		record_mode=1;
 8016a0c:	4ba1      	ldr	r3, [pc, #644]	; (8016c94 <mode_Tuning0+0x710>)
 8016a0e:	2201      	movs	r2, #1
 8016a10:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8016a12:	2300      	movs	r3, #0
 8016a14:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8016a16:	6978      	ldr	r0, [r7, #20]
 8016a18:	ed9f 2a9f 	vldr	s4, [pc, #636]	; 8016c98 <mode_Tuning0+0x714>
 8016a1c:	eddf 1a9f 	vldr	s3, [pc, #636]	; 8016c9c <mode_Tuning0+0x718>
 8016a20:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8016ca0 <mode_Tuning0+0x71c>
 8016a24:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8016ca0 <mode_Tuning0+0x71c>
 8016a28:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8016ca4 <mode_Tuning0+0x720>
 8016a2c:	f7ed f91c 	bl	8003c68 <straight_table2>
		break;
 8016a30:	e0f4      	b.n	8016c1c <mode_Tuning0+0x698>
		case 12:
		record_mode=2;
 8016a32:	4b98      	ldr	r3, [pc, #608]	; (8016c94 <mode_Tuning0+0x710>)
 8016a34:	2202      	movs	r2, #2
 8016a36:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016a38:	2300      	movs	r3, #0
 8016a3a:	61fb      	str	r3, [r7, #28]
 8016a3c:	e00e      	b.n	8016a5c <mode_Tuning0+0x4d8>
		turning_table2(90, 0, 0, 400, 3000);
 8016a3e:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8016ca8 <mode_Tuning0+0x724>
 8016a42:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8016cac <mode_Tuning0+0x728>
 8016a46:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8016ca0 <mode_Tuning0+0x71c>
 8016a4a:	eddf 0a95 	vldr	s1, [pc, #596]	; 8016ca0 <mode_Tuning0+0x71c>
 8016a4e:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016cb0 <mode_Tuning0+0x72c>
 8016a52:	f7ed fe33 	bl	80046bc <turning_table2>
		for(int i=0;i<40;i++){
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	61fb      	str	r3, [r7, #28]
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	2b27      	cmp	r3, #39	; 0x27
 8016a60:	dded      	ble.n	8016a3e <mode_Tuning0+0x4ba>
		}
		break;
 8016a62:	e0db      	b.n	8016c1c <mode_Tuning0+0x698>
		case 13:
			record_mode=2;
 8016a64:	4b8b      	ldr	r3, [pc, #556]	; (8016c94 <mode_Tuning0+0x710>)
 8016a66:	2202      	movs	r2, #2
 8016a68:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016a6e:	4b91      	ldr	r3, [pc, #580]	; (8016cb4 <mode_Tuning0+0x730>)
 8016a70:	edd3 6a02 	vldr	s13, [r3, #8]
 8016a74:	4b8f      	ldr	r3, [pc, #572]	; (8016cb4 <mode_Tuning0+0x730>)
 8016a76:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016a7a:	4b8e      	ldr	r3, [pc, #568]	; (8016cb4 <mode_Tuning0+0x730>)
 8016a7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8016a80:	4b8c      	ldr	r3, [pc, #560]	; (8016cb4 <mode_Tuning0+0x730>)
 8016a82:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016a8a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016a8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016a92:	eddf 5a89 	vldr	s11, [pc, #548]	; 8016cb8 <mode_Tuning0+0x734>
 8016a96:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016a9a:	6978      	ldr	r0, [r7, #20]
 8016a9c:	eeb0 2a47 	vmov.f32	s4, s14
 8016aa0:	eef0 1a46 	vmov.f32	s3, s12
 8016aa4:	eeb0 1a66 	vmov.f32	s2, s13
 8016aa8:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8016ca0 <mode_Tuning0+0x71c>
 8016aac:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8016cbc <mode_Tuning0+0x738>
 8016ab0:	f7ed f8da 	bl	8003c68 <straight_table2>
			for(int i=0;i<40;i++){
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	61bb      	str	r3, [r7, #24]
 8016ab8:	e037      	b.n	8016b2a <mode_Tuning0+0x5a6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016aba:	4b7e      	ldr	r3, [pc, #504]	; (8016cb4 <mode_Tuning0+0x730>)
 8016abc:	edd3 6a02 	vldr	s13, [r3, #8]
 8016ac0:	4b7c      	ldr	r3, [pc, #496]	; (8016cb4 <mode_Tuning0+0x730>)
 8016ac2:	ed93 6a02 	vldr	s12, [r3, #8]
 8016ac6:	4b7b      	ldr	r3, [pc, #492]	; (8016cb4 <mode_Tuning0+0x730>)
 8016ac8:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016acc:	4b79      	ldr	r3, [pc, #484]	; (8016cb4 <mode_Tuning0+0x730>)
 8016ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8016ad2:	4b78      	ldr	r3, [pc, #480]	; (8016cb4 <mode_Tuning0+0x730>)
 8016ad4:	edd3 7a02 	vldr	s15, [r3, #8]
 8016ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016adc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016ae0:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016ae4:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8016cb8 <mode_Tuning0+0x734>
 8016ae8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8016aec:	6978      	ldr	r0, [r7, #20]
 8016aee:	eeb0 2a47 	vmov.f32	s4, s14
 8016af2:	eef0 1a65 	vmov.f32	s3, s11
 8016af6:	eeb0 1a46 	vmov.f32	s2, s12
 8016afa:	eef0 0a66 	vmov.f32	s1, s13
 8016afe:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016b02:	f7ed f8b1 	bl	8003c68 <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8016b06:	4b6b      	ldr	r3, [pc, #428]	; (8016cb4 <mode_Tuning0+0x730>)
 8016b08:	2200      	movs	r2, #0
 8016b0a:	9203      	str	r2, [sp, #12]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	9202      	str	r2, [sp, #8]
 8016b10:	2200      	movs	r2, #0
 8016b12:	9201      	str	r2, [sp, #4]
 8016b14:	699a      	ldr	r2, [r3, #24]
 8016b16:	9200      	str	r2, [sp, #0]
 8016b18:	3308      	adds	r3, #8
 8016b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b1c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016c9c <mode_Tuning0+0x718>
 8016b20:	f7f3 ff9a 	bl	800aa58 <slalomR>
			for(int i=0;i<40;i++){
 8016b24:	69bb      	ldr	r3, [r7, #24]
 8016b26:	3301      	adds	r3, #1
 8016b28:	61bb      	str	r3, [r7, #24]
 8016b2a:	69bb      	ldr	r3, [r7, #24]
 8016b2c:	2b27      	cmp	r3, #39	; 0x27
 8016b2e:	ddc4      	ble.n	8016aba <mode_Tuning0+0x536>
			}
			mode.WallControlMode=0;
 8016b30:	2300      	movs	r3, #0
 8016b32:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016b34:	4b5f      	ldr	r3, [pc, #380]	; (8016cb4 <mode_Tuning0+0x730>)
 8016b36:	edd3 6a02 	vldr	s13, [r3, #8]
 8016b3a:	4b5e      	ldr	r3, [pc, #376]	; (8016cb4 <mode_Tuning0+0x730>)
 8016b3c:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016b40:	4b5c      	ldr	r3, [pc, #368]	; (8016cb4 <mode_Tuning0+0x730>)
 8016b42:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b46:	4b5b      	ldr	r3, [pc, #364]	; (8016cb4 <mode_Tuning0+0x730>)
 8016b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b50:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016b54:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016b58:	eddf 5a57 	vldr	s11, [pc, #348]	; 8016cb8 <mode_Tuning0+0x734>
 8016b5c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016b60:	6978      	ldr	r0, [r7, #20]
 8016b62:	eeb0 2a47 	vmov.f32	s4, s14
 8016b66:	eef0 1a46 	vmov.f32	s3, s12
 8016b6a:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016ca0 <mode_Tuning0+0x71c>
 8016b6e:	eef0 0a66 	vmov.f32	s1, s13
 8016b72:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8016cb8 <mode_Tuning0+0x734>
 8016b76:	f7ed f877 	bl	8003c68 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8016b7a:	e04f      	b.n	8016c1c <mode_Tuning0+0x698>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8016b7c:	4b50      	ldr	r3, [pc, #320]	; (8016cc0 <mode_Tuning0+0x73c>)
 8016b7e:	2201      	movs	r2, #1
 8016b80:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016b82:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8016cc4 <mode_Tuning0+0x740>
 8016b86:	f7f1 fd9d 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016b8a:	f7f1 fd87 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(600);
 8016b8e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016b92:	f002 fd87 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 8016b96:	f7eb f837 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016b9a:	f7ea fa43 	bl	8001024 <reset_speed>
			reset_distance();
 8016b9e:	f7ea f9fd 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016ba2:	f7ee fb71 	bl	8005288 <clear_Ierror>
			record_mode=3;
 8016ba6:	4b3b      	ldr	r3, [pc, #236]	; (8016c94 <mode_Tuning0+0x710>)
 8016ba8:	2203      	movs	r2, #3
 8016baa:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016bac:	2301      	movs	r3, #1
 8016bae:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8016bb0:	6978      	ldr	r0, [r7, #20]
 8016bb2:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016cc8 <mode_Tuning0+0x744>
 8016bb6:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016ccc <mode_Tuning0+0x748>
 8016bba:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016ca0 <mode_Tuning0+0x71c>
 8016bbe:	eddf 0a38 	vldr	s1, [pc, #224]	; 8016ca0 <mode_Tuning0+0x71c>
 8016bc2:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8016cd0 <mode_Tuning0+0x74c>
 8016bc6:	f7ed f84f 	bl	8003c68 <straight_table2>
		break;
 8016bca:	e027      	b.n	8016c1c <mode_Tuning0+0x698>
		case 15:
			highspeed_mode = 1;
 8016bcc:	4b3c      	ldr	r3, [pc, #240]	; (8016cc0 <mode_Tuning0+0x73c>)
 8016bce:	2201      	movs	r2, #1
 8016bd0:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016bd2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016cc4 <mode_Tuning0+0x740>
 8016bd6:	f7f1 fd75 	bl	80086c4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016bda:	f7f1 fd5f 	bl	800869c <pl_FunMotor_start>
			HAL_Delay(600);
 8016bde:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016be2:	f002 fd5f 	bl	80196a4 <HAL_Delay>
			reset_gyro();
 8016be6:	f7eb f80f 	bl	8001c08 <reset_gyro>
			reset_speed();
 8016bea:	f7ea fa1b 	bl	8001024 <reset_speed>
			reset_distance();
 8016bee:	f7ea f9d5 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016bf2:	f7ee fb49 	bl	8005288 <clear_Ierror>
			record_mode=3;
 8016bf6:	4b27      	ldr	r3, [pc, #156]	; (8016c94 <mode_Tuning0+0x710>)
 8016bf8:	2203      	movs	r2, #3
 8016bfa:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8016bfc:	2303      	movs	r3, #3
 8016bfe:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016c00:	6978      	ldr	r0, [r7, #20]
 8016c02:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016cd4 <mode_Tuning0+0x750>
 8016c06:	eddf 1a31 	vldr	s3, [pc, #196]	; 8016ccc <mode_Tuning0+0x748>
 8016c0a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8016ca0 <mode_Tuning0+0x71c>
 8016c0e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016ca0 <mode_Tuning0+0x71c>
 8016c12:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016cd8 <mode_Tuning0+0x754>
 8016c16:	f7ed f827 	bl	8003c68 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8016c1a:	bf00      	nop
	}
	record_mode=0;
 8016c1c:	4b1d      	ldr	r3, [pc, #116]	; (8016c94 <mode_Tuning0+0x710>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016c22:	2003      	movs	r0, #3
 8016c24:	f7f1 fce2 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016c28:	2003      	movs	r0, #3
 8016c2a:	f7f1 fcb7 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016c32:	f7f1 ffd9 	bl	8008be8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016c36:	f7f1 fd3b 	bl	80086b0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8016c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016c3e:	f7f1 ffd3 	bl	8008be8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016c42:	2000      	movs	r0, #0
 8016c44:	f7f1 fca0 	bl	8008588 <pl_DriveMotor_standby>
	record_mode=0;
 8016c48:	4b12      	ldr	r3, [pc, #72]	; (8016c94 <mode_Tuning0+0x710>)
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c4e:	e002      	b.n	8016c56 <mode_Tuning0+0x6d2>
		HAL_Delay(1);
 8016c50:	2001      	movs	r0, #1
 8016c52:	f002 fd27 	bl	80196a4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c56:	4b0e      	ldr	r3, [pc, #56]	; (8016c90 <mode_Tuning0+0x70c>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c5e:	ddf7      	ble.n	8016c50 <mode_Tuning0+0x6cc>
 8016c60:	4b0b      	ldr	r3, [pc, #44]	; (8016c90 <mode_Tuning0+0x70c>)
 8016c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016c66:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c6a:	ddf1      	ble.n	8016c50 <mode_Tuning0+0x6cc>
 8016c6c:	4b08      	ldr	r3, [pc, #32]	; (8016c90 <mode_Tuning0+0x70c>)
 8016c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016c72:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c76:	ddeb      	ble.n	8016c50 <mode_Tuning0+0x6cc>
	}
	pl_r_blue_LED(ON);
 8016c78:	2001      	movs	r0, #1
 8016c7a:	f7f0 fff5 	bl	8007c68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016c7e:	2001      	movs	r0, #1
 8016c80:	f7f1 f804 	bl	8007c8c <pl_l_blue_LED>
	record_print();
 8016c84:	f000 fd52 	bl	801772c <record_print>



}
 8016c88:	bf00      	nop
 8016c8a:	3724      	adds	r7, #36	; 0x24
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd90      	pop	{r4, r7, pc}
 8016c90:	200002bc 	.word	0x200002bc
 8016c94:	2000f284 	.word	0x2000f284
 8016c98:	45bb8000 	.word	0x45bb8000
 8016c9c:	43960000 	.word	0x43960000
 8016ca0:	00000000 	.word	0x00000000
 8016ca4:	420a0000 	.word	0x420a0000
 8016ca8:	453b8000 	.word	0x453b8000
 8016cac:	43c80000 	.word	0x43c80000
 8016cb0:	42b40000 	.word	0x42b40000
 8016cb4:	2000f444 	.word	0x2000f444
 8016cb8:	42340000 	.word	0x42340000
 8016cbc:	431b8000 	.word	0x431b8000
 8016cc0:	20000814 	.word	0x20000814
 8016cc4:	3f7d70a4 	.word	0x3f7d70a4
 8016cc8:	4684d000 	.word	0x4684d000
 8016ccc:	457a0000 	.word	0x457a0000
 8016cd0:	44340000 	.word	0x44340000
 8016cd4:	469c4000 	.word	0x469c4000
 8016cd8:	446ea607 	.word	0x446ea607

08016cdc <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b084      	sub	sp, #16
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8016cea:	2300      	movs	r3, #0
 8016cec:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016cf6:	2001      	movs	r0, #1
 8016cf8:	f7f1 fc46 	bl	8008588 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016cfc:	2003      	movs	r0, #3
 8016cfe:	f7f1 fc4d 	bl	800859c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016d02:	2003      	movs	r0, #3
 8016d04:	f7f1 fc72 	bl	80085ec <pl_R_DriveMotor_mode>
	reset_gyro();
 8016d08:	f7ea ff7e 	bl	8001c08 <reset_gyro>
	reset_speed();
 8016d0c:	f7ea f98a 	bl	8001024 <reset_speed>
	clear_Ierror();
 8016d10:	f7ee faba 	bl	8005288 <clear_Ierror>

	switch (main_modeR) {
 8016d14:	79fb      	ldrb	r3, [r7, #7]
 8016d16:	2b0f      	cmp	r3, #15
 8016d18:	f200 81b0 	bhi.w	801707c <mode_WallSensorTuning+0x3a0>
 8016d1c:	a201      	add	r2, pc, #4	; (adr r2, 8016d24 <mode_WallSensorTuning+0x48>)
 8016d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d22:	bf00      	nop
 8016d24:	08016d65 	.word	0x08016d65
 8016d28:	08016d8b 	.word	0x08016d8b
 8016d2c:	08016da3 	.word	0x08016da3
 8016d30:	08016e19 	.word	0x08016e19
 8016d34:	08016e8f 	.word	0x08016e8f
 8016d38:	08016f05 	.word	0x08016f05
 8016d3c:	08016f75 	.word	0x08016f75
 8016d40:	08016f9b 	.word	0x08016f9b
 8016d44:	08016fc1 	.word	0x08016fc1
 8016d48:	08016fe7 	.word	0x08016fe7
 8016d4c:	0801707d 	.word	0x0801707d
 8016d50:	0801707d 	.word	0x0801707d
 8016d54:	0801707d 	.word	0x0801707d
 8016d58:	0801707d 	.word	0x0801707d
 8016d5c:	0801707d 	.word	0x0801707d
 8016d60:	0801700d 	.word	0x0801700d
		case 0://横壁追従制御
			record_mode=16;
 8016d64:	4bd2      	ldr	r3, [pc, #840]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016d66:	2210      	movs	r2, #16
 8016d68:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8016d6e:	68b8      	ldr	r0, [r7, #8]
 8016d70:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 80170b4 <mode_WallSensorTuning+0x3d8>
 8016d74:	eddf 1ad0 	vldr	s3, [pc, #832]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 8016d78:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016d7c:	eddf 0acf 	vldr	s1, [pc, #828]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016d80:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80170c0 <mode_WallSensorTuning+0x3e4>
 8016d84:	f7ec ff70 	bl	8003c68 <straight_table2>
		break;
 8016d88:	e178      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	60fb      	str	r3, [r7, #12]
 8016d8e:	e004      	b.n	8016d9a <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016d90:	f7ed ff9a 	bl	8004cc8 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	3301      	adds	r3, #1
 8016d98:	60fb      	str	r3, [r7, #12]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	2b14      	cmp	r3, #20
 8016d9e:	ddf7      	ble.n	8016d90 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016da0:	e16c      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016da2:	4bc3      	ldr	r3, [pc, #780]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016da4:	2207      	movs	r2, #7
 8016da6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016da8:	2300      	movs	r3, #0
 8016daa:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016db0:	2300      	movs	r3, #0
 8016db2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016db4:	2300      	movs	r3, #0
 8016db6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016db8:	68b8      	ldr	r0, [r7, #8]
 8016dba:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016dbe:	eddf 1ac2 	vldr	s3, [pc, #776]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016dc2:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016dc6:	eddf 0abd 	vldr	s1, [pc, #756]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016dca:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80170cc <mode_WallSensorTuning+0x3f0>
 8016dce:	f7ec ff4b 	bl	8003c68 <straight_table2>
			mode.WallCutMode=1;
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016dda:	68b8      	ldr	r0, [r7, #8]
 8016ddc:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016de0:	eddf 1ab9 	vldr	s3, [pc, #740]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016de4:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016de8:	eddf 0ab7 	vldr	s1, [pc, #732]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016dec:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80170d0 <mode_WallSensorTuning+0x3f4>
 8016df0:	f7ec ff3a 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 8016df4:	2300      	movs	r3, #0
 8016df6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016dfc:	68b8      	ldr	r0, [r7, #8]
 8016dfe:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016e02:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e06:	ed9f 1aad 	vldr	s2, [pc, #692]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016e0a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e0e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80170d4 <mode_WallSensorTuning+0x3f8>
 8016e12:	f7ec ff29 	bl	8003c68 <straight_table2>
		break;
 8016e16:	e131      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016e18:	4ba5      	ldr	r3, [pc, #660]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016e1a:	2208      	movs	r2, #8
 8016e1c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016e22:	2300      	movs	r3, #0
 8016e24:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8016e2e:	68b8      	ldr	r0, [r7, #8]
 8016e30:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016e34:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e38:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e3c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016e40:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80170d8 <mode_WallSensorTuning+0x3fc>
 8016e44:	f7ec ff10 	bl	8003c68 <straight_table2>
			mode.WallCutMode=2;
 8016e48:	2302      	movs	r3, #2
 8016e4a:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016e50:	68b8      	ldr	r0, [r7, #8]
 8016e52:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016e56:	eddf 1a9c 	vldr	s3, [pc, #624]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e5a:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e5e:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e62:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80170d0 <mode_WallSensorTuning+0x3f4>
 8016e66:	f7ec feff 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8016e72:	68b8      	ldr	r0, [r7, #8]
 8016e74:	ed9f 2a93 	vldr	s4, [pc, #588]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016e78:	eddf 1a93 	vldr	s3, [pc, #588]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e7c:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016e80:	eddf 0a91 	vldr	s1, [pc, #580]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016e84:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80170d4 <mode_WallSensorTuning+0x3f8>
 8016e88:	f7ec feee 	bl	8003c68 <straight_table2>
		break;
 8016e8c:	e0f6      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8016e8e:	4b88      	ldr	r3, [pc, #544]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016e90:	2208      	movs	r2, #8
 8016e92:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016e94:	2300      	movs	r3, #0
 8016e96:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016ea4:	68b8      	ldr	r0, [r7, #8]
 8016ea6:	ed9f 2a87 	vldr	s4, [pc, #540]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016eaa:	eddf 1a87 	vldr	s3, [pc, #540]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016eae:	ed9f 1a86 	vldr	s2, [pc, #536]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016eb2:	eddf 0a82 	vldr	s1, [pc, #520]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016eb6:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80170dc <mode_WallSensorTuning+0x400>
 8016eba:	f7ec fed5 	bl	8003c68 <straight_table2>
			mode.WallCutMode=3;
 8016ebe:	2303      	movs	r3, #3
 8016ec0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016ec6:	68b8      	ldr	r0, [r7, #8]
 8016ec8:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016ecc:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016ed0:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016ed4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016ed8:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80170e0 <mode_WallSensorTuning+0x404>
 8016edc:	f7ec fec4 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016ee8:	68b8      	ldr	r0, [r7, #8]
 8016eea:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016eee:	eddf 1a76 	vldr	s3, [pc, #472]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016ef2:	ed9f 1a72 	vldr	s2, [pc, #456]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016ef6:	eddf 0a74 	vldr	s1, [pc, #464]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016efa:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80170e4 <mode_WallSensorTuning+0x408>
 8016efe:	f7ec feb3 	bl	8003c68 <straight_table2>
		break;
 8016f02:	e0bb      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016f04:	2300      	movs	r3, #0
 8016f06:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016f10:	2300      	movs	r3, #0
 8016f12:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016f14:	68b8      	ldr	r0, [r7, #8]
 8016f16:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016f1a:	eddf 1a6b 	vldr	s3, [pc, #428]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f1e:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f22:	eddf 0a66 	vldr	s1, [pc, #408]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016f26:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80170dc <mode_WallSensorTuning+0x400>
 8016f2a:	f7ec fe9d 	bl	8003c68 <straight_table2>
			mode.WallCutMode=4;
 8016f2e:	2304      	movs	r3, #4
 8016f30:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016f32:	2300      	movs	r3, #0
 8016f34:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016f36:	68b8      	ldr	r0, [r7, #8]
 8016f38:	ed9f 2a62 	vldr	s4, [pc, #392]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016f3c:	eddf 1a62 	vldr	s3, [pc, #392]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f40:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f44:	eddf 0a60 	vldr	s1, [pc, #384]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f48:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80170e0 <mode_WallSensorTuning+0x404>
 8016f4c:	f7ec fe8c 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016f54:	2300      	movs	r3, #0
 8016f56:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016f58:	68b8      	ldr	r0, [r7, #8]
 8016f5a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016f5e:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f62:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016f66:	eddf 0a58 	vldr	s1, [pc, #352]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f6a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80170e4 <mode_WallSensorTuning+0x408>
 8016f6e:	f7ec fe7b 	bl	8003c68 <straight_table2>
		break;
 8016f72:	e083      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016f74:	4b4e      	ldr	r3, [pc, #312]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016f76:	2209      	movs	r2, #9
 8016f78:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016f7e:	68b8      	ldr	r0, [r7, #8]
 8016f80:	ed9f 2a50 	vldr	s4, [pc, #320]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016f84:	eddf 1a50 	vldr	s3, [pc, #320]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016f88:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016f8c:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016f90:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80170e8 <mode_WallSensorTuning+0x40c>
 8016f94:	f7ec fe68 	bl	8003c68 <straight_table2>
		break;
 8016f98:	e070      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 8016f9a:	4b45      	ldr	r3, [pc, #276]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016f9c:	220a      	movs	r2, #10
 8016f9e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016fa4:	68b8      	ldr	r0, [r7, #8]
 8016fa6:	ed9f 2a47 	vldr	s4, [pc, #284]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016faa:	eddf 1a47 	vldr	s3, [pc, #284]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016fae:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016fb2:	eddf 0a42 	vldr	s1, [pc, #264]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016fb6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80170e8 <mode_WallSensorTuning+0x40c>
 8016fba:	f7ec fe55 	bl	8003c68 <straight_table2>

		break;
 8016fbe:	e05d      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016fc0:	4b3b      	ldr	r3, [pc, #236]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016fc2:	2207      	movs	r2, #7
 8016fc4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016fc6:	2303      	movs	r3, #3
 8016fc8:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016fca:	68b8      	ldr	r0, [r7, #8]
 8016fcc:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80170c4 <mode_WallSensorTuning+0x3e8>
 8016fd0:	eddf 1a3d 	vldr	s3, [pc, #244]	; 80170c8 <mode_WallSensorTuning+0x3ec>
 8016fd4:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016fd8:	eddf 0a38 	vldr	s1, [pc, #224]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016fdc:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80170e8 <mode_WallSensorTuning+0x40c>
 8016fe0:	f7ec fe42 	bl	8003c68 <straight_table2>
		break;
 8016fe4:	e04a      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8016fe6:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 8016fe8:	2208      	movs	r2, #8
 8016fea:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016fec:	2303      	movs	r3, #3
 8016fee:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016ff0:	68b8      	ldr	r0, [r7, #8]
 8016ff2:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80170ec <mode_WallSensorTuning+0x410>
 8016ff6:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80170f0 <mode_WallSensorTuning+0x414>
 8016ffa:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8016ffe:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80170bc <mode_WallSensorTuning+0x3e0>
 8017002:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80170f4 <mode_WallSensorTuning+0x418>
 8017006:	f7ec fe2f 	bl	8003c68 <straight_table2>
		break;
 801700a:	e037      	b.n	801707c <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 801700c:	2305      	movs	r3, #5
 801700e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8017010:	2300      	movs	r3, #0
 8017012:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8017014:	2300      	movs	r3, #0
 8017016:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8017018:	2300      	movs	r3, #0
 801701a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 801701c:	68b8      	ldr	r0, [r7, #8]
 801701e:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80170f8 <mode_WallSensorTuning+0x41c>
 8017022:	eddf 1a25 	vldr	s3, [pc, #148]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 8017026:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 801702a:	eddf 0a24 	vldr	s1, [pc, #144]	; 80170bc <mode_WallSensorTuning+0x3e0>
 801702e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80170fc <mode_WallSensorTuning+0x420>
 8017032:	f7ec fe19 	bl	8003c68 <straight_table2>
			mode.WallCutMode=2;
 8017036:	2302      	movs	r3, #2
 8017038:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801703a:	2300      	movs	r3, #0
 801703c:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801703e:	68b8      	ldr	r0, [r7, #8]
 8017040:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80170f8 <mode_WallSensorTuning+0x41c>
 8017044:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 8017048:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 801704c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 8017050:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8017100 <mode_WallSensorTuning+0x424>
 8017054:	f7ec fe08 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 8017058:	2300      	movs	r3, #0
 801705a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801705c:	2300      	movs	r3, #0
 801705e:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8017060:	68b8      	ldr	r0, [r7, #8]
 8017062:	ed9f 2a25 	vldr	s4, [pc, #148]	; 80170f8 <mode_WallSensorTuning+0x41c>
 8017066:	eddf 1a14 	vldr	s3, [pc, #80]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 801706a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80170bc <mode_WallSensorTuning+0x3e0>
 801706e:	eddf 0a12 	vldr	s1, [pc, #72]	; 80170b8 <mode_WallSensorTuning+0x3dc>
 8017072:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8017104 <mode_WallSensorTuning+0x428>
 8017076:	f7ec fdf7 	bl	8003c68 <straight_table2>
		break;
 801707a:	bf00      	nop
	}
	record_mode=0;
 801707c:	4b0c      	ldr	r3, [pc, #48]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 801707e:	2200      	movs	r2, #0
 8017080:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8017082:	2003      	movs	r0, #3
 8017084:	f7f1 fab2 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8017088:	2003      	movs	r0, #3
 801708a:	f7f1 fa87 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801708e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017092:	f7f1 fda9 	bl	8008be8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8017096:	f7f1 fb0b 	bl	80086b0 <pl_FunMotor_stop>
	record_mode=0;
 801709a:	4b05      	ldr	r3, [pc, #20]	; (80170b0 <mode_WallSensorTuning+0x3d4>)
 801709c:	2200      	movs	r2, #0
 801709e:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 80170a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80170a4:	f7f1 fda0 	bl	8008be8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80170a8:	2000      	movs	r0, #0
 80170aa:	f7f1 fa6d 	bl	8008588 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80170ae:	e02e      	b.n	801710e <mode_WallSensorTuning+0x432>
 80170b0:	2000f284 	.word	0x2000f284
 80170b4:	459c4000 	.word	0x459c4000
 80170b8:	43fa0000 	.word	0x43fa0000
 80170bc:	00000000 	.word	0x00000000
 80170c0:	44b40000 	.word	0x44b40000
 80170c4:	453b8000 	.word	0x453b8000
 80170c8:	43960000 	.word	0x43960000
 80170cc:	431b8000 	.word	0x431b8000
 80170d0:	41b40000 	.word	0x41b40000
 80170d4:	42870000 	.word	0x42870000
 80170d8:	42cd0000 	.word	0x42cd0000
 80170dc:	4329c77b 	.word	0x4329c77b
 80170e0:	41fe8ef6 	.word	0x41fe8ef6
 80170e4:	42beeb39 	.word	0x42beeb39
 80170e8:	43beeb39 	.word	0x43beeb39
 80170ec:	461c4000 	.word	0x461c4000
 80170f0:	442f0000 	.word	0x442f0000
 80170f4:	4484977b 	.word	0x4484977b
 80170f8:	44bb8000 	.word	0x44bb8000
 80170fc:	43488000 	.word	0x43488000
 8017100:	42340000 	.word	0x42340000
 8017104:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8017108:	2001      	movs	r0, #1
 801710a:	f002 facb 	bl	80196a4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801710e:	4b0e      	ldr	r3, [pc, #56]	; (8017148 <mode_WallSensorTuning+0x46c>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017116:	ddf7      	ble.n	8017108 <mode_WallSensorTuning+0x42c>
 8017118:	4b0b      	ldr	r3, [pc, #44]	; (8017148 <mode_WallSensorTuning+0x46c>)
 801711a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801711e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017122:	ddf1      	ble.n	8017108 <mode_WallSensorTuning+0x42c>
 8017124:	4b08      	ldr	r3, [pc, #32]	; (8017148 <mode_WallSensorTuning+0x46c>)
 8017126:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801712a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801712e:	ddeb      	ble.n	8017108 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 8017130:	2001      	movs	r0, #1
 8017132:	f7f0 fd99 	bl	8007c68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017136:	2001      	movs	r0, #1
 8017138:	f7f0 fda8 	bl	8007c8c <pl_l_blue_LED>
	record_print();
 801713c:	f000 faf6 	bl	801772c <record_print>



}
 8017140:	bf00      	nop
 8017142:	3710      	adds	r7, #16
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}
 8017148:	200002bc 	.word	0x200002bc

0801714c <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 801714c:	b580      	push	{r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	4603      	mov	r3, r0
 8017154:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8017156:	2300      	movs	r3, #0
 8017158:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 801715a:	2300      	movs	r3, #0
 801715c:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 801715e:	2300      	movs	r3, #0
 8017160:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8017162:	2300      	movs	r3, #0
 8017164:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8017166:	2001      	movs	r0, #1
 8017168:	f7f1 fa0e 	bl	8008588 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801716c:	2003      	movs	r0, #3
 801716e:	f7f1 fa15 	bl	800859c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8017172:	2003      	movs	r0, #3
 8017174:	f7f1 fa3a 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 8017178:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8017508 <mode_WallSensorTuning_fast+0x3bc>
 801717c:	f7f1 faa2 	bl	80086c4 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8017180:	f7f1 fa8c 	bl	800869c <pl_FunMotor_start>
	HAL_Delay(600);
 8017184:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017188:	f002 fa8c 	bl	80196a4 <HAL_Delay>
	reset_gyro();
 801718c:	f7ea fd3c 	bl	8001c08 <reset_gyro>
	reset_speed();
 8017190:	f7e9 ff48 	bl	8001024 <reset_speed>
	clear_Ierror();
 8017194:	f7ee f878 	bl	8005288 <clear_Ierror>
	angle=0;
 8017198:	4bdc      	ldr	r3, [pc, #880]	; (801750c <mode_WallSensorTuning_fast+0x3c0>)
 801719a:	f04f 0200 	mov.w	r2, #0
 801719e:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 80171a0:	79fb      	ldrb	r3, [r7, #7]
 80171a2:	2b0f      	cmp	r3, #15
 80171a4:	f200 821b 	bhi.w	80175de <mode_WallSensorTuning_fast+0x492>
 80171a8:	a201      	add	r2, pc, #4	; (adr r2, 80171b0 <mode_WallSensorTuning_fast+0x64>)
 80171aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171ae:	bf00      	nop
 80171b0:	080171f1 	.word	0x080171f1
 80171b4:	08017223 	.word	0x08017223
 80171b8:	08017299 	.word	0x08017299
 80171bc:	0801730f 	.word	0x0801730f
 80171c0:	08017385 	.word	0x08017385
 80171c4:	080173fb 	.word	0x080173fb
 80171c8:	08017471 	.word	0x08017471
 80171cc:	08017497 	.word	0x08017497
 80171d0:	080174bd 	.word	0x080174bd
 80171d4:	080174e3 	.word	0x080174e3
 80171d8:	0801756d 	.word	0x0801756d
 80171dc:	08017593 	.word	0x08017593
 80171e0:	080175b9 	.word	0x080175b9
 80171e4:	080175df 	.word	0x080175df
 80171e8:	080175df 	.word	0x080175df
 80171ec:	080175df 	.word	0x080175df
		case 0://横壁追従制御
			record_mode=15;
 80171f0:	4bc7      	ldr	r3, [pc, #796]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 80171f2:	220f      	movs	r2, #15
 80171f4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80171f6:	2301      	movs	r3, #1
 80171f8:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 80171fa:	4bc6      	ldr	r3, [pc, #792]	; (8017514 <mode_WallSensorTuning_fast+0x3c8>)
 80171fc:	2201      	movs	r2, #1
 80171fe:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8017200:	68f8      	ldr	r0, [r7, #12]
 8017202:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8017518 <mode_WallSensorTuning_fast+0x3cc>
 8017206:	eddf 1ac5 	vldr	s3, [pc, #788]	; 801751c <mode_WallSensorTuning_fast+0x3d0>
 801720a:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 801720e:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017212:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8017524 <mode_WallSensorTuning_fast+0x3d8>
 8017216:	f7ec fd27 	bl	8003c68 <straight_table2>
			highspeed_mode=0;
 801721a:	4bbe      	ldr	r3, [pc, #760]	; (8017514 <mode_WallSensorTuning_fast+0x3c8>)
 801721c:	2200      	movs	r2, #0
 801721e:	701a      	strb	r2, [r3, #0]
		break;
 8017220:	e1dd      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 8017222:	4bbb      	ldr	r3, [pc, #748]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 8017224:	2208      	movs	r2, #8
 8017226:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017228:	2301      	movs	r3, #1
 801722a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801722c:	2300      	movs	r3, #0
 801722e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017230:	2300      	movs	r3, #0
 8017232:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017234:	2300      	movs	r3, #0
 8017236:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 8017238:	68f8      	ldr	r0, [r7, #12]
 801723a:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 801723e:	eddf 1abb 	vldr	s3, [pc, #748]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017242:	ed9f 1aba 	vldr	s2, [pc, #744]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017246:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 801724a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8017530 <mode_WallSensorTuning_fast+0x3e4>
 801724e:	f7ec fd0b 	bl	8003c68 <straight_table2>
			mode.WallCutMode=2;
 8017252:	2302      	movs	r3, #2
 8017254:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017256:	2300      	movs	r3, #0
 8017258:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 8017260:	eddf 1ab2 	vldr	s3, [pc, #712]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017264:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017268:	eddf 0ab0 	vldr	s1, [pc, #704]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801726c:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8017534 <mode_WallSensorTuning_fast+0x3e8>
 8017270:	f7ec fcfa 	bl	8003c68 <straight_table2>
			mode.WallControlMode=1;
 8017274:	2301      	movs	r3, #1
 8017276:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8017278:	2300      	movs	r3, #0
 801727a:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 801727c:	68f8      	ldr	r0, [r7, #12]
 801727e:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 8017282:	eddf 1aaa 	vldr	s3, [pc, #680]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017286:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 801728a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801728e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8017538 <mode_WallSensorTuning_fast+0x3ec>
 8017292:	f7ec fce9 	bl	8003c68 <straight_table2>
		break;
 8017296:	e1a2      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 8017298:	4b9d      	ldr	r3, [pc, #628]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 801729a:	2208      	movs	r2, #8
 801729c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801729e:	2301      	movs	r3, #1
 80172a0:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80172a2:	2300      	movs	r3, #0
 80172a4:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80172a6:	2300      	movs	r3, #0
 80172a8:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80172aa:	2300      	movs	r3, #0
 80172ac:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80172b4:	eddf 1aa1 	vldr	s3, [pc, #644]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172b8:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172bc:	eddf 0a98 	vldr	s1, [pc, #608]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80172c0:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8017530 <mode_WallSensorTuning_fast+0x3e4>
 80172c4:	f7ec fcd0 	bl	8003c68 <straight_table2>
			mode.WallCutMode=2;
 80172c8:	2302      	movs	r3, #2
 80172ca:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80172cc:	2300      	movs	r3, #0
 80172ce:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80172d6:	eddf 1a99 	vldr	s3, [pc, #612]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172da:	ed9f 1a98 	vldr	s2, [pc, #608]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172de:	eddf 0a97 	vldr	s1, [pc, #604]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172e2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8017534 <mode_WallSensorTuning_fast+0x3e8>
 80172e6:	f7ec fcbf 	bl	8003c68 <straight_table2>
			mode.WallControlMode=1;
 80172ea:	2301      	movs	r3, #1
 80172ec:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80172ee:	2300      	movs	r3, #0
 80172f0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 80172f2:	68f8      	ldr	r0, [r7, #12]
 80172f4:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80172f8:	eddf 1a90 	vldr	s3, [pc, #576]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 80172fc:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017300:	eddf 0a8e 	vldr	s1, [pc, #568]	; 801753c <mode_WallSensorTuning_fast+0x3f0>
 8017304:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8017538 <mode_WallSensorTuning_fast+0x3ec>
 8017308:	f7ec fcae 	bl	8003c68 <straight_table2>
		break;
 801730c:	e167      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 801730e:	4b80      	ldr	r3, [pc, #512]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 8017310:	2208      	movs	r2, #8
 8017312:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017314:	2301      	movs	r3, #1
 8017316:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8017318:	2300      	movs	r3, #0
 801731a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801731c:	2300      	movs	r3, #0
 801731e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017320:	2300      	movs	r3, #0
 8017322:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8017324:	68f8      	ldr	r0, [r7, #12]
 8017326:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8017540 <mode_WallSensorTuning_fast+0x3f4>
 801732a:	eddf 1a86 	vldr	s3, [pc, #536]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 801732e:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 8017332:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017336:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8017530 <mode_WallSensorTuning_fast+0x3e4>
 801733a:	f7ec fc95 	bl	8003c68 <straight_table2>
			mode.WallCutMode=2;
 801733e:	2302      	movs	r3, #2
 8017340:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017342:	2300      	movs	r3, #0
 8017344:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8017346:	68f8      	ldr	r0, [r7, #12]
 8017348:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8017540 <mode_WallSensorTuning_fast+0x3f4>
 801734c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 8017350:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 8017354:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 8017358:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8017534 <mode_WallSensorTuning_fast+0x3e8>
 801735c:	f7ec fc84 	bl	8003c68 <straight_table2>
			mode.WallControlMode=1;
 8017360:	2301      	movs	r3, #1
 8017362:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8017364:	2300      	movs	r3, #0
 8017366:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8017540 <mode_WallSensorTuning_fast+0x3f4>
 801736e:	eddf 1a75 	vldr	s3, [pc, #468]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 8017372:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017376:	eddf 0a73 	vldr	s1, [pc, #460]	; 8017544 <mode_WallSensorTuning_fast+0x3f8>
 801737a:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8017538 <mode_WallSensorTuning_fast+0x3ec>
 801737e:	f7ec fc73 	bl	8003c68 <straight_table2>
		break;
 8017382:	e12c      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8017384:	4b62      	ldr	r3, [pc, #392]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 8017386:	2208      	movs	r2, #8
 8017388:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 801738a:	2300      	movs	r3, #0
 801738c:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801738e:	2300      	movs	r3, #0
 8017390:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017392:	2300      	movs	r3, #0
 8017394:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017396:	2300      	movs	r3, #0
 8017398:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80173a0:	eddf 1a62 	vldr	s3, [pc, #392]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173a4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173a8:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80173ac:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8017548 <mode_WallSensorTuning_fast+0x3fc>
 80173b0:	f7ec fc5a 	bl	8003c68 <straight_table2>
			mode.WallCutMode=3;
 80173b4:	2303      	movs	r3, #3
 80173b6:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80173b8:	2300      	movs	r3, #0
 80173ba:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80173c2:	eddf 1a5a 	vldr	s3, [pc, #360]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173c6:	ed9f 1a59 	vldr	s2, [pc, #356]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173ca:	eddf 0a58 	vldr	s1, [pc, #352]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173ce:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 801754c <mode_WallSensorTuning_fast+0x400>
 80173d2:	f7ec fc49 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 80173d6:	2300      	movs	r3, #0
 80173d8:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80173da:	2300      	movs	r3, #0
 80173dc:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 80173e4:	eddf 1a51 	vldr	s3, [pc, #324]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173e8:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80173ec:	eddf 0a4f 	vldr	s1, [pc, #316]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 80173f0:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8017550 <mode_WallSensorTuning_fast+0x404>
 80173f4:	f7ec fc38 	bl	8003c68 <straight_table2>
		break;
 80173f8:	e0f1      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 80173fa:	4b45      	ldr	r3, [pc, #276]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 80173fc:	2208      	movs	r2, #8
 80173fe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8017400:	2300      	movs	r3, #0
 8017402:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8017404:	2300      	movs	r3, #0
 8017406:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017408:	2300      	movs	r3, #0
 801740a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801740c:	2300      	movs	r3, #0
 801740e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 8017416:	eddf 1a45 	vldr	s3, [pc, #276]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801741a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801741e:	eddf 0a40 	vldr	s1, [pc, #256]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017422:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017548 <mode_WallSensorTuning_fast+0x3fc>
 8017426:	f7ec fc1f 	bl	8003c68 <straight_table2>
			mode.WallCutMode=4;
 801742a:	2304      	movs	r3, #4
 801742c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801742e:	2300      	movs	r3, #0
 8017430:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8017432:	68f8      	ldr	r0, [r7, #12]
 8017434:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 8017438:	eddf 1a3c 	vldr	s3, [pc, #240]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801743c:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017440:	eddf 0a3a 	vldr	s1, [pc, #232]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017444:	ed9f 0a41 	vldr	s0, [pc, #260]	; 801754c <mode_WallSensorTuning_fast+0x400>
 8017448:	f7ec fc0e 	bl	8003c68 <straight_table2>
			mode.WallControlMode=0;
 801744c:	2300      	movs	r3, #0
 801744e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8017450:	2300      	movs	r3, #0
 8017452:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8017528 <mode_WallSensorTuning_fast+0x3dc>
 801745a:	eddf 1a34 	vldr	s3, [pc, #208]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 801745e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017462:	eddf 0a32 	vldr	s1, [pc, #200]	; 801752c <mode_WallSensorTuning_fast+0x3e0>
 8017466:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8017550 <mode_WallSensorTuning_fast+0x404>
 801746a:	f7ec fbfd 	bl	8003c68 <straight_table2>
		break;
 801746e:	e0b6      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 8017470:	4b27      	ldr	r3, [pc, #156]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 8017472:	2207      	movs	r2, #7
 8017474:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8017476:	2300      	movs	r3, #0
 8017478:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8017554 <mode_WallSensorTuning_fast+0x408>
 8017480:	eddf 1a35 	vldr	s3, [pc, #212]	; 8017558 <mode_WallSensorTuning_fast+0x40c>
 8017484:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 8017488:	eddf 0a25 	vldr	s1, [pc, #148]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 801748c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801755c <mode_WallSensorTuning_fast+0x410>
 8017490:	f7ec fbea 	bl	8003c68 <straight_table2>
		break;
 8017494:	e0a3      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8017496:	4b1e      	ldr	r3, [pc, #120]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 8017498:	2209      	movs	r2, #9
 801749a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801749c:	2300      	movs	r3, #0
 801749e:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80174a0:	68f8      	ldr	r0, [r7, #12]
 80174a2:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8017554 <mode_WallSensorTuning_fast+0x408>
 80174a6:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8017558 <mode_WallSensorTuning_fast+0x40c>
 80174aa:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174ae:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174b2:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 801755c <mode_WallSensorTuning_fast+0x410>
 80174b6:	f7ec fbd7 	bl	8003c68 <straight_table2>

		break;
 80174ba:	e090      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 80174bc:	4b14      	ldr	r3, [pc, #80]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 80174be:	2207      	movs	r2, #7
 80174c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80174c2:	2303      	movs	r3, #3
 80174c4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8017554 <mode_WallSensorTuning_fast+0x408>
 80174cc:	eddf 1a24 	vldr	s3, [pc, #144]	; 8017560 <mode_WallSensorTuning_fast+0x414>
 80174d0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174d4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174d8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8017564 <mode_WallSensorTuning_fast+0x418>
 80174dc:	f7ec fbc4 	bl	8003c68 <straight_table2>
		break;
 80174e0:	e07d      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 80174e2:	4b0b      	ldr	r3, [pc, #44]	; (8017510 <mode_WallSensorTuning_fast+0x3c4>)
 80174e4:	2208      	movs	r2, #8
 80174e6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80174e8:	2303      	movs	r3, #3
 80174ea:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 80174ec:	68f8      	ldr	r0, [r7, #12]
 80174ee:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8017554 <mode_WallSensorTuning_fast+0x408>
 80174f2:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8017560 <mode_WallSensorTuning_fast+0x414>
 80174f6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174fa:	eddf 0a09 	vldr	s1, [pc, #36]	; 8017520 <mode_WallSensorTuning_fast+0x3d4>
 80174fe:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8017568 <mode_WallSensorTuning_fast+0x41c>
 8017502:	f7ec fbb1 	bl	8003c68 <straight_table2>
		break;
 8017506:	e06a      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
 8017508:	3f7d70a4 	.word	0x3f7d70a4
 801750c:	20000268 	.word	0x20000268
 8017510:	2000f284 	.word	0x2000f284
 8017514:	20000814 	.word	0x20000814
 8017518:	46bb8000 	.word	0x46bb8000
 801751c:	459c4000 	.word	0x459c4000
 8017520:	00000000 	.word	0x00000000
 8017524:	44e39000 	.word	0x44e39000
 8017528:	461c4000 	.word	0x461c4000
 801752c:	447a0000 	.word	0x447a0000
 8017530:	42cd0000 	.word	0x42cd0000
 8017534:	41b40000 	.word	0x41b40000
 8017538:	42e10000 	.word	0x42e10000
 801753c:	44960000 	.word	0x44960000
 8017540:	464b2000 	.word	0x464b2000
 8017544:	44bb8000 	.word	0x44bb8000
 8017548:	4321c77b 	.word	0x4321c77b
 801754c:	41fe8ef6 	.word	0x41fe8ef6
 8017550:	42beeb39 	.word	0x42beeb39
 8017554:	469c4000 	.word	0x469c4000
 8017558:	44fa0000 	.word	0x44fa0000
 801755c:	445ebd17 	.word	0x445ebd17
 8017560:	455ac000 	.word	0x455ac000
 8017564:	443eeb39 	.word	0x443eeb39
 8017568:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 801756c:	4b39      	ldr	r3, [pc, #228]	; (8017654 <mode_WallSensorTuning_fast+0x508>)
 801756e:	220a      	movs	r2, #10
 8017570:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017572:	2303      	movs	r3, #3
 8017574:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8017658 <mode_WallSensorTuning_fast+0x50c>
 801757c:	eddf 1a37 	vldr	s3, [pc, #220]	; 801765c <mode_WallSensorTuning_fast+0x510>
 8017580:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 8017584:	eddf 0a36 	vldr	s1, [pc, #216]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 8017588:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8017664 <mode_WallSensorTuning_fast+0x518>
 801758c:	f7ec fb6c 	bl	8003c68 <straight_table2>
		break;
 8017590:	e025      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 8017592:	4b30      	ldr	r3, [pc, #192]	; (8017654 <mode_WallSensorTuning_fast+0x508>)
 8017594:	220b      	movs	r2, #11
 8017596:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017598:	2303      	movs	r3, #3
 801759a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8017668 <mode_WallSensorTuning_fast+0x51c>
 80175a2:	eddf 1a32 	vldr	s3, [pc, #200]	; 801766c <mode_WallSensorTuning_fast+0x520>
 80175a6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 80175aa:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 80175ae:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8017664 <mode_WallSensorTuning_fast+0x518>
 80175b2:	f7ec fb59 	bl	8003c68 <straight_table2>
		break;
 80175b6:	e012      	b.n	80175de <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 80175b8:	4b26      	ldr	r3, [pc, #152]	; (8017654 <mode_WallSensorTuning_fast+0x508>)
 80175ba:	220c      	movs	r2, #12
 80175bc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80175be:	2303      	movs	r3, #3
 80175c0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8017668 <mode_WallSensorTuning_fast+0x51c>
 80175c8:	eddf 1a28 	vldr	s3, [pc, #160]	; 801766c <mode_WallSensorTuning_fast+0x520>
 80175cc:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 80175d0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8017660 <mode_WallSensorTuning_fast+0x514>
 80175d4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8017664 <mode_WallSensorTuning_fast+0x518>
 80175d8:	f7ec fb46 	bl	8003c68 <straight_table2>
		break;
 80175dc:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 80175de:	4b1d      	ldr	r3, [pc, #116]	; (8017654 <mode_WallSensorTuning_fast+0x508>)
 80175e0:	2200      	movs	r2, #0
 80175e2:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80175e4:	2003      	movs	r0, #3
 80175e6:	f7f1 f801 	bl	80085ec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80175ea:	2003      	movs	r0, #3
 80175ec:	f7f0 ffd6 	bl	800859c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80175f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175f4:	f7f1 faf8 	bl	8008be8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80175f8:	f7f1 f85a 	bl	80086b0 <pl_FunMotor_stop>
	record_mode=0;
 80175fc:	4b15      	ldr	r3, [pc, #84]	; (8017654 <mode_WallSensorTuning_fast+0x508>)
 80175fe:	2200      	movs	r2, #0
 8017600:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8017602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017606:	f7f1 faef 	bl	8008be8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801760a:	2000      	movs	r0, #0
 801760c:	f7f0 ffbc 	bl	8008588 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017610:	e002      	b.n	8017618 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8017612:	2001      	movs	r0, #1
 8017614:	f002 f846 	bl	80196a4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017618:	4b15      	ldr	r3, [pc, #84]	; (8017670 <mode_WallSensorTuning_fast+0x524>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017620:	ddf7      	ble.n	8017612 <mode_WallSensorTuning_fast+0x4c6>
 8017622:	4b13      	ldr	r3, [pc, #76]	; (8017670 <mode_WallSensorTuning_fast+0x524>)
 8017624:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017628:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801762c:	ddf1      	ble.n	8017612 <mode_WallSensorTuning_fast+0x4c6>
 801762e:	4b10      	ldr	r3, [pc, #64]	; (8017670 <mode_WallSensorTuning_fast+0x524>)
 8017630:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017634:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017638:	ddeb      	ble.n	8017612 <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 801763a:	2001      	movs	r0, #1
 801763c:	f7f0 fb14 	bl	8007c68 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017640:	2001      	movs	r0, #1
 8017642:	f7f0 fb23 	bl	8007c8c <pl_l_blue_LED>
	record_print();
 8017646:	f000 f871 	bl	801772c <record_print>



}
 801764a:	bf00      	nop
 801764c:	3710      	adds	r7, #16
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	2000f284 	.word	0x2000f284
 8017658:	469c4000 	.word	0x469c4000
 801765c:	455ac000 	.word	0x455ac000
 8017660:	00000000 	.word	0x00000000
 8017664:	443eeb39 	.word	0x443eeb39
 8017668:	466a6000 	.word	0x466a6000
 801766c:	453b8000 	.word	0x453b8000
 8017670:	200002bc 	.word	0x200002bc

08017674 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8017674:	b480      	push	{r7}
 8017676:	af00      	add	r7, sp, #0
	record_mode = 0;
 8017678:	4b06      	ldr	r3, [pc, #24]	; (8017694 <record_reset+0x20>)
 801767a:	2200      	movs	r2, #0
 801767c:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 801767e:	4b06      	ldr	r3, [pc, #24]	; (8017698 <record_reset+0x24>)
 8017680:	2200      	movs	r2, #0
 8017682:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8017684:	4b05      	ldr	r3, [pc, #20]	; (801769c <record_reset+0x28>)
 8017686:	2200      	movs	r2, #0
 8017688:	701a      	strb	r2, [r3, #0]
}
 801768a:	bf00      	nop
 801768c:	46bd      	mov	sp, r7
 801768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017692:	4770      	bx	lr
 8017694:	2000f284 	.word	0x2000f284
 8017698:	2000f288 	.word	0x2000f288
 801769c:	2000f290 	.word	0x2000f290

080176a0 <record_data>:

void record_data(float *input_record_data, int numlen) {
 80176a0:	b490      	push	{r4, r7}
 80176a2:	b084      	sub	sp, #16
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 80176aa:	2300      	movs	r3, #0
 80176ac:	60fb      	str	r3, [r7, #12]
 80176ae:	e013      	b.n	80176d8 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 80176b8:	4b18      	ldr	r3, [pc, #96]	; (801771c <record_data+0x7c>)
 80176ba:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 80176bc:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 80176be:	4818      	ldr	r0, [pc, #96]	; (8017720 <record_data+0x80>)
 80176c0:	68f9      	ldr	r1, [r7, #12]
 80176c2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80176c6:	fb04 f101 	mul.w	r1, r4, r1
 80176ca:	440b      	add	r3, r1
 80176cc:	009b      	lsls	r3, r3, #2
 80176ce:	4403      	add	r3, r0
 80176d0:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	3301      	adds	r3, #1
 80176d6:	60fb      	str	r3, [r7, #12]
 80176d8:	68fa      	ldr	r2, [r7, #12]
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	429a      	cmp	r2, r3
 80176de:	dbe7      	blt.n	80176b0 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 80176e0:	4b10      	ldr	r3, [pc, #64]	; (8017724 <record_data+0x84>)
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	d103      	bne.n	80176f0 <record_data+0x50>
		record_end_point = record_time;
 80176e8:	4b0c      	ldr	r3, [pc, #48]	; (801771c <record_data+0x7c>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4a0e      	ldr	r2, [pc, #56]	; (8017728 <record_data+0x88>)
 80176ee:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 80176f0:	4b0a      	ldr	r3, [pc, #40]	; (801771c <record_data+0x7c>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	3301      	adds	r3, #1
 80176f6:	4a09      	ldr	r2, [pc, #36]	; (801771c <record_data+0x7c>)
 80176f8:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 80176fa:	4b08      	ldr	r3, [pc, #32]	; (801771c <record_data+0x7c>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8017702:	4293      	cmp	r3, r2
 8017704:	dd05      	ble.n	8017712 <record_data+0x72>
		record_time = 0;
 8017706:	4b05      	ldr	r3, [pc, #20]	; (801771c <record_data+0x7c>)
 8017708:	2200      	movs	r2, #0
 801770a:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 801770c:	4b05      	ldr	r3, [pc, #20]	; (8017724 <record_data+0x84>)
 801770e:	2201      	movs	r2, #1
 8017710:	701a      	strb	r2, [r3, #0]
	}

}
 8017712:	bf00      	nop
 8017714:	3710      	adds	r7, #16
 8017716:	46bd      	mov	sp, r7
 8017718:	bc90      	pop	{r4, r7}
 801771a:	4770      	bx	lr
 801771c:	2000f288 	.word	0x2000f288
 8017720:	20003704 	.word	0x20003704
 8017724:	2000f290 	.word	0x2000f290
 8017728:	2000f28c 	.word	0x2000f28c

0801772c <record_print>:

void record_print(void) {
 801772c:	b580      	push	{r7, lr}
 801772e:	b084      	sub	sp, #16
 8017730:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8017732:	4b3a      	ldr	r3, [pc, #232]	; (801781c <record_print+0xf0>)
 8017734:	781b      	ldrb	r3, [r3, #0]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d12e      	bne.n	8017798 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 801773a:	2300      	movs	r3, #0
 801773c:	60fb      	str	r3, [r7, #12]
 801773e:	e025      	b.n	801778c <record_print+0x60>

			printf("%d", a);
 8017740:	68f9      	ldr	r1, [r7, #12]
 8017742:	4837      	ldr	r0, [pc, #220]	; (8017820 <record_print+0xf4>)
 8017744:	f009 ff00 	bl	8021548 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8017748:	2300      	movs	r3, #0
 801774a:	607b      	str	r3, [r7, #4]
 801774c:	e015      	b.n	801777a <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801774e:	4935      	ldr	r1, [pc, #212]	; (8017824 <record_print+0xf8>)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017756:	fb03 f202 	mul.w	r2, r3, r2
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	4413      	add	r3, r2
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	440b      	add	r3, r1
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4618      	mov	r0, r3
 8017766:	f7e8 ff17 	bl	8000598 <__aeabi_f2d>
 801776a:	4602      	mov	r2, r0
 801776c:	460b      	mov	r3, r1
 801776e:	482e      	ldr	r0, [pc, #184]	; (8017828 <record_print+0xfc>)
 8017770:	f009 feea 	bl	8021548 <iprintf>
					record_count++) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	3301      	adds	r3, #1
 8017778:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b03      	cmp	r3, #3
 801777e:	dde6      	ble.n	801774e <record_print+0x22>
			}
			printf("\n");
 8017780:	200a      	movs	r0, #10
 8017782:	f009 fef9 	bl	8021578 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	3301      	adds	r3, #1
 801778a:	60fb      	str	r3, [r7, #12]
 801778c:	4b27      	ldr	r3, [pc, #156]	; (801782c <record_print+0x100>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	429a      	cmp	r2, r3
 8017794:	dbd4      	blt.n	8017740 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8017796:	e03c      	b.n	8017812 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8017798:	2300      	movs	r3, #0
 801779a:	60fb      	str	r3, [r7, #12]
 801779c:	e034      	b.n	8017808 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 801779e:	4b24      	ldr	r3, [pc, #144]	; (8017830 <record_print+0x104>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	3301      	adds	r3, #1
 80177a4:	68fa      	ldr	r2, [r7, #12]
 80177a6:	4413      	add	r3, r2
 80177a8:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80177b0:	4293      	cmp	r3, r2
 80177b2:	dd03      	ble.n	80177bc <record_print+0x90>
				time_index -= max_record_time;
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80177ba:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 80177bc:	68f9      	ldr	r1, [r7, #12]
 80177be:	4818      	ldr	r0, [pc, #96]	; (8017820 <record_print+0xf4>)
 80177c0:	f009 fec2 	bl	8021548 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80177c4:	2300      	movs	r3, #0
 80177c6:	603b      	str	r3, [r7, #0]
 80177c8:	e015      	b.n	80177f6 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 80177ca:	4916      	ldr	r1, [pc, #88]	; (8017824 <record_print+0xf8>)
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80177d2:	fb03 f202 	mul.w	r2, r3, r2
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	4413      	add	r3, r2
 80177da:	009b      	lsls	r3, r3, #2
 80177dc:	440b      	add	r3, r1
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7e8 fed9 	bl	8000598 <__aeabi_f2d>
 80177e6:	4602      	mov	r2, r0
 80177e8:	460b      	mov	r3, r1
 80177ea:	480f      	ldr	r0, [pc, #60]	; (8017828 <record_print+0xfc>)
 80177ec:	f009 feac 	bl	8021548 <iprintf>
					record_count++) {
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	3301      	adds	r3, #1
 80177f4:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	2b03      	cmp	r3, #3
 80177fa:	dde6      	ble.n	80177ca <record_print+0x9e>
			printf("\n");
 80177fc:	200a      	movs	r0, #10
 80177fe:	f009 febb 	bl	8021578 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	3301      	adds	r3, #1
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801780e:	4293      	cmp	r3, r2
 8017810:	ddc5      	ble.n	801779e <record_print+0x72>
}
 8017812:	bf00      	nop
 8017814:	3710      	adds	r7, #16
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
 801781a:	bf00      	nop
 801781c:	2000f290 	.word	0x2000f290
 8017820:	080251cc 	.word	0x080251cc
 8017824:	20003704 	.word	0x20003704
 8017828:	080251d0 	.word	0x080251d0
 801782c:	2000f288 	.word	0x2000f288
 8017830:	2000f28c 	.word	0x2000f28c

08017834 <interrupt_record>:

void interrupt_record(void) {
 8017834:	b580      	push	{r7, lr}
 8017836:	b084      	sub	sp, #16
 8017838:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 801783a:	4baf      	ldr	r3, [pc, #700]	; (8017af8 <interrupt_record+0x2c4>)
 801783c:	781b      	ldrb	r3, [r3, #0]
 801783e:	2b01      	cmp	r3, #1
 8017840:	d110      	bne.n	8017864 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8017842:	4bae      	ldr	r3, [pc, #696]	; (8017afc <interrupt_record+0x2c8>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8017848:	4bad      	ldr	r3, [pc, #692]	; (8017b00 <interrupt_record+0x2cc>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801784e:	4bad      	ldr	r3, [pc, #692]	; (8017b04 <interrupt_record+0x2d0>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8017854:	4bac      	ldr	r3, [pc, #688]	; (8017b08 <interrupt_record+0x2d4>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801785a:	463b      	mov	r3, r7
 801785c:	2104      	movs	r1, #4
 801785e:	4618      	mov	r0, r3
 8017860:	f7ff ff1e 	bl	80176a0 <record_data>
		}
	if (record_mode == 2) {
 8017864:	4ba4      	ldr	r3, [pc, #656]	; (8017af8 <interrupt_record+0x2c4>)
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	2b02      	cmp	r3, #2
 801786a:	d11b      	bne.n	80178a4 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 801786c:	4ba7      	ldr	r3, [pc, #668]	; (8017b0c <interrupt_record+0x2d8>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8017872:	4ba7      	ldr	r3, [pc, #668]	; (8017b10 <interrupt_record+0x2dc>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8017878:	4ba6      	ldr	r3, [pc, #664]	; (8017b14 <interrupt_record+0x2e0>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 801787e:	4ba6      	ldr	r3, [pc, #664]	; (8017b18 <interrupt_record+0x2e4>)
 8017880:	ed93 7a00 	vldr	s14, [r3]
 8017884:	4ba5      	ldr	r3, [pc, #660]	; (8017b1c <interrupt_record+0x2e8>)
 8017886:	edd3 7a00 	vldr	s15, [r3]
 801788a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801788e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017896:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 801789a:	463b      	mov	r3, r7
 801789c:	2104      	movs	r1, #4
 801789e:	4618      	mov	r0, r3
 80178a0:	f7ff fefe 	bl	80176a0 <record_data>
		}
	if (record_mode == 3) {
 80178a4:	4b94      	ldr	r3, [pc, #592]	; (8017af8 <interrupt_record+0x2c4>)
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	2b03      	cmp	r3, #3
 80178aa:	d126      	bne.n	80178fa <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 80178ac:	4b99      	ldr	r3, [pc, #612]	; (8017b14 <interrupt_record+0x2e0>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 80178b2:	4b98      	ldr	r3, [pc, #608]	; (8017b14 <interrupt_record+0x2e0>)
 80178b4:	689b      	ldr	r3, [r3, #8]
 80178b6:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 80178b8:	4b97      	ldr	r3, [pc, #604]	; (8017b18 <interrupt_record+0x2e4>)
 80178ba:	ed93 7a00 	vldr	s14, [r3]
 80178be:	4b97      	ldr	r3, [pc, #604]	; (8017b1c <interrupt_record+0x2e8>)
 80178c0:	edd3 7a00 	vldr	s15, [r3]
 80178c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80178cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80178d0:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80178d4:	4b92      	ldr	r3, [pc, #584]	; (8017b20 <interrupt_record+0x2ec>)
 80178d6:	ed93 7a00 	vldr	s14, [r3]
 80178da:	4b92      	ldr	r3, [pc, #584]	; (8017b24 <interrupt_record+0x2f0>)
 80178dc:	edd3 7a00 	vldr	s15, [r3]
 80178e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80178e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80178ec:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80178f0:	463b      	mov	r3, r7
 80178f2:	2104      	movs	r1, #4
 80178f4:	4618      	mov	r0, r3
 80178f6:	f7ff fed3 	bl	80176a0 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 80178fa:	4b7f      	ldr	r3, [pc, #508]	; (8017af8 <interrupt_record+0x2c4>)
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	2b04      	cmp	r3, #4
 8017900:	d126      	bne.n	8017950 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8017902:	4b84      	ldr	r3, [pc, #528]	; (8017b14 <interrupt_record+0x2e0>)
 8017904:	689b      	ldr	r3, [r3, #8]
 8017906:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8017908:	4b7e      	ldr	r3, [pc, #504]	; (8017b04 <interrupt_record+0x2d0>)
 801790a:	ed93 7a00 	vldr	s14, [r3]
 801790e:	4b7e      	ldr	r3, [pc, #504]	; (8017b08 <interrupt_record+0x2d4>)
 8017910:	edd3 7a00 	vldr	s15, [r3]
 8017914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017918:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801791c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017920:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8017924:	4b80      	ldr	r3, [pc, #512]	; (8017b28 <interrupt_record+0x2f4>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 801792a:	4b7d      	ldr	r3, [pc, #500]	; (8017b20 <interrupt_record+0x2ec>)
 801792c:	ed93 7a00 	vldr	s14, [r3]
 8017930:	4b7c      	ldr	r3, [pc, #496]	; (8017b24 <interrupt_record+0x2f0>)
 8017932:	edd3 7a00 	vldr	s15, [r3]
 8017936:	ee37 7a27 	vadd.f32	s14, s14, s15
 801793a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801793e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017942:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017946:	463b      	mov	r3, r7
 8017948:	2104      	movs	r1, #4
 801794a:	4618      	mov	r0, r3
 801794c:	f7ff fea8 	bl	80176a0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8017950:	4b69      	ldr	r3, [pc, #420]	; (8017af8 <interrupt_record+0x2c4>)
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	2b05      	cmp	r3, #5
 8017956:	d110      	bne.n	801797a <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8017958:	4b6e      	ldr	r3, [pc, #440]	; (8017b14 <interrupt_record+0x2e0>)
 801795a:	689b      	ldr	r3, [r3, #8]
 801795c:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801795e:	4b69      	ldr	r3, [pc, #420]	; (8017b04 <interrupt_record+0x2d0>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8017964:	4b68      	ldr	r3, [pc, #416]	; (8017b08 <interrupt_record+0x2d4>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 801796a:	4b6f      	ldr	r3, [pc, #444]	; (8017b28 <interrupt_record+0x2f4>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017970:	463b      	mov	r3, r7
 8017972:	2104      	movs	r1, #4
 8017974:	4618      	mov	r0, r3
 8017976:	f7ff fe93 	bl	80176a0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801797a:	4b5f      	ldr	r3, [pc, #380]	; (8017af8 <interrupt_record+0x2c4>)
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	2b05      	cmp	r3, #5
 8017980:	d110      	bne.n	80179a4 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8017982:	4b6a      	ldr	r3, [pc, #424]	; (8017b2c <interrupt_record+0x2f8>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8017988:	4b5e      	ldr	r3, [pc, #376]	; (8017b04 <interrupt_record+0x2d0>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801798e:	4b5e      	ldr	r3, [pc, #376]	; (8017b08 <interrupt_record+0x2d4>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017994:	4b64      	ldr	r3, [pc, #400]	; (8017b28 <interrupt_record+0x2f4>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801799a:	463b      	mov	r3, r7
 801799c:	2104      	movs	r1, #4
 801799e:	4618      	mov	r0, r3
 80179a0:	f7ff fe7e 	bl	80176a0 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 80179a4:	4b54      	ldr	r3, [pc, #336]	; (8017af8 <interrupt_record+0x2c4>)
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	2b06      	cmp	r3, #6
 80179aa:	d110      	bne.n	80179ce <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 80179ac:	4b59      	ldr	r3, [pc, #356]	; (8017b14 <interrupt_record+0x2e0>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 80179b2:	4b5f      	ldr	r3, [pc, #380]	; (8017b30 <interrupt_record+0x2fc>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 80179b8:	4b5e      	ldr	r3, [pc, #376]	; (8017b34 <interrupt_record+0x300>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 80179be:	4b5e      	ldr	r3, [pc, #376]	; (8017b38 <interrupt_record+0x304>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80179c4:	463b      	mov	r3, r7
 80179c6:	2104      	movs	r1, #4
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7ff fe69 	bl	80176a0 <record_data>
			}
	if (record_mode == 7) {
 80179ce:	4b4a      	ldr	r3, [pc, #296]	; (8017af8 <interrupt_record+0x2c4>)
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	2b07      	cmp	r3, #7
 80179d4:	d125      	bne.n	8017a22 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80179d6:	4b59      	ldr	r3, [pc, #356]	; (8017b3c <interrupt_record+0x308>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	ee07 3a90 	vmov	s15, r3
 80179de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179e2:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80179e6:	4b56      	ldr	r3, [pc, #344]	; (8017b40 <interrupt_record+0x30c>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	ee07 3a90 	vmov	s15, r3
 80179ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179f2:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 80179f6:	4b51      	ldr	r3, [pc, #324]	; (8017b3c <interrupt_record+0x308>)
 80179f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80179fc:	ee07 3a90 	vmov	s15, r3
 8017a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a04:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8017a08:	4b4d      	ldr	r3, [pc, #308]	; (8017b40 <interrupt_record+0x30c>)
 8017a0a:	691b      	ldr	r3, [r3, #16]
 8017a0c:	ee07 3a90 	vmov	s15, r3
 8017a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a14:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017a18:	463b      	mov	r3, r7
 8017a1a:	2104      	movs	r1, #4
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f7ff fe3f 	bl	80176a0 <record_data>
		}
	if (record_mode == 8) {
 8017a22:	4b35      	ldr	r3, [pc, #212]	; (8017af8 <interrupt_record+0x2c4>)
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	2b08      	cmp	r3, #8
 8017a28:	d125      	bne.n	8017a76 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017a2a:	4b44      	ldr	r3, [pc, #272]	; (8017b3c <interrupt_record+0x308>)
 8017a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a2e:	ee07 3a90 	vmov	s15, r3
 8017a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a36:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8017a3a:	4b42      	ldr	r3, [pc, #264]	; (8017b44 <interrupt_record+0x310>)
 8017a3c:	685b      	ldr	r3, [r3, #4]
 8017a3e:	ee07 3a90 	vmov	s15, r3
 8017a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a46:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017a4a:	4b3c      	ldr	r3, [pc, #240]	; (8017b3c <interrupt_record+0x308>)
 8017a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017a50:	ee07 3a90 	vmov	s15, r3
 8017a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a58:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017a5c:	4b39      	ldr	r3, [pc, #228]	; (8017b44 <interrupt_record+0x310>)
 8017a5e:	68db      	ldr	r3, [r3, #12]
 8017a60:	ee07 3a90 	vmov	s15, r3
 8017a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a68:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017a6c:	463b      	mov	r3, r7
 8017a6e:	2104      	movs	r1, #4
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7ff fe15 	bl	80176a0 <record_data>
		}
	if (record_mode == 9) { //90
 8017a76:	4b20      	ldr	r3, [pc, #128]	; (8017af8 <interrupt_record+0x2c4>)
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	2b09      	cmp	r3, #9
 8017a7c:	d11b      	bne.n	8017ab6 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017a7e:	4b2f      	ldr	r3, [pc, #188]	; (8017b3c <interrupt_record+0x308>)
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	ee07 3a90 	vmov	s15, r3
 8017a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a8a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8017a8e:	4b2b      	ldr	r3, [pc, #172]	; (8017b3c <interrupt_record+0x308>)
 8017a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017a94:	ee07 3a90 	vmov	s15, r3
 8017a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a9c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017aa0:	4b29      	ldr	r3, [pc, #164]	; (8017b48 <interrupt_record+0x314>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017aa6:	4b29      	ldr	r3, [pc, #164]	; (8017b4c <interrupt_record+0x318>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017aac:	463b      	mov	r3, r7
 8017aae:	2104      	movs	r1, #4
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7ff fdf5 	bl	80176a0 <record_data>
		}
	if (record_mode == 10) { //90
 8017ab6:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <interrupt_record+0x2c4>)
 8017ab8:	781b      	ldrb	r3, [r3, #0]
 8017aba:	2b0a      	cmp	r3, #10
 8017abc:	d148      	bne.n	8017b50 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017abe:	4b1f      	ldr	r3, [pc, #124]	; (8017b3c <interrupt_record+0x308>)
 8017ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ac2:	ee07 3a90 	vmov	s15, r3
 8017ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017aca:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017ace:	4b1b      	ldr	r3, [pc, #108]	; (8017b3c <interrupt_record+0x308>)
 8017ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017ad4:	ee07 3a90 	vmov	s15, r3
 8017ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017adc:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017ae0:	4b19      	ldr	r3, [pc, #100]	; (8017b48 <interrupt_record+0x314>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017ae6:	4b19      	ldr	r3, [pc, #100]	; (8017b4c <interrupt_record+0x318>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017aec:	463b      	mov	r3, r7
 8017aee:	2104      	movs	r1, #4
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7ff fdd5 	bl	80176a0 <record_data>
 8017af6:	e02b      	b.n	8017b50 <interrupt_record+0x31c>
 8017af8:	2000f284 	.word	0x2000f284
 8017afc:	2000022c 	.word	0x2000022c
 8017b00:	20000228 	.word	0x20000228
 8017b04:	20000224 	.word	0x20000224
 8017b08:	20000220 	.word	0x20000220
 8017b0c:	200004e8 	.word	0x200004e8
 8017b10:	2000026c 	.word	0x2000026c
 8017b14:	200004dc 	.word	0x200004dc
 8017b18:	2000025c 	.word	0x2000025c
 8017b1c:	20000258 	.word	0x20000258
 8017b20:	20000254 	.word	0x20000254
 8017b24:	20000250 	.word	0x20000250
 8017b28:	20000280 	.word	0x20000280
 8017b2c:	20000538 	.word	0x20000538
 8017b30:	20000238 	.word	0x20000238
 8017b34:	2000023c 	.word	0x2000023c
 8017b38:	2000027c 	.word	0x2000027c
 8017b3c:	200002bc 	.word	0x200002bc
 8017b40:	2000044c 	.word	0x2000044c
 8017b44:	20000460 	.word	0x20000460
 8017b48:	200005ec 	.word	0x200005ec
 8017b4c:	200005e8 	.word	0x200005e8
		}
	if (record_mode == 11) { //距離の比較
 8017b50:	4b16      	ldr	r3, [pc, #88]	; (8017bac <interrupt_record+0x378>)
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	2b0b      	cmp	r3, #11
 8017b56:	d110      	bne.n	8017b7a <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8017b58:	4b15      	ldr	r3, [pc, #84]	; (8017bb0 <interrupt_record+0x37c>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8017b5e:	4b15      	ldr	r3, [pc, #84]	; (8017bb4 <interrupt_record+0x380>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8017b64:	4b14      	ldr	r3, [pc, #80]	; (8017bb8 <interrupt_record+0x384>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8017b6a:	4b14      	ldr	r3, [pc, #80]	; (8017bbc <interrupt_record+0x388>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017b70:	463b      	mov	r3, r7
 8017b72:	2104      	movs	r1, #4
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7ff fd93 	bl	80176a0 <record_data>
			}
	if (record_mode == 12) {
 8017b7a:	4b0c      	ldr	r3, [pc, #48]	; (8017bac <interrupt_record+0x378>)
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	2b0c      	cmp	r3, #12
 8017b80:	d110      	bne.n	8017ba4 <interrupt_record+0x370>
		r_data[0] = turning.velocity;
 8017b82:	4b0f      	ldr	r3, [pc, #60]	; (8017bc0 <interrupt_record+0x38c>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8017b88:	4b0e      	ldr	r3, [pc, #56]	; (8017bc4 <interrupt_record+0x390>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	607b      	str	r3, [r7, #4]
		r_data[2] = g_V_L;
 8017b8e:	4b0e      	ldr	r3, [pc, #56]	; (8017bc8 <interrupt_record+0x394>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	60bb      	str	r3, [r7, #8]
		r_data[3] = g_V_R;
 8017b94:	4b0d      	ldr	r3, [pc, #52]	; (8017bcc <interrupt_record+0x398>)
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017b9a:	463b      	mov	r3, r7
 8017b9c:	2104      	movs	r1, #4
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7ff fd7e 	bl	80176a0 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8017ba4:	bf00      	nop
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	2000f284 	.word	0x2000f284
 8017bb0:	20000228 	.word	0x20000228
 8017bb4:	200006e8 	.word	0x200006e8
 8017bb8:	2000022c 	.word	0x2000022c
 8017bbc:	200006e4 	.word	0x200006e4
 8017bc0:	200004e8 	.word	0x200004e8
 8017bc4:	2000026c 	.word	0x2000026c
 8017bc8:	20000538 	.word	0x20000538
 8017bcc:	2000053c 	.word	0x2000053c

08017bd0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017bd4:	4b1b      	ldr	r3, [pc, #108]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bd6:	4a1c      	ldr	r2, [pc, #112]	; (8017c48 <MX_SPI1_Init+0x78>)
 8017bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017bda:	4b1a      	ldr	r3, [pc, #104]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017be2:	4b18      	ldr	r3, [pc, #96]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017be4:	2200      	movs	r2, #0
 8017be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017be8:	4b16      	ldr	r3, [pc, #88]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017bf0:	4b14      	ldr	r3, [pc, #80]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017bf6:	4b13      	ldr	r3, [pc, #76]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017bfc:	4b11      	ldr	r3, [pc, #68]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017c04:	4b0f      	ldr	r3, [pc, #60]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c06:	2210      	movs	r2, #16
 8017c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017c0a:	4b0e      	ldr	r3, [pc, #56]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017c10:	4b0c      	ldr	r3, [pc, #48]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c12:	2200      	movs	r2, #0
 8017c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017c16:	4b0b      	ldr	r3, [pc, #44]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c18:	2200      	movs	r2, #0
 8017c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017c1c:	4b09      	ldr	r3, [pc, #36]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c1e:	2207      	movs	r2, #7
 8017c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017c22:	4b08      	ldr	r3, [pc, #32]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c24:	2200      	movs	r2, #0
 8017c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017c28:	4b06      	ldr	r3, [pc, #24]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c2a:	2208      	movs	r2, #8
 8017c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8017c2e:	4805      	ldr	r0, [pc, #20]	; (8017c44 <MX_SPI1_Init+0x74>)
 8017c30:	f005 ff2c 	bl	801da8c <HAL_SPI_Init>
 8017c34:	4603      	mov	r3, r0
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d001      	beq.n	8017c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017c3a:	f7f2 fe36 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8017c3e:	bf00      	nop
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	2000f294 	.word	0x2000f294
 8017c48:	40013000 	.word	0x40013000

08017c4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8017c50:	4b1b      	ldr	r3, [pc, #108]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c52:	4a1c      	ldr	r2, [pc, #112]	; (8017cc4 <MX_SPI3_Init+0x78>)
 8017c54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017c56:	4b1a      	ldr	r3, [pc, #104]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017c5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017c5e:	4b18      	ldr	r3, [pc, #96]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c60:	2200      	movs	r2, #0
 8017c62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017c64:	4b16      	ldr	r3, [pc, #88]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017c6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017c6c:	4b14      	ldr	r3, [pc, #80]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c6e:	2200      	movs	r2, #0
 8017c70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017c72:	4b13      	ldr	r3, [pc, #76]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c74:	2201      	movs	r2, #1
 8017c76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017c78:	4b11      	ldr	r3, [pc, #68]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017c80:	4b0f      	ldr	r3, [pc, #60]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c82:	2208      	movs	r2, #8
 8017c84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017c86:	4b0e      	ldr	r3, [pc, #56]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c88:	2200      	movs	r2, #0
 8017c8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017c8c:	4b0c      	ldr	r3, [pc, #48]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c8e:	2200      	movs	r2, #0
 8017c90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017c92:	4b0b      	ldr	r3, [pc, #44]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c94:	2200      	movs	r2, #0
 8017c96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8017c98:	4b09      	ldr	r3, [pc, #36]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017c9a:	2207      	movs	r2, #7
 8017c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017c9e:	4b08      	ldr	r3, [pc, #32]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017ca4:	4b06      	ldr	r3, [pc, #24]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017caa:	4805      	ldr	r0, [pc, #20]	; (8017cc0 <MX_SPI3_Init+0x74>)
 8017cac:	f005 feee 	bl	801da8c <HAL_SPI_Init>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d001      	beq.n	8017cba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8017cb6:	f7f2 fdf8 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017cba:	bf00      	nop
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	2000f2f8 	.word	0x2000f2f8
 8017cc4:	40003c00 	.word	0x40003c00

08017cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b08c      	sub	sp, #48	; 0x30
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017cd0:	f107 031c 	add.w	r3, r7, #28
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	601a      	str	r2, [r3, #0]
 8017cd8:	605a      	str	r2, [r3, #4]
 8017cda:	609a      	str	r2, [r3, #8]
 8017cdc:	60da      	str	r2, [r3, #12]
 8017cde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	4a3d      	ldr	r2, [pc, #244]	; (8017ddc <HAL_SPI_MspInit+0x114>)
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	d129      	bne.n	8017d3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017cea:	4b3d      	ldr	r3, [pc, #244]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017cee:	4a3c      	ldr	r2, [pc, #240]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8017cf6:	4b3a      	ldr	r3, [pc, #232]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017cfe:	61bb      	str	r3, [r7, #24]
 8017d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d02:	4b37      	ldr	r3, [pc, #220]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d06:	4a36      	ldr	r2, [pc, #216]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d08:	f043 0301 	orr.w	r3, r3, #1
 8017d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d0e:	4b34      	ldr	r3, [pc, #208]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d12:	f003 0301 	and.w	r3, r3, #1
 8017d16:	617b      	str	r3, [r7, #20]
 8017d18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017d1a:	23e0      	movs	r3, #224	; 0xe0
 8017d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d1e:	2302      	movs	r3, #2
 8017d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d22:	2300      	movs	r3, #0
 8017d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d26:	2300      	movs	r3, #0
 8017d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017d2a:	2305      	movs	r3, #5
 8017d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017d2e:	f107 031c 	add.w	r3, r7, #28
 8017d32:	4619      	mov	r1, r3
 8017d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017d38:	f004 fcee 	bl	801c718 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017d3c:	e049      	b.n	8017dd2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	4a28      	ldr	r2, [pc, #160]	; (8017de4 <HAL_SPI_MspInit+0x11c>)
 8017d44:	4293      	cmp	r3, r2
 8017d46:	d144      	bne.n	8017dd2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017d48:	4b25      	ldr	r3, [pc, #148]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d4c:	4a24      	ldr	r2, [pc, #144]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017d52:	6593      	str	r3, [r2, #88]	; 0x58
 8017d54:	4b22      	ldr	r3, [pc, #136]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017d5c:	613b      	str	r3, [r7, #16]
 8017d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017d60:	4b1f      	ldr	r3, [pc, #124]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d64:	4a1e      	ldr	r2, [pc, #120]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d66:	f043 0304 	orr.w	r3, r3, #4
 8017d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d6c:	4b1c      	ldr	r3, [pc, #112]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d70:	f003 0304 	and.w	r3, r3, #4
 8017d74:	60fb      	str	r3, [r7, #12]
 8017d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017d78:	4b19      	ldr	r3, [pc, #100]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d7c:	4a18      	ldr	r2, [pc, #96]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d7e:	f043 0302 	orr.w	r3, r3, #2
 8017d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d84:	4b16      	ldr	r3, [pc, #88]	; (8017de0 <HAL_SPI_MspInit+0x118>)
 8017d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d88:	f003 0302 	and.w	r3, r3, #2
 8017d8c:	60bb      	str	r3, [r7, #8]
 8017d8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d96:	2302      	movs	r3, #2
 8017d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017da2:	2306      	movs	r3, #6
 8017da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017da6:	f107 031c 	add.w	r3, r7, #28
 8017daa:	4619      	mov	r1, r3
 8017dac:	480e      	ldr	r0, [pc, #56]	; (8017de8 <HAL_SPI_MspInit+0x120>)
 8017dae:	f004 fcb3 	bl	801c718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017db2:	2320      	movs	r3, #32
 8017db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017db6:	2302      	movs	r3, #2
 8017db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017dc2:	2306      	movs	r3, #6
 8017dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017dc6:	f107 031c 	add.w	r3, r7, #28
 8017dca:	4619      	mov	r1, r3
 8017dcc:	4807      	ldr	r0, [pc, #28]	; (8017dec <HAL_SPI_MspInit+0x124>)
 8017dce:	f004 fca3 	bl	801c718 <HAL_GPIO_Init>
}
 8017dd2:	bf00      	nop
 8017dd4:	3730      	adds	r7, #48	; 0x30
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	40013000 	.word	0x40013000
 8017de0:	40021000 	.word	0x40021000
 8017de4:	40003c00 	.word	0x40003c00
 8017de8:	48000800 	.word	0x48000800
 8017dec:	48000400 	.word	0x48000400

08017df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017df6:	4b0f      	ldr	r3, [pc, #60]	; (8017e34 <HAL_MspInit+0x44>)
 8017df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017dfa:	4a0e      	ldr	r2, [pc, #56]	; (8017e34 <HAL_MspInit+0x44>)
 8017dfc:	f043 0301 	orr.w	r3, r3, #1
 8017e00:	6613      	str	r3, [r2, #96]	; 0x60
 8017e02:	4b0c      	ldr	r3, [pc, #48]	; (8017e34 <HAL_MspInit+0x44>)
 8017e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017e06:	f003 0301 	and.w	r3, r3, #1
 8017e0a:	607b      	str	r3, [r7, #4]
 8017e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017e0e:	4b09      	ldr	r3, [pc, #36]	; (8017e34 <HAL_MspInit+0x44>)
 8017e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e12:	4a08      	ldr	r2, [pc, #32]	; (8017e34 <HAL_MspInit+0x44>)
 8017e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017e18:	6593      	str	r3, [r2, #88]	; 0x58
 8017e1a:	4b06      	ldr	r3, [pc, #24]	; (8017e34 <HAL_MspInit+0x44>)
 8017e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e22:	603b      	str	r3, [r7, #0]
 8017e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017e26:	f004 feb5 	bl	801cb94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017e2a:	bf00      	nop
 8017e2c:	3708      	adds	r7, #8
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}
 8017e32:	bf00      	nop
 8017e34:	40021000 	.word	0x40021000

08017e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017e3c:	e7fe      	b.n	8017e3c <NMI_Handler+0x4>

08017e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017e3e:	b480      	push	{r7}
 8017e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017e42:	e7fe      	b.n	8017e42 <HardFault_Handler+0x4>

08017e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017e44:	b480      	push	{r7}
 8017e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017e48:	e7fe      	b.n	8017e48 <MemManage_Handler+0x4>

08017e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017e4a:	b480      	push	{r7}
 8017e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017e4e:	e7fe      	b.n	8017e4e <BusFault_Handler+0x4>

08017e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017e50:	b480      	push	{r7}
 8017e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017e54:	e7fe      	b.n	8017e54 <UsageFault_Handler+0x4>

08017e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017e56:	b480      	push	{r7}
 8017e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017e5a:	bf00      	nop
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr

08017e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017e64:	b480      	push	{r7}
 8017e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017e68:	bf00      	nop
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e70:	4770      	bx	lr

08017e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017e72:	b480      	push	{r7}
 8017e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017e76:	bf00      	nop
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr

08017e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017e84:	f001 fbf0 	bl	8019668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017e88:	bf00      	nop
 8017e8a:	bd80      	pop	{r7, pc}

08017e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017e90:	4802      	ldr	r0, [pc, #8]	; (8017e9c <DMA1_Channel1_IRQHandler+0x10>)
 8017e92:	f004 f889 	bl	801bfa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017e96:	bf00      	nop
 8017e98:	bd80      	pop	{r7, pc}
 8017e9a:	bf00      	nop
 8017e9c:	200007ac 	.word	0x200007ac

08017ea0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017ea4:	4802      	ldr	r0, [pc, #8]	; (8017eb0 <ADC1_2_IRQHandler+0x10>)
 8017ea6:	f002 fb8f 	bl	801a5c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8017eaa:	bf00      	nop
 8017eac:	bd80      	pop	{r7, pc}
 8017eae:	bf00      	nop
 8017eb0:	20000740 	.word	0x20000740

08017eb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017eb8:	480d      	ldr	r0, [pc, #52]	; (8017ef0 <TIM6_DAC_IRQHandler+0x3c>)
 8017eba:	f006 ffc7 	bl	801ee4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8017ebe:	f7f0 fdf7 	bl	8008ab0 <interrupt_timer>
  interupt_calSensor();
 8017ec2:	f7ea f93f 	bl	8002144 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017ec6:	f7f0 fb15 	bl	80084f4 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8017eca:	f7e9 ff31 	bl	8001d30 <interrupt_calGyro>
  AS5047_DataUpdate();
 8017ece:	f7ef ffe1 	bl	8007e94 <AS5047_DataUpdate>
  interupt_calEncoder();
 8017ed2:	f7e9 f8e1 	bl	8001098 <interupt_calEncoder>
  interupt_calFusion();
 8017ed6:	f7e9 fd33 	bl	8001940 <interupt_calFusion>
  interrupt_WallCut();
 8017eda:	f7ee ff45 	bl	8006d68 <interrupt_WallCut>
  interupt_DriveMotor();
 8017ede:	f7ea faa3 	bl	8002428 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017ee2:	f7f2 fa35 	bl	800a350 <interrupt_FailSafe>
  interrupt_record();
 8017ee6:	f7ff fca5 	bl	8017834 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017eea:	bf00      	nop
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	2000f360 	.word	0x2000f360

08017ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017ef4:	b480      	push	{r7}
 8017ef6:	af00      	add	r7, sp, #0
	return 1;
 8017ef8:	2301      	movs	r3, #1
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr

08017f04 <_kill>:

int _kill(int pid, int sig)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017f0e:	f008 fe71 	bl	8020bf4 <__errno>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2216      	movs	r2, #22
 8017f16:	601a      	str	r2, [r3, #0]
	return -1;
 8017f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	3708      	adds	r7, #8
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <_exit>:

void _exit (int status)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f7ff ffe7 	bl	8017f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017f36:	e7fe      	b.n	8017f36 <_exit+0x12>

08017f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b086      	sub	sp, #24
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f44:	2300      	movs	r3, #0
 8017f46:	617b      	str	r3, [r7, #20]
 8017f48:	e00a      	b.n	8017f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017f4a:	f3af 8000 	nop.w
 8017f4e:	4601      	mov	r1, r0
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	1c5a      	adds	r2, r3, #1
 8017f54:	60ba      	str	r2, [r7, #8]
 8017f56:	b2ca      	uxtb	r2, r1
 8017f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f5a:	697b      	ldr	r3, [r7, #20]
 8017f5c:	3301      	adds	r3, #1
 8017f5e:	617b      	str	r3, [r7, #20]
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	429a      	cmp	r2, r3
 8017f66:	dbf0      	blt.n	8017f4a <_read+0x12>
	}

return len;
 8017f68:	687b      	ldr	r3, [r7, #4]
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	3718      	adds	r7, #24
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
	...

08017f74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b086      	sub	sp, #24
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	60b9      	str	r1, [r7, #8]
 8017f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f80:	2300      	movs	r3, #0
 8017f82:	617b      	str	r3, [r7, #20]
 8017f84:	e00a      	b.n	8017f9c <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017f86:	68b9      	ldr	r1, [r7, #8]
 8017f88:	1c4b      	adds	r3, r1, #1
 8017f8a:	60bb      	str	r3, [r7, #8]
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	2201      	movs	r2, #1
 8017f90:	4807      	ldr	r0, [pc, #28]	; (8017fb0 <_write+0x3c>)
 8017f92:	f007 ffe5 	bl	801ff60 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f96:	697b      	ldr	r3, [r7, #20]
 8017f98:	3301      	adds	r3, #1
 8017f9a:	617b      	str	r3, [r7, #20]
 8017f9c:	697a      	ldr	r2, [r7, #20]
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	dbf0      	blt.n	8017f86 <_write+0x12>
	}
	return len;
 8017fa4:	687b      	ldr	r3, [r7, #4]
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	3718      	adds	r7, #24
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}
 8017fae:	bf00      	nop
 8017fb0:	2000fd3c 	.word	0x2000fd3c

08017fb4 <_close>:

int _close(int file)
{
 8017fb4:	b480      	push	{r7}
 8017fb6:	b083      	sub	sp, #12
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
	return -1;
 8017fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	370c      	adds	r7, #12
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr

08017fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017fdc:	605a      	str	r2, [r3, #4]
	return 0;
 8017fde:	2300      	movs	r3, #0
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	370c      	adds	r7, #12
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fea:	4770      	bx	lr

08017fec <_isatty>:

int _isatty(int file)
{
 8017fec:	b480      	push	{r7}
 8017fee:	b083      	sub	sp, #12
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
	return 1;
 8017ff4:	2301      	movs	r3, #1
}
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	370c      	adds	r7, #12
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr

08018002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8018002:	b480      	push	{r7}
 8018004:	b085      	sub	sp, #20
 8018006:	af00      	add	r7, sp, #0
 8018008:	60f8      	str	r0, [r7, #12]
 801800a:	60b9      	str	r1, [r7, #8]
 801800c:	607a      	str	r2, [r7, #4]
	return 0;
 801800e:	2300      	movs	r3, #0
}
 8018010:	4618      	mov	r0, r3
 8018012:	3714      	adds	r7, #20
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b086      	sub	sp, #24
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018024:	4a14      	ldr	r2, [pc, #80]	; (8018078 <_sbrk+0x5c>)
 8018026:	4b15      	ldr	r3, [pc, #84]	; (801807c <_sbrk+0x60>)
 8018028:	1ad3      	subs	r3, r2, r3
 801802a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018030:	4b13      	ldr	r3, [pc, #76]	; (8018080 <_sbrk+0x64>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d102      	bne.n	801803e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018038:	4b11      	ldr	r3, [pc, #68]	; (8018080 <_sbrk+0x64>)
 801803a:	4a12      	ldr	r2, [pc, #72]	; (8018084 <_sbrk+0x68>)
 801803c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801803e:	4b10      	ldr	r3, [pc, #64]	; (8018080 <_sbrk+0x64>)
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4413      	add	r3, r2
 8018046:	693a      	ldr	r2, [r7, #16]
 8018048:	429a      	cmp	r2, r3
 801804a:	d207      	bcs.n	801805c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801804c:	f008 fdd2 	bl	8020bf4 <__errno>
 8018050:	4603      	mov	r3, r0
 8018052:	220c      	movs	r2, #12
 8018054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018056:	f04f 33ff 	mov.w	r3, #4294967295
 801805a:	e009      	b.n	8018070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801805c:	4b08      	ldr	r3, [pc, #32]	; (8018080 <_sbrk+0x64>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8018062:	4b07      	ldr	r3, [pc, #28]	; (8018080 <_sbrk+0x64>)
 8018064:	681a      	ldr	r2, [r3, #0]
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	4413      	add	r3, r2
 801806a:	4a05      	ldr	r2, [pc, #20]	; (8018080 <_sbrk+0x64>)
 801806c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801806e:	68fb      	ldr	r3, [r7, #12]
}
 8018070:	4618      	mov	r0, r3
 8018072:	3718      	adds	r7, #24
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	2001c000 	.word	0x2001c000
 801807c:	00000400 	.word	0x00000400
 8018080:	2000f35c 	.word	0x2000f35c
 8018084:	2000fde0 	.word	0x2000fde0

08018088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8018088:	b480      	push	{r7}
 801808a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801808c:	4b06      	ldr	r3, [pc, #24]	; (80180a8 <SystemInit+0x20>)
 801808e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018092:	4a05      	ldr	r2, [pc, #20]	; (80180a8 <SystemInit+0x20>)
 8018094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801809c:	bf00      	nop
 801809e:	46bd      	mov	sp, r7
 80180a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a4:	4770      	bx	lr
 80180a6:	bf00      	nop
 80180a8:	e000ed00 	.word	0xe000ed00

080180ac <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80180b2:	1d3b      	adds	r3, r7, #4
 80180b4:	2200      	movs	r2, #0
 80180b6:	601a      	str	r2, [r3, #0]
 80180b8:	605a      	str	r2, [r3, #4]
 80180ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80180bc:	4b14      	ldr	r3, [pc, #80]	; (8018110 <MX_TIM6_Init+0x64>)
 80180be:	4a15      	ldr	r2, [pc, #84]	; (8018114 <MX_TIM6_Init+0x68>)
 80180c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 80180c2:	4b13      	ldr	r3, [pc, #76]	; (8018110 <MX_TIM6_Init+0x64>)
 80180c4:	2254      	movs	r2, #84	; 0x54
 80180c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80180c8:	4b11      	ldr	r3, [pc, #68]	; (8018110 <MX_TIM6_Init+0x64>)
 80180ca:	2200      	movs	r2, #0
 80180cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80180ce:	4b10      	ldr	r3, [pc, #64]	; (8018110 <MX_TIM6_Init+0x64>)
 80180d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80180d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80180d6:	4b0e      	ldr	r3, [pc, #56]	; (8018110 <MX_TIM6_Init+0x64>)
 80180d8:	2200      	movs	r2, #0
 80180da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80180dc:	480c      	ldr	r0, [pc, #48]	; (8018110 <MX_TIM6_Init+0x64>)
 80180de:	f006 fbed 	bl	801e8bc <HAL_TIM_Base_Init>
 80180e2:	4603      	mov	r3, r0
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d001      	beq.n	80180ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80180e8:	f7f2 fbdf 	bl	800a8aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80180ec:	2300      	movs	r3, #0
 80180ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80180f0:	2300      	movs	r3, #0
 80180f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80180f4:	1d3b      	adds	r3, r7, #4
 80180f6:	4619      	mov	r1, r3
 80180f8:	4805      	ldr	r0, [pc, #20]	; (8018110 <MX_TIM6_Init+0x64>)
 80180fa:	f007 fd5b 	bl	801fbb4 <HAL_TIMEx_MasterConfigSynchronization>
 80180fe:	4603      	mov	r3, r0
 8018100:	2b00      	cmp	r3, #0
 8018102:	d001      	beq.n	8018108 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8018104:	f7f2 fbd1 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8018108:	bf00      	nop
 801810a:	3710      	adds	r7, #16
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}
 8018110:	2000f360 	.word	0x2000f360
 8018114:	40001000 	.word	0x40001000

08018118 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b098      	sub	sp, #96	; 0x60
 801811c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801811e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018122:	2200      	movs	r2, #0
 8018124:	601a      	str	r2, [r3, #0]
 8018126:	605a      	str	r2, [r3, #4]
 8018128:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801812a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801812e:	2200      	movs	r2, #0
 8018130:	601a      	str	r2, [r3, #0]
 8018132:	605a      	str	r2, [r3, #4]
 8018134:	609a      	str	r2, [r3, #8]
 8018136:	60da      	str	r2, [r3, #12]
 8018138:	611a      	str	r2, [r3, #16]
 801813a:	615a      	str	r2, [r3, #20]
 801813c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801813e:	1d3b      	adds	r3, r7, #4
 8018140:	2234      	movs	r2, #52	; 0x34
 8018142:	2100      	movs	r1, #0
 8018144:	4618      	mov	r0, r3
 8018146:	f008 fd8d 	bl	8020c64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801814a:	4b41      	ldr	r3, [pc, #260]	; (8018250 <MX_TIM8_Init+0x138>)
 801814c:	4a41      	ldr	r2, [pc, #260]	; (8018254 <MX_TIM8_Init+0x13c>)
 801814e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8018150:	4b3f      	ldr	r3, [pc, #252]	; (8018250 <MX_TIM8_Init+0x138>)
 8018152:	2201      	movs	r2, #1
 8018154:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018156:	4b3e      	ldr	r3, [pc, #248]	; (8018250 <MX_TIM8_Init+0x138>)
 8018158:	2200      	movs	r2, #0
 801815a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 801815c:	4b3c      	ldr	r3, [pc, #240]	; (8018250 <MX_TIM8_Init+0x138>)
 801815e:	f240 628f 	movw	r2, #1679	; 0x68f
 8018162:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018164:	4b3a      	ldr	r3, [pc, #232]	; (8018250 <MX_TIM8_Init+0x138>)
 8018166:	2200      	movs	r2, #0
 8018168:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801816a:	4b39      	ldr	r3, [pc, #228]	; (8018250 <MX_TIM8_Init+0x138>)
 801816c:	2200      	movs	r2, #0
 801816e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018170:	4b37      	ldr	r3, [pc, #220]	; (8018250 <MX_TIM8_Init+0x138>)
 8018172:	2200      	movs	r2, #0
 8018174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8018176:	4836      	ldr	r0, [pc, #216]	; (8018250 <MX_TIM8_Init+0x138>)
 8018178:	f006 fc68 	bl	801ea4c <HAL_TIM_PWM_Init>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	d001      	beq.n	8018186 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8018182:	f7f2 fb92 	bl	800a8aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018186:	2300      	movs	r3, #0
 8018188:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801818a:	2300      	movs	r3, #0
 801818c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801818e:	2300      	movs	r3, #0
 8018190:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8018192:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018196:	4619      	mov	r1, r3
 8018198:	482d      	ldr	r0, [pc, #180]	; (8018250 <MX_TIM8_Init+0x138>)
 801819a:	f007 fd0b 	bl	801fbb4 <HAL_TIMEx_MasterConfigSynchronization>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d001      	beq.n	80181a8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80181a4:	f7f2 fb81 	bl	800a8aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80181a8:	2360      	movs	r3, #96	; 0x60
 80181aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 80181ac:	f240 13a3 	movw	r3, #419	; 0x1a3
 80181b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80181b2:	2300      	movs	r3, #0
 80181b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80181b6:	2300      	movs	r3, #0
 80181b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80181ba:	2300      	movs	r3, #0
 80181bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80181be:	2300      	movs	r3, #0
 80181c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80181c2:	2300      	movs	r3, #0
 80181c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80181c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181ca:	2200      	movs	r2, #0
 80181cc:	4619      	mov	r1, r3
 80181ce:	4820      	ldr	r0, [pc, #128]	; (8018250 <MX_TIM8_Init+0x138>)
 80181d0:	f006 ffbc 	bl	801f14c <HAL_TIM_PWM_ConfigChannel>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80181da:	f7f2 fb66 	bl	800a8aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80181de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181e2:	2208      	movs	r2, #8
 80181e4:	4619      	mov	r1, r3
 80181e6:	481a      	ldr	r0, [pc, #104]	; (8018250 <MX_TIM8_Init+0x138>)
 80181e8:	f006 ffb0 	bl	801f14c <HAL_TIM_PWM_ConfigChannel>
 80181ec:	4603      	mov	r3, r0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d001      	beq.n	80181f6 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80181f2:	f7f2 fb5a 	bl	800a8aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80181f6:	2300      	movs	r3, #0
 80181f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80181fa:	2300      	movs	r3, #0
 80181fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80181fe:	2300      	movs	r3, #0
 8018200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8018202:	2300      	movs	r3, #0
 8018204:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8018206:	2300      	movs	r3, #0
 8018208:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801820a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801820e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8018214:	2300      	movs	r3, #0
 8018216:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8018218:	2300      	movs	r3, #0
 801821a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801821c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018220:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8018222:	2300      	movs	r3, #0
 8018224:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8018226:	2300      	movs	r3, #0
 8018228:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801822a:	2300      	movs	r3, #0
 801822c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801822e:	1d3b      	adds	r3, r7, #4
 8018230:	4619      	mov	r1, r3
 8018232:	4807      	ldr	r0, [pc, #28]	; (8018250 <MX_TIM8_Init+0x138>)
 8018234:	f007 fd4c 	bl	801fcd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8018238:	4603      	mov	r3, r0
 801823a:	2b00      	cmp	r3, #0
 801823c:	d001      	beq.n	8018242 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801823e:	f7f2 fb34 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8018242:	4803      	ldr	r0, [pc, #12]	; (8018250 <MX_TIM8_Init+0x138>)
 8018244:	f000 f8da 	bl	80183fc <HAL_TIM_MspPostInit>

}
 8018248:	bf00      	nop
 801824a:	3760      	adds	r7, #96	; 0x60
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}
 8018250:	2000f3ac 	.word	0x2000f3ac
 8018254:	40013400 	.word	0x40013400

08018258 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b094      	sub	sp, #80	; 0x50
 801825c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801825e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018262:	2200      	movs	r2, #0
 8018264:	601a      	str	r2, [r3, #0]
 8018266:	605a      	str	r2, [r3, #4]
 8018268:	609a      	str	r2, [r3, #8]
 801826a:	60da      	str	r2, [r3, #12]
 801826c:	611a      	str	r2, [r3, #16]
 801826e:	615a      	str	r2, [r3, #20]
 8018270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8018272:	463b      	mov	r3, r7
 8018274:	2234      	movs	r2, #52	; 0x34
 8018276:	2100      	movs	r1, #0
 8018278:	4618      	mov	r0, r3
 801827a:	f008 fcf3 	bl	8020c64 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 801827e:	4b30      	ldr	r3, [pc, #192]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018280:	4a30      	ldr	r2, [pc, #192]	; (8018344 <MX_TIM16_Init+0xec>)
 8018282:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8018284:	4b2e      	ldr	r3, [pc, #184]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018286:	2201      	movs	r2, #1
 8018288:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 801828a:	4b2d      	ldr	r3, [pc, #180]	; (8018340 <MX_TIM16_Init+0xe8>)
 801828c:	2200      	movs	r2, #0
 801828e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8018290:	4b2b      	ldr	r3, [pc, #172]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018292:	2264      	movs	r2, #100	; 0x64
 8018294:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018296:	4b2a      	ldr	r3, [pc, #168]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018298:	2200      	movs	r2, #0
 801829a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 801829c:	4b28      	ldr	r3, [pc, #160]	; (8018340 <MX_TIM16_Init+0xe8>)
 801829e:	2200      	movs	r2, #0
 80182a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80182a2:	4b27      	ldr	r3, [pc, #156]	; (8018340 <MX_TIM16_Init+0xe8>)
 80182a4:	2200      	movs	r2, #0
 80182a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80182a8:	4825      	ldr	r0, [pc, #148]	; (8018340 <MX_TIM16_Init+0xe8>)
 80182aa:	f006 fb07 	bl	801e8bc <HAL_TIM_Base_Init>
 80182ae:	4603      	mov	r3, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80182b4:	f7f2 faf9 	bl	800a8aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80182b8:	4821      	ldr	r0, [pc, #132]	; (8018340 <MX_TIM16_Init+0xe8>)
 80182ba:	f006 fbc7 	bl	801ea4c <HAL_TIM_PWM_Init>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80182c4:	f7f2 faf1 	bl	800a8aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80182c8:	2360      	movs	r3, #96	; 0x60
 80182ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 80182cc:	231e      	movs	r3, #30
 80182ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80182d0:	2300      	movs	r3, #0
 80182d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80182d4:	2300      	movs	r3, #0
 80182d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80182d8:	2300      	movs	r3, #0
 80182da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80182dc:	2300      	movs	r3, #0
 80182de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80182e0:	2300      	movs	r3, #0
 80182e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80182e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80182e8:	2200      	movs	r2, #0
 80182ea:	4619      	mov	r1, r3
 80182ec:	4814      	ldr	r0, [pc, #80]	; (8018340 <MX_TIM16_Init+0xe8>)
 80182ee:	f006 ff2d 	bl	801f14c <HAL_TIM_PWM_ConfigChannel>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d001      	beq.n	80182fc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80182f8:	f7f2 fad7 	bl	800a8aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80182fc:	2300      	movs	r3, #0
 80182fe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8018300:	2300      	movs	r3, #0
 8018302:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8018304:	2300      	movs	r3, #0
 8018306:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8018308:	2300      	movs	r3, #0
 801830a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801830c:	2300      	movs	r3, #0
 801830e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8018310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8018316:	2300      	movs	r3, #0
 8018318:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801831a:	2300      	movs	r3, #0
 801831c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 801831e:	463b      	mov	r3, r7
 8018320:	4619      	mov	r1, r3
 8018322:	4807      	ldr	r0, [pc, #28]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018324:	f007 fcd4 	bl	801fcd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8018328:	4603      	mov	r3, r0
 801832a:	2b00      	cmp	r3, #0
 801832c:	d001      	beq.n	8018332 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 801832e:	f7f2 fabc 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8018332:	4803      	ldr	r0, [pc, #12]	; (8018340 <MX_TIM16_Init+0xe8>)
 8018334:	f000 f862 	bl	80183fc <HAL_TIM_MspPostInit>

}
 8018338:	bf00      	nop
 801833a:	3750      	adds	r7, #80	; 0x50
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}
 8018340:	2000f3f8 	.word	0x2000f3f8
 8018344:	40014400 	.word	0x40014400

08018348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a16      	ldr	r2, [pc, #88]	; (80183b0 <HAL_TIM_Base_MspInit+0x68>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d114      	bne.n	8018384 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801835a:	4b16      	ldr	r3, [pc, #88]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 801835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801835e:	4a15      	ldr	r2, [pc, #84]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 8018360:	f043 0310 	orr.w	r3, r3, #16
 8018364:	6593      	str	r3, [r2, #88]	; 0x58
 8018366:	4b13      	ldr	r3, [pc, #76]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 8018368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801836a:	f003 0310 	and.w	r3, r3, #16
 801836e:	60fb      	str	r3, [r7, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8018372:	2200      	movs	r2, #0
 8018374:	2103      	movs	r1, #3
 8018376:	2036      	movs	r0, #54	; 0x36
 8018378:	f003 fc65 	bl	801bc46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801837c:	2036      	movs	r0, #54	; 0x36
 801837e:	f003 fc7c 	bl	801bc7a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8018382:	e010      	b.n	80183a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	4a0b      	ldr	r2, [pc, #44]	; (80183b8 <HAL_TIM_Base_MspInit+0x70>)
 801838a:	4293      	cmp	r3, r2
 801838c:	d10b      	bne.n	80183a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 801838e:	4b09      	ldr	r3, [pc, #36]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 8018390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018392:	4a08      	ldr	r2, [pc, #32]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 8018394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018398:	6613      	str	r3, [r2, #96]	; 0x60
 801839a:	4b06      	ldr	r3, [pc, #24]	; (80183b4 <HAL_TIM_Base_MspInit+0x6c>)
 801839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801839e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80183a2:	60bb      	str	r3, [r7, #8]
 80183a4:	68bb      	ldr	r3, [r7, #8]
}
 80183a6:	bf00      	nop
 80183a8:	3710      	adds	r7, #16
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	40001000 	.word	0x40001000
 80183b4:	40021000 	.word	0x40021000
 80183b8:	40014400 	.word	0x40014400

080183bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80183bc:	b480      	push	{r7}
 80183be:	b085      	sub	sp, #20
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4a0a      	ldr	r2, [pc, #40]	; (80183f4 <HAL_TIM_PWM_MspInit+0x38>)
 80183ca:	4293      	cmp	r3, r2
 80183cc:	d10b      	bne.n	80183e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80183ce:	4b0a      	ldr	r3, [pc, #40]	; (80183f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80183d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183d2:	4a09      	ldr	r2, [pc, #36]	; (80183f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80183d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80183d8:	6613      	str	r3, [r2, #96]	; 0x60
 80183da:	4b07      	ldr	r3, [pc, #28]	; (80183f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80183dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183e2:	60fb      	str	r3, [r7, #12]
 80183e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80183e6:	bf00      	nop
 80183e8:	3714      	adds	r7, #20
 80183ea:	46bd      	mov	sp, r7
 80183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop
 80183f4:	40013400 	.word	0x40013400
 80183f8:	40021000 	.word	0x40021000

080183fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b08a      	sub	sp, #40	; 0x28
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018404:	f107 0314 	add.w	r3, r7, #20
 8018408:	2200      	movs	r2, #0
 801840a:	601a      	str	r2, [r3, #0]
 801840c:	605a      	str	r2, [r3, #4]
 801840e:	609a      	str	r2, [r3, #8]
 8018410:	60da      	str	r2, [r3, #12]
 8018412:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a2b      	ldr	r2, [pc, #172]	; (80184c8 <HAL_TIM_MspPostInit+0xcc>)
 801841a:	4293      	cmp	r3, r2
 801841c:	d12d      	bne.n	801847a <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801841e:	4b2b      	ldr	r3, [pc, #172]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 8018420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018422:	4a2a      	ldr	r2, [pc, #168]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 8018424:	f043 0302 	orr.w	r3, r3, #2
 8018428:	64d3      	str	r3, [r2, #76]	; 0x4c
 801842a:	4b28      	ldr	r3, [pc, #160]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 801842c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801842e:	f003 0302 	and.w	r3, r3, #2
 8018432:	613b      	str	r3, [r7, #16]
 8018434:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8018436:	2340      	movs	r3, #64	; 0x40
 8018438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801843a:	2302      	movs	r3, #2
 801843c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801843e:	2300      	movs	r3, #0
 8018440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018442:	2300      	movs	r3, #0
 8018444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8018446:	2305      	movs	r3, #5
 8018448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801844a:	f107 0314 	add.w	r3, r7, #20
 801844e:	4619      	mov	r1, r3
 8018450:	481f      	ldr	r0, [pc, #124]	; (80184d0 <HAL_TIM_MspPostInit+0xd4>)
 8018452:	f004 f961 	bl	801c718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8018456:	f44f 7300 	mov.w	r3, #512	; 0x200
 801845a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801845c:	2302      	movs	r3, #2
 801845e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018460:	2300      	movs	r3, #0
 8018462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018464:	2300      	movs	r3, #0
 8018466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8018468:	230a      	movs	r3, #10
 801846a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801846c:	f107 0314 	add.w	r3, r7, #20
 8018470:	4619      	mov	r1, r3
 8018472:	4817      	ldr	r0, [pc, #92]	; (80184d0 <HAL_TIM_MspPostInit+0xd4>)
 8018474:	f004 f950 	bl	801c718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8018478:	e022      	b.n	80184c0 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	4a15      	ldr	r2, [pc, #84]	; (80184d4 <HAL_TIM_MspPostInit+0xd8>)
 8018480:	4293      	cmp	r3, r2
 8018482:	d11d      	bne.n	80184c0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018484:	4b11      	ldr	r3, [pc, #68]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 8018486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018488:	4a10      	ldr	r2, [pc, #64]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 801848a:	f043 0301 	orr.w	r3, r3, #1
 801848e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018490:	4b0e      	ldr	r3, [pc, #56]	; (80184cc <HAL_TIM_MspPostInit+0xd0>)
 8018492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018494:	f003 0301 	and.w	r3, r3, #1
 8018498:	60fb      	str	r3, [r7, #12]
 801849a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 801849c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80184a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184a2:	2302      	movs	r3, #2
 80184a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184a6:	2300      	movs	r3, #0
 80184a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184aa:	2300      	movs	r3, #0
 80184ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80184ae:	2301      	movs	r3, #1
 80184b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80184b2:	f107 0314 	add.w	r3, r7, #20
 80184b6:	4619      	mov	r1, r3
 80184b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80184bc:	f004 f92c 	bl	801c718 <HAL_GPIO_Init>
}
 80184c0:	bf00      	nop
 80184c2:	3728      	adds	r7, #40	; 0x28
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	40013400 	.word	0x40013400
 80184cc:	40021000 	.word	0x40021000
 80184d0:	48000400 	.word	0x48000400
 80184d4:	40014400 	.word	0x40014400

080184d8 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 80184d8:	b084      	sub	sp, #16
 80184da:	b480      	push	{r7}
 80184dc:	b083      	sub	sp, #12
 80184de:	af00      	add	r7, sp, #0
 80184e0:	f107 0c10 	add.w	ip, r7, #16
 80184e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 80184e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184ec:	f113 0f02 	cmn.w	r3, #2
 80184f0:	d102      	bne.n	80184f8 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 80184f2:	69bb      	ldr	r3, [r7, #24]
 80184f4:	607b      	str	r3, [r7, #4]
 80184f6:	e083      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 80184f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184fc:	f113 0f03 	cmn.w	r3, #3
 8018500:	d102      	bne.n	8018508 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8018502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018504:	607b      	str	r3, [r7, #4]
 8018506:	e07b      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8018508:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801850c:	f113 0f04 	cmn.w	r3, #4
 8018510:	d102      	bne.n	8018518 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8018512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018514:	607b      	str	r3, [r7, #4]
 8018516:	e073      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8018518:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801851c:	f113 0f05 	cmn.w	r3, #5
 8018520:	d102      	bne.n	8018528 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8018522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018524:	607b      	str	r3, [r7, #4]
 8018526:	e06b      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8018528:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801852c:	f113 0f06 	cmn.w	r3, #6
 8018530:	d102      	bne.n	8018538 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8018532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018534:	607b      	str	r3, [r7, #4]
 8018536:	e063      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8018538:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801853c:	f113 0f07 	cmn.w	r3, #7
 8018540:	d102      	bne.n	8018548 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8018542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018544:	607b      	str	r3, [r7, #4]
 8018546:	e05b      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8018548:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801854c:	f113 0f08 	cmn.w	r3, #8
 8018550:	d103      	bne.n	801855a <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8018552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018556:	607b      	str	r3, [r7, #4]
 8018558:	e052      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 801855a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801855e:	f113 0f09 	cmn.w	r3, #9
 8018562:	d103      	bne.n	801856c <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8018564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018568:	607b      	str	r3, [r7, #4]
 801856a:	e049      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 801856c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018570:	f113 0f0a 	cmn.w	r3, #10
 8018574:	d103      	bne.n	801857e <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8018576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801857a:	607b      	str	r3, [r7, #4]
 801857c:	e040      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 801857e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018582:	f113 0f0b 	cmn.w	r3, #11
 8018586:	d103      	bne.n	8018590 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8018588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801858c:	607b      	str	r3, [r7, #4]
 801858e:	e037      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8018590:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018594:	f113 0f0c 	cmn.w	r3, #12
 8018598:	d103      	bne.n	80185a2 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 801859a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801859e:	607b      	str	r3, [r7, #4]
 80185a0:	e02e      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 80185a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185a6:	f113 0f0d 	cmn.w	r3, #13
 80185aa:	d103      	bne.n	80185b4 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 80185ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185b0:	607b      	str	r3, [r7, #4]
 80185b2:	e025      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 80185b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185b8:	f113 0f0e 	cmn.w	r3, #14
 80185bc:	d103      	bne.n	80185c6 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 80185be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80185c2:	607b      	str	r3, [r7, #4]
 80185c4:	e01c      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 80185c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185ca:	f113 0f0f 	cmn.w	r3, #15
 80185ce:	d103      	bne.n	80185d8 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 80185d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80185d4:	607b      	str	r3, [r7, #4]
 80185d6:	e013      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 80185d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185dc:	f113 0f10 	cmn.w	r3, #16
 80185e0:	d103      	bne.n	80185ea <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 80185e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80185e6:	607b      	str	r3, [r7, #4]
 80185e8:	e00a      	b.n	8018600 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 80185ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185ee:	f113 0f11 	cmn.w	r3, #17
 80185f2:	d103      	bne.n	80185fc <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 80185f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80185f8:	607b      	str	r3, [r7, #4]
 80185fa:	e001      	b.n	8018600 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	ee07 3a90 	vmov	s15, r3
}
 8018606:	eeb0 0a67 	vmov.f32	s0, s15
 801860a:	370c      	adds	r7, #12
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	b004      	add	sp, #16
 8018614:	4770      	bx	lr
	...

08018618 <input_parameter>:

void input_parameter(void) {
 8018618:	b480      	push	{r7}
 801861a:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 801861c:	4b8f      	ldr	r3, [pc, #572]	; (801885c <input_parameter+0x244>)
 801861e:	4a90      	ldr	r2, [pc, #576]	; (8018860 <input_parameter+0x248>)
 8018620:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8018622:	4b8e      	ldr	r3, [pc, #568]	; (801885c <input_parameter+0x244>)
 8018624:	4a8e      	ldr	r2, [pc, #568]	; (8018860 <input_parameter+0x248>)
 8018626:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8018628:	4b8c      	ldr	r3, [pc, #560]	; (801885c <input_parameter+0x244>)
 801862a:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 801862c:	4a8b      	ldr	r2, [pc, #556]	; (801885c <input_parameter+0x244>)
 801862e:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8018630:	4b8a      	ldr	r3, [pc, #552]	; (801885c <input_parameter+0x244>)
 8018632:	4a8c      	ldr	r2, [pc, #560]	; (8018864 <input_parameter+0x24c>)
 8018634:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8018636:	4b89      	ldr	r3, [pc, #548]	; (801885c <input_parameter+0x244>)
 8018638:	4a8b      	ldr	r2, [pc, #556]	; (8018868 <input_parameter+0x250>)
 801863a:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 801863c:	4b87      	ldr	r3, [pc, #540]	; (801885c <input_parameter+0x244>)
 801863e:	4a8b      	ldr	r2, [pc, #556]	; (801886c <input_parameter+0x254>)
 8018640:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 24;
 8018642:	4b86      	ldr	r3, [pc, #536]	; (801885c <input_parameter+0x244>)
 8018644:	4a8a      	ldr	r2, [pc, #552]	; (8018870 <input_parameter+0x258>)
 8018646:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8018648:	4b84      	ldr	r3, [pc, #528]	; (801885c <input_parameter+0x244>)
 801864a:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 801864c:	4a83      	ldr	r2, [pc, #524]	; (801885c <input_parameter+0x244>)
 801864e:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8018650:	4b82      	ldr	r3, [pc, #520]	; (801885c <input_parameter+0x244>)
 8018652:	4a84      	ldr	r2, [pc, #528]	; (8018864 <input_parameter+0x24c>)
 8018654:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8018656:	4b81      	ldr	r3, [pc, #516]	; (801885c <input_parameter+0x244>)
 8018658:	4a83      	ldr	r2, [pc, #524]	; (8018868 <input_parameter+0x250>)
 801865a:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 801865c:	4b7f      	ldr	r3, [pc, #508]	; (801885c <input_parameter+0x244>)
 801865e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018662:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 24;
 8018664:	4b7d      	ldr	r3, [pc, #500]	; (801885c <input_parameter+0x244>)
 8018666:	4a82      	ldr	r2, [pc, #520]	; (8018870 <input_parameter+0x258>)
 8018668:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 801866a:	4b82      	ldr	r3, [pc, #520]	; (8018874 <input_parameter+0x25c>)
 801866c:	4a82      	ldr	r2, [pc, #520]	; (8018878 <input_parameter+0x260>)
 801866e:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8018670:	4b80      	ldr	r3, [pc, #512]	; (8018874 <input_parameter+0x25c>)
 8018672:	4a81      	ldr	r2, [pc, #516]	; (8018878 <input_parameter+0x260>)
 8018674:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8018676:	4b7f      	ldr	r3, [pc, #508]	; (8018874 <input_parameter+0x25c>)
 8018678:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 801867a:	4a7e      	ldr	r2, [pc, #504]	; (8018874 <input_parameter+0x25c>)
 801867c:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 801867e:	4b7d      	ldr	r3, [pc, #500]	; (8018874 <input_parameter+0x25c>)
 8018680:	4a7e      	ldr	r2, [pc, #504]	; (801887c <input_parameter+0x264>)
 8018682:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8018684:	4b7b      	ldr	r3, [pc, #492]	; (8018874 <input_parameter+0x25c>)
 8018686:	4a7e      	ldr	r2, [pc, #504]	; (8018880 <input_parameter+0x268>)
 8018688:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 801868a:	4b7a      	ldr	r3, [pc, #488]	; (8018874 <input_parameter+0x25c>)
 801868c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8018690:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8018692:	4b78      	ldr	r3, [pc, #480]	; (8018874 <input_parameter+0x25c>)
 8018694:	4a7b      	ldr	r2, [pc, #492]	; (8018884 <input_parameter+0x26c>)
 8018696:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8018698:	4b76      	ldr	r3, [pc, #472]	; (8018874 <input_parameter+0x25c>)
 801869a:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 801869c:	4a75      	ldr	r2, [pc, #468]	; (8018874 <input_parameter+0x25c>)
 801869e:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 80186a0:	4b74      	ldr	r3, [pc, #464]	; (8018874 <input_parameter+0x25c>)
 80186a2:	4a79      	ldr	r2, [pc, #484]	; (8018888 <input_parameter+0x270>)
 80186a4:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 80186a6:	4b73      	ldr	r3, [pc, #460]	; (8018874 <input_parameter+0x25c>)
 80186a8:	4a75      	ldr	r2, [pc, #468]	; (8018880 <input_parameter+0x268>)
 80186aa:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 80186ac:	4b71      	ldr	r3, [pc, #452]	; (8018874 <input_parameter+0x25c>)
 80186ae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80186b2:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 80186b4:	4b6f      	ldr	r3, [pc, #444]	; (8018874 <input_parameter+0x25c>)
 80186b6:	4a75      	ldr	r2, [pc, #468]	; (801888c <input_parameter+0x274>)
 80186b8:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 80186ba:	4b68      	ldr	r3, [pc, #416]	; (801885c <input_parameter+0x244>)
 80186bc:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 80186be:	4a74      	ldr	r2, [pc, #464]	; (8018890 <input_parameter+0x278>)
 80186c0:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 80186c2:	4b66      	ldr	r3, [pc, #408]	; (801885c <input_parameter+0x244>)
 80186c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80186c8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8018894 <input_parameter+0x27c>
 80186cc:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 80186d0:	4b6f      	ldr	r3, [pc, #444]	; (8018890 <input_parameter+0x278>)
 80186d2:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 80186d6:	4b61      	ldr	r3, [pc, #388]	; (801885c <input_parameter+0x244>)
 80186d8:	689b      	ldr	r3, [r3, #8]
 80186da:	4a6d      	ldr	r2, [pc, #436]	; (8018890 <input_parameter+0x278>)
 80186dc:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 80186de:	4b5f      	ldr	r3, [pc, #380]	; (801885c <input_parameter+0x244>)
 80186e0:	695b      	ldr	r3, [r3, #20]
 80186e2:	4a6b      	ldr	r2, [pc, #428]	; (8018890 <input_parameter+0x278>)
 80186e4:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 80186e6:	4b5d      	ldr	r3, [pc, #372]	; (801885c <input_parameter+0x244>)
 80186e8:	699b      	ldr	r3, [r3, #24]
 80186ea:	4a69      	ldr	r2, [pc, #420]	; (8018890 <input_parameter+0x278>)
 80186ec:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80186ee:	4b5b      	ldr	r3, [pc, #364]	; (801885c <input_parameter+0x244>)
 80186f0:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 80186f4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80186f8:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80186fc:	4b64      	ldr	r3, [pc, #400]	; (8018890 <input_parameter+0x278>)
 80186fe:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8018702:	4b56      	ldr	r3, [pc, #344]	; (801885c <input_parameter+0x244>)
 8018704:	691b      	ldr	r3, [r3, #16]
 8018706:	4a62      	ldr	r2, [pc, #392]	; (8018890 <input_parameter+0x278>)
 8018708:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 801870a:	4b54      	ldr	r3, [pc, #336]	; (801885c <input_parameter+0x244>)
 801870c:	69db      	ldr	r3, [r3, #28]
 801870e:	4a60      	ldr	r2, [pc, #384]	; (8018890 <input_parameter+0x278>)
 8018710:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8018712:	4b52      	ldr	r3, [pc, #328]	; (801885c <input_parameter+0x244>)
 8018714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018716:	4a5e      	ldr	r2, [pc, #376]	; (8018890 <input_parameter+0x278>)
 8018718:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 801871a:	4b50      	ldr	r3, [pc, #320]	; (801885c <input_parameter+0x244>)
 801871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801871e:	4a5c      	ldr	r2, [pc, #368]	; (8018890 <input_parameter+0x278>)
 8018720:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8018722:	4b4e      	ldr	r3, [pc, #312]	; (801885c <input_parameter+0x244>)
 8018724:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8018728:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801872c:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8018730:	4b57      	ldr	r3, [pc, #348]	; (8018890 <input_parameter+0x278>)
 8018732:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8018736:	4b49      	ldr	r3, [pc, #292]	; (801885c <input_parameter+0x244>)
 8018738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873a:	4a55      	ldr	r2, [pc, #340]	; (8018890 <input_parameter+0x278>)
 801873c:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801873e:	4b54      	ldr	r3, [pc, #336]	; (8018890 <input_parameter+0x278>)
 8018740:	685b      	ldr	r3, [r3, #4]
 8018742:	4a53      	ldr	r2, [pc, #332]	; (8018890 <input_parameter+0x278>)
 8018744:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8018746:	4b52      	ldr	r3, [pc, #328]	; (8018890 <input_parameter+0x278>)
 8018748:	4a53      	ldr	r2, [pc, #332]	; (8018898 <input_parameter+0x280>)
 801874a:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 801874c:	4b50      	ldr	r3, [pc, #320]	; (8018890 <input_parameter+0x278>)
 801874e:	4a53      	ldr	r2, [pc, #332]	; (801889c <input_parameter+0x284>)
 8018750:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8018752:	4b4f      	ldr	r3, [pc, #316]	; (8018890 <input_parameter+0x278>)
 8018754:	4a52      	ldr	r2, [pc, #328]	; (80188a0 <input_parameter+0x288>)
 8018756:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8018758:	4b4d      	ldr	r3, [pc, #308]	; (8018890 <input_parameter+0x278>)
 801875a:	4a52      	ldr	r2, [pc, #328]	; (80188a4 <input_parameter+0x28c>)
 801875c:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801875e:	4b4c      	ldr	r3, [pc, #304]	; (8018890 <input_parameter+0x278>)
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	4a4b      	ldr	r2, [pc, #300]	; (8018890 <input_parameter+0x278>)
 8018764:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8018766:	4b4a      	ldr	r3, [pc, #296]	; (8018890 <input_parameter+0x278>)
 8018768:	4a4b      	ldr	r2, [pc, #300]	; (8018898 <input_parameter+0x280>)
 801876a:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 801876c:	4b48      	ldr	r3, [pc, #288]	; (8018890 <input_parameter+0x278>)
 801876e:	4a4b      	ldr	r2, [pc, #300]	; (801889c <input_parameter+0x284>)
 8018770:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8018772:	4b47      	ldr	r3, [pc, #284]	; (8018890 <input_parameter+0x278>)
 8018774:	4a4c      	ldr	r2, [pc, #304]	; (80188a8 <input_parameter+0x290>)
 8018776:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8018778:	4b45      	ldr	r3, [pc, #276]	; (8018890 <input_parameter+0x278>)
 801877a:	4a4c      	ldr	r2, [pc, #304]	; (80188ac <input_parameter+0x294>)
 801877c:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 801877e:	4b44      	ldr	r3, [pc, #272]	; (8018890 <input_parameter+0x278>)
 8018780:	685b      	ldr	r3, [r3, #4]
 8018782:	4a43      	ldr	r2, [pc, #268]	; (8018890 <input_parameter+0x278>)
 8018784:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8018786:	4b42      	ldr	r3, [pc, #264]	; (8018890 <input_parameter+0x278>)
 8018788:	4a49      	ldr	r2, [pc, #292]	; (80188b0 <input_parameter+0x298>)
 801878a:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 801878c:	4b40      	ldr	r3, [pc, #256]	; (8018890 <input_parameter+0x278>)
 801878e:	4a49      	ldr	r2, [pc, #292]	; (80188b4 <input_parameter+0x29c>)
 8018790:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8018792:	4b3f      	ldr	r3, [pc, #252]	; (8018890 <input_parameter+0x278>)
 8018794:	4a48      	ldr	r2, [pc, #288]	; (80188b8 <input_parameter+0x2a0>)
 8018796:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8018798:	4b3d      	ldr	r3, [pc, #244]	; (8018890 <input_parameter+0x278>)
 801879a:	4a48      	ldr	r2, [pc, #288]	; (80188bc <input_parameter+0x2a4>)
 801879c:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 801879e:	4b3c      	ldr	r3, [pc, #240]	; (8018890 <input_parameter+0x278>)
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	4a3b      	ldr	r2, [pc, #236]	; (8018890 <input_parameter+0x278>)
 80187a4:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 80187a6:	4b3a      	ldr	r3, [pc, #232]	; (8018890 <input_parameter+0x278>)
 80187a8:	4a45      	ldr	r2, [pc, #276]	; (80188c0 <input_parameter+0x2a8>)
 80187aa:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 80187ac:	4b38      	ldr	r3, [pc, #224]	; (8018890 <input_parameter+0x278>)
 80187ae:	4a41      	ldr	r2, [pc, #260]	; (80188b4 <input_parameter+0x29c>)
 80187b0:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 80187b2:	4b37      	ldr	r3, [pc, #220]	; (8018890 <input_parameter+0x278>)
 80187b4:	4a43      	ldr	r2, [pc, #268]	; (80188c4 <input_parameter+0x2ac>)
 80187b6:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 80187b8:	4b35      	ldr	r3, [pc, #212]	; (8018890 <input_parameter+0x278>)
 80187ba:	4a43      	ldr	r2, [pc, #268]	; (80188c8 <input_parameter+0x2b0>)
 80187bc:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 80187be:	4b34      	ldr	r3, [pc, #208]	; (8018890 <input_parameter+0x278>)
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	4a33      	ldr	r2, [pc, #204]	; (8018890 <input_parameter+0x278>)
 80187c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 80187c8:	4b31      	ldr	r3, [pc, #196]	; (8018890 <input_parameter+0x278>)
 80187ca:	4a33      	ldr	r2, [pc, #204]	; (8018898 <input_parameter+0x280>)
 80187cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 80187d0:	4b2f      	ldr	r3, [pc, #188]	; (8018890 <input_parameter+0x278>)
 80187d2:	4a32      	ldr	r2, [pc, #200]	; (801889c <input_parameter+0x284>)
 80187d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 80187d8:	4b2d      	ldr	r3, [pc, #180]	; (8018890 <input_parameter+0x278>)
 80187da:	4a3c      	ldr	r2, [pc, #240]	; (80188cc <input_parameter+0x2b4>)
 80187dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 80187e0:	4b2b      	ldr	r3, [pc, #172]	; (8018890 <input_parameter+0x278>)
 80187e2:	4a3b      	ldr	r2, [pc, #236]	; (80188d0 <input_parameter+0x2b8>)
 80187e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 80187e8:	4b29      	ldr	r3, [pc, #164]	; (8018890 <input_parameter+0x278>)
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	4a28      	ldr	r2, [pc, #160]	; (8018890 <input_parameter+0x278>)
 80187ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 80187f2:	4b27      	ldr	r3, [pc, #156]	; (8018890 <input_parameter+0x278>)
 80187f4:	4a28      	ldr	r2, [pc, #160]	; (8018898 <input_parameter+0x280>)
 80187f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 80187fa:	4b25      	ldr	r3, [pc, #148]	; (8018890 <input_parameter+0x278>)
 80187fc:	4a27      	ldr	r2, [pc, #156]	; (801889c <input_parameter+0x284>)
 80187fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8018802:	4b23      	ldr	r3, [pc, #140]	; (8018890 <input_parameter+0x278>)
 8018804:	4a33      	ldr	r2, [pc, #204]	; (80188d4 <input_parameter+0x2bc>)
 8018806:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 801880a:	4b21      	ldr	r3, [pc, #132]	; (8018890 <input_parameter+0x278>)
 801880c:	4a32      	ldr	r2, [pc, #200]	; (80188d8 <input_parameter+0x2c0>)
 801880e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018812:	4b1f      	ldr	r3, [pc, #124]	; (8018890 <input_parameter+0x278>)
 8018814:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8018816:	4a1e      	ldr	r2, [pc, #120]	; (8018890 <input_parameter+0x278>)
 8018818:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 801881c:	4b1c      	ldr	r3, [pc, #112]	; (8018890 <input_parameter+0x278>)
 801881e:	4a2f      	ldr	r2, [pc, #188]	; (80188dc <input_parameter+0x2c4>)
 8018820:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8018824:	4b1a      	ldr	r3, [pc, #104]	; (8018890 <input_parameter+0x278>)
 8018826:	4a23      	ldr	r2, [pc, #140]	; (80188b4 <input_parameter+0x29c>)
 8018828:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 801882c:	4b18      	ldr	r3, [pc, #96]	; (8018890 <input_parameter+0x278>)
 801882e:	4a2c      	ldr	r2, [pc, #176]	; (80188e0 <input_parameter+0x2c8>)
 8018830:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8018834:	4b16      	ldr	r3, [pc, #88]	; (8018890 <input_parameter+0x278>)
 8018836:	4a2b      	ldr	r2, [pc, #172]	; (80188e4 <input_parameter+0x2cc>)
 8018838:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801883c:	4b14      	ldr	r3, [pc, #80]	; (8018890 <input_parameter+0x278>)
 801883e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8018840:	4a13      	ldr	r2, [pc, #76]	; (8018890 <input_parameter+0x278>)
 8018842:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8018846:	4b12      	ldr	r3, [pc, #72]	; (8018890 <input_parameter+0x278>)
 8018848:	4a24      	ldr	r2, [pc, #144]	; (80188dc <input_parameter+0x2c4>)
 801884a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 801884e:	4b10      	ldr	r3, [pc, #64]	; (8018890 <input_parameter+0x278>)
 8018850:	4a18      	ldr	r2, [pc, #96]	; (80188b4 <input_parameter+0x29c>)
 8018852:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8018856:	4b0e      	ldr	r3, [pc, #56]	; (8018890 <input_parameter+0x278>)
 8018858:	e046      	b.n	80188e8 <input_parameter+0x2d0>
 801885a:	bf00      	nop
 801885c:	2000f444 	.word	0x2000f444
 8018860:	43960000 	.word	0x43960000
 8018864:	44750000 	.word	0x44750000
 8018868:	464b2000 	.word	0x464b2000
 801886c:	40400000 	.word	0x40400000
 8018870:	41c00000 	.word	0x41c00000
 8018874:	2000f58c 	.word	0x2000f58c
 8018878:	437a0000 	.word	0x437a0000
 801887c:	444f8000 	.word	0x444f8000
 8018880:	460ca000 	.word	0x460ca000
 8018884:	41a00000 	.word	0x41a00000
 8018888:	44368000 	.word	0x44368000
 801888c:	41980000 	.word	0x41980000
 8018890:	2000f6d4 	.word	0x2000f6d4
 8018894:	43480000 	.word	0x43480000
 8018898:	44160000 	.word	0x44160000
 801889c:	461c4000 	.word	0x461c4000
 80188a0:	42980000 	.word	0x42980000
 80188a4:	42d60000 	.word	0x42d60000
 80188a8:	429a0000 	.word	0x429a0000
 80188ac:	42ce0000 	.word	0x42ce0000
 80188b0:	43d70000 	.word	0x43d70000
 80188b4:	45fa0000 	.word	0x45fa0000
 80188b8:	42820000 	.word	0x42820000
 80188bc:	42a00000 	.word	0x42a00000
 80188c0:	43e10000 	.word	0x43e10000
 80188c4:	42700000 	.word	0x42700000
 80188c8:	428e0000 	.word	0x428e0000
 80188cc:	41d80000 	.word	0x41d80000
 80188d0:	42b20000 	.word	0x42b20000
 80188d4:	42040000 	.word	0x42040000
 80188d8:	42b40000 	.word	0x42b40000
 80188dc:	44188000 	.word	0x44188000
 80188e0:	42860000 	.word	0x42860000
 80188e4:	42920000 	.word	0x42920000
 80188e8:	4a99      	ldr	r2, [pc, #612]	; (8018b50 <input_parameter+0x538>)
 80188ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 80188ee:	4b99      	ldr	r3, [pc, #612]	; (8018b54 <input_parameter+0x53c>)
 80188f0:	4a99      	ldr	r2, [pc, #612]	; (8018b58 <input_parameter+0x540>)
 80188f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80188f6:	4b97      	ldr	r3, [pc, #604]	; (8018b54 <input_parameter+0x53c>)
 80188f8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 80188fa:	4a96      	ldr	r2, [pc, #600]	; (8018b54 <input_parameter+0x53c>)
 80188fc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8018900:	4b94      	ldr	r3, [pc, #592]	; (8018b54 <input_parameter+0x53c>)
 8018902:	4a96      	ldr	r2, [pc, #600]	; (8018b5c <input_parameter+0x544>)
 8018904:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8018908:	4b92      	ldr	r3, [pc, #584]	; (8018b54 <input_parameter+0x53c>)
 801890a:	4a95      	ldr	r2, [pc, #596]	; (8018b60 <input_parameter+0x548>)
 801890c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8018910:	4b90      	ldr	r3, [pc, #576]	; (8018b54 <input_parameter+0x53c>)
 8018912:	4a94      	ldr	r2, [pc, #592]	; (8018b64 <input_parameter+0x54c>)
 8018914:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8018918:	4b8e      	ldr	r3, [pc, #568]	; (8018b54 <input_parameter+0x53c>)
 801891a:	4a92      	ldr	r2, [pc, #584]	; (8018b64 <input_parameter+0x54c>)
 801891c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018920:	4b8c      	ldr	r3, [pc, #560]	; (8018b54 <input_parameter+0x53c>)
 8018922:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8018924:	4a8b      	ldr	r2, [pc, #556]	; (8018b54 <input_parameter+0x53c>)
 8018926:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 801892a:	4b8a      	ldr	r3, [pc, #552]	; (8018b54 <input_parameter+0x53c>)
 801892c:	4a8b      	ldr	r2, [pc, #556]	; (8018b5c <input_parameter+0x544>)
 801892e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8018932:	4b88      	ldr	r3, [pc, #544]	; (8018b54 <input_parameter+0x53c>)
 8018934:	4a8a      	ldr	r2, [pc, #552]	; (8018b60 <input_parameter+0x548>)
 8018936:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 801893a:	4b86      	ldr	r3, [pc, #536]	; (8018b54 <input_parameter+0x53c>)
 801893c:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8018940:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8018944:	4b83      	ldr	r3, [pc, #524]	; (8018b54 <input_parameter+0x53c>)
 8018946:	4a88      	ldr	r2, [pc, #544]	; (8018b68 <input_parameter+0x550>)
 8018948:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 801894c:	4b81      	ldr	r3, [pc, #516]	; (8018b54 <input_parameter+0x53c>)
 801894e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8018950:	4a80      	ldr	r2, [pc, #512]	; (8018b54 <input_parameter+0x53c>)
 8018952:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8018956:	4b7f      	ldr	r3, [pc, #508]	; (8018b54 <input_parameter+0x53c>)
 8018958:	4a84      	ldr	r2, [pc, #528]	; (8018b6c <input_parameter+0x554>)
 801895a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 801895e:	4b7d      	ldr	r3, [pc, #500]	; (8018b54 <input_parameter+0x53c>)
 8018960:	4a83      	ldr	r2, [pc, #524]	; (8018b70 <input_parameter+0x558>)
 8018962:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8018966:	4b7b      	ldr	r3, [pc, #492]	; (8018b54 <input_parameter+0x53c>)
 8018968:	4a82      	ldr	r2, [pc, #520]	; (8018b74 <input_parameter+0x55c>)
 801896a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 801896e:	4b79      	ldr	r3, [pc, #484]	; (8018b54 <input_parameter+0x53c>)
 8018970:	4a81      	ldr	r2, [pc, #516]	; (8018b78 <input_parameter+0x560>)
 8018972:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018976:	4b77      	ldr	r3, [pc, #476]	; (8018b54 <input_parameter+0x53c>)
 8018978:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 801897a:	4a76      	ldr	r2, [pc, #472]	; (8018b54 <input_parameter+0x53c>)
 801897c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8018980:	4b74      	ldr	r3, [pc, #464]	; (8018b54 <input_parameter+0x53c>)
 8018982:	4a7a      	ldr	r2, [pc, #488]	; (8018b6c <input_parameter+0x554>)
 8018984:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8018988:	4b72      	ldr	r3, [pc, #456]	; (8018b54 <input_parameter+0x53c>)
 801898a:	4a79      	ldr	r2, [pc, #484]	; (8018b70 <input_parameter+0x558>)
 801898c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8018990:	4b70      	ldr	r3, [pc, #448]	; (8018b54 <input_parameter+0x53c>)
 8018992:	4a78      	ldr	r2, [pc, #480]	; (8018b74 <input_parameter+0x55c>)
 8018994:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8018998:	4b6e      	ldr	r3, [pc, #440]	; (8018b54 <input_parameter+0x53c>)
 801899a:	4a78      	ldr	r2, [pc, #480]	; (8018b7c <input_parameter+0x564>)
 801899c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80189a0:	4b6c      	ldr	r3, [pc, #432]	; (8018b54 <input_parameter+0x53c>)
 80189a2:	685b      	ldr	r3, [r3, #4]
 80189a4:	4a6b      	ldr	r2, [pc, #428]	; (8018b54 <input_parameter+0x53c>)
 80189a6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 80189aa:	4b6a      	ldr	r3, [pc, #424]	; (8018b54 <input_parameter+0x53c>)
 80189ac:	4a74      	ldr	r2, [pc, #464]	; (8018b80 <input_parameter+0x568>)
 80189ae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 80189b2:	4b68      	ldr	r3, [pc, #416]	; (8018b54 <input_parameter+0x53c>)
 80189b4:	4a73      	ldr	r2, [pc, #460]	; (8018b84 <input_parameter+0x56c>)
 80189b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 80189ba:	4b66      	ldr	r3, [pc, #408]	; (8018b54 <input_parameter+0x53c>)
 80189bc:	4a72      	ldr	r2, [pc, #456]	; (8018b88 <input_parameter+0x570>)
 80189be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 80189c2:	4b64      	ldr	r3, [pc, #400]	; (8018b54 <input_parameter+0x53c>)
 80189c4:	4a71      	ldr	r2, [pc, #452]	; (8018b8c <input_parameter+0x574>)
 80189c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80189ca:	4b62      	ldr	r3, [pc, #392]	; (8018b54 <input_parameter+0x53c>)
 80189cc:	685b      	ldr	r3, [r3, #4]
 80189ce:	4a61      	ldr	r2, [pc, #388]	; (8018b54 <input_parameter+0x53c>)
 80189d0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 80189d4:	4b5f      	ldr	r3, [pc, #380]	; (8018b54 <input_parameter+0x53c>)
 80189d6:	4a6a      	ldr	r2, [pc, #424]	; (8018b80 <input_parameter+0x568>)
 80189d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 80189dc:	4b5d      	ldr	r3, [pc, #372]	; (8018b54 <input_parameter+0x53c>)
 80189de:	4a69      	ldr	r2, [pc, #420]	; (8018b84 <input_parameter+0x56c>)
 80189e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 80189e4:	4b5b      	ldr	r3, [pc, #364]	; (8018b54 <input_parameter+0x53c>)
 80189e6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80189ea:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 80189ee:	4b59      	ldr	r3, [pc, #356]	; (8018b54 <input_parameter+0x53c>)
 80189f0:	4a67      	ldr	r2, [pc, #412]	; (8018b90 <input_parameter+0x578>)
 80189f2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 80189f6:	4b67      	ldr	r3, [pc, #412]	; (8018b94 <input_parameter+0x57c>)
 80189f8:	4a58      	ldr	r2, [pc, #352]	; (8018b5c <input_parameter+0x544>)
 80189fa:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 80189fc:	4b65      	ldr	r3, [pc, #404]	; (8018b94 <input_parameter+0x57c>)
 80189fe:	4a57      	ldr	r2, [pc, #348]	; (8018b5c <input_parameter+0x544>)
 8018a00:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8018a02:	4b64      	ldr	r3, [pc, #400]	; (8018b94 <input_parameter+0x57c>)
 8018a04:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8018a06:	4a63      	ldr	r2, [pc, #396]	; (8018b94 <input_parameter+0x57c>)
 8018a08:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8018a0a:	4b62      	ldr	r3, [pc, #392]	; (8018b94 <input_parameter+0x57c>)
 8018a0c:	4a62      	ldr	r2, [pc, #392]	; (8018b98 <input_parameter+0x580>)
 8018a0e:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8018a10:	4b60      	ldr	r3, [pc, #384]	; (8018b94 <input_parameter+0x57c>)
 8018a12:	4a62      	ldr	r2, [pc, #392]	; (8018b9c <input_parameter+0x584>)
 8018a14:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8018a16:	4b5f      	ldr	r3, [pc, #380]	; (8018b94 <input_parameter+0x57c>)
 8018a18:	4a61      	ldr	r2, [pc, #388]	; (8018ba0 <input_parameter+0x588>)
 8018a1a:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8018a1c:	4b5d      	ldr	r3, [pc, #372]	; (8018b94 <input_parameter+0x57c>)
 8018a1e:	4a61      	ldr	r2, [pc, #388]	; (8018ba4 <input_parameter+0x58c>)
 8018a20:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8018a22:	4b5c      	ldr	r3, [pc, #368]	; (8018b94 <input_parameter+0x57c>)
 8018a24:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8018a26:	4a5b      	ldr	r2, [pc, #364]	; (8018b94 <input_parameter+0x57c>)
 8018a28:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8018a2a:	4b5a      	ldr	r3, [pc, #360]	; (8018b94 <input_parameter+0x57c>)
 8018a2c:	4a5a      	ldr	r2, [pc, #360]	; (8018b98 <input_parameter+0x580>)
 8018a2e:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8018a30:	4b58      	ldr	r3, [pc, #352]	; (8018b94 <input_parameter+0x57c>)
 8018a32:	4a5a      	ldr	r2, [pc, #360]	; (8018b9c <input_parameter+0x584>)
 8018a34:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8018a36:	4b57      	ldr	r3, [pc, #348]	; (8018b94 <input_parameter+0x57c>)
 8018a38:	4a59      	ldr	r2, [pc, #356]	; (8018ba0 <input_parameter+0x588>)
 8018a3a:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8018a3c:	4b55      	ldr	r3, [pc, #340]	; (8018b94 <input_parameter+0x57c>)
 8018a3e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018a42:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8018a44:	4b53      	ldr	r3, [pc, #332]	; (8018b94 <input_parameter+0x57c>)
 8018a46:	4a45      	ldr	r2, [pc, #276]	; (8018b5c <input_parameter+0x544>)
 8018a48:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8018a4a:	4b52      	ldr	r3, [pc, #328]	; (8018b94 <input_parameter+0x57c>)
 8018a4c:	4a56      	ldr	r2, [pc, #344]	; (8018ba8 <input_parameter+0x590>)
 8018a4e:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8018a50:	4b50      	ldr	r3, [pc, #320]	; (8018b94 <input_parameter+0x57c>)
 8018a52:	4a56      	ldr	r2, [pc, #344]	; (8018bac <input_parameter+0x594>)
 8018a54:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8018a56:	4b4f      	ldr	r3, [pc, #316]	; (8018b94 <input_parameter+0x57c>)
 8018a58:	4a55      	ldr	r2, [pc, #340]	; (8018bb0 <input_parameter+0x598>)
 8018a5a:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8018a5c:	4b4d      	ldr	r3, [pc, #308]	; (8018b94 <input_parameter+0x57c>)
 8018a5e:	4a54      	ldr	r2, [pc, #336]	; (8018bb0 <input_parameter+0x598>)
 8018a60:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8018a62:	4b4c      	ldr	r3, [pc, #304]	; (8018b94 <input_parameter+0x57c>)
 8018a64:	4a3d      	ldr	r2, [pc, #244]	; (8018b5c <input_parameter+0x544>)
 8018a66:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8018a68:	4b4a      	ldr	r3, [pc, #296]	; (8018b94 <input_parameter+0x57c>)
 8018a6a:	4a4f      	ldr	r2, [pc, #316]	; (8018ba8 <input_parameter+0x590>)
 8018a6c:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8018a6e:	4b49      	ldr	r3, [pc, #292]	; (8018b94 <input_parameter+0x57c>)
 8018a70:	4a4e      	ldr	r2, [pc, #312]	; (8018bac <input_parameter+0x594>)
 8018a72:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8018a74:	4b47      	ldr	r3, [pc, #284]	; (8018b94 <input_parameter+0x57c>)
 8018a76:	4a4e      	ldr	r2, [pc, #312]	; (8018bb0 <input_parameter+0x598>)
 8018a78:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018a7a:	4b46      	ldr	r3, [pc, #280]	; (8018b94 <input_parameter+0x57c>)
 8018a7c:	4a42      	ldr	r2, [pc, #264]	; (8018b88 <input_parameter+0x570>)
 8018a7e:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018a80:	4b44      	ldr	r3, [pc, #272]	; (8018b94 <input_parameter+0x57c>)
 8018a82:	4a36      	ldr	r2, [pc, #216]	; (8018b5c <input_parameter+0x544>)
 8018a84:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8018a86:	4b43      	ldr	r3, [pc, #268]	; (8018b94 <input_parameter+0x57c>)
 8018a88:	4a4a      	ldr	r2, [pc, #296]	; (8018bb4 <input_parameter+0x59c>)
 8018a8a:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8018a8c:	4b41      	ldr	r3, [pc, #260]	; (8018b94 <input_parameter+0x57c>)
 8018a8e:	4a4a      	ldr	r2, [pc, #296]	; (8018bb8 <input_parameter+0x5a0>)
 8018a90:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8018a92:	4b40      	ldr	r3, [pc, #256]	; (8018b94 <input_parameter+0x57c>)
 8018a94:	4a49      	ldr	r2, [pc, #292]	; (8018bbc <input_parameter+0x5a4>)
 8018a96:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018a98:	4b3e      	ldr	r3, [pc, #248]	; (8018b94 <input_parameter+0x57c>)
 8018a9a:	4a49      	ldr	r2, [pc, #292]	; (8018bc0 <input_parameter+0x5a8>)
 8018a9c:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8018a9e:	4b3d      	ldr	r3, [pc, #244]	; (8018b94 <input_parameter+0x57c>)
 8018aa0:	4a2e      	ldr	r2, [pc, #184]	; (8018b5c <input_parameter+0x544>)
 8018aa2:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8018aa4:	4b3b      	ldr	r3, [pc, #236]	; (8018b94 <input_parameter+0x57c>)
 8018aa6:	4a47      	ldr	r2, [pc, #284]	; (8018bc4 <input_parameter+0x5ac>)
 8018aa8:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8018aaa:	4b3a      	ldr	r3, [pc, #232]	; (8018b94 <input_parameter+0x57c>)
 8018aac:	4a42      	ldr	r2, [pc, #264]	; (8018bb8 <input_parameter+0x5a0>)
 8018aae:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018ab0:	4b38      	ldr	r3, [pc, #224]	; (8018b94 <input_parameter+0x57c>)
 8018ab2:	4a42      	ldr	r2, [pc, #264]	; (8018bbc <input_parameter+0x5a4>)
 8018ab4:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018ab6:	4b37      	ldr	r3, [pc, #220]	; (8018b94 <input_parameter+0x57c>)
 8018ab8:	4a43      	ldr	r2, [pc, #268]	; (8018bc8 <input_parameter+0x5b0>)
 8018aba:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8018abc:	4b35      	ldr	r3, [pc, #212]	; (8018b94 <input_parameter+0x57c>)
 8018abe:	4a27      	ldr	r2, [pc, #156]	; (8018b5c <input_parameter+0x544>)
 8018ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8018ac4:	4b33      	ldr	r3, [pc, #204]	; (8018b94 <input_parameter+0x57c>)
 8018ac6:	4a41      	ldr	r2, [pc, #260]	; (8018bcc <input_parameter+0x5b4>)
 8018ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8018acc:	4b31      	ldr	r3, [pc, #196]	; (8018b94 <input_parameter+0x57c>)
 8018ace:	4a40      	ldr	r2, [pc, #256]	; (8018bd0 <input_parameter+0x5b8>)
 8018ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8018ad4:	4b2f      	ldr	r3, [pc, #188]	; (8018b94 <input_parameter+0x57c>)
 8018ad6:	4a3f      	ldr	r2, [pc, #252]	; (8018bd4 <input_parameter+0x5bc>)
 8018ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018adc:	4b2d      	ldr	r3, [pc, #180]	; (8018b94 <input_parameter+0x57c>)
 8018ade:	4a3e      	ldr	r2, [pc, #248]	; (8018bd8 <input_parameter+0x5c0>)
 8018ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8018ae4:	4b2b      	ldr	r3, [pc, #172]	; (8018b94 <input_parameter+0x57c>)
 8018ae6:	4a1d      	ldr	r2, [pc, #116]	; (8018b5c <input_parameter+0x544>)
 8018ae8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8018aec:	4b29      	ldr	r3, [pc, #164]	; (8018b94 <input_parameter+0x57c>)
 8018aee:	4a3b      	ldr	r2, [pc, #236]	; (8018bdc <input_parameter+0x5c4>)
 8018af0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8018af4:	4b27      	ldr	r3, [pc, #156]	; (8018b94 <input_parameter+0x57c>)
 8018af6:	4a36      	ldr	r2, [pc, #216]	; (8018bd0 <input_parameter+0x5b8>)
 8018af8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018afc:	4b25      	ldr	r3, [pc, #148]	; (8018b94 <input_parameter+0x57c>)
 8018afe:	4a38      	ldr	r2, [pc, #224]	; (8018be0 <input_parameter+0x5c8>)
 8018b00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018b04:	4b23      	ldr	r3, [pc, #140]	; (8018b94 <input_parameter+0x57c>)
 8018b06:	4a37      	ldr	r2, [pc, #220]	; (8018be4 <input_parameter+0x5cc>)
 8018b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8018b0c:	4b21      	ldr	r3, [pc, #132]	; (8018b94 <input_parameter+0x57c>)
 8018b0e:	4a13      	ldr	r2, [pc, #76]	; (8018b5c <input_parameter+0x544>)
 8018b10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8018b14:	4b1f      	ldr	r3, [pc, #124]	; (8018b94 <input_parameter+0x57c>)
 8018b16:	4a34      	ldr	r2, [pc, #208]	; (8018be8 <input_parameter+0x5d0>)
 8018b18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8018b1c:	4b1d      	ldr	r3, [pc, #116]	; (8018b94 <input_parameter+0x57c>)
 8018b1e:	4a26      	ldr	r2, [pc, #152]	; (8018bb8 <input_parameter+0x5a0>)
 8018b20:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8018b24:	4b1b      	ldr	r3, [pc, #108]	; (8018b94 <input_parameter+0x57c>)
 8018b26:	4a31      	ldr	r2, [pc, #196]	; (8018bec <input_parameter+0x5d4>)
 8018b28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018b2c:	4b19      	ldr	r3, [pc, #100]	; (8018b94 <input_parameter+0x57c>)
 8018b2e:	4a2d      	ldr	r2, [pc, #180]	; (8018be4 <input_parameter+0x5cc>)
 8018b30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8018b34:	4b17      	ldr	r3, [pc, #92]	; (8018b94 <input_parameter+0x57c>)
 8018b36:	4a09      	ldr	r2, [pc, #36]	; (8018b5c <input_parameter+0x544>)
 8018b38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8018b3c:	4b15      	ldr	r3, [pc, #84]	; (8018b94 <input_parameter+0x57c>)
 8018b3e:	4a2c      	ldr	r2, [pc, #176]	; (8018bf0 <input_parameter+0x5d8>)
 8018b40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8018b44:	4b13      	ldr	r3, [pc, #76]	; (8018b94 <input_parameter+0x57c>)
 8018b46:	4a1c      	ldr	r2, [pc, #112]	; (8018bb8 <input_parameter+0x5a0>)
 8018b48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8018b4c:	e052      	b.n	8018bf4 <input_parameter+0x5dc>
 8018b4e:	bf00      	nop
 8018b50:	42860000 	.word	0x42860000
 8018b54:	2000f6d4 	.word	0x2000f6d4
 8018b58:	42920000 	.word	0x42920000
 8018b5c:	44160000 	.word	0x44160000
 8018b60:	461c4000 	.word	0x461c4000
 8018b64:	42640000 	.word	0x42640000
 8018b68:	42500000 	.word	0x42500000
 8018b6c:	44250000 	.word	0x44250000
 8018b70:	45fa0000 	.word	0x45fa0000
 8018b74:	425c0000 	.word	0x425c0000
 8018b78:	42c80000 	.word	0x42c80000
 8018b7c:	42ce0000 	.word	0x42ce0000
 8018b80:	442f0000 	.word	0x442f0000
 8018b84:	462be000 	.word	0x462be000
 8018b88:	420c0000 	.word	0x420c0000
 8018b8c:	42600000 	.word	0x42600000
 8018b90:	42700000 	.word	0x42700000
 8018b94:	2000f81c 	.word	0x2000f81c
 8018b98:	44898000 	.word	0x44898000
 8018b9c:	476a6000 	.word	0x476a6000
 8018ba0:	40a00000 	.word	0x40a00000
 8018ba4:	41e00000 	.word	0x41e00000
 8018ba8:	446d8000 	.word	0x446d8000
 8018bac:	466a6000 	.word	0x466a6000
 8018bb0:	41f80000 	.word	0x41f80000
 8018bb4:	44520000 	.word	0x44520000
 8018bb8:	465ac000 	.word	0x465ac000
 8018bbc:	40e00000 	.word	0x40e00000
 8018bc0:	41a00000 	.word	0x41a00000
 8018bc4:	444d0000 	.word	0x444d0000
 8018bc8:	41900000 	.word	0x41900000
 8018bcc:	444f8000 	.word	0x444f8000
 8018bd0:	463b8000 	.word	0x463b8000
 8018bd4:	41500000 	.word	0x41500000
 8018bd8:	42180000 	.word	0x42180000
 8018bdc:	44608000 	.word	0x44608000
 8018be0:	41400000 	.word	0x41400000
 8018be4:	42100000 	.word	0x42100000
 8018be8:	446b0000 	.word	0x446b0000
 8018bec:	41180000 	.word	0x41180000
 8018bf0:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8018bf4:	4b9d      	ldr	r3, [pc, #628]	; (8018e6c <input_parameter+0x854>)
 8018bf6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018bfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018bfe:	4b9b      	ldr	r3, [pc, #620]	; (8018e6c <input_parameter+0x854>)
 8018c00:	4a9b      	ldr	r2, [pc, #620]	; (8018e70 <input_parameter+0x858>)
 8018c02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8018c06:	4b99      	ldr	r3, [pc, #612]	; (8018e6c <input_parameter+0x854>)
 8018c08:	4a9a      	ldr	r2, [pc, #616]	; (8018e74 <input_parameter+0x85c>)
 8018c0a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018c0e:	4b97      	ldr	r3, [pc, #604]	; (8018e6c <input_parameter+0x854>)
 8018c10:	4a99      	ldr	r2, [pc, #612]	; (8018e78 <input_parameter+0x860>)
 8018c12:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8018c16:	4b95      	ldr	r3, [pc, #596]	; (8018e6c <input_parameter+0x854>)
 8018c18:	4a98      	ldr	r2, [pc, #608]	; (8018e7c <input_parameter+0x864>)
 8018c1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018c1e:	4b93      	ldr	r3, [pc, #588]	; (8018e6c <input_parameter+0x854>)
 8018c20:	4a97      	ldr	r2, [pc, #604]	; (8018e80 <input_parameter+0x868>)
 8018c22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018c26:	4b91      	ldr	r3, [pc, #580]	; (8018e6c <input_parameter+0x854>)
 8018c28:	4a96      	ldr	r2, [pc, #600]	; (8018e84 <input_parameter+0x86c>)
 8018c2a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018c2e:	4b8f      	ldr	r3, [pc, #572]	; (8018e6c <input_parameter+0x854>)
 8018c30:	4a90      	ldr	r2, [pc, #576]	; (8018e74 <input_parameter+0x85c>)
 8018c32:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8018c36:	4b8d      	ldr	r3, [pc, #564]	; (8018e6c <input_parameter+0x854>)
 8018c38:	4a93      	ldr	r2, [pc, #588]	; (8018e88 <input_parameter+0x870>)
 8018c3a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018c3e:	4b8b      	ldr	r3, [pc, #556]	; (8018e6c <input_parameter+0x854>)
 8018c40:	4a8e      	ldr	r2, [pc, #568]	; (8018e7c <input_parameter+0x864>)
 8018c42:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8018c46:	4b89      	ldr	r3, [pc, #548]	; (8018e6c <input_parameter+0x854>)
 8018c48:	4a90      	ldr	r2, [pc, #576]	; (8018e8c <input_parameter+0x874>)
 8018c4a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018c4e:	4b87      	ldr	r3, [pc, #540]	; (8018e6c <input_parameter+0x854>)
 8018c50:	4a8f      	ldr	r2, [pc, #572]	; (8018e90 <input_parameter+0x878>)
 8018c52:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8018c56:	4b85      	ldr	r3, [pc, #532]	; (8018e6c <input_parameter+0x854>)
 8018c58:	4a86      	ldr	r2, [pc, #536]	; (8018e74 <input_parameter+0x85c>)
 8018c5a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018c5e:	4b83      	ldr	r3, [pc, #524]	; (8018e6c <input_parameter+0x854>)
 8018c60:	4a8c      	ldr	r2, [pc, #560]	; (8018e94 <input_parameter+0x87c>)
 8018c62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8018c66:	4b81      	ldr	r3, [pc, #516]	; (8018e6c <input_parameter+0x854>)
 8018c68:	4a8b      	ldr	r2, [pc, #556]	; (8018e98 <input_parameter+0x880>)
 8018c6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018c6e:	4b7f      	ldr	r3, [pc, #508]	; (8018e6c <input_parameter+0x854>)
 8018c70:	4a8a      	ldr	r2, [pc, #552]	; (8018e9c <input_parameter+0x884>)
 8018c72:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018c76:	4b7d      	ldr	r3, [pc, #500]	; (8018e6c <input_parameter+0x854>)
 8018c78:	4a82      	ldr	r2, [pc, #520]	; (8018e84 <input_parameter+0x86c>)
 8018c7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8018c7e:	4b7b      	ldr	r3, [pc, #492]	; (8018e6c <input_parameter+0x854>)
 8018c80:	4a7c      	ldr	r2, [pc, #496]	; (8018e74 <input_parameter+0x85c>)
 8018c82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8018c86:	4b79      	ldr	r3, [pc, #484]	; (8018e6c <input_parameter+0x854>)
 8018c88:	4a85      	ldr	r2, [pc, #532]	; (8018ea0 <input_parameter+0x888>)
 8018c8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8018c8e:	4b77      	ldr	r3, [pc, #476]	; (8018e6c <input_parameter+0x854>)
 8018c90:	4a84      	ldr	r2, [pc, #528]	; (8018ea4 <input_parameter+0x88c>)
 8018c92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8018c96:	4b75      	ldr	r3, [pc, #468]	; (8018e6c <input_parameter+0x854>)
 8018c98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018c9c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018ca0:	4b72      	ldr	r3, [pc, #456]	; (8018e6c <input_parameter+0x854>)
 8018ca2:	4a81      	ldr	r2, [pc, #516]	; (8018ea8 <input_parameter+0x890>)
 8018ca4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018ca8:	4b70      	ldr	r3, [pc, #448]	; (8018e6c <input_parameter+0x854>)
 8018caa:	4a72      	ldr	r2, [pc, #456]	; (8018e74 <input_parameter+0x85c>)
 8018cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018cb0:	4b6e      	ldr	r3, [pc, #440]	; (8018e6c <input_parameter+0x854>)
 8018cb2:	4a7e      	ldr	r2, [pc, #504]	; (8018eac <input_parameter+0x894>)
 8018cb4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018cb8:	4b6c      	ldr	r3, [pc, #432]	; (8018e6c <input_parameter+0x854>)
 8018cba:	4a77      	ldr	r2, [pc, #476]	; (8018e98 <input_parameter+0x880>)
 8018cbc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018cc0:	4b6a      	ldr	r3, [pc, #424]	; (8018e6c <input_parameter+0x854>)
 8018cc2:	4a7b      	ldr	r2, [pc, #492]	; (8018eb0 <input_parameter+0x898>)
 8018cc4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018cc8:	4b68      	ldr	r3, [pc, #416]	; (8018e6c <input_parameter+0x854>)
 8018cca:	4a7a      	ldr	r2, [pc, #488]	; (8018eb4 <input_parameter+0x89c>)
 8018ccc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018cd0:	4b66      	ldr	r3, [pc, #408]	; (8018e6c <input_parameter+0x854>)
 8018cd2:	4a68      	ldr	r2, [pc, #416]	; (8018e74 <input_parameter+0x85c>)
 8018cd4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018cd8:	4b64      	ldr	r3, [pc, #400]	; (8018e6c <input_parameter+0x854>)
 8018cda:	4a77      	ldr	r2, [pc, #476]	; (8018eb8 <input_parameter+0x8a0>)
 8018cdc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018ce0:	4b62      	ldr	r3, [pc, #392]	; (8018e6c <input_parameter+0x854>)
 8018ce2:	4a76      	ldr	r2, [pc, #472]	; (8018ebc <input_parameter+0x8a4>)
 8018ce4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018ce8:	4b60      	ldr	r3, [pc, #384]	; (8018e6c <input_parameter+0x854>)
 8018cea:	4a75      	ldr	r2, [pc, #468]	; (8018ec0 <input_parameter+0x8a8>)
 8018cec:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018cf0:	4b5e      	ldr	r3, [pc, #376]	; (8018e6c <input_parameter+0x854>)
 8018cf2:	4a70      	ldr	r2, [pc, #448]	; (8018eb4 <input_parameter+0x89c>)
 8018cf4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018cf8:	4b72      	ldr	r3, [pc, #456]	; (8018ec4 <input_parameter+0x8ac>)
 8018cfa:	4a73      	ldr	r2, [pc, #460]	; (8018ec8 <input_parameter+0x8b0>)
 8018cfc:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018cfe:	4b71      	ldr	r3, [pc, #452]	; (8018ec4 <input_parameter+0x8ac>)
 8018d00:	4a71      	ldr	r2, [pc, #452]	; (8018ec8 <input_parameter+0x8b0>)
 8018d02:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018d04:	4b6f      	ldr	r3, [pc, #444]	; (8018ec4 <input_parameter+0x8ac>)
 8018d06:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018d08:	4a6e      	ldr	r2, [pc, #440]	; (8018ec4 <input_parameter+0x8ac>)
 8018d0a:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018d0c:	4b6d      	ldr	r3, [pc, #436]	; (8018ec4 <input_parameter+0x8ac>)
 8018d0e:	4a6f      	ldr	r2, [pc, #444]	; (8018ecc <input_parameter+0x8b4>)
 8018d10:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 8018d12:	4b6c      	ldr	r3, [pc, #432]	; (8018ec4 <input_parameter+0x8ac>)
 8018d14:	4a61      	ldr	r2, [pc, #388]	; (8018e9c <input_parameter+0x884>)
 8018d16:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018d18:	4b6a      	ldr	r3, [pc, #424]	; (8018ec4 <input_parameter+0x8ac>)
 8018d1a:	4a6d      	ldr	r2, [pc, #436]	; (8018ed0 <input_parameter+0x8b8>)
 8018d1c:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018d1e:	4b69      	ldr	r3, [pc, #420]	; (8018ec4 <input_parameter+0x8ac>)
 8018d20:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 8018d22:	4a68      	ldr	r2, [pc, #416]	; (8018ec4 <input_parameter+0x8ac>)
 8018d24:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 8018d26:	4b67      	ldr	r3, [pc, #412]	; (8018ec4 <input_parameter+0x8ac>)
 8018d28:	4a68      	ldr	r2, [pc, #416]	; (8018ecc <input_parameter+0x8b4>)
 8018d2a:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018d2c:	4b65      	ldr	r3, [pc, #404]	; (8018ec4 <input_parameter+0x8ac>)
 8018d2e:	4a5b      	ldr	r2, [pc, #364]	; (8018e9c <input_parameter+0x884>)
 8018d30:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 8018d32:	4b64      	ldr	r3, [pc, #400]	; (8018ec4 <input_parameter+0x8ac>)
 8018d34:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018d38:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018d3a:	4b62      	ldr	r3, [pc, #392]	; (8018ec4 <input_parameter+0x8ac>)
 8018d3c:	4a62      	ldr	r2, [pc, #392]	; (8018ec8 <input_parameter+0x8b0>)
 8018d3e:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018d40:	4b60      	ldr	r3, [pc, #384]	; (8018ec4 <input_parameter+0x8ac>)
 8018d42:	4a64      	ldr	r2, [pc, #400]	; (8018ed4 <input_parameter+0x8bc>)
 8018d44:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 8018d46:	4b5f      	ldr	r3, [pc, #380]	; (8018ec4 <input_parameter+0x8ac>)
 8018d48:	4a63      	ldr	r2, [pc, #396]	; (8018ed8 <input_parameter+0x8c0>)
 8018d4a:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018d4c:	4b5d      	ldr	r3, [pc, #372]	; (8018ec4 <input_parameter+0x8ac>)
 8018d4e:	4a63      	ldr	r2, [pc, #396]	; (8018edc <input_parameter+0x8c4>)
 8018d50:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 8018d52:	4b5c      	ldr	r3, [pc, #368]	; (8018ec4 <input_parameter+0x8ac>)
 8018d54:	4a5c      	ldr	r2, [pc, #368]	; (8018ec8 <input_parameter+0x8b0>)
 8018d56:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018d58:	4b5a      	ldr	r3, [pc, #360]	; (8018ec4 <input_parameter+0x8ac>)
 8018d5a:	4a5e      	ldr	r2, [pc, #376]	; (8018ed4 <input_parameter+0x8bc>)
 8018d5c:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8018d5e:	4b59      	ldr	r3, [pc, #356]	; (8018ec4 <input_parameter+0x8ac>)
 8018d60:	4a5d      	ldr	r2, [pc, #372]	; (8018ed8 <input_parameter+0x8c0>)
 8018d62:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8018d64:	4b57      	ldr	r3, [pc, #348]	; (8018ec4 <input_parameter+0x8ac>)
 8018d66:	4a5e      	ldr	r2, [pc, #376]	; (8018ee0 <input_parameter+0x8c8>)
 8018d68:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018d6a:	4b56      	ldr	r3, [pc, #344]	; (8018ec4 <input_parameter+0x8ac>)
 8018d6c:	4a56      	ldr	r2, [pc, #344]	; (8018ec8 <input_parameter+0x8b0>)
 8018d6e:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018d70:	4b54      	ldr	r3, [pc, #336]	; (8018ec4 <input_parameter+0x8ac>)
 8018d72:	4a5c      	ldr	r2, [pc, #368]	; (8018ee4 <input_parameter+0x8cc>)
 8018d74:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018d76:	4b53      	ldr	r3, [pc, #332]	; (8018ec4 <input_parameter+0x8ac>)
 8018d78:	4a4d      	ldr	r2, [pc, #308]	; (8018eb0 <input_parameter+0x898>)
 8018d7a:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018d7c:	4b51      	ldr	r3, [pc, #324]	; (8018ec4 <input_parameter+0x8ac>)
 8018d7e:	4a4d      	ldr	r2, [pc, #308]	; (8018eb4 <input_parameter+0x89c>)
 8018d80:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 8018d82:	4b50      	ldr	r3, [pc, #320]	; (8018ec4 <input_parameter+0x8ac>)
 8018d84:	4a50      	ldr	r2, [pc, #320]	; (8018ec8 <input_parameter+0x8b0>)
 8018d86:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018d88:	4b4e      	ldr	r3, [pc, #312]	; (8018ec4 <input_parameter+0x8ac>)
 8018d8a:	4a56      	ldr	r2, [pc, #344]	; (8018ee4 <input_parameter+0x8cc>)
 8018d8c:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 8018d8e:	4b4d      	ldr	r3, [pc, #308]	; (8018ec4 <input_parameter+0x8ac>)
 8018d90:	4a47      	ldr	r2, [pc, #284]	; (8018eb0 <input_parameter+0x898>)
 8018d92:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018d94:	4b4b      	ldr	r3, [pc, #300]	; (8018ec4 <input_parameter+0x8ac>)
 8018d96:	4a54      	ldr	r2, [pc, #336]	; (8018ee8 <input_parameter+0x8d0>)
 8018d98:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018d9a:	4b4a      	ldr	r3, [pc, #296]	; (8018ec4 <input_parameter+0x8ac>)
 8018d9c:	4a4a      	ldr	r2, [pc, #296]	; (8018ec8 <input_parameter+0x8b0>)
 8018d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 8018da2:	4b48      	ldr	r3, [pc, #288]	; (8018ec4 <input_parameter+0x8ac>)
 8018da4:	4a51      	ldr	r2, [pc, #324]	; (8018eec <input_parameter+0x8d4>)
 8018da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 8018daa:	4b46      	ldr	r3, [pc, #280]	; (8018ec4 <input_parameter+0x8ac>)
 8018dac:	4a4e      	ldr	r2, [pc, #312]	; (8018ee8 <input_parameter+0x8d0>)
 8018dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018db2:	4b44      	ldr	r3, [pc, #272]	; (8018ec4 <input_parameter+0x8ac>)
 8018db4:	4a4e      	ldr	r2, [pc, #312]	; (8018ef0 <input_parameter+0x8d8>)
 8018db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018dba:	4b42      	ldr	r3, [pc, #264]	; (8018ec4 <input_parameter+0x8ac>)
 8018dbc:	4a42      	ldr	r2, [pc, #264]	; (8018ec8 <input_parameter+0x8b0>)
 8018dbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 8018dc2:	4b40      	ldr	r3, [pc, #256]	; (8018ec4 <input_parameter+0x8ac>)
 8018dc4:	4a49      	ldr	r2, [pc, #292]	; (8018eec <input_parameter+0x8d4>)
 8018dc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 8018dca:	4b3e      	ldr	r3, [pc, #248]	; (8018ec4 <input_parameter+0x8ac>)
 8018dcc:	4a38      	ldr	r2, [pc, #224]	; (8018eb0 <input_parameter+0x898>)
 8018dce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018dd2:	4b3c      	ldr	r3, [pc, #240]	; (8018ec4 <input_parameter+0x8ac>)
 8018dd4:	4a34      	ldr	r2, [pc, #208]	; (8018ea8 <input_parameter+0x890>)
 8018dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018dda:	4b3a      	ldr	r3, [pc, #232]	; (8018ec4 <input_parameter+0x8ac>)
 8018ddc:	4a3a      	ldr	r2, [pc, #232]	; (8018ec8 <input_parameter+0x8b0>)
 8018dde:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 8018de2:	4b38      	ldr	r3, [pc, #224]	; (8018ec4 <input_parameter+0x8ac>)
 8018de4:	4a43      	ldr	r2, [pc, #268]	; (8018ef4 <input_parameter+0x8dc>)
 8018de6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 8018dea:	4b36      	ldr	r3, [pc, #216]	; (8018ec4 <input_parameter+0x8ac>)
 8018dec:	4a30      	ldr	r2, [pc, #192]	; (8018eb0 <input_parameter+0x898>)
 8018dee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 8018df2:	4b34      	ldr	r3, [pc, #208]	; (8018ec4 <input_parameter+0x8ac>)
 8018df4:	4a40      	ldr	r2, [pc, #256]	; (8018ef8 <input_parameter+0x8e0>)
 8018df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018dfa:	4b32      	ldr	r3, [pc, #200]	; (8018ec4 <input_parameter+0x8ac>)
 8018dfc:	4a32      	ldr	r2, [pc, #200]	; (8018ec8 <input_parameter+0x8b0>)
 8018dfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 8018e02:	4b30      	ldr	r3, [pc, #192]	; (8018ec4 <input_parameter+0x8ac>)
 8018e04:	4a3d      	ldr	r2, [pc, #244]	; (8018efc <input_parameter+0x8e4>)
 8018e06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018e0a:	4b2e      	ldr	r3, [pc, #184]	; (8018ec4 <input_parameter+0x8ac>)
 8018e0c:	4a3c      	ldr	r2, [pc, #240]	; (8018f00 <input_parameter+0x8e8>)
 8018e0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 8018e12:	4b2c      	ldr	r3, [pc, #176]	; (8018ec4 <input_parameter+0x8ac>)
 8018e14:	4a3b      	ldr	r2, [pc, #236]	; (8018f04 <input_parameter+0x8ec>)
 8018e16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018e1a:	4b2a      	ldr	r3, [pc, #168]	; (8018ec4 <input_parameter+0x8ac>)
 8018e1c:	4a2a      	ldr	r2, [pc, #168]	; (8018ec8 <input_parameter+0x8b0>)
 8018e1e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 8018e22:	4b28      	ldr	r3, [pc, #160]	; (8018ec4 <input_parameter+0x8ac>)
 8018e24:	4a31      	ldr	r2, [pc, #196]	; (8018eec <input_parameter+0x8d4>)
 8018e26:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018e2a:	4b26      	ldr	r3, [pc, #152]	; (8018ec4 <input_parameter+0x8ac>)
 8018e2c:	4a30      	ldr	r2, [pc, #192]	; (8018ef0 <input_parameter+0x8d8>)
 8018e2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018e32:	4b24      	ldr	r3, [pc, #144]	; (8018ec4 <input_parameter+0x8ac>)
 8018e34:	4a13      	ldr	r2, [pc, #76]	; (8018e84 <input_parameter+0x86c>)
 8018e36:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018e3a:	4b22      	ldr	r3, [pc, #136]	; (8018ec4 <input_parameter+0x8ac>)
 8018e3c:	4a22      	ldr	r2, [pc, #136]	; (8018ec8 <input_parameter+0x8b0>)
 8018e3e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 8018e42:	4b20      	ldr	r3, [pc, #128]	; (8018ec4 <input_parameter+0x8ac>)
 8018e44:	4a29      	ldr	r2, [pc, #164]	; (8018eec <input_parameter+0x8d4>)
 8018e46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018e4a:	4b1e      	ldr	r3, [pc, #120]	; (8018ec4 <input_parameter+0x8ac>)
 8018e4c:	4a2e      	ldr	r2, [pc, #184]	; (8018f08 <input_parameter+0x8f0>)
 8018e4e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018e52:	4b1c      	ldr	r3, [pc, #112]	; (8018ec4 <input_parameter+0x8ac>)
 8018e54:	4a0e      	ldr	r2, [pc, #56]	; (8018e90 <input_parameter+0x878>)
 8018e56:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018e5a:	4b1a      	ldr	r3, [pc, #104]	; (8018ec4 <input_parameter+0x8ac>)
 8018e5c:	4a1a      	ldr	r2, [pc, #104]	; (8018ec8 <input_parameter+0x8b0>)
 8018e5e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 8018e62:	4b18      	ldr	r3, [pc, #96]	; (8018ec4 <input_parameter+0x8ac>)
 8018e64:	4a29      	ldr	r2, [pc, #164]	; (8018f0c <input_parameter+0x8f4>)
 8018e66:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018e6a:	e051      	b.n	8018f10 <input_parameter+0x8f8>
 8018e6c:	2000f81c 	.word	0x2000f81c
 8018e70:	42080000 	.word	0x42080000
 8018e74:	44160000 	.word	0x44160000
 8018e78:	44340000 	.word	0x44340000
 8018e7c:	463b8000 	.word	0x463b8000
 8018e80:	422c0000 	.word	0x422c0000
 8018e84:	41b00000 	.word	0x41b00000
 8018e88:	443b8000 	.word	0x443b8000
 8018e8c:	42200000 	.word	0x42200000
 8018e90:	41c00000 	.word	0x41c00000
 8018e94:	44660000 	.word	0x44660000
 8018e98:	466a6000 	.word	0x466a6000
 8018e9c:	40a00000 	.word	0x40a00000
 8018ea0:	445e8000 	.word	0x445e8000
 8018ea4:	465ac000 	.word	0x465ac000
 8018ea8:	42100000 	.word	0x42100000
 8018eac:	446b0000 	.word	0x446b0000
 8018eb0:	41880000 	.word	0x41880000
 8018eb4:	41a00000 	.word	0x41a00000
 8018eb8:	44700000 	.word	0x44700000
 8018ebc:	467a0000 	.word	0x467a0000
 8018ec0:	41200000 	.word	0x41200000
 8018ec4:	2000f964 	.word	0x2000f964
 8018ec8:	447a0000 	.word	0x447a0000
 8018ecc:	44898000 	.word	0x44898000
 8018ed0:	41e00000 	.word	0x41e00000
 8018ed4:	44b54000 	.word	0x44b54000
 8018ed8:	41e80000 	.word	0x41e80000
 8018edc:	41f80000 	.word	0x41f80000
 8018ee0:	420c0000 	.word	0x420c0000
 8018ee4:	44af0000 	.word	0x44af0000
 8018ee8:	41900000 	.word	0x41900000
 8018eec:	44a28000 	.word	0x44a28000
 8018ef0:	42180000 	.word	0x42180000
 8018ef4:	44c6c000 	.word	0x44c6c000
 8018ef8:	41700000 	.word	0x41700000
 8018efc:	44c30000 	.word	0x44c30000
 8018f00:	41600000 	.word	0x41600000
 8018f04:	41400000 	.word	0x41400000
 8018f08:	41f00000 	.word	0x41f00000
 8018f0c:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 8018f10:	4b9e      	ldr	r3, [pc, #632]	; (801918c <input_parameter+0xb74>)
 8018f12:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018f16:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018f1a:	4b9c      	ldr	r3, [pc, #624]	; (801918c <input_parameter+0xb74>)
 8018f1c:	4a9c      	ldr	r2, [pc, #624]	; (8019190 <input_parameter+0xb78>)
 8018f1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 8018f22:	4b9a      	ldr	r3, [pc, #616]	; (801918c <input_parameter+0xb74>)
 8018f24:	4a9b      	ldr	r2, [pc, #620]	; (8019194 <input_parameter+0xb7c>)
 8018f26:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018f2a:	4b98      	ldr	r3, [pc, #608]	; (801918c <input_parameter+0xb74>)
 8018f2c:	4a9a      	ldr	r2, [pc, #616]	; (8019198 <input_parameter+0xb80>)
 8018f2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 8018f32:	4b96      	ldr	r3, [pc, #600]	; (801918c <input_parameter+0xb74>)
 8018f34:	4a99      	ldr	r2, [pc, #612]	; (801919c <input_parameter+0xb84>)
 8018f36:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018f3a:	4b94      	ldr	r3, [pc, #592]	; (801918c <input_parameter+0xb74>)
 8018f3c:	4a98      	ldr	r2, [pc, #608]	; (80191a0 <input_parameter+0xb88>)
 8018f3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 8018f42:	4b92      	ldr	r3, [pc, #584]	; (801918c <input_parameter+0xb74>)
 8018f44:	4a93      	ldr	r2, [pc, #588]	; (8019194 <input_parameter+0xb7c>)
 8018f46:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018f4a:	4b90      	ldr	r3, [pc, #576]	; (801918c <input_parameter+0xb74>)
 8018f4c:	4a95      	ldr	r2, [pc, #596]	; (80191a4 <input_parameter+0xb8c>)
 8018f4e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 8018f52:	4b8e      	ldr	r3, [pc, #568]	; (801918c <input_parameter+0xb74>)
 8018f54:	4a94      	ldr	r2, [pc, #592]	; (80191a8 <input_parameter+0xb90>)
 8018f56:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 8018f5a:	4b8c      	ldr	r3, [pc, #560]	; (801918c <input_parameter+0xb74>)
 8018f5c:	4a93      	ldr	r2, [pc, #588]	; (80191ac <input_parameter+0xb94>)
 8018f5e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 8018f62:	4b8a      	ldr	r3, [pc, #552]	; (801918c <input_parameter+0xb74>)
 8018f64:	4a8b      	ldr	r2, [pc, #556]	; (8019194 <input_parameter+0xb7c>)
 8018f66:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018f6a:	4b88      	ldr	r3, [pc, #544]	; (801918c <input_parameter+0xb74>)
 8018f6c:	4a8d      	ldr	r2, [pc, #564]	; (80191a4 <input_parameter+0xb8c>)
 8018f6e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 8018f72:	4b86      	ldr	r3, [pc, #536]	; (801918c <input_parameter+0xb74>)
 8018f74:	4a8e      	ldr	r2, [pc, #568]	; (80191b0 <input_parameter+0xb98>)
 8018f76:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 8018f7a:	4b84      	ldr	r3, [pc, #528]	; (801918c <input_parameter+0xb74>)
 8018f7c:	4a8b      	ldr	r2, [pc, #556]	; (80191ac <input_parameter+0xb94>)
 8018f7e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 8018f82:	4b8c      	ldr	r3, [pc, #560]	; (80191b4 <input_parameter+0xb9c>)
 8018f84:	4a8c      	ldr	r2, [pc, #560]	; (80191b8 <input_parameter+0xba0>)
 8018f86:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018f88:	4b8a      	ldr	r3, [pc, #552]	; (80191b4 <input_parameter+0xb9c>)
 8018f8a:	4a8b      	ldr	r2, [pc, #556]	; (80191b8 <input_parameter+0xba0>)
 8018f8c:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018f8e:	4b89      	ldr	r3, [pc, #548]	; (80191b4 <input_parameter+0xb9c>)
 8018f90:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 8018f92:	4a88      	ldr	r2, [pc, #544]	; (80191b4 <input_parameter+0xb9c>)
 8018f94:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018f96:	4b87      	ldr	r3, [pc, #540]	; (80191b4 <input_parameter+0xb9c>)
 8018f98:	4a88      	ldr	r2, [pc, #544]	; (80191bc <input_parameter+0xba4>)
 8018f9a:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 8018f9c:	4b85      	ldr	r3, [pc, #532]	; (80191b4 <input_parameter+0xb9c>)
 8018f9e:	4a88      	ldr	r2, [pc, #544]	; (80191c0 <input_parameter+0xba8>)
 8018fa0:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018fa2:	4b84      	ldr	r3, [pc, #528]	; (80191b4 <input_parameter+0xb9c>)
 8018fa4:	4a87      	ldr	r2, [pc, #540]	; (80191c4 <input_parameter+0xbac>)
 8018fa6:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018fa8:	4b82      	ldr	r3, [pc, #520]	; (80191b4 <input_parameter+0xb9c>)
 8018faa:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 8018fac:	4a81      	ldr	r2, [pc, #516]	; (80191b4 <input_parameter+0xb9c>)
 8018fae:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 8018fb0:	4b80      	ldr	r3, [pc, #512]	; (80191b4 <input_parameter+0xb9c>)
 8018fb2:	4a82      	ldr	r2, [pc, #520]	; (80191bc <input_parameter+0xba4>)
 8018fb4:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018fb6:	4b7f      	ldr	r3, [pc, #508]	; (80191b4 <input_parameter+0xb9c>)
 8018fb8:	4a81      	ldr	r2, [pc, #516]	; (80191c0 <input_parameter+0xba8>)
 8018fba:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 8018fbc:	4b7d      	ldr	r3, [pc, #500]	; (80191b4 <input_parameter+0xb9c>)
 8018fbe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018fc2:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018fc4:	4b7b      	ldr	r3, [pc, #492]	; (80191b4 <input_parameter+0xb9c>)
 8018fc6:	4a7c      	ldr	r2, [pc, #496]	; (80191b8 <input_parameter+0xba0>)
 8018fc8:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 8018fca:	4b7a      	ldr	r3, [pc, #488]	; (80191b4 <input_parameter+0xb9c>)
 8018fcc:	4a7e      	ldr	r2, [pc, #504]	; (80191c8 <input_parameter+0xbb0>)
 8018fce:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 8018fd0:	4b78      	ldr	r3, [pc, #480]	; (80191b4 <input_parameter+0xb9c>)
 8018fd2:	4a76      	ldr	r2, [pc, #472]	; (80191ac <input_parameter+0xb94>)
 8018fd4:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018fd6:	4b77      	ldr	r3, [pc, #476]	; (80191b4 <input_parameter+0xb9c>)
 8018fd8:	4a7c      	ldr	r2, [pc, #496]	; (80191cc <input_parameter+0xbb4>)
 8018fda:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 8018fdc:	4b75      	ldr	r3, [pc, #468]	; (80191b4 <input_parameter+0xb9c>)
 8018fde:	4a76      	ldr	r2, [pc, #472]	; (80191b8 <input_parameter+0xba0>)
 8018fe0:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8018fe2:	4b74      	ldr	r3, [pc, #464]	; (80191b4 <input_parameter+0xb9c>)
 8018fe4:	4a78      	ldr	r2, [pc, #480]	; (80191c8 <input_parameter+0xbb0>)
 8018fe6:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8018fe8:	4b72      	ldr	r3, [pc, #456]	; (80191b4 <input_parameter+0xb9c>)
 8018fea:	4a78      	ldr	r2, [pc, #480]	; (80191cc <input_parameter+0xbb4>)
 8018fec:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 8018fee:	4b71      	ldr	r3, [pc, #452]	; (80191b4 <input_parameter+0xb9c>)
 8018ff0:	4a77      	ldr	r2, [pc, #476]	; (80191d0 <input_parameter+0xbb8>)
 8018ff2:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8018ff4:	4b6f      	ldr	r3, [pc, #444]	; (80191b4 <input_parameter+0xb9c>)
 8018ff6:	4a70      	ldr	r2, [pc, #448]	; (80191b8 <input_parameter+0xba0>)
 8018ff8:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018ffa:	4b6e      	ldr	r3, [pc, #440]	; (80191b4 <input_parameter+0xb9c>)
 8018ffc:	4a75      	ldr	r2, [pc, #468]	; (80191d4 <input_parameter+0xbbc>)
 8018ffe:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 8019000:	4b6c      	ldr	r3, [pc, #432]	; (80191b4 <input_parameter+0xb9c>)
 8019002:	4a75      	ldr	r2, [pc, #468]	; (80191d8 <input_parameter+0xbc0>)
 8019004:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8019006:	4b6b      	ldr	r3, [pc, #428]	; (80191b4 <input_parameter+0xb9c>)
 8019008:	4a70      	ldr	r2, [pc, #448]	; (80191cc <input_parameter+0xbb4>)
 801900a:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 801900c:	4b69      	ldr	r3, [pc, #420]	; (80191b4 <input_parameter+0xb9c>)
 801900e:	4a6a      	ldr	r2, [pc, #424]	; (80191b8 <input_parameter+0xba0>)
 8019010:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 8019012:	4b68      	ldr	r3, [pc, #416]	; (80191b4 <input_parameter+0xb9c>)
 8019014:	4a6f      	ldr	r2, [pc, #444]	; (80191d4 <input_parameter+0xbbc>)
 8019016:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 8019018:	4b66      	ldr	r3, [pc, #408]	; (80191b4 <input_parameter+0xb9c>)
 801901a:	4a70      	ldr	r2, [pc, #448]	; (80191dc <input_parameter+0xbc4>)
 801901c:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 801901e:	4b65      	ldr	r3, [pc, #404]	; (80191b4 <input_parameter+0xb9c>)
 8019020:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019024:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 8019026:	4b63      	ldr	r3, [pc, #396]	; (80191b4 <input_parameter+0xb9c>)
 8019028:	4a63      	ldr	r2, [pc, #396]	; (80191b8 <input_parameter+0xba0>)
 801902a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 801902e:	4b61      	ldr	r3, [pc, #388]	; (80191b4 <input_parameter+0xb9c>)
 8019030:	4a6b      	ldr	r2, [pc, #428]	; (80191e0 <input_parameter+0xbc8>)
 8019032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 8019036:	4b5f      	ldr	r3, [pc, #380]	; (80191b4 <input_parameter+0xb9c>)
 8019038:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801903c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 8019040:	4b5c      	ldr	r3, [pc, #368]	; (80191b4 <input_parameter+0xb9c>)
 8019042:	4a68      	ldr	r2, [pc, #416]	; (80191e4 <input_parameter+0xbcc>)
 8019044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8019048:	4b5a      	ldr	r3, [pc, #360]	; (80191b4 <input_parameter+0xb9c>)
 801904a:	4a5b      	ldr	r2, [pc, #364]	; (80191b8 <input_parameter+0xba0>)
 801904c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 8019050:	4b58      	ldr	r3, [pc, #352]	; (80191b4 <input_parameter+0xb9c>)
 8019052:	4a63      	ldr	r2, [pc, #396]	; (80191e0 <input_parameter+0xbc8>)
 8019054:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 8019058:	4b56      	ldr	r3, [pc, #344]	; (80191b4 <input_parameter+0xb9c>)
 801905a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801905e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 8019062:	4b54      	ldr	r3, [pc, #336]	; (80191b4 <input_parameter+0xb9c>)
 8019064:	4a5f      	ldr	r2, [pc, #380]	; (80191e4 <input_parameter+0xbcc>)
 8019066:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 801906a:	4b52      	ldr	r3, [pc, #328]	; (80191b4 <input_parameter+0xb9c>)
 801906c:	4a52      	ldr	r2, [pc, #328]	; (80191b8 <input_parameter+0xba0>)
 801906e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 8019072:	4b50      	ldr	r3, [pc, #320]	; (80191b4 <input_parameter+0xb9c>)
 8019074:	4a5c      	ldr	r2, [pc, #368]	; (80191e8 <input_parameter+0xbd0>)
 8019076:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 801907a:	4b4e      	ldr	r3, [pc, #312]	; (80191b4 <input_parameter+0xb9c>)
 801907c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8019080:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 8019084:	4b4b      	ldr	r3, [pc, #300]	; (80191b4 <input_parameter+0xb9c>)
 8019086:	4a42      	ldr	r2, [pc, #264]	; (8019190 <input_parameter+0xb78>)
 8019088:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 801908c:	4b49      	ldr	r3, [pc, #292]	; (80191b4 <input_parameter+0xb9c>)
 801908e:	4a4a      	ldr	r2, [pc, #296]	; (80191b8 <input_parameter+0xba0>)
 8019090:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 8019094:	4b47      	ldr	r3, [pc, #284]	; (80191b4 <input_parameter+0xb9c>)
 8019096:	4a54      	ldr	r2, [pc, #336]	; (80191e8 <input_parameter+0xbd0>)
 8019098:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 801909c:	4b45      	ldr	r3, [pc, #276]	; (80191b4 <input_parameter+0xb9c>)
 801909e:	4a4f      	ldr	r2, [pc, #316]	; (80191dc <input_parameter+0xbc4>)
 80190a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 80190a4:	4b43      	ldr	r3, [pc, #268]	; (80191b4 <input_parameter+0xb9c>)
 80190a6:	4a49      	ldr	r2, [pc, #292]	; (80191cc <input_parameter+0xbb4>)
 80190a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 80190ac:	4b41      	ldr	r3, [pc, #260]	; (80191b4 <input_parameter+0xb9c>)
 80190ae:	4a42      	ldr	r2, [pc, #264]	; (80191b8 <input_parameter+0xba0>)
 80190b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 80190b4:	4b3f      	ldr	r3, [pc, #252]	; (80191b4 <input_parameter+0xb9c>)
 80190b6:	4a4d      	ldr	r2, [pc, #308]	; (80191ec <input_parameter+0xbd4>)
 80190b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 80190bc:	4b3d      	ldr	r3, [pc, #244]	; (80191b4 <input_parameter+0xb9c>)
 80190be:	4a4c      	ldr	r2, [pc, #304]	; (80191f0 <input_parameter+0xbd8>)
 80190c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 80190c4:	4b3b      	ldr	r3, [pc, #236]	; (80191b4 <input_parameter+0xb9c>)
 80190c6:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80190ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 80190ce:	4b39      	ldr	r3, [pc, #228]	; (80191b4 <input_parameter+0xb9c>)
 80190d0:	4a39      	ldr	r2, [pc, #228]	; (80191b8 <input_parameter+0xba0>)
 80190d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 80190d6:	4b37      	ldr	r3, [pc, #220]	; (80191b4 <input_parameter+0xb9c>)
 80190d8:	4a44      	ldr	r2, [pc, #272]	; (80191ec <input_parameter+0xbd4>)
 80190da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 80190de:	4b35      	ldr	r3, [pc, #212]	; (80191b4 <input_parameter+0xb9c>)
 80190e0:	4a44      	ldr	r2, [pc, #272]	; (80191f4 <input_parameter+0xbdc>)
 80190e2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 80190e6:	4b33      	ldr	r3, [pc, #204]	; (80191b4 <input_parameter+0xb9c>)
 80190e8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80190ec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 80190f0:	4b30      	ldr	r3, [pc, #192]	; (80191b4 <input_parameter+0xb9c>)
 80190f2:	4a31      	ldr	r2, [pc, #196]	; (80191b8 <input_parameter+0xba0>)
 80190f4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 80190f8:	4b2e      	ldr	r3, [pc, #184]	; (80191b4 <input_parameter+0xb9c>)
 80190fa:	4a3b      	ldr	r2, [pc, #236]	; (80191e8 <input_parameter+0xbd0>)
 80190fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 8019100:	4b2c      	ldr	r3, [pc, #176]	; (80191b4 <input_parameter+0xb9c>)
 8019102:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019106:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 801910a:	4b2a      	ldr	r3, [pc, #168]	; (80191b4 <input_parameter+0xb9c>)
 801910c:	4a24      	ldr	r2, [pc, #144]	; (80191a0 <input_parameter+0xb88>)
 801910e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 8019112:	4b28      	ldr	r3, [pc, #160]	; (80191b4 <input_parameter+0xb9c>)
 8019114:	4a28      	ldr	r2, [pc, #160]	; (80191b8 <input_parameter+0xba0>)
 8019116:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 801911a:	4b26      	ldr	r3, [pc, #152]	; (80191b4 <input_parameter+0xb9c>)
 801911c:	4a32      	ldr	r2, [pc, #200]	; (80191e8 <input_parameter+0xbd0>)
 801911e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 8019122:	4b24      	ldr	r3, [pc, #144]	; (80191b4 <input_parameter+0xb9c>)
 8019124:	4a1d      	ldr	r2, [pc, #116]	; (801919c <input_parameter+0xb84>)
 8019126:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 801912a:	4b22      	ldr	r3, [pc, #136]	; (80191b4 <input_parameter+0xb9c>)
 801912c:	4a1c      	ldr	r2, [pc, #112]	; (80191a0 <input_parameter+0xb88>)
 801912e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 8019132:	4b20      	ldr	r3, [pc, #128]	; (80191b4 <input_parameter+0xb9c>)
 8019134:	4a20      	ldr	r2, [pc, #128]	; (80191b8 <input_parameter+0xba0>)
 8019136:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 801913a:	4b1e      	ldr	r3, [pc, #120]	; (80191b4 <input_parameter+0xb9c>)
 801913c:	4a2e      	ldr	r2, [pc, #184]	; (80191f8 <input_parameter+0xbe0>)
 801913e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 8019142:	4b1c      	ldr	r3, [pc, #112]	; (80191b4 <input_parameter+0xb9c>)
 8019144:	4a1a      	ldr	r2, [pc, #104]	; (80191b0 <input_parameter+0xb98>)
 8019146:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 801914a:	4b1a      	ldr	r3, [pc, #104]	; (80191b4 <input_parameter+0xb9c>)
 801914c:	4a20      	ldr	r2, [pc, #128]	; (80191d0 <input_parameter+0xbb8>)
 801914e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 8019152:	4b18      	ldr	r3, [pc, #96]	; (80191b4 <input_parameter+0xb9c>)
 8019154:	4a18      	ldr	r2, [pc, #96]	; (80191b8 <input_parameter+0xba0>)
 8019156:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 801915a:	4b16      	ldr	r3, [pc, #88]	; (80191b4 <input_parameter+0xb9c>)
 801915c:	4a26      	ldr	r2, [pc, #152]	; (80191f8 <input_parameter+0xbe0>)
 801915e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 8019162:	4b14      	ldr	r3, [pc, #80]	; (80191b4 <input_parameter+0xb9c>)
 8019164:	4a25      	ldr	r2, [pc, #148]	; (80191fc <input_parameter+0xbe4>)
 8019166:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 801916a:	4b12      	ldr	r3, [pc, #72]	; (80191b4 <input_parameter+0xb9c>)
 801916c:	4a18      	ldr	r2, [pc, #96]	; (80191d0 <input_parameter+0xbb8>)
 801916e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 8019172:	4b23      	ldr	r3, [pc, #140]	; (8019200 <input_parameter+0xbe8>)
 8019174:	4a23      	ldr	r2, [pc, #140]	; (8019204 <input_parameter+0xbec>)
 8019176:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8019178:	4b21      	ldr	r3, [pc, #132]	; (8019200 <input_parameter+0xbe8>)
 801917a:	4a22      	ldr	r2, [pc, #136]	; (8019204 <input_parameter+0xbec>)
 801917c:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 801917e:	4b20      	ldr	r3, [pc, #128]	; (8019200 <input_parameter+0xbe8>)
 8019180:	4a20      	ldr	r2, [pc, #128]	; (8019204 <input_parameter+0xbec>)
 8019182:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 8019184:	4b1e      	ldr	r3, [pc, #120]	; (8019200 <input_parameter+0xbe8>)
 8019186:	4a20      	ldr	r2, [pc, #128]	; (8019208 <input_parameter+0xbf0>)
 8019188:	63da      	str	r2, [r3, #60]	; 0x3c
 801918a:	e03f      	b.n	801920c <input_parameter+0xbf4>
 801918c:	2000f964 	.word	0x2000f964
 8019190:	41b00000 	.word	0x41b00000
 8019194:	447a0000 	.word	0x447a0000
 8019198:	44cf8000 	.word	0x44cf8000
 801919c:	41200000 	.word	0x41200000
 80191a0:	41f00000 	.word	0x41f00000
 80191a4:	44dac000 	.word	0x44dac000
 80191a8:	41840000 	.word	0x41840000
 80191ac:	41a80000 	.word	0x41a80000
 80191b0:	41600000 	.word	0x41600000
 80191b4:	2000faac 	.word	0x2000faac
 80191b8:	44960000 	.word	0x44960000
 80191bc:	44898000 	.word	0x44898000
 80191c0:	40a00000 	.word	0x40a00000
 80191c4:	41e00000 	.word	0x41e00000
 80191c8:	44bcc000 	.word	0x44bcc000
 80191cc:	41a00000 	.word	0x41a00000
 80191d0:	41c80000 	.word	0x41c80000
 80191d4:	44ce4000 	.word	0x44ce4000
 80191d8:	41880000 	.word	0x41880000
 80191dc:	41700000 	.word	0x41700000
 80191e0:	44c1c000 	.word	0x44c1c000
 80191e4:	421c0000 	.word	0x421c0000
 80191e8:	44e74000 	.word	0x44e74000
 80191ec:	44af0000 	.word	0x44af0000
 80191f0:	42040000 	.word	0x42040000
 80191f4:	41c00000 	.word	0x41c00000
 80191f8:	44f3c000 	.word	0x44f3c000
 80191fc:	41080000 	.word	0x41080000
 8019200:	2000fbf4 	.word	0x2000fbf4
 8019204:	44bb8000 	.word	0x44bb8000
 8019208:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 801920c:	4b67      	ldr	r3, [pc, #412]	; (80193ac <input_parameter+0xd94>)
 801920e:	4a68      	ldr	r2, [pc, #416]	; (80193b0 <input_parameter+0xd98>)
 8019210:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 8019212:	4b66      	ldr	r3, [pc, #408]	; (80193ac <input_parameter+0xd94>)
 8019214:	4a67      	ldr	r2, [pc, #412]	; (80193b4 <input_parameter+0xd9c>)
 8019216:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 8019218:	4b64      	ldr	r3, [pc, #400]	; (80193ac <input_parameter+0xd94>)
 801921a:	4a67      	ldr	r2, [pc, #412]	; (80193b8 <input_parameter+0xda0>)
 801921c:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 801921e:	4b63      	ldr	r3, [pc, #396]	; (80193ac <input_parameter+0xd94>)
 8019220:	4a66      	ldr	r2, [pc, #408]	; (80193bc <input_parameter+0xda4>)
 8019222:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 8019224:	4b61      	ldr	r3, [pc, #388]	; (80193ac <input_parameter+0xd94>)
 8019226:	4a66      	ldr	r2, [pc, #408]	; (80193c0 <input_parameter+0xda8>)
 8019228:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 801922a:	4b60      	ldr	r3, [pc, #384]	; (80193ac <input_parameter+0xd94>)
 801922c:	4a65      	ldr	r2, [pc, #404]	; (80193c4 <input_parameter+0xdac>)
 801922e:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 8019230:	4b5e      	ldr	r3, [pc, #376]	; (80193ac <input_parameter+0xd94>)
 8019232:	4a61      	ldr	r2, [pc, #388]	; (80193b8 <input_parameter+0xda0>)
 8019234:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 8019236:	4b5d      	ldr	r3, [pc, #372]	; (80193ac <input_parameter+0xd94>)
 8019238:	4a63      	ldr	r2, [pc, #396]	; (80193c8 <input_parameter+0xdb0>)
 801923a:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 801923c:	4b5b      	ldr	r3, [pc, #364]	; (80193ac <input_parameter+0xd94>)
 801923e:	4a63      	ldr	r2, [pc, #396]	; (80193cc <input_parameter+0xdb4>)
 8019240:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 8019242:	4b5a      	ldr	r3, [pc, #360]	; (80193ac <input_parameter+0xd94>)
 8019244:	4a62      	ldr	r2, [pc, #392]	; (80193d0 <input_parameter+0xdb8>)
 8019246:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 8019248:	4b58      	ldr	r3, [pc, #352]	; (80193ac <input_parameter+0xd94>)
 801924a:	4a5b      	ldr	r2, [pc, #364]	; (80193b8 <input_parameter+0xda0>)
 801924c:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 801924e:	4b57      	ldr	r3, [pc, #348]	; (80193ac <input_parameter+0xd94>)
 8019250:	4a5d      	ldr	r2, [pc, #372]	; (80193c8 <input_parameter+0xdb0>)
 8019252:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 8019254:	4b55      	ldr	r3, [pc, #340]	; (80193ac <input_parameter+0xd94>)
 8019256:	4a5d      	ldr	r2, [pc, #372]	; (80193cc <input_parameter+0xdb4>)
 8019258:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 801925a:	4b54      	ldr	r3, [pc, #336]	; (80193ac <input_parameter+0xd94>)
 801925c:	4a5d      	ldr	r2, [pc, #372]	; (80193d4 <input_parameter+0xdbc>)
 801925e:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 8019260:	4b52      	ldr	r3, [pc, #328]	; (80193ac <input_parameter+0xd94>)
 8019262:	4a55      	ldr	r2, [pc, #340]	; (80193b8 <input_parameter+0xda0>)
 8019264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 8019268:	4b50      	ldr	r3, [pc, #320]	; (80193ac <input_parameter+0xd94>)
 801926a:	4a5b      	ldr	r2, [pc, #364]	; (80193d8 <input_parameter+0xdc0>)
 801926c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 8019270:	4b4e      	ldr	r3, [pc, #312]	; (80193ac <input_parameter+0xd94>)
 8019272:	4a5a      	ldr	r2, [pc, #360]	; (80193dc <input_parameter+0xdc4>)
 8019274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8019278:	4b4c      	ldr	r3, [pc, #304]	; (80193ac <input_parameter+0xd94>)
 801927a:	4a59      	ldr	r2, [pc, #356]	; (80193e0 <input_parameter+0xdc8>)
 801927c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 8019280:	4b4a      	ldr	r3, [pc, #296]	; (80193ac <input_parameter+0xd94>)
 8019282:	4a4d      	ldr	r2, [pc, #308]	; (80193b8 <input_parameter+0xda0>)
 8019284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 8019288:	4b48      	ldr	r3, [pc, #288]	; (80193ac <input_parameter+0xd94>)
 801928a:	4a53      	ldr	r2, [pc, #332]	; (80193d8 <input_parameter+0xdc0>)
 801928c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8019290:	4b46      	ldr	r3, [pc, #280]	; (80193ac <input_parameter+0xd94>)
 8019292:	4a52      	ldr	r2, [pc, #328]	; (80193dc <input_parameter+0xdc4>)
 8019294:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8019298:	4b44      	ldr	r3, [pc, #272]	; (80193ac <input_parameter+0xd94>)
 801929a:	4a52      	ldr	r2, [pc, #328]	; (80193e4 <input_parameter+0xdcc>)
 801929c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 80192a0:	4b42      	ldr	r3, [pc, #264]	; (80193ac <input_parameter+0xd94>)
 80192a2:	4a45      	ldr	r2, [pc, #276]	; (80193b8 <input_parameter+0xda0>)
 80192a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 80192a8:	4b40      	ldr	r3, [pc, #256]	; (80193ac <input_parameter+0xd94>)
 80192aa:	4a4f      	ldr	r2, [pc, #316]	; (80193e8 <input_parameter+0xdd0>)
 80192ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 80192b0:	4b3e      	ldr	r3, [pc, #248]	; (80193ac <input_parameter+0xd94>)
 80192b2:	4a4e      	ldr	r2, [pc, #312]	; (80193ec <input_parameter+0xdd4>)
 80192b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80192b8:	4b3c      	ldr	r3, [pc, #240]	; (80193ac <input_parameter+0xd94>)
 80192ba:	4a4a      	ldr	r2, [pc, #296]	; (80193e4 <input_parameter+0xdcc>)
 80192bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 80192c0:	4b3a      	ldr	r3, [pc, #232]	; (80193ac <input_parameter+0xd94>)
 80192c2:	4a3d      	ldr	r2, [pc, #244]	; (80193b8 <input_parameter+0xda0>)
 80192c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 80192c8:	4b38      	ldr	r3, [pc, #224]	; (80193ac <input_parameter+0xd94>)
 80192ca:	4a47      	ldr	r2, [pc, #284]	; (80193e8 <input_parameter+0xdd0>)
 80192cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 80192d0:	4b36      	ldr	r3, [pc, #216]	; (80193ac <input_parameter+0xd94>)
 80192d2:	4a46      	ldr	r2, [pc, #280]	; (80193ec <input_parameter+0xdd4>)
 80192d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 80192d8:	4b34      	ldr	r3, [pc, #208]	; (80193ac <input_parameter+0xd94>)
 80192da:	4a45      	ldr	r2, [pc, #276]	; (80193f0 <input_parameter+0xdd8>)
 80192dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 80192e0:	4b32      	ldr	r3, [pc, #200]	; (80193ac <input_parameter+0xd94>)
 80192e2:	4a35      	ldr	r2, [pc, #212]	; (80193b8 <input_parameter+0xda0>)
 80192e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 80192e8:	4b30      	ldr	r3, [pc, #192]	; (80193ac <input_parameter+0xd94>)
 80192ea:	4a42      	ldr	r2, [pc, #264]	; (80193f4 <input_parameter+0xddc>)
 80192ec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 80192f0:	4b2e      	ldr	r3, [pc, #184]	; (80193ac <input_parameter+0xd94>)
 80192f2:	4a41      	ldr	r2, [pc, #260]	; (80193f8 <input_parameter+0xde0>)
 80192f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80192f8:	4b2c      	ldr	r3, [pc, #176]	; (80193ac <input_parameter+0xd94>)
 80192fa:	4a40      	ldr	r2, [pc, #256]	; (80193fc <input_parameter+0xde4>)
 80192fc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 8019300:	4b2a      	ldr	r3, [pc, #168]	; (80193ac <input_parameter+0xd94>)
 8019302:	4a2d      	ldr	r2, [pc, #180]	; (80193b8 <input_parameter+0xda0>)
 8019304:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8019308:	4b28      	ldr	r3, [pc, #160]	; (80193ac <input_parameter+0xd94>)
 801930a:	4a3a      	ldr	r2, [pc, #232]	; (80193f4 <input_parameter+0xddc>)
 801930c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 8019310:	4b26      	ldr	r3, [pc, #152]	; (80193ac <input_parameter+0xd94>)
 8019312:	4a30      	ldr	r2, [pc, #192]	; (80193d4 <input_parameter+0xdbc>)
 8019314:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8019318:	4b24      	ldr	r3, [pc, #144]	; (80193ac <input_parameter+0xd94>)
 801931a:	4a39      	ldr	r2, [pc, #228]	; (8019400 <input_parameter+0xde8>)
 801931c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 8019320:	4b22      	ldr	r3, [pc, #136]	; (80193ac <input_parameter+0xd94>)
 8019322:	4a25      	ldr	r2, [pc, #148]	; (80193b8 <input_parameter+0xda0>)
 8019324:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 8019328:	4b20      	ldr	r3, [pc, #128]	; (80193ac <input_parameter+0xd94>)
 801932a:	4a36      	ldr	r2, [pc, #216]	; (8019404 <input_parameter+0xdec>)
 801932c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 8019330:	4b1e      	ldr	r3, [pc, #120]	; (80193ac <input_parameter+0xd94>)
 8019332:	4a35      	ldr	r2, [pc, #212]	; (8019408 <input_parameter+0xdf0>)
 8019334:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8019338:	4b1c      	ldr	r3, [pc, #112]	; (80193ac <input_parameter+0xd94>)
 801933a:	4a30      	ldr	r2, [pc, #192]	; (80193fc <input_parameter+0xde4>)
 801933c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 8019340:	4b1a      	ldr	r3, [pc, #104]	; (80193ac <input_parameter+0xd94>)
 8019342:	4a1d      	ldr	r2, [pc, #116]	; (80193b8 <input_parameter+0xda0>)
 8019344:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 8019348:	4b18      	ldr	r3, [pc, #96]	; (80193ac <input_parameter+0xd94>)
 801934a:	4a2e      	ldr	r2, [pc, #184]	; (8019404 <input_parameter+0xdec>)
 801934c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 8019350:	4b16      	ldr	r3, [pc, #88]	; (80193ac <input_parameter+0xd94>)
 8019352:	4a2d      	ldr	r2, [pc, #180]	; (8019408 <input_parameter+0xdf0>)
 8019354:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 8019358:	4b14      	ldr	r3, [pc, #80]	; (80193ac <input_parameter+0xd94>)
 801935a:	4a2c      	ldr	r2, [pc, #176]	; (801940c <input_parameter+0xdf4>)
 801935c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 8019360:	4b12      	ldr	r3, [pc, #72]	; (80193ac <input_parameter+0xd94>)
 8019362:	4a15      	ldr	r2, [pc, #84]	; (80193b8 <input_parameter+0xda0>)
 8019364:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 8019368:	4b10      	ldr	r3, [pc, #64]	; (80193ac <input_parameter+0xd94>)
 801936a:	4a29      	ldr	r2, [pc, #164]	; (8019410 <input_parameter+0xdf8>)
 801936c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 8019370:	4b0e      	ldr	r3, [pc, #56]	; (80193ac <input_parameter+0xd94>)
 8019372:	4a28      	ldr	r2, [pc, #160]	; (8019414 <input_parameter+0xdfc>)
 8019374:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8019378:	4b0c      	ldr	r3, [pc, #48]	; (80193ac <input_parameter+0xd94>)
 801937a:	4a15      	ldr	r2, [pc, #84]	; (80193d0 <input_parameter+0xdb8>)
 801937c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 8019380:	4b0a      	ldr	r3, [pc, #40]	; (80193ac <input_parameter+0xd94>)
 8019382:	4a0d      	ldr	r2, [pc, #52]	; (80193b8 <input_parameter+0xda0>)
 8019384:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8019388:	4b08      	ldr	r3, [pc, #32]	; (80193ac <input_parameter+0xd94>)
 801938a:	4a21      	ldr	r2, [pc, #132]	; (8019410 <input_parameter+0xdf8>)
 801938c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 8019390:	4b06      	ldr	r3, [pc, #24]	; (80193ac <input_parameter+0xd94>)
 8019392:	4a20      	ldr	r2, [pc, #128]	; (8019414 <input_parameter+0xdfc>)
 8019394:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8019398:	4b04      	ldr	r3, [pc, #16]	; (80193ac <input_parameter+0xd94>)
 801939a:	4a0d      	ldr	r2, [pc, #52]	; (80193d0 <input_parameter+0xdb8>)
 801939c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 80193a0:	bf00      	nop
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	2000fbf4 	.word	0x2000fbf4
 80193b0:	41880000 	.word	0x41880000
 80193b4:	41f80000 	.word	0x41f80000
 80193b8:	44bb8000 	.word	0x44bb8000
 80193bc:	44e4c000 	.word	0x44e4c000
 80193c0:	41700000 	.word	0x41700000
 80193c4:	420c0000 	.word	0x420c0000
 80193c8:	44fa0000 	.word	0x44fa0000
 80193cc:	41200000 	.word	0x41200000
 80193d0:	41a00000 	.word	0x41a00000
 80193d4:	41900000 	.word	0x41900000
 80193d8:	44e74000 	.word	0x44e74000
 80193dc:	41400000 	.word	0x41400000
 80193e0:	42180000 	.word	0x42180000
 80193e4:	42100000 	.word	0x42100000
 80193e8:	45034000 	.word	0x45034000
 80193ec:	41500000 	.word	0x41500000
 80193f0:	42080000 	.word	0x42080000
 80193f4:	44e10000 	.word	0x44e10000
 80193f8:	41a80000 	.word	0x41a80000
 80193fc:	41b00000 	.word	0x41b00000
 8019400:	41c00000 	.word	0x41c00000
 8019404:	45098000 	.word	0x45098000
 8019408:	40e00000 	.word	0x40e00000
 801940c:	41f00000 	.word	0x41f00000
 8019410:	45066000 	.word	0x45066000
 8019414:	40400000 	.word	0x40400000

08019418 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801941c:	4b22      	ldr	r3, [pc, #136]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 801941e:	4a23      	ldr	r2, [pc, #140]	; (80194ac <MX_USART1_UART_Init+0x94>)
 8019420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8019422:	4b21      	ldr	r3, [pc, #132]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8019428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801942a:	4b1f      	ldr	r3, [pc, #124]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 801942c:	2200      	movs	r2, #0
 801942e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8019430:	4b1d      	ldr	r3, [pc, #116]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019432:	2200      	movs	r2, #0
 8019434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8019436:	4b1c      	ldr	r3, [pc, #112]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019438:	2200      	movs	r2, #0
 801943a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801943c:	4b1a      	ldr	r3, [pc, #104]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 801943e:	220c      	movs	r2, #12
 8019440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019442:	4b19      	ldr	r3, [pc, #100]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019444:	2200      	movs	r2, #0
 8019446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8019448:	4b17      	ldr	r3, [pc, #92]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 801944a:	2200      	movs	r2, #0
 801944c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801944e:	4b16      	ldr	r3, [pc, #88]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019450:	2200      	movs	r2, #0
 8019452:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8019454:	4b14      	ldr	r3, [pc, #80]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019456:	2200      	movs	r2, #0
 8019458:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801945a:	4b13      	ldr	r3, [pc, #76]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 801945c:	2200      	movs	r2, #0
 801945e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8019460:	4811      	ldr	r0, [pc, #68]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019462:	f006 fd2d 	bl	801fec0 <HAL_UART_Init>
 8019466:	4603      	mov	r3, r0
 8019468:	2b00      	cmp	r3, #0
 801946a:	d001      	beq.n	8019470 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 801946c:	f7f1 fa1d 	bl	800a8aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8019470:	2100      	movs	r1, #0
 8019472:	480d      	ldr	r0, [pc, #52]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019474:	f007 faf4 	bl	8020a60 <HAL_UARTEx_SetTxFifoThreshold>
 8019478:	4603      	mov	r3, r0
 801947a:	2b00      	cmp	r3, #0
 801947c:	d001      	beq.n	8019482 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801947e:	f7f1 fa14 	bl	800a8aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8019482:	2100      	movs	r1, #0
 8019484:	4808      	ldr	r0, [pc, #32]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019486:	f007 fb29 	bl	8020adc <HAL_UARTEx_SetRxFifoThreshold>
 801948a:	4603      	mov	r3, r0
 801948c:	2b00      	cmp	r3, #0
 801948e:	d001      	beq.n	8019494 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8019490:	f7f1 fa0b 	bl	800a8aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8019494:	4804      	ldr	r0, [pc, #16]	; (80194a8 <MX_USART1_UART_Init+0x90>)
 8019496:	f007 faaa 	bl	80209ee <HAL_UARTEx_DisableFifoMode>
 801949a:	4603      	mov	r3, r0
 801949c:	2b00      	cmp	r3, #0
 801949e:	d001      	beq.n	80194a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80194a0:	f7f1 fa03 	bl	800a8aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80194a4:	bf00      	nop
 80194a6:	bd80      	pop	{r7, pc}
 80194a8:	2000fd3c 	.word	0x2000fd3c
 80194ac:	40013800 	.word	0x40013800

080194b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b09e      	sub	sp, #120	; 0x78
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80194b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80194bc:	2200      	movs	r2, #0
 80194be:	601a      	str	r2, [r3, #0]
 80194c0:	605a      	str	r2, [r3, #4]
 80194c2:	609a      	str	r2, [r3, #8]
 80194c4:	60da      	str	r2, [r3, #12]
 80194c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80194c8:	f107 0314 	add.w	r3, r7, #20
 80194cc:	2250      	movs	r2, #80	; 0x50
 80194ce:	2100      	movs	r1, #0
 80194d0:	4618      	mov	r0, r3
 80194d2:	f007 fbc7 	bl	8020c64 <memset>
  if(uartHandle->Instance==USART1)
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a1f      	ldr	r2, [pc, #124]	; (8019558 <HAL_UART_MspInit+0xa8>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d137      	bne.n	8019550 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80194e0:	2301      	movs	r3, #1
 80194e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80194e4:	2300      	movs	r3, #0
 80194e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80194e8:	f107 0314 	add.w	r3, r7, #20
 80194ec:	4618      	mov	r0, r3
 80194ee:	f004 f891 	bl	801d614 <HAL_RCCEx_PeriphCLKConfig>
 80194f2:	4603      	mov	r3, r0
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d001      	beq.n	80194fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80194f8:	f7f1 f9d7 	bl	800a8aa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80194fc:	4b17      	ldr	r3, [pc, #92]	; (801955c <HAL_UART_MspInit+0xac>)
 80194fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019500:	4a16      	ldr	r2, [pc, #88]	; (801955c <HAL_UART_MspInit+0xac>)
 8019502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019506:	6613      	str	r3, [r2, #96]	; 0x60
 8019508:	4b14      	ldr	r3, [pc, #80]	; (801955c <HAL_UART_MspInit+0xac>)
 801950a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801950c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019510:	613b      	str	r3, [r7, #16]
 8019512:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019514:	4b11      	ldr	r3, [pc, #68]	; (801955c <HAL_UART_MspInit+0xac>)
 8019516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019518:	4a10      	ldr	r2, [pc, #64]	; (801955c <HAL_UART_MspInit+0xac>)
 801951a:	f043 0301 	orr.w	r3, r3, #1
 801951e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019520:	4b0e      	ldr	r3, [pc, #56]	; (801955c <HAL_UART_MspInit+0xac>)
 8019522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019524:	f003 0301 	and.w	r3, r3, #1
 8019528:	60fb      	str	r3, [r7, #12]
 801952a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801952c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8019530:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019532:	2302      	movs	r3, #2
 8019534:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019536:	2300      	movs	r3, #0
 8019538:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801953a:	2300      	movs	r3, #0
 801953c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801953e:	2307      	movs	r3, #7
 8019540:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019542:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019546:	4619      	mov	r1, r3
 8019548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801954c:	f003 f8e4 	bl	801c718 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8019550:	bf00      	nop
 8019552:	3778      	adds	r7, #120	; 0x78
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	40013800 	.word	0x40013800
 801955c:	40021000 	.word	0x40021000

08019560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8019560:	480d      	ldr	r0, [pc, #52]	; (8019598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8019562:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8019564:	480d      	ldr	r0, [pc, #52]	; (801959c <LoopForever+0x6>)
  ldr r1, =_edata
 8019566:	490e      	ldr	r1, [pc, #56]	; (80195a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8019568:	4a0e      	ldr	r2, [pc, #56]	; (80195a4 <LoopForever+0xe>)
  movs r3, #0
 801956a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801956c:	e002      	b.n	8019574 <LoopCopyDataInit>

0801956e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801956e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019572:	3304      	adds	r3, #4

08019574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019578:	d3f9      	bcc.n	801956e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801957a:	4a0b      	ldr	r2, [pc, #44]	; (80195a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 801957c:	4c0b      	ldr	r4, [pc, #44]	; (80195ac <LoopForever+0x16>)
  movs r3, #0
 801957e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019580:	e001      	b.n	8019586 <LoopFillZerobss>

08019582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019584:	3204      	adds	r2, #4

08019586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019588:	d3fb      	bcc.n	8019582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801958a:	f7fe fd7d 	bl	8018088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801958e:	f007 fb37 	bl	8020c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8019592:	f7f1 f88d 	bl	800a6b0 <main>

08019596 <LoopForever>:

LoopForever:
    b LoopForever
 8019596:	e7fe      	b.n	8019596 <LoopForever>
  ldr   r0, =_estack
 8019598:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 801959c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80195a0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80195a4:	08025808 	.word	0x08025808
  ldr r2, =_sbss
 80195a8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80195ac:	2000fde0 	.word	0x2000fde0

080195b0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80195b0:	e7fe      	b.n	80195b0 <ADC3_IRQHandler>
	...

080195b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80195ba:	2300      	movs	r3, #0
 80195bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80195be:	4b0c      	ldr	r3, [pc, #48]	; (80195f0 <HAL_Init+0x3c>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	4a0b      	ldr	r2, [pc, #44]	; (80195f0 <HAL_Init+0x3c>)
 80195c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80195c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80195ca:	2003      	movs	r0, #3
 80195cc:	f002 fb30 	bl	801bc30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80195d0:	2000      	movs	r0, #0
 80195d2:	f000 f80f 	bl	80195f4 <HAL_InitTick>
 80195d6:	4603      	mov	r3, r0
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d002      	beq.n	80195e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80195dc:	2301      	movs	r3, #1
 80195de:	71fb      	strb	r3, [r7, #7]
 80195e0:	e001      	b.n	80195e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80195e2:	f7fe fc05 	bl	8017df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80195e6:	79fb      	ldrb	r3, [r7, #7]

}
 80195e8:	4618      	mov	r0, r3
 80195ea:	3708      	adds	r7, #8
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}
 80195f0:	40022000 	.word	0x40022000

080195f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80195fc:	2300      	movs	r3, #0
 80195fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8019600:	4b16      	ldr	r3, [pc, #88]	; (801965c <HAL_InitTick+0x68>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d022      	beq.n	801964e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8019608:	4b15      	ldr	r3, [pc, #84]	; (8019660 <HAL_InitTick+0x6c>)
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	4b13      	ldr	r3, [pc, #76]	; (801965c <HAL_InitTick+0x68>)
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019614:	fbb1 f3f3 	udiv	r3, r1, r3
 8019618:	fbb2 f3f3 	udiv	r3, r2, r3
 801961c:	4618      	mov	r0, r3
 801961e:	f002 fb3a 	bl	801bc96 <HAL_SYSTICK_Config>
 8019622:	4603      	mov	r3, r0
 8019624:	2b00      	cmp	r3, #0
 8019626:	d10f      	bne.n	8019648 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b0f      	cmp	r3, #15
 801962c:	d809      	bhi.n	8019642 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801962e:	2200      	movs	r2, #0
 8019630:	6879      	ldr	r1, [r7, #4]
 8019632:	f04f 30ff 	mov.w	r0, #4294967295
 8019636:	f002 fb06 	bl	801bc46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801963a:	4a0a      	ldr	r2, [pc, #40]	; (8019664 <HAL_InitTick+0x70>)
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6013      	str	r3, [r2, #0]
 8019640:	e007      	b.n	8019652 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8019642:	2301      	movs	r3, #1
 8019644:	73fb      	strb	r3, [r7, #15]
 8019646:	e004      	b.n	8019652 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8019648:	2301      	movs	r3, #1
 801964a:	73fb      	strb	r3, [r7, #15]
 801964c:	e001      	b.n	8019652 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801964e:	2301      	movs	r3, #1
 8019650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8019652:	7bfb      	ldrb	r3, [r7, #15]
}
 8019654:	4618      	mov	r0, r3
 8019656:	3710      	adds	r7, #16
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	20000008 	.word	0x20000008
 8019660:	20000000 	.word	0x20000000
 8019664:	20000004 	.word	0x20000004

08019668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019668:	b480      	push	{r7}
 801966a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801966c:	4b05      	ldr	r3, [pc, #20]	; (8019684 <HAL_IncTick+0x1c>)
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	4b05      	ldr	r3, [pc, #20]	; (8019688 <HAL_IncTick+0x20>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4413      	add	r3, r2
 8019676:	4a03      	ldr	r2, [pc, #12]	; (8019684 <HAL_IncTick+0x1c>)
 8019678:	6013      	str	r3, [r2, #0]
}
 801967a:	bf00      	nop
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr
 8019684:	2000fdcc 	.word	0x2000fdcc
 8019688:	20000008 	.word	0x20000008

0801968c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801968c:	b480      	push	{r7}
 801968e:	af00      	add	r7, sp, #0
  return uwTick;
 8019690:	4b03      	ldr	r3, [pc, #12]	; (80196a0 <HAL_GetTick+0x14>)
 8019692:	681b      	ldr	r3, [r3, #0]
}
 8019694:	4618      	mov	r0, r3
 8019696:	46bd      	mov	sp, r7
 8019698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969c:	4770      	bx	lr
 801969e:	bf00      	nop
 80196a0:	2000fdcc 	.word	0x2000fdcc

080196a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b084      	sub	sp, #16
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80196ac:	f7ff ffee 	bl	801968c <HAL_GetTick>
 80196b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196bc:	d004      	beq.n	80196c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80196be:	4b09      	ldr	r3, [pc, #36]	; (80196e4 <HAL_Delay+0x40>)
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	68fa      	ldr	r2, [r7, #12]
 80196c4:	4413      	add	r3, r2
 80196c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80196c8:	bf00      	nop
 80196ca:	f7ff ffdf 	bl	801968c <HAL_GetTick>
 80196ce:	4602      	mov	r2, r0
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	1ad3      	subs	r3, r2, r3
 80196d4:	68fa      	ldr	r2, [r7, #12]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d8f7      	bhi.n	80196ca <HAL_Delay+0x26>
  {
  }
}
 80196da:	bf00      	nop
 80196dc:	bf00      	nop
 80196de:	3710      	adds	r7, #16
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	20000008 	.word	0x20000008

080196e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80196e8:	b480      	push	{r7}
 80196ea:	b083      	sub	sp, #12
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
 80196f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	689b      	ldr	r3, [r3, #8]
 80196f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	431a      	orrs	r2, r3
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	609a      	str	r2, [r3, #8]
}
 8019702:	bf00      	nop
 8019704:	370c      	adds	r7, #12
 8019706:	46bd      	mov	sp, r7
 8019708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970c:	4770      	bx	lr

0801970e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801970e:	b480      	push	{r7}
 8019710:	b083      	sub	sp, #12
 8019712:	af00      	add	r7, sp, #0
 8019714:	6078      	str	r0, [r7, #4]
 8019716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	689b      	ldr	r3, [r3, #8]
 801971c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	431a      	orrs	r2, r3
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	609a      	str	r2, [r3, #8]
}
 8019728:	bf00      	nop
 801972a:	370c      	adds	r7, #12
 801972c:	46bd      	mov	sp, r7
 801972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019732:	4770      	bx	lr

08019734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019734:	b480      	push	{r7}
 8019736:	b083      	sub	sp, #12
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	689b      	ldr	r3, [r3, #8]
 8019740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8019744:	4618      	mov	r0, r3
 8019746:	370c      	adds	r7, #12
 8019748:	46bd      	mov	sp, r7
 801974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974e:	4770      	bx	lr

08019750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8019750:	b480      	push	{r7}
 8019752:	b087      	sub	sp, #28
 8019754:	af00      	add	r7, sp, #0
 8019756:	60f8      	str	r0, [r7, #12]
 8019758:	60b9      	str	r1, [r7, #8]
 801975a:	607a      	str	r2, [r7, #4]
 801975c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	3360      	adds	r3, #96	; 0x60
 8019762:	461a      	mov	r2, r3
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	4413      	add	r3, r2
 801976a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801976c:	697b      	ldr	r3, [r7, #20]
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	4b08      	ldr	r3, [pc, #32]	; (8019794 <LL_ADC_SetOffset+0x44>)
 8019772:	4013      	ands	r3, r2
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801977a:	683a      	ldr	r2, [r7, #0]
 801977c:	430a      	orrs	r2, r1
 801977e:	4313      	orrs	r3, r2
 8019780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8019788:	bf00      	nop
 801978a:	371c      	adds	r7, #28
 801978c:	46bd      	mov	sp, r7
 801978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019792:	4770      	bx	lr
 8019794:	03fff000 	.word	0x03fff000

08019798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8019798:	b480      	push	{r7}
 801979a:	b085      	sub	sp, #20
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	3360      	adds	r3, #96	; 0x60
 80197a6:	461a      	mov	r2, r3
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	4413      	add	r3, r2
 80197ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80197b8:	4618      	mov	r0, r3
 80197ba:	3714      	adds	r7, #20
 80197bc:	46bd      	mov	sp, r7
 80197be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c2:	4770      	bx	lr

080197c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80197c4:	b480      	push	{r7}
 80197c6:	b087      	sub	sp, #28
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	60f8      	str	r0, [r7, #12]
 80197cc:	60b9      	str	r1, [r7, #8]
 80197ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	3360      	adds	r3, #96	; 0x60
 80197d4:	461a      	mov	r2, r3
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	4413      	add	r3, r2
 80197dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80197de:	697b      	ldr	r3, [r7, #20]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	431a      	orrs	r2, r3
 80197ea:	697b      	ldr	r3, [r7, #20]
 80197ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80197ee:	bf00      	nop
 80197f0:	371c      	adds	r7, #28
 80197f2:	46bd      	mov	sp, r7
 80197f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f8:	4770      	bx	lr

080197fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80197fa:	b480      	push	{r7}
 80197fc:	b087      	sub	sp, #28
 80197fe:	af00      	add	r7, sp, #0
 8019800:	60f8      	str	r0, [r7, #12]
 8019802:	60b9      	str	r1, [r7, #8]
 8019804:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	3360      	adds	r3, #96	; 0x60
 801980a:	461a      	mov	r2, r3
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	009b      	lsls	r3, r3, #2
 8019810:	4413      	add	r3, r2
 8019812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019814:	697b      	ldr	r3, [r7, #20]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	431a      	orrs	r2, r3
 8019820:	697b      	ldr	r3, [r7, #20]
 8019822:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8019824:	bf00      	nop
 8019826:	371c      	adds	r7, #28
 8019828:	46bd      	mov	sp, r7
 801982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982e:	4770      	bx	lr

08019830 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8019830:	b480      	push	{r7}
 8019832:	b087      	sub	sp, #28
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	3360      	adds	r3, #96	; 0x60
 8019840:	461a      	mov	r2, r3
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	4413      	add	r3, r2
 8019848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801984a:	697b      	ldr	r3, [r7, #20]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	431a      	orrs	r2, r3
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 801985a:	bf00      	nop
 801985c:	371c      	adds	r7, #28
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr

08019866 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8019866:	b480      	push	{r7}
 8019868:	b083      	sub	sp, #12
 801986a:	af00      	add	r7, sp, #0
 801986c:	6078      	str	r0, [r7, #4]
 801986e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	695b      	ldr	r3, [r3, #20]
 8019874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	431a      	orrs	r2, r3
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	615a      	str	r2, [r3, #20]
}
 8019880:	bf00      	nop
 8019882:	370c      	adds	r7, #12
 8019884:	46bd      	mov	sp, r7
 8019886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988a:	4770      	bx	lr

0801988c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801988c:	b480      	push	{r7}
 801988e:	b083      	sub	sp, #12
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	68db      	ldr	r3, [r3, #12]
 8019898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801989c:	2b00      	cmp	r3, #0
 801989e:	d101      	bne.n	80198a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80198a0:	2301      	movs	r3, #1
 80198a2:	e000      	b.n	80198a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80198a4:	2300      	movs	r3, #0
}
 80198a6:	4618      	mov	r0, r3
 80198a8:	370c      	adds	r7, #12
 80198aa:	46bd      	mov	sp, r7
 80198ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b0:	4770      	bx	lr

080198b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80198b2:	b480      	push	{r7}
 80198b4:	b087      	sub	sp, #28
 80198b6:	af00      	add	r7, sp, #0
 80198b8:	60f8      	str	r0, [r7, #12]
 80198ba:	60b9      	str	r1, [r7, #8]
 80198bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	3330      	adds	r3, #48	; 0x30
 80198c2:	461a      	mov	r2, r3
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	0a1b      	lsrs	r3, r3, #8
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	f003 030c 	and.w	r3, r3, #12
 80198ce:	4413      	add	r3, r2
 80198d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	68bb      	ldr	r3, [r7, #8]
 80198d8:	f003 031f 	and.w	r3, r3, #31
 80198dc:	211f      	movs	r1, #31
 80198de:	fa01 f303 	lsl.w	r3, r1, r3
 80198e2:	43db      	mvns	r3, r3
 80198e4:	401a      	ands	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	0e9b      	lsrs	r3, r3, #26
 80198ea:	f003 011f 	and.w	r1, r3, #31
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	f003 031f 	and.w	r3, r3, #31
 80198f4:	fa01 f303 	lsl.w	r3, r1, r3
 80198f8:	431a      	orrs	r2, r3
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80198fe:	bf00      	nop
 8019900:	371c      	adds	r7, #28
 8019902:	46bd      	mov	sp, r7
 8019904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019908:	4770      	bx	lr

0801990a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801990a:	b480      	push	{r7}
 801990c:	b083      	sub	sp, #12
 801990e:	af00      	add	r7, sp, #0
 8019910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019916:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801991a:	2b00      	cmp	r3, #0
 801991c:	d101      	bne.n	8019922 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801991e:	2301      	movs	r3, #1
 8019920:	e000      	b.n	8019924 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8019922:	2300      	movs	r3, #0
}
 8019924:	4618      	mov	r0, r3
 8019926:	370c      	adds	r7, #12
 8019928:	46bd      	mov	sp, r7
 801992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801992e:	4770      	bx	lr

08019930 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8019930:	b480      	push	{r7}
 8019932:	b087      	sub	sp, #28
 8019934:	af00      	add	r7, sp, #0
 8019936:	60f8      	str	r0, [r7, #12]
 8019938:	60b9      	str	r1, [r7, #8]
 801993a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	3314      	adds	r3, #20
 8019940:	461a      	mov	r2, r3
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	0e5b      	lsrs	r3, r3, #25
 8019946:	009b      	lsls	r3, r3, #2
 8019948:	f003 0304 	and.w	r3, r3, #4
 801994c:	4413      	add	r3, r2
 801994e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019950:	697b      	ldr	r3, [r7, #20]
 8019952:	681a      	ldr	r2, [r3, #0]
 8019954:	68bb      	ldr	r3, [r7, #8]
 8019956:	0d1b      	lsrs	r3, r3, #20
 8019958:	f003 031f 	and.w	r3, r3, #31
 801995c:	2107      	movs	r1, #7
 801995e:	fa01 f303 	lsl.w	r3, r1, r3
 8019962:	43db      	mvns	r3, r3
 8019964:	401a      	ands	r2, r3
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	0d1b      	lsrs	r3, r3, #20
 801996a:	f003 031f 	and.w	r3, r3, #31
 801996e:	6879      	ldr	r1, [r7, #4]
 8019970:	fa01 f303 	lsl.w	r3, r1, r3
 8019974:	431a      	orrs	r2, r3
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801997a:	bf00      	nop
 801997c:	371c      	adds	r7, #28
 801997e:	46bd      	mov	sp, r7
 8019980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019984:	4770      	bx	lr
	...

08019988 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8019988:	b480      	push	{r7}
 801998a:	b085      	sub	sp, #20
 801998c:	af00      	add	r7, sp, #0
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	60b9      	str	r1, [r7, #8]
 8019992:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	4a0f      	ldr	r2, [pc, #60]	; (80199d4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8019998:	4293      	cmp	r3, r2
 801999a:	d10a      	bne.n	80199b2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80199a2:	68bb      	ldr	r3, [r7, #8]
 80199a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80199a8:	431a      	orrs	r2, r3
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80199b0:	e00a      	b.n	80199c8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80199be:	43db      	mvns	r3, r3
 80199c0:	401a      	ands	r2, r3
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80199c8:	bf00      	nop
 80199ca:	3714      	adds	r7, #20
 80199cc:	46bd      	mov	sp, r7
 80199ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d2:	4770      	bx	lr
 80199d4:	407f0000 	.word	0x407f0000

080199d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80199d8:	b480      	push	{r7}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	689b      	ldr	r3, [r3, #8]
 80199e4:	f003 031f 	and.w	r3, r3, #31
}
 80199e8:	4618      	mov	r0, r3
 80199ea:	370c      	adds	r7, #12
 80199ec:	46bd      	mov	sp, r7
 80199ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f2:	4770      	bx	lr

080199f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80199f4:	b480      	push	{r7}
 80199f6:	b083      	sub	sp, #12
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	689b      	ldr	r3, [r3, #8]
 8019a00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	370c      	adds	r7, #12
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0e:	4770      	bx	lr

08019a10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8019a10:	b480      	push	{r7}
 8019a12:	b083      	sub	sp, #12
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	689b      	ldr	r3, [r3, #8]
 8019a1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8019a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019a24:	687a      	ldr	r2, [r7, #4]
 8019a26:	6093      	str	r3, [r2, #8]
}
 8019a28:	bf00      	nop
 8019a2a:	370c      	adds	r7, #12
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a32:	4770      	bx	lr

08019a34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8019a34:	b480      	push	{r7}
 8019a36:	b083      	sub	sp, #12
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	689b      	ldr	r3, [r3, #8]
 8019a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019a48:	d101      	bne.n	8019a4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	e000      	b.n	8019a50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8019a4e:	2300      	movs	r3, #0
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	370c      	adds	r7, #12
 8019a54:	46bd      	mov	sp, r7
 8019a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5a:	4770      	bx	lr

08019a5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	b083      	sub	sp, #12
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	689b      	ldr	r3, [r3, #8]
 8019a68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8019a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019a70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8019a78:	bf00      	nop
 8019a7a:	370c      	adds	r7, #12
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a82:	4770      	bx	lr

08019a84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8019a84:	b480      	push	{r7}
 8019a86:	b083      	sub	sp, #12
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	689b      	ldr	r3, [r3, #8]
 8019a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019a98:	d101      	bne.n	8019a9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	e000      	b.n	8019aa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8019a9e:	2300      	movs	r3, #0
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	370c      	adds	r7, #12
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aaa:	4770      	bx	lr

08019aac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8019aac:	b480      	push	{r7}
 8019aae:	b083      	sub	sp, #12
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ac0:	f043 0201 	orr.w	r2, r3, #1
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8019ac8:	bf00      	nop
 8019aca:	370c      	adds	r7, #12
 8019acc:	46bd      	mov	sp, r7
 8019ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad2:	4770      	bx	lr

08019ad4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b083      	sub	sp, #12
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	689b      	ldr	r3, [r3, #8]
 8019ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ae8:	f043 0202 	orr.w	r2, r3, #2
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8019af0:	bf00      	nop
 8019af2:	370c      	adds	r7, #12
 8019af4:	46bd      	mov	sp, r7
 8019af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afa:	4770      	bx	lr

08019afc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8019afc:	b480      	push	{r7}
 8019afe:	b083      	sub	sp, #12
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	689b      	ldr	r3, [r3, #8]
 8019b08:	f003 0301 	and.w	r3, r3, #1
 8019b0c:	2b01      	cmp	r3, #1
 8019b0e:	d101      	bne.n	8019b14 <LL_ADC_IsEnabled+0x18>
 8019b10:	2301      	movs	r3, #1
 8019b12:	e000      	b.n	8019b16 <LL_ADC_IsEnabled+0x1a>
 8019b14:	2300      	movs	r3, #0
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	370c      	adds	r7, #12
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b20:	4770      	bx	lr

08019b22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8019b22:	b480      	push	{r7}
 8019b24:	b083      	sub	sp, #12
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	689b      	ldr	r3, [r3, #8]
 8019b2e:	f003 0302 	and.w	r3, r3, #2
 8019b32:	2b02      	cmp	r3, #2
 8019b34:	d101      	bne.n	8019b3a <LL_ADC_IsDisableOngoing+0x18>
 8019b36:	2301      	movs	r3, #1
 8019b38:	e000      	b.n	8019b3c <LL_ADC_IsDisableOngoing+0x1a>
 8019b3a:	2300      	movs	r3, #0
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	370c      	adds	r7, #12
 8019b40:	46bd      	mov	sp, r7
 8019b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b46:	4770      	bx	lr

08019b48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8019b48:	b480      	push	{r7}
 8019b4a:	b083      	sub	sp, #12
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	689b      	ldr	r3, [r3, #8]
 8019b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b5c:	f043 0204 	orr.w	r2, r3, #4
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8019b64:	bf00      	nop
 8019b66:	370c      	adds	r7, #12
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr

08019b70 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8019b70:	b480      	push	{r7}
 8019b72:	b083      	sub	sp, #12
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	689b      	ldr	r3, [r3, #8]
 8019b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b84:	f043 0210 	orr.w	r2, r3, #16
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019b8c:	bf00      	nop
 8019b8e:	370c      	adds	r7, #12
 8019b90:	46bd      	mov	sp, r7
 8019b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b96:	4770      	bx	lr

08019b98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019b98:	b480      	push	{r7}
 8019b9a:	b083      	sub	sp, #12
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	689b      	ldr	r3, [r3, #8]
 8019ba4:	f003 0304 	and.w	r3, r3, #4
 8019ba8:	2b04      	cmp	r3, #4
 8019baa:	d101      	bne.n	8019bb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8019bac:	2301      	movs	r3, #1
 8019bae:	e000      	b.n	8019bb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019bb0:	2300      	movs	r3, #0
}
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	370c      	adds	r7, #12
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbc:	4770      	bx	lr

08019bbe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8019bbe:	b480      	push	{r7}
 8019bc0:	b083      	sub	sp, #12
 8019bc2:	af00      	add	r7, sp, #0
 8019bc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	689b      	ldr	r3, [r3, #8]
 8019bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019bce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019bd2:	f043 0220 	orr.w	r2, r3, #32
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8019bda:	bf00      	nop
 8019bdc:	370c      	adds	r7, #12
 8019bde:	46bd      	mov	sp, r7
 8019be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be4:	4770      	bx	lr

08019be6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019be6:	b480      	push	{r7}
 8019be8:	b083      	sub	sp, #12
 8019bea:	af00      	add	r7, sp, #0
 8019bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	689b      	ldr	r3, [r3, #8]
 8019bf2:	f003 0308 	and.w	r3, r3, #8
 8019bf6:	2b08      	cmp	r3, #8
 8019bf8:	d101      	bne.n	8019bfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e000      	b.n	8019c00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019bfe:	2300      	movs	r3, #0
}
 8019c00:	4618      	mov	r0, r3
 8019c02:	370c      	adds	r7, #12
 8019c04:	46bd      	mov	sp, r7
 8019c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0a:	4770      	bx	lr

08019c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019c0c:	b590      	push	{r4, r7, lr}
 8019c0e:	b089      	sub	sp, #36	; 0x24
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019c14:	2300      	movs	r3, #0
 8019c16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d101      	bne.n	8019c26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8019c22:	2301      	movs	r3, #1
 8019c24:	e1a1      	b.n	8019f6a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	695b      	ldr	r3, [r3, #20]
 8019c2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d109      	bne.n	8019c48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8019c34:	6878      	ldr	r0, [r7, #4]
 8019c36:	f7ef f8df 	bl	8008df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2200      	movs	r2, #0
 8019c44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7ff fef1 	bl	8019a34 <LL_ADC_IsDeepPowerDownEnabled>
 8019c52:	4603      	mov	r3, r0
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d004      	beq.n	8019c62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7ff fed7 	bl	8019a10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7ff ff0c 	bl	8019a84 <LL_ADC_IsInternalRegulatorEnabled>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d115      	bne.n	8019c9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7ff fef0 	bl	8019a5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019c7c:	4b9a      	ldr	r3, [pc, #616]	; (8019ee8 <HAL_ADC_Init+0x2dc>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	099b      	lsrs	r3, r3, #6
 8019c82:	4a9a      	ldr	r2, [pc, #616]	; (8019eec <HAL_ADC_Init+0x2e0>)
 8019c84:	fba2 2303 	umull	r2, r3, r2, r3
 8019c88:	099b      	lsrs	r3, r3, #6
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	005b      	lsls	r3, r3, #1
 8019c8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019c90:	e002      	b.n	8019c98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	3b01      	subs	r3, #1
 8019c96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d1f9      	bne.n	8019c92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7ff feee 	bl	8019a84 <LL_ADC_IsInternalRegulatorEnabled>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d10d      	bne.n	8019cca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cb2:	f043 0210 	orr.w	r2, r3, #16
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019cbe:	f043 0201 	orr.w	r2, r3, #1
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7ff ff62 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 8019cd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cda:	f003 0310 	and.w	r3, r3, #16
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	f040 813a 	bne.w	8019f58 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	f040 8136 	bne.w	8019f58 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cf0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8019cf4:	f043 0202 	orr.w	r2, r3, #2
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7ff fefb 	bl	8019afc <LL_ADC_IsEnabled>
 8019d06:	4603      	mov	r3, r0
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d137      	bne.n	8019d7c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d14:	d004      	beq.n	8019d20 <HAL_ADC_Init+0x114>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4a75      	ldr	r2, [pc, #468]	; (8019ef0 <HAL_ADC_Init+0x2e4>)
 8019d1c:	4293      	cmp	r3, r2
 8019d1e:	d10f      	bne.n	8019d40 <HAL_ADC_Init+0x134>
 8019d20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019d24:	f7ff feea 	bl	8019afc <LL_ADC_IsEnabled>
 8019d28:	4604      	mov	r4, r0
 8019d2a:	4871      	ldr	r0, [pc, #452]	; (8019ef0 <HAL_ADC_Init+0x2e4>)
 8019d2c:	f7ff fee6 	bl	8019afc <LL_ADC_IsEnabled>
 8019d30:	4603      	mov	r3, r0
 8019d32:	4323      	orrs	r3, r4
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	bf0c      	ite	eq
 8019d38:	2301      	moveq	r3, #1
 8019d3a:	2300      	movne	r3, #0
 8019d3c:	b2db      	uxtb	r3, r3
 8019d3e:	e008      	b.n	8019d52 <HAL_ADC_Init+0x146>
 8019d40:	486c      	ldr	r0, [pc, #432]	; (8019ef4 <HAL_ADC_Init+0x2e8>)
 8019d42:	f7ff fedb 	bl	8019afc <LL_ADC_IsEnabled>
 8019d46:	4603      	mov	r3, r0
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	bf0c      	ite	eq
 8019d4c:	2301      	moveq	r3, #1
 8019d4e:	2300      	movne	r3, #0
 8019d50:	b2db      	uxtb	r3, r3
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d012      	beq.n	8019d7c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d5e:	d004      	beq.n	8019d6a <HAL_ADC_Init+0x15e>
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	4a62      	ldr	r2, [pc, #392]	; (8019ef0 <HAL_ADC_Init+0x2e4>)
 8019d66:	4293      	cmp	r3, r2
 8019d68:	d101      	bne.n	8019d6e <HAL_ADC_Init+0x162>
 8019d6a:	4a63      	ldr	r2, [pc, #396]	; (8019ef8 <HAL_ADC_Init+0x2ec>)
 8019d6c:	e000      	b.n	8019d70 <HAL_ADC_Init+0x164>
 8019d6e:	4a63      	ldr	r2, [pc, #396]	; (8019efc <HAL_ADC_Init+0x2f0>)
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	4619      	mov	r1, r3
 8019d76:	4610      	mov	r0, r2
 8019d78:	f7ff fcb6 	bl	80196e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	7f5b      	ldrb	r3, [r3, #29]
 8019d80:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d86:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019d8c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8019d92:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019d9a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d9c:	4313      	orrs	r3, r2
 8019d9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019da6:	2b01      	cmp	r3, #1
 8019da8:	d106      	bne.n	8019db8 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dae:	3b01      	subs	r3, #1
 8019db0:	045b      	lsls	r3, r3, #17
 8019db2:	69ba      	ldr	r2, [r7, #24]
 8019db4:	4313      	orrs	r3, r2
 8019db6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d009      	beq.n	8019dd4 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dc4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019dcc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019dce:	69ba      	ldr	r2, [r7, #24]
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	68da      	ldr	r2, [r3, #12]
 8019dda:	4b49      	ldr	r3, [pc, #292]	; (8019f00 <HAL_ADC_Init+0x2f4>)
 8019ddc:	4013      	ands	r3, r2
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	6812      	ldr	r2, [r2, #0]
 8019de2:	69b9      	ldr	r1, [r7, #24]
 8019de4:	430b      	orrs	r3, r1
 8019de6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	691b      	ldr	r3, [r3, #16]
 8019dee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	430a      	orrs	r2, r1
 8019dfc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	4618      	mov	r0, r3
 8019e04:	f7ff fec8 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 8019e08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7ff fee9 	bl	8019be6 <LL_ADC_INJ_IsConversionOngoing>
 8019e14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019e16:	693b      	ldr	r3, [r7, #16]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d17b      	bne.n	8019f14 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d178      	bne.n	8019f14 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019e26:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019e2e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019e30:	4313      	orrs	r3, r2
 8019e32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	68db      	ldr	r3, [r3, #12]
 8019e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019e3e:	f023 0302 	bic.w	r3, r3, #2
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	6812      	ldr	r2, [r2, #0]
 8019e46:	69b9      	ldr	r1, [r7, #24]
 8019e48:	430b      	orrs	r3, r1
 8019e4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	691b      	ldr	r3, [r3, #16]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d017      	beq.n	8019e84 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	691a      	ldr	r2, [r3, #16]
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019e62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019e74:	687a      	ldr	r2, [r7, #4]
 8019e76:	6911      	ldr	r1, [r2, #16]
 8019e78:	687a      	ldr	r2, [r7, #4]
 8019e7a:	6812      	ldr	r2, [r2, #0]
 8019e7c:	430b      	orrs	r3, r1
 8019e7e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8019e82:	e013      	b.n	8019eac <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	691a      	ldr	r2, [r3, #16]
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8019e92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e9c:	687a      	ldr	r2, [r7, #4]
 8019e9e:	6812      	ldr	r2, [r2, #0]
 8019ea0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ea8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019eb2:	2b01      	cmp	r3, #1
 8019eb4:	d126      	bne.n	8019f04 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	691b      	ldr	r3, [r3, #16]
 8019ebc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019ec0:	f023 0304 	bic.w	r3, r3, #4
 8019ec4:	687a      	ldr	r2, [r7, #4]
 8019ec6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019ecc:	4311      	orrs	r1, r2
 8019ece:	687a      	ldr	r2, [r7, #4]
 8019ed0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019ed2:	4311      	orrs	r1, r2
 8019ed4:	687a      	ldr	r2, [r7, #4]
 8019ed6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019ed8:	430a      	orrs	r2, r1
 8019eda:	431a      	orrs	r2, r3
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f042 0201 	orr.w	r2, r2, #1
 8019ee4:	611a      	str	r2, [r3, #16]
 8019ee6:	e015      	b.n	8019f14 <HAL_ADC_Init+0x308>
 8019ee8:	20000000 	.word	0x20000000
 8019eec:	053e2d63 	.word	0x053e2d63
 8019ef0:	50000100 	.word	0x50000100
 8019ef4:	50000400 	.word	0x50000400
 8019ef8:	50000300 	.word	0x50000300
 8019efc:	50000700 	.word	0x50000700
 8019f00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	691a      	ldr	r2, [r3, #16]
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	f022 0201 	bic.w	r2, r2, #1
 8019f12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	695b      	ldr	r3, [r3, #20]
 8019f18:	2b01      	cmp	r3, #1
 8019f1a:	d10c      	bne.n	8019f36 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f22:	f023 010f 	bic.w	r1, r3, #15
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6a1b      	ldr	r3, [r3, #32]
 8019f2a:	1e5a      	subs	r2, r3, #1
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	430a      	orrs	r2, r1
 8019f32:	631a      	str	r2, [r3, #48]	; 0x30
 8019f34:	e007      	b.n	8019f46 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	f022 020f 	bic.w	r2, r2, #15
 8019f44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f4a:	f023 0303 	bic.w	r3, r3, #3
 8019f4e:	f043 0201 	orr.w	r2, r3, #1
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	65da      	str	r2, [r3, #92]	; 0x5c
 8019f56:	e007      	b.n	8019f68 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f5c:	f043 0210 	orr.w	r2, r3, #16
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019f64:	2301      	movs	r3, #1
 8019f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8019f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	3724      	adds	r7, #36	; 0x24
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bd90      	pop	{r4, r7, pc}
 8019f72:	bf00      	nop

08019f74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b086      	sub	sp, #24
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f84:	d004      	beq.n	8019f90 <HAL_ADC_Start+0x1c>
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	4a5c      	ldr	r2, [pc, #368]	; (801a0fc <HAL_ADC_Start+0x188>)
 8019f8c:	4293      	cmp	r3, r2
 8019f8e:	d101      	bne.n	8019f94 <HAL_ADC_Start+0x20>
 8019f90:	4b5b      	ldr	r3, [pc, #364]	; (801a100 <HAL_ADC_Start+0x18c>)
 8019f92:	e000      	b.n	8019f96 <HAL_ADC_Start+0x22>
 8019f94:	4b5b      	ldr	r3, [pc, #364]	; (801a104 <HAL_ADC_Start+0x190>)
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7ff fd1e 	bl	80199d8 <LL_ADC_GetMultimode>
 8019f9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7ff fdf8 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	f040 809f 	bne.w	801a0ee <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019fb6:	2b01      	cmp	r3, #1
 8019fb8:	d101      	bne.n	8019fbe <HAL_ADC_Start+0x4a>
 8019fba:	2302      	movs	r3, #2
 8019fbc:	e09a      	b.n	801a0f4 <HAL_ADC_Start+0x180>
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	2201      	movs	r2, #1
 8019fc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	f001 fa3e 	bl	801b448 <ADC_Enable>
 8019fcc:	4603      	mov	r3, r0
 8019fce:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019fd0:	7dfb      	ldrb	r3, [r7, #23]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	f040 8086 	bne.w	801a0e4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019fe0:	f023 0301 	bic.w	r3, r3, #1
 8019fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	4a42      	ldr	r2, [pc, #264]	; (801a0fc <HAL_ADC_Start+0x188>)
 8019ff2:	4293      	cmp	r3, r2
 8019ff4:	d002      	beq.n	8019ffc <HAL_ADC_Start+0x88>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	e001      	b.n	801a000 <HAL_ADC_Start+0x8c>
 8019ffc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a000:	687a      	ldr	r2, [r7, #4]
 801a002:	6812      	ldr	r2, [r2, #0]
 801a004:	4293      	cmp	r3, r2
 801a006:	d002      	beq.n	801a00e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a008:	693b      	ldr	r3, [r7, #16]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d105      	bne.n	801a01a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a012:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a01e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a026:	d106      	bne.n	801a036 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a02c:	f023 0206 	bic.w	r2, r3, #6
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	661a      	str	r2, [r3, #96]	; 0x60
 801a034:	e002      	b.n	801a03c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	2200      	movs	r2, #0
 801a03a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	221c      	movs	r2, #28
 801a042:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2200      	movs	r2, #0
 801a048:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	4a2a      	ldr	r2, [pc, #168]	; (801a0fc <HAL_ADC_Start+0x188>)
 801a052:	4293      	cmp	r3, r2
 801a054:	d002      	beq.n	801a05c <HAL_ADC_Start+0xe8>
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	e001      	b.n	801a060 <HAL_ADC_Start+0xec>
 801a05c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a060:	687a      	ldr	r2, [r7, #4]
 801a062:	6812      	ldr	r2, [r2, #0]
 801a064:	4293      	cmp	r3, r2
 801a066:	d008      	beq.n	801a07a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d005      	beq.n	801a07a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	2b05      	cmp	r3, #5
 801a072:	d002      	beq.n	801a07a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	2b09      	cmp	r3, #9
 801a078:	d114      	bne.n	801a0a4 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	68db      	ldr	r3, [r3, #12]
 801a080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a084:	2b00      	cmp	r3, #0
 801a086:	d007      	beq.n	801a098 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a08c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a090:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7ff fd53 	bl	8019b48 <LL_ADC_REG_StartConversion>
 801a0a2:	e026      	b.n	801a0f2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	4a11      	ldr	r2, [pc, #68]	; (801a0fc <HAL_ADC_Start+0x188>)
 801a0b6:	4293      	cmp	r3, r2
 801a0b8:	d002      	beq.n	801a0c0 <HAL_ADC_Start+0x14c>
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	e001      	b.n	801a0c4 <HAL_ADC_Start+0x150>
 801a0c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a0c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	68db      	ldr	r3, [r3, #12]
 801a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d00f      	beq.n	801a0f2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a0da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	65da      	str	r2, [r3, #92]	; 0x5c
 801a0e2:	e006      	b.n	801a0f2 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a0ec:	e001      	b.n	801a0f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a0ee:	2302      	movs	r3, #2
 801a0f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3718      	adds	r7, #24
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}
 801a0fc:	50000100 	.word	0x50000100
 801a100:	50000300 	.word	0x50000300
 801a104:	50000700 	.word	0x50000700

0801a108 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a116:	2b01      	cmp	r3, #1
 801a118:	d101      	bne.n	801a11e <HAL_ADC_Stop+0x16>
 801a11a:	2302      	movs	r3, #2
 801a11c:	e023      	b.n	801a166 <HAL_ADC_Stop+0x5e>
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2201      	movs	r2, #1
 801a122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a126:	2103      	movs	r1, #3
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f001 f8d1 	bl	801b2d0 <ADC_ConversionStop>
 801a12e:	4603      	mov	r3, r0
 801a130:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a132:	7bfb      	ldrb	r3, [r7, #15]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d111      	bne.n	801a15c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f001 f9e7 	bl	801b50c <ADC_Disable>
 801a13e:	4603      	mov	r3, r0
 801a140:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a142:	7bfb      	ldrb	r3, [r7, #15]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d109      	bne.n	801a15c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a14c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a150:	f023 0301 	bic.w	r3, r3, #1
 801a154:	f043 0201 	orr.w	r2, r3, #1
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	2200      	movs	r2, #0
 801a160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a164:	7bfb      	ldrb	r3, [r7, #15]
}
 801a166:	4618      	mov	r0, r3
 801a168:	3710      	adds	r7, #16
 801a16a:	46bd      	mov	sp, r7
 801a16c:	bd80      	pop	{r7, pc}
	...

0801a170 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801a170:	b580      	push	{r7, lr}
 801a172:	b088      	sub	sp, #32
 801a174:	af00      	add	r7, sp, #0
 801a176:	6078      	str	r0, [r7, #4]
 801a178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a182:	d004      	beq.n	801a18e <HAL_ADC_PollForConversion+0x1e>
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	4a70      	ldr	r2, [pc, #448]	; (801a34c <HAL_ADC_PollForConversion+0x1dc>)
 801a18a:	4293      	cmp	r3, r2
 801a18c:	d101      	bne.n	801a192 <HAL_ADC_PollForConversion+0x22>
 801a18e:	4b70      	ldr	r3, [pc, #448]	; (801a350 <HAL_ADC_PollForConversion+0x1e0>)
 801a190:	e000      	b.n	801a194 <HAL_ADC_PollForConversion+0x24>
 801a192:	4b70      	ldr	r3, [pc, #448]	; (801a354 <HAL_ADC_PollForConversion+0x1e4>)
 801a194:	4618      	mov	r0, r3
 801a196:	f7ff fc1f 	bl	80199d8 <LL_ADC_GetMultimode>
 801a19a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	699b      	ldr	r3, [r3, #24]
 801a1a0:	2b08      	cmp	r3, #8
 801a1a2:	d102      	bne.n	801a1aa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801a1a4:	2308      	movs	r3, #8
 801a1a6:	61fb      	str	r3, [r7, #28]
 801a1a8:	e037      	b.n	801a21a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a1aa:	697b      	ldr	r3, [r7, #20]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d005      	beq.n	801a1bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a1b0:	697b      	ldr	r3, [r7, #20]
 801a1b2:	2b05      	cmp	r3, #5
 801a1b4:	d002      	beq.n	801a1bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a1b6:	697b      	ldr	r3, [r7, #20]
 801a1b8:	2b09      	cmp	r3, #9
 801a1ba:	d111      	bne.n	801a1e0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	68db      	ldr	r3, [r3, #12]
 801a1c2:	f003 0301 	and.w	r3, r3, #1
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d007      	beq.n	801a1da <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a1ce:	f043 0220 	orr.w	r2, r3, #32
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	e0b3      	b.n	801a342 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a1da:	2304      	movs	r3, #4
 801a1dc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a1de:	e01c      	b.n	801a21a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a1e8:	d004      	beq.n	801a1f4 <HAL_ADC_PollForConversion+0x84>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	4a57      	ldr	r2, [pc, #348]	; (801a34c <HAL_ADC_PollForConversion+0x1dc>)
 801a1f0:	4293      	cmp	r3, r2
 801a1f2:	d101      	bne.n	801a1f8 <HAL_ADC_PollForConversion+0x88>
 801a1f4:	4b56      	ldr	r3, [pc, #344]	; (801a350 <HAL_ADC_PollForConversion+0x1e0>)
 801a1f6:	e000      	b.n	801a1fa <HAL_ADC_PollForConversion+0x8a>
 801a1f8:	4b56      	ldr	r3, [pc, #344]	; (801a354 <HAL_ADC_PollForConversion+0x1e4>)
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f7ff fbfa 	bl	80199f4 <LL_ADC_GetMultiDMATransfer>
 801a200:	4603      	mov	r3, r0
 801a202:	2b00      	cmp	r3, #0
 801a204:	d007      	beq.n	801a216 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a20a:	f043 0220 	orr.w	r2, r3, #32
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a212:	2301      	movs	r3, #1
 801a214:	e095      	b.n	801a342 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a216:	2304      	movs	r3, #4
 801a218:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801a21a:	f7ff fa37 	bl	801968c <HAL_GetTick>
 801a21e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a220:	e021      	b.n	801a266 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a228:	d01d      	beq.n	801a266 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801a22a:	f7ff fa2f 	bl	801968c <HAL_GetTick>
 801a22e:	4602      	mov	r2, r0
 801a230:	693b      	ldr	r3, [r7, #16]
 801a232:	1ad3      	subs	r3, r2, r3
 801a234:	683a      	ldr	r2, [r7, #0]
 801a236:	429a      	cmp	r2, r3
 801a238:	d302      	bcc.n	801a240 <HAL_ADC_PollForConversion+0xd0>
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d112      	bne.n	801a266 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	681a      	ldr	r2, [r3, #0]
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	4013      	ands	r3, r2
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d10b      	bne.n	801a266 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a252:	f043 0204 	orr.w	r2, r3, #4
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	2200      	movs	r2, #0
 801a25e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801a262:	2303      	movs	r3, #3
 801a264:	e06d      	b.n	801a342 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	681a      	ldr	r2, [r3, #0]
 801a26c:	69fb      	ldr	r3, [r7, #28]
 801a26e:	4013      	ands	r3, r2
 801a270:	2b00      	cmp	r3, #0
 801a272:	d0d6      	beq.n	801a222 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4618      	mov	r0, r3
 801a286:	f7ff fb01 	bl	801988c <LL_ADC_REG_IsTriggerSourceSWStart>
 801a28a:	4603      	mov	r3, r0
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d01c      	beq.n	801a2ca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	7f5b      	ldrb	r3, [r3, #29]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d118      	bne.n	801a2ca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	f003 0308 	and.w	r3, r3, #8
 801a2a2:	2b08      	cmp	r3, #8
 801a2a4:	d111      	bne.n	801a2ca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d105      	bne.n	801a2ca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2c2:	f043 0201 	orr.w	r2, r3, #1
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	4a1f      	ldr	r2, [pc, #124]	; (801a34c <HAL_ADC_PollForConversion+0x1dc>)
 801a2d0:	4293      	cmp	r3, r2
 801a2d2:	d002      	beq.n	801a2da <HAL_ADC_PollForConversion+0x16a>
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	e001      	b.n	801a2de <HAL_ADC_PollForConversion+0x16e>
 801a2da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	6812      	ldr	r2, [r2, #0]
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	d008      	beq.n	801a2f8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a2e6:	697b      	ldr	r3, [r7, #20]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d005      	beq.n	801a2f8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	2b05      	cmp	r3, #5
 801a2f0:	d002      	beq.n	801a2f8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	2b09      	cmp	r3, #9
 801a2f6:	d104      	bne.n	801a302 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	68db      	ldr	r3, [r3, #12]
 801a2fe:	61bb      	str	r3, [r7, #24]
 801a300:	e00d      	b.n	801a31e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	4a11      	ldr	r2, [pc, #68]	; (801a34c <HAL_ADC_PollForConversion+0x1dc>)
 801a308:	4293      	cmp	r3, r2
 801a30a:	d002      	beq.n	801a312 <HAL_ADC_PollForConversion+0x1a2>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	e001      	b.n	801a316 <HAL_ADC_PollForConversion+0x1a6>
 801a312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a316:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801a31e:	69fb      	ldr	r3, [r7, #28]
 801a320:	2b08      	cmp	r3, #8
 801a322:	d104      	bne.n	801a32e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	2208      	movs	r2, #8
 801a32a:	601a      	str	r2, [r3, #0]
 801a32c:	e008      	b.n	801a340 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a334:	2b00      	cmp	r3, #0
 801a336:	d103      	bne.n	801a340 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	220c      	movs	r2, #12
 801a33e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 801a340:	2300      	movs	r3, #0
}
 801a342:	4618      	mov	r0, r3
 801a344:	3720      	adds	r7, #32
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	50000100 	.word	0x50000100
 801a350:	50000300 	.word	0x50000300
 801a354:	50000700 	.word	0x50000700

0801a358 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b086      	sub	sp, #24
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	60f8      	str	r0, [r7, #12]
 801a360:	60b9      	str	r1, [r7, #8]
 801a362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a36c:	d004      	beq.n	801a378 <HAL_ADC_Start_DMA+0x20>
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	4a57      	ldr	r2, [pc, #348]	; (801a4d0 <HAL_ADC_Start_DMA+0x178>)
 801a374:	4293      	cmp	r3, r2
 801a376:	d101      	bne.n	801a37c <HAL_ADC_Start_DMA+0x24>
 801a378:	4b56      	ldr	r3, [pc, #344]	; (801a4d4 <HAL_ADC_Start_DMA+0x17c>)
 801a37a:	e000      	b.n	801a37e <HAL_ADC_Start_DMA+0x26>
 801a37c:	4b56      	ldr	r3, [pc, #344]	; (801a4d8 <HAL_ADC_Start_DMA+0x180>)
 801a37e:	4618      	mov	r0, r3
 801a380:	f7ff fb2a 	bl	80199d8 <LL_ADC_GetMultimode>
 801a384:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7ff fc04 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801a390:	4603      	mov	r3, r0
 801a392:	2b00      	cmp	r3, #0
 801a394:	f040 8094 	bne.w	801a4c0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a39e:	2b01      	cmp	r3, #1
 801a3a0:	d101      	bne.n	801a3a6 <HAL_ADC_Start_DMA+0x4e>
 801a3a2:	2302      	movs	r3, #2
 801a3a4:	e08f      	b.n	801a4c6 <HAL_ADC_Start_DMA+0x16e>
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	2201      	movs	r2, #1
 801a3aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4a4a      	ldr	r2, [pc, #296]	; (801a4dc <HAL_ADC_Start_DMA+0x184>)
 801a3b4:	4293      	cmp	r3, r2
 801a3b6:	d008      	beq.n	801a3ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d005      	beq.n	801a3ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a3be:	693b      	ldr	r3, [r7, #16]
 801a3c0:	2b05      	cmp	r3, #5
 801a3c2:	d002      	beq.n	801a3ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a3c4:	693b      	ldr	r3, [r7, #16]
 801a3c6:	2b09      	cmp	r3, #9
 801a3c8:	d173      	bne.n	801a4b2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801a3ca:	68f8      	ldr	r0, [r7, #12]
 801a3cc:	f001 f83c 	bl	801b448 <ADC_Enable>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801a3d4:	7dfb      	ldrb	r3, [r7, #23]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d166      	bne.n	801a4a8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a3de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a3e2:	f023 0301 	bic.w	r3, r3, #1
 801a3e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	4a37      	ldr	r2, [pc, #220]	; (801a4d0 <HAL_ADC_Start_DMA+0x178>)
 801a3f4:	4293      	cmp	r3, r2
 801a3f6:	d002      	beq.n	801a3fe <HAL_ADC_Start_DMA+0xa6>
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	e001      	b.n	801a402 <HAL_ADC_Start_DMA+0xaa>
 801a3fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a402:	68fa      	ldr	r2, [r7, #12]
 801a404:	6812      	ldr	r2, [r2, #0]
 801a406:	4293      	cmp	r3, r2
 801a408:	d002      	beq.n	801a410 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a40a:	693b      	ldr	r3, [r7, #16]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d105      	bne.n	801a41c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a414:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a424:	2b00      	cmp	r3, #0
 801a426:	d006      	beq.n	801a436 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a42c:	f023 0206 	bic.w	r2, r3, #6
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	661a      	str	r2, [r3, #96]	; 0x60
 801a434:	e002      	b.n	801a43c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	2200      	movs	r2, #0
 801a43a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a440:	4a27      	ldr	r2, [pc, #156]	; (801a4e0 <HAL_ADC_Start_DMA+0x188>)
 801a442:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a448:	4a26      	ldr	r2, [pc, #152]	; (801a4e4 <HAL_ADC_Start_DMA+0x18c>)
 801a44a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a450:	4a25      	ldr	r2, [pc, #148]	; (801a4e8 <HAL_ADC_Start_DMA+0x190>)
 801a452:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	221c      	movs	r2, #28
 801a45a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	2200      	movs	r2, #0
 801a460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	685a      	ldr	r2, [r3, #4]
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	f042 0210 	orr.w	r2, r2, #16
 801a472:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	68da      	ldr	r2, [r3, #12]
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	f042 0201 	orr.w	r2, r2, #1
 801a482:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	3340      	adds	r3, #64	; 0x40
 801a48e:	4619      	mov	r1, r3
 801a490:	68ba      	ldr	r2, [r7, #8]
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f001 fcb4 	bl	801be00 <HAL_DMA_Start_IT>
 801a498:	4603      	mov	r3, r0
 801a49a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7ff fb51 	bl	8019b48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801a4a6:	e00d      	b.n	801a4c4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801a4b0:	e008      	b.n	801a4c4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a4be:	e001      	b.n	801a4c4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a4c0:	2302      	movs	r3, #2
 801a4c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	3718      	adds	r7, #24
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bd80      	pop	{r7, pc}
 801a4ce:	bf00      	nop
 801a4d0:	50000100 	.word	0x50000100
 801a4d4:	50000300 	.word	0x50000300
 801a4d8:	50000700 	.word	0x50000700
 801a4dc:	50000400 	.word	0x50000400
 801a4e0:	0801b5cb 	.word	0x0801b5cb
 801a4e4:	0801b6a3 	.word	0x0801b6a3
 801a4e8:	0801b6bf 	.word	0x0801b6bf

0801a4ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b084      	sub	sp, #16
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a4fa:	2b01      	cmp	r3, #1
 801a4fc:	d101      	bne.n	801a502 <HAL_ADC_Stop_DMA+0x16>
 801a4fe:	2302      	movs	r3, #2
 801a500:	e051      	b.n	801a5a6 <HAL_ADC_Stop_DMA+0xba>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	2201      	movs	r2, #1
 801a506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a50a:	2103      	movs	r1, #3
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	f000 fedf 	bl	801b2d0 <ADC_ConversionStop>
 801a512:	4603      	mov	r3, r0
 801a514:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a516:	7bfb      	ldrb	r3, [r7, #15]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d13f      	bne.n	801a59c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	68da      	ldr	r2, [r3, #12]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	f022 0201 	bic.w	r2, r2, #1
 801a52a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a534:	b2db      	uxtb	r3, r3
 801a536:	2b02      	cmp	r3, #2
 801a538:	d10f      	bne.n	801a55a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a53e:	4618      	mov	r0, r3
 801a540:	f001 fcd9 	bl	801bef6 <HAL_DMA_Abort>
 801a544:	4603      	mov	r3, r0
 801a546:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801a548:	7bfb      	ldrb	r3, [r7, #15]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d005      	beq.n	801a55a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	685a      	ldr	r2, [r3, #4]
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	f022 0210 	bic.w	r2, r2, #16
 801a568:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801a56a:	7bfb      	ldrb	r3, [r7, #15]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d105      	bne.n	801a57c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 801a570:	6878      	ldr	r0, [r7, #4]
 801a572:	f000 ffcb 	bl	801b50c <ADC_Disable>
 801a576:	4603      	mov	r3, r0
 801a578:	73fb      	strb	r3, [r7, #15]
 801a57a:	e002      	b.n	801a582 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f000 ffc5 	bl	801b50c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a582:	7bfb      	ldrb	r3, [r7, #15]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d109      	bne.n	801a59c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a58c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a590:	f023 0301 	bic.w	r3, r3, #1
 801a594:	f043 0201 	orr.w	r2, r3, #1
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	3710      	adds	r7, #16
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	bd80      	pop	{r7, pc}

0801a5ae <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801a5ae:	b480      	push	{r7}
 801a5b0:	b083      	sub	sp, #12
 801a5b2:	af00      	add	r7, sp, #0
 801a5b4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801a5bc:	4618      	mov	r0, r3
 801a5be:	370c      	adds	r7, #12
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c6:	4770      	bx	lr

0801a5c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b08a      	sub	sp, #40	; 0x28
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a5ec:	d004      	beq.n	801a5f8 <HAL_ADC_IRQHandler+0x30>
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	4a87      	ldr	r2, [pc, #540]	; (801a810 <HAL_ADC_IRQHandler+0x248>)
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	d101      	bne.n	801a5fc <HAL_ADC_IRQHandler+0x34>
 801a5f8:	4b86      	ldr	r3, [pc, #536]	; (801a814 <HAL_ADC_IRQHandler+0x24c>)
 801a5fa:	e000      	b.n	801a5fe <HAL_ADC_IRQHandler+0x36>
 801a5fc:	4b86      	ldr	r3, [pc, #536]	; (801a818 <HAL_ADC_IRQHandler+0x250>)
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ff f9ea 	bl	80199d8 <LL_ADC_GetMultimode>
 801a604:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801a606:	69fb      	ldr	r3, [r7, #28]
 801a608:	f003 0302 	and.w	r3, r3, #2
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d017      	beq.n	801a640 <HAL_ADC_IRQHandler+0x78>
 801a610:	69bb      	ldr	r3, [r7, #24]
 801a612:	f003 0302 	and.w	r3, r3, #2
 801a616:	2b00      	cmp	r3, #0
 801a618:	d012      	beq.n	801a640 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a61e:	f003 0310 	and.w	r3, r3, #16
 801a622:	2b00      	cmp	r3, #0
 801a624:	d105      	bne.n	801a632 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a62a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	f001 f93a 	bl	801b8ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	2202      	movs	r2, #2
 801a63e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a640:	69fb      	ldr	r3, [r7, #28]
 801a642:	f003 0304 	and.w	r3, r3, #4
 801a646:	2b00      	cmp	r3, #0
 801a648:	d004      	beq.n	801a654 <HAL_ADC_IRQHandler+0x8c>
 801a64a:	69bb      	ldr	r3, [r7, #24]
 801a64c:	f003 0304 	and.w	r3, r3, #4
 801a650:	2b00      	cmp	r3, #0
 801a652:	d10a      	bne.n	801a66a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a654:	69fb      	ldr	r3, [r7, #28]
 801a656:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	f000 8085 	beq.w	801a76a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a660:	69bb      	ldr	r3, [r7, #24]
 801a662:	f003 0308 	and.w	r3, r3, #8
 801a666:	2b00      	cmp	r3, #0
 801a668:	d07f      	beq.n	801a76a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a66e:	f003 0310 	and.w	r3, r3, #16
 801a672:	2b00      	cmp	r3, #0
 801a674:	d105      	bne.n	801a682 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a67a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4618      	mov	r0, r3
 801a688:	f7ff f900 	bl	801988c <LL_ADC_REG_IsTriggerSourceSWStart>
 801a68c:	4603      	mov	r3, r0
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d064      	beq.n	801a75c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	4a5e      	ldr	r2, [pc, #376]	; (801a810 <HAL_ADC_IRQHandler+0x248>)
 801a698:	4293      	cmp	r3, r2
 801a69a:	d002      	beq.n	801a6a2 <HAL_ADC_IRQHandler+0xda>
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	e001      	b.n	801a6a6 <HAL_ADC_IRQHandler+0xde>
 801a6a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	6812      	ldr	r2, [r2, #0]
 801a6aa:	4293      	cmp	r3, r2
 801a6ac:	d008      	beq.n	801a6c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a6ae:	697b      	ldr	r3, [r7, #20]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d005      	beq.n	801a6c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a6b4:	697b      	ldr	r3, [r7, #20]
 801a6b6:	2b05      	cmp	r3, #5
 801a6b8:	d002      	beq.n	801a6c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a6ba:	697b      	ldr	r3, [r7, #20]
 801a6bc:	2b09      	cmp	r3, #9
 801a6be:	d104      	bne.n	801a6ca <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	68db      	ldr	r3, [r3, #12]
 801a6c6:	623b      	str	r3, [r7, #32]
 801a6c8:	e00d      	b.n	801a6e6 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	4a50      	ldr	r2, [pc, #320]	; (801a810 <HAL_ADC_IRQHandler+0x248>)
 801a6d0:	4293      	cmp	r3, r2
 801a6d2:	d002      	beq.n	801a6da <HAL_ADC_IRQHandler+0x112>
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	e001      	b.n	801a6de <HAL_ADC_IRQHandler+0x116>
 801a6da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a6de:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	68db      	ldr	r3, [r3, #12]
 801a6e4:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801a6e6:	6a3b      	ldr	r3, [r7, #32]
 801a6e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d135      	bne.n	801a75c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	f003 0308 	and.w	r3, r3, #8
 801a6fa:	2b08      	cmp	r3, #8
 801a6fc:	d12e      	bne.n	801a75c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	4618      	mov	r0, r3
 801a704:	f7ff fa48 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801a708:	4603      	mov	r3, r0
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d11a      	bne.n	801a744 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	685a      	ldr	r2, [r3, #4]
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f022 020c 	bic.w	r2, r2, #12
 801a71c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a72e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a732:	2b00      	cmp	r3, #0
 801a734:	d112      	bne.n	801a75c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a73a:	f043 0201 	orr.w	r2, r3, #1
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	65da      	str	r2, [r3, #92]	; 0x5c
 801a742:	e00b      	b.n	801a75c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a748:	f043 0210 	orr.w	r2, r3, #16
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a754:	f043 0201 	orr.w	r2, r3, #1
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f7ee fbf3 	bl	8008f48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	220c      	movs	r2, #12
 801a768:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a76a:	69fb      	ldr	r3, [r7, #28]
 801a76c:	f003 0320 	and.w	r3, r3, #32
 801a770:	2b00      	cmp	r3, #0
 801a772:	d004      	beq.n	801a77e <HAL_ADC_IRQHandler+0x1b6>
 801a774:	69bb      	ldr	r3, [r7, #24]
 801a776:	f003 0320 	and.w	r3, r3, #32
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d10b      	bne.n	801a796 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a77e:	69fb      	ldr	r3, [r7, #28]
 801a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a784:	2b00      	cmp	r3, #0
 801a786:	f000 80a1 	beq.w	801a8cc <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a78a:	69bb      	ldr	r3, [r7, #24]
 801a78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a790:	2b00      	cmp	r3, #0
 801a792:	f000 809b 	beq.w	801a8cc <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a79a:	f003 0310 	and.w	r3, r3, #16
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d105      	bne.n	801a7ae <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	f7ff f8a9 	bl	801990a <LL_ADC_INJ_IsTriggerSourceSWStart>
 801a7b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7ff f864 	bl	801988c <LL_ADC_REG_IsTriggerSourceSWStart>
 801a7c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	4a11      	ldr	r2, [pc, #68]	; (801a810 <HAL_ADC_IRQHandler+0x248>)
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	d002      	beq.n	801a7d6 <HAL_ADC_IRQHandler+0x20e>
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	e001      	b.n	801a7da <HAL_ADC_IRQHandler+0x212>
 801a7d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a7da:	687a      	ldr	r2, [r7, #4]
 801a7dc:	6812      	ldr	r2, [r2, #0]
 801a7de:	4293      	cmp	r3, r2
 801a7e0:	d008      	beq.n	801a7f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a7e2:	697b      	ldr	r3, [r7, #20]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d005      	beq.n	801a7f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801a7e8:	697b      	ldr	r3, [r7, #20]
 801a7ea:	2b06      	cmp	r3, #6
 801a7ec:	d002      	beq.n	801a7f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801a7ee:	697b      	ldr	r3, [r7, #20]
 801a7f0:	2b07      	cmp	r3, #7
 801a7f2:	d104      	bne.n	801a7fe <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	68db      	ldr	r3, [r3, #12]
 801a7fa:	623b      	str	r3, [r7, #32]
 801a7fc:	e014      	b.n	801a828 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	4a03      	ldr	r2, [pc, #12]	; (801a810 <HAL_ADC_IRQHandler+0x248>)
 801a804:	4293      	cmp	r3, r2
 801a806:	d009      	beq.n	801a81c <HAL_ADC_IRQHandler+0x254>
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	e008      	b.n	801a820 <HAL_ADC_IRQHandler+0x258>
 801a80e:	bf00      	nop
 801a810:	50000100 	.word	0x50000100
 801a814:	50000300 	.word	0x50000300
 801a818:	50000700 	.word	0x50000700
 801a81c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a820:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a822:	693b      	ldr	r3, [r7, #16]
 801a824:	68db      	ldr	r3, [r3, #12]
 801a826:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d047      	beq.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801a82e:	6a3b      	ldr	r3, [r7, #32]
 801a830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a834:	2b00      	cmp	r3, #0
 801a836:	d007      	beq.n	801a848 <HAL_ADC_IRQHandler+0x280>
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d03f      	beq.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801a83e:	6a3b      	ldr	r3, [r7, #32]
 801a840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801a844:	2b00      	cmp	r3, #0
 801a846:	d13a      	bne.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a852:	2b40      	cmp	r3, #64	; 0x40
 801a854:	d133      	bne.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801a856:	6a3b      	ldr	r3, [r7, #32]
 801a858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d12e      	bne.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	4618      	mov	r0, r3
 801a866:	f7ff f9be 	bl	8019be6 <LL_ADC_INJ_IsConversionOngoing>
 801a86a:	4603      	mov	r3, r0
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d11a      	bne.n	801a8a6 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	685a      	ldr	r2, [r3, #4]
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a87e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a894:	2b00      	cmp	r3, #0
 801a896:	d112      	bne.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a89c:	f043 0201 	orr.w	r2, r3, #1
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
 801a8a4:	e00b      	b.n	801a8be <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8aa:	f043 0210 	orr.w	r2, r3, #16
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a8b6:	f043 0201 	orr.w	r2, r3, #1
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801a8be:	6878      	ldr	r0, [r7, #4]
 801a8c0:	f000 ffcc 	bl	801b85c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	2260      	movs	r2, #96	; 0x60
 801a8ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801a8cc:	69fb      	ldr	r3, [r7, #28]
 801a8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d011      	beq.n	801a8fa <HAL_ADC_IRQHandler+0x332>
 801a8d6:	69bb      	ldr	r3, [r7, #24]
 801a8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d00c      	beq.n	801a8fa <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801a8ec:	6878      	ldr	r0, [r7, #4]
 801a8ee:	f000 f8af 	bl	801aa50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	2280      	movs	r2, #128	; 0x80
 801a8f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801a8fa:	69fb      	ldr	r3, [r7, #28]
 801a8fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a900:	2b00      	cmp	r3, #0
 801a902:	d012      	beq.n	801a92a <HAL_ADC_IRQHandler+0x362>
 801a904:	69bb      	ldr	r3, [r7, #24]
 801a906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d00d      	beq.n	801a92a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801a91a:	6878      	ldr	r0, [r7, #4]
 801a91c:	f000 ffb2 	bl	801b884 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a928:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801a92a:	69fb      	ldr	r3, [r7, #28]
 801a92c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a930:	2b00      	cmp	r3, #0
 801a932:	d012      	beq.n	801a95a <HAL_ADC_IRQHandler+0x392>
 801a934:	69bb      	ldr	r3, [r7, #24]
 801a936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d00d      	beq.n	801a95a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a942:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801a94a:	6878      	ldr	r0, [r7, #4]
 801a94c:	f000 ffa4 	bl	801b898 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a958:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	f003 0310 	and.w	r3, r3, #16
 801a960:	2b00      	cmp	r3, #0
 801a962:	d043      	beq.n	801a9ec <HAL_ADC_IRQHandler+0x424>
 801a964:	69bb      	ldr	r3, [r7, #24]
 801a966:	f003 0310 	and.w	r3, r3, #16
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d03e      	beq.n	801a9ec <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a972:	2b00      	cmp	r3, #0
 801a974:	d102      	bne.n	801a97c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801a976:	2301      	movs	r3, #1
 801a978:	627b      	str	r3, [r7, #36]	; 0x24
 801a97a:	e021      	b.n	801a9c0 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d015      	beq.n	801a9ae <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a98a:	d004      	beq.n	801a996 <HAL_ADC_IRQHandler+0x3ce>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	4a27      	ldr	r2, [pc, #156]	; (801aa30 <HAL_ADC_IRQHandler+0x468>)
 801a992:	4293      	cmp	r3, r2
 801a994:	d101      	bne.n	801a99a <HAL_ADC_IRQHandler+0x3d2>
 801a996:	4b27      	ldr	r3, [pc, #156]	; (801aa34 <HAL_ADC_IRQHandler+0x46c>)
 801a998:	e000      	b.n	801a99c <HAL_ADC_IRQHandler+0x3d4>
 801a99a:	4b27      	ldr	r3, [pc, #156]	; (801aa38 <HAL_ADC_IRQHandler+0x470>)
 801a99c:	4618      	mov	r0, r3
 801a99e:	f7ff f829 	bl	80199f4 <LL_ADC_GetMultiDMATransfer>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d00b      	beq.n	801a9c0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a9a8:	2301      	movs	r3, #1
 801a9aa:	627b      	str	r3, [r7, #36]	; 0x24
 801a9ac:	e008      	b.n	801a9c0 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	68db      	ldr	r3, [r3, #12]
 801a9b4:	f003 0301 	and.w	r3, r3, #1
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d001      	beq.n	801a9c0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a9bc:	2301      	movs	r3, #1
 801a9be:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c2:	2b01      	cmp	r3, #1
 801a9c4:	d10e      	bne.n	801a9e4 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9d6:	f043 0202 	orr.w	r2, r3, #2
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f000 f840 	bl	801aa64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	2210      	movs	r2, #16
 801a9ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801a9ec:	69fb      	ldr	r3, [r7, #28]
 801a9ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d018      	beq.n	801aa28 <HAL_ADC_IRQHandler+0x460>
 801a9f6:	69bb      	ldr	r3, [r7, #24]
 801a9f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d013      	beq.n	801aa28 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa10:	f043 0208 	orr.w	r2, r3, #8
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aa20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f000 ff24 	bl	801b870 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801aa28:	bf00      	nop
 801aa2a:	3728      	adds	r7, #40	; 0x28
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	50000100 	.word	0x50000100
 801aa34:	50000300 	.word	0x50000300
 801aa38:	50000700 	.word	0x50000700

0801aa3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801aa3c:	b480      	push	{r7}
 801aa3e:	b083      	sub	sp, #12
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801aa44:	bf00      	nop
 801aa46:	370c      	adds	r7, #12
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4e:	4770      	bx	lr

0801aa50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801aa50:	b480      	push	{r7}
 801aa52:	b083      	sub	sp, #12
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801aa58:	bf00      	nop
 801aa5a:	370c      	adds	r7, #12
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa62:	4770      	bx	lr

0801aa64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801aa6c:	bf00      	nop
 801aa6e:	370c      	adds	r7, #12
 801aa70:	46bd      	mov	sp, r7
 801aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa76:	4770      	bx	lr

0801aa78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b0b6      	sub	sp, #216	; 0xd8
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aa82:	2300      	movs	r3, #0
 801aa84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801aa88:	2300      	movs	r3, #0
 801aa8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aa92:	2b01      	cmp	r3, #1
 801aa94:	d102      	bne.n	801aa9c <HAL_ADC_ConfigChannel+0x24>
 801aa96:	2302      	movs	r3, #2
 801aa98:	f000 bc04 	b.w	801b2a4 <HAL_ADC_ConfigChannel+0x82c>
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2201      	movs	r2, #1
 801aaa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7ff f875 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	f040 83e8 	bne.w	801b286 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	6818      	ldr	r0, [r3, #0]
 801aaba:	683b      	ldr	r3, [r7, #0]
 801aabc:	6859      	ldr	r1, [r3, #4]
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	461a      	mov	r2, r3
 801aac4:	f7fe fef5 	bl	80198b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	4618      	mov	r0, r3
 801aace:	f7ff f863 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801aad2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	4618      	mov	r0, r3
 801aadc:	f7ff f883 	bl	8019be6 <LL_ADC_INJ_IsConversionOngoing>
 801aae0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801aae4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	f040 81d9 	bne.w	801aea0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801aaee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	f040 81d4 	bne.w	801aea0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	689b      	ldr	r3, [r3, #8]
 801aafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ab00:	d10f      	bne.n	801ab22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	6818      	ldr	r0, [r3, #0]
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	4619      	mov	r1, r3
 801ab0e:	f7fe ff0f 	bl	8019930 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	f7fe fea3 	bl	8019866 <LL_ADC_SetSamplingTimeCommonConfig>
 801ab20:	e00e      	b.n	801ab40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	6818      	ldr	r0, [r3, #0]
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	6819      	ldr	r1, [r3, #0]
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	689b      	ldr	r3, [r3, #8]
 801ab2e:	461a      	mov	r2, r3
 801ab30:	f7fe fefe 	bl	8019930 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2100      	movs	r1, #0
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f7fe fe93 	bl	8019866 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801ab40:	683b      	ldr	r3, [r7, #0]
 801ab42:	695a      	ldr	r2, [r3, #20]
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	68db      	ldr	r3, [r3, #12]
 801ab4a:	08db      	lsrs	r3, r3, #3
 801ab4c:	f003 0303 	and.w	r3, r3, #3
 801ab50:	005b      	lsls	r3, r3, #1
 801ab52:	fa02 f303 	lsl.w	r3, r2, r3
 801ab56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801ab5a:	683b      	ldr	r3, [r7, #0]
 801ab5c:	691b      	ldr	r3, [r3, #16]
 801ab5e:	2b04      	cmp	r3, #4
 801ab60:	d022      	beq.n	801aba8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	6818      	ldr	r0, [r3, #0]
 801ab66:	683b      	ldr	r3, [r7, #0]
 801ab68:	6919      	ldr	r1, [r3, #16]
 801ab6a:	683b      	ldr	r3, [r7, #0]
 801ab6c:	681a      	ldr	r2, [r3, #0]
 801ab6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ab72:	f7fe fded 	bl	8019750 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6818      	ldr	r0, [r3, #0]
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	6919      	ldr	r1, [r3, #16]
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	699b      	ldr	r3, [r3, #24]
 801ab82:	461a      	mov	r2, r3
 801ab84:	f7fe fe39 	bl	80197fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	6818      	ldr	r0, [r3, #0]
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	6919      	ldr	r1, [r3, #16]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	7f1b      	ldrb	r3, [r3, #28]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d102      	bne.n	801ab9e <HAL_ADC_ConfigChannel+0x126>
 801ab98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ab9c:	e000      	b.n	801aba0 <HAL_ADC_ConfigChannel+0x128>
 801ab9e:	2300      	movs	r3, #0
 801aba0:	461a      	mov	r2, r3
 801aba2:	f7fe fe45 	bl	8019830 <LL_ADC_SetOffsetSaturation>
 801aba6:	e17b      	b.n	801aea0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2100      	movs	r1, #0
 801abae:	4618      	mov	r0, r3
 801abb0:	f7fe fdf2 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801abb4:	4603      	mov	r3, r0
 801abb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d10a      	bne.n	801abd4 <HAL_ADC_ConfigChannel+0x15c>
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	2100      	movs	r1, #0
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7fe fde7 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801abca:	4603      	mov	r3, r0
 801abcc:	0e9b      	lsrs	r3, r3, #26
 801abce:	f003 021f 	and.w	r2, r3, #31
 801abd2:	e01e      	b.n	801ac12 <HAL_ADC_ConfigChannel+0x19a>
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	2100      	movs	r1, #0
 801abda:	4618      	mov	r0, r3
 801abdc:	f7fe fddc 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801abe0:	4603      	mov	r3, r0
 801abe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801abe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801abea:	fa93 f3a3 	rbit	r3, r3
 801abee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801abf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801abf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801abfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d101      	bne.n	801ac06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801ac02:	2320      	movs	r3, #32
 801ac04:	e004      	b.n	801ac10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801ac06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ac0a:	fab3 f383 	clz	r3, r3
 801ac0e:	b2db      	uxtb	r3, r3
 801ac10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d105      	bne.n	801ac2a <HAL_ADC_ConfigChannel+0x1b2>
 801ac1e:	683b      	ldr	r3, [r7, #0]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	0e9b      	lsrs	r3, r3, #26
 801ac24:	f003 031f 	and.w	r3, r3, #31
 801ac28:	e018      	b.n	801ac5c <HAL_ADC_ConfigChannel+0x1e4>
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801ac36:	fa93 f3a3 	rbit	r3, r3
 801ac3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801ac3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ac42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801ac46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d101      	bne.n	801ac52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801ac4e:	2320      	movs	r3, #32
 801ac50:	e004      	b.n	801ac5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801ac52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ac56:	fab3 f383 	clz	r3, r3
 801ac5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d106      	bne.n	801ac6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	2200      	movs	r2, #0
 801ac66:	2100      	movs	r1, #0
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f7fe fdab 	bl	80197c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	2101      	movs	r1, #1
 801ac74:	4618      	mov	r0, r3
 801ac76:	f7fe fd8f 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d10a      	bne.n	801ac9a <HAL_ADC_ConfigChannel+0x222>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2101      	movs	r1, #1
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7fe fd84 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ac90:	4603      	mov	r3, r0
 801ac92:	0e9b      	lsrs	r3, r3, #26
 801ac94:	f003 021f 	and.w	r2, r3, #31
 801ac98:	e01e      	b.n	801acd8 <HAL_ADC_ConfigChannel+0x260>
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	2101      	movs	r1, #1
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7fe fd79 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801aca6:	4603      	mov	r3, r0
 801aca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801acac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801acb0:	fa93 f3a3 	rbit	r3, r3
 801acb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801acb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801acbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801acc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d101      	bne.n	801accc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801acc8:	2320      	movs	r3, #32
 801acca:	e004      	b.n	801acd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801accc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801acd0:	fab3 f383 	clz	r3, r3
 801acd4:	b2db      	uxtb	r3, r3
 801acd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801acd8:	683b      	ldr	r3, [r7, #0]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d105      	bne.n	801acf0 <HAL_ADC_ConfigChannel+0x278>
 801ace4:	683b      	ldr	r3, [r7, #0]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	0e9b      	lsrs	r3, r3, #26
 801acea:	f003 031f 	and.w	r3, r3, #31
 801acee:	e018      	b.n	801ad22 <HAL_ADC_ConfigChannel+0x2aa>
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801acf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801acfc:	fa93 f3a3 	rbit	r3, r3
 801ad00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801ad04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ad08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801ad0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d101      	bne.n	801ad18 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801ad14:	2320      	movs	r3, #32
 801ad16:	e004      	b.n	801ad22 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801ad18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ad1c:	fab3 f383 	clz	r3, r3
 801ad20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801ad22:	429a      	cmp	r2, r3
 801ad24:	d106      	bne.n	801ad34 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	2101      	movs	r1, #1
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f7fe fd48 	bl	80197c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	2102      	movs	r1, #2
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f7fe fd2c 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ad40:	4603      	mov	r3, r0
 801ad42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d10a      	bne.n	801ad60 <HAL_ADC_ConfigChannel+0x2e8>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	2102      	movs	r1, #2
 801ad50:	4618      	mov	r0, r3
 801ad52:	f7fe fd21 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ad56:	4603      	mov	r3, r0
 801ad58:	0e9b      	lsrs	r3, r3, #26
 801ad5a:	f003 021f 	and.w	r2, r3, #31
 801ad5e:	e01e      	b.n	801ad9e <HAL_ADC_ConfigChannel+0x326>
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2102      	movs	r1, #2
 801ad66:	4618      	mov	r0, r3
 801ad68:	f7fe fd16 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ad72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ad76:	fa93 f3a3 	rbit	r3, r3
 801ad7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801ad7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ad82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801ad86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d101      	bne.n	801ad92 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801ad8e:	2320      	movs	r3, #32
 801ad90:	e004      	b.n	801ad9c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801ad92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad96:	fab3 f383 	clz	r3, r3
 801ad9a:	b2db      	uxtb	r3, r3
 801ad9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ad9e:	683b      	ldr	r3, [r7, #0]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d105      	bne.n	801adb6 <HAL_ADC_ConfigChannel+0x33e>
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	0e9b      	lsrs	r3, r3, #26
 801adb0:	f003 031f 	and.w	r3, r3, #31
 801adb4:	e016      	b.n	801ade4 <HAL_ADC_ConfigChannel+0x36c>
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801adbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801adc2:	fa93 f3a3 	rbit	r3, r3
 801adc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801adc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801adca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801adce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801add2:	2b00      	cmp	r3, #0
 801add4:	d101      	bne.n	801adda <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801add6:	2320      	movs	r3, #32
 801add8:	e004      	b.n	801ade4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801adda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801adde:	fab3 f383 	clz	r3, r3
 801ade2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801ade4:	429a      	cmp	r2, r3
 801ade6:	d106      	bne.n	801adf6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	2200      	movs	r2, #0
 801adee:	2102      	movs	r1, #2
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7fe fce7 	bl	80197c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	2103      	movs	r1, #3
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7fe fccb 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ae02:	4603      	mov	r3, r0
 801ae04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d10a      	bne.n	801ae22 <HAL_ADC_ConfigChannel+0x3aa>
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	2103      	movs	r1, #3
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7fe fcc0 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ae18:	4603      	mov	r3, r0
 801ae1a:	0e9b      	lsrs	r3, r3, #26
 801ae1c:	f003 021f 	and.w	r2, r3, #31
 801ae20:	e017      	b.n	801ae52 <HAL_ADC_ConfigChannel+0x3da>
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	2103      	movs	r1, #3
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7fe fcb5 	bl	8019798 <LL_ADC_GetOffsetChannel>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ae32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae34:	fa93 f3a3 	rbit	r3, r3
 801ae38:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801ae3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae3c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801ae3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d101      	bne.n	801ae48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801ae44:	2320      	movs	r3, #32
 801ae46:	e003      	b.n	801ae50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801ae48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae4a:	fab3 f383 	clz	r3, r3
 801ae4e:	b2db      	uxtb	r3, r3
 801ae50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d105      	bne.n	801ae6a <HAL_ADC_ConfigChannel+0x3f2>
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	0e9b      	lsrs	r3, r3, #26
 801ae64:	f003 031f 	and.w	r3, r3, #31
 801ae68:	e011      	b.n	801ae8e <HAL_ADC_ConfigChannel+0x416>
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ae70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ae72:	fa93 f3a3 	rbit	r3, r3
 801ae76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801ae78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ae7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801ae7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d101      	bne.n	801ae86 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801ae82:	2320      	movs	r3, #32
 801ae84:	e003      	b.n	801ae8e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801ae86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae88:	fab3 f383 	clz	r3, r3
 801ae8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d106      	bne.n	801aea0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	2200      	movs	r2, #0
 801ae98:	2103      	movs	r1, #3
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7fe fc92 	bl	80197c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	4618      	mov	r0, r3
 801aea6:	f7fe fe29 	bl	8019afc <LL_ADC_IsEnabled>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	f040 813d 	bne.w	801b12c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6818      	ldr	r0, [r3, #0]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	6819      	ldr	r1, [r3, #0]
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	461a      	mov	r2, r3
 801aec0:	f7fe fd62 	bl	8019988 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	68db      	ldr	r3, [r3, #12]
 801aec8:	4aa2      	ldr	r2, [pc, #648]	; (801b154 <HAL_ADC_ConfigChannel+0x6dc>)
 801aeca:	4293      	cmp	r3, r2
 801aecc:	f040 812e 	bne.w	801b12c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801aed4:	683b      	ldr	r3, [r7, #0]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d10b      	bne.n	801aef8 <HAL_ADC_ConfigChannel+0x480>
 801aee0:	683b      	ldr	r3, [r7, #0]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	0e9b      	lsrs	r3, r3, #26
 801aee6:	3301      	adds	r3, #1
 801aee8:	f003 031f 	and.w	r3, r3, #31
 801aeec:	2b09      	cmp	r3, #9
 801aeee:	bf94      	ite	ls
 801aef0:	2301      	movls	r3, #1
 801aef2:	2300      	movhi	r3, #0
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	e019      	b.n	801af2c <HAL_ADC_ConfigChannel+0x4b4>
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aefe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801af00:	fa93 f3a3 	rbit	r3, r3
 801af04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801af06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801af08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801af0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d101      	bne.n	801af14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801af10:	2320      	movs	r3, #32
 801af12:	e003      	b.n	801af1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801af14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801af16:	fab3 f383 	clz	r3, r3
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	3301      	adds	r3, #1
 801af1e:	f003 031f 	and.w	r3, r3, #31
 801af22:	2b09      	cmp	r3, #9
 801af24:	bf94      	ite	ls
 801af26:	2301      	movls	r3, #1
 801af28:	2300      	movhi	r3, #0
 801af2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d079      	beq.n	801b024 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d107      	bne.n	801af4c <HAL_ADC_ConfigChannel+0x4d4>
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	0e9b      	lsrs	r3, r3, #26
 801af42:	3301      	adds	r3, #1
 801af44:	069b      	lsls	r3, r3, #26
 801af46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801af4a:	e015      	b.n	801af78 <HAL_ADC_ConfigChannel+0x500>
 801af4c:	683b      	ldr	r3, [r7, #0]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af54:	fa93 f3a3 	rbit	r3, r3
 801af58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801af5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801af5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af60:	2b00      	cmp	r3, #0
 801af62:	d101      	bne.n	801af68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801af64:	2320      	movs	r3, #32
 801af66:	e003      	b.n	801af70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801af68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af6a:	fab3 f383 	clz	r3, r3
 801af6e:	b2db      	uxtb	r3, r3
 801af70:	3301      	adds	r3, #1
 801af72:	069b      	lsls	r3, r3, #26
 801af74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af80:	2b00      	cmp	r3, #0
 801af82:	d109      	bne.n	801af98 <HAL_ADC_ConfigChannel+0x520>
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	0e9b      	lsrs	r3, r3, #26
 801af8a:	3301      	adds	r3, #1
 801af8c:	f003 031f 	and.w	r3, r3, #31
 801af90:	2101      	movs	r1, #1
 801af92:	fa01 f303 	lsl.w	r3, r1, r3
 801af96:	e017      	b.n	801afc8 <HAL_ADC_ConfigChannel+0x550>
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801af9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afa0:	fa93 f3a3 	rbit	r3, r3
 801afa4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801afa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801afa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801afaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afac:	2b00      	cmp	r3, #0
 801afae:	d101      	bne.n	801afb4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801afb0:	2320      	movs	r3, #32
 801afb2:	e003      	b.n	801afbc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801afb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801afb6:	fab3 f383 	clz	r3, r3
 801afba:	b2db      	uxtb	r3, r3
 801afbc:	3301      	adds	r3, #1
 801afbe:	f003 031f 	and.w	r3, r3, #31
 801afc2:	2101      	movs	r1, #1
 801afc4:	fa01 f303 	lsl.w	r3, r1, r3
 801afc8:	ea42 0103 	orr.w	r1, r2, r3
 801afcc:	683b      	ldr	r3, [r7, #0]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d10a      	bne.n	801afee <HAL_ADC_ConfigChannel+0x576>
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	0e9b      	lsrs	r3, r3, #26
 801afde:	3301      	adds	r3, #1
 801afe0:	f003 021f 	and.w	r2, r3, #31
 801afe4:	4613      	mov	r3, r2
 801afe6:	005b      	lsls	r3, r3, #1
 801afe8:	4413      	add	r3, r2
 801afea:	051b      	lsls	r3, r3, #20
 801afec:	e018      	b.n	801b020 <HAL_ADC_ConfigChannel+0x5a8>
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aff6:	fa93 f3a3 	rbit	r3, r3
 801affa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801affe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b002:	2b00      	cmp	r3, #0
 801b004:	d101      	bne.n	801b00a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801b006:	2320      	movs	r3, #32
 801b008:	e003      	b.n	801b012 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801b00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b00c:	fab3 f383 	clz	r3, r3
 801b010:	b2db      	uxtb	r3, r3
 801b012:	3301      	adds	r3, #1
 801b014:	f003 021f 	and.w	r2, r3, #31
 801b018:	4613      	mov	r3, r2
 801b01a:	005b      	lsls	r3, r3, #1
 801b01c:	4413      	add	r3, r2
 801b01e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801b020:	430b      	orrs	r3, r1
 801b022:	e07e      	b.n	801b122 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d107      	bne.n	801b040 <HAL_ADC_ConfigChannel+0x5c8>
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	0e9b      	lsrs	r3, r3, #26
 801b036:	3301      	adds	r3, #1
 801b038:	069b      	lsls	r3, r3, #26
 801b03a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b03e:	e015      	b.n	801b06c <HAL_ADC_ConfigChannel+0x5f4>
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b048:	fa93 f3a3 	rbit	r3, r3
 801b04c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b050:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b054:	2b00      	cmp	r3, #0
 801b056:	d101      	bne.n	801b05c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801b058:	2320      	movs	r3, #32
 801b05a:	e003      	b.n	801b064 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b05e:	fab3 f383 	clz	r3, r3
 801b062:	b2db      	uxtb	r3, r3
 801b064:	3301      	adds	r3, #1
 801b066:	069b      	lsls	r3, r3, #26
 801b068:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b06c:	683b      	ldr	r3, [r7, #0]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b074:	2b00      	cmp	r3, #0
 801b076:	d109      	bne.n	801b08c <HAL_ADC_ConfigChannel+0x614>
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	0e9b      	lsrs	r3, r3, #26
 801b07e:	3301      	adds	r3, #1
 801b080:	f003 031f 	and.w	r3, r3, #31
 801b084:	2101      	movs	r1, #1
 801b086:	fa01 f303 	lsl.w	r3, r1, r3
 801b08a:	e017      	b.n	801b0bc <HAL_ADC_ConfigChannel+0x644>
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b092:	6a3b      	ldr	r3, [r7, #32]
 801b094:	fa93 f3a3 	rbit	r3, r3
 801b098:	61fb      	str	r3, [r7, #28]
  return result;
 801b09a:	69fb      	ldr	r3, [r7, #28]
 801b09c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d101      	bne.n	801b0a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801b0a4:	2320      	movs	r3, #32
 801b0a6:	e003      	b.n	801b0b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0aa:	fab3 f383 	clz	r3, r3
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	3301      	adds	r3, #1
 801b0b2:	f003 031f 	and.w	r3, r3, #31
 801b0b6:	2101      	movs	r1, #1
 801b0b8:	fa01 f303 	lsl.w	r3, r1, r3
 801b0bc:	ea42 0103 	orr.w	r1, r2, r3
 801b0c0:	683b      	ldr	r3, [r7, #0]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d10d      	bne.n	801b0e8 <HAL_ADC_ConfigChannel+0x670>
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	0e9b      	lsrs	r3, r3, #26
 801b0d2:	3301      	adds	r3, #1
 801b0d4:	f003 021f 	and.w	r2, r3, #31
 801b0d8:	4613      	mov	r3, r2
 801b0da:	005b      	lsls	r3, r3, #1
 801b0dc:	4413      	add	r3, r2
 801b0de:	3b1e      	subs	r3, #30
 801b0e0:	051b      	lsls	r3, r3, #20
 801b0e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b0e6:	e01b      	b.n	801b120 <HAL_ADC_ConfigChannel+0x6a8>
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	fa93 f3a3 	rbit	r3, r3
 801b0f4:	613b      	str	r3, [r7, #16]
  return result;
 801b0f6:	693b      	ldr	r3, [r7, #16]
 801b0f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b0fa:	69bb      	ldr	r3, [r7, #24]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d101      	bne.n	801b104 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801b100:	2320      	movs	r3, #32
 801b102:	e003      	b.n	801b10c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801b104:	69bb      	ldr	r3, [r7, #24]
 801b106:	fab3 f383 	clz	r3, r3
 801b10a:	b2db      	uxtb	r3, r3
 801b10c:	3301      	adds	r3, #1
 801b10e:	f003 021f 	and.w	r2, r3, #31
 801b112:	4613      	mov	r3, r2
 801b114:	005b      	lsls	r3, r3, #1
 801b116:	4413      	add	r3, r2
 801b118:	3b1e      	subs	r3, #30
 801b11a:	051b      	lsls	r3, r3, #20
 801b11c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801b120:	430b      	orrs	r3, r1
 801b122:	683a      	ldr	r2, [r7, #0]
 801b124:	6892      	ldr	r2, [r2, #8]
 801b126:	4619      	mov	r1, r3
 801b128:	f7fe fc02 	bl	8019930 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	4b09      	ldr	r3, [pc, #36]	; (801b158 <HAL_ADC_ConfigChannel+0x6e0>)
 801b132:	4013      	ands	r3, r2
 801b134:	2b00      	cmp	r3, #0
 801b136:	f000 80af 	beq.w	801b298 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b142:	d004      	beq.n	801b14e <HAL_ADC_ConfigChannel+0x6d6>
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	4a04      	ldr	r2, [pc, #16]	; (801b15c <HAL_ADC_ConfigChannel+0x6e4>)
 801b14a:	4293      	cmp	r3, r2
 801b14c:	d10a      	bne.n	801b164 <HAL_ADC_ConfigChannel+0x6ec>
 801b14e:	4b04      	ldr	r3, [pc, #16]	; (801b160 <HAL_ADC_ConfigChannel+0x6e8>)
 801b150:	e009      	b.n	801b166 <HAL_ADC_ConfigChannel+0x6ee>
 801b152:	bf00      	nop
 801b154:	407f0000 	.word	0x407f0000
 801b158:	80080000 	.word	0x80080000
 801b15c:	50000100 	.word	0x50000100
 801b160:	50000300 	.word	0x50000300
 801b164:	4b51      	ldr	r3, [pc, #324]	; (801b2ac <HAL_ADC_ConfigChannel+0x834>)
 801b166:	4618      	mov	r0, r3
 801b168:	f7fe fae4 	bl	8019734 <LL_ADC_GetCommonPathInternalCh>
 801b16c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a4e      	ldr	r2, [pc, #312]	; (801b2b0 <HAL_ADC_ConfigChannel+0x838>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d004      	beq.n	801b184 <HAL_ADC_ConfigChannel+0x70c>
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	4a4d      	ldr	r2, [pc, #308]	; (801b2b4 <HAL_ADC_ConfigChannel+0x83c>)
 801b180:	4293      	cmp	r3, r2
 801b182:	d134      	bne.n	801b1ee <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801b184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d12e      	bne.n	801b1ee <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b198:	d17e      	bne.n	801b298 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b1a2:	d004      	beq.n	801b1ae <HAL_ADC_ConfigChannel+0x736>
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	4a43      	ldr	r2, [pc, #268]	; (801b2b8 <HAL_ADC_ConfigChannel+0x840>)
 801b1aa:	4293      	cmp	r3, r2
 801b1ac:	d101      	bne.n	801b1b2 <HAL_ADC_ConfigChannel+0x73a>
 801b1ae:	4a43      	ldr	r2, [pc, #268]	; (801b2bc <HAL_ADC_ConfigChannel+0x844>)
 801b1b0:	e000      	b.n	801b1b4 <HAL_ADC_ConfigChannel+0x73c>
 801b1b2:	4a3e      	ldr	r2, [pc, #248]	; (801b2ac <HAL_ADC_ConfigChannel+0x834>)
 801b1b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b1b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b1bc:	4619      	mov	r1, r3
 801b1be:	4610      	mov	r0, r2
 801b1c0:	f7fe faa5 	bl	801970e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801b1c4:	4b3e      	ldr	r3, [pc, #248]	; (801b2c0 <HAL_ADC_ConfigChannel+0x848>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	099b      	lsrs	r3, r3, #6
 801b1ca:	4a3e      	ldr	r2, [pc, #248]	; (801b2c4 <HAL_ADC_ConfigChannel+0x84c>)
 801b1cc:	fba2 2303 	umull	r2, r3, r2, r3
 801b1d0:	099b      	lsrs	r3, r3, #6
 801b1d2:	1c5a      	adds	r2, r3, #1
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	005b      	lsls	r3, r3, #1
 801b1d8:	4413      	add	r3, r2
 801b1da:	009b      	lsls	r3, r3, #2
 801b1dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b1de:	e002      	b.n	801b1e6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	3b01      	subs	r3, #1
 801b1e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d1f9      	bne.n	801b1e0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b1ec:	e054      	b.n	801b298 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801b1ee:	683b      	ldr	r3, [r7, #0]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	4a35      	ldr	r2, [pc, #212]	; (801b2c8 <HAL_ADC_ConfigChannel+0x850>)
 801b1f4:	4293      	cmp	r3, r2
 801b1f6:	d120      	bne.n	801b23a <HAL_ADC_ConfigChannel+0x7c2>
 801b1f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b1fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b200:	2b00      	cmp	r3, #0
 801b202:	d11a      	bne.n	801b23a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b20c:	d144      	bne.n	801b298 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b216:	d004      	beq.n	801b222 <HAL_ADC_ConfigChannel+0x7aa>
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	4a26      	ldr	r2, [pc, #152]	; (801b2b8 <HAL_ADC_ConfigChannel+0x840>)
 801b21e:	4293      	cmp	r3, r2
 801b220:	d101      	bne.n	801b226 <HAL_ADC_ConfigChannel+0x7ae>
 801b222:	4a26      	ldr	r2, [pc, #152]	; (801b2bc <HAL_ADC_ConfigChannel+0x844>)
 801b224:	e000      	b.n	801b228 <HAL_ADC_ConfigChannel+0x7b0>
 801b226:	4a21      	ldr	r2, [pc, #132]	; (801b2ac <HAL_ADC_ConfigChannel+0x834>)
 801b228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b22c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b230:	4619      	mov	r1, r3
 801b232:	4610      	mov	r0, r2
 801b234:	f7fe fa6b 	bl	801970e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b238:	e02e      	b.n	801b298 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	4a23      	ldr	r2, [pc, #140]	; (801b2cc <HAL_ADC_ConfigChannel+0x854>)
 801b240:	4293      	cmp	r3, r2
 801b242:	d129      	bne.n	801b298 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801b244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d123      	bne.n	801b298 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	4a18      	ldr	r2, [pc, #96]	; (801b2b8 <HAL_ADC_ConfigChannel+0x840>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d01e      	beq.n	801b298 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b262:	d004      	beq.n	801b26e <HAL_ADC_ConfigChannel+0x7f6>
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	4a13      	ldr	r2, [pc, #76]	; (801b2b8 <HAL_ADC_ConfigChannel+0x840>)
 801b26a:	4293      	cmp	r3, r2
 801b26c:	d101      	bne.n	801b272 <HAL_ADC_ConfigChannel+0x7fa>
 801b26e:	4a13      	ldr	r2, [pc, #76]	; (801b2bc <HAL_ADC_ConfigChannel+0x844>)
 801b270:	e000      	b.n	801b274 <HAL_ADC_ConfigChannel+0x7fc>
 801b272:	4a0e      	ldr	r2, [pc, #56]	; (801b2ac <HAL_ADC_ConfigChannel+0x834>)
 801b274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801b27c:	4619      	mov	r1, r3
 801b27e:	4610      	mov	r0, r2
 801b280:	f7fe fa45 	bl	801970e <LL_ADC_SetCommonPathInternalCh>
 801b284:	e008      	b.n	801b298 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b28a:	f043 0220 	orr.w	r2, r3, #32
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b292:	2301      	movs	r3, #1
 801b294:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	2200      	movs	r2, #0
 801b29c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b2a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	37d8      	adds	r7, #216	; 0xd8
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd80      	pop	{r7, pc}
 801b2ac:	50000700 	.word	0x50000700
 801b2b0:	c3210000 	.word	0xc3210000
 801b2b4:	90c00010 	.word	0x90c00010
 801b2b8:	50000100 	.word	0x50000100
 801b2bc:	50000300 	.word	0x50000300
 801b2c0:	20000000 	.word	0x20000000
 801b2c4:	053e2d63 	.word	0x053e2d63
 801b2c8:	c7520000 	.word	0xc7520000
 801b2cc:	cb840000 	.word	0xcb840000

0801b2d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801b2d0:	b580      	push	{r7, lr}
 801b2d2:	b088      	sub	sp, #32
 801b2d4:	af00      	add	r7, sp, #0
 801b2d6:	6078      	str	r0, [r7, #4]
 801b2d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801b2da:	2300      	movs	r3, #0
 801b2dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801b2de:	683b      	ldr	r3, [r7, #0]
 801b2e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	f7fe fc56 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801b2ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	f7fe fc77 	bl	8019be6 <LL_ADC_INJ_IsConversionOngoing>
 801b2f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d103      	bne.n	801b308 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	2b00      	cmp	r3, #0
 801b304:	f000 8098 	beq.w	801b438 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	68db      	ldr	r3, [r3, #12]
 801b30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b312:	2b00      	cmp	r3, #0
 801b314:	d02a      	beq.n	801b36c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	7f5b      	ldrb	r3, [r3, #29]
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d126      	bne.n	801b36c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	7f1b      	ldrb	r3, [r3, #28]
 801b322:	2b01      	cmp	r3, #1
 801b324:	d122      	bne.n	801b36c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801b326:	2301      	movs	r3, #1
 801b328:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b32a:	e014      	b.n	801b356 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801b32c:	69fb      	ldr	r3, [r7, #28]
 801b32e:	4a45      	ldr	r2, [pc, #276]	; (801b444 <ADC_ConversionStop+0x174>)
 801b330:	4293      	cmp	r3, r2
 801b332:	d90d      	bls.n	801b350 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b338:	f043 0210 	orr.w	r2, r3, #16
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b344:	f043 0201 	orr.w	r2, r3, #1
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b34c:	2301      	movs	r3, #1
 801b34e:	e074      	b.n	801b43a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801b350:	69fb      	ldr	r3, [r7, #28]
 801b352:	3301      	adds	r3, #1
 801b354:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b360:	2b40      	cmp	r3, #64	; 0x40
 801b362:	d1e3      	bne.n	801b32c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2240      	movs	r2, #64	; 0x40
 801b36a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801b36c:	69bb      	ldr	r3, [r7, #24]
 801b36e:	2b02      	cmp	r3, #2
 801b370:	d014      	beq.n	801b39c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	4618      	mov	r0, r3
 801b378:	f7fe fc0e 	bl	8019b98 <LL_ADC_REG_IsConversionOngoing>
 801b37c:	4603      	mov	r3, r0
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d00c      	beq.n	801b39c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	4618      	mov	r0, r3
 801b388:	f7fe fbcb 	bl	8019b22 <LL_ADC_IsDisableOngoing>
 801b38c:	4603      	mov	r3, r0
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d104      	bne.n	801b39c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	4618      	mov	r0, r3
 801b398:	f7fe fbea 	bl	8019b70 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801b39c:	69bb      	ldr	r3, [r7, #24]
 801b39e:	2b01      	cmp	r3, #1
 801b3a0:	d014      	beq.n	801b3cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7fe fc1d 	bl	8019be6 <LL_ADC_INJ_IsConversionOngoing>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d00c      	beq.n	801b3cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f7fe fbb3 	bl	8019b22 <LL_ADC_IsDisableOngoing>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d104      	bne.n	801b3cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f7fe fbf9 	bl	8019bbe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801b3cc:	69bb      	ldr	r3, [r7, #24]
 801b3ce:	2b02      	cmp	r3, #2
 801b3d0:	d005      	beq.n	801b3de <ADC_ConversionStop+0x10e>
 801b3d2:	69bb      	ldr	r3, [r7, #24]
 801b3d4:	2b03      	cmp	r3, #3
 801b3d6:	d105      	bne.n	801b3e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801b3d8:	230c      	movs	r3, #12
 801b3da:	617b      	str	r3, [r7, #20]
        break;
 801b3dc:	e005      	b.n	801b3ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801b3de:	2308      	movs	r3, #8
 801b3e0:	617b      	str	r3, [r7, #20]
        break;
 801b3e2:	e002      	b.n	801b3ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801b3e4:	2304      	movs	r3, #4
 801b3e6:	617b      	str	r3, [r7, #20]
        break;
 801b3e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801b3ea:	f7fe f94f 	bl	801968c <HAL_GetTick>
 801b3ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b3f0:	e01b      	b.n	801b42a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801b3f2:	f7fe f94b 	bl	801968c <HAL_GetTick>
 801b3f6:	4602      	mov	r2, r0
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	1ad3      	subs	r3, r2, r3
 801b3fc:	2b05      	cmp	r3, #5
 801b3fe:	d914      	bls.n	801b42a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	689a      	ldr	r2, [r3, #8]
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	4013      	ands	r3, r2
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d00d      	beq.n	801b42a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b412:	f043 0210 	orr.w	r2, r3, #16
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b41e:	f043 0201 	orr.w	r2, r3, #1
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b426:	2301      	movs	r3, #1
 801b428:	e007      	b.n	801b43a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	689a      	ldr	r2, [r3, #8]
 801b430:	697b      	ldr	r3, [r7, #20]
 801b432:	4013      	ands	r3, r2
 801b434:	2b00      	cmp	r3, #0
 801b436:	d1dc      	bne.n	801b3f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801b438:	2300      	movs	r3, #0
}
 801b43a:	4618      	mov	r0, r3
 801b43c:	3720      	adds	r7, #32
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}
 801b442:	bf00      	nop
 801b444:	a33fffff 	.word	0xa33fffff

0801b448 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b084      	sub	sp, #16
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	4618      	mov	r0, r3
 801b456:	f7fe fb51 	bl	8019afc <LL_ADC_IsEnabled>
 801b45a:	4603      	mov	r3, r0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d14d      	bne.n	801b4fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	689a      	ldr	r2, [r3, #8]
 801b466:	4b28      	ldr	r3, [pc, #160]	; (801b508 <ADC_Enable+0xc0>)
 801b468:	4013      	ands	r3, r2
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d00d      	beq.n	801b48a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b472:	f043 0210 	orr.w	r2, r3, #16
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b47e:	f043 0201 	orr.w	r2, r3, #1
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801b486:	2301      	movs	r3, #1
 801b488:	e039      	b.n	801b4fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	4618      	mov	r0, r3
 801b490:	f7fe fb0c 	bl	8019aac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801b494:	f7fe f8fa 	bl	801968c <HAL_GetTick>
 801b498:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b49a:	e028      	b.n	801b4ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	f7fe fb2b 	bl	8019afc <LL_ADC_IsEnabled>
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d104      	bne.n	801b4b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	f7fe fafb 	bl	8019aac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801b4b6:	f7fe f8e9 	bl	801968c <HAL_GetTick>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	1ad3      	subs	r3, r2, r3
 801b4c0:	2b02      	cmp	r3, #2
 801b4c2:	d914      	bls.n	801b4ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	f003 0301 	and.w	r3, r3, #1
 801b4ce:	2b01      	cmp	r3, #1
 801b4d0:	d00d      	beq.n	801b4ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4d6:	f043 0210 	orr.w	r2, r3, #16
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4e2:	f043 0201 	orr.w	r2, r3, #1
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	e007      	b.n	801b4fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	f003 0301 	and.w	r3, r3, #1
 801b4f8:	2b01      	cmp	r3, #1
 801b4fa:	d1cf      	bne.n	801b49c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b4fc:	2300      	movs	r3, #0
}
 801b4fe:	4618      	mov	r0, r3
 801b500:	3710      	adds	r7, #16
 801b502:	46bd      	mov	sp, r7
 801b504:	bd80      	pop	{r7, pc}
 801b506:	bf00      	nop
 801b508:	8000003f 	.word	0x8000003f

0801b50c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b084      	sub	sp, #16
 801b510:	af00      	add	r7, sp, #0
 801b512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	4618      	mov	r0, r3
 801b51a:	f7fe fb02 	bl	8019b22 <LL_ADC_IsDisableOngoing>
 801b51e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	4618      	mov	r0, r3
 801b526:	f7fe fae9 	bl	8019afc <LL_ADC_IsEnabled>
 801b52a:	4603      	mov	r3, r0
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d047      	beq.n	801b5c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d144      	bne.n	801b5c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	689b      	ldr	r3, [r3, #8]
 801b53c:	f003 030d 	and.w	r3, r3, #13
 801b540:	2b01      	cmp	r3, #1
 801b542:	d10c      	bne.n	801b55e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	4618      	mov	r0, r3
 801b54a:	f7fe fac3 	bl	8019ad4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2203      	movs	r2, #3
 801b554:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801b556:	f7fe f899 	bl	801968c <HAL_GetTick>
 801b55a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b55c:	e029      	b.n	801b5b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b562:	f043 0210 	orr.w	r2, r3, #16
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b56e:	f043 0201 	orr.w	r2, r3, #1
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801b576:	2301      	movs	r3, #1
 801b578:	e023      	b.n	801b5c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801b57a:	f7fe f887 	bl	801968c <HAL_GetTick>
 801b57e:	4602      	mov	r2, r0
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	1ad3      	subs	r3, r2, r3
 801b584:	2b02      	cmp	r3, #2
 801b586:	d914      	bls.n	801b5b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	689b      	ldr	r3, [r3, #8]
 801b58e:	f003 0301 	and.w	r3, r3, #1
 801b592:	2b00      	cmp	r3, #0
 801b594:	d00d      	beq.n	801b5b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b59a:	f043 0210 	orr.w	r2, r3, #16
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b5a6:	f043 0201 	orr.w	r2, r3, #1
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b5ae:	2301      	movs	r3, #1
 801b5b0:	e007      	b.n	801b5c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	689b      	ldr	r3, [r3, #8]
 801b5b8:	f003 0301 	and.w	r3, r3, #1
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d1dc      	bne.n	801b57a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b5c0:	2300      	movs	r3, #0
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	3710      	adds	r7, #16
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd80      	pop	{r7, pc}

0801b5ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801b5ca:	b580      	push	{r7, lr}
 801b5cc:	b084      	sub	sp, #16
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d14b      	bne.n	801b67c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	f003 0308 	and.w	r3, r3, #8
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d021      	beq.n	801b642 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	4618      	mov	r0, r3
 801b604:	f7fe f942 	bl	801988c <LL_ADC_REG_IsTriggerSourceSWStart>
 801b608:	4603      	mov	r3, r0
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d032      	beq.n	801b674 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	68db      	ldr	r3, [r3, #12]
 801b614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d12b      	bne.n	801b674 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b62c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b630:	2b00      	cmp	r3, #0
 801b632:	d11f      	bne.n	801b674 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b638:	f043 0201 	orr.w	r2, r3, #1
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	65da      	str	r2, [r3, #92]	; 0x5c
 801b640:	e018      	b.n	801b674 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	68db      	ldr	r3, [r3, #12]
 801b648:	f003 0302 	and.w	r3, r3, #2
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d111      	bne.n	801b674 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b664:	2b00      	cmp	r3, #0
 801b666:	d105      	bne.n	801b674 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b66c:	f043 0201 	orr.w	r2, r3, #1
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b674:	68f8      	ldr	r0, [r7, #12]
 801b676:	f7ed fc67 	bl	8008f48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b67a:	e00e      	b.n	801b69a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b680:	f003 0310 	and.w	r3, r3, #16
 801b684:	2b00      	cmp	r3, #0
 801b686:	d003      	beq.n	801b690 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801b688:	68f8      	ldr	r0, [r7, #12]
 801b68a:	f7ff f9eb 	bl	801aa64 <HAL_ADC_ErrorCallback>
}
 801b68e:	e004      	b.n	801b69a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	4798      	blx	r3
}
 801b69a:	bf00      	nop
 801b69c:	3710      	adds	r7, #16
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}

0801b6a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801b6a2:	b580      	push	{r7, lr}
 801b6a4:	b084      	sub	sp, #16
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b6b0:	68f8      	ldr	r0, [r7, #12]
 801b6b2:	f7ff f9c3 	bl	801aa3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b6b6:	bf00      	nop
 801b6b8:	3710      	adds	r7, #16
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}

0801b6be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801b6be:	b580      	push	{r7, lr}
 801b6c0:	b084      	sub	sp, #16
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b6dc:	f043 0204 	orr.w	r2, r3, #4
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b6e4:	68f8      	ldr	r0, [r7, #12]
 801b6e6:	f7ff f9bd 	bl	801aa64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b6ea:	bf00      	nop
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}

0801b6f2 <LL_ADC_IsEnabled>:
{
 801b6f2:	b480      	push	{r7}
 801b6f4:	b083      	sub	sp, #12
 801b6f6:	af00      	add	r7, sp, #0
 801b6f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	689b      	ldr	r3, [r3, #8]
 801b6fe:	f003 0301 	and.w	r3, r3, #1
 801b702:	2b01      	cmp	r3, #1
 801b704:	d101      	bne.n	801b70a <LL_ADC_IsEnabled+0x18>
 801b706:	2301      	movs	r3, #1
 801b708:	e000      	b.n	801b70c <LL_ADC_IsEnabled+0x1a>
 801b70a:	2300      	movs	r3, #0
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	370c      	adds	r7, #12
 801b710:	46bd      	mov	sp, r7
 801b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b716:	4770      	bx	lr

0801b718 <LL_ADC_StartCalibration>:
{
 801b718:	b480      	push	{r7}
 801b71a:	b083      	sub	sp, #12
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
 801b720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	689b      	ldr	r3, [r3, #8]
 801b726:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b72a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b72e:	683a      	ldr	r2, [r7, #0]
 801b730:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801b734:	4313      	orrs	r3, r2
 801b736:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	609a      	str	r2, [r3, #8]
}
 801b73e:	bf00      	nop
 801b740:	370c      	adds	r7, #12
 801b742:	46bd      	mov	sp, r7
 801b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b748:	4770      	bx	lr

0801b74a <LL_ADC_IsCalibrationOnGoing>:
{
 801b74a:	b480      	push	{r7}
 801b74c:	b083      	sub	sp, #12
 801b74e:	af00      	add	r7, sp, #0
 801b750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	689b      	ldr	r3, [r3, #8]
 801b756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b75a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b75e:	d101      	bne.n	801b764 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801b760:	2301      	movs	r3, #1
 801b762:	e000      	b.n	801b766 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801b764:	2300      	movs	r3, #0
}
 801b766:	4618      	mov	r0, r3
 801b768:	370c      	adds	r7, #12
 801b76a:	46bd      	mov	sp, r7
 801b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b770:	4770      	bx	lr

0801b772 <LL_ADC_REG_IsConversionOngoing>:
{
 801b772:	b480      	push	{r7}
 801b774:	b083      	sub	sp, #12
 801b776:	af00      	add	r7, sp, #0
 801b778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	689b      	ldr	r3, [r3, #8]
 801b77e:	f003 0304 	and.w	r3, r3, #4
 801b782:	2b04      	cmp	r3, #4
 801b784:	d101      	bne.n	801b78a <LL_ADC_REG_IsConversionOngoing+0x18>
 801b786:	2301      	movs	r3, #1
 801b788:	e000      	b.n	801b78c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801b78a:	2300      	movs	r3, #0
}
 801b78c:	4618      	mov	r0, r3
 801b78e:	370c      	adds	r7, #12
 801b790:	46bd      	mov	sp, r7
 801b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b796:	4770      	bx	lr

0801b798 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b084      	sub	sp, #16
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
 801b7a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b7ac:	2b01      	cmp	r3, #1
 801b7ae:	d101      	bne.n	801b7b4 <HAL_ADCEx_Calibration_Start+0x1c>
 801b7b0:	2302      	movs	r3, #2
 801b7b2:	e04d      	b.n	801b850 <HAL_ADCEx_Calibration_Start+0xb8>
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	2201      	movs	r2, #1
 801b7b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f7ff fea5 	bl	801b50c <ADC_Disable>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801b7c6:	7bfb      	ldrb	r3, [r7, #15]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d136      	bne.n	801b83a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b7d4:	f023 0302 	bic.w	r3, r3, #2
 801b7d8:	f043 0202 	orr.w	r2, r3, #2
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	6839      	ldr	r1, [r7, #0]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7ff ff96 	bl	801b718 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b7ec:	e014      	b.n	801b818 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	3301      	adds	r3, #1
 801b7f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801b7f4:	68bb      	ldr	r3, [r7, #8]
 801b7f6:	4a18      	ldr	r2, [pc, #96]	; (801b858 <HAL_ADCEx_Calibration_Start+0xc0>)
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	d90d      	bls.n	801b818 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b800:	f023 0312 	bic.w	r3, r3, #18
 801b804:	f043 0210 	orr.w	r2, r3, #16
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	2200      	movs	r2, #0
 801b810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801b814:	2301      	movs	r3, #1
 801b816:	e01b      	b.n	801b850 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7ff ff94 	bl	801b74a <LL_ADC_IsCalibrationOnGoing>
 801b822:	4603      	mov	r3, r0
 801b824:	2b00      	cmp	r3, #0
 801b826:	d1e2      	bne.n	801b7ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b82c:	f023 0303 	bic.w	r3, r3, #3
 801b830:	f043 0201 	orr.w	r2, r3, #1
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	65da      	str	r2, [r3, #92]	; 0x5c
 801b838:	e005      	b.n	801b846 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b83e:	f043 0210 	orr.w	r2, r3, #16
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	2200      	movs	r2, #0
 801b84a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b84e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b850:	4618      	mov	r0, r3
 801b852:	3710      	adds	r7, #16
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}
 801b858:	0004de01 	.word	0x0004de01

0801b85c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801b85c:	b480      	push	{r7}
 801b85e:	b083      	sub	sp, #12
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801b864:	bf00      	nop
 801b866:	370c      	adds	r7, #12
 801b868:	46bd      	mov	sp, r7
 801b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86e:	4770      	bx	lr

0801b870 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801b870:	b480      	push	{r7}
 801b872:	b083      	sub	sp, #12
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801b878:	bf00      	nop
 801b87a:	370c      	adds	r7, #12
 801b87c:	46bd      	mov	sp, r7
 801b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b882:	4770      	bx	lr

0801b884 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801b884:	b480      	push	{r7}
 801b886:	b083      	sub	sp, #12
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801b88c:	bf00      	nop
 801b88e:	370c      	adds	r7, #12
 801b890:	46bd      	mov	sp, r7
 801b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b896:	4770      	bx	lr

0801b898 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801b898:	b480      	push	{r7}
 801b89a:	b083      	sub	sp, #12
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801b8a0:	bf00      	nop
 801b8a2:	370c      	adds	r7, #12
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8aa:	4770      	bx	lr

0801b8ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801b8ac:	b480      	push	{r7}
 801b8ae:	b083      	sub	sp, #12
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801b8b4:	bf00      	nop
 801b8b6:	370c      	adds	r7, #12
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8be:	4770      	bx	lr

0801b8c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801b8c0:	b590      	push	{r4, r7, lr}
 801b8c2:	b0a1      	sub	sp, #132	; 0x84
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b8d6:	2b01      	cmp	r3, #1
 801b8d8:	d101      	bne.n	801b8de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801b8da:	2302      	movs	r3, #2
 801b8dc:	e0cb      	b.n	801ba76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	2201      	movs	r2, #1
 801b8e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b8f6:	d102      	bne.n	801b8fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801b8f8:	4b61      	ldr	r3, [pc, #388]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b8fa:	60bb      	str	r3, [r7, #8]
 801b8fc:	e001      	b.n	801b902 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801b8fe:	2300      	movs	r3, #0
 801b900:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801b902:	68bb      	ldr	r3, [r7, #8]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d10b      	bne.n	801b920 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b90c:	f043 0220 	orr.w	r2, r3, #32
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	2200      	movs	r2, #0
 801b918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801b91c:	2301      	movs	r3, #1
 801b91e:	e0aa      	b.n	801ba76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801b920:	68bb      	ldr	r3, [r7, #8]
 801b922:	4618      	mov	r0, r3
 801b924:	f7ff ff25 	bl	801b772 <LL_ADC_REG_IsConversionOngoing>
 801b928:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	4618      	mov	r0, r3
 801b930:	f7ff ff1f 	bl	801b772 <LL_ADC_REG_IsConversionOngoing>
 801b934:	4603      	mov	r3, r0
 801b936:	2b00      	cmp	r3, #0
 801b938:	f040 808c 	bne.w	801ba54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801b93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b93e:	2b00      	cmp	r3, #0
 801b940:	f040 8088 	bne.w	801ba54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b94c:	d004      	beq.n	801b958 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4a4b      	ldr	r2, [pc, #300]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b954:	4293      	cmp	r3, r2
 801b956:	d101      	bne.n	801b95c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801b958:	4b4a      	ldr	r3, [pc, #296]	; (801ba84 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801b95a:	e000      	b.n	801b95e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801b95c:	4b4a      	ldr	r3, [pc, #296]	; (801ba88 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801b95e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	2b00      	cmp	r3, #0
 801b966:	d041      	beq.n	801b9ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801b968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b96a:	689b      	ldr	r3, [r3, #8]
 801b96c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b970:	683b      	ldr	r3, [r7, #0]
 801b972:	6859      	ldr	r1, [r3, #4]
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b97a:	035b      	lsls	r3, r3, #13
 801b97c:	430b      	orrs	r3, r1
 801b97e:	431a      	orrs	r2, r3
 801b980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b98c:	d004      	beq.n	801b998 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	4a3b      	ldr	r2, [pc, #236]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b994:	4293      	cmp	r3, r2
 801b996:	d10f      	bne.n	801b9b8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b998:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b99c:	f7ff fea9 	bl	801b6f2 <LL_ADC_IsEnabled>
 801b9a0:	4604      	mov	r4, r0
 801b9a2:	4837      	ldr	r0, [pc, #220]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9a4:	f7ff fea5 	bl	801b6f2 <LL_ADC_IsEnabled>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	4323      	orrs	r3, r4
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	bf0c      	ite	eq
 801b9b0:	2301      	moveq	r3, #1
 801b9b2:	2300      	movne	r3, #0
 801b9b4:	b2db      	uxtb	r3, r3
 801b9b6:	e008      	b.n	801b9ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801b9b8:	4834      	ldr	r0, [pc, #208]	; (801ba8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b9ba:	f7ff fe9a 	bl	801b6f2 <LL_ADC_IsEnabled>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	bf0c      	ite	eq
 801b9c4:	2301      	moveq	r3, #1
 801b9c6:	2300      	movne	r3, #0
 801b9c8:	b2db      	uxtb	r3, r3
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d04c      	beq.n	801ba68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801b9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9d0:	689b      	ldr	r3, [r3, #8]
 801b9d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b9d6:	f023 030f 	bic.w	r3, r3, #15
 801b9da:	683a      	ldr	r2, [r7, #0]
 801b9dc:	6811      	ldr	r1, [r2, #0]
 801b9de:	683a      	ldr	r2, [r7, #0]
 801b9e0:	6892      	ldr	r2, [r2, #8]
 801b9e2:	430a      	orrs	r2, r1
 801b9e4:	431a      	orrs	r2, r3
 801b9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b9ea:	e03d      	b.n	801ba68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801b9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9ee:	689b      	ldr	r3, [r3, #8]
 801b9f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b9f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ba00:	d004      	beq.n	801ba0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	4a1e      	ldr	r2, [pc, #120]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ba08:	4293      	cmp	r3, r2
 801ba0a:	d10f      	bne.n	801ba2c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801ba0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ba10:	f7ff fe6f 	bl	801b6f2 <LL_ADC_IsEnabled>
 801ba14:	4604      	mov	r4, r0
 801ba16:	481a      	ldr	r0, [pc, #104]	; (801ba80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ba18:	f7ff fe6b 	bl	801b6f2 <LL_ADC_IsEnabled>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	4323      	orrs	r3, r4
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	bf0c      	ite	eq
 801ba24:	2301      	moveq	r3, #1
 801ba26:	2300      	movne	r3, #0
 801ba28:	b2db      	uxtb	r3, r3
 801ba2a:	e008      	b.n	801ba3e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801ba2c:	4817      	ldr	r0, [pc, #92]	; (801ba8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ba2e:	f7ff fe60 	bl	801b6f2 <LL_ADC_IsEnabled>
 801ba32:	4603      	mov	r3, r0
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	bf0c      	ite	eq
 801ba38:	2301      	moveq	r3, #1
 801ba3a:	2300      	movne	r3, #0
 801ba3c:	b2db      	uxtb	r3, r3
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d012      	beq.n	801ba68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801ba42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba44:	689b      	ldr	r3, [r3, #8]
 801ba46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ba4a:	f023 030f 	bic.w	r3, r3, #15
 801ba4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ba50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ba52:	e009      	b.n	801ba68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba58:	f043 0220 	orr.w	r2, r3, #32
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801ba60:	2301      	movs	r3, #1
 801ba62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801ba66:	e000      	b.n	801ba6a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ba68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ba72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801ba76:	4618      	mov	r0, r3
 801ba78:	3784      	adds	r7, #132	; 0x84
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	bd90      	pop	{r4, r7, pc}
 801ba7e:	bf00      	nop
 801ba80:	50000100 	.word	0x50000100
 801ba84:	50000300 	.word	0x50000300
 801ba88:	50000700 	.word	0x50000700
 801ba8c:	50000400 	.word	0x50000400

0801ba90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ba90:	b480      	push	{r7}
 801ba92:	b085      	sub	sp, #20
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	f003 0307 	and.w	r3, r3, #7
 801ba9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801baa0:	4b0c      	ldr	r3, [pc, #48]	; (801bad4 <__NVIC_SetPriorityGrouping+0x44>)
 801baa2:	68db      	ldr	r3, [r3, #12]
 801baa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801baa6:	68ba      	ldr	r2, [r7, #8]
 801baa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801baac:	4013      	ands	r3, r2
 801baae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bab4:	68bb      	ldr	r3, [r7, #8]
 801bab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801bab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801babc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bac2:	4a04      	ldr	r2, [pc, #16]	; (801bad4 <__NVIC_SetPriorityGrouping+0x44>)
 801bac4:	68bb      	ldr	r3, [r7, #8]
 801bac6:	60d3      	str	r3, [r2, #12]
}
 801bac8:	bf00      	nop
 801baca:	3714      	adds	r7, #20
 801bacc:	46bd      	mov	sp, r7
 801bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad2:	4770      	bx	lr
 801bad4:	e000ed00 	.word	0xe000ed00

0801bad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801bad8:	b480      	push	{r7}
 801bada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801badc:	4b04      	ldr	r3, [pc, #16]	; (801baf0 <__NVIC_GetPriorityGrouping+0x18>)
 801bade:	68db      	ldr	r3, [r3, #12]
 801bae0:	0a1b      	lsrs	r3, r3, #8
 801bae2:	f003 0307 	and.w	r3, r3, #7
}
 801bae6:	4618      	mov	r0, r3
 801bae8:	46bd      	mov	sp, r7
 801baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baee:	4770      	bx	lr
 801baf0:	e000ed00 	.word	0xe000ed00

0801baf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801baf4:	b480      	push	{r7}
 801baf6:	b083      	sub	sp, #12
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	4603      	mov	r3, r0
 801bafc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bafe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	db0b      	blt.n	801bb1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bb06:	79fb      	ldrb	r3, [r7, #7]
 801bb08:	f003 021f 	and.w	r2, r3, #31
 801bb0c:	4907      	ldr	r1, [pc, #28]	; (801bb2c <__NVIC_EnableIRQ+0x38>)
 801bb0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb12:	095b      	lsrs	r3, r3, #5
 801bb14:	2001      	movs	r0, #1
 801bb16:	fa00 f202 	lsl.w	r2, r0, r2
 801bb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801bb1e:	bf00      	nop
 801bb20:	370c      	adds	r7, #12
 801bb22:	46bd      	mov	sp, r7
 801bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb28:	4770      	bx	lr
 801bb2a:	bf00      	nop
 801bb2c:	e000e100 	.word	0xe000e100

0801bb30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bb30:	b480      	push	{r7}
 801bb32:	b083      	sub	sp, #12
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	4603      	mov	r3, r0
 801bb38:	6039      	str	r1, [r7, #0]
 801bb3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bb3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	db0a      	blt.n	801bb5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	b2da      	uxtb	r2, r3
 801bb48:	490c      	ldr	r1, [pc, #48]	; (801bb7c <__NVIC_SetPriority+0x4c>)
 801bb4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb4e:	0112      	lsls	r2, r2, #4
 801bb50:	b2d2      	uxtb	r2, r2
 801bb52:	440b      	add	r3, r1
 801bb54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801bb58:	e00a      	b.n	801bb70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	b2da      	uxtb	r2, r3
 801bb5e:	4908      	ldr	r1, [pc, #32]	; (801bb80 <__NVIC_SetPriority+0x50>)
 801bb60:	79fb      	ldrb	r3, [r7, #7]
 801bb62:	f003 030f 	and.w	r3, r3, #15
 801bb66:	3b04      	subs	r3, #4
 801bb68:	0112      	lsls	r2, r2, #4
 801bb6a:	b2d2      	uxtb	r2, r2
 801bb6c:	440b      	add	r3, r1
 801bb6e:	761a      	strb	r2, [r3, #24]
}
 801bb70:	bf00      	nop
 801bb72:	370c      	adds	r7, #12
 801bb74:	46bd      	mov	sp, r7
 801bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7a:	4770      	bx	lr
 801bb7c:	e000e100 	.word	0xe000e100
 801bb80:	e000ed00 	.word	0xe000ed00

0801bb84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bb84:	b480      	push	{r7}
 801bb86:	b089      	sub	sp, #36	; 0x24
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	60f8      	str	r0, [r7, #12]
 801bb8c:	60b9      	str	r1, [r7, #8]
 801bb8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	f003 0307 	and.w	r3, r3, #7
 801bb96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bb98:	69fb      	ldr	r3, [r7, #28]
 801bb9a:	f1c3 0307 	rsb	r3, r3, #7
 801bb9e:	2b04      	cmp	r3, #4
 801bba0:	bf28      	it	cs
 801bba2:	2304      	movcs	r3, #4
 801bba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bba6:	69fb      	ldr	r3, [r7, #28]
 801bba8:	3304      	adds	r3, #4
 801bbaa:	2b06      	cmp	r3, #6
 801bbac:	d902      	bls.n	801bbb4 <NVIC_EncodePriority+0x30>
 801bbae:	69fb      	ldr	r3, [r7, #28]
 801bbb0:	3b03      	subs	r3, #3
 801bbb2:	e000      	b.n	801bbb6 <NVIC_EncodePriority+0x32>
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 801bbbc:	69bb      	ldr	r3, [r7, #24]
 801bbbe:	fa02 f303 	lsl.w	r3, r2, r3
 801bbc2:	43da      	mvns	r2, r3
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	401a      	ands	r2, r3
 801bbc8:	697b      	ldr	r3, [r7, #20]
 801bbca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bbcc:	f04f 31ff 	mov.w	r1, #4294967295
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	fa01 f303 	lsl.w	r3, r1, r3
 801bbd6:	43d9      	mvns	r1, r3
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bbdc:	4313      	orrs	r3, r2
         );
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	3724      	adds	r7, #36	; 0x24
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe8:	4770      	bx	lr
	...

0801bbec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b082      	sub	sp, #8
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	3b01      	subs	r3, #1
 801bbf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bbfc:	d301      	bcc.n	801bc02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bbfe:	2301      	movs	r3, #1
 801bc00:	e00f      	b.n	801bc22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bc02:	4a0a      	ldr	r2, [pc, #40]	; (801bc2c <SysTick_Config+0x40>)
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	3b01      	subs	r3, #1
 801bc08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bc0a:	210f      	movs	r1, #15
 801bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc10:	f7ff ff8e 	bl	801bb30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bc14:	4b05      	ldr	r3, [pc, #20]	; (801bc2c <SysTick_Config+0x40>)
 801bc16:	2200      	movs	r2, #0
 801bc18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bc1a:	4b04      	ldr	r3, [pc, #16]	; (801bc2c <SysTick_Config+0x40>)
 801bc1c:	2207      	movs	r2, #7
 801bc1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bc20:	2300      	movs	r3, #0
}
 801bc22:	4618      	mov	r0, r3
 801bc24:	3708      	adds	r7, #8
 801bc26:	46bd      	mov	sp, r7
 801bc28:	bd80      	pop	{r7, pc}
 801bc2a:	bf00      	nop
 801bc2c:	e000e010 	.word	0xe000e010

0801bc30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b082      	sub	sp, #8
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bc38:	6878      	ldr	r0, [r7, #4]
 801bc3a:	f7ff ff29 	bl	801ba90 <__NVIC_SetPriorityGrouping>
}
 801bc3e:	bf00      	nop
 801bc40:	3708      	adds	r7, #8
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}

0801bc46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bc46:	b580      	push	{r7, lr}
 801bc48:	b086      	sub	sp, #24
 801bc4a:	af00      	add	r7, sp, #0
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	60b9      	str	r1, [r7, #8]
 801bc50:	607a      	str	r2, [r7, #4]
 801bc52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bc54:	f7ff ff40 	bl	801bad8 <__NVIC_GetPriorityGrouping>
 801bc58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bc5a:	687a      	ldr	r2, [r7, #4]
 801bc5c:	68b9      	ldr	r1, [r7, #8]
 801bc5e:	6978      	ldr	r0, [r7, #20]
 801bc60:	f7ff ff90 	bl	801bb84 <NVIC_EncodePriority>
 801bc64:	4602      	mov	r2, r0
 801bc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc6a:	4611      	mov	r1, r2
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f7ff ff5f 	bl	801bb30 <__NVIC_SetPriority>
}
 801bc72:	bf00      	nop
 801bc74:	3718      	adds	r7, #24
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}

0801bc7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bc7a:	b580      	push	{r7, lr}
 801bc7c:	b082      	sub	sp, #8
 801bc7e:	af00      	add	r7, sp, #0
 801bc80:	4603      	mov	r3, r0
 801bc82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bc84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc88:	4618      	mov	r0, r3
 801bc8a:	f7ff ff33 	bl	801baf4 <__NVIC_EnableIRQ>
}
 801bc8e:	bf00      	nop
 801bc90:	3708      	adds	r7, #8
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}

0801bc96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bc96:	b580      	push	{r7, lr}
 801bc98:	b082      	sub	sp, #8
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7ff ffa4 	bl	801bbec <SysTick_Config>
 801bca4:	4603      	mov	r3, r0
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	3708      	adds	r7, #8
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bd80      	pop	{r7, pc}
	...

0801bcb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b084      	sub	sp, #16
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d101      	bne.n	801bcc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	e08d      	b.n	801bdde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	461a      	mov	r2, r3
 801bcc8:	4b47      	ldr	r3, [pc, #284]	; (801bde8 <HAL_DMA_Init+0x138>)
 801bcca:	429a      	cmp	r2, r3
 801bccc:	d80f      	bhi.n	801bcee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	4b45      	ldr	r3, [pc, #276]	; (801bdec <HAL_DMA_Init+0x13c>)
 801bcd6:	4413      	add	r3, r2
 801bcd8:	4a45      	ldr	r2, [pc, #276]	; (801bdf0 <HAL_DMA_Init+0x140>)
 801bcda:	fba2 2303 	umull	r2, r3, r2, r3
 801bcde:	091b      	lsrs	r3, r3, #4
 801bce0:	009a      	lsls	r2, r3, #2
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	4a42      	ldr	r2, [pc, #264]	; (801bdf4 <HAL_DMA_Init+0x144>)
 801bcea:	641a      	str	r2, [r3, #64]	; 0x40
 801bcec:	e00e      	b.n	801bd0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	461a      	mov	r2, r3
 801bcf4:	4b40      	ldr	r3, [pc, #256]	; (801bdf8 <HAL_DMA_Init+0x148>)
 801bcf6:	4413      	add	r3, r2
 801bcf8:	4a3d      	ldr	r2, [pc, #244]	; (801bdf0 <HAL_DMA_Init+0x140>)
 801bcfa:	fba2 2303 	umull	r2, r3, r2, r3
 801bcfe:	091b      	lsrs	r3, r3, #4
 801bd00:	009a      	lsls	r2, r3, #2
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	4a3c      	ldr	r2, [pc, #240]	; (801bdfc <HAL_DMA_Init+0x14c>)
 801bd0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	2202      	movs	r2, #2
 801bd10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801bd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801bd30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	691b      	ldr	r3, [r3, #16]
 801bd36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	699b      	ldr	r3, [r3, #24]
 801bd42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	6a1b      	ldr	r3, [r3, #32]
 801bd4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801bd50:	68fa      	ldr	r2, [r7, #12]
 801bd52:	4313      	orrs	r3, r2
 801bd54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	68fa      	ldr	r2, [r7, #12]
 801bd5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f000 fa10 	bl	801c184 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	689b      	ldr	r3, [r3, #8]
 801bd68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bd6c:	d102      	bne.n	801bd74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	2200      	movs	r2, #0
 801bd72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	685a      	ldr	r2, [r3, #4]
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bd7c:	b2d2      	uxtb	r2, r2
 801bd7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bd84:	687a      	ldr	r2, [r7, #4]
 801bd86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bd88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d010      	beq.n	801bdb4 <HAL_DMA_Init+0x104>
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	2b04      	cmp	r3, #4
 801bd98:	d80c      	bhi.n	801bdb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801bd9a:	6878      	ldr	r0, [r7, #4]
 801bd9c:	f000 fa30 	bl	801c200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bda4:	2200      	movs	r2, #0
 801bda6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bdac:	687a      	ldr	r2, [r7, #4]
 801bdae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bdb0:	605a      	str	r2, [r3, #4]
 801bdb2:	e008      	b.n	801bdc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2200      	movs	r2, #0
 801bdca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	2201      	movs	r2, #1
 801bdd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801bddc:	2300      	movs	r3, #0
}
 801bdde:	4618      	mov	r0, r3
 801bde0:	3710      	adds	r7, #16
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	40020407 	.word	0x40020407
 801bdec:	bffdfff8 	.word	0xbffdfff8
 801bdf0:	cccccccd 	.word	0xcccccccd
 801bdf4:	40020000 	.word	0x40020000
 801bdf8:	bffdfbf8 	.word	0xbffdfbf8
 801bdfc:	40020400 	.word	0x40020400

0801be00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801be00:	b580      	push	{r7, lr}
 801be02:	b086      	sub	sp, #24
 801be04:	af00      	add	r7, sp, #0
 801be06:	60f8      	str	r0, [r7, #12]
 801be08:	60b9      	str	r1, [r7, #8]
 801be0a:	607a      	str	r2, [r7, #4]
 801be0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801be0e:	2300      	movs	r3, #0
 801be10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801be18:	2b01      	cmp	r3, #1
 801be1a:	d101      	bne.n	801be20 <HAL_DMA_Start_IT+0x20>
 801be1c:	2302      	movs	r3, #2
 801be1e:	e066      	b.n	801beee <HAL_DMA_Start_IT+0xee>
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	2201      	movs	r2, #1
 801be24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801be2e:	b2db      	uxtb	r3, r3
 801be30:	2b01      	cmp	r3, #1
 801be32:	d155      	bne.n	801bee0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	2202      	movs	r2, #2
 801be38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	2200      	movs	r2, #0
 801be40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	681a      	ldr	r2, [r3, #0]
 801be48:	68fb      	ldr	r3, [r7, #12]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	f022 0201 	bic.w	r2, r2, #1
 801be50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	687a      	ldr	r2, [r7, #4]
 801be56:	68b9      	ldr	r1, [r7, #8]
 801be58:	68f8      	ldr	r0, [r7, #12]
 801be5a:	f000 f954 	bl	801c106 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be62:	2b00      	cmp	r3, #0
 801be64:	d008      	beq.n	801be78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	681a      	ldr	r2, [r3, #0]
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	f042 020e 	orr.w	r2, r2, #14
 801be74:	601a      	str	r2, [r3, #0]
 801be76:	e00f      	b.n	801be98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	681a      	ldr	r2, [r3, #0]
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	f022 0204 	bic.w	r2, r2, #4
 801be86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	f042 020a 	orr.w	r2, r2, #10
 801be96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d007      	beq.n	801beb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801beaa:	681a      	ldr	r2, [r3, #0]
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801beb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801beb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d007      	beq.n	801bece <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bec2:	681a      	ldr	r2, [r3, #0]
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801becc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	681a      	ldr	r2, [r3, #0]
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	f042 0201 	orr.w	r2, r2, #1
 801bedc:	601a      	str	r2, [r3, #0]
 801bede:	e005      	b.n	801beec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	2200      	movs	r2, #0
 801bee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801bee8:	2302      	movs	r3, #2
 801beea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801beec:	7dfb      	ldrb	r3, [r7, #23]
}
 801beee:	4618      	mov	r0, r3
 801bef0:	3718      	adds	r7, #24
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}

0801bef6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801bef6:	b480      	push	{r7}
 801bef8:	b085      	sub	sp, #20
 801befa:	af00      	add	r7, sp, #0
 801befc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801befe:	2300      	movs	r3, #0
 801bf00:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bf08:	b2db      	uxtb	r3, r3
 801bf0a:	2b02      	cmp	r3, #2
 801bf0c:	d005      	beq.n	801bf1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	2204      	movs	r2, #4
 801bf12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801bf14:	2301      	movs	r3, #1
 801bf16:	73fb      	strb	r3, [r7, #15]
 801bf18:	e037      	b.n	801bf8a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	681a      	ldr	r2, [r3, #0]
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	f022 020e 	bic.w	r2, r2, #14
 801bf28:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf2e:	681a      	ldr	r2, [r3, #0]
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf38:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	681a      	ldr	r2, [r3, #0]
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	f022 0201 	bic.w	r2, r2, #1
 801bf48:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf4e:	f003 021f 	and.w	r2, r3, #31
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf56:	2101      	movs	r1, #1
 801bf58:	fa01 f202 	lsl.w	r2, r1, r2
 801bf5c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bf62:	687a      	ldr	r2, [r7, #4]
 801bf64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bf66:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d00c      	beq.n	801bf8a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf74:	681a      	ldr	r2, [r3, #0]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf7e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bf88:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	2201      	movs	r2, #1
 801bf8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	2200      	movs	r2, #0
 801bf96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	3714      	adds	r7, #20
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa6:	4770      	bx	lr

0801bfa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b084      	sub	sp, #16
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bfc4:	f003 031f 	and.w	r3, r3, #31
 801bfc8:	2204      	movs	r2, #4
 801bfca:	409a      	lsls	r2, r3
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	4013      	ands	r3, r2
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d026      	beq.n	801c022 <HAL_DMA_IRQHandler+0x7a>
 801bfd4:	68bb      	ldr	r3, [r7, #8]
 801bfd6:	f003 0304 	and.w	r3, r3, #4
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d021      	beq.n	801c022 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	f003 0320 	and.w	r3, r3, #32
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d107      	bne.n	801bffc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	681a      	ldr	r2, [r3, #0]
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f022 0204 	bic.w	r2, r2, #4
 801bffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c000:	f003 021f 	and.w	r2, r3, #31
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c008:	2104      	movs	r1, #4
 801c00a:	fa01 f202 	lsl.w	r2, r1, r2
 801c00e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c014:	2b00      	cmp	r3, #0
 801c016:	d071      	beq.n	801c0fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801c020:	e06c      	b.n	801c0fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c026:	f003 031f 	and.w	r3, r3, #31
 801c02a:	2202      	movs	r2, #2
 801c02c:	409a      	lsls	r2, r3
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	4013      	ands	r3, r2
 801c032:	2b00      	cmp	r3, #0
 801c034:	d02e      	beq.n	801c094 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801c036:	68bb      	ldr	r3, [r7, #8]
 801c038:	f003 0302 	and.w	r3, r3, #2
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d029      	beq.n	801c094 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f003 0320 	and.w	r3, r3, #32
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d10b      	bne.n	801c066 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	681a      	ldr	r2, [r3, #0]
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	f022 020a 	bic.w	r2, r2, #10
 801c05c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	2201      	movs	r2, #1
 801c062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c06a:	f003 021f 	and.w	r2, r3, #31
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c072:	2102      	movs	r1, #2
 801c074:	fa01 f202 	lsl.w	r2, r1, r2
 801c078:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	2200      	movs	r2, #0
 801c07e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c086:	2b00      	cmp	r3, #0
 801c088:	d038      	beq.n	801c0fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801c092:	e033      	b.n	801c0fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c098:	f003 031f 	and.w	r3, r3, #31
 801c09c:	2208      	movs	r2, #8
 801c09e:	409a      	lsls	r2, r3
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	4013      	ands	r3, r2
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d02a      	beq.n	801c0fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801c0a8:	68bb      	ldr	r3, [r7, #8]
 801c0aa:	f003 0308 	and.w	r3, r3, #8
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d025      	beq.n	801c0fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	681a      	ldr	r2, [r3, #0]
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	f022 020e 	bic.w	r2, r2, #14
 801c0c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0c6:	f003 021f 	and.w	r2, r3, #31
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0ce:	2101      	movs	r1, #1
 801c0d0:	fa01 f202 	lsl.w	r2, r1, r2
 801c0d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	2201      	movs	r2, #1
 801c0da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2201      	movs	r2, #1
 801c0e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d004      	beq.n	801c0fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801c0fc:	bf00      	nop
 801c0fe:	bf00      	nop
}
 801c100:	3710      	adds	r7, #16
 801c102:	46bd      	mov	sp, r7
 801c104:	bd80      	pop	{r7, pc}

0801c106 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c106:	b480      	push	{r7}
 801c108:	b085      	sub	sp, #20
 801c10a:	af00      	add	r7, sp, #0
 801c10c:	60f8      	str	r0, [r7, #12]
 801c10e:	60b9      	str	r1, [r7, #8]
 801c110:	607a      	str	r2, [r7, #4]
 801c112:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c118:	68fa      	ldr	r2, [r7, #12]
 801c11a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801c11c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c122:	2b00      	cmp	r3, #0
 801c124:	d004      	beq.n	801c130 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c12a:	68fa      	ldr	r2, [r7, #12]
 801c12c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c12e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c134:	f003 021f 	and.w	r2, r3, #31
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c13c:	2101      	movs	r1, #1
 801c13e:	fa01 f202 	lsl.w	r2, r1, r2
 801c142:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	683a      	ldr	r2, [r7, #0]
 801c14a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	689b      	ldr	r3, [r3, #8]
 801c150:	2b10      	cmp	r3, #16
 801c152:	d108      	bne.n	801c166 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	687a      	ldr	r2, [r7, #4]
 801c15a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	68ba      	ldr	r2, [r7, #8]
 801c162:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801c164:	e007      	b.n	801c176 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	68ba      	ldr	r2, [r7, #8]
 801c16c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	687a      	ldr	r2, [r7, #4]
 801c174:	60da      	str	r2, [r3, #12]
}
 801c176:	bf00      	nop
 801c178:	3714      	adds	r7, #20
 801c17a:	46bd      	mov	sp, r7
 801c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c180:	4770      	bx	lr
	...

0801c184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c184:	b480      	push	{r7}
 801c186:	b087      	sub	sp, #28
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	461a      	mov	r2, r3
 801c192:	4b16      	ldr	r3, [pc, #88]	; (801c1ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801c194:	429a      	cmp	r2, r3
 801c196:	d802      	bhi.n	801c19e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801c198:	4b15      	ldr	r3, [pc, #84]	; (801c1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801c19a:	617b      	str	r3, [r7, #20]
 801c19c:	e001      	b.n	801c1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801c19e:	4b15      	ldr	r3, [pc, #84]	; (801c1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801c1a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801c1a2:	697b      	ldr	r3, [r7, #20]
 801c1a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	b2db      	uxtb	r3, r3
 801c1ac:	3b08      	subs	r3, #8
 801c1ae:	4a12      	ldr	r2, [pc, #72]	; (801c1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801c1b0:	fba2 2303 	umull	r2, r3, r2, r3
 801c1b4:	091b      	lsrs	r3, r3, #4
 801c1b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1bc:	089b      	lsrs	r3, r3, #2
 801c1be:	009a      	lsls	r2, r3, #2
 801c1c0:	693b      	ldr	r3, [r7, #16]
 801c1c2:	4413      	add	r3, r2
 801c1c4:	461a      	mov	r2, r3
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	4a0b      	ldr	r2, [pc, #44]	; (801c1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801c1ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	f003 031f 	and.w	r3, r3, #31
 801c1d6:	2201      	movs	r2, #1
 801c1d8:	409a      	lsls	r2, r3
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 801c1de:	bf00      	nop
 801c1e0:	371c      	adds	r7, #28
 801c1e2:	46bd      	mov	sp, r7
 801c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1e8:	4770      	bx	lr
 801c1ea:	bf00      	nop
 801c1ec:	40020407 	.word	0x40020407
 801c1f0:	40020800 	.word	0x40020800
 801c1f4:	40020820 	.word	0x40020820
 801c1f8:	cccccccd 	.word	0xcccccccd
 801c1fc:	40020880 	.word	0x40020880

0801c200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c200:	b480      	push	{r7}
 801c202:	b085      	sub	sp, #20
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	685b      	ldr	r3, [r3, #4]
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c210:	68fa      	ldr	r2, [r7, #12]
 801c212:	4b0b      	ldr	r3, [pc, #44]	; (801c240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801c214:	4413      	add	r3, r2
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	461a      	mov	r2, r3
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4a08      	ldr	r2, [pc, #32]	; (801c244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801c222:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	3b01      	subs	r3, #1
 801c228:	f003 031f 	and.w	r3, r3, #31
 801c22c:	2201      	movs	r2, #1
 801c22e:	409a      	lsls	r2, r3
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801c234:	bf00      	nop
 801c236:	3714      	adds	r7, #20
 801c238:	46bd      	mov	sp, r7
 801c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23e:	4770      	bx	lr
 801c240:	1000823f 	.word	0x1000823f
 801c244:	40020940 	.word	0x40020940

0801c248 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	b086      	sub	sp, #24
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	60f8      	str	r0, [r7, #12]
 801c250:	60b9      	str	r1, [r7, #8]
 801c252:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801c256:	2300      	movs	r3, #0
 801c258:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c25a:	4b24      	ldr	r3, [pc, #144]	; (801c2ec <HAL_FLASH_Program+0xa4>)
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	2b01      	cmp	r3, #1
 801c260:	d101      	bne.n	801c266 <HAL_FLASH_Program+0x1e>
 801c262:	2302      	movs	r3, #2
 801c264:	e03e      	b.n	801c2e4 <HAL_FLASH_Program+0x9c>
 801c266:	4b21      	ldr	r3, [pc, #132]	; (801c2ec <HAL_FLASH_Program+0xa4>)
 801c268:	2201      	movs	r2, #1
 801c26a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c26c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c270:	f000 f87c 	bl	801c36c <FLASH_WaitForLastOperation>
 801c274:	4603      	mov	r3, r0
 801c276:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801c278:	7dfb      	ldrb	r3, [r7, #23]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d12e      	bne.n	801c2dc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c27e:	4b1b      	ldr	r3, [pc, #108]	; (801c2ec <HAL_FLASH_Program+0xa4>)
 801c280:	2200      	movs	r2, #0
 801c282:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	2b00      	cmp	r3, #0
 801c288:	d107      	bne.n	801c29a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801c28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c28e:	68b8      	ldr	r0, [r7, #8]
 801c290:	f000 f8c0 	bl	801c414 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801c294:	2301      	movs	r3, #1
 801c296:	613b      	str	r3, [r7, #16]
 801c298:	e010      	b.n	801c2bc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	2b01      	cmp	r3, #1
 801c29e:	d002      	beq.n	801c2a6 <HAL_FLASH_Program+0x5e>
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	2b02      	cmp	r3, #2
 801c2a4:	d10a      	bne.n	801c2bc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801c2a6:	683b      	ldr	r3, [r7, #0]
 801c2a8:	4619      	mov	r1, r3
 801c2aa:	68b8      	ldr	r0, [r7, #8]
 801c2ac:	f000 f8d8 	bl	801c460 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	2b02      	cmp	r3, #2
 801c2b4:	d102      	bne.n	801c2bc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801c2b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c2ba:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c2bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c2c0:	f000 f854 	bl	801c36c <FLASH_WaitForLastOperation>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801c2c8:	693b      	ldr	r3, [r7, #16]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d006      	beq.n	801c2dc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801c2ce:	4b08      	ldr	r3, [pc, #32]	; (801c2f0 <HAL_FLASH_Program+0xa8>)
 801c2d0:	695a      	ldr	r2, [r3, #20]
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	43db      	mvns	r3, r3
 801c2d6:	4906      	ldr	r1, [pc, #24]	; (801c2f0 <HAL_FLASH_Program+0xa8>)
 801c2d8:	4013      	ands	r3, r2
 801c2da:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c2dc:	4b03      	ldr	r3, [pc, #12]	; (801c2ec <HAL_FLASH_Program+0xa4>)
 801c2de:	2200      	movs	r2, #0
 801c2e0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801c2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2e4:	4618      	mov	r0, r3
 801c2e6:	3718      	adds	r7, #24
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	2000000c 	.word	0x2000000c
 801c2f0:	40022000 	.word	0x40022000

0801c2f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801c2f4:	b480      	push	{r7}
 801c2f6:	b083      	sub	sp, #12
 801c2f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c2fe:	4b0b      	ldr	r3, [pc, #44]	; (801c32c <HAL_FLASH_Unlock+0x38>)
 801c300:	695b      	ldr	r3, [r3, #20]
 801c302:	2b00      	cmp	r3, #0
 801c304:	da0b      	bge.n	801c31e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801c306:	4b09      	ldr	r3, [pc, #36]	; (801c32c <HAL_FLASH_Unlock+0x38>)
 801c308:	4a09      	ldr	r2, [pc, #36]	; (801c330 <HAL_FLASH_Unlock+0x3c>)
 801c30a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801c30c:	4b07      	ldr	r3, [pc, #28]	; (801c32c <HAL_FLASH_Unlock+0x38>)
 801c30e:	4a09      	ldr	r2, [pc, #36]	; (801c334 <HAL_FLASH_Unlock+0x40>)
 801c310:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c312:	4b06      	ldr	r3, [pc, #24]	; (801c32c <HAL_FLASH_Unlock+0x38>)
 801c314:	695b      	ldr	r3, [r3, #20]
 801c316:	2b00      	cmp	r3, #0
 801c318:	da01      	bge.n	801c31e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801c31a:	2301      	movs	r3, #1
 801c31c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801c31e:	79fb      	ldrb	r3, [r7, #7]
}
 801c320:	4618      	mov	r0, r3
 801c322:	370c      	adds	r7, #12
 801c324:	46bd      	mov	sp, r7
 801c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c32a:	4770      	bx	lr
 801c32c:	40022000 	.word	0x40022000
 801c330:	45670123 	.word	0x45670123
 801c334:	cdef89ab 	.word	0xcdef89ab

0801c338 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801c338:	b480      	push	{r7}
 801c33a:	b083      	sub	sp, #12
 801c33c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801c33e:	2301      	movs	r3, #1
 801c340:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801c342:	4b09      	ldr	r3, [pc, #36]	; (801c368 <HAL_FLASH_Lock+0x30>)
 801c344:	695b      	ldr	r3, [r3, #20]
 801c346:	4a08      	ldr	r2, [pc, #32]	; (801c368 <HAL_FLASH_Lock+0x30>)
 801c348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801c34c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c34e:	4b06      	ldr	r3, [pc, #24]	; (801c368 <HAL_FLASH_Lock+0x30>)
 801c350:	695b      	ldr	r3, [r3, #20]
 801c352:	2b00      	cmp	r3, #0
 801c354:	da01      	bge.n	801c35a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801c356:	2300      	movs	r3, #0
 801c358:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801c35a:	79fb      	ldrb	r3, [r7, #7]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	370c      	adds	r7, #12
 801c360:	46bd      	mov	sp, r7
 801c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c366:	4770      	bx	lr
 801c368:	40022000 	.word	0x40022000

0801c36c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b084      	sub	sp, #16
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801c374:	f7fd f98a 	bl	801968c <HAL_GetTick>
 801c378:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c37a:	e009      	b.n	801c390 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801c37c:	f7fd f986 	bl	801968c <HAL_GetTick>
 801c380:	4602      	mov	r2, r0
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	1ad3      	subs	r3, r2, r3
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	429a      	cmp	r2, r3
 801c38a:	d201      	bcs.n	801c390 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801c38c:	2303      	movs	r3, #3
 801c38e:	e038      	b.n	801c402 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c390:	4b1e      	ldr	r3, [pc, #120]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c392:	691b      	ldr	r3, [r3, #16]
 801c394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c39c:	d0ee      	beq.n	801c37c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801c39e:	4b1b      	ldr	r3, [pc, #108]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3a0:	691a      	ldr	r2, [r3, #16]
 801c3a2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801c3a6:	4013      	ands	r3, r2
 801c3a8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d01e      	beq.n	801c3ee <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801c3b0:	4b17      	ldr	r3, [pc, #92]	; (801c410 <FLASH_WaitForLastOperation+0xa4>)
 801c3b2:	685a      	ldr	r2, [r3, #4]
 801c3b4:	68bb      	ldr	r3, [r7, #8]
 801c3b6:	4313      	orrs	r3, r2
 801c3b8:	4a15      	ldr	r2, [pc, #84]	; (801c410 <FLASH_WaitForLastOperation+0xa4>)
 801c3ba:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801c3bc:	68bb      	ldr	r3, [r7, #8]
 801c3be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d007      	beq.n	801c3d6 <FLASH_WaitForLastOperation+0x6a>
 801c3c6:	4b11      	ldr	r3, [pc, #68]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3c8:	699a      	ldr	r2, [r3, #24]
 801c3ca:	68bb      	ldr	r3, [r7, #8]
 801c3cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c3d0:	490e      	ldr	r1, [pc, #56]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3d2:	4313      	orrs	r3, r2
 801c3d4:	618b      	str	r3, [r1, #24]
 801c3d6:	68bb      	ldr	r3, [r7, #8]
 801c3d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d004      	beq.n	801c3ea <FLASH_WaitForLastOperation+0x7e>
 801c3e0:	4a0a      	ldr	r2, [pc, #40]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c3e8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801c3ea:	2301      	movs	r3, #1
 801c3ec:	e009      	b.n	801c402 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801c3ee:	4b07      	ldr	r3, [pc, #28]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3f0:	691b      	ldr	r3, [r3, #16]
 801c3f2:	f003 0301 	and.w	r3, r3, #1
 801c3f6:	2b01      	cmp	r3, #1
 801c3f8:	d102      	bne.n	801c400 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801c3fa:	4b04      	ldr	r3, [pc, #16]	; (801c40c <FLASH_WaitForLastOperation+0xa0>)
 801c3fc:	2201      	movs	r2, #1
 801c3fe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801c400:	2300      	movs	r3, #0
}
 801c402:	4618      	mov	r0, r3
 801c404:	3710      	adds	r7, #16
 801c406:	46bd      	mov	sp, r7
 801c408:	bd80      	pop	{r7, pc}
 801c40a:	bf00      	nop
 801c40c:	40022000 	.word	0x40022000
 801c410:	2000000c 	.word	0x2000000c

0801c414 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801c414:	b480      	push	{r7}
 801c416:	b085      	sub	sp, #20
 801c418:	af00      	add	r7, sp, #0
 801c41a:	60f8      	str	r0, [r7, #12]
 801c41c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801c420:	4b0e      	ldr	r3, [pc, #56]	; (801c45c <FLASH_Program_DoubleWord+0x48>)
 801c422:	695b      	ldr	r3, [r3, #20]
 801c424:	4a0d      	ldr	r2, [pc, #52]	; (801c45c <FLASH_Program_DoubleWord+0x48>)
 801c426:	f043 0301 	orr.w	r3, r3, #1
 801c42a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	683a      	ldr	r2, [r7, #0]
 801c430:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801c432:	f3bf 8f6f 	isb	sy
}
 801c436:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801c438:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c43c:	f04f 0200 	mov.w	r2, #0
 801c440:	f04f 0300 	mov.w	r3, #0
 801c444:	000a      	movs	r2, r1
 801c446:	2300      	movs	r3, #0
 801c448:	68f9      	ldr	r1, [r7, #12]
 801c44a:	3104      	adds	r1, #4
 801c44c:	4613      	mov	r3, r2
 801c44e:	600b      	str	r3, [r1, #0]
}
 801c450:	bf00      	nop
 801c452:	3714      	adds	r7, #20
 801c454:	46bd      	mov	sp, r7
 801c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c45a:	4770      	bx	lr
 801c45c:	40022000 	.word	0x40022000

0801c460 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801c460:	b480      	push	{r7}
 801c462:	b089      	sub	sp, #36	; 0x24
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
 801c468:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801c46a:	2340      	movs	r3, #64	; 0x40
 801c46c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801c476:	4b14      	ldr	r3, [pc, #80]	; (801c4c8 <FLASH_Program_Fast+0x68>)
 801c478:	695b      	ldr	r3, [r3, #20]
 801c47a:	4a13      	ldr	r2, [pc, #76]	; (801c4c8 <FLASH_Program_Fast+0x68>)
 801c47c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c480:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c482:	f3ef 8310 	mrs	r3, PRIMASK
 801c486:	60fb      	str	r3, [r7, #12]
  return(result);
 801c488:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801c48a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c48c:	b672      	cpsid	i
}
 801c48e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801c490:	697b      	ldr	r3, [r7, #20]
 801c492:	681a      	ldr	r2, [r3, #0]
 801c494:	69bb      	ldr	r3, [r7, #24]
 801c496:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801c498:	69bb      	ldr	r3, [r7, #24]
 801c49a:	3304      	adds	r3, #4
 801c49c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801c49e:	697b      	ldr	r3, [r7, #20]
 801c4a0:	3304      	adds	r3, #4
 801c4a2:	617b      	str	r3, [r7, #20]
    row_index--;
 801c4a4:	7ffb      	ldrb	r3, [r7, #31]
 801c4a6:	3b01      	subs	r3, #1
 801c4a8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801c4aa:	7ffb      	ldrb	r3, [r7, #31]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d1ef      	bne.n	801c490 <FLASH_Program_Fast+0x30>
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4b4:	68bb      	ldr	r3, [r7, #8]
 801c4b6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ba:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801c4bc:	bf00      	nop
 801c4be:	3724      	adds	r7, #36	; 0x24
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4c6:	4770      	bx	lr
 801c4c8:	40022000 	.word	0x40022000

0801c4cc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b084      	sub	sp, #16
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
 801c4d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c4d6:	4b48      	ldr	r3, [pc, #288]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c4d8:	781b      	ldrb	r3, [r3, #0]
 801c4da:	2b01      	cmp	r3, #1
 801c4dc:	d101      	bne.n	801c4e2 <HAL_FLASHEx_Erase+0x16>
 801c4de:	2302      	movs	r3, #2
 801c4e0:	e085      	b.n	801c5ee <HAL_FLASHEx_Erase+0x122>
 801c4e2:	4b45      	ldr	r3, [pc, #276]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c4e4:	2201      	movs	r2, #1
 801c4e6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c4e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c4ec:	f7ff ff3e 	bl	801c36c <FLASH_WaitForLastOperation>
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801c4f4:	7bfb      	ldrb	r3, [r7, #15]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d175      	bne.n	801c5e6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c4fa:	4b3f      	ldr	r3, [pc, #252]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801c500:	4b3e      	ldr	r3, [pc, #248]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d013      	beq.n	801c534 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c50c:	4b3b      	ldr	r3, [pc, #236]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c514:	2b00      	cmp	r3, #0
 801c516:	d009      	beq.n	801c52c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801c518:	4b38      	ldr	r3, [pc, #224]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	4a37      	ldr	r2, [pc, #220]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c51e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c522:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801c524:	4b34      	ldr	r3, [pc, #208]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c526:	2203      	movs	r2, #3
 801c528:	771a      	strb	r2, [r3, #28]
 801c52a:	e016      	b.n	801c55a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801c52c:	4b32      	ldr	r3, [pc, #200]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c52e:	2201      	movs	r2, #1
 801c530:	771a      	strb	r2, [r3, #28]
 801c532:	e012      	b.n	801c55a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c534:	4b31      	ldr	r3, [pc, #196]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d009      	beq.n	801c554 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801c540:	4b2e      	ldr	r3, [pc, #184]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	4a2d      	ldr	r2, [pc, #180]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c54a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801c54c:	4b2a      	ldr	r3, [pc, #168]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c54e:	2202      	movs	r2, #2
 801c550:	771a      	strb	r2, [r3, #28]
 801c552:	e002      	b.n	801c55a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c554:	4b28      	ldr	r3, [pc, #160]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c556:	2200      	movs	r2, #0
 801c558:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	2b01      	cmp	r3, #1
 801c560:	d111      	bne.n	801c586 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	685b      	ldr	r3, [r3, #4]
 801c566:	4618      	mov	r0, r3
 801c568:	f000 f84a 	bl	801c600 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c56c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c570:	f7ff fefc 	bl	801c36c <FLASH_WaitForLastOperation>
 801c574:	4603      	mov	r3, r0
 801c576:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801c578:	4b20      	ldr	r3, [pc, #128]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c57a:	695b      	ldr	r3, [r3, #20]
 801c57c:	4a1f      	ldr	r2, [pc, #124]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c57e:	f023 0304 	bic.w	r3, r3, #4
 801c582:	6153      	str	r3, [r2, #20]
 801c584:	e02d      	b.n	801c5e2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801c586:	683b      	ldr	r3, [r7, #0]
 801c588:	f04f 32ff 	mov.w	r2, #4294967295
 801c58c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	689b      	ldr	r3, [r3, #8]
 801c592:	60bb      	str	r3, [r7, #8]
 801c594:	e01d      	b.n	801c5d2 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	685b      	ldr	r3, [r3, #4]
 801c59a:	4619      	mov	r1, r3
 801c59c:	68b8      	ldr	r0, [r7, #8]
 801c59e:	f000 f84d 	bl	801c63c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c5a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c5a6:	f7ff fee1 	bl	801c36c <FLASH_WaitForLastOperation>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801c5ae:	4b13      	ldr	r3, [pc, #76]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c5b0:	695b      	ldr	r3, [r3, #20]
 801c5b2:	4a12      	ldr	r2, [pc, #72]	; (801c5fc <HAL_FLASHEx_Erase+0x130>)
 801c5b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c5b8:	f023 0302 	bic.w	r3, r3, #2
 801c5bc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801c5be:	7bfb      	ldrb	r3, [r7, #15]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d003      	beq.n	801c5cc <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	68ba      	ldr	r2, [r7, #8]
 801c5c8:	601a      	str	r2, [r3, #0]
          break;
 801c5ca:	e00a      	b.n	801c5e2 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c5cc:	68bb      	ldr	r3, [r7, #8]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	60bb      	str	r3, [r7, #8]
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	689a      	ldr	r2, [r3, #8]
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	68db      	ldr	r3, [r3, #12]
 801c5da:	4413      	add	r3, r2
 801c5dc:	68ba      	ldr	r2, [r7, #8]
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d3d9      	bcc.n	801c596 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801c5e2:	f000 f84f 	bl	801c684 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c5e6:	4b04      	ldr	r3, [pc, #16]	; (801c5f8 <HAL_FLASHEx_Erase+0x12c>)
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	701a      	strb	r2, [r3, #0]

  return status;
 801c5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	3710      	adds	r7, #16
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	2000000c 	.word	0x2000000c
 801c5fc:	40022000 	.word	0x40022000

0801c600 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801c600:	b480      	push	{r7}
 801c602:	b083      	sub	sp, #12
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f003 0301 	and.w	r3, r3, #1
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d005      	beq.n	801c61e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801c612:	4b09      	ldr	r3, [pc, #36]	; (801c638 <FLASH_MassErase+0x38>)
 801c614:	695b      	ldr	r3, [r3, #20]
 801c616:	4a08      	ldr	r2, [pc, #32]	; (801c638 <FLASH_MassErase+0x38>)
 801c618:	f043 0304 	orr.w	r3, r3, #4
 801c61c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c61e:	4b06      	ldr	r3, [pc, #24]	; (801c638 <FLASH_MassErase+0x38>)
 801c620:	695b      	ldr	r3, [r3, #20]
 801c622:	4a05      	ldr	r2, [pc, #20]	; (801c638 <FLASH_MassErase+0x38>)
 801c624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c628:	6153      	str	r3, [r2, #20]
}
 801c62a:	bf00      	nop
 801c62c:	370c      	adds	r7, #12
 801c62e:	46bd      	mov	sp, r7
 801c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c634:	4770      	bx	lr
 801c636:	bf00      	nop
 801c638:	40022000 	.word	0x40022000

0801c63c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801c63c:	b480      	push	{r7}
 801c63e:	b083      	sub	sp, #12
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
 801c644:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801c646:	4b0e      	ldr	r3, [pc, #56]	; (801c680 <FLASH_PageErase+0x44>)
 801c648:	695b      	ldr	r3, [r3, #20]
 801c64a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	00db      	lsls	r3, r3, #3
 801c652:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801c656:	490a      	ldr	r1, [pc, #40]	; (801c680 <FLASH_PageErase+0x44>)
 801c658:	4313      	orrs	r3, r2
 801c65a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801c65c:	4b08      	ldr	r3, [pc, #32]	; (801c680 <FLASH_PageErase+0x44>)
 801c65e:	695b      	ldr	r3, [r3, #20]
 801c660:	4a07      	ldr	r2, [pc, #28]	; (801c680 <FLASH_PageErase+0x44>)
 801c662:	f043 0302 	orr.w	r3, r3, #2
 801c666:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c668:	4b05      	ldr	r3, [pc, #20]	; (801c680 <FLASH_PageErase+0x44>)
 801c66a:	695b      	ldr	r3, [r3, #20]
 801c66c:	4a04      	ldr	r2, [pc, #16]	; (801c680 <FLASH_PageErase+0x44>)
 801c66e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c672:	6153      	str	r3, [r2, #20]
}
 801c674:	bf00      	nop
 801c676:	370c      	adds	r7, #12
 801c678:	46bd      	mov	sp, r7
 801c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c67e:	4770      	bx	lr
 801c680:	40022000 	.word	0x40022000

0801c684 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801c684:	b480      	push	{r7}
 801c686:	b083      	sub	sp, #12
 801c688:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801c68a:	4b21      	ldr	r3, [pc, #132]	; (801c710 <FLASH_FlushCaches+0x8c>)
 801c68c:	7f1b      	ldrb	r3, [r3, #28]
 801c68e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801c690:	79fb      	ldrb	r3, [r7, #7]
 801c692:	2b01      	cmp	r3, #1
 801c694:	d002      	beq.n	801c69c <FLASH_FlushCaches+0x18>
 801c696:	79fb      	ldrb	r3, [r7, #7]
 801c698:	2b03      	cmp	r3, #3
 801c69a:	d117      	bne.n	801c6cc <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801c69c:	4b1d      	ldr	r3, [pc, #116]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	4a1c      	ldr	r2, [pc, #112]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801c6a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801c6a8:	4b1a      	ldr	r3, [pc, #104]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	4a19      	ldr	r2, [pc, #100]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c6b2:	6013      	str	r3, [r2, #0]
 801c6b4:	4b17      	ldr	r3, [pc, #92]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	4a16      	ldr	r2, [pc, #88]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c6be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801c6c0:	4b14      	ldr	r3, [pc, #80]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	4a13      	ldr	r2, [pc, #76]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c6ca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801c6cc:	79fb      	ldrb	r3, [r7, #7]
 801c6ce:	2b02      	cmp	r3, #2
 801c6d0:	d002      	beq.n	801c6d8 <FLASH_FlushCaches+0x54>
 801c6d2:	79fb      	ldrb	r3, [r7, #7]
 801c6d4:	2b03      	cmp	r3, #3
 801c6d6:	d111      	bne.n	801c6fc <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801c6d8:	4b0e      	ldr	r3, [pc, #56]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	4a0d      	ldr	r2, [pc, #52]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801c6e2:	6013      	str	r3, [r2, #0]
 801c6e4:	4b0b      	ldr	r3, [pc, #44]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	4a0a      	ldr	r2, [pc, #40]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c6ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801c6f0:	4b08      	ldr	r3, [pc, #32]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	4a07      	ldr	r2, [pc, #28]	; (801c714 <FLASH_FlushCaches+0x90>)
 801c6f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c6fa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c6fc:	4b04      	ldr	r3, [pc, #16]	; (801c710 <FLASH_FlushCaches+0x8c>)
 801c6fe:	2200      	movs	r2, #0
 801c700:	771a      	strb	r2, [r3, #28]
}
 801c702:	bf00      	nop
 801c704:	370c      	adds	r7, #12
 801c706:	46bd      	mov	sp, r7
 801c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70c:	4770      	bx	lr
 801c70e:	bf00      	nop
 801c710:	2000000c 	.word	0x2000000c
 801c714:	40022000 	.word	0x40022000

0801c718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c718:	b480      	push	{r7}
 801c71a:	b087      	sub	sp, #28
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
 801c720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c722:	2300      	movs	r3, #0
 801c724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c726:	e15a      	b.n	801c9de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	681a      	ldr	r2, [r3, #0]
 801c72c:	2101      	movs	r1, #1
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	fa01 f303 	lsl.w	r3, r1, r3
 801c734:	4013      	ands	r3, r2
 801c736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	f000 814c 	beq.w	801c9d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	f003 0303 	and.w	r3, r3, #3
 801c748:	2b01      	cmp	r3, #1
 801c74a:	d005      	beq.n	801c758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c754:	2b02      	cmp	r3, #2
 801c756:	d130      	bne.n	801c7ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	689b      	ldr	r3, [r3, #8]
 801c75c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c75e:	697b      	ldr	r3, [r7, #20]
 801c760:	005b      	lsls	r3, r3, #1
 801c762:	2203      	movs	r2, #3
 801c764:	fa02 f303 	lsl.w	r3, r2, r3
 801c768:	43db      	mvns	r3, r3
 801c76a:	693a      	ldr	r2, [r7, #16]
 801c76c:	4013      	ands	r3, r2
 801c76e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	68da      	ldr	r2, [r3, #12]
 801c774:	697b      	ldr	r3, [r7, #20]
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	fa02 f303 	lsl.w	r3, r2, r3
 801c77c:	693a      	ldr	r2, [r7, #16]
 801c77e:	4313      	orrs	r3, r2
 801c780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	693a      	ldr	r2, [r7, #16]
 801c786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	685b      	ldr	r3, [r3, #4]
 801c78c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c78e:	2201      	movs	r2, #1
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	fa02 f303 	lsl.w	r3, r2, r3
 801c796:	43db      	mvns	r3, r3
 801c798:	693a      	ldr	r2, [r7, #16]
 801c79a:	4013      	ands	r3, r2
 801c79c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	685b      	ldr	r3, [r3, #4]
 801c7a2:	091b      	lsrs	r3, r3, #4
 801c7a4:	f003 0201 	and.w	r2, r3, #1
 801c7a8:	697b      	ldr	r3, [r7, #20]
 801c7aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c7ae:	693a      	ldr	r2, [r7, #16]
 801c7b0:	4313      	orrs	r3, r2
 801c7b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	693a      	ldr	r2, [r7, #16]
 801c7b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	685b      	ldr	r3, [r3, #4]
 801c7be:	f003 0303 	and.w	r3, r3, #3
 801c7c2:	2b03      	cmp	r3, #3
 801c7c4:	d017      	beq.n	801c7f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	68db      	ldr	r3, [r3, #12]
 801c7ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	2203      	movs	r2, #3
 801c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 801c7d6:	43db      	mvns	r3, r3
 801c7d8:	693a      	ldr	r2, [r7, #16]
 801c7da:	4013      	ands	r3, r2
 801c7dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	689a      	ldr	r2, [r3, #8]
 801c7e2:	697b      	ldr	r3, [r7, #20]
 801c7e4:	005b      	lsls	r3, r3, #1
 801c7e6:	fa02 f303 	lsl.w	r3, r2, r3
 801c7ea:	693a      	ldr	r2, [r7, #16]
 801c7ec:	4313      	orrs	r3, r2
 801c7ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	693a      	ldr	r2, [r7, #16]
 801c7f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c7f6:	683b      	ldr	r3, [r7, #0]
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	f003 0303 	and.w	r3, r3, #3
 801c7fe:	2b02      	cmp	r3, #2
 801c800:	d123      	bne.n	801c84a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	08da      	lsrs	r2, r3, #3
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	3208      	adds	r2, #8
 801c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c80e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c810:	697b      	ldr	r3, [r7, #20]
 801c812:	f003 0307 	and.w	r3, r3, #7
 801c816:	009b      	lsls	r3, r3, #2
 801c818:	220f      	movs	r2, #15
 801c81a:	fa02 f303 	lsl.w	r3, r2, r3
 801c81e:	43db      	mvns	r3, r3
 801c820:	693a      	ldr	r2, [r7, #16]
 801c822:	4013      	ands	r3, r2
 801c824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c826:	683b      	ldr	r3, [r7, #0]
 801c828:	691a      	ldr	r2, [r3, #16]
 801c82a:	697b      	ldr	r3, [r7, #20]
 801c82c:	f003 0307 	and.w	r3, r3, #7
 801c830:	009b      	lsls	r3, r3, #2
 801c832:	fa02 f303 	lsl.w	r3, r2, r3
 801c836:	693a      	ldr	r2, [r7, #16]
 801c838:	4313      	orrs	r3, r2
 801c83a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801c83c:	697b      	ldr	r3, [r7, #20]
 801c83e:	08da      	lsrs	r2, r3, #3
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	3208      	adds	r2, #8
 801c844:	6939      	ldr	r1, [r7, #16]
 801c846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	005b      	lsls	r3, r3, #1
 801c854:	2203      	movs	r2, #3
 801c856:	fa02 f303 	lsl.w	r3, r2, r3
 801c85a:	43db      	mvns	r3, r3
 801c85c:	693a      	ldr	r2, [r7, #16]
 801c85e:	4013      	ands	r3, r2
 801c860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c862:	683b      	ldr	r3, [r7, #0]
 801c864:	685b      	ldr	r3, [r3, #4]
 801c866:	f003 0203 	and.w	r2, r3, #3
 801c86a:	697b      	ldr	r3, [r7, #20]
 801c86c:	005b      	lsls	r3, r3, #1
 801c86e:	fa02 f303 	lsl.w	r3, r2, r3
 801c872:	693a      	ldr	r2, [r7, #16]
 801c874:	4313      	orrs	r3, r2
 801c876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	693a      	ldr	r2, [r7, #16]
 801c87c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c87e:	683b      	ldr	r3, [r7, #0]
 801c880:	685b      	ldr	r3, [r3, #4]
 801c882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c886:	2b00      	cmp	r3, #0
 801c888:	f000 80a6 	beq.w	801c9d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c88c:	4b5b      	ldr	r3, [pc, #364]	; (801c9fc <HAL_GPIO_Init+0x2e4>)
 801c88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c890:	4a5a      	ldr	r2, [pc, #360]	; (801c9fc <HAL_GPIO_Init+0x2e4>)
 801c892:	f043 0301 	orr.w	r3, r3, #1
 801c896:	6613      	str	r3, [r2, #96]	; 0x60
 801c898:	4b58      	ldr	r3, [pc, #352]	; (801c9fc <HAL_GPIO_Init+0x2e4>)
 801c89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c89c:	f003 0301 	and.w	r3, r3, #1
 801c8a0:	60bb      	str	r3, [r7, #8]
 801c8a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c8a4:	4a56      	ldr	r2, [pc, #344]	; (801ca00 <HAL_GPIO_Init+0x2e8>)
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	089b      	lsrs	r3, r3, #2
 801c8aa:	3302      	adds	r3, #2
 801c8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c8b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c8b2:	697b      	ldr	r3, [r7, #20]
 801c8b4:	f003 0303 	and.w	r3, r3, #3
 801c8b8:	009b      	lsls	r3, r3, #2
 801c8ba:	220f      	movs	r2, #15
 801c8bc:	fa02 f303 	lsl.w	r3, r2, r3
 801c8c0:	43db      	mvns	r3, r3
 801c8c2:	693a      	ldr	r2, [r7, #16]
 801c8c4:	4013      	ands	r3, r2
 801c8c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801c8ce:	d01f      	beq.n	801c910 <HAL_GPIO_Init+0x1f8>
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	4a4c      	ldr	r2, [pc, #304]	; (801ca04 <HAL_GPIO_Init+0x2ec>)
 801c8d4:	4293      	cmp	r3, r2
 801c8d6:	d019      	beq.n	801c90c <HAL_GPIO_Init+0x1f4>
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	4a4b      	ldr	r2, [pc, #300]	; (801ca08 <HAL_GPIO_Init+0x2f0>)
 801c8dc:	4293      	cmp	r3, r2
 801c8de:	d013      	beq.n	801c908 <HAL_GPIO_Init+0x1f0>
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	4a4a      	ldr	r2, [pc, #296]	; (801ca0c <HAL_GPIO_Init+0x2f4>)
 801c8e4:	4293      	cmp	r3, r2
 801c8e6:	d00d      	beq.n	801c904 <HAL_GPIO_Init+0x1ec>
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	4a49      	ldr	r2, [pc, #292]	; (801ca10 <HAL_GPIO_Init+0x2f8>)
 801c8ec:	4293      	cmp	r3, r2
 801c8ee:	d007      	beq.n	801c900 <HAL_GPIO_Init+0x1e8>
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	4a48      	ldr	r2, [pc, #288]	; (801ca14 <HAL_GPIO_Init+0x2fc>)
 801c8f4:	4293      	cmp	r3, r2
 801c8f6:	d101      	bne.n	801c8fc <HAL_GPIO_Init+0x1e4>
 801c8f8:	2305      	movs	r3, #5
 801c8fa:	e00a      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c8fc:	2306      	movs	r3, #6
 801c8fe:	e008      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c900:	2304      	movs	r3, #4
 801c902:	e006      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c904:	2303      	movs	r3, #3
 801c906:	e004      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c908:	2302      	movs	r3, #2
 801c90a:	e002      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c90c:	2301      	movs	r3, #1
 801c90e:	e000      	b.n	801c912 <HAL_GPIO_Init+0x1fa>
 801c910:	2300      	movs	r3, #0
 801c912:	697a      	ldr	r2, [r7, #20]
 801c914:	f002 0203 	and.w	r2, r2, #3
 801c918:	0092      	lsls	r2, r2, #2
 801c91a:	4093      	lsls	r3, r2
 801c91c:	693a      	ldr	r2, [r7, #16]
 801c91e:	4313      	orrs	r3, r2
 801c920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c922:	4937      	ldr	r1, [pc, #220]	; (801ca00 <HAL_GPIO_Init+0x2e8>)
 801c924:	697b      	ldr	r3, [r7, #20]
 801c926:	089b      	lsrs	r3, r3, #2
 801c928:	3302      	adds	r3, #2
 801c92a:	693a      	ldr	r2, [r7, #16]
 801c92c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c930:	4b39      	ldr	r3, [pc, #228]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c932:	689b      	ldr	r3, [r3, #8]
 801c934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	43db      	mvns	r3, r3
 801c93a:	693a      	ldr	r2, [r7, #16]
 801c93c:	4013      	ands	r3, r2
 801c93e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c940:	683b      	ldr	r3, [r7, #0]
 801c942:	685b      	ldr	r3, [r3, #4]
 801c944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d003      	beq.n	801c954 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801c94c:	693a      	ldr	r2, [r7, #16]
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	4313      	orrs	r3, r2
 801c952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c954:	4a30      	ldr	r2, [pc, #192]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c956:	693b      	ldr	r3, [r7, #16]
 801c958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c95a:	4b2f      	ldr	r3, [pc, #188]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c95c:	68db      	ldr	r3, [r3, #12]
 801c95e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	43db      	mvns	r3, r3
 801c964:	693a      	ldr	r2, [r7, #16]
 801c966:	4013      	ands	r3, r2
 801c968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c96a:	683b      	ldr	r3, [r7, #0]
 801c96c:	685b      	ldr	r3, [r3, #4]
 801c96e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c972:	2b00      	cmp	r3, #0
 801c974:	d003      	beq.n	801c97e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801c976:	693a      	ldr	r2, [r7, #16]
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	4313      	orrs	r3, r2
 801c97c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c97e:	4a26      	ldr	r2, [pc, #152]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c980:	693b      	ldr	r3, [r7, #16]
 801c982:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801c984:	4b24      	ldr	r3, [pc, #144]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c986:	685b      	ldr	r3, [r3, #4]
 801c988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	43db      	mvns	r3, r3
 801c98e:	693a      	ldr	r2, [r7, #16]
 801c990:	4013      	ands	r3, r2
 801c992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c994:	683b      	ldr	r3, [r7, #0]
 801c996:	685b      	ldr	r3, [r3, #4]
 801c998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d003      	beq.n	801c9a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c9a0:	693a      	ldr	r2, [r7, #16]
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	4313      	orrs	r3, r2
 801c9a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c9a8:	4a1b      	ldr	r2, [pc, #108]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c9aa:	693b      	ldr	r3, [r7, #16]
 801c9ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c9ae:	4b1a      	ldr	r3, [pc, #104]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	43db      	mvns	r3, r3
 801c9b8:	693a      	ldr	r2, [r7, #16]
 801c9ba:	4013      	ands	r3, r2
 801c9bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c9be:	683b      	ldr	r3, [r7, #0]
 801c9c0:	685b      	ldr	r3, [r3, #4]
 801c9c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d003      	beq.n	801c9d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801c9ca:	693a      	ldr	r2, [r7, #16]
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	4313      	orrs	r3, r2
 801c9d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c9d2:	4a11      	ldr	r2, [pc, #68]	; (801ca18 <HAL_GPIO_Init+0x300>)
 801c9d4:	693b      	ldr	r3, [r7, #16]
 801c9d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c9d8:	697b      	ldr	r3, [r7, #20]
 801c9da:	3301      	adds	r3, #1
 801c9dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	681a      	ldr	r2, [r3, #0]
 801c9e2:	697b      	ldr	r3, [r7, #20]
 801c9e4:	fa22 f303 	lsr.w	r3, r2, r3
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	f47f ae9d 	bne.w	801c728 <HAL_GPIO_Init+0x10>
  }
}
 801c9ee:	bf00      	nop
 801c9f0:	bf00      	nop
 801c9f2:	371c      	adds	r7, #28
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9fa:	4770      	bx	lr
 801c9fc:	40021000 	.word	0x40021000
 801ca00:	40010000 	.word	0x40010000
 801ca04:	48000400 	.word	0x48000400
 801ca08:	48000800 	.word	0x48000800
 801ca0c:	48000c00 	.word	0x48000c00
 801ca10:	48001000 	.word	0x48001000
 801ca14:	48001400 	.word	0x48001400
 801ca18:	40010400 	.word	0x40010400

0801ca1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ca1c:	b480      	push	{r7}
 801ca1e:	b083      	sub	sp, #12
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
 801ca24:	460b      	mov	r3, r1
 801ca26:	807b      	strh	r3, [r7, #2]
 801ca28:	4613      	mov	r3, r2
 801ca2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ca2c:	787b      	ldrb	r3, [r7, #1]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d003      	beq.n	801ca3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801ca32:	887a      	ldrh	r2, [r7, #2]
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ca38:	e002      	b.n	801ca40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ca3a:	887a      	ldrh	r2, [r7, #2]
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ca40:	bf00      	nop
 801ca42:	370c      	adds	r7, #12
 801ca44:	46bd      	mov	sp, r7
 801ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca4a:	4770      	bx	lr

0801ca4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ca4c:	b480      	push	{r7}
 801ca4e:	b085      	sub	sp, #20
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d141      	bne.n	801cade <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ca5a:	4b4b      	ldr	r3, [pc, #300]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ca62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca66:	d131      	bne.n	801cacc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ca68:	4b47      	ldr	r3, [pc, #284]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca6e:	4a46      	ldr	r2, [pc, #280]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ca74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ca78:	4b43      	ldr	r3, [pc, #268]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ca80:	4a41      	ldr	r2, [pc, #260]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ca86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ca88:	4b40      	ldr	r3, [pc, #256]	; (801cb8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	2232      	movs	r2, #50	; 0x32
 801ca8e:	fb02 f303 	mul.w	r3, r2, r3
 801ca92:	4a3f      	ldr	r2, [pc, #252]	; (801cb90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ca94:	fba2 2303 	umull	r2, r3, r2, r3
 801ca98:	0c9b      	lsrs	r3, r3, #18
 801ca9a:	3301      	adds	r3, #1
 801ca9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ca9e:	e002      	b.n	801caa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	3b01      	subs	r3, #1
 801caa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801caa6:	4b38      	ldr	r3, [pc, #224]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caa8:	695b      	ldr	r3, [r3, #20]
 801caaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801caae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cab2:	d102      	bne.n	801caba <HAL_PWREx_ControlVoltageScaling+0x6e>
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d1f2      	bne.n	801caa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801caba:	4b33      	ldr	r3, [pc, #204]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cabc:	695b      	ldr	r3, [r3, #20]
 801cabe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cac6:	d158      	bne.n	801cb7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801cac8:	2303      	movs	r3, #3
 801caca:	e057      	b.n	801cb7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cacc:	4b2e      	ldr	r3, [pc, #184]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cad2:	4a2d      	ldr	r2, [pc, #180]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801cadc:	e04d      	b.n	801cb7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cae4:	d141      	bne.n	801cb6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801cae6:	4b28      	ldr	r3, [pc, #160]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801caee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801caf2:	d131      	bne.n	801cb58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801caf4:	4b24      	ldr	r3, [pc, #144]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cafa:	4a23      	ldr	r2, [pc, #140]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cafc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cb00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801cb04:	4b20      	ldr	r3, [pc, #128]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cb0c:	4a1e      	ldr	r2, [pc, #120]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801cb12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801cb14:	4b1d      	ldr	r3, [pc, #116]	; (801cb8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	2232      	movs	r2, #50	; 0x32
 801cb1a:	fb02 f303 	mul.w	r3, r2, r3
 801cb1e:	4a1c      	ldr	r2, [pc, #112]	; (801cb90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801cb20:	fba2 2303 	umull	r2, r3, r2, r3
 801cb24:	0c9b      	lsrs	r3, r3, #18
 801cb26:	3301      	adds	r3, #1
 801cb28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801cb2a:	e002      	b.n	801cb32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801cb2c:	68fb      	ldr	r3, [r7, #12]
 801cb2e:	3b01      	subs	r3, #1
 801cb30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801cb32:	4b15      	ldr	r3, [pc, #84]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb34:	695b      	ldr	r3, [r3, #20]
 801cb36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb3e:	d102      	bne.n	801cb46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d1f2      	bne.n	801cb2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801cb46:	4b10      	ldr	r3, [pc, #64]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb48:	695b      	ldr	r3, [r3, #20]
 801cb4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb52:	d112      	bne.n	801cb7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801cb54:	2303      	movs	r3, #3
 801cb56:	e011      	b.n	801cb7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cb58:	4b0b      	ldr	r3, [pc, #44]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb5e:	4a0a      	ldr	r2, [pc, #40]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cb64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801cb68:	e007      	b.n	801cb7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801cb6a:	4b07      	ldr	r3, [pc, #28]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cb72:	4a05      	ldr	r2, [pc, #20]	; (801cb88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801cb78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801cb7a:	2300      	movs	r3, #0
}
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	3714      	adds	r7, #20
 801cb80:	46bd      	mov	sp, r7
 801cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb86:	4770      	bx	lr
 801cb88:	40007000 	.word	0x40007000
 801cb8c:	20000000 	.word	0x20000000
 801cb90:	431bde83 	.word	0x431bde83

0801cb94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801cb94:	b480      	push	{r7}
 801cb96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801cb98:	4b05      	ldr	r3, [pc, #20]	; (801cbb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cb9a:	689b      	ldr	r3, [r3, #8]
 801cb9c:	4a04      	ldr	r2, [pc, #16]	; (801cbb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cb9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cba2:	6093      	str	r3, [r2, #8]
}
 801cba4:	bf00      	nop
 801cba6:	46bd      	mov	sp, r7
 801cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbac:	4770      	bx	lr
 801cbae:	bf00      	nop
 801cbb0:	40007000 	.word	0x40007000

0801cbb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b088      	sub	sp, #32
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d101      	bne.n	801cbc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801cbc2:	2301      	movs	r3, #1
 801cbc4:	e306      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	f003 0301 	and.w	r3, r3, #1
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d075      	beq.n	801ccbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cbd2:	4b97      	ldr	r3, [pc, #604]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cbd4:	689b      	ldr	r3, [r3, #8]
 801cbd6:	f003 030c 	and.w	r3, r3, #12
 801cbda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cbdc:	4b94      	ldr	r3, [pc, #592]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cbde:	68db      	ldr	r3, [r3, #12]
 801cbe0:	f003 0303 	and.w	r3, r3, #3
 801cbe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801cbe6:	69bb      	ldr	r3, [r7, #24]
 801cbe8:	2b0c      	cmp	r3, #12
 801cbea:	d102      	bne.n	801cbf2 <HAL_RCC_OscConfig+0x3e>
 801cbec:	697b      	ldr	r3, [r7, #20]
 801cbee:	2b03      	cmp	r3, #3
 801cbf0:	d002      	beq.n	801cbf8 <HAL_RCC_OscConfig+0x44>
 801cbf2:	69bb      	ldr	r3, [r7, #24]
 801cbf4:	2b08      	cmp	r3, #8
 801cbf6:	d10b      	bne.n	801cc10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cbf8:	4b8d      	ldr	r3, [pc, #564]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d05b      	beq.n	801ccbc <HAL_RCC_OscConfig+0x108>
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	685b      	ldr	r3, [r3, #4]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	d157      	bne.n	801ccbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801cc0c:	2301      	movs	r3, #1
 801cc0e:	e2e1      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	685b      	ldr	r3, [r3, #4]
 801cc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc18:	d106      	bne.n	801cc28 <HAL_RCC_OscConfig+0x74>
 801cc1a:	4b85      	ldr	r3, [pc, #532]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	4a84      	ldr	r2, [pc, #528]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc24:	6013      	str	r3, [r2, #0]
 801cc26:	e01d      	b.n	801cc64 <HAL_RCC_OscConfig+0xb0>
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	685b      	ldr	r3, [r3, #4]
 801cc2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801cc30:	d10c      	bne.n	801cc4c <HAL_RCC_OscConfig+0x98>
 801cc32:	4b7f      	ldr	r3, [pc, #508]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	4a7e      	ldr	r2, [pc, #504]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801cc3c:	6013      	str	r3, [r2, #0]
 801cc3e:	4b7c      	ldr	r3, [pc, #496]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	4a7b      	ldr	r2, [pc, #492]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc48:	6013      	str	r3, [r2, #0]
 801cc4a:	e00b      	b.n	801cc64 <HAL_RCC_OscConfig+0xb0>
 801cc4c:	4b78      	ldr	r3, [pc, #480]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	4a77      	ldr	r2, [pc, #476]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cc56:	6013      	str	r3, [r2, #0]
 801cc58:	4b75      	ldr	r3, [pc, #468]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	4a74      	ldr	r2, [pc, #464]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801cc62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	685b      	ldr	r3, [r3, #4]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d013      	beq.n	801cc94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc6c:	f7fc fd0e 	bl	801968c <HAL_GetTick>
 801cc70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cc72:	e008      	b.n	801cc86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc74:	f7fc fd0a 	bl	801968c <HAL_GetTick>
 801cc78:	4602      	mov	r2, r0
 801cc7a:	693b      	ldr	r3, [r7, #16]
 801cc7c:	1ad3      	subs	r3, r2, r3
 801cc7e:	2b64      	cmp	r3, #100	; 0x64
 801cc80:	d901      	bls.n	801cc86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801cc82:	2303      	movs	r3, #3
 801cc84:	e2a6      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cc86:	4b6a      	ldr	r3, [pc, #424]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d0f0      	beq.n	801cc74 <HAL_RCC_OscConfig+0xc0>
 801cc92:	e014      	b.n	801ccbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc94:	f7fc fcfa 	bl	801968c <HAL_GetTick>
 801cc98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801cc9a:	e008      	b.n	801ccae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc9c:	f7fc fcf6 	bl	801968c <HAL_GetTick>
 801cca0:	4602      	mov	r2, r0
 801cca2:	693b      	ldr	r3, [r7, #16]
 801cca4:	1ad3      	subs	r3, r2, r3
 801cca6:	2b64      	cmp	r3, #100	; 0x64
 801cca8:	d901      	bls.n	801ccae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ccaa:	2303      	movs	r3, #3
 801ccac:	e292      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ccae:	4b60      	ldr	r3, [pc, #384]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d1f0      	bne.n	801cc9c <HAL_RCC_OscConfig+0xe8>
 801ccba:	e000      	b.n	801ccbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ccbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	f003 0302 	and.w	r3, r3, #2
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d075      	beq.n	801cdb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ccca:	4b59      	ldr	r3, [pc, #356]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cccc:	689b      	ldr	r3, [r3, #8]
 801ccce:	f003 030c 	and.w	r3, r3, #12
 801ccd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ccd4:	4b56      	ldr	r3, [pc, #344]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801ccd6:	68db      	ldr	r3, [r3, #12]
 801ccd8:	f003 0303 	and.w	r3, r3, #3
 801ccdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801ccde:	69bb      	ldr	r3, [r7, #24]
 801cce0:	2b0c      	cmp	r3, #12
 801cce2:	d102      	bne.n	801ccea <HAL_RCC_OscConfig+0x136>
 801cce4:	697b      	ldr	r3, [r7, #20]
 801cce6:	2b02      	cmp	r3, #2
 801cce8:	d002      	beq.n	801ccf0 <HAL_RCC_OscConfig+0x13c>
 801ccea:	69bb      	ldr	r3, [r7, #24]
 801ccec:	2b04      	cmp	r3, #4
 801ccee:	d11f      	bne.n	801cd30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ccf0:	4b4f      	ldr	r3, [pc, #316]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d005      	beq.n	801cd08 <HAL_RCC_OscConfig+0x154>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	68db      	ldr	r3, [r3, #12]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d101      	bne.n	801cd08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801cd04:	2301      	movs	r3, #1
 801cd06:	e265      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd08:	4b49      	ldr	r3, [pc, #292]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	691b      	ldr	r3, [r3, #16]
 801cd14:	061b      	lsls	r3, r3, #24
 801cd16:	4946      	ldr	r1, [pc, #280]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd18:	4313      	orrs	r3, r2
 801cd1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801cd1c:	4b45      	ldr	r3, [pc, #276]	; (801ce34 <HAL_RCC_OscConfig+0x280>)
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	4618      	mov	r0, r3
 801cd22:	f7fc fc67 	bl	80195f4 <HAL_InitTick>
 801cd26:	4603      	mov	r3, r0
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d043      	beq.n	801cdb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801cd2c:	2301      	movs	r3, #1
 801cd2e:	e251      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	68db      	ldr	r3, [r3, #12]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d023      	beq.n	801cd80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801cd38:	4b3d      	ldr	r3, [pc, #244]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	4a3c      	ldr	r2, [pc, #240]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd44:	f7fc fca2 	bl	801968c <HAL_GetTick>
 801cd48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd4a:	e008      	b.n	801cd5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd4c:	f7fc fc9e 	bl	801968c <HAL_GetTick>
 801cd50:	4602      	mov	r2, r0
 801cd52:	693b      	ldr	r3, [r7, #16]
 801cd54:	1ad3      	subs	r3, r2, r3
 801cd56:	2b02      	cmp	r3, #2
 801cd58:	d901      	bls.n	801cd5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801cd5a:	2303      	movs	r3, #3
 801cd5c:	e23a      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd5e:	4b34      	ldr	r3, [pc, #208]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d0f0      	beq.n	801cd4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd6a:	4b31      	ldr	r3, [pc, #196]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd6c:	685b      	ldr	r3, [r3, #4]
 801cd6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	691b      	ldr	r3, [r3, #16]
 801cd76:	061b      	lsls	r3, r3, #24
 801cd78:	492d      	ldr	r1, [pc, #180]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd7a:	4313      	orrs	r3, r2
 801cd7c:	604b      	str	r3, [r1, #4]
 801cd7e:	e01a      	b.n	801cdb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cd80:	4b2b      	ldr	r3, [pc, #172]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	4a2a      	ldr	r2, [pc, #168]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cd86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cd8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd8c:	f7fc fc7e 	bl	801968c <HAL_GetTick>
 801cd90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cd92:	e008      	b.n	801cda6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd94:	f7fc fc7a 	bl	801968c <HAL_GetTick>
 801cd98:	4602      	mov	r2, r0
 801cd9a:	693b      	ldr	r3, [r7, #16]
 801cd9c:	1ad3      	subs	r3, r2, r3
 801cd9e:	2b02      	cmp	r3, #2
 801cda0:	d901      	bls.n	801cda6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801cda2:	2303      	movs	r3, #3
 801cda4:	e216      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cda6:	4b22      	ldr	r3, [pc, #136]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d1f0      	bne.n	801cd94 <HAL_RCC_OscConfig+0x1e0>
 801cdb2:	e000      	b.n	801cdb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cdb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	f003 0308 	and.w	r3, r3, #8
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d041      	beq.n	801ce46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	695b      	ldr	r3, [r3, #20]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d01c      	beq.n	801ce04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cdca:	4b19      	ldr	r3, [pc, #100]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cdcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cdd0:	4a17      	ldr	r2, [pc, #92]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cdd2:	f043 0301 	orr.w	r3, r3, #1
 801cdd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cdda:	f7fc fc57 	bl	801968c <HAL_GetTick>
 801cdde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801cde0:	e008      	b.n	801cdf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cde2:	f7fc fc53 	bl	801968c <HAL_GetTick>
 801cde6:	4602      	mov	r2, r0
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	1ad3      	subs	r3, r2, r3
 801cdec:	2b02      	cmp	r3, #2
 801cdee:	d901      	bls.n	801cdf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801cdf0:	2303      	movs	r3, #3
 801cdf2:	e1ef      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801cdf4:	4b0e      	ldr	r3, [pc, #56]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801cdf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cdfa:	f003 0302 	and.w	r3, r3, #2
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d0ef      	beq.n	801cde2 <HAL_RCC_OscConfig+0x22e>
 801ce02:	e020      	b.n	801ce46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ce04:	4b0a      	ldr	r3, [pc, #40]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801ce06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce0a:	4a09      	ldr	r2, [pc, #36]	; (801ce30 <HAL_RCC_OscConfig+0x27c>)
 801ce0c:	f023 0301 	bic.w	r3, r3, #1
 801ce10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ce14:	f7fc fc3a 	bl	801968c <HAL_GetTick>
 801ce18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801ce1a:	e00d      	b.n	801ce38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ce1c:	f7fc fc36 	bl	801968c <HAL_GetTick>
 801ce20:	4602      	mov	r2, r0
 801ce22:	693b      	ldr	r3, [r7, #16]
 801ce24:	1ad3      	subs	r3, r2, r3
 801ce26:	2b02      	cmp	r3, #2
 801ce28:	d906      	bls.n	801ce38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801ce2a:	2303      	movs	r3, #3
 801ce2c:	e1d2      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
 801ce2e:	bf00      	nop
 801ce30:	40021000 	.word	0x40021000
 801ce34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801ce38:	4b8c      	ldr	r3, [pc, #560]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ce3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce3e:	f003 0302 	and.w	r3, r3, #2
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d1ea      	bne.n	801ce1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	f003 0304 	and.w	r3, r3, #4
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	f000 80a6 	beq.w	801cfa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ce54:	2300      	movs	r3, #0
 801ce56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801ce58:	4b84      	ldr	r3, [pc, #528]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ce5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d101      	bne.n	801ce68 <HAL_RCC_OscConfig+0x2b4>
 801ce64:	2301      	movs	r3, #1
 801ce66:	e000      	b.n	801ce6a <HAL_RCC_OscConfig+0x2b6>
 801ce68:	2300      	movs	r3, #0
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d00d      	beq.n	801ce8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ce6e:	4b7f      	ldr	r3, [pc, #508]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ce70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce72:	4a7e      	ldr	r2, [pc, #504]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ce74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ce78:	6593      	str	r3, [r2, #88]	; 0x58
 801ce7a:	4b7c      	ldr	r3, [pc, #496]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ce7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce82:	60fb      	str	r3, [r7, #12]
 801ce84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801ce86:	2301      	movs	r3, #1
 801ce88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce8a:	4b79      	ldr	r3, [pc, #484]	; (801d070 <HAL_RCC_OscConfig+0x4bc>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d118      	bne.n	801cec8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ce96:	4b76      	ldr	r3, [pc, #472]	; (801d070 <HAL_RCC_OscConfig+0x4bc>)
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	4a75      	ldr	r2, [pc, #468]	; (801d070 <HAL_RCC_OscConfig+0x4bc>)
 801ce9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801cea2:	f7fc fbf3 	bl	801968c <HAL_GetTick>
 801cea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cea8:	e008      	b.n	801cebc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ceaa:	f7fc fbef 	bl	801968c <HAL_GetTick>
 801ceae:	4602      	mov	r2, r0
 801ceb0:	693b      	ldr	r3, [r7, #16]
 801ceb2:	1ad3      	subs	r3, r2, r3
 801ceb4:	2b02      	cmp	r3, #2
 801ceb6:	d901      	bls.n	801cebc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801ceb8:	2303      	movs	r3, #3
 801ceba:	e18b      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801cebc:	4b6c      	ldr	r3, [pc, #432]	; (801d070 <HAL_RCC_OscConfig+0x4bc>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d0f0      	beq.n	801ceaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	689b      	ldr	r3, [r3, #8]
 801cecc:	2b01      	cmp	r3, #1
 801cece:	d108      	bne.n	801cee2 <HAL_RCC_OscConfig+0x32e>
 801ced0:	4b66      	ldr	r3, [pc, #408]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ced2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ced6:	4a65      	ldr	r2, [pc, #404]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ced8:	f043 0301 	orr.w	r3, r3, #1
 801cedc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cee0:	e024      	b.n	801cf2c <HAL_RCC_OscConfig+0x378>
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	689b      	ldr	r3, [r3, #8]
 801cee6:	2b05      	cmp	r3, #5
 801cee8:	d110      	bne.n	801cf0c <HAL_RCC_OscConfig+0x358>
 801ceea:	4b60      	ldr	r3, [pc, #384]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801ceec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cef0:	4a5e      	ldr	r2, [pc, #376]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cef2:	f043 0304 	orr.w	r3, r3, #4
 801cef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cefa:	4b5c      	ldr	r3, [pc, #368]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf00:	4a5a      	ldr	r2, [pc, #360]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf02:	f043 0301 	orr.w	r3, r3, #1
 801cf06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf0a:	e00f      	b.n	801cf2c <HAL_RCC_OscConfig+0x378>
 801cf0c:	4b57      	ldr	r3, [pc, #348]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf12:	4a56      	ldr	r2, [pc, #344]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf14:	f023 0301 	bic.w	r3, r3, #1
 801cf18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cf1c:	4b53      	ldr	r3, [pc, #332]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf22:	4a52      	ldr	r2, [pc, #328]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf24:	f023 0304 	bic.w	r3, r3, #4
 801cf28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	689b      	ldr	r3, [r3, #8]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d016      	beq.n	801cf62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf34:	f7fc fbaa 	bl	801968c <HAL_GetTick>
 801cf38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cf3a:	e00a      	b.n	801cf52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf3c:	f7fc fba6 	bl	801968c <HAL_GetTick>
 801cf40:	4602      	mov	r2, r0
 801cf42:	693b      	ldr	r3, [r7, #16]
 801cf44:	1ad3      	subs	r3, r2, r3
 801cf46:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf4a:	4293      	cmp	r3, r2
 801cf4c:	d901      	bls.n	801cf52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801cf4e:	2303      	movs	r3, #3
 801cf50:	e140      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cf52:	4b46      	ldr	r3, [pc, #280]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf58:	f003 0302 	and.w	r3, r3, #2
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d0ed      	beq.n	801cf3c <HAL_RCC_OscConfig+0x388>
 801cf60:	e015      	b.n	801cf8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf62:	f7fc fb93 	bl	801968c <HAL_GetTick>
 801cf66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cf68:	e00a      	b.n	801cf80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf6a:	f7fc fb8f 	bl	801968c <HAL_GetTick>
 801cf6e:	4602      	mov	r2, r0
 801cf70:	693b      	ldr	r3, [r7, #16]
 801cf72:	1ad3      	subs	r3, r2, r3
 801cf74:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf78:	4293      	cmp	r3, r2
 801cf7a:	d901      	bls.n	801cf80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801cf7c:	2303      	movs	r3, #3
 801cf7e:	e129      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cf80:	4b3a      	ldr	r3, [pc, #232]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf86:	f003 0302 	and.w	r3, r3, #2
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d1ed      	bne.n	801cf6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801cf8e:	7ffb      	ldrb	r3, [r7, #31]
 801cf90:	2b01      	cmp	r3, #1
 801cf92:	d105      	bne.n	801cfa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cf94:	4b35      	ldr	r3, [pc, #212]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf98:	4a34      	ldr	r2, [pc, #208]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cf9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cf9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	f003 0320 	and.w	r3, r3, #32
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d03c      	beq.n	801d026 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	699b      	ldr	r3, [r3, #24]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d01c      	beq.n	801cfee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801cfb4:	4b2d      	ldr	r3, [pc, #180]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cfb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cfba:	4a2c      	ldr	r2, [pc, #176]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cfbc:	f043 0301 	orr.w	r3, r3, #1
 801cfc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cfc4:	f7fc fb62 	bl	801968c <HAL_GetTick>
 801cfc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801cfca:	e008      	b.n	801cfde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801cfcc:	f7fc fb5e 	bl	801968c <HAL_GetTick>
 801cfd0:	4602      	mov	r2, r0
 801cfd2:	693b      	ldr	r3, [r7, #16]
 801cfd4:	1ad3      	subs	r3, r2, r3
 801cfd6:	2b02      	cmp	r3, #2
 801cfd8:	d901      	bls.n	801cfde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801cfda:	2303      	movs	r3, #3
 801cfdc:	e0fa      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801cfde:	4b23      	ldr	r3, [pc, #140]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cfe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cfe4:	f003 0302 	and.w	r3, r3, #2
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d0ef      	beq.n	801cfcc <HAL_RCC_OscConfig+0x418>
 801cfec:	e01b      	b.n	801d026 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801cfee:	4b1f      	ldr	r3, [pc, #124]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cff4:	4a1d      	ldr	r2, [pc, #116]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801cff6:	f023 0301 	bic.w	r3, r3, #1
 801cffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cffe:	f7fc fb45 	bl	801968c <HAL_GetTick>
 801d002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d004:	e008      	b.n	801d018 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d006:	f7fc fb41 	bl	801968c <HAL_GetTick>
 801d00a:	4602      	mov	r2, r0
 801d00c:	693b      	ldr	r3, [r7, #16]
 801d00e:	1ad3      	subs	r3, r2, r3
 801d010:	2b02      	cmp	r3, #2
 801d012:	d901      	bls.n	801d018 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801d014:	2303      	movs	r3, #3
 801d016:	e0dd      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801d018:	4b14      	ldr	r3, [pc, #80]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801d01a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d01e:	f003 0302 	and.w	r3, r3, #2
 801d022:	2b00      	cmp	r3, #0
 801d024:	d1ef      	bne.n	801d006 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	69db      	ldr	r3, [r3, #28]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	f000 80d1 	beq.w	801d1d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801d030:	4b0e      	ldr	r3, [pc, #56]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801d032:	689b      	ldr	r3, [r3, #8]
 801d034:	f003 030c 	and.w	r3, r3, #12
 801d038:	2b0c      	cmp	r3, #12
 801d03a:	f000 808b 	beq.w	801d154 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	69db      	ldr	r3, [r3, #28]
 801d042:	2b02      	cmp	r3, #2
 801d044:	d15e      	bne.n	801d104 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d046:	4b09      	ldr	r3, [pc, #36]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	4a08      	ldr	r2, [pc, #32]	; (801d06c <HAL_RCC_OscConfig+0x4b8>)
 801d04c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d052:	f7fc fb1b 	bl	801968c <HAL_GetTick>
 801d056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d058:	e00c      	b.n	801d074 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d05a:	f7fc fb17 	bl	801968c <HAL_GetTick>
 801d05e:	4602      	mov	r2, r0
 801d060:	693b      	ldr	r3, [r7, #16]
 801d062:	1ad3      	subs	r3, r2, r3
 801d064:	2b02      	cmp	r3, #2
 801d066:	d905      	bls.n	801d074 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801d068:	2303      	movs	r3, #3
 801d06a:	e0b3      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
 801d06c:	40021000 	.word	0x40021000
 801d070:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d074:	4b59      	ldr	r3, [pc, #356]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d1ec      	bne.n	801d05a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d080:	4b56      	ldr	r3, [pc, #344]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d082:	68da      	ldr	r2, [r3, #12]
 801d084:	4b56      	ldr	r3, [pc, #344]	; (801d1e0 <HAL_RCC_OscConfig+0x62c>)
 801d086:	4013      	ands	r3, r2
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	6a11      	ldr	r1, [r2, #32]
 801d08c:	687a      	ldr	r2, [r7, #4]
 801d08e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d090:	3a01      	subs	r2, #1
 801d092:	0112      	lsls	r2, r2, #4
 801d094:	4311      	orrs	r1, r2
 801d096:	687a      	ldr	r2, [r7, #4]
 801d098:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801d09a:	0212      	lsls	r2, r2, #8
 801d09c:	4311      	orrs	r1, r2
 801d09e:	687a      	ldr	r2, [r7, #4]
 801d0a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801d0a2:	0852      	lsrs	r2, r2, #1
 801d0a4:	3a01      	subs	r2, #1
 801d0a6:	0552      	lsls	r2, r2, #21
 801d0a8:	4311      	orrs	r1, r2
 801d0aa:	687a      	ldr	r2, [r7, #4]
 801d0ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801d0ae:	0852      	lsrs	r2, r2, #1
 801d0b0:	3a01      	subs	r2, #1
 801d0b2:	0652      	lsls	r2, r2, #25
 801d0b4:	4311      	orrs	r1, r2
 801d0b6:	687a      	ldr	r2, [r7, #4]
 801d0b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801d0ba:	06d2      	lsls	r2, r2, #27
 801d0bc:	430a      	orrs	r2, r1
 801d0be:	4947      	ldr	r1, [pc, #284]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0c0:	4313      	orrs	r3, r2
 801d0c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d0c4:	4b45      	ldr	r3, [pc, #276]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	4a44      	ldr	r2, [pc, #272]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d0ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801d0d0:	4b42      	ldr	r3, [pc, #264]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0d2:	68db      	ldr	r3, [r3, #12]
 801d0d4:	4a41      	ldr	r2, [pc, #260]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d0da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0dc:	f7fc fad6 	bl	801968c <HAL_GetTick>
 801d0e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d0e2:	e008      	b.n	801d0f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d0e4:	f7fc fad2 	bl	801968c <HAL_GetTick>
 801d0e8:	4602      	mov	r2, r0
 801d0ea:	693b      	ldr	r3, [r7, #16]
 801d0ec:	1ad3      	subs	r3, r2, r3
 801d0ee:	2b02      	cmp	r3, #2
 801d0f0:	d901      	bls.n	801d0f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801d0f2:	2303      	movs	r3, #3
 801d0f4:	e06e      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d0f6:	4b39      	ldr	r3, [pc, #228]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d0f0      	beq.n	801d0e4 <HAL_RCC_OscConfig+0x530>
 801d102:	e066      	b.n	801d1d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d104:	4b35      	ldr	r3, [pc, #212]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	4a34      	ldr	r2, [pc, #208]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d10e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801d110:	4b32      	ldr	r3, [pc, #200]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d112:	68db      	ldr	r3, [r3, #12]
 801d114:	4a31      	ldr	r2, [pc, #196]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d116:	f023 0303 	bic.w	r3, r3, #3
 801d11a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801d11c:	4b2f      	ldr	r3, [pc, #188]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d11e:	68db      	ldr	r3, [r3, #12]
 801d120:	4a2e      	ldr	r2, [pc, #184]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d122:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801d126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d12a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d12c:	f7fc faae 	bl	801968c <HAL_GetTick>
 801d130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d132:	e008      	b.n	801d146 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d134:	f7fc faaa 	bl	801968c <HAL_GetTick>
 801d138:	4602      	mov	r2, r0
 801d13a:	693b      	ldr	r3, [r7, #16]
 801d13c:	1ad3      	subs	r3, r2, r3
 801d13e:	2b02      	cmp	r3, #2
 801d140:	d901      	bls.n	801d146 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801d142:	2303      	movs	r3, #3
 801d144:	e046      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d146:	4b25      	ldr	r3, [pc, #148]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d1f0      	bne.n	801d134 <HAL_RCC_OscConfig+0x580>
 801d152:	e03e      	b.n	801d1d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	69db      	ldr	r3, [r3, #28]
 801d158:	2b01      	cmp	r3, #1
 801d15a:	d101      	bne.n	801d160 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801d15c:	2301      	movs	r3, #1
 801d15e:	e039      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801d160:	4b1e      	ldr	r3, [pc, #120]	; (801d1dc <HAL_RCC_OscConfig+0x628>)
 801d162:	68db      	ldr	r3, [r3, #12]
 801d164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	f003 0203 	and.w	r2, r3, #3
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	6a1b      	ldr	r3, [r3, #32]
 801d170:	429a      	cmp	r2, r3
 801d172:	d12c      	bne.n	801d1ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d17e:	3b01      	subs	r3, #1
 801d180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d182:	429a      	cmp	r2, r3
 801d184:	d123      	bne.n	801d1ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d186:	697b      	ldr	r3, [r7, #20]
 801d188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d190:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d192:	429a      	cmp	r2, r3
 801d194:	d11b      	bne.n	801d1ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d196:	697b      	ldr	r3, [r7, #20]
 801d198:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	d113      	bne.n	801d1ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d1a6:	697b      	ldr	r3, [r7, #20]
 801d1a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1b0:	085b      	lsrs	r3, r3, #1
 801d1b2:	3b01      	subs	r3, #1
 801d1b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d109      	bne.n	801d1ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801d1ba:	697b      	ldr	r3, [r7, #20]
 801d1bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d1c4:	085b      	lsrs	r3, r3, #1
 801d1c6:	3b01      	subs	r3, #1
 801d1c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d1ca:	429a      	cmp	r2, r3
 801d1cc:	d001      	beq.n	801d1d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801d1ce:	2301      	movs	r3, #1
 801d1d0:	e000      	b.n	801d1d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801d1d2:	2300      	movs	r3, #0
}
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	3720      	adds	r7, #32
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd80      	pop	{r7, pc}
 801d1dc:	40021000 	.word	0x40021000
 801d1e0:	019f800c 	.word	0x019f800c

0801d1e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b086      	sub	sp, #24
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
 801d1ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d101      	bne.n	801d1fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	e11e      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d1fc:	4b91      	ldr	r3, [pc, #580]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	f003 030f 	and.w	r3, r3, #15
 801d204:	683a      	ldr	r2, [r7, #0]
 801d206:	429a      	cmp	r2, r3
 801d208:	d910      	bls.n	801d22c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d20a:	4b8e      	ldr	r3, [pc, #568]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	f023 020f 	bic.w	r2, r3, #15
 801d212:	498c      	ldr	r1, [pc, #560]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	4313      	orrs	r3, r2
 801d218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d21a:	4b8a      	ldr	r3, [pc, #552]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	f003 030f 	and.w	r3, r3, #15
 801d222:	683a      	ldr	r2, [r7, #0]
 801d224:	429a      	cmp	r2, r3
 801d226:	d001      	beq.n	801d22c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d228:	2301      	movs	r3, #1
 801d22a:	e106      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f003 0301 	and.w	r3, r3, #1
 801d234:	2b00      	cmp	r3, #0
 801d236:	d073      	beq.n	801d320 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	685b      	ldr	r3, [r3, #4]
 801d23c:	2b03      	cmp	r3, #3
 801d23e:	d129      	bne.n	801d294 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d240:	4b81      	ldr	r3, [pc, #516]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d101      	bne.n	801d250 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801d24c:	2301      	movs	r3, #1
 801d24e:	e0f4      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801d250:	f000 f99c 	bl	801d58c <RCC_GetSysClockFreqFromPLLSource>
 801d254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801d256:	693b      	ldr	r3, [r7, #16]
 801d258:	4a7c      	ldr	r2, [pc, #496]	; (801d44c <HAL_RCC_ClockConfig+0x268>)
 801d25a:	4293      	cmp	r3, r2
 801d25c:	d93f      	bls.n	801d2de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d25e:	4b7a      	ldr	r3, [pc, #488]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d260:	689b      	ldr	r3, [r3, #8]
 801d262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d266:	2b00      	cmp	r3, #0
 801d268:	d009      	beq.n	801d27e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d272:	2b00      	cmp	r3, #0
 801d274:	d033      	beq.n	801d2de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d12f      	bne.n	801d2de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d27e:	4b72      	ldr	r3, [pc, #456]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d280:	689b      	ldr	r3, [r3, #8]
 801d282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d286:	4a70      	ldr	r2, [pc, #448]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d28c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801d28e:	2380      	movs	r3, #128	; 0x80
 801d290:	617b      	str	r3, [r7, #20]
 801d292:	e024      	b.n	801d2de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	685b      	ldr	r3, [r3, #4]
 801d298:	2b02      	cmp	r3, #2
 801d29a:	d107      	bne.n	801d2ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d29c:	4b6a      	ldr	r3, [pc, #424]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d109      	bne.n	801d2bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d2a8:	2301      	movs	r3, #1
 801d2aa:	e0c6      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d2ac:	4b66      	ldr	r3, [pc, #408]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d101      	bne.n	801d2bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d2b8:	2301      	movs	r3, #1
 801d2ba:	e0be      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801d2bc:	f000 f8ce 	bl	801d45c <HAL_RCC_GetSysClockFreq>
 801d2c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801d2c2:	693b      	ldr	r3, [r7, #16]
 801d2c4:	4a61      	ldr	r2, [pc, #388]	; (801d44c <HAL_RCC_ClockConfig+0x268>)
 801d2c6:	4293      	cmp	r3, r2
 801d2c8:	d909      	bls.n	801d2de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d2ca:	4b5f      	ldr	r3, [pc, #380]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d2cc:	689b      	ldr	r3, [r3, #8]
 801d2ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d2d2:	4a5d      	ldr	r2, [pc, #372]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801d2da:	2380      	movs	r3, #128	; 0x80
 801d2dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d2de:	4b5a      	ldr	r3, [pc, #360]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d2e0:	689b      	ldr	r3, [r3, #8]
 801d2e2:	f023 0203 	bic.w	r2, r3, #3
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	685b      	ldr	r3, [r3, #4]
 801d2ea:	4957      	ldr	r1, [pc, #348]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d2ec:	4313      	orrs	r3, r2
 801d2ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d2f0:	f7fc f9cc 	bl	801968c <HAL_GetTick>
 801d2f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d2f6:	e00a      	b.n	801d30e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d2f8:	f7fc f9c8 	bl	801968c <HAL_GetTick>
 801d2fc:	4602      	mov	r2, r0
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	1ad3      	subs	r3, r2, r3
 801d302:	f241 3288 	movw	r2, #5000	; 0x1388
 801d306:	4293      	cmp	r3, r2
 801d308:	d901      	bls.n	801d30e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801d30a:	2303      	movs	r3, #3
 801d30c:	e095      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d30e:	4b4e      	ldr	r3, [pc, #312]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d310:	689b      	ldr	r3, [r3, #8]
 801d312:	f003 020c 	and.w	r2, r3, #12
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	685b      	ldr	r3, [r3, #4]
 801d31a:	009b      	lsls	r3, r3, #2
 801d31c:	429a      	cmp	r2, r3
 801d31e:	d1eb      	bne.n	801d2f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	f003 0302 	and.w	r3, r3, #2
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d023      	beq.n	801d374 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	f003 0304 	and.w	r3, r3, #4
 801d334:	2b00      	cmp	r3, #0
 801d336:	d005      	beq.n	801d344 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d338:	4b43      	ldr	r3, [pc, #268]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d33a:	689b      	ldr	r3, [r3, #8]
 801d33c:	4a42      	ldr	r2, [pc, #264]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d33e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d342:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	f003 0308 	and.w	r3, r3, #8
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d007      	beq.n	801d360 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801d350:	4b3d      	ldr	r3, [pc, #244]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d352:	689b      	ldr	r3, [r3, #8]
 801d354:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d358:	4a3b      	ldr	r2, [pc, #236]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d35a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d35e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d360:	4b39      	ldr	r3, [pc, #228]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d362:	689b      	ldr	r3, [r3, #8]
 801d364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	689b      	ldr	r3, [r3, #8]
 801d36c:	4936      	ldr	r1, [pc, #216]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d36e:	4313      	orrs	r3, r2
 801d370:	608b      	str	r3, [r1, #8]
 801d372:	e008      	b.n	801d386 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801d374:	697b      	ldr	r3, [r7, #20]
 801d376:	2b80      	cmp	r3, #128	; 0x80
 801d378:	d105      	bne.n	801d386 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801d37a:	4b33      	ldr	r3, [pc, #204]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d37c:	689b      	ldr	r3, [r3, #8]
 801d37e:	4a32      	ldr	r2, [pc, #200]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d384:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d386:	4b2f      	ldr	r3, [pc, #188]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	f003 030f 	and.w	r3, r3, #15
 801d38e:	683a      	ldr	r2, [r7, #0]
 801d390:	429a      	cmp	r2, r3
 801d392:	d21d      	bcs.n	801d3d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d394:	4b2b      	ldr	r3, [pc, #172]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f023 020f 	bic.w	r2, r3, #15
 801d39c:	4929      	ldr	r1, [pc, #164]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d39e:	683b      	ldr	r3, [r7, #0]
 801d3a0:	4313      	orrs	r3, r2
 801d3a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801d3a4:	f7fc f972 	bl	801968c <HAL_GetTick>
 801d3a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d3aa:	e00a      	b.n	801d3c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d3ac:	f7fc f96e 	bl	801968c <HAL_GetTick>
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	1ad3      	subs	r3, r2, r3
 801d3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 801d3ba:	4293      	cmp	r3, r2
 801d3bc:	d901      	bls.n	801d3c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801d3be:	2303      	movs	r3, #3
 801d3c0:	e03b      	b.n	801d43a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d3c2:	4b20      	ldr	r3, [pc, #128]	; (801d444 <HAL_RCC_ClockConfig+0x260>)
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	f003 030f 	and.w	r3, r3, #15
 801d3ca:	683a      	ldr	r2, [r7, #0]
 801d3cc:	429a      	cmp	r2, r3
 801d3ce:	d1ed      	bne.n	801d3ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	f003 0304 	and.w	r3, r3, #4
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d008      	beq.n	801d3ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d3dc:	4b1a      	ldr	r3, [pc, #104]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d3de:	689b      	ldr	r3, [r3, #8]
 801d3e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	68db      	ldr	r3, [r3, #12]
 801d3e8:	4917      	ldr	r1, [pc, #92]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d3ea:	4313      	orrs	r3, r2
 801d3ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	f003 0308 	and.w	r3, r3, #8
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d009      	beq.n	801d40e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801d3fa:	4b13      	ldr	r3, [pc, #76]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d3fc:	689b      	ldr	r3, [r3, #8]
 801d3fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	691b      	ldr	r3, [r3, #16]
 801d406:	00db      	lsls	r3, r3, #3
 801d408:	490f      	ldr	r1, [pc, #60]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d40a:	4313      	orrs	r3, r2
 801d40c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801d40e:	f000 f825 	bl	801d45c <HAL_RCC_GetSysClockFreq>
 801d412:	4602      	mov	r2, r0
 801d414:	4b0c      	ldr	r3, [pc, #48]	; (801d448 <HAL_RCC_ClockConfig+0x264>)
 801d416:	689b      	ldr	r3, [r3, #8]
 801d418:	091b      	lsrs	r3, r3, #4
 801d41a:	f003 030f 	and.w	r3, r3, #15
 801d41e:	490c      	ldr	r1, [pc, #48]	; (801d450 <HAL_RCC_ClockConfig+0x26c>)
 801d420:	5ccb      	ldrb	r3, [r1, r3]
 801d422:	f003 031f 	and.w	r3, r3, #31
 801d426:	fa22 f303 	lsr.w	r3, r2, r3
 801d42a:	4a0a      	ldr	r2, [pc, #40]	; (801d454 <HAL_RCC_ClockConfig+0x270>)
 801d42c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801d42e:	4b0a      	ldr	r3, [pc, #40]	; (801d458 <HAL_RCC_ClockConfig+0x274>)
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	4618      	mov	r0, r3
 801d434:	f7fc f8de 	bl	80195f4 <HAL_InitTick>
 801d438:	4603      	mov	r3, r0
}
 801d43a:	4618      	mov	r0, r3
 801d43c:	3718      	adds	r7, #24
 801d43e:	46bd      	mov	sp, r7
 801d440:	bd80      	pop	{r7, pc}
 801d442:	bf00      	nop
 801d444:	40022000 	.word	0x40022000
 801d448:	40021000 	.word	0x40021000
 801d44c:	04c4b400 	.word	0x04c4b400
 801d450:	080251d4 	.word	0x080251d4
 801d454:	20000000 	.word	0x20000000
 801d458:	20000004 	.word	0x20000004

0801d45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d45c:	b480      	push	{r7}
 801d45e:	b087      	sub	sp, #28
 801d460:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801d462:	4b2c      	ldr	r3, [pc, #176]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d464:	689b      	ldr	r3, [r3, #8]
 801d466:	f003 030c 	and.w	r3, r3, #12
 801d46a:	2b04      	cmp	r3, #4
 801d46c:	d102      	bne.n	801d474 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801d46e:	4b2a      	ldr	r3, [pc, #168]	; (801d518 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d470:	613b      	str	r3, [r7, #16]
 801d472:	e047      	b.n	801d504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801d474:	4b27      	ldr	r3, [pc, #156]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d476:	689b      	ldr	r3, [r3, #8]
 801d478:	f003 030c 	and.w	r3, r3, #12
 801d47c:	2b08      	cmp	r3, #8
 801d47e:	d102      	bne.n	801d486 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801d480:	4b25      	ldr	r3, [pc, #148]	; (801d518 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d482:	613b      	str	r3, [r7, #16]
 801d484:	e03e      	b.n	801d504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801d486:	4b23      	ldr	r3, [pc, #140]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d488:	689b      	ldr	r3, [r3, #8]
 801d48a:	f003 030c 	and.w	r3, r3, #12
 801d48e:	2b0c      	cmp	r3, #12
 801d490:	d136      	bne.n	801d500 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d492:	4b20      	ldr	r3, [pc, #128]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d494:	68db      	ldr	r3, [r3, #12]
 801d496:	f003 0303 	and.w	r3, r3, #3
 801d49a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d49c:	4b1d      	ldr	r3, [pc, #116]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d49e:	68db      	ldr	r3, [r3, #12]
 801d4a0:	091b      	lsrs	r3, r3, #4
 801d4a2:	f003 030f 	and.w	r3, r3, #15
 801d4a6:	3301      	adds	r3, #1
 801d4a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	2b03      	cmp	r3, #3
 801d4ae:	d10c      	bne.n	801d4ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d4b0:	4a19      	ldr	r2, [pc, #100]	; (801d518 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d4b8:	4a16      	ldr	r2, [pc, #88]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4ba:	68d2      	ldr	r2, [r2, #12]
 801d4bc:	0a12      	lsrs	r2, r2, #8
 801d4be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d4c2:	fb02 f303 	mul.w	r3, r2, r3
 801d4c6:	617b      	str	r3, [r7, #20]
      break;
 801d4c8:	e00c      	b.n	801d4e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d4ca:	4a13      	ldr	r2, [pc, #76]	; (801d518 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d4cc:	68bb      	ldr	r3, [r7, #8]
 801d4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801d4d2:	4a10      	ldr	r2, [pc, #64]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4d4:	68d2      	ldr	r2, [r2, #12]
 801d4d6:	0a12      	lsrs	r2, r2, #8
 801d4d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d4dc:	fb02 f303 	mul.w	r3, r2, r3
 801d4e0:	617b      	str	r3, [r7, #20]
      break;
 801d4e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d4e4:	4b0b      	ldr	r3, [pc, #44]	; (801d514 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4e6:	68db      	ldr	r3, [r3, #12]
 801d4e8:	0e5b      	lsrs	r3, r3, #25
 801d4ea:	f003 0303 	and.w	r3, r3, #3
 801d4ee:	3301      	adds	r3, #1
 801d4f0:	005b      	lsls	r3, r3, #1
 801d4f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801d4f4:	697a      	ldr	r2, [r7, #20]
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 801d4fc:	613b      	str	r3, [r7, #16]
 801d4fe:	e001      	b.n	801d504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801d500:	2300      	movs	r3, #0
 801d502:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801d504:	693b      	ldr	r3, [r7, #16]
}
 801d506:	4618      	mov	r0, r3
 801d508:	371c      	adds	r7, #28
 801d50a:	46bd      	mov	sp, r7
 801d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d510:	4770      	bx	lr
 801d512:	bf00      	nop
 801d514:	40021000 	.word	0x40021000
 801d518:	00f42400 	.word	0x00f42400

0801d51c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d51c:	b480      	push	{r7}
 801d51e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d520:	4b03      	ldr	r3, [pc, #12]	; (801d530 <HAL_RCC_GetHCLKFreq+0x14>)
 801d522:	681b      	ldr	r3, [r3, #0]
}
 801d524:	4618      	mov	r0, r3
 801d526:	46bd      	mov	sp, r7
 801d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d52c:	4770      	bx	lr
 801d52e:	bf00      	nop
 801d530:	20000000 	.word	0x20000000

0801d534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d534:	b580      	push	{r7, lr}
 801d536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801d538:	f7ff fff0 	bl	801d51c <HAL_RCC_GetHCLKFreq>
 801d53c:	4602      	mov	r2, r0
 801d53e:	4b06      	ldr	r3, [pc, #24]	; (801d558 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d540:	689b      	ldr	r3, [r3, #8]
 801d542:	0a1b      	lsrs	r3, r3, #8
 801d544:	f003 0307 	and.w	r3, r3, #7
 801d548:	4904      	ldr	r1, [pc, #16]	; (801d55c <HAL_RCC_GetPCLK1Freq+0x28>)
 801d54a:	5ccb      	ldrb	r3, [r1, r3]
 801d54c:	f003 031f 	and.w	r3, r3, #31
 801d550:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d554:	4618      	mov	r0, r3
 801d556:	bd80      	pop	{r7, pc}
 801d558:	40021000 	.word	0x40021000
 801d55c:	080251e4 	.word	0x080251e4

0801d560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801d564:	f7ff ffda 	bl	801d51c <HAL_RCC_GetHCLKFreq>
 801d568:	4602      	mov	r2, r0
 801d56a:	4b06      	ldr	r3, [pc, #24]	; (801d584 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d56c:	689b      	ldr	r3, [r3, #8]
 801d56e:	0adb      	lsrs	r3, r3, #11
 801d570:	f003 0307 	and.w	r3, r3, #7
 801d574:	4904      	ldr	r1, [pc, #16]	; (801d588 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d576:	5ccb      	ldrb	r3, [r1, r3]
 801d578:	f003 031f 	and.w	r3, r3, #31
 801d57c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d580:	4618      	mov	r0, r3
 801d582:	bd80      	pop	{r7, pc}
 801d584:	40021000 	.word	0x40021000
 801d588:	080251e4 	.word	0x080251e4

0801d58c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801d58c:	b480      	push	{r7}
 801d58e:	b087      	sub	sp, #28
 801d590:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d592:	4b1e      	ldr	r3, [pc, #120]	; (801d60c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d594:	68db      	ldr	r3, [r3, #12]
 801d596:	f003 0303 	and.w	r3, r3, #3
 801d59a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d59c:	4b1b      	ldr	r3, [pc, #108]	; (801d60c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d59e:	68db      	ldr	r3, [r3, #12]
 801d5a0:	091b      	lsrs	r3, r3, #4
 801d5a2:	f003 030f 	and.w	r3, r3, #15
 801d5a6:	3301      	adds	r3, #1
 801d5a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801d5aa:	693b      	ldr	r3, [r7, #16]
 801d5ac:	2b03      	cmp	r3, #3
 801d5ae:	d10c      	bne.n	801d5ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d5b0:	4a17      	ldr	r2, [pc, #92]	; (801d610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d5b8:	4a14      	ldr	r2, [pc, #80]	; (801d60c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5ba:	68d2      	ldr	r2, [r2, #12]
 801d5bc:	0a12      	lsrs	r2, r2, #8
 801d5be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d5c2:	fb02 f303 	mul.w	r3, r2, r3
 801d5c6:	617b      	str	r3, [r7, #20]
    break;
 801d5c8:	e00c      	b.n	801d5e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d5ca:	4a11      	ldr	r2, [pc, #68]	; (801d610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801d5d2:	4a0e      	ldr	r2, [pc, #56]	; (801d60c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5d4:	68d2      	ldr	r2, [r2, #12]
 801d5d6:	0a12      	lsrs	r2, r2, #8
 801d5d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d5dc:	fb02 f303 	mul.w	r3, r2, r3
 801d5e0:	617b      	str	r3, [r7, #20]
    break;
 801d5e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d5e4:	4b09      	ldr	r3, [pc, #36]	; (801d60c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5e6:	68db      	ldr	r3, [r3, #12]
 801d5e8:	0e5b      	lsrs	r3, r3, #25
 801d5ea:	f003 0303 	and.w	r3, r3, #3
 801d5ee:	3301      	adds	r3, #1
 801d5f0:	005b      	lsls	r3, r3, #1
 801d5f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801d5f4:	697a      	ldr	r2, [r7, #20]
 801d5f6:	68bb      	ldr	r3, [r7, #8]
 801d5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 801d5fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801d5fe:	687b      	ldr	r3, [r7, #4]
}
 801d600:	4618      	mov	r0, r3
 801d602:	371c      	adds	r7, #28
 801d604:	46bd      	mov	sp, r7
 801d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d60a:	4770      	bx	lr
 801d60c:	40021000 	.word	0x40021000
 801d610:	00f42400 	.word	0x00f42400

0801d614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d614:	b580      	push	{r7, lr}
 801d616:	b086      	sub	sp, #24
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d61c:	2300      	movs	r3, #0
 801d61e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d620:	2300      	movs	r3, #0
 801d622:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	f000 8098 	beq.w	801d762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d632:	2300      	movs	r3, #0
 801d634:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d636:	4b43      	ldr	r3, [pc, #268]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d63a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d10d      	bne.n	801d65e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d642:	4b40      	ldr	r3, [pc, #256]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d646:	4a3f      	ldr	r2, [pc, #252]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d64c:	6593      	str	r3, [r2, #88]	; 0x58
 801d64e:	4b3d      	ldr	r3, [pc, #244]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d656:	60bb      	str	r3, [r7, #8]
 801d658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d65a:	2301      	movs	r3, #1
 801d65c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d65e:	4b3a      	ldr	r3, [pc, #232]	; (801d748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	4a39      	ldr	r2, [pc, #228]	; (801d748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d66a:	f7fc f80f 	bl	801968c <HAL_GetTick>
 801d66e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d670:	e009      	b.n	801d686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d672:	f7fc f80b 	bl	801968c <HAL_GetTick>
 801d676:	4602      	mov	r2, r0
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	1ad3      	subs	r3, r2, r3
 801d67c:	2b02      	cmp	r3, #2
 801d67e:	d902      	bls.n	801d686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801d680:	2303      	movs	r3, #3
 801d682:	74fb      	strb	r3, [r7, #19]
        break;
 801d684:	e005      	b.n	801d692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d686:	4b30      	ldr	r3, [pc, #192]	; (801d748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d0ef      	beq.n	801d672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801d692:	7cfb      	ldrb	r3, [r7, #19]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d159      	bne.n	801d74c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801d698:	4b2a      	ldr	r3, [pc, #168]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d69e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d6a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801d6a4:	697b      	ldr	r3, [r7, #20]
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d01e      	beq.n	801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d6ae:	697a      	ldr	r2, [r7, #20]
 801d6b0:	429a      	cmp	r2, r3
 801d6b2:	d019      	beq.n	801d6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801d6b4:	4b23      	ldr	r3, [pc, #140]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d6be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d6c0:	4b20      	ldr	r3, [pc, #128]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6c6:	4a1f      	ldr	r2, [pc, #124]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d6cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d6d0:	4b1c      	ldr	r3, [pc, #112]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6d6:	4a1b      	ldr	r2, [pc, #108]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d6dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801d6e0:	4a18      	ldr	r2, [pc, #96]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6e2:	697b      	ldr	r3, [r7, #20]
 801d6e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801d6e8:	697b      	ldr	r3, [r7, #20]
 801d6ea:	f003 0301 	and.w	r3, r3, #1
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d016      	beq.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d6f2:	f7fb ffcb 	bl	801968c <HAL_GetTick>
 801d6f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d6f8:	e00b      	b.n	801d712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d6fa:	f7fb ffc7 	bl	801968c <HAL_GetTick>
 801d6fe:	4602      	mov	r2, r0
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	1ad3      	subs	r3, r2, r3
 801d704:	f241 3288 	movw	r2, #5000	; 0x1388
 801d708:	4293      	cmp	r3, r2
 801d70a:	d902      	bls.n	801d712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801d70c:	2303      	movs	r3, #3
 801d70e:	74fb      	strb	r3, [r7, #19]
            break;
 801d710:	e006      	b.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d712:	4b0c      	ldr	r3, [pc, #48]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d718:	f003 0302 	and.w	r3, r3, #2
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d0ec      	beq.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801d720:	7cfb      	ldrb	r3, [r7, #19]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d10b      	bne.n	801d73e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d726:	4b07      	ldr	r3, [pc, #28]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d72c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d734:	4903      	ldr	r1, [pc, #12]	; (801d744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d736:	4313      	orrs	r3, r2
 801d738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d73c:	e008      	b.n	801d750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d73e:	7cfb      	ldrb	r3, [r7, #19]
 801d740:	74bb      	strb	r3, [r7, #18]
 801d742:	e005      	b.n	801d750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801d744:	40021000 	.word	0x40021000
 801d748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d74c:	7cfb      	ldrb	r3, [r7, #19]
 801d74e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801d750:	7c7b      	ldrb	r3, [r7, #17]
 801d752:	2b01      	cmp	r3, #1
 801d754:	d105      	bne.n	801d762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d756:	4ba7      	ldr	r3, [pc, #668]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d75a:	4aa6      	ldr	r2, [pc, #664]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d75c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d760:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	f003 0301 	and.w	r3, r3, #1
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d00a      	beq.n	801d784 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d76e:	4ba1      	ldr	r3, [pc, #644]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d774:	f023 0203 	bic.w	r2, r3, #3
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	685b      	ldr	r3, [r3, #4]
 801d77c:	499d      	ldr	r1, [pc, #628]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d77e:	4313      	orrs	r3, r2
 801d780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	f003 0302 	and.w	r3, r3, #2
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d00a      	beq.n	801d7a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d790:	4b98      	ldr	r3, [pc, #608]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d796:	f023 020c 	bic.w	r2, r3, #12
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	689b      	ldr	r3, [r3, #8]
 801d79e:	4995      	ldr	r1, [pc, #596]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7a0:	4313      	orrs	r3, r2
 801d7a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	f003 0304 	and.w	r3, r3, #4
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d00a      	beq.n	801d7c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d7b2:	4b90      	ldr	r3, [pc, #576]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	68db      	ldr	r3, [r3, #12]
 801d7c0:	498c      	ldr	r1, [pc, #560]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7c2:	4313      	orrs	r3, r2
 801d7c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	f003 0308 	and.w	r3, r3, #8
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d00a      	beq.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d7d4:	4b87      	ldr	r3, [pc, #540]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	691b      	ldr	r3, [r3, #16]
 801d7e2:	4984      	ldr	r1, [pc, #528]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7e4:	4313      	orrs	r3, r2
 801d7e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	f003 0310 	and.w	r3, r3, #16
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d00a      	beq.n	801d80c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d7f6:	4b7f      	ldr	r3, [pc, #508]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	695b      	ldr	r3, [r3, #20]
 801d804:	497b      	ldr	r1, [pc, #492]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d806:	4313      	orrs	r3, r2
 801d808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	f003 0320 	and.w	r3, r3, #32
 801d814:	2b00      	cmp	r3, #0
 801d816:	d00a      	beq.n	801d82e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d818:	4b76      	ldr	r3, [pc, #472]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d81e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	699b      	ldr	r3, [r3, #24]
 801d826:	4973      	ldr	r1, [pc, #460]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d828:	4313      	orrs	r3, r2
 801d82a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d836:	2b00      	cmp	r3, #0
 801d838:	d00a      	beq.n	801d850 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d83a:	4b6e      	ldr	r3, [pc, #440]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	69db      	ldr	r3, [r3, #28]
 801d848:	496a      	ldr	r1, [pc, #424]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d84a:	4313      	orrs	r3, r2
 801d84c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d00a      	beq.n	801d872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d85c:	4b65      	ldr	r3, [pc, #404]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	6a1b      	ldr	r3, [r3, #32]
 801d86a:	4962      	ldr	r1, [pc, #392]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d86c:	4313      	orrs	r3, r2
 801d86e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d00a      	beq.n	801d894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d87e:	4b5d      	ldr	r3, [pc, #372]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d88c:	4959      	ldr	r1, [pc, #356]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d88e:	4313      	orrs	r3, r2
 801d890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d00a      	beq.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d8a0:	4b54      	ldr	r3, [pc, #336]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8ae:	4951      	ldr	r1, [pc, #324]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8b0:	4313      	orrs	r3, r2
 801d8b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d015      	beq.n	801d8ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d8c2:	4b4c      	ldr	r3, [pc, #304]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8d0:	4948      	ldr	r1, [pc, #288]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8d2:	4313      	orrs	r3, r2
 801d8d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d8e0:	d105      	bne.n	801d8ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d8e2:	4b44      	ldr	r3, [pc, #272]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8e4:	68db      	ldr	r3, [r3, #12]
 801d8e6:	4a43      	ldr	r2, [pc, #268]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d8ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d015      	beq.n	801d926 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d8fa:	4b3e      	ldr	r3, [pc, #248]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d908:	493a      	ldr	r1, [pc, #232]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d90a:	4313      	orrs	r3, r2
 801d90c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d918:	d105      	bne.n	801d926 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d91a:	4b36      	ldr	r3, [pc, #216]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d91c:	68db      	ldr	r3, [r3, #12]
 801d91e:	4a35      	ldr	r2, [pc, #212]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d924:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d015      	beq.n	801d95e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d932:	4b30      	ldr	r3, [pc, #192]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d940:	492c      	ldr	r1, [pc, #176]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d942:	4313      	orrs	r3, r2
 801d944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d94c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d950:	d105      	bne.n	801d95e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d952:	4b28      	ldr	r3, [pc, #160]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d954:	68db      	ldr	r3, [r3, #12]
 801d956:	4a27      	ldr	r2, [pc, #156]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d95c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d966:	2b00      	cmp	r3, #0
 801d968:	d015      	beq.n	801d996 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d96a:	4b22      	ldr	r3, [pc, #136]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d970:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d978:	491e      	ldr	r1, [pc, #120]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d97a:	4313      	orrs	r3, r2
 801d97c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d988:	d105      	bne.n	801d996 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d98a:	4b1a      	ldr	r3, [pc, #104]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d98c:	68db      	ldr	r3, [r3, #12]
 801d98e:	4a19      	ldr	r2, [pc, #100]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d994:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d015      	beq.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d9a2:	4b14      	ldr	r3, [pc, #80]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9b0:	4910      	ldr	r1, [pc, #64]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9b2:	4313      	orrs	r3, r2
 801d9b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d9c0:	d105      	bne.n	801d9ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d9c2:	4b0c      	ldr	r3, [pc, #48]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9c4:	68db      	ldr	r3, [r3, #12]
 801d9c6:	4a0b      	ldr	r2, [pc, #44]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d9cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d018      	beq.n	801da0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801d9da:	4b06      	ldr	r3, [pc, #24]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9e8:	4902      	ldr	r1, [pc, #8]	; (801d9f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9ea:	4313      	orrs	r3, r2
 801d9ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	e001      	b.n	801d9f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801d9f4:	40021000 	.word	0x40021000
 801d9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d9fe:	d105      	bne.n	801da0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801da00:	4b21      	ldr	r3, [pc, #132]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da02:	68db      	ldr	r3, [r3, #12]
 801da04:	4a20      	ldr	r2, [pc, #128]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801da14:	2b00      	cmp	r3, #0
 801da16:	d015      	beq.n	801da44 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801da18:	4b1b      	ldr	r3, [pc, #108]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801da1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da26:	4918      	ldr	r1, [pc, #96]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da28:	4313      	orrs	r3, r2
 801da2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da36:	d105      	bne.n	801da44 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801da38:	4b13      	ldr	r3, [pc, #76]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da3a:	68db      	ldr	r3, [r3, #12]
 801da3c:	4a12      	ldr	r2, [pc, #72]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d015      	beq.n	801da7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801da50:	4b0d      	ldr	r3, [pc, #52]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801da56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da5e:	490a      	ldr	r1, [pc, #40]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da60:	4313      	orrs	r3, r2
 801da62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801da6e:	d105      	bne.n	801da7c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801da70:	4b05      	ldr	r3, [pc, #20]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da72:	68db      	ldr	r3, [r3, #12]
 801da74:	4a04      	ldr	r2, [pc, #16]	; (801da88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801da7c:	7cbb      	ldrb	r3, [r7, #18]
}
 801da7e:	4618      	mov	r0, r3
 801da80:	3718      	adds	r7, #24
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop
 801da88:	40021000 	.word	0x40021000

0801da8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801da8c:	b580      	push	{r7, lr}
 801da8e:	b084      	sub	sp, #16
 801da90:	af00      	add	r7, sp, #0
 801da92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d101      	bne.n	801da9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801da9a:	2301      	movs	r3, #1
 801da9c:	e09d      	b.n	801dbda <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d108      	bne.n	801dab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	685b      	ldr	r3, [r3, #4]
 801daaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801daae:	d009      	beq.n	801dac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	2200      	movs	r2, #0
 801dab4:	61da      	str	r2, [r3, #28]
 801dab6:	e005      	b.n	801dac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	2200      	movs	r2, #0
 801dabc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	2200      	movs	r2, #0
 801dac2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	2200      	movs	r2, #0
 801dac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dad0:	b2db      	uxtb	r3, r3
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d106      	bne.n	801dae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	2200      	movs	r2, #0
 801dada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801dade:	6878      	ldr	r0, [r7, #4]
 801dae0:	f7fa f8f2 	bl	8017cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	2202      	movs	r2, #2
 801dae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	681a      	ldr	r2, [r3, #0]
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dafa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	68db      	ldr	r3, [r3, #12]
 801db00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db04:	d902      	bls.n	801db0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801db06:	2300      	movs	r3, #0
 801db08:	60fb      	str	r3, [r7, #12]
 801db0a:	e002      	b.n	801db12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801db0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801db10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	68db      	ldr	r3, [r3, #12]
 801db16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801db1a:	d007      	beq.n	801db2c <HAL_SPI_Init+0xa0>
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	68db      	ldr	r3, [r3, #12]
 801db20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db24:	d002      	beq.n	801db2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	2200      	movs	r2, #0
 801db2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	685b      	ldr	r3, [r3, #4]
 801db30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	689b      	ldr	r3, [r3, #8]
 801db38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801db3c:	431a      	orrs	r2, r3
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	691b      	ldr	r3, [r3, #16]
 801db42:	f003 0302 	and.w	r3, r3, #2
 801db46:	431a      	orrs	r2, r3
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	695b      	ldr	r3, [r3, #20]
 801db4c:	f003 0301 	and.w	r3, r3, #1
 801db50:	431a      	orrs	r2, r3
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	699b      	ldr	r3, [r3, #24]
 801db56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801db5a:	431a      	orrs	r2, r3
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	69db      	ldr	r3, [r3, #28]
 801db60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801db64:	431a      	orrs	r2, r3
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	6a1b      	ldr	r3, [r3, #32]
 801db6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db6e:	ea42 0103 	orr.w	r1, r2, r3
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	430a      	orrs	r2, r1
 801db80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	699b      	ldr	r3, [r3, #24]
 801db86:	0c1b      	lsrs	r3, r3, #16
 801db88:	f003 0204 	and.w	r2, r3, #4
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db90:	f003 0310 	and.w	r3, r3, #16
 801db94:	431a      	orrs	r2, r3
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db9a:	f003 0308 	and.w	r3, r3, #8
 801db9e:	431a      	orrs	r2, r3
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	68db      	ldr	r3, [r3, #12]
 801dba4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801dba8:	ea42 0103 	orr.w	r1, r2, r3
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	430a      	orrs	r2, r1
 801dbb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	69da      	ldr	r2, [r3, #28]
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dbc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	2200      	movs	r2, #0
 801dbce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	2201      	movs	r2, #1
 801dbd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801dbd8:	2300      	movs	r3, #0
}
 801dbda:	4618      	mov	r0, r3
 801dbdc:	3710      	adds	r7, #16
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	bd80      	pop	{r7, pc}

0801dbe2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dbe2:	b580      	push	{r7, lr}
 801dbe4:	b088      	sub	sp, #32
 801dbe6:	af00      	add	r7, sp, #0
 801dbe8:	60f8      	str	r0, [r7, #12]
 801dbea:	60b9      	str	r1, [r7, #8]
 801dbec:	603b      	str	r3, [r7, #0]
 801dbee:	4613      	mov	r3, r2
 801dbf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801dbfc:	2b01      	cmp	r3, #1
 801dbfe:	d101      	bne.n	801dc04 <HAL_SPI_Transmit+0x22>
 801dc00:	2302      	movs	r3, #2
 801dc02:	e158      	b.n	801deb6 <HAL_SPI_Transmit+0x2d4>
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	2201      	movs	r2, #1
 801dc08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801dc0c:	f7fb fd3e 	bl	801968c <HAL_GetTick>
 801dc10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801dc12:	88fb      	ldrh	r3, [r7, #6]
 801dc14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801dc16:	68fb      	ldr	r3, [r7, #12]
 801dc18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dc1c:	b2db      	uxtb	r3, r3
 801dc1e:	2b01      	cmp	r3, #1
 801dc20:	d002      	beq.n	801dc28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801dc22:	2302      	movs	r3, #2
 801dc24:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dc26:	e13d      	b.n	801dea4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801dc28:	68bb      	ldr	r3, [r7, #8]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d002      	beq.n	801dc34 <HAL_SPI_Transmit+0x52>
 801dc2e:	88fb      	ldrh	r3, [r7, #6]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d102      	bne.n	801dc3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801dc34:	2301      	movs	r3, #1
 801dc36:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dc38:	e134      	b.n	801dea4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	2203      	movs	r2, #3
 801dc3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	2200      	movs	r2, #0
 801dc46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	68ba      	ldr	r2, [r7, #8]
 801dc4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	88fa      	ldrh	r2, [r7, #6]
 801dc52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	88fa      	ldrh	r2, [r7, #6]
 801dc58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	2200      	movs	r2, #0
 801dc5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	2200      	movs	r2, #0
 801dc64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	2200      	movs	r2, #0
 801dc74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	2200      	movs	r2, #0
 801dc7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	689b      	ldr	r3, [r3, #8]
 801dc80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc84:	d10f      	bne.n	801dca6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	681a      	ldr	r2, [r3, #0]
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dc94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	681a      	ldr	r2, [r3, #0]
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801dca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dcb0:	2b40      	cmp	r3, #64	; 0x40
 801dcb2:	d007      	beq.n	801dcc4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	681a      	ldr	r2, [r3, #0]
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dcc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	68db      	ldr	r3, [r3, #12]
 801dcc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dccc:	d94b      	bls.n	801dd66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	685b      	ldr	r3, [r3, #4]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d002      	beq.n	801dcdc <HAL_SPI_Transmit+0xfa>
 801dcd6:	8afb      	ldrh	r3, [r7, #22]
 801dcd8:	2b01      	cmp	r3, #1
 801dcda:	d13e      	bne.n	801dd5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dce0:	881a      	ldrh	r2, [r3, #0]
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcec:	1c9a      	adds	r2, r3, #2
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcf6:	b29b      	uxth	r3, r3
 801dcf8:	3b01      	subs	r3, #1
 801dcfa:	b29a      	uxth	r2, r3
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801dd00:	e02b      	b.n	801dd5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	689b      	ldr	r3, [r3, #8]
 801dd08:	f003 0302 	and.w	r3, r3, #2
 801dd0c:	2b02      	cmp	r3, #2
 801dd0e:	d112      	bne.n	801dd36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd10:	68fb      	ldr	r3, [r7, #12]
 801dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd14:	881a      	ldrh	r2, [r3, #0]
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd20:	1c9a      	adds	r2, r3, #2
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd2a:	b29b      	uxth	r3, r3
 801dd2c:	3b01      	subs	r3, #1
 801dd2e:	b29a      	uxth	r2, r3
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dd34:	e011      	b.n	801dd5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801dd36:	f7fb fca9 	bl	801968c <HAL_GetTick>
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	69bb      	ldr	r3, [r7, #24]
 801dd3e:	1ad3      	subs	r3, r2, r3
 801dd40:	683a      	ldr	r2, [r7, #0]
 801dd42:	429a      	cmp	r2, r3
 801dd44:	d803      	bhi.n	801dd4e <HAL_SPI_Transmit+0x16c>
 801dd46:	683b      	ldr	r3, [r7, #0]
 801dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd4c:	d102      	bne.n	801dd54 <HAL_SPI_Transmit+0x172>
 801dd4e:	683b      	ldr	r3, [r7, #0]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d102      	bne.n	801dd5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801dd54:	2303      	movs	r3, #3
 801dd56:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dd58:	e0a4      	b.n	801dea4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd5e:	b29b      	uxth	r3, r3
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d1ce      	bne.n	801dd02 <HAL_SPI_Transmit+0x120>
 801dd64:	e07c      	b.n	801de60 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	685b      	ldr	r3, [r3, #4]
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d002      	beq.n	801dd74 <HAL_SPI_Transmit+0x192>
 801dd6e:	8afb      	ldrh	r3, [r7, #22]
 801dd70:	2b01      	cmp	r3, #1
 801dd72:	d170      	bne.n	801de56 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd78:	b29b      	uxth	r3, r3
 801dd7a:	2b01      	cmp	r3, #1
 801dd7c:	d912      	bls.n	801dda4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd82:	881a      	ldrh	r2, [r3, #0]
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd8e:	1c9a      	adds	r2, r3, #2
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd98:	b29b      	uxth	r3, r3
 801dd9a:	3b02      	subs	r3, #2
 801dd9c:	b29a      	uxth	r2, r3
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dda2:	e058      	b.n	801de56 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	330c      	adds	r3, #12
 801ddae:	7812      	ldrb	r2, [r2, #0]
 801ddb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddb6:	1c5a      	adds	r2, r3, #1
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddc0:	b29b      	uxth	r3, r3
 801ddc2:	3b01      	subs	r3, #1
 801ddc4:	b29a      	uxth	r2, r3
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801ddca:	e044      	b.n	801de56 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	689b      	ldr	r3, [r3, #8]
 801ddd2:	f003 0302 	and.w	r3, r3, #2
 801ddd6:	2b02      	cmp	r3, #2
 801ddd8:	d12b      	bne.n	801de32 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddde:	b29b      	uxth	r3, r3
 801dde0:	2b01      	cmp	r3, #1
 801dde2:	d912      	bls.n	801de0a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dde8:	881a      	ldrh	r2, [r3, #0]
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddf4:	1c9a      	adds	r2, r3, #2
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddfe:	b29b      	uxth	r3, r3
 801de00:	3b02      	subs	r3, #2
 801de02:	b29a      	uxth	r2, r3
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	87da      	strh	r2, [r3, #62]	; 0x3e
 801de08:	e025      	b.n	801de56 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	330c      	adds	r3, #12
 801de14:	7812      	ldrb	r2, [r2, #0]
 801de16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de1c:	1c5a      	adds	r2, r3, #1
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de26:	b29b      	uxth	r3, r3
 801de28:	3b01      	subs	r3, #1
 801de2a:	b29a      	uxth	r2, r3
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801de30:	e011      	b.n	801de56 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801de32:	f7fb fc2b 	bl	801968c <HAL_GetTick>
 801de36:	4602      	mov	r2, r0
 801de38:	69bb      	ldr	r3, [r7, #24]
 801de3a:	1ad3      	subs	r3, r2, r3
 801de3c:	683a      	ldr	r2, [r7, #0]
 801de3e:	429a      	cmp	r2, r3
 801de40:	d803      	bhi.n	801de4a <HAL_SPI_Transmit+0x268>
 801de42:	683b      	ldr	r3, [r7, #0]
 801de44:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de48:	d102      	bne.n	801de50 <HAL_SPI_Transmit+0x26e>
 801de4a:	683b      	ldr	r3, [r7, #0]
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d102      	bne.n	801de56 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801de50:	2303      	movs	r3, #3
 801de52:	77fb      	strb	r3, [r7, #31]
          goto error;
 801de54:	e026      	b.n	801dea4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de5a:	b29b      	uxth	r3, r3
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d1b5      	bne.n	801ddcc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801de60:	69ba      	ldr	r2, [r7, #24]
 801de62:	6839      	ldr	r1, [r7, #0]
 801de64:	68f8      	ldr	r0, [r7, #12]
 801de66:	f000 fce3 	bl	801e830 <SPI_EndRxTxTransaction>
 801de6a:	4603      	mov	r3, r0
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d002      	beq.n	801de76 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	2220      	movs	r2, #32
 801de74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	689b      	ldr	r3, [r3, #8]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d10a      	bne.n	801de94 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801de7e:	2300      	movs	r3, #0
 801de80:	613b      	str	r3, [r7, #16]
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	68db      	ldr	r3, [r3, #12]
 801de88:	613b      	str	r3, [r7, #16]
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	689b      	ldr	r3, [r3, #8]
 801de90:	613b      	str	r3, [r7, #16]
 801de92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d002      	beq.n	801dea2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801de9c:	2301      	movs	r3, #1
 801de9e:	77fb      	strb	r3, [r7, #31]
 801dea0:	e000      	b.n	801dea4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801dea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	2201      	movs	r2, #1
 801dea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	2200      	movs	r2, #0
 801deb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801deb4:	7ffb      	ldrb	r3, [r7, #31]
}
 801deb6:	4618      	mov	r0, r3
 801deb8:	3720      	adds	r7, #32
 801deba:	46bd      	mov	sp, r7
 801debc:	bd80      	pop	{r7, pc}

0801debe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801debe:	b580      	push	{r7, lr}
 801dec0:	b088      	sub	sp, #32
 801dec2:	af02      	add	r7, sp, #8
 801dec4:	60f8      	str	r0, [r7, #12]
 801dec6:	60b9      	str	r1, [r7, #8]
 801dec8:	603b      	str	r3, [r7, #0]
 801deca:	4613      	mov	r3, r2
 801decc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801dece:	2300      	movs	r3, #0
 801ded0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	685b      	ldr	r3, [r3, #4]
 801ded6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801deda:	d112      	bne.n	801df02 <HAL_SPI_Receive+0x44>
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	689b      	ldr	r3, [r3, #8]
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d10e      	bne.n	801df02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	2204      	movs	r2, #4
 801dee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801deec:	88fa      	ldrh	r2, [r7, #6]
 801deee:	683b      	ldr	r3, [r7, #0]
 801def0:	9300      	str	r3, [sp, #0]
 801def2:	4613      	mov	r3, r2
 801def4:	68ba      	ldr	r2, [r7, #8]
 801def6:	68b9      	ldr	r1, [r7, #8]
 801def8:	68f8      	ldr	r0, [r7, #12]
 801defa:	f000 f910 	bl	801e11e <HAL_SPI_TransmitReceive>
 801defe:	4603      	mov	r3, r0
 801df00:	e109      	b.n	801e116 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801df08:	2b01      	cmp	r3, #1
 801df0a:	d101      	bne.n	801df10 <HAL_SPI_Receive+0x52>
 801df0c:	2302      	movs	r3, #2
 801df0e:	e102      	b.n	801e116 <HAL_SPI_Receive+0x258>
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	2201      	movs	r2, #1
 801df14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801df18:	f7fb fbb8 	bl	801968c <HAL_GetTick>
 801df1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801df24:	b2db      	uxtb	r3, r3
 801df26:	2b01      	cmp	r3, #1
 801df28:	d002      	beq.n	801df30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801df2a:	2302      	movs	r3, #2
 801df2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801df2e:	e0e9      	b.n	801e104 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801df30:	68bb      	ldr	r3, [r7, #8]
 801df32:	2b00      	cmp	r3, #0
 801df34:	d002      	beq.n	801df3c <HAL_SPI_Receive+0x7e>
 801df36:	88fb      	ldrh	r3, [r7, #6]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d102      	bne.n	801df42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801df3c:	2301      	movs	r3, #1
 801df3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801df40:	e0e0      	b.n	801e104 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	2204      	movs	r2, #4
 801df46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	2200      	movs	r2, #0
 801df4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	68ba      	ldr	r2, [r7, #8]
 801df54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	88fa      	ldrh	r2, [r7, #6]
 801df5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	88fa      	ldrh	r2, [r7, #6]
 801df62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	2200      	movs	r2, #0
 801df6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	2200      	movs	r2, #0
 801df70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	2200      	movs	r2, #0
 801df76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	2200      	movs	r2, #0
 801df7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	2200      	movs	r2, #0
 801df82:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	68db      	ldr	r3, [r3, #12]
 801df88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801df8c:	d908      	bls.n	801dfa0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	685a      	ldr	r2, [r3, #4]
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801df9c:	605a      	str	r2, [r3, #4]
 801df9e:	e007      	b.n	801dfb0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	685a      	ldr	r2, [r3, #4]
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dfae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	689b      	ldr	r3, [r3, #8]
 801dfb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dfb8:	d10f      	bne.n	801dfda <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	681a      	ldr	r2, [r3, #0]
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dfc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	681a      	ldr	r2, [r3, #0]
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	681b      	ldr	r3, [r3, #0]
 801dfd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801dfd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dfe4:	2b40      	cmp	r3, #64	; 0x40
 801dfe6:	d007      	beq.n	801dff8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dff6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	68db      	ldr	r3, [r3, #12]
 801dffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e000:	d867      	bhi.n	801e0d2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e002:	e030      	b.n	801e066 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	689b      	ldr	r3, [r3, #8]
 801e00a:	f003 0301 	and.w	r3, r3, #1
 801e00e:	2b01      	cmp	r3, #1
 801e010:	d117      	bne.n	801e042 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	f103 020c 	add.w	r2, r3, #12
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e01e:	7812      	ldrb	r2, [r2, #0]
 801e020:	b2d2      	uxtb	r2, r2
 801e022:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e028:	1c5a      	adds	r2, r3, #1
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e034:	b29b      	uxth	r3, r3
 801e036:	3b01      	subs	r3, #1
 801e038:	b29a      	uxth	r2, r3
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e040:	e011      	b.n	801e066 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e042:	f7fb fb23 	bl	801968c <HAL_GetTick>
 801e046:	4602      	mov	r2, r0
 801e048:	693b      	ldr	r3, [r7, #16]
 801e04a:	1ad3      	subs	r3, r2, r3
 801e04c:	683a      	ldr	r2, [r7, #0]
 801e04e:	429a      	cmp	r2, r3
 801e050:	d803      	bhi.n	801e05a <HAL_SPI_Receive+0x19c>
 801e052:	683b      	ldr	r3, [r7, #0]
 801e054:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e058:	d102      	bne.n	801e060 <HAL_SPI_Receive+0x1a2>
 801e05a:	683b      	ldr	r3, [r7, #0]
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d102      	bne.n	801e066 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e060:	2303      	movs	r3, #3
 801e062:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e064:	e04e      	b.n	801e104 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d1c8      	bne.n	801e004 <HAL_SPI_Receive+0x146>
 801e072:	e034      	b.n	801e0de <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	689b      	ldr	r3, [r3, #8]
 801e07a:	f003 0301 	and.w	r3, r3, #1
 801e07e:	2b01      	cmp	r3, #1
 801e080:	d115      	bne.n	801e0ae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	68da      	ldr	r2, [r3, #12]
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e08c:	b292      	uxth	r2, r2
 801e08e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e094:	1c9a      	adds	r2, r3, #2
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e0a0:	b29b      	uxth	r3, r3
 801e0a2:	3b01      	subs	r3, #1
 801e0a4:	b29a      	uxth	r2, r3
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e0ac:	e011      	b.n	801e0d2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e0ae:	f7fb faed 	bl	801968c <HAL_GetTick>
 801e0b2:	4602      	mov	r2, r0
 801e0b4:	693b      	ldr	r3, [r7, #16]
 801e0b6:	1ad3      	subs	r3, r2, r3
 801e0b8:	683a      	ldr	r2, [r7, #0]
 801e0ba:	429a      	cmp	r2, r3
 801e0bc:	d803      	bhi.n	801e0c6 <HAL_SPI_Receive+0x208>
 801e0be:	683b      	ldr	r3, [r7, #0]
 801e0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0c4:	d102      	bne.n	801e0cc <HAL_SPI_Receive+0x20e>
 801e0c6:	683b      	ldr	r3, [r7, #0]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d102      	bne.n	801e0d2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e0cc:	2303      	movs	r3, #3
 801e0ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e0d0:	e018      	b.n	801e104 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e0d8:	b29b      	uxth	r3, r3
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d1ca      	bne.n	801e074 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e0de:	693a      	ldr	r2, [r7, #16]
 801e0e0:	6839      	ldr	r1, [r7, #0]
 801e0e2:	68f8      	ldr	r0, [r7, #12]
 801e0e4:	f000 fb4c 	bl	801e780 <SPI_EndRxTransaction>
 801e0e8:	4603      	mov	r3, r0
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d002      	beq.n	801e0f4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e0ee:	68fb      	ldr	r3, [r7, #12]
 801e0f0:	2220      	movs	r2, #32
 801e0f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d002      	beq.n	801e102 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801e0fc:	2301      	movs	r3, #1
 801e0fe:	75fb      	strb	r3, [r7, #23]
 801e100:	e000      	b.n	801e104 <HAL_SPI_Receive+0x246>
  }

error :
 801e102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	2201      	movs	r2, #1
 801e108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e10c:	68fb      	ldr	r3, [r7, #12]
 801e10e:	2200      	movs	r2, #0
 801e110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e114:	7dfb      	ldrb	r3, [r7, #23]
}
 801e116:	4618      	mov	r0, r3
 801e118:	3718      	adds	r7, #24
 801e11a:	46bd      	mov	sp, r7
 801e11c:	bd80      	pop	{r7, pc}

0801e11e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801e11e:	b580      	push	{r7, lr}
 801e120:	b08a      	sub	sp, #40	; 0x28
 801e122:	af00      	add	r7, sp, #0
 801e124:	60f8      	str	r0, [r7, #12]
 801e126:	60b9      	str	r1, [r7, #8]
 801e128:	607a      	str	r2, [r7, #4]
 801e12a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e12c:	2301      	movs	r3, #1
 801e12e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801e130:	2300      	movs	r3, #0
 801e132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e13c:	2b01      	cmp	r3, #1
 801e13e:	d101      	bne.n	801e144 <HAL_SPI_TransmitReceive+0x26>
 801e140:	2302      	movs	r3, #2
 801e142:	e1fb      	b.n	801e53c <HAL_SPI_TransmitReceive+0x41e>
 801e144:	68fb      	ldr	r3, [r7, #12]
 801e146:	2201      	movs	r2, #1
 801e148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e14c:	f7fb fa9e 	bl	801968c <HAL_GetTick>
 801e150:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e158:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	685b      	ldr	r3, [r3, #4]
 801e15e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e160:	887b      	ldrh	r3, [r7, #2]
 801e162:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e164:	887b      	ldrh	r3, [r7, #2]
 801e166:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e168:	7efb      	ldrb	r3, [r7, #27]
 801e16a:	2b01      	cmp	r3, #1
 801e16c:	d00e      	beq.n	801e18c <HAL_SPI_TransmitReceive+0x6e>
 801e16e:	697b      	ldr	r3, [r7, #20]
 801e170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e174:	d106      	bne.n	801e184 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	689b      	ldr	r3, [r3, #8]
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d102      	bne.n	801e184 <HAL_SPI_TransmitReceive+0x66>
 801e17e:	7efb      	ldrb	r3, [r7, #27]
 801e180:	2b04      	cmp	r3, #4
 801e182:	d003      	beq.n	801e18c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e184:	2302      	movs	r3, #2
 801e186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e18a:	e1cd      	b.n	801e528 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e18c:	68bb      	ldr	r3, [r7, #8]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d005      	beq.n	801e19e <HAL_SPI_TransmitReceive+0x80>
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	2b00      	cmp	r3, #0
 801e196:	d002      	beq.n	801e19e <HAL_SPI_TransmitReceive+0x80>
 801e198:	887b      	ldrh	r3, [r7, #2]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d103      	bne.n	801e1a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e19e:	2301      	movs	r3, #1
 801e1a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e1a4:	e1c0      	b.n	801e528 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e1a6:	68fb      	ldr	r3, [r7, #12]
 801e1a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e1ac:	b2db      	uxtb	r3, r3
 801e1ae:	2b04      	cmp	r3, #4
 801e1b0:	d003      	beq.n	801e1ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	2205      	movs	r2, #5
 801e1b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	687a      	ldr	r2, [r7, #4]
 801e1c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e1c6:	68fb      	ldr	r3, [r7, #12]
 801e1c8:	887a      	ldrh	r2, [r7, #2]
 801e1ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	887a      	ldrh	r2, [r7, #2]
 801e1d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	68ba      	ldr	r2, [r7, #8]
 801e1da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	887a      	ldrh	r2, [r7, #2]
 801e1e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	887a      	ldrh	r2, [r7, #2]
 801e1e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	2200      	movs	r2, #0
 801e1ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	68db      	ldr	r3, [r3, #12]
 801e1f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e1fc:	d802      	bhi.n	801e204 <HAL_SPI_TransmitReceive+0xe6>
 801e1fe:	8a3b      	ldrh	r3, [r7, #16]
 801e200:	2b01      	cmp	r3, #1
 801e202:	d908      	bls.n	801e216 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	685a      	ldr	r2, [r3, #4]
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e212:	605a      	str	r2, [r3, #4]
 801e214:	e007      	b.n	801e226 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	685a      	ldr	r2, [r3, #4]
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e224:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e230:	2b40      	cmp	r3, #64	; 0x40
 801e232:	d007      	beq.n	801e244 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e234:	68fb      	ldr	r3, [r7, #12]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	681a      	ldr	r2, [r3, #0]
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	68db      	ldr	r3, [r3, #12]
 801e248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e24c:	d97c      	bls.n	801e348 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	685b      	ldr	r3, [r3, #4]
 801e252:	2b00      	cmp	r3, #0
 801e254:	d002      	beq.n	801e25c <HAL_SPI_TransmitReceive+0x13e>
 801e256:	8a7b      	ldrh	r3, [r7, #18]
 801e258:	2b01      	cmp	r3, #1
 801e25a:	d169      	bne.n	801e330 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e260:	881a      	ldrh	r2, [r3, #0]
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e26c:	1c9a      	adds	r2, r3, #2
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e276:	b29b      	uxth	r3, r3
 801e278:	3b01      	subs	r3, #1
 801e27a:	b29a      	uxth	r2, r3
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e280:	e056      	b.n	801e330 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	689b      	ldr	r3, [r3, #8]
 801e288:	f003 0302 	and.w	r3, r3, #2
 801e28c:	2b02      	cmp	r3, #2
 801e28e:	d11b      	bne.n	801e2c8 <HAL_SPI_TransmitReceive+0x1aa>
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e294:	b29b      	uxth	r3, r3
 801e296:	2b00      	cmp	r3, #0
 801e298:	d016      	beq.n	801e2c8 <HAL_SPI_TransmitReceive+0x1aa>
 801e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	d113      	bne.n	801e2c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2a4:	881a      	ldrh	r2, [r3, #0]
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2b0:	1c9a      	adds	r2, r3, #2
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e2ba:	b29b      	uxth	r3, r3
 801e2bc:	3b01      	subs	r3, #1
 801e2be:	b29a      	uxth	r2, r3
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	689b      	ldr	r3, [r3, #8]
 801e2ce:	f003 0301 	and.w	r3, r3, #1
 801e2d2:	2b01      	cmp	r3, #1
 801e2d4:	d11c      	bne.n	801e310 <HAL_SPI_TransmitReceive+0x1f2>
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2dc:	b29b      	uxth	r3, r3
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d016      	beq.n	801e310 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	68da      	ldr	r2, [r3, #12]
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2ec:	b292      	uxth	r2, r2
 801e2ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2f4:	1c9a      	adds	r2, r3, #2
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e300:	b29b      	uxth	r3, r3
 801e302:	3b01      	subs	r3, #1
 801e304:	b29a      	uxth	r2, r3
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e30c:	2301      	movs	r3, #1
 801e30e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e310:	f7fb f9bc 	bl	801968c <HAL_GetTick>
 801e314:	4602      	mov	r2, r0
 801e316:	69fb      	ldr	r3, [r7, #28]
 801e318:	1ad3      	subs	r3, r2, r3
 801e31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e31c:	429a      	cmp	r2, r3
 801e31e:	d807      	bhi.n	801e330 <HAL_SPI_TransmitReceive+0x212>
 801e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e322:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e326:	d003      	beq.n	801e330 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e328:	2303      	movs	r3, #3
 801e32a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e32e:	e0fb      	b.n	801e528 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e330:	68fb      	ldr	r3, [r7, #12]
 801e332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e334:	b29b      	uxth	r3, r3
 801e336:	2b00      	cmp	r3, #0
 801e338:	d1a3      	bne.n	801e282 <HAL_SPI_TransmitReceive+0x164>
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e340:	b29b      	uxth	r3, r3
 801e342:	2b00      	cmp	r3, #0
 801e344:	d19d      	bne.n	801e282 <HAL_SPI_TransmitReceive+0x164>
 801e346:	e0df      	b.n	801e508 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	685b      	ldr	r3, [r3, #4]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d003      	beq.n	801e358 <HAL_SPI_TransmitReceive+0x23a>
 801e350:	8a7b      	ldrh	r3, [r7, #18]
 801e352:	2b01      	cmp	r3, #1
 801e354:	f040 80cb 	bne.w	801e4ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e35c:	b29b      	uxth	r3, r3
 801e35e:	2b01      	cmp	r3, #1
 801e360:	d912      	bls.n	801e388 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e366:	881a      	ldrh	r2, [r3, #0]
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e372:	1c9a      	adds	r2, r3, #2
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e37c:	b29b      	uxth	r3, r3
 801e37e:	3b02      	subs	r3, #2
 801e380:	b29a      	uxth	r2, r3
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e386:	e0b2      	b.n	801e4ee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	330c      	adds	r3, #12
 801e392:	7812      	ldrb	r2, [r2, #0]
 801e394:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e39a:	1c5a      	adds	r2, r3, #1
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3a4:	b29b      	uxth	r3, r3
 801e3a6:	3b01      	subs	r3, #1
 801e3a8:	b29a      	uxth	r2, r3
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e3ae:	e09e      	b.n	801e4ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	689b      	ldr	r3, [r3, #8]
 801e3b6:	f003 0302 	and.w	r3, r3, #2
 801e3ba:	2b02      	cmp	r3, #2
 801e3bc:	d134      	bne.n	801e428 <HAL_SPI_TransmitReceive+0x30a>
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d02f      	beq.n	801e428 <HAL_SPI_TransmitReceive+0x30a>
 801e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3ca:	2b01      	cmp	r3, #1
 801e3cc:	d12c      	bne.n	801e428 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3d2:	b29b      	uxth	r3, r3
 801e3d4:	2b01      	cmp	r3, #1
 801e3d6:	d912      	bls.n	801e3fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3dc:	881a      	ldrh	r2, [r3, #0]
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3e8:	1c9a      	adds	r2, r3, #2
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3f2:	b29b      	uxth	r3, r3
 801e3f4:	3b02      	subs	r3, #2
 801e3f6:	b29a      	uxth	r2, r3
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e3fc:	e012      	b.n	801e424 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	330c      	adds	r3, #12
 801e408:	7812      	ldrb	r2, [r2, #0]
 801e40a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e40c:	68fb      	ldr	r3, [r7, #12]
 801e40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e410:	1c5a      	adds	r2, r3, #1
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e41a:	b29b      	uxth	r3, r3
 801e41c:	3b01      	subs	r3, #1
 801e41e:	b29a      	uxth	r2, r3
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e424:	2300      	movs	r3, #0
 801e426:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	689b      	ldr	r3, [r3, #8]
 801e42e:	f003 0301 	and.w	r3, r3, #1
 801e432:	2b01      	cmp	r3, #1
 801e434:	d148      	bne.n	801e4c8 <HAL_SPI_TransmitReceive+0x3aa>
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e43c:	b29b      	uxth	r3, r3
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d042      	beq.n	801e4c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e448:	b29b      	uxth	r3, r3
 801e44a:	2b01      	cmp	r3, #1
 801e44c:	d923      	bls.n	801e496 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	68da      	ldr	r2, [r3, #12]
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e458:	b292      	uxth	r2, r2
 801e45a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e460:	1c9a      	adds	r2, r3, #2
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e46c:	b29b      	uxth	r3, r3
 801e46e:	3b02      	subs	r3, #2
 801e470:	b29a      	uxth	r2, r3
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e47e:	b29b      	uxth	r3, r3
 801e480:	2b01      	cmp	r3, #1
 801e482:	d81f      	bhi.n	801e4c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	685a      	ldr	r2, [r3, #4]
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e492:	605a      	str	r2, [r3, #4]
 801e494:	e016      	b.n	801e4c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	f103 020c 	add.w	r2, r3, #12
 801e49e:	68fb      	ldr	r3, [r7, #12]
 801e4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4a2:	7812      	ldrb	r2, [r2, #0]
 801e4a4:	b2d2      	uxtb	r2, r2
 801e4a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4ac:	1c5a      	adds	r2, r3, #1
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e4b8:	b29b      	uxth	r3, r3
 801e4ba:	3b01      	subs	r3, #1
 801e4bc:	b29a      	uxth	r2, r3
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e4c4:	2301      	movs	r3, #1
 801e4c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e4c8:	f7fb f8e0 	bl	801968c <HAL_GetTick>
 801e4cc:	4602      	mov	r2, r0
 801e4ce:	69fb      	ldr	r3, [r7, #28]
 801e4d0:	1ad3      	subs	r3, r2, r3
 801e4d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4d4:	429a      	cmp	r2, r3
 801e4d6:	d803      	bhi.n	801e4e0 <HAL_SPI_TransmitReceive+0x3c2>
 801e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4de:	d102      	bne.n	801e4e6 <HAL_SPI_TransmitReceive+0x3c8>
 801e4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d103      	bne.n	801e4ee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e4e6:	2303      	movs	r3, #3
 801e4e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e4ec:	e01c      	b.n	801e528 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e4f2:	b29b      	uxth	r3, r3
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	f47f af5b 	bne.w	801e3b0 <HAL_SPI_TransmitReceive+0x292>
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e500:	b29b      	uxth	r3, r3
 801e502:	2b00      	cmp	r3, #0
 801e504:	f47f af54 	bne.w	801e3b0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e508:	69fa      	ldr	r2, [r7, #28]
 801e50a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e50c:	68f8      	ldr	r0, [r7, #12]
 801e50e:	f000 f98f 	bl	801e830 <SPI_EndRxTxTransaction>
 801e512:	4603      	mov	r3, r0
 801e514:	2b00      	cmp	r3, #0
 801e516:	d006      	beq.n	801e526 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e518:	2301      	movs	r3, #1
 801e51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e51e:	68fb      	ldr	r3, [r7, #12]
 801e520:	2220      	movs	r2, #32
 801e522:	661a      	str	r2, [r3, #96]	; 0x60
 801e524:	e000      	b.n	801e528 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	2201      	movs	r2, #1
 801e52c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e530:	68fb      	ldr	r3, [r7, #12]
 801e532:	2200      	movs	r2, #0
 801e534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e53c:	4618      	mov	r0, r3
 801e53e:	3728      	adds	r7, #40	; 0x28
 801e540:	46bd      	mov	sp, r7
 801e542:	bd80      	pop	{r7, pc}

0801e544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b088      	sub	sp, #32
 801e548:	af00      	add	r7, sp, #0
 801e54a:	60f8      	str	r0, [r7, #12]
 801e54c:	60b9      	str	r1, [r7, #8]
 801e54e:	603b      	str	r3, [r7, #0]
 801e550:	4613      	mov	r3, r2
 801e552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e554:	f7fb f89a 	bl	801968c <HAL_GetTick>
 801e558:	4602      	mov	r2, r0
 801e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e55c:	1a9b      	subs	r3, r3, r2
 801e55e:	683a      	ldr	r2, [r7, #0]
 801e560:	4413      	add	r3, r2
 801e562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e564:	f7fb f892 	bl	801968c <HAL_GetTick>
 801e568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e56a:	4b39      	ldr	r3, [pc, #228]	; (801e650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	015b      	lsls	r3, r3, #5
 801e570:	0d1b      	lsrs	r3, r3, #20
 801e572:	69fa      	ldr	r2, [r7, #28]
 801e574:	fb02 f303 	mul.w	r3, r2, r3
 801e578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e57a:	e054      	b.n	801e626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e57c:	683b      	ldr	r3, [r7, #0]
 801e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e582:	d050      	beq.n	801e626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e584:	f7fb f882 	bl	801968c <HAL_GetTick>
 801e588:	4602      	mov	r2, r0
 801e58a:	69bb      	ldr	r3, [r7, #24]
 801e58c:	1ad3      	subs	r3, r2, r3
 801e58e:	69fa      	ldr	r2, [r7, #28]
 801e590:	429a      	cmp	r2, r3
 801e592:	d902      	bls.n	801e59a <SPI_WaitFlagStateUntilTimeout+0x56>
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d13d      	bne.n	801e616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	685a      	ldr	r2, [r3, #4]
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e5a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	685b      	ldr	r3, [r3, #4]
 801e5ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e5b2:	d111      	bne.n	801e5d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	689b      	ldr	r3, [r3, #8]
 801e5b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e5bc:	d004      	beq.n	801e5c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	689b      	ldr	r3, [r3, #8]
 801e5c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e5c6:	d107      	bne.n	801e5d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	681a      	ldr	r2, [r3, #0]
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e5e0:	d10f      	bne.n	801e602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e5e2:	68fb      	ldr	r3, [r7, #12]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	681a      	ldr	r2, [r3, #0]
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e5f0:	601a      	str	r2, [r3, #0]
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	681a      	ldr	r2, [r3, #0]
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e602:	68fb      	ldr	r3, [r7, #12]
 801e604:	2201      	movs	r2, #1
 801e606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	2200      	movs	r2, #0
 801e60e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e612:	2303      	movs	r3, #3
 801e614:	e017      	b.n	801e646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e616:	697b      	ldr	r3, [r7, #20]
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d101      	bne.n	801e620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e61c:	2300      	movs	r3, #0
 801e61e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e620:	697b      	ldr	r3, [r7, #20]
 801e622:	3b01      	subs	r3, #1
 801e624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	689a      	ldr	r2, [r3, #8]
 801e62c:	68bb      	ldr	r3, [r7, #8]
 801e62e:	4013      	ands	r3, r2
 801e630:	68ba      	ldr	r2, [r7, #8]
 801e632:	429a      	cmp	r2, r3
 801e634:	bf0c      	ite	eq
 801e636:	2301      	moveq	r3, #1
 801e638:	2300      	movne	r3, #0
 801e63a:	b2db      	uxtb	r3, r3
 801e63c:	461a      	mov	r2, r3
 801e63e:	79fb      	ldrb	r3, [r7, #7]
 801e640:	429a      	cmp	r2, r3
 801e642:	d19b      	bne.n	801e57c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e644:	2300      	movs	r3, #0
}
 801e646:	4618      	mov	r0, r3
 801e648:	3720      	adds	r7, #32
 801e64a:	46bd      	mov	sp, r7
 801e64c:	bd80      	pop	{r7, pc}
 801e64e:	bf00      	nop
 801e650:	20000000 	.word	0x20000000

0801e654 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e654:	b580      	push	{r7, lr}
 801e656:	b08a      	sub	sp, #40	; 0x28
 801e658:	af00      	add	r7, sp, #0
 801e65a:	60f8      	str	r0, [r7, #12]
 801e65c:	60b9      	str	r1, [r7, #8]
 801e65e:	607a      	str	r2, [r7, #4]
 801e660:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e662:	2300      	movs	r3, #0
 801e664:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e666:	f7fb f811 	bl	801968c <HAL_GetTick>
 801e66a:	4602      	mov	r2, r0
 801e66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e66e:	1a9b      	subs	r3, r3, r2
 801e670:	683a      	ldr	r2, [r7, #0]
 801e672:	4413      	add	r3, r2
 801e674:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e676:	f7fb f809 	bl	801968c <HAL_GetTick>
 801e67a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	330c      	adds	r3, #12
 801e682:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e684:	4b3d      	ldr	r3, [pc, #244]	; (801e77c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e686:	681a      	ldr	r2, [r3, #0]
 801e688:	4613      	mov	r3, r2
 801e68a:	009b      	lsls	r3, r3, #2
 801e68c:	4413      	add	r3, r2
 801e68e:	00da      	lsls	r2, r3, #3
 801e690:	1ad3      	subs	r3, r2, r3
 801e692:	0d1b      	lsrs	r3, r3, #20
 801e694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e696:	fb02 f303 	mul.w	r3, r2, r3
 801e69a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e69c:	e060      	b.n	801e760 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e69e:	68bb      	ldr	r3, [r7, #8]
 801e6a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801e6a4:	d107      	bne.n	801e6b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d104      	bne.n	801e6b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e6ac:	69fb      	ldr	r3, [r7, #28]
 801e6ae:	781b      	ldrb	r3, [r3, #0]
 801e6b0:	b2db      	uxtb	r3, r3
 801e6b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e6b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e6b6:	683b      	ldr	r3, [r7, #0]
 801e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6bc:	d050      	beq.n	801e760 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e6be:	f7fa ffe5 	bl	801968c <HAL_GetTick>
 801e6c2:	4602      	mov	r2, r0
 801e6c4:	6a3b      	ldr	r3, [r7, #32]
 801e6c6:	1ad3      	subs	r3, r2, r3
 801e6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6ca:	429a      	cmp	r2, r3
 801e6cc:	d902      	bls.n	801e6d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 801e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d13d      	bne.n	801e750 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	685a      	ldr	r2, [r3, #4]
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e6e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	685b      	ldr	r3, [r3, #4]
 801e6e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e6ec:	d111      	bne.n	801e712 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	689b      	ldr	r3, [r3, #8]
 801e6f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e6f6:	d004      	beq.n	801e702 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e6f8:	68fb      	ldr	r3, [r7, #12]
 801e6fa:	689b      	ldr	r3, [r3, #8]
 801e6fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e700:	d107      	bne.n	801e712 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	681a      	ldr	r2, [r3, #0]
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e710:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e71a:	d10f      	bne.n	801e73c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	681a      	ldr	r2, [r3, #0]
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e72a:	601a      	str	r2, [r3, #0]
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	681a      	ldr	r2, [r3, #0]
 801e732:	68fb      	ldr	r3, [r7, #12]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e73a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	2201      	movs	r2, #1
 801e740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	2200      	movs	r2, #0
 801e748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e74c:	2303      	movs	r3, #3
 801e74e:	e010      	b.n	801e772 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e750:	69bb      	ldr	r3, [r7, #24]
 801e752:	2b00      	cmp	r3, #0
 801e754:	d101      	bne.n	801e75a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e756:	2300      	movs	r3, #0
 801e758:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e75a:	69bb      	ldr	r3, [r7, #24]
 801e75c:	3b01      	subs	r3, #1
 801e75e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	689a      	ldr	r2, [r3, #8]
 801e766:	68bb      	ldr	r3, [r7, #8]
 801e768:	4013      	ands	r3, r2
 801e76a:	687a      	ldr	r2, [r7, #4]
 801e76c:	429a      	cmp	r2, r3
 801e76e:	d196      	bne.n	801e69e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e770:	2300      	movs	r3, #0
}
 801e772:	4618      	mov	r0, r3
 801e774:	3728      	adds	r7, #40	; 0x28
 801e776:	46bd      	mov	sp, r7
 801e778:	bd80      	pop	{r7, pc}
 801e77a:	bf00      	nop
 801e77c:	20000000 	.word	0x20000000

0801e780 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e780:	b580      	push	{r7, lr}
 801e782:	b086      	sub	sp, #24
 801e784:	af02      	add	r7, sp, #8
 801e786:	60f8      	str	r0, [r7, #12]
 801e788:	60b9      	str	r1, [r7, #8]
 801e78a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	685b      	ldr	r3, [r3, #4]
 801e790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e794:	d111      	bne.n	801e7ba <SPI_EndRxTransaction+0x3a>
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	689b      	ldr	r3, [r3, #8]
 801e79a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e79e:	d004      	beq.n	801e7aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	689b      	ldr	r3, [r3, #8]
 801e7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e7a8:	d107      	bne.n	801e7ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	681a      	ldr	r2, [r3, #0]
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e7b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	9300      	str	r3, [sp, #0]
 801e7be:	68bb      	ldr	r3, [r7, #8]
 801e7c0:	2200      	movs	r2, #0
 801e7c2:	2180      	movs	r1, #128	; 0x80
 801e7c4:	68f8      	ldr	r0, [r7, #12]
 801e7c6:	f7ff febd 	bl	801e544 <SPI_WaitFlagStateUntilTimeout>
 801e7ca:	4603      	mov	r3, r0
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d007      	beq.n	801e7e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e7d4:	f043 0220 	orr.w	r2, r3, #32
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e7dc:	2303      	movs	r3, #3
 801e7de:	e023      	b.n	801e828 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	685b      	ldr	r3, [r3, #4]
 801e7e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e7e8:	d11d      	bne.n	801e826 <SPI_EndRxTransaction+0xa6>
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	689b      	ldr	r3, [r3, #8]
 801e7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e7f2:	d004      	beq.n	801e7fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e7f4:	68fb      	ldr	r3, [r7, #12]
 801e7f6:	689b      	ldr	r3, [r3, #8]
 801e7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e7fc:	d113      	bne.n	801e826 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	68bb      	ldr	r3, [r7, #8]
 801e804:	2200      	movs	r2, #0
 801e806:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e80a:	68f8      	ldr	r0, [r7, #12]
 801e80c:	f7ff ff22 	bl	801e654 <SPI_WaitFifoStateUntilTimeout>
 801e810:	4603      	mov	r3, r0
 801e812:	2b00      	cmp	r3, #0
 801e814:	d007      	beq.n	801e826 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e81a:	f043 0220 	orr.w	r2, r3, #32
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e822:	2303      	movs	r3, #3
 801e824:	e000      	b.n	801e828 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801e826:	2300      	movs	r3, #0
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3710      	adds	r7, #16
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}

0801e830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b086      	sub	sp, #24
 801e834:	af02      	add	r7, sp, #8
 801e836:	60f8      	str	r0, [r7, #12]
 801e838:	60b9      	str	r1, [r7, #8]
 801e83a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	9300      	str	r3, [sp, #0]
 801e840:	68bb      	ldr	r3, [r7, #8]
 801e842:	2200      	movs	r2, #0
 801e844:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801e848:	68f8      	ldr	r0, [r7, #12]
 801e84a:	f7ff ff03 	bl	801e654 <SPI_WaitFifoStateUntilTimeout>
 801e84e:	4603      	mov	r3, r0
 801e850:	2b00      	cmp	r3, #0
 801e852:	d007      	beq.n	801e864 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e854:	68fb      	ldr	r3, [r7, #12]
 801e856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e858:	f043 0220 	orr.w	r2, r3, #32
 801e85c:	68fb      	ldr	r3, [r7, #12]
 801e85e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e860:	2303      	movs	r3, #3
 801e862:	e027      	b.n	801e8b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	9300      	str	r3, [sp, #0]
 801e868:	68bb      	ldr	r3, [r7, #8]
 801e86a:	2200      	movs	r2, #0
 801e86c:	2180      	movs	r1, #128	; 0x80
 801e86e:	68f8      	ldr	r0, [r7, #12]
 801e870:	f7ff fe68 	bl	801e544 <SPI_WaitFlagStateUntilTimeout>
 801e874:	4603      	mov	r3, r0
 801e876:	2b00      	cmp	r3, #0
 801e878:	d007      	beq.n	801e88a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e87e:	f043 0220 	orr.w	r2, r3, #32
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e886:	2303      	movs	r3, #3
 801e888:	e014      	b.n	801e8b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	9300      	str	r3, [sp, #0]
 801e88e:	68bb      	ldr	r3, [r7, #8]
 801e890:	2200      	movs	r2, #0
 801e892:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e896:	68f8      	ldr	r0, [r7, #12]
 801e898:	f7ff fedc 	bl	801e654 <SPI_WaitFifoStateUntilTimeout>
 801e89c:	4603      	mov	r3, r0
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d007      	beq.n	801e8b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e8a6:	f043 0220 	orr.w	r2, r3, #32
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e8ae:	2303      	movs	r3, #3
 801e8b0:	e000      	b.n	801e8b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801e8b2:	2300      	movs	r3, #0
}
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	3710      	adds	r7, #16
 801e8b8:	46bd      	mov	sp, r7
 801e8ba:	bd80      	pop	{r7, pc}

0801e8bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	b082      	sub	sp, #8
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d101      	bne.n	801e8ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	e049      	b.n	801e962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8d4:	b2db      	uxtb	r3, r3
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d106      	bne.n	801e8e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	2200      	movs	r2, #0
 801e8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e8e2:	6878      	ldr	r0, [r7, #4]
 801e8e4:	f7f9 fd30 	bl	8018348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2202      	movs	r2, #2
 801e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	681a      	ldr	r2, [r3, #0]
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	3304      	adds	r3, #4
 801e8f8:	4619      	mov	r1, r3
 801e8fa:	4610      	mov	r0, r2
 801e8fc:	f000 fd6c 	bl	801f3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	2201      	movs	r2, #1
 801e904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	2201      	movs	r2, #1
 801e90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	2201      	movs	r2, #1
 801e914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	2201      	movs	r2, #1
 801e91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	2201      	movs	r2, #1
 801e924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	2201      	movs	r2, #1
 801e92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	2201      	movs	r2, #1
 801e934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	2201      	movs	r2, #1
 801e93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	2201      	movs	r2, #1
 801e944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	2201      	movs	r2, #1
 801e94c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	2201      	movs	r2, #1
 801e954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	2201      	movs	r2, #1
 801e95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e960:	2300      	movs	r3, #0
}
 801e962:	4618      	mov	r0, r3
 801e964:	3708      	adds	r7, #8
 801e966:	46bd      	mov	sp, r7
 801e968:	bd80      	pop	{r7, pc}
	...

0801e96c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e96c:	b480      	push	{r7}
 801e96e:	b085      	sub	sp, #20
 801e970:	af00      	add	r7, sp, #0
 801e972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e97a:	b2db      	uxtb	r3, r3
 801e97c:	2b01      	cmp	r3, #1
 801e97e:	d001      	beq.n	801e984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e980:	2301      	movs	r3, #1
 801e982:	e04f      	b.n	801ea24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	2202      	movs	r2, #2
 801e988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	68da      	ldr	r2, [r3, #12]
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	f042 0201 	orr.w	r2, r2, #1
 801e99a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	4a23      	ldr	r2, [pc, #140]	; (801ea30 <HAL_TIM_Base_Start_IT+0xc4>)
 801e9a2:	4293      	cmp	r3, r2
 801e9a4:	d01d      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e9ae:	d018      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	4a1f      	ldr	r2, [pc, #124]	; (801ea34 <HAL_TIM_Base_Start_IT+0xc8>)
 801e9b6:	4293      	cmp	r3, r2
 801e9b8:	d013      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	4a1e      	ldr	r2, [pc, #120]	; (801ea38 <HAL_TIM_Base_Start_IT+0xcc>)
 801e9c0:	4293      	cmp	r3, r2
 801e9c2:	d00e      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	4a1c      	ldr	r2, [pc, #112]	; (801ea3c <HAL_TIM_Base_Start_IT+0xd0>)
 801e9ca:	4293      	cmp	r3, r2
 801e9cc:	d009      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	4a1b      	ldr	r2, [pc, #108]	; (801ea40 <HAL_TIM_Base_Start_IT+0xd4>)
 801e9d4:	4293      	cmp	r3, r2
 801e9d6:	d004      	beq.n	801e9e2 <HAL_TIM_Base_Start_IT+0x76>
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	4a19      	ldr	r2, [pc, #100]	; (801ea44 <HAL_TIM_Base_Start_IT+0xd8>)
 801e9de:	4293      	cmp	r3, r2
 801e9e0:	d115      	bne.n	801ea0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	689a      	ldr	r2, [r3, #8]
 801e9e8:	4b17      	ldr	r3, [pc, #92]	; (801ea48 <HAL_TIM_Base_Start_IT+0xdc>)
 801e9ea:	4013      	ands	r3, r2
 801e9ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	2b06      	cmp	r3, #6
 801e9f2:	d015      	beq.n	801ea20 <HAL_TIM_Base_Start_IT+0xb4>
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e9fa:	d011      	beq.n	801ea20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	681a      	ldr	r2, [r3, #0]
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	f042 0201 	orr.w	r2, r2, #1
 801ea0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea0c:	e008      	b.n	801ea20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	681a      	ldr	r2, [r3, #0]
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	f042 0201 	orr.w	r2, r2, #1
 801ea1c:	601a      	str	r2, [r3, #0]
 801ea1e:	e000      	b.n	801ea22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ea22:	2300      	movs	r3, #0
}
 801ea24:	4618      	mov	r0, r3
 801ea26:	3714      	adds	r7, #20
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea2e:	4770      	bx	lr
 801ea30:	40012c00 	.word	0x40012c00
 801ea34:	40000400 	.word	0x40000400
 801ea38:	40000800 	.word	0x40000800
 801ea3c:	40013400 	.word	0x40013400
 801ea40:	40014000 	.word	0x40014000
 801ea44:	40015000 	.word	0x40015000
 801ea48:	00010007 	.word	0x00010007

0801ea4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b082      	sub	sp, #8
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d101      	bne.n	801ea5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ea5a:	2301      	movs	r3, #1
 801ea5c:	e049      	b.n	801eaf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea64:	b2db      	uxtb	r3, r3
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d106      	bne.n	801ea78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	2200      	movs	r2, #0
 801ea6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ea72:	6878      	ldr	r0, [r7, #4]
 801ea74:	f7f9 fca2 	bl	80183bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	2202      	movs	r2, #2
 801ea7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	681a      	ldr	r2, [r3, #0]
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	3304      	adds	r3, #4
 801ea88:	4619      	mov	r1, r3
 801ea8a:	4610      	mov	r0, r2
 801ea8c:	f000 fca4 	bl	801f3d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2201      	movs	r2, #1
 801ea94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	2201      	movs	r2, #1
 801eaa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2201      	movs	r2, #1
 801eaac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2201      	movs	r2, #1
 801eab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	2201      	movs	r2, #1
 801eabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	2201      	movs	r2, #1
 801eac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2201      	movs	r2, #1
 801eacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	2201      	movs	r2, #1
 801ead4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	2201      	movs	r2, #1
 801eadc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	2201      	movs	r2, #1
 801eae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	2201      	movs	r2, #1
 801eaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801eaf0:	2300      	movs	r3, #0
}
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	3708      	adds	r7, #8
 801eaf6:	46bd      	mov	sp, r7
 801eaf8:	bd80      	pop	{r7, pc}
	...

0801eafc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eafc:	b580      	push	{r7, lr}
 801eafe:	b084      	sub	sp, #16
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	6078      	str	r0, [r7, #4]
 801eb04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801eb06:	683b      	ldr	r3, [r7, #0]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d109      	bne.n	801eb20 <HAL_TIM_PWM_Start+0x24>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eb12:	b2db      	uxtb	r3, r3
 801eb14:	2b01      	cmp	r3, #1
 801eb16:	bf14      	ite	ne
 801eb18:	2301      	movne	r3, #1
 801eb1a:	2300      	moveq	r3, #0
 801eb1c:	b2db      	uxtb	r3, r3
 801eb1e:	e03c      	b.n	801eb9a <HAL_TIM_PWM_Start+0x9e>
 801eb20:	683b      	ldr	r3, [r7, #0]
 801eb22:	2b04      	cmp	r3, #4
 801eb24:	d109      	bne.n	801eb3a <HAL_TIM_PWM_Start+0x3e>
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801eb2c:	b2db      	uxtb	r3, r3
 801eb2e:	2b01      	cmp	r3, #1
 801eb30:	bf14      	ite	ne
 801eb32:	2301      	movne	r3, #1
 801eb34:	2300      	moveq	r3, #0
 801eb36:	b2db      	uxtb	r3, r3
 801eb38:	e02f      	b.n	801eb9a <HAL_TIM_PWM_Start+0x9e>
 801eb3a:	683b      	ldr	r3, [r7, #0]
 801eb3c:	2b08      	cmp	r3, #8
 801eb3e:	d109      	bne.n	801eb54 <HAL_TIM_PWM_Start+0x58>
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801eb46:	b2db      	uxtb	r3, r3
 801eb48:	2b01      	cmp	r3, #1
 801eb4a:	bf14      	ite	ne
 801eb4c:	2301      	movne	r3, #1
 801eb4e:	2300      	moveq	r3, #0
 801eb50:	b2db      	uxtb	r3, r3
 801eb52:	e022      	b.n	801eb9a <HAL_TIM_PWM_Start+0x9e>
 801eb54:	683b      	ldr	r3, [r7, #0]
 801eb56:	2b0c      	cmp	r3, #12
 801eb58:	d109      	bne.n	801eb6e <HAL_TIM_PWM_Start+0x72>
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801eb60:	b2db      	uxtb	r3, r3
 801eb62:	2b01      	cmp	r3, #1
 801eb64:	bf14      	ite	ne
 801eb66:	2301      	movne	r3, #1
 801eb68:	2300      	moveq	r3, #0
 801eb6a:	b2db      	uxtb	r3, r3
 801eb6c:	e015      	b.n	801eb9a <HAL_TIM_PWM_Start+0x9e>
 801eb6e:	683b      	ldr	r3, [r7, #0]
 801eb70:	2b10      	cmp	r3, #16
 801eb72:	d109      	bne.n	801eb88 <HAL_TIM_PWM_Start+0x8c>
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb7a:	b2db      	uxtb	r3, r3
 801eb7c:	2b01      	cmp	r3, #1
 801eb7e:	bf14      	ite	ne
 801eb80:	2301      	movne	r3, #1
 801eb82:	2300      	moveq	r3, #0
 801eb84:	b2db      	uxtb	r3, r3
 801eb86:	e008      	b.n	801eb9a <HAL_TIM_PWM_Start+0x9e>
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eb8e:	b2db      	uxtb	r3, r3
 801eb90:	2b01      	cmp	r3, #1
 801eb92:	bf14      	ite	ne
 801eb94:	2301      	movne	r3, #1
 801eb96:	2300      	moveq	r3, #0
 801eb98:	b2db      	uxtb	r3, r3
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d001      	beq.n	801eba2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801eb9e:	2301      	movs	r3, #1
 801eba0:	e0a1      	b.n	801ece6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eba2:	683b      	ldr	r3, [r7, #0]
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d104      	bne.n	801ebb2 <HAL_TIM_PWM_Start+0xb6>
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	2202      	movs	r2, #2
 801ebac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ebb0:	e023      	b.n	801ebfa <HAL_TIM_PWM_Start+0xfe>
 801ebb2:	683b      	ldr	r3, [r7, #0]
 801ebb4:	2b04      	cmp	r3, #4
 801ebb6:	d104      	bne.n	801ebc2 <HAL_TIM_PWM_Start+0xc6>
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	2202      	movs	r2, #2
 801ebbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ebc0:	e01b      	b.n	801ebfa <HAL_TIM_PWM_Start+0xfe>
 801ebc2:	683b      	ldr	r3, [r7, #0]
 801ebc4:	2b08      	cmp	r3, #8
 801ebc6:	d104      	bne.n	801ebd2 <HAL_TIM_PWM_Start+0xd6>
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	2202      	movs	r2, #2
 801ebcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ebd0:	e013      	b.n	801ebfa <HAL_TIM_PWM_Start+0xfe>
 801ebd2:	683b      	ldr	r3, [r7, #0]
 801ebd4:	2b0c      	cmp	r3, #12
 801ebd6:	d104      	bne.n	801ebe2 <HAL_TIM_PWM_Start+0xe6>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	2202      	movs	r2, #2
 801ebdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ebe0:	e00b      	b.n	801ebfa <HAL_TIM_PWM_Start+0xfe>
 801ebe2:	683b      	ldr	r3, [r7, #0]
 801ebe4:	2b10      	cmp	r3, #16
 801ebe6:	d104      	bne.n	801ebf2 <HAL_TIM_PWM_Start+0xf6>
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	2202      	movs	r2, #2
 801ebec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ebf0:	e003      	b.n	801ebfa <HAL_TIM_PWM_Start+0xfe>
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	2202      	movs	r2, #2
 801ebf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	2201      	movs	r2, #1
 801ec00:	6839      	ldr	r1, [r7, #0]
 801ec02:	4618      	mov	r0, r3
 801ec04:	f000 ffb0 	bl	801fb68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	681b      	ldr	r3, [r3, #0]
 801ec0c:	4a38      	ldr	r2, [pc, #224]	; (801ecf0 <HAL_TIM_PWM_Start+0x1f4>)
 801ec0e:	4293      	cmp	r3, r2
 801ec10:	d018      	beq.n	801ec44 <HAL_TIM_PWM_Start+0x148>
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	4a37      	ldr	r2, [pc, #220]	; (801ecf4 <HAL_TIM_PWM_Start+0x1f8>)
 801ec18:	4293      	cmp	r3, r2
 801ec1a:	d013      	beq.n	801ec44 <HAL_TIM_PWM_Start+0x148>
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	4a35      	ldr	r2, [pc, #212]	; (801ecf8 <HAL_TIM_PWM_Start+0x1fc>)
 801ec22:	4293      	cmp	r3, r2
 801ec24:	d00e      	beq.n	801ec44 <HAL_TIM_PWM_Start+0x148>
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	681b      	ldr	r3, [r3, #0]
 801ec2a:	4a34      	ldr	r2, [pc, #208]	; (801ecfc <HAL_TIM_PWM_Start+0x200>)
 801ec2c:	4293      	cmp	r3, r2
 801ec2e:	d009      	beq.n	801ec44 <HAL_TIM_PWM_Start+0x148>
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	4a32      	ldr	r2, [pc, #200]	; (801ed00 <HAL_TIM_PWM_Start+0x204>)
 801ec36:	4293      	cmp	r3, r2
 801ec38:	d004      	beq.n	801ec44 <HAL_TIM_PWM_Start+0x148>
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	681b      	ldr	r3, [r3, #0]
 801ec3e:	4a31      	ldr	r2, [pc, #196]	; (801ed04 <HAL_TIM_PWM_Start+0x208>)
 801ec40:	4293      	cmp	r3, r2
 801ec42:	d101      	bne.n	801ec48 <HAL_TIM_PWM_Start+0x14c>
 801ec44:	2301      	movs	r3, #1
 801ec46:	e000      	b.n	801ec4a <HAL_TIM_PWM_Start+0x14e>
 801ec48:	2300      	movs	r3, #0
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d007      	beq.n	801ec5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ec5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	4a23      	ldr	r2, [pc, #140]	; (801ecf0 <HAL_TIM_PWM_Start+0x1f4>)
 801ec64:	4293      	cmp	r3, r2
 801ec66:	d01d      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ec70:	d018      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	4a24      	ldr	r2, [pc, #144]	; (801ed08 <HAL_TIM_PWM_Start+0x20c>)
 801ec78:	4293      	cmp	r3, r2
 801ec7a:	d013      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	4a22      	ldr	r2, [pc, #136]	; (801ed0c <HAL_TIM_PWM_Start+0x210>)
 801ec82:	4293      	cmp	r3, r2
 801ec84:	d00e      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	4a1a      	ldr	r2, [pc, #104]	; (801ecf4 <HAL_TIM_PWM_Start+0x1f8>)
 801ec8c:	4293      	cmp	r3, r2
 801ec8e:	d009      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	4a18      	ldr	r2, [pc, #96]	; (801ecf8 <HAL_TIM_PWM_Start+0x1fc>)
 801ec96:	4293      	cmp	r3, r2
 801ec98:	d004      	beq.n	801eca4 <HAL_TIM_PWM_Start+0x1a8>
 801ec9a:	687b      	ldr	r3, [r7, #4]
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	4a19      	ldr	r2, [pc, #100]	; (801ed04 <HAL_TIM_PWM_Start+0x208>)
 801eca0:	4293      	cmp	r3, r2
 801eca2:	d115      	bne.n	801ecd0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	689a      	ldr	r2, [r3, #8]
 801ecaa:	4b19      	ldr	r3, [pc, #100]	; (801ed10 <HAL_TIM_PWM_Start+0x214>)
 801ecac:	4013      	ands	r3, r2
 801ecae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	2b06      	cmp	r3, #6
 801ecb4:	d015      	beq.n	801ece2 <HAL_TIM_PWM_Start+0x1e6>
 801ecb6:	68fb      	ldr	r3, [r7, #12]
 801ecb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ecbc:	d011      	beq.n	801ece2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	681a      	ldr	r2, [r3, #0]
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	f042 0201 	orr.w	r2, r2, #1
 801eccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecce:	e008      	b.n	801ece2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	681a      	ldr	r2, [r3, #0]
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	f042 0201 	orr.w	r2, r2, #1
 801ecde:	601a      	str	r2, [r3, #0]
 801ece0:	e000      	b.n	801ece4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ece2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ece4:	2300      	movs	r3, #0
}
 801ece6:	4618      	mov	r0, r3
 801ece8:	3710      	adds	r7, #16
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}
 801ecee:	bf00      	nop
 801ecf0:	40012c00 	.word	0x40012c00
 801ecf4:	40013400 	.word	0x40013400
 801ecf8:	40014000 	.word	0x40014000
 801ecfc:	40014400 	.word	0x40014400
 801ed00:	40014800 	.word	0x40014800
 801ed04:	40015000 	.word	0x40015000
 801ed08:	40000400 	.word	0x40000400
 801ed0c:	40000800 	.word	0x40000800
 801ed10:	00010007 	.word	0x00010007

0801ed14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ed14:	b580      	push	{r7, lr}
 801ed16:	b082      	sub	sp, #8
 801ed18:	af00      	add	r7, sp, #0
 801ed1a:	6078      	str	r0, [r7, #4]
 801ed1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	681b      	ldr	r3, [r3, #0]
 801ed22:	2200      	movs	r2, #0
 801ed24:	6839      	ldr	r1, [r7, #0]
 801ed26:	4618      	mov	r0, r3
 801ed28:	f000 ff1e 	bl	801fb68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	4a40      	ldr	r2, [pc, #256]	; (801ee34 <HAL_TIM_PWM_Stop+0x120>)
 801ed32:	4293      	cmp	r3, r2
 801ed34:	d018      	beq.n	801ed68 <HAL_TIM_PWM_Stop+0x54>
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	4a3f      	ldr	r2, [pc, #252]	; (801ee38 <HAL_TIM_PWM_Stop+0x124>)
 801ed3c:	4293      	cmp	r3, r2
 801ed3e:	d013      	beq.n	801ed68 <HAL_TIM_PWM_Stop+0x54>
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	4a3d      	ldr	r2, [pc, #244]	; (801ee3c <HAL_TIM_PWM_Stop+0x128>)
 801ed46:	4293      	cmp	r3, r2
 801ed48:	d00e      	beq.n	801ed68 <HAL_TIM_PWM_Stop+0x54>
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	4a3c      	ldr	r2, [pc, #240]	; (801ee40 <HAL_TIM_PWM_Stop+0x12c>)
 801ed50:	4293      	cmp	r3, r2
 801ed52:	d009      	beq.n	801ed68 <HAL_TIM_PWM_Stop+0x54>
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	4a3a      	ldr	r2, [pc, #232]	; (801ee44 <HAL_TIM_PWM_Stop+0x130>)
 801ed5a:	4293      	cmp	r3, r2
 801ed5c:	d004      	beq.n	801ed68 <HAL_TIM_PWM_Stop+0x54>
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	4a39      	ldr	r2, [pc, #228]	; (801ee48 <HAL_TIM_PWM_Stop+0x134>)
 801ed64:	4293      	cmp	r3, r2
 801ed66:	d101      	bne.n	801ed6c <HAL_TIM_PWM_Stop+0x58>
 801ed68:	2301      	movs	r3, #1
 801ed6a:	e000      	b.n	801ed6e <HAL_TIM_PWM_Stop+0x5a>
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d017      	beq.n	801eda2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	6a1a      	ldr	r2, [r3, #32]
 801ed78:	f241 1311 	movw	r3, #4369	; 0x1111
 801ed7c:	4013      	ands	r3, r2
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d10f      	bne.n	801eda2 <HAL_TIM_PWM_Stop+0x8e>
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	6a1a      	ldr	r2, [r3, #32]
 801ed88:	f244 4344 	movw	r3, #17476	; 0x4444
 801ed8c:	4013      	ands	r3, r2
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d107      	bne.n	801eda2 <HAL_TIM_PWM_Stop+0x8e>
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801eda0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	6a1a      	ldr	r2, [r3, #32]
 801eda8:	f241 1311 	movw	r3, #4369	; 0x1111
 801edac:	4013      	ands	r3, r2
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d10f      	bne.n	801edd2 <HAL_TIM_PWM_Stop+0xbe>
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	6a1a      	ldr	r2, [r3, #32]
 801edb8:	f244 4344 	movw	r3, #17476	; 0x4444
 801edbc:	4013      	ands	r3, r2
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d107      	bne.n	801edd2 <HAL_TIM_PWM_Stop+0xbe>
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	681a      	ldr	r2, [r3, #0]
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	f022 0201 	bic.w	r2, r2, #1
 801edd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801edd2:	683b      	ldr	r3, [r7, #0]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d104      	bne.n	801ede2 <HAL_TIM_PWM_Stop+0xce>
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	2201      	movs	r2, #1
 801eddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ede0:	e023      	b.n	801ee2a <HAL_TIM_PWM_Stop+0x116>
 801ede2:	683b      	ldr	r3, [r7, #0]
 801ede4:	2b04      	cmp	r3, #4
 801ede6:	d104      	bne.n	801edf2 <HAL_TIM_PWM_Stop+0xde>
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	2201      	movs	r2, #1
 801edec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801edf0:	e01b      	b.n	801ee2a <HAL_TIM_PWM_Stop+0x116>
 801edf2:	683b      	ldr	r3, [r7, #0]
 801edf4:	2b08      	cmp	r3, #8
 801edf6:	d104      	bne.n	801ee02 <HAL_TIM_PWM_Stop+0xee>
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	2201      	movs	r2, #1
 801edfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ee00:	e013      	b.n	801ee2a <HAL_TIM_PWM_Stop+0x116>
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	2b0c      	cmp	r3, #12
 801ee06:	d104      	bne.n	801ee12 <HAL_TIM_PWM_Stop+0xfe>
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	2201      	movs	r2, #1
 801ee0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ee10:	e00b      	b.n	801ee2a <HAL_TIM_PWM_Stop+0x116>
 801ee12:	683b      	ldr	r3, [r7, #0]
 801ee14:	2b10      	cmp	r3, #16
 801ee16:	d104      	bne.n	801ee22 <HAL_TIM_PWM_Stop+0x10e>
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	2201      	movs	r2, #1
 801ee1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ee20:	e003      	b.n	801ee2a <HAL_TIM_PWM_Stop+0x116>
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	2201      	movs	r2, #1
 801ee26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801ee2a:	2300      	movs	r3, #0
}
 801ee2c:	4618      	mov	r0, r3
 801ee2e:	3708      	adds	r7, #8
 801ee30:	46bd      	mov	sp, r7
 801ee32:	bd80      	pop	{r7, pc}
 801ee34:	40012c00 	.word	0x40012c00
 801ee38:	40013400 	.word	0x40013400
 801ee3c:	40014000 	.word	0x40014000
 801ee40:	40014400 	.word	0x40014400
 801ee44:	40014800 	.word	0x40014800
 801ee48:	40015000 	.word	0x40015000

0801ee4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ee4c:	b580      	push	{r7, lr}
 801ee4e:	b082      	sub	sp, #8
 801ee50:	af00      	add	r7, sp, #0
 801ee52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	691b      	ldr	r3, [r3, #16]
 801ee5a:	f003 0302 	and.w	r3, r3, #2
 801ee5e:	2b02      	cmp	r3, #2
 801ee60:	d122      	bne.n	801eea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	68db      	ldr	r3, [r3, #12]
 801ee68:	f003 0302 	and.w	r3, r3, #2
 801ee6c:	2b02      	cmp	r3, #2
 801ee6e:	d11b      	bne.n	801eea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	f06f 0202 	mvn.w	r2, #2
 801ee78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	2201      	movs	r2, #1
 801ee7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	699b      	ldr	r3, [r3, #24]
 801ee86:	f003 0303 	and.w	r3, r3, #3
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d003      	beq.n	801ee96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ee8e:	6878      	ldr	r0, [r7, #4]
 801ee90:	f000 fa84 	bl	801f39c <HAL_TIM_IC_CaptureCallback>
 801ee94:	e005      	b.n	801eea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ee96:	6878      	ldr	r0, [r7, #4]
 801ee98:	f000 fa76 	bl	801f388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ee9c:	6878      	ldr	r0, [r7, #4]
 801ee9e:	f000 fa87 	bl	801f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	2200      	movs	r2, #0
 801eea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	691b      	ldr	r3, [r3, #16]
 801eeae:	f003 0304 	and.w	r3, r3, #4
 801eeb2:	2b04      	cmp	r3, #4
 801eeb4:	d122      	bne.n	801eefc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	68db      	ldr	r3, [r3, #12]
 801eebc:	f003 0304 	and.w	r3, r3, #4
 801eec0:	2b04      	cmp	r3, #4
 801eec2:	d11b      	bne.n	801eefc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	f06f 0204 	mvn.w	r2, #4
 801eecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	2202      	movs	r2, #2
 801eed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	699b      	ldr	r3, [r3, #24]
 801eeda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d003      	beq.n	801eeea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801eee2:	6878      	ldr	r0, [r7, #4]
 801eee4:	f000 fa5a 	bl	801f39c <HAL_TIM_IC_CaptureCallback>
 801eee8:	e005      	b.n	801eef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801eeea:	6878      	ldr	r0, [r7, #4]
 801eeec:	f000 fa4c 	bl	801f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eef0:	6878      	ldr	r0, [r7, #4]
 801eef2:	f000 fa5d 	bl	801f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	2200      	movs	r2, #0
 801eefa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	691b      	ldr	r3, [r3, #16]
 801ef02:	f003 0308 	and.w	r3, r3, #8
 801ef06:	2b08      	cmp	r3, #8
 801ef08:	d122      	bne.n	801ef50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	68db      	ldr	r3, [r3, #12]
 801ef10:	f003 0308 	and.w	r3, r3, #8
 801ef14:	2b08      	cmp	r3, #8
 801ef16:	d11b      	bne.n	801ef50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	f06f 0208 	mvn.w	r2, #8
 801ef20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	2204      	movs	r2, #4
 801ef26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	69db      	ldr	r3, [r3, #28]
 801ef2e:	f003 0303 	and.w	r3, r3, #3
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	d003      	beq.n	801ef3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef36:	6878      	ldr	r0, [r7, #4]
 801ef38:	f000 fa30 	bl	801f39c <HAL_TIM_IC_CaptureCallback>
 801ef3c:	e005      	b.n	801ef4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef3e:	6878      	ldr	r0, [r7, #4]
 801ef40:	f000 fa22 	bl	801f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef44:	6878      	ldr	r0, [r7, #4]
 801ef46:	f000 fa33 	bl	801f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	2200      	movs	r2, #0
 801ef4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	691b      	ldr	r3, [r3, #16]
 801ef56:	f003 0310 	and.w	r3, r3, #16
 801ef5a:	2b10      	cmp	r3, #16
 801ef5c:	d122      	bne.n	801efa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	68db      	ldr	r3, [r3, #12]
 801ef64:	f003 0310 	and.w	r3, r3, #16
 801ef68:	2b10      	cmp	r3, #16
 801ef6a:	d11b      	bne.n	801efa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	681b      	ldr	r3, [r3, #0]
 801ef70:	f06f 0210 	mvn.w	r2, #16
 801ef74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	2208      	movs	r2, #8
 801ef7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	69db      	ldr	r3, [r3, #28]
 801ef82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d003      	beq.n	801ef92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef8a:	6878      	ldr	r0, [r7, #4]
 801ef8c:	f000 fa06 	bl	801f39c <HAL_TIM_IC_CaptureCallback>
 801ef90:	e005      	b.n	801ef9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef92:	6878      	ldr	r0, [r7, #4]
 801ef94:	f000 f9f8 	bl	801f388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef98:	6878      	ldr	r0, [r7, #4]
 801ef9a:	f000 fa09 	bl	801f3b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	2200      	movs	r2, #0
 801efa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	691b      	ldr	r3, [r3, #16]
 801efaa:	f003 0301 	and.w	r3, r3, #1
 801efae:	2b01      	cmp	r3, #1
 801efb0:	d10e      	bne.n	801efd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	68db      	ldr	r3, [r3, #12]
 801efb8:	f003 0301 	and.w	r3, r3, #1
 801efbc:	2b01      	cmp	r3, #1
 801efbe:	d107      	bne.n	801efd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	f06f 0201 	mvn.w	r2, #1
 801efc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801efca:	6878      	ldr	r0, [r7, #4]
 801efcc:	f000 f9d2 	bl	801f374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	691b      	ldr	r3, [r3, #16]
 801efd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efda:	2b80      	cmp	r3, #128	; 0x80
 801efdc:	d10e      	bne.n	801effc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	68db      	ldr	r3, [r3, #12]
 801efe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efe8:	2b80      	cmp	r3, #128	; 0x80
 801efea:	d107      	bne.n	801effc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801eff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801eff6:	6878      	ldr	r0, [r7, #4]
 801eff8:	f000 ff26 	bl	801fe48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	691b      	ldr	r3, [r3, #16]
 801f002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f00a:	d10e      	bne.n	801f02a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	68db      	ldr	r3, [r3, #12]
 801f012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f016:	2b80      	cmp	r3, #128	; 0x80
 801f018:	d107      	bne.n	801f02a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	681b      	ldr	r3, [r3, #0]
 801f01e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f024:	6878      	ldr	r0, [r7, #4]
 801f026:	f000 ff19 	bl	801fe5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	691b      	ldr	r3, [r3, #16]
 801f030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f034:	2b40      	cmp	r3, #64	; 0x40
 801f036:	d10e      	bne.n	801f056 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	68db      	ldr	r3, [r3, #12]
 801f03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f042:	2b40      	cmp	r3, #64	; 0x40
 801f044:	d107      	bne.n	801f056 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f04e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f050:	6878      	ldr	r0, [r7, #4]
 801f052:	f000 f9b7 	bl	801f3c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	691b      	ldr	r3, [r3, #16]
 801f05c:	f003 0320 	and.w	r3, r3, #32
 801f060:	2b20      	cmp	r3, #32
 801f062:	d10e      	bne.n	801f082 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	68db      	ldr	r3, [r3, #12]
 801f06a:	f003 0320 	and.w	r3, r3, #32
 801f06e:	2b20      	cmp	r3, #32
 801f070:	d107      	bne.n	801f082 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	f06f 0220 	mvn.w	r2, #32
 801f07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f07c:	6878      	ldr	r0, [r7, #4]
 801f07e:	f000 fed9 	bl	801fe34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	691b      	ldr	r3, [r3, #16]
 801f088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f08c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f090:	d10f      	bne.n	801f0b2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	68db      	ldr	r3, [r3, #12]
 801f098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f09c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f0a0:	d107      	bne.n	801f0b2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801f0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801f0ac:	6878      	ldr	r0, [r7, #4]
 801f0ae:	f000 fedf 	bl	801fe70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	681b      	ldr	r3, [r3, #0]
 801f0b6:	691b      	ldr	r3, [r3, #16]
 801f0b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f0bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f0c0:	d10f      	bne.n	801f0e2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	68db      	ldr	r3, [r3, #12]
 801f0c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f0cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f0d0:	d107      	bne.n	801f0e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801f0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801f0dc:	6878      	ldr	r0, [r7, #4]
 801f0de:	f000 fed1 	bl	801fe84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	691b      	ldr	r3, [r3, #16]
 801f0e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f0ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f0f0:	d10f      	bne.n	801f112 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	68db      	ldr	r3, [r3, #12]
 801f0f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f0fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f100:	d107      	bne.n	801f112 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801f10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801f10c:	6878      	ldr	r0, [r7, #4]
 801f10e:	f000 fec3 	bl	801fe98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	691b      	ldr	r3, [r3, #16]
 801f118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f11c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f120:	d10f      	bne.n	801f142 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	681b      	ldr	r3, [r3, #0]
 801f126:	68db      	ldr	r3, [r3, #12]
 801f128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f12c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f130:	d107      	bne.n	801f142 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801f13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801f13c:	6878      	ldr	r0, [r7, #4]
 801f13e:	f000 feb5 	bl	801feac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f142:	bf00      	nop
 801f144:	3708      	adds	r7, #8
 801f146:	46bd      	mov	sp, r7
 801f148:	bd80      	pop	{r7, pc}
	...

0801f14c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f14c:	b580      	push	{r7, lr}
 801f14e:	b086      	sub	sp, #24
 801f150:	af00      	add	r7, sp, #0
 801f152:	60f8      	str	r0, [r7, #12]
 801f154:	60b9      	str	r1, [r7, #8]
 801f156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f158:	2300      	movs	r3, #0
 801f15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f162:	2b01      	cmp	r3, #1
 801f164:	d101      	bne.n	801f16a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f166:	2302      	movs	r3, #2
 801f168:	e0ff      	b.n	801f36a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	2201      	movs	r2, #1
 801f16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	2b14      	cmp	r3, #20
 801f176:	f200 80f0 	bhi.w	801f35a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f17a:	a201      	add	r2, pc, #4	; (adr r2, 801f180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f180:	0801f1d5 	.word	0x0801f1d5
 801f184:	0801f35b 	.word	0x0801f35b
 801f188:	0801f35b 	.word	0x0801f35b
 801f18c:	0801f35b 	.word	0x0801f35b
 801f190:	0801f215 	.word	0x0801f215
 801f194:	0801f35b 	.word	0x0801f35b
 801f198:	0801f35b 	.word	0x0801f35b
 801f19c:	0801f35b 	.word	0x0801f35b
 801f1a0:	0801f257 	.word	0x0801f257
 801f1a4:	0801f35b 	.word	0x0801f35b
 801f1a8:	0801f35b 	.word	0x0801f35b
 801f1ac:	0801f35b 	.word	0x0801f35b
 801f1b0:	0801f297 	.word	0x0801f297
 801f1b4:	0801f35b 	.word	0x0801f35b
 801f1b8:	0801f35b 	.word	0x0801f35b
 801f1bc:	0801f35b 	.word	0x0801f35b
 801f1c0:	0801f2d9 	.word	0x0801f2d9
 801f1c4:	0801f35b 	.word	0x0801f35b
 801f1c8:	0801f35b 	.word	0x0801f35b
 801f1cc:	0801f35b 	.word	0x0801f35b
 801f1d0:	0801f319 	.word	0x0801f319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	68b9      	ldr	r1, [r7, #8]
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f000 f99a 	bl	801f514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	699a      	ldr	r2, [r3, #24]
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	f042 0208 	orr.w	r2, r2, #8
 801f1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	699a      	ldr	r2, [r3, #24]
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	f022 0204 	bic.w	r2, r2, #4
 801f1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f200:	68fb      	ldr	r3, [r7, #12]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	6999      	ldr	r1, [r3, #24]
 801f206:	68bb      	ldr	r3, [r7, #8]
 801f208:	691a      	ldr	r2, [r3, #16]
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	430a      	orrs	r2, r1
 801f210:	619a      	str	r2, [r3, #24]
      break;
 801f212:	e0a5      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f214:	68fb      	ldr	r3, [r7, #12]
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	68b9      	ldr	r1, [r7, #8]
 801f21a:	4618      	mov	r0, r3
 801f21c:	f000 fa14 	bl	801f648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	699a      	ldr	r2, [r3, #24]
 801f226:	68fb      	ldr	r3, [r7, #12]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	699a      	ldr	r2, [r3, #24]
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	6999      	ldr	r1, [r3, #24]
 801f246:	68bb      	ldr	r3, [r7, #8]
 801f248:	691b      	ldr	r3, [r3, #16]
 801f24a:	021a      	lsls	r2, r3, #8
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	430a      	orrs	r2, r1
 801f252:	619a      	str	r2, [r3, #24]
      break;
 801f254:	e084      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	68b9      	ldr	r1, [r7, #8]
 801f25c:	4618      	mov	r0, r3
 801f25e:	f000 fa87 	bl	801f770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	69da      	ldr	r2, [r3, #28]
 801f268:	68fb      	ldr	r3, [r7, #12]
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	f042 0208 	orr.w	r2, r2, #8
 801f270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	69da      	ldr	r2, [r3, #28]
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f022 0204 	bic.w	r2, r2, #4
 801f280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	69d9      	ldr	r1, [r3, #28]
 801f288:	68bb      	ldr	r3, [r7, #8]
 801f28a:	691a      	ldr	r2, [r3, #16]
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	430a      	orrs	r2, r1
 801f292:	61da      	str	r2, [r3, #28]
      break;
 801f294:	e064      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	68b9      	ldr	r1, [r7, #8]
 801f29c:	4618      	mov	r0, r3
 801f29e:	f000 faf9 	bl	801f894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	69da      	ldr	r2, [r3, #28]
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	69da      	ldr	r2, [r3, #28]
 801f2b8:	68fb      	ldr	r3, [r7, #12]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f2c2:	68fb      	ldr	r3, [r7, #12]
 801f2c4:	681b      	ldr	r3, [r3, #0]
 801f2c6:	69d9      	ldr	r1, [r3, #28]
 801f2c8:	68bb      	ldr	r3, [r7, #8]
 801f2ca:	691b      	ldr	r3, [r3, #16]
 801f2cc:	021a      	lsls	r2, r3, #8
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	430a      	orrs	r2, r1
 801f2d4:	61da      	str	r2, [r3, #28]
      break;
 801f2d6:	e043      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	68b9      	ldr	r1, [r7, #8]
 801f2de:	4618      	mov	r0, r3
 801f2e0:	f000 fb6c 	bl	801f9bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f2ea:	68fb      	ldr	r3, [r7, #12]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	f042 0208 	orr.w	r2, r2, #8
 801f2f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f2f4:	68fb      	ldr	r3, [r7, #12]
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f2fa:	68fb      	ldr	r3, [r7, #12]
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	f022 0204 	bic.w	r2, r2, #4
 801f302:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f30a:	68bb      	ldr	r3, [r7, #8]
 801f30c:	691a      	ldr	r2, [r3, #16]
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	430a      	orrs	r2, r1
 801f314:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f316:	e023      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	68b9      	ldr	r1, [r7, #8]
 801f31e:	4618      	mov	r0, r3
 801f320:	f000 fbb6 	bl	801fa90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f324:	68fb      	ldr	r3, [r7, #12]
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f32a:	68fb      	ldr	r3, [r7, #12]
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f332:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f334:	68fb      	ldr	r3, [r7, #12]
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f342:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f34a:	68bb      	ldr	r3, [r7, #8]
 801f34c:	691b      	ldr	r3, [r3, #16]
 801f34e:	021a      	lsls	r2, r3, #8
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	430a      	orrs	r2, r1
 801f356:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f358:	e002      	b.n	801f360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f35a:	2301      	movs	r3, #1
 801f35c:	75fb      	strb	r3, [r7, #23]
      break;
 801f35e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	2200      	movs	r2, #0
 801f364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f368:	7dfb      	ldrb	r3, [r7, #23]
}
 801f36a:	4618      	mov	r0, r3
 801f36c:	3718      	adds	r7, #24
 801f36e:	46bd      	mov	sp, r7
 801f370:	bd80      	pop	{r7, pc}
 801f372:	bf00      	nop

0801f374 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f374:	b480      	push	{r7}
 801f376:	b083      	sub	sp, #12
 801f378:	af00      	add	r7, sp, #0
 801f37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801f37c:	bf00      	nop
 801f37e:	370c      	adds	r7, #12
 801f380:	46bd      	mov	sp, r7
 801f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f386:	4770      	bx	lr

0801f388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f388:	b480      	push	{r7}
 801f38a:	b083      	sub	sp, #12
 801f38c:	af00      	add	r7, sp, #0
 801f38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f390:	bf00      	nop
 801f392:	370c      	adds	r7, #12
 801f394:	46bd      	mov	sp, r7
 801f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f39a:	4770      	bx	lr

0801f39c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f39c:	b480      	push	{r7}
 801f39e:	b083      	sub	sp, #12
 801f3a0:	af00      	add	r7, sp, #0
 801f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f3a4:	bf00      	nop
 801f3a6:	370c      	adds	r7, #12
 801f3a8:	46bd      	mov	sp, r7
 801f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ae:	4770      	bx	lr

0801f3b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f3b0:	b480      	push	{r7}
 801f3b2:	b083      	sub	sp, #12
 801f3b4:	af00      	add	r7, sp, #0
 801f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f3b8:	bf00      	nop
 801f3ba:	370c      	adds	r7, #12
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c2:	4770      	bx	lr

0801f3c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b083      	sub	sp, #12
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f3cc:	bf00      	nop
 801f3ce:	370c      	adds	r7, #12
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d6:	4770      	bx	lr

0801f3d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801f3d8:	b480      	push	{r7}
 801f3da:	b085      	sub	sp, #20
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
 801f3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	681b      	ldr	r3, [r3, #0]
 801f3e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	4a42      	ldr	r2, [pc, #264]	; (801f4f4 <TIM_Base_SetConfig+0x11c>)
 801f3ec:	4293      	cmp	r3, r2
 801f3ee:	d013      	beq.n	801f418 <TIM_Base_SetConfig+0x40>
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f3f6:	d00f      	beq.n	801f418 <TIM_Base_SetConfig+0x40>
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	4a3f      	ldr	r2, [pc, #252]	; (801f4f8 <TIM_Base_SetConfig+0x120>)
 801f3fc:	4293      	cmp	r3, r2
 801f3fe:	d00b      	beq.n	801f418 <TIM_Base_SetConfig+0x40>
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	4a3e      	ldr	r2, [pc, #248]	; (801f4fc <TIM_Base_SetConfig+0x124>)
 801f404:	4293      	cmp	r3, r2
 801f406:	d007      	beq.n	801f418 <TIM_Base_SetConfig+0x40>
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	4a3d      	ldr	r2, [pc, #244]	; (801f500 <TIM_Base_SetConfig+0x128>)
 801f40c:	4293      	cmp	r3, r2
 801f40e:	d003      	beq.n	801f418 <TIM_Base_SetConfig+0x40>
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	4a3c      	ldr	r2, [pc, #240]	; (801f504 <TIM_Base_SetConfig+0x12c>)
 801f414:	4293      	cmp	r3, r2
 801f416:	d108      	bne.n	801f42a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f41e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f420:	683b      	ldr	r3, [r7, #0]
 801f422:	685b      	ldr	r3, [r3, #4]
 801f424:	68fa      	ldr	r2, [r7, #12]
 801f426:	4313      	orrs	r3, r2
 801f428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	4a31      	ldr	r2, [pc, #196]	; (801f4f4 <TIM_Base_SetConfig+0x11c>)
 801f42e:	4293      	cmp	r3, r2
 801f430:	d01f      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f438:	d01b      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	4a2e      	ldr	r2, [pc, #184]	; (801f4f8 <TIM_Base_SetConfig+0x120>)
 801f43e:	4293      	cmp	r3, r2
 801f440:	d017      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	4a2d      	ldr	r2, [pc, #180]	; (801f4fc <TIM_Base_SetConfig+0x124>)
 801f446:	4293      	cmp	r3, r2
 801f448:	d013      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	4a2c      	ldr	r2, [pc, #176]	; (801f500 <TIM_Base_SetConfig+0x128>)
 801f44e:	4293      	cmp	r3, r2
 801f450:	d00f      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	4a2c      	ldr	r2, [pc, #176]	; (801f508 <TIM_Base_SetConfig+0x130>)
 801f456:	4293      	cmp	r3, r2
 801f458:	d00b      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	4a2b      	ldr	r2, [pc, #172]	; (801f50c <TIM_Base_SetConfig+0x134>)
 801f45e:	4293      	cmp	r3, r2
 801f460:	d007      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f462:	687b      	ldr	r3, [r7, #4]
 801f464:	4a2a      	ldr	r2, [pc, #168]	; (801f510 <TIM_Base_SetConfig+0x138>)
 801f466:	4293      	cmp	r3, r2
 801f468:	d003      	beq.n	801f472 <TIM_Base_SetConfig+0x9a>
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	4a25      	ldr	r2, [pc, #148]	; (801f504 <TIM_Base_SetConfig+0x12c>)
 801f46e:	4293      	cmp	r3, r2
 801f470:	d108      	bne.n	801f484 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	68db      	ldr	r3, [r3, #12]
 801f47e:	68fa      	ldr	r2, [r7, #12]
 801f480:	4313      	orrs	r3, r2
 801f482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	695b      	ldr	r3, [r3, #20]
 801f48e:	4313      	orrs	r3, r2
 801f490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	68fa      	ldr	r2, [r7, #12]
 801f496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f498:	683b      	ldr	r3, [r7, #0]
 801f49a:	689a      	ldr	r2, [r3, #8]
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	681a      	ldr	r2, [r3, #0]
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	4a12      	ldr	r2, [pc, #72]	; (801f4f4 <TIM_Base_SetConfig+0x11c>)
 801f4ac:	4293      	cmp	r3, r2
 801f4ae:	d013      	beq.n	801f4d8 <TIM_Base_SetConfig+0x100>
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	4a13      	ldr	r2, [pc, #76]	; (801f500 <TIM_Base_SetConfig+0x128>)
 801f4b4:	4293      	cmp	r3, r2
 801f4b6:	d00f      	beq.n	801f4d8 <TIM_Base_SetConfig+0x100>
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	4a13      	ldr	r2, [pc, #76]	; (801f508 <TIM_Base_SetConfig+0x130>)
 801f4bc:	4293      	cmp	r3, r2
 801f4be:	d00b      	beq.n	801f4d8 <TIM_Base_SetConfig+0x100>
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	4a12      	ldr	r2, [pc, #72]	; (801f50c <TIM_Base_SetConfig+0x134>)
 801f4c4:	4293      	cmp	r3, r2
 801f4c6:	d007      	beq.n	801f4d8 <TIM_Base_SetConfig+0x100>
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	4a11      	ldr	r2, [pc, #68]	; (801f510 <TIM_Base_SetConfig+0x138>)
 801f4cc:	4293      	cmp	r3, r2
 801f4ce:	d003      	beq.n	801f4d8 <TIM_Base_SetConfig+0x100>
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	4a0c      	ldr	r2, [pc, #48]	; (801f504 <TIM_Base_SetConfig+0x12c>)
 801f4d4:	4293      	cmp	r3, r2
 801f4d6:	d103      	bne.n	801f4e0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f4d8:	683b      	ldr	r3, [r7, #0]
 801f4da:	691a      	ldr	r2, [r3, #16]
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	2201      	movs	r2, #1
 801f4e4:	615a      	str	r2, [r3, #20]
}
 801f4e6:	bf00      	nop
 801f4e8:	3714      	adds	r7, #20
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4f0:	4770      	bx	lr
 801f4f2:	bf00      	nop
 801f4f4:	40012c00 	.word	0x40012c00
 801f4f8:	40000400 	.word	0x40000400
 801f4fc:	40000800 	.word	0x40000800
 801f500:	40013400 	.word	0x40013400
 801f504:	40015000 	.word	0x40015000
 801f508:	40014000 	.word	0x40014000
 801f50c:	40014400 	.word	0x40014400
 801f510:	40014800 	.word	0x40014800

0801f514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f514:	b480      	push	{r7}
 801f516:	b087      	sub	sp, #28
 801f518:	af00      	add	r7, sp, #0
 801f51a:	6078      	str	r0, [r7, #4]
 801f51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	6a1b      	ldr	r3, [r3, #32]
 801f522:	f023 0201 	bic.w	r2, r3, #1
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	6a1b      	ldr	r3, [r3, #32]
 801f52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	685b      	ldr	r3, [r3, #4]
 801f534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	699b      	ldr	r3, [r3, #24]
 801f53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	f023 0303 	bic.w	r3, r3, #3
 801f54e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f550:	683b      	ldr	r3, [r7, #0]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	68fa      	ldr	r2, [r7, #12]
 801f556:	4313      	orrs	r3, r2
 801f558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f55a:	697b      	ldr	r3, [r7, #20]
 801f55c:	f023 0302 	bic.w	r3, r3, #2
 801f560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f562:	683b      	ldr	r3, [r7, #0]
 801f564:	689b      	ldr	r3, [r3, #8]
 801f566:	697a      	ldr	r2, [r7, #20]
 801f568:	4313      	orrs	r3, r2
 801f56a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	4a30      	ldr	r2, [pc, #192]	; (801f630 <TIM_OC1_SetConfig+0x11c>)
 801f570:	4293      	cmp	r3, r2
 801f572:	d013      	beq.n	801f59c <TIM_OC1_SetConfig+0x88>
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	4a2f      	ldr	r2, [pc, #188]	; (801f634 <TIM_OC1_SetConfig+0x120>)
 801f578:	4293      	cmp	r3, r2
 801f57a:	d00f      	beq.n	801f59c <TIM_OC1_SetConfig+0x88>
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	4a2e      	ldr	r2, [pc, #184]	; (801f638 <TIM_OC1_SetConfig+0x124>)
 801f580:	4293      	cmp	r3, r2
 801f582:	d00b      	beq.n	801f59c <TIM_OC1_SetConfig+0x88>
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	4a2d      	ldr	r2, [pc, #180]	; (801f63c <TIM_OC1_SetConfig+0x128>)
 801f588:	4293      	cmp	r3, r2
 801f58a:	d007      	beq.n	801f59c <TIM_OC1_SetConfig+0x88>
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	4a2c      	ldr	r2, [pc, #176]	; (801f640 <TIM_OC1_SetConfig+0x12c>)
 801f590:	4293      	cmp	r3, r2
 801f592:	d003      	beq.n	801f59c <TIM_OC1_SetConfig+0x88>
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	4a2b      	ldr	r2, [pc, #172]	; (801f644 <TIM_OC1_SetConfig+0x130>)
 801f598:	4293      	cmp	r3, r2
 801f59a:	d10c      	bne.n	801f5b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f59c:	697b      	ldr	r3, [r7, #20]
 801f59e:	f023 0308 	bic.w	r3, r3, #8
 801f5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f5a4:	683b      	ldr	r3, [r7, #0]
 801f5a6:	68db      	ldr	r3, [r3, #12]
 801f5a8:	697a      	ldr	r2, [r7, #20]
 801f5aa:	4313      	orrs	r3, r2
 801f5ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	f023 0304 	bic.w	r3, r3, #4
 801f5b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	4a1d      	ldr	r2, [pc, #116]	; (801f630 <TIM_OC1_SetConfig+0x11c>)
 801f5ba:	4293      	cmp	r3, r2
 801f5bc:	d013      	beq.n	801f5e6 <TIM_OC1_SetConfig+0xd2>
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	4a1c      	ldr	r2, [pc, #112]	; (801f634 <TIM_OC1_SetConfig+0x120>)
 801f5c2:	4293      	cmp	r3, r2
 801f5c4:	d00f      	beq.n	801f5e6 <TIM_OC1_SetConfig+0xd2>
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	4a1b      	ldr	r2, [pc, #108]	; (801f638 <TIM_OC1_SetConfig+0x124>)
 801f5ca:	4293      	cmp	r3, r2
 801f5cc:	d00b      	beq.n	801f5e6 <TIM_OC1_SetConfig+0xd2>
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	4a1a      	ldr	r2, [pc, #104]	; (801f63c <TIM_OC1_SetConfig+0x128>)
 801f5d2:	4293      	cmp	r3, r2
 801f5d4:	d007      	beq.n	801f5e6 <TIM_OC1_SetConfig+0xd2>
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	4a19      	ldr	r2, [pc, #100]	; (801f640 <TIM_OC1_SetConfig+0x12c>)
 801f5da:	4293      	cmp	r3, r2
 801f5dc:	d003      	beq.n	801f5e6 <TIM_OC1_SetConfig+0xd2>
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	4a18      	ldr	r2, [pc, #96]	; (801f644 <TIM_OC1_SetConfig+0x130>)
 801f5e2:	4293      	cmp	r3, r2
 801f5e4:	d111      	bne.n	801f60a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f5e6:	693b      	ldr	r3, [r7, #16]
 801f5e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f5ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f5ee:	693b      	ldr	r3, [r7, #16]
 801f5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f5f6:	683b      	ldr	r3, [r7, #0]
 801f5f8:	695b      	ldr	r3, [r3, #20]
 801f5fa:	693a      	ldr	r2, [r7, #16]
 801f5fc:	4313      	orrs	r3, r2
 801f5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f600:	683b      	ldr	r3, [r7, #0]
 801f602:	699b      	ldr	r3, [r3, #24]
 801f604:	693a      	ldr	r2, [r7, #16]
 801f606:	4313      	orrs	r3, r2
 801f608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	693a      	ldr	r2, [r7, #16]
 801f60e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	68fa      	ldr	r2, [r7, #12]
 801f614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f616:	683b      	ldr	r3, [r7, #0]
 801f618:	685a      	ldr	r2, [r3, #4]
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	697a      	ldr	r2, [r7, #20]
 801f622:	621a      	str	r2, [r3, #32]
}
 801f624:	bf00      	nop
 801f626:	371c      	adds	r7, #28
 801f628:	46bd      	mov	sp, r7
 801f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f62e:	4770      	bx	lr
 801f630:	40012c00 	.word	0x40012c00
 801f634:	40013400 	.word	0x40013400
 801f638:	40014000 	.word	0x40014000
 801f63c:	40014400 	.word	0x40014400
 801f640:	40014800 	.word	0x40014800
 801f644:	40015000 	.word	0x40015000

0801f648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f648:	b480      	push	{r7}
 801f64a:	b087      	sub	sp, #28
 801f64c:	af00      	add	r7, sp, #0
 801f64e:	6078      	str	r0, [r7, #4]
 801f650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	6a1b      	ldr	r3, [r3, #32]
 801f656:	f023 0210 	bic.w	r2, r3, #16
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	6a1b      	ldr	r3, [r3, #32]
 801f662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	685b      	ldr	r3, [r3, #4]
 801f668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	699b      	ldr	r3, [r3, #24]
 801f66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801f670:	68fb      	ldr	r3, [r7, #12]
 801f672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	021b      	lsls	r3, r3, #8
 801f68a:	68fa      	ldr	r2, [r7, #12]
 801f68c:	4313      	orrs	r3, r2
 801f68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801f690:	697b      	ldr	r3, [r7, #20]
 801f692:	f023 0320 	bic.w	r3, r3, #32
 801f696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	689b      	ldr	r3, [r3, #8]
 801f69c:	011b      	lsls	r3, r3, #4
 801f69e:	697a      	ldr	r2, [r7, #20]
 801f6a0:	4313      	orrs	r3, r2
 801f6a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	4a2c      	ldr	r2, [pc, #176]	; (801f758 <TIM_OC2_SetConfig+0x110>)
 801f6a8:	4293      	cmp	r3, r2
 801f6aa:	d007      	beq.n	801f6bc <TIM_OC2_SetConfig+0x74>
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	4a2b      	ldr	r2, [pc, #172]	; (801f75c <TIM_OC2_SetConfig+0x114>)
 801f6b0:	4293      	cmp	r3, r2
 801f6b2:	d003      	beq.n	801f6bc <TIM_OC2_SetConfig+0x74>
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	4a2a      	ldr	r2, [pc, #168]	; (801f760 <TIM_OC2_SetConfig+0x118>)
 801f6b8:	4293      	cmp	r3, r2
 801f6ba:	d10d      	bne.n	801f6d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f6c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801f6c4:	683b      	ldr	r3, [r7, #0]
 801f6c6:	68db      	ldr	r3, [r3, #12]
 801f6c8:	011b      	lsls	r3, r3, #4
 801f6ca:	697a      	ldr	r2, [r7, #20]
 801f6cc:	4313      	orrs	r3, r2
 801f6ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f6d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	4a1f      	ldr	r2, [pc, #124]	; (801f758 <TIM_OC2_SetConfig+0x110>)
 801f6dc:	4293      	cmp	r3, r2
 801f6de:	d013      	beq.n	801f708 <TIM_OC2_SetConfig+0xc0>
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	4a1e      	ldr	r2, [pc, #120]	; (801f75c <TIM_OC2_SetConfig+0x114>)
 801f6e4:	4293      	cmp	r3, r2
 801f6e6:	d00f      	beq.n	801f708 <TIM_OC2_SetConfig+0xc0>
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	4a1e      	ldr	r2, [pc, #120]	; (801f764 <TIM_OC2_SetConfig+0x11c>)
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d00b      	beq.n	801f708 <TIM_OC2_SetConfig+0xc0>
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	4a1d      	ldr	r2, [pc, #116]	; (801f768 <TIM_OC2_SetConfig+0x120>)
 801f6f4:	4293      	cmp	r3, r2
 801f6f6:	d007      	beq.n	801f708 <TIM_OC2_SetConfig+0xc0>
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	4a1c      	ldr	r2, [pc, #112]	; (801f76c <TIM_OC2_SetConfig+0x124>)
 801f6fc:	4293      	cmp	r3, r2
 801f6fe:	d003      	beq.n	801f708 <TIM_OC2_SetConfig+0xc0>
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	4a17      	ldr	r2, [pc, #92]	; (801f760 <TIM_OC2_SetConfig+0x118>)
 801f704:	4293      	cmp	r3, r2
 801f706:	d113      	bne.n	801f730 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801f708:	693b      	ldr	r3, [r7, #16]
 801f70a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f70e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801f710:	693b      	ldr	r3, [r7, #16]
 801f712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801f718:	683b      	ldr	r3, [r7, #0]
 801f71a:	695b      	ldr	r3, [r3, #20]
 801f71c:	009b      	lsls	r3, r3, #2
 801f71e:	693a      	ldr	r2, [r7, #16]
 801f720:	4313      	orrs	r3, r2
 801f722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	699b      	ldr	r3, [r3, #24]
 801f728:	009b      	lsls	r3, r3, #2
 801f72a:	693a      	ldr	r2, [r7, #16]
 801f72c:	4313      	orrs	r3, r2
 801f72e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	693a      	ldr	r2, [r7, #16]
 801f734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f736:	687b      	ldr	r3, [r7, #4]
 801f738:	68fa      	ldr	r2, [r7, #12]
 801f73a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801f73c:	683b      	ldr	r3, [r7, #0]
 801f73e:	685a      	ldr	r2, [r3, #4]
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	697a      	ldr	r2, [r7, #20]
 801f748:	621a      	str	r2, [r3, #32]
}
 801f74a:	bf00      	nop
 801f74c:	371c      	adds	r7, #28
 801f74e:	46bd      	mov	sp, r7
 801f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f754:	4770      	bx	lr
 801f756:	bf00      	nop
 801f758:	40012c00 	.word	0x40012c00
 801f75c:	40013400 	.word	0x40013400
 801f760:	40015000 	.word	0x40015000
 801f764:	40014000 	.word	0x40014000
 801f768:	40014400 	.word	0x40014400
 801f76c:	40014800 	.word	0x40014800

0801f770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f770:	b480      	push	{r7}
 801f772:	b087      	sub	sp, #28
 801f774:	af00      	add	r7, sp, #0
 801f776:	6078      	str	r0, [r7, #4]
 801f778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	6a1b      	ldr	r3, [r3, #32]
 801f77e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	6a1b      	ldr	r3, [r3, #32]
 801f78a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	685b      	ldr	r3, [r3, #4]
 801f790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	69db      	ldr	r3, [r3, #28]
 801f796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	f023 0303 	bic.w	r3, r3, #3
 801f7aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f7ac:	683b      	ldr	r3, [r7, #0]
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	68fa      	ldr	r2, [r7, #12]
 801f7b2:	4313      	orrs	r3, r2
 801f7b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801f7b6:	697b      	ldr	r3, [r7, #20]
 801f7b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f7bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801f7be:	683b      	ldr	r3, [r7, #0]
 801f7c0:	689b      	ldr	r3, [r3, #8]
 801f7c2:	021b      	lsls	r3, r3, #8
 801f7c4:	697a      	ldr	r2, [r7, #20]
 801f7c6:	4313      	orrs	r3, r2
 801f7c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	4a2b      	ldr	r2, [pc, #172]	; (801f87c <TIM_OC3_SetConfig+0x10c>)
 801f7ce:	4293      	cmp	r3, r2
 801f7d0:	d007      	beq.n	801f7e2 <TIM_OC3_SetConfig+0x72>
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	4a2a      	ldr	r2, [pc, #168]	; (801f880 <TIM_OC3_SetConfig+0x110>)
 801f7d6:	4293      	cmp	r3, r2
 801f7d8:	d003      	beq.n	801f7e2 <TIM_OC3_SetConfig+0x72>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	4a29      	ldr	r2, [pc, #164]	; (801f884 <TIM_OC3_SetConfig+0x114>)
 801f7de:	4293      	cmp	r3, r2
 801f7e0:	d10d      	bne.n	801f7fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801f7e2:	697b      	ldr	r3, [r7, #20]
 801f7e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f7e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801f7ea:	683b      	ldr	r3, [r7, #0]
 801f7ec:	68db      	ldr	r3, [r3, #12]
 801f7ee:	021b      	lsls	r3, r3, #8
 801f7f0:	697a      	ldr	r2, [r7, #20]
 801f7f2:	4313      	orrs	r3, r2
 801f7f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801f7f6:	697b      	ldr	r3, [r7, #20]
 801f7f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f7fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	4a1e      	ldr	r2, [pc, #120]	; (801f87c <TIM_OC3_SetConfig+0x10c>)
 801f802:	4293      	cmp	r3, r2
 801f804:	d013      	beq.n	801f82e <TIM_OC3_SetConfig+0xbe>
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	4a1d      	ldr	r2, [pc, #116]	; (801f880 <TIM_OC3_SetConfig+0x110>)
 801f80a:	4293      	cmp	r3, r2
 801f80c:	d00f      	beq.n	801f82e <TIM_OC3_SetConfig+0xbe>
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	4a1d      	ldr	r2, [pc, #116]	; (801f888 <TIM_OC3_SetConfig+0x118>)
 801f812:	4293      	cmp	r3, r2
 801f814:	d00b      	beq.n	801f82e <TIM_OC3_SetConfig+0xbe>
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	4a1c      	ldr	r2, [pc, #112]	; (801f88c <TIM_OC3_SetConfig+0x11c>)
 801f81a:	4293      	cmp	r3, r2
 801f81c:	d007      	beq.n	801f82e <TIM_OC3_SetConfig+0xbe>
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	4a1b      	ldr	r2, [pc, #108]	; (801f890 <TIM_OC3_SetConfig+0x120>)
 801f822:	4293      	cmp	r3, r2
 801f824:	d003      	beq.n	801f82e <TIM_OC3_SetConfig+0xbe>
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	4a16      	ldr	r2, [pc, #88]	; (801f884 <TIM_OC3_SetConfig+0x114>)
 801f82a:	4293      	cmp	r3, r2
 801f82c:	d113      	bne.n	801f856 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801f82e:	693b      	ldr	r3, [r7, #16]
 801f830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801f836:	693b      	ldr	r3, [r7, #16]
 801f838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801f83e:	683b      	ldr	r3, [r7, #0]
 801f840:	695b      	ldr	r3, [r3, #20]
 801f842:	011b      	lsls	r3, r3, #4
 801f844:	693a      	ldr	r2, [r7, #16]
 801f846:	4313      	orrs	r3, r2
 801f848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	699b      	ldr	r3, [r3, #24]
 801f84e:	011b      	lsls	r3, r3, #4
 801f850:	693a      	ldr	r2, [r7, #16]
 801f852:	4313      	orrs	r3, r2
 801f854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	693a      	ldr	r2, [r7, #16]
 801f85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	68fa      	ldr	r2, [r7, #12]
 801f860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801f862:	683b      	ldr	r3, [r7, #0]
 801f864:	685a      	ldr	r2, [r3, #4]
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	697a      	ldr	r2, [r7, #20]
 801f86e:	621a      	str	r2, [r3, #32]
}
 801f870:	bf00      	nop
 801f872:	371c      	adds	r7, #28
 801f874:	46bd      	mov	sp, r7
 801f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f87a:	4770      	bx	lr
 801f87c:	40012c00 	.word	0x40012c00
 801f880:	40013400 	.word	0x40013400
 801f884:	40015000 	.word	0x40015000
 801f888:	40014000 	.word	0x40014000
 801f88c:	40014400 	.word	0x40014400
 801f890:	40014800 	.word	0x40014800

0801f894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f894:	b480      	push	{r7}
 801f896:	b087      	sub	sp, #28
 801f898:	af00      	add	r7, sp, #0
 801f89a:	6078      	str	r0, [r7, #4]
 801f89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801f89e:	687b      	ldr	r3, [r7, #4]
 801f8a0:	6a1b      	ldr	r3, [r3, #32]
 801f8a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	6a1b      	ldr	r3, [r3, #32]
 801f8ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	685b      	ldr	r3, [r3, #4]
 801f8b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	69db      	ldr	r3, [r3, #28]
 801f8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f8d0:	683b      	ldr	r3, [r7, #0]
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	021b      	lsls	r3, r3, #8
 801f8d6:	68fa      	ldr	r2, [r7, #12]
 801f8d8:	4313      	orrs	r3, r2
 801f8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801f8dc:	697b      	ldr	r3, [r7, #20]
 801f8de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f8e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801f8e4:	683b      	ldr	r3, [r7, #0]
 801f8e6:	689b      	ldr	r3, [r3, #8]
 801f8e8:	031b      	lsls	r3, r3, #12
 801f8ea:	697a      	ldr	r2, [r7, #20]
 801f8ec:	4313      	orrs	r3, r2
 801f8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	4a2c      	ldr	r2, [pc, #176]	; (801f9a4 <TIM_OC4_SetConfig+0x110>)
 801f8f4:	4293      	cmp	r3, r2
 801f8f6:	d007      	beq.n	801f908 <TIM_OC4_SetConfig+0x74>
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	4a2b      	ldr	r2, [pc, #172]	; (801f9a8 <TIM_OC4_SetConfig+0x114>)
 801f8fc:	4293      	cmp	r3, r2
 801f8fe:	d003      	beq.n	801f908 <TIM_OC4_SetConfig+0x74>
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	4a2a      	ldr	r2, [pc, #168]	; (801f9ac <TIM_OC4_SetConfig+0x118>)
 801f904:	4293      	cmp	r3, r2
 801f906:	d10d      	bne.n	801f924 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801f908:	697b      	ldr	r3, [r7, #20]
 801f90a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f90e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801f910:	683b      	ldr	r3, [r7, #0]
 801f912:	68db      	ldr	r3, [r3, #12]
 801f914:	031b      	lsls	r3, r3, #12
 801f916:	697a      	ldr	r2, [r7, #20]
 801f918:	4313      	orrs	r3, r2
 801f91a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801f91c:	697b      	ldr	r3, [r7, #20]
 801f91e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	4a1f      	ldr	r2, [pc, #124]	; (801f9a4 <TIM_OC4_SetConfig+0x110>)
 801f928:	4293      	cmp	r3, r2
 801f92a:	d013      	beq.n	801f954 <TIM_OC4_SetConfig+0xc0>
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	4a1e      	ldr	r2, [pc, #120]	; (801f9a8 <TIM_OC4_SetConfig+0x114>)
 801f930:	4293      	cmp	r3, r2
 801f932:	d00f      	beq.n	801f954 <TIM_OC4_SetConfig+0xc0>
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	4a1e      	ldr	r2, [pc, #120]	; (801f9b0 <TIM_OC4_SetConfig+0x11c>)
 801f938:	4293      	cmp	r3, r2
 801f93a:	d00b      	beq.n	801f954 <TIM_OC4_SetConfig+0xc0>
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	4a1d      	ldr	r2, [pc, #116]	; (801f9b4 <TIM_OC4_SetConfig+0x120>)
 801f940:	4293      	cmp	r3, r2
 801f942:	d007      	beq.n	801f954 <TIM_OC4_SetConfig+0xc0>
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	4a1c      	ldr	r2, [pc, #112]	; (801f9b8 <TIM_OC4_SetConfig+0x124>)
 801f948:	4293      	cmp	r3, r2
 801f94a:	d003      	beq.n	801f954 <TIM_OC4_SetConfig+0xc0>
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	4a17      	ldr	r2, [pc, #92]	; (801f9ac <TIM_OC4_SetConfig+0x118>)
 801f950:	4293      	cmp	r3, r2
 801f952:	d113      	bne.n	801f97c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f954:	693b      	ldr	r3, [r7, #16]
 801f956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f95a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801f95c:	693b      	ldr	r3, [r7, #16]
 801f95e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f962:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	695b      	ldr	r3, [r3, #20]
 801f968:	019b      	lsls	r3, r3, #6
 801f96a:	693a      	ldr	r2, [r7, #16]
 801f96c:	4313      	orrs	r3, r2
 801f96e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801f970:	683b      	ldr	r3, [r7, #0]
 801f972:	699b      	ldr	r3, [r3, #24]
 801f974:	019b      	lsls	r3, r3, #6
 801f976:	693a      	ldr	r2, [r7, #16]
 801f978:	4313      	orrs	r3, r2
 801f97a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	693a      	ldr	r2, [r7, #16]
 801f980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	68fa      	ldr	r2, [r7, #12]
 801f986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	685a      	ldr	r2, [r3, #4]
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	697a      	ldr	r2, [r7, #20]
 801f994:	621a      	str	r2, [r3, #32]
}
 801f996:	bf00      	nop
 801f998:	371c      	adds	r7, #28
 801f99a:	46bd      	mov	sp, r7
 801f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9a0:	4770      	bx	lr
 801f9a2:	bf00      	nop
 801f9a4:	40012c00 	.word	0x40012c00
 801f9a8:	40013400 	.word	0x40013400
 801f9ac:	40015000 	.word	0x40015000
 801f9b0:	40014000 	.word	0x40014000
 801f9b4:	40014400 	.word	0x40014400
 801f9b8:	40014800 	.word	0x40014800

0801f9bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f9bc:	b480      	push	{r7}
 801f9be:	b087      	sub	sp, #28
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
 801f9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	6a1b      	ldr	r3, [r3, #32]
 801f9ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	6a1b      	ldr	r3, [r3, #32]
 801f9d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	685b      	ldr	r3, [r3, #4]
 801f9dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f9f0:	683b      	ldr	r3, [r7, #0]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	68fa      	ldr	r2, [r7, #12]
 801f9f6:	4313      	orrs	r3, r2
 801f9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f9fa:	693b      	ldr	r3, [r7, #16]
 801f9fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fa00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fa02:	683b      	ldr	r3, [r7, #0]
 801fa04:	689b      	ldr	r3, [r3, #8]
 801fa06:	041b      	lsls	r3, r3, #16
 801fa08:	693a      	ldr	r2, [r7, #16]
 801fa0a:	4313      	orrs	r3, r2
 801fa0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	4a19      	ldr	r2, [pc, #100]	; (801fa78 <TIM_OC5_SetConfig+0xbc>)
 801fa12:	4293      	cmp	r3, r2
 801fa14:	d013      	beq.n	801fa3e <TIM_OC5_SetConfig+0x82>
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	4a18      	ldr	r2, [pc, #96]	; (801fa7c <TIM_OC5_SetConfig+0xc0>)
 801fa1a:	4293      	cmp	r3, r2
 801fa1c:	d00f      	beq.n	801fa3e <TIM_OC5_SetConfig+0x82>
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	4a17      	ldr	r2, [pc, #92]	; (801fa80 <TIM_OC5_SetConfig+0xc4>)
 801fa22:	4293      	cmp	r3, r2
 801fa24:	d00b      	beq.n	801fa3e <TIM_OC5_SetConfig+0x82>
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	4a16      	ldr	r2, [pc, #88]	; (801fa84 <TIM_OC5_SetConfig+0xc8>)
 801fa2a:	4293      	cmp	r3, r2
 801fa2c:	d007      	beq.n	801fa3e <TIM_OC5_SetConfig+0x82>
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	4a15      	ldr	r2, [pc, #84]	; (801fa88 <TIM_OC5_SetConfig+0xcc>)
 801fa32:	4293      	cmp	r3, r2
 801fa34:	d003      	beq.n	801fa3e <TIM_OC5_SetConfig+0x82>
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	4a14      	ldr	r2, [pc, #80]	; (801fa8c <TIM_OC5_SetConfig+0xd0>)
 801fa3a:	4293      	cmp	r3, r2
 801fa3c:	d109      	bne.n	801fa52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fa3e:	697b      	ldr	r3, [r7, #20]
 801fa40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fa44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	695b      	ldr	r3, [r3, #20]
 801fa4a:	021b      	lsls	r3, r3, #8
 801fa4c:	697a      	ldr	r2, [r7, #20]
 801fa4e:	4313      	orrs	r3, r2
 801fa50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	697a      	ldr	r2, [r7, #20]
 801fa56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	68fa      	ldr	r2, [r7, #12]
 801fa5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fa5e:	683b      	ldr	r3, [r7, #0]
 801fa60:	685a      	ldr	r2, [r3, #4]
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	693a      	ldr	r2, [r7, #16]
 801fa6a:	621a      	str	r2, [r3, #32]
}
 801fa6c:	bf00      	nop
 801fa6e:	371c      	adds	r7, #28
 801fa70:	46bd      	mov	sp, r7
 801fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa76:	4770      	bx	lr
 801fa78:	40012c00 	.word	0x40012c00
 801fa7c:	40013400 	.word	0x40013400
 801fa80:	40014000 	.word	0x40014000
 801fa84:	40014400 	.word	0x40014400
 801fa88:	40014800 	.word	0x40014800
 801fa8c:	40015000 	.word	0x40015000

0801fa90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801fa90:	b480      	push	{r7}
 801fa92:	b087      	sub	sp, #28
 801fa94:	af00      	add	r7, sp, #0
 801fa96:	6078      	str	r0, [r7, #4]
 801fa98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	6a1b      	ldr	r3, [r3, #32]
 801fa9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	6a1b      	ldr	r3, [r3, #32]
 801faaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	685b      	ldr	r3, [r3, #4]
 801fab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fab8:	68fb      	ldr	r3, [r7, #12]
 801faba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801fabe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801fac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fac4:	683b      	ldr	r3, [r7, #0]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	021b      	lsls	r3, r3, #8
 801faca:	68fa      	ldr	r2, [r7, #12]
 801facc:	4313      	orrs	r3, r2
 801face:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fad0:	693b      	ldr	r3, [r7, #16]
 801fad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801fad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fad8:	683b      	ldr	r3, [r7, #0]
 801fada:	689b      	ldr	r3, [r3, #8]
 801fadc:	051b      	lsls	r3, r3, #20
 801fade:	693a      	ldr	r2, [r7, #16]
 801fae0:	4313      	orrs	r3, r2
 801fae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	4a1a      	ldr	r2, [pc, #104]	; (801fb50 <TIM_OC6_SetConfig+0xc0>)
 801fae8:	4293      	cmp	r3, r2
 801faea:	d013      	beq.n	801fb14 <TIM_OC6_SetConfig+0x84>
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	4a19      	ldr	r2, [pc, #100]	; (801fb54 <TIM_OC6_SetConfig+0xc4>)
 801faf0:	4293      	cmp	r3, r2
 801faf2:	d00f      	beq.n	801fb14 <TIM_OC6_SetConfig+0x84>
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	4a18      	ldr	r2, [pc, #96]	; (801fb58 <TIM_OC6_SetConfig+0xc8>)
 801faf8:	4293      	cmp	r3, r2
 801fafa:	d00b      	beq.n	801fb14 <TIM_OC6_SetConfig+0x84>
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	4a17      	ldr	r2, [pc, #92]	; (801fb5c <TIM_OC6_SetConfig+0xcc>)
 801fb00:	4293      	cmp	r3, r2
 801fb02:	d007      	beq.n	801fb14 <TIM_OC6_SetConfig+0x84>
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	4a16      	ldr	r2, [pc, #88]	; (801fb60 <TIM_OC6_SetConfig+0xd0>)
 801fb08:	4293      	cmp	r3, r2
 801fb0a:	d003      	beq.n	801fb14 <TIM_OC6_SetConfig+0x84>
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	4a15      	ldr	r2, [pc, #84]	; (801fb64 <TIM_OC6_SetConfig+0xd4>)
 801fb10:	4293      	cmp	r3, r2
 801fb12:	d109      	bne.n	801fb28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fb1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801fb1c:	683b      	ldr	r3, [r7, #0]
 801fb1e:	695b      	ldr	r3, [r3, #20]
 801fb20:	029b      	lsls	r3, r3, #10
 801fb22:	697a      	ldr	r2, [r7, #20]
 801fb24:	4313      	orrs	r3, r2
 801fb26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	697a      	ldr	r2, [r7, #20]
 801fb2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	68fa      	ldr	r2, [r7, #12]
 801fb32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801fb34:	683b      	ldr	r3, [r7, #0]
 801fb36:	685a      	ldr	r2, [r3, #4]
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	693a      	ldr	r2, [r7, #16]
 801fb40:	621a      	str	r2, [r3, #32]
}
 801fb42:	bf00      	nop
 801fb44:	371c      	adds	r7, #28
 801fb46:	46bd      	mov	sp, r7
 801fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb4c:	4770      	bx	lr
 801fb4e:	bf00      	nop
 801fb50:	40012c00 	.word	0x40012c00
 801fb54:	40013400 	.word	0x40013400
 801fb58:	40014000 	.word	0x40014000
 801fb5c:	40014400 	.word	0x40014400
 801fb60:	40014800 	.word	0x40014800
 801fb64:	40015000 	.word	0x40015000

0801fb68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801fb68:	b480      	push	{r7}
 801fb6a:	b087      	sub	sp, #28
 801fb6c:	af00      	add	r7, sp, #0
 801fb6e:	60f8      	str	r0, [r7, #12]
 801fb70:	60b9      	str	r1, [r7, #8]
 801fb72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801fb74:	68bb      	ldr	r3, [r7, #8]
 801fb76:	f003 031f 	and.w	r3, r3, #31
 801fb7a:	2201      	movs	r2, #1
 801fb7c:	fa02 f303 	lsl.w	r3, r2, r3
 801fb80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801fb82:	68fb      	ldr	r3, [r7, #12]
 801fb84:	6a1a      	ldr	r2, [r3, #32]
 801fb86:	697b      	ldr	r3, [r7, #20]
 801fb88:	43db      	mvns	r3, r3
 801fb8a:	401a      	ands	r2, r3
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	6a1a      	ldr	r2, [r3, #32]
 801fb94:	68bb      	ldr	r3, [r7, #8]
 801fb96:	f003 031f 	and.w	r3, r3, #31
 801fb9a:	6879      	ldr	r1, [r7, #4]
 801fb9c:	fa01 f303 	lsl.w	r3, r1, r3
 801fba0:	431a      	orrs	r2, r3
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	621a      	str	r2, [r3, #32]
}
 801fba6:	bf00      	nop
 801fba8:	371c      	adds	r7, #28
 801fbaa:	46bd      	mov	sp, r7
 801fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbb0:	4770      	bx	lr
	...

0801fbb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801fbb4:	b480      	push	{r7}
 801fbb6:	b085      	sub	sp, #20
 801fbb8:	af00      	add	r7, sp, #0
 801fbba:	6078      	str	r0, [r7, #4]
 801fbbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fbc4:	2b01      	cmp	r3, #1
 801fbc6:	d101      	bne.n	801fbcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801fbc8:	2302      	movs	r3, #2
 801fbca:	e06f      	b.n	801fcac <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	2201      	movs	r2, #1
 801fbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	2202      	movs	r2, #2
 801fbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	685b      	ldr	r3, [r3, #4]
 801fbe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	689b      	ldr	r3, [r3, #8]
 801fbea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	4a31      	ldr	r2, [pc, #196]	; (801fcb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fbf2:	4293      	cmp	r3, r2
 801fbf4:	d009      	beq.n	801fc0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	4a30      	ldr	r2, [pc, #192]	; (801fcbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fbfc:	4293      	cmp	r3, r2
 801fbfe:	d004      	beq.n	801fc0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	4a2e      	ldr	r2, [pc, #184]	; (801fcc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fc06:	4293      	cmp	r3, r2
 801fc08:	d108      	bne.n	801fc1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801fc0a:	68fb      	ldr	r3, [r7, #12]
 801fc0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801fc10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801fc12:	683b      	ldr	r3, [r7, #0]
 801fc14:	685b      	ldr	r3, [r3, #4]
 801fc16:	68fa      	ldr	r2, [r7, #12]
 801fc18:	4313      	orrs	r3, r2
 801fc1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801fc1c:	68fb      	ldr	r3, [r7, #12]
 801fc1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801fc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fc26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801fc28:	683b      	ldr	r3, [r7, #0]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	68fa      	ldr	r2, [r7, #12]
 801fc2e:	4313      	orrs	r3, r2
 801fc30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	68fa      	ldr	r2, [r7, #12]
 801fc38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	681b      	ldr	r3, [r3, #0]
 801fc3e:	4a1e      	ldr	r2, [pc, #120]	; (801fcb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fc40:	4293      	cmp	r3, r2
 801fc42:	d01d      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fc4c:	d018      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	4a1c      	ldr	r2, [pc, #112]	; (801fcc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801fc54:	4293      	cmp	r3, r2
 801fc56:	d013      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	4a1a      	ldr	r2, [pc, #104]	; (801fcc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801fc5e:	4293      	cmp	r3, r2
 801fc60:	d00e      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	681b      	ldr	r3, [r3, #0]
 801fc66:	4a15      	ldr	r2, [pc, #84]	; (801fcbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fc68:	4293      	cmp	r3, r2
 801fc6a:	d009      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	4a16      	ldr	r2, [pc, #88]	; (801fccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801fc72:	4293      	cmp	r3, r2
 801fc74:	d004      	beq.n	801fc80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	4a11      	ldr	r2, [pc, #68]	; (801fcc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fc7c:	4293      	cmp	r3, r2
 801fc7e:	d10c      	bne.n	801fc9a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801fc80:	68bb      	ldr	r3, [r7, #8]
 801fc82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fc86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801fc88:	683b      	ldr	r3, [r7, #0]
 801fc8a:	689b      	ldr	r3, [r3, #8]
 801fc8c:	68ba      	ldr	r2, [r7, #8]
 801fc8e:	4313      	orrs	r3, r2
 801fc90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	68ba      	ldr	r2, [r7, #8]
 801fc98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	2201      	movs	r2, #1
 801fc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	2200      	movs	r2, #0
 801fca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fcaa:	2300      	movs	r3, #0
}
 801fcac:	4618      	mov	r0, r3
 801fcae:	3714      	adds	r7, #20
 801fcb0:	46bd      	mov	sp, r7
 801fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcb6:	4770      	bx	lr
 801fcb8:	40012c00 	.word	0x40012c00
 801fcbc:	40013400 	.word	0x40013400
 801fcc0:	40015000 	.word	0x40015000
 801fcc4:	40000400 	.word	0x40000400
 801fcc8:	40000800 	.word	0x40000800
 801fccc:	40014000 	.word	0x40014000

0801fcd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801fcd0:	b480      	push	{r7}
 801fcd2:	b085      	sub	sp, #20
 801fcd4:	af00      	add	r7, sp, #0
 801fcd6:	6078      	str	r0, [r7, #4]
 801fcd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801fcda:	2300      	movs	r3, #0
 801fcdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fce4:	2b01      	cmp	r3, #1
 801fce6:	d101      	bne.n	801fcec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801fce8:	2302      	movs	r3, #2
 801fcea:	e096      	b.n	801fe1a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	2201      	movs	r2, #1
 801fcf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801fcf4:	68fb      	ldr	r3, [r7, #12]
 801fcf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801fcfa:	683b      	ldr	r3, [r7, #0]
 801fcfc:	68db      	ldr	r3, [r3, #12]
 801fcfe:	4313      	orrs	r3, r2
 801fd00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801fd08:	683b      	ldr	r3, [r7, #0]
 801fd0a:	689b      	ldr	r3, [r3, #8]
 801fd0c:	4313      	orrs	r3, r2
 801fd0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801fd16:	683b      	ldr	r3, [r7, #0]
 801fd18:	685b      	ldr	r3, [r3, #4]
 801fd1a:	4313      	orrs	r3, r2
 801fd1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801fd1e:	68fb      	ldr	r3, [r7, #12]
 801fd20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	4313      	orrs	r3, r2
 801fd2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801fd2c:	68fb      	ldr	r3, [r7, #12]
 801fd2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fd32:	683b      	ldr	r3, [r7, #0]
 801fd34:	691b      	ldr	r3, [r3, #16]
 801fd36:	4313      	orrs	r3, r2
 801fd38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801fd40:	683b      	ldr	r3, [r7, #0]
 801fd42:	695b      	ldr	r3, [r3, #20]
 801fd44:	4313      	orrs	r3, r2
 801fd46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801fd4e:	683b      	ldr	r3, [r7, #0]
 801fd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd52:	4313      	orrs	r3, r2
 801fd54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801fd5c:	683b      	ldr	r3, [r7, #0]
 801fd5e:	699b      	ldr	r3, [r3, #24]
 801fd60:	041b      	lsls	r3, r3, #16
 801fd62:	4313      	orrs	r3, r2
 801fd64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	4a2f      	ldr	r2, [pc, #188]	; (801fe28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fd6c:	4293      	cmp	r3, r2
 801fd6e:	d009      	beq.n	801fd84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	4a2d      	ldr	r2, [pc, #180]	; (801fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fd76:	4293      	cmp	r3, r2
 801fd78:	d004      	beq.n	801fd84 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	4a2c      	ldr	r2, [pc, #176]	; (801fe30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fd80:	4293      	cmp	r3, r2
 801fd82:	d106      	bne.n	801fd92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801fd8a:	683b      	ldr	r3, [r7, #0]
 801fd8c:	69db      	ldr	r3, [r3, #28]
 801fd8e:	4313      	orrs	r3, r2
 801fd90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	4a24      	ldr	r2, [pc, #144]	; (801fe28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fd98:	4293      	cmp	r3, r2
 801fd9a:	d009      	beq.n	801fdb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	4a22      	ldr	r2, [pc, #136]	; (801fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fda2:	4293      	cmp	r3, r2
 801fda4:	d004      	beq.n	801fdb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	4a21      	ldr	r2, [pc, #132]	; (801fe30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fdac:	4293      	cmp	r3, r2
 801fdae:	d12b      	bne.n	801fe08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801fdb6:	683b      	ldr	r3, [r7, #0]
 801fdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdba:	051b      	lsls	r3, r3, #20
 801fdbc:	4313      	orrs	r3, r2
 801fdbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801fdc0:	68fb      	ldr	r3, [r7, #12]
 801fdc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	6a1b      	ldr	r3, [r3, #32]
 801fdca:	4313      	orrs	r3, r2
 801fdcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801fdce:	68fb      	ldr	r3, [r7, #12]
 801fdd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801fdd4:	683b      	ldr	r3, [r7, #0]
 801fdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdd8:	4313      	orrs	r3, r2
 801fdda:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	4a11      	ldr	r2, [pc, #68]	; (801fe28 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fde2:	4293      	cmp	r3, r2
 801fde4:	d009      	beq.n	801fdfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	4a10      	ldr	r2, [pc, #64]	; (801fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fdec:	4293      	cmp	r3, r2
 801fdee:	d004      	beq.n	801fdfa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	4a0e      	ldr	r2, [pc, #56]	; (801fe30 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fdf6:	4293      	cmp	r3, r2
 801fdf8:	d106      	bne.n	801fe08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801fe00:	683b      	ldr	r3, [r7, #0]
 801fe02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe04:	4313      	orrs	r3, r2
 801fe06:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	68fa      	ldr	r2, [r7, #12]
 801fe0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2200      	movs	r2, #0
 801fe14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fe18:	2300      	movs	r3, #0
}
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	3714      	adds	r7, #20
 801fe1e:	46bd      	mov	sp, r7
 801fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe24:	4770      	bx	lr
 801fe26:	bf00      	nop
 801fe28:	40012c00 	.word	0x40012c00
 801fe2c:	40013400 	.word	0x40013400
 801fe30:	40015000 	.word	0x40015000

0801fe34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801fe34:	b480      	push	{r7}
 801fe36:	b083      	sub	sp, #12
 801fe38:	af00      	add	r7, sp, #0
 801fe3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801fe3c:	bf00      	nop
 801fe3e:	370c      	adds	r7, #12
 801fe40:	46bd      	mov	sp, r7
 801fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe46:	4770      	bx	lr

0801fe48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801fe48:	b480      	push	{r7}
 801fe4a:	b083      	sub	sp, #12
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801fe50:	bf00      	nop
 801fe52:	370c      	adds	r7, #12
 801fe54:	46bd      	mov	sp, r7
 801fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe5a:	4770      	bx	lr

0801fe5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801fe5c:	b480      	push	{r7}
 801fe5e:	b083      	sub	sp, #12
 801fe60:	af00      	add	r7, sp, #0
 801fe62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801fe64:	bf00      	nop
 801fe66:	370c      	adds	r7, #12
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6e:	4770      	bx	lr

0801fe70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801fe70:	b480      	push	{r7}
 801fe72:	b083      	sub	sp, #12
 801fe74:	af00      	add	r7, sp, #0
 801fe76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801fe78:	bf00      	nop
 801fe7a:	370c      	adds	r7, #12
 801fe7c:	46bd      	mov	sp, r7
 801fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe82:	4770      	bx	lr

0801fe84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801fe84:	b480      	push	{r7}
 801fe86:	b083      	sub	sp, #12
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801fe8c:	bf00      	nop
 801fe8e:	370c      	adds	r7, #12
 801fe90:	46bd      	mov	sp, r7
 801fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe96:	4770      	bx	lr

0801fe98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801fe98:	b480      	push	{r7}
 801fe9a:	b083      	sub	sp, #12
 801fe9c:	af00      	add	r7, sp, #0
 801fe9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801fea0:	bf00      	nop
 801fea2:	370c      	adds	r7, #12
 801fea4:	46bd      	mov	sp, r7
 801fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feaa:	4770      	bx	lr

0801feac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801feac:	b480      	push	{r7}
 801feae:	b083      	sub	sp, #12
 801feb0:	af00      	add	r7, sp, #0
 801feb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801feb4:	bf00      	nop
 801feb6:	370c      	adds	r7, #12
 801feb8:	46bd      	mov	sp, r7
 801feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801febe:	4770      	bx	lr

0801fec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801fec0:	b580      	push	{r7, lr}
 801fec2:	b082      	sub	sp, #8
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d101      	bne.n	801fed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801fece:	2301      	movs	r3, #1
 801fed0:	e042      	b.n	801ff58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d106      	bne.n	801feea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	2200      	movs	r2, #0
 801fee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801fee4:	6878      	ldr	r0, [r7, #4]
 801fee6:	f7f9 fae3 	bl	80194b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2224      	movs	r2, #36	; 0x24
 801feee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	681a      	ldr	r2, [r3, #0]
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	f022 0201 	bic.w	r2, r2, #1
 801ff00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801ff02:	6878      	ldr	r0, [r7, #4]
 801ff04:	f000 f8c2 	bl	802008c <UART_SetConfig>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	2b01      	cmp	r3, #1
 801ff0c:	d101      	bne.n	801ff12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801ff0e:	2301      	movs	r3, #1
 801ff10:	e022      	b.n	801ff58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d002      	beq.n	801ff20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801ff1a:	6878      	ldr	r0, [r7, #4]
 801ff1c:	f000 fbb2 	bl	8020684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	681b      	ldr	r3, [r3, #0]
 801ff24:	685a      	ldr	r2, [r3, #4]
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801ff2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	689a      	ldr	r2, [r3, #8]
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ff3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	681b      	ldr	r3, [r3, #0]
 801ff44:	681a      	ldr	r2, [r3, #0]
 801ff46:	687b      	ldr	r3, [r7, #4]
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	f042 0201 	orr.w	r2, r2, #1
 801ff4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ff50:	6878      	ldr	r0, [r7, #4]
 801ff52:	f000 fc39 	bl	80207c8 <UART_CheckIdleState>
 801ff56:	4603      	mov	r3, r0
}
 801ff58:	4618      	mov	r0, r3
 801ff5a:	3708      	adds	r7, #8
 801ff5c:	46bd      	mov	sp, r7
 801ff5e:	bd80      	pop	{r7, pc}

0801ff60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b08a      	sub	sp, #40	; 0x28
 801ff64:	af02      	add	r7, sp, #8
 801ff66:	60f8      	str	r0, [r7, #12]
 801ff68:	60b9      	str	r1, [r7, #8]
 801ff6a:	603b      	str	r3, [r7, #0]
 801ff6c:	4613      	mov	r3, r2
 801ff6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ff70:	68fb      	ldr	r3, [r7, #12]
 801ff72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ff76:	2b20      	cmp	r3, #32
 801ff78:	f040 8083 	bne.w	8020082 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801ff7c:	68bb      	ldr	r3, [r7, #8]
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d002      	beq.n	801ff88 <HAL_UART_Transmit+0x28>
 801ff82:	88fb      	ldrh	r3, [r7, #6]
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d101      	bne.n	801ff8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801ff88:	2301      	movs	r3, #1
 801ff8a:	e07b      	b.n	8020084 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801ff8c:	68fb      	ldr	r3, [r7, #12]
 801ff8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ff92:	2b01      	cmp	r3, #1
 801ff94:	d101      	bne.n	801ff9a <HAL_UART_Transmit+0x3a>
 801ff96:	2302      	movs	r3, #2
 801ff98:	e074      	b.n	8020084 <HAL_UART_Transmit+0x124>
 801ff9a:	68fb      	ldr	r3, [r7, #12]
 801ff9c:	2201      	movs	r2, #1
 801ff9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ffa2:	68fb      	ldr	r3, [r7, #12]
 801ffa4:	2200      	movs	r2, #0
 801ffa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	2221      	movs	r2, #33	; 0x21
 801ffae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ffb2:	f7f9 fb6b 	bl	801968c <HAL_GetTick>
 801ffb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ffb8:	68fb      	ldr	r3, [r7, #12]
 801ffba:	88fa      	ldrh	r2, [r7, #6]
 801ffbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801ffc0:	68fb      	ldr	r3, [r7, #12]
 801ffc2:	88fa      	ldrh	r2, [r7, #6]
 801ffc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ffc8:	68fb      	ldr	r3, [r7, #12]
 801ffca:	689b      	ldr	r3, [r3, #8]
 801ffcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ffd0:	d108      	bne.n	801ffe4 <HAL_UART_Transmit+0x84>
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	691b      	ldr	r3, [r3, #16]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d104      	bne.n	801ffe4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801ffda:	2300      	movs	r3, #0
 801ffdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ffde:	68bb      	ldr	r3, [r7, #8]
 801ffe0:	61bb      	str	r3, [r7, #24]
 801ffe2:	e003      	b.n	801ffec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801ffe4:	68bb      	ldr	r3, [r7, #8]
 801ffe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ffe8:	2300      	movs	r3, #0
 801ffea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	2200      	movs	r2, #0
 801fff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801fff4:	e02c      	b.n	8020050 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801fff6:	683b      	ldr	r3, [r7, #0]
 801fff8:	9300      	str	r3, [sp, #0]
 801fffa:	697b      	ldr	r3, [r7, #20]
 801fffc:	2200      	movs	r2, #0
 801fffe:	2180      	movs	r1, #128	; 0x80
 8020000:	68f8      	ldr	r0, [r7, #12]
 8020002:	f000 fc2c 	bl	802085e <UART_WaitOnFlagUntilTimeout>
 8020006:	4603      	mov	r3, r0
 8020008:	2b00      	cmp	r3, #0
 802000a:	d001      	beq.n	8020010 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 802000c:	2303      	movs	r3, #3
 802000e:	e039      	b.n	8020084 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8020010:	69fb      	ldr	r3, [r7, #28]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d10b      	bne.n	802002e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8020016:	69bb      	ldr	r3, [r7, #24]
 8020018:	881b      	ldrh	r3, [r3, #0]
 802001a:	461a      	mov	r2, r3
 802001c:	68fb      	ldr	r3, [r7, #12]
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020024:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8020026:	69bb      	ldr	r3, [r7, #24]
 8020028:	3302      	adds	r3, #2
 802002a:	61bb      	str	r3, [r7, #24]
 802002c:	e007      	b.n	802003e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802002e:	69fb      	ldr	r3, [r7, #28]
 8020030:	781a      	ldrb	r2, [r3, #0]
 8020032:	68fb      	ldr	r3, [r7, #12]
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8020038:	69fb      	ldr	r3, [r7, #28]
 802003a:	3301      	adds	r3, #1
 802003c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020044:	b29b      	uxth	r3, r3
 8020046:	3b01      	subs	r3, #1
 8020048:	b29a      	uxth	r2, r3
 802004a:	68fb      	ldr	r3, [r7, #12]
 802004c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8020050:	68fb      	ldr	r3, [r7, #12]
 8020052:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020056:	b29b      	uxth	r3, r3
 8020058:	2b00      	cmp	r3, #0
 802005a:	d1cc      	bne.n	801fff6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802005c:	683b      	ldr	r3, [r7, #0]
 802005e:	9300      	str	r3, [sp, #0]
 8020060:	697b      	ldr	r3, [r7, #20]
 8020062:	2200      	movs	r2, #0
 8020064:	2140      	movs	r1, #64	; 0x40
 8020066:	68f8      	ldr	r0, [r7, #12]
 8020068:	f000 fbf9 	bl	802085e <UART_WaitOnFlagUntilTimeout>
 802006c:	4603      	mov	r3, r0
 802006e:	2b00      	cmp	r3, #0
 8020070:	d001      	beq.n	8020076 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8020072:	2303      	movs	r3, #3
 8020074:	e006      	b.n	8020084 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8020076:	68fb      	ldr	r3, [r7, #12]
 8020078:	2220      	movs	r2, #32
 802007a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 802007e:	2300      	movs	r3, #0
 8020080:	e000      	b.n	8020084 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8020082:	2302      	movs	r3, #2
  }
}
 8020084:	4618      	mov	r0, r3
 8020086:	3720      	adds	r7, #32
 8020088:	46bd      	mov	sp, r7
 802008a:	bd80      	pop	{r7, pc}

0802008c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802008c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020090:	b08c      	sub	sp, #48	; 0x30
 8020092:	af00      	add	r7, sp, #0
 8020094:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020096:	2300      	movs	r3, #0
 8020098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802009c:	697b      	ldr	r3, [r7, #20]
 802009e:	689a      	ldr	r2, [r3, #8]
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	691b      	ldr	r3, [r3, #16]
 80200a4:	431a      	orrs	r2, r3
 80200a6:	697b      	ldr	r3, [r7, #20]
 80200a8:	695b      	ldr	r3, [r3, #20]
 80200aa:	431a      	orrs	r2, r3
 80200ac:	697b      	ldr	r3, [r7, #20]
 80200ae:	69db      	ldr	r3, [r3, #28]
 80200b0:	4313      	orrs	r3, r2
 80200b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80200b4:	697b      	ldr	r3, [r7, #20]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	681a      	ldr	r2, [r3, #0]
 80200ba:	4baa      	ldr	r3, [pc, #680]	; (8020364 <UART_SetConfig+0x2d8>)
 80200bc:	4013      	ands	r3, r2
 80200be:	697a      	ldr	r2, [r7, #20]
 80200c0:	6812      	ldr	r2, [r2, #0]
 80200c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80200c4:	430b      	orrs	r3, r1
 80200c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80200c8:	697b      	ldr	r3, [r7, #20]
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	685b      	ldr	r3, [r3, #4]
 80200ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80200d2:	697b      	ldr	r3, [r7, #20]
 80200d4:	68da      	ldr	r2, [r3, #12]
 80200d6:	697b      	ldr	r3, [r7, #20]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	430a      	orrs	r2, r1
 80200dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80200de:	697b      	ldr	r3, [r7, #20]
 80200e0:	699b      	ldr	r3, [r3, #24]
 80200e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80200e4:	697b      	ldr	r3, [r7, #20]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	4a9f      	ldr	r2, [pc, #636]	; (8020368 <UART_SetConfig+0x2dc>)
 80200ea:	4293      	cmp	r3, r2
 80200ec:	d004      	beq.n	80200f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80200ee:	697b      	ldr	r3, [r7, #20]
 80200f0:	6a1b      	ldr	r3, [r3, #32]
 80200f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80200f4:	4313      	orrs	r3, r2
 80200f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	689b      	ldr	r3, [r3, #8]
 80200fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8020102:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8020106:	697a      	ldr	r2, [r7, #20]
 8020108:	6812      	ldr	r2, [r2, #0]
 802010a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802010c:	430b      	orrs	r3, r1
 802010e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8020110:	697b      	ldr	r3, [r7, #20]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020116:	f023 010f 	bic.w	r1, r3, #15
 802011a:	697b      	ldr	r3, [r7, #20]
 802011c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802011e:	697b      	ldr	r3, [r7, #20]
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	430a      	orrs	r2, r1
 8020124:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8020126:	697b      	ldr	r3, [r7, #20]
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	4a90      	ldr	r2, [pc, #576]	; (802036c <UART_SetConfig+0x2e0>)
 802012c:	4293      	cmp	r3, r2
 802012e:	d125      	bne.n	802017c <UART_SetConfig+0xf0>
 8020130:	4b8f      	ldr	r3, [pc, #572]	; (8020370 <UART_SetConfig+0x2e4>)
 8020132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020136:	f003 0303 	and.w	r3, r3, #3
 802013a:	2b03      	cmp	r3, #3
 802013c:	d81a      	bhi.n	8020174 <UART_SetConfig+0xe8>
 802013e:	a201      	add	r2, pc, #4	; (adr r2, 8020144 <UART_SetConfig+0xb8>)
 8020140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020144:	08020155 	.word	0x08020155
 8020148:	08020165 	.word	0x08020165
 802014c:	0802015d 	.word	0x0802015d
 8020150:	0802016d 	.word	0x0802016d
 8020154:	2301      	movs	r3, #1
 8020156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802015a:	e116      	b.n	802038a <UART_SetConfig+0x2fe>
 802015c:	2302      	movs	r3, #2
 802015e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020162:	e112      	b.n	802038a <UART_SetConfig+0x2fe>
 8020164:	2304      	movs	r3, #4
 8020166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802016a:	e10e      	b.n	802038a <UART_SetConfig+0x2fe>
 802016c:	2308      	movs	r3, #8
 802016e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020172:	e10a      	b.n	802038a <UART_SetConfig+0x2fe>
 8020174:	2310      	movs	r3, #16
 8020176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802017a:	e106      	b.n	802038a <UART_SetConfig+0x2fe>
 802017c:	697b      	ldr	r3, [r7, #20]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	4a7c      	ldr	r2, [pc, #496]	; (8020374 <UART_SetConfig+0x2e8>)
 8020182:	4293      	cmp	r3, r2
 8020184:	d138      	bne.n	80201f8 <UART_SetConfig+0x16c>
 8020186:	4b7a      	ldr	r3, [pc, #488]	; (8020370 <UART_SetConfig+0x2e4>)
 8020188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802018c:	f003 030c 	and.w	r3, r3, #12
 8020190:	2b0c      	cmp	r3, #12
 8020192:	d82d      	bhi.n	80201f0 <UART_SetConfig+0x164>
 8020194:	a201      	add	r2, pc, #4	; (adr r2, 802019c <UART_SetConfig+0x110>)
 8020196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802019a:	bf00      	nop
 802019c:	080201d1 	.word	0x080201d1
 80201a0:	080201f1 	.word	0x080201f1
 80201a4:	080201f1 	.word	0x080201f1
 80201a8:	080201f1 	.word	0x080201f1
 80201ac:	080201e1 	.word	0x080201e1
 80201b0:	080201f1 	.word	0x080201f1
 80201b4:	080201f1 	.word	0x080201f1
 80201b8:	080201f1 	.word	0x080201f1
 80201bc:	080201d9 	.word	0x080201d9
 80201c0:	080201f1 	.word	0x080201f1
 80201c4:	080201f1 	.word	0x080201f1
 80201c8:	080201f1 	.word	0x080201f1
 80201cc:	080201e9 	.word	0x080201e9
 80201d0:	2300      	movs	r3, #0
 80201d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201d6:	e0d8      	b.n	802038a <UART_SetConfig+0x2fe>
 80201d8:	2302      	movs	r3, #2
 80201da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201de:	e0d4      	b.n	802038a <UART_SetConfig+0x2fe>
 80201e0:	2304      	movs	r3, #4
 80201e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201e6:	e0d0      	b.n	802038a <UART_SetConfig+0x2fe>
 80201e8:	2308      	movs	r3, #8
 80201ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201ee:	e0cc      	b.n	802038a <UART_SetConfig+0x2fe>
 80201f0:	2310      	movs	r3, #16
 80201f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201f6:	e0c8      	b.n	802038a <UART_SetConfig+0x2fe>
 80201f8:	697b      	ldr	r3, [r7, #20]
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	4a5e      	ldr	r2, [pc, #376]	; (8020378 <UART_SetConfig+0x2ec>)
 80201fe:	4293      	cmp	r3, r2
 8020200:	d125      	bne.n	802024e <UART_SetConfig+0x1c2>
 8020202:	4b5b      	ldr	r3, [pc, #364]	; (8020370 <UART_SetConfig+0x2e4>)
 8020204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020208:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802020c:	2b30      	cmp	r3, #48	; 0x30
 802020e:	d016      	beq.n	802023e <UART_SetConfig+0x1b2>
 8020210:	2b30      	cmp	r3, #48	; 0x30
 8020212:	d818      	bhi.n	8020246 <UART_SetConfig+0x1ba>
 8020214:	2b20      	cmp	r3, #32
 8020216:	d00a      	beq.n	802022e <UART_SetConfig+0x1a2>
 8020218:	2b20      	cmp	r3, #32
 802021a:	d814      	bhi.n	8020246 <UART_SetConfig+0x1ba>
 802021c:	2b00      	cmp	r3, #0
 802021e:	d002      	beq.n	8020226 <UART_SetConfig+0x19a>
 8020220:	2b10      	cmp	r3, #16
 8020222:	d008      	beq.n	8020236 <UART_SetConfig+0x1aa>
 8020224:	e00f      	b.n	8020246 <UART_SetConfig+0x1ba>
 8020226:	2300      	movs	r3, #0
 8020228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802022c:	e0ad      	b.n	802038a <UART_SetConfig+0x2fe>
 802022e:	2302      	movs	r3, #2
 8020230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020234:	e0a9      	b.n	802038a <UART_SetConfig+0x2fe>
 8020236:	2304      	movs	r3, #4
 8020238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802023c:	e0a5      	b.n	802038a <UART_SetConfig+0x2fe>
 802023e:	2308      	movs	r3, #8
 8020240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020244:	e0a1      	b.n	802038a <UART_SetConfig+0x2fe>
 8020246:	2310      	movs	r3, #16
 8020248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802024c:	e09d      	b.n	802038a <UART_SetConfig+0x2fe>
 802024e:	697b      	ldr	r3, [r7, #20]
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	4a4a      	ldr	r2, [pc, #296]	; (802037c <UART_SetConfig+0x2f0>)
 8020254:	4293      	cmp	r3, r2
 8020256:	d125      	bne.n	80202a4 <UART_SetConfig+0x218>
 8020258:	4b45      	ldr	r3, [pc, #276]	; (8020370 <UART_SetConfig+0x2e4>)
 802025a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802025e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8020262:	2bc0      	cmp	r3, #192	; 0xc0
 8020264:	d016      	beq.n	8020294 <UART_SetConfig+0x208>
 8020266:	2bc0      	cmp	r3, #192	; 0xc0
 8020268:	d818      	bhi.n	802029c <UART_SetConfig+0x210>
 802026a:	2b80      	cmp	r3, #128	; 0x80
 802026c:	d00a      	beq.n	8020284 <UART_SetConfig+0x1f8>
 802026e:	2b80      	cmp	r3, #128	; 0x80
 8020270:	d814      	bhi.n	802029c <UART_SetConfig+0x210>
 8020272:	2b00      	cmp	r3, #0
 8020274:	d002      	beq.n	802027c <UART_SetConfig+0x1f0>
 8020276:	2b40      	cmp	r3, #64	; 0x40
 8020278:	d008      	beq.n	802028c <UART_SetConfig+0x200>
 802027a:	e00f      	b.n	802029c <UART_SetConfig+0x210>
 802027c:	2300      	movs	r3, #0
 802027e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020282:	e082      	b.n	802038a <UART_SetConfig+0x2fe>
 8020284:	2302      	movs	r3, #2
 8020286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802028a:	e07e      	b.n	802038a <UART_SetConfig+0x2fe>
 802028c:	2304      	movs	r3, #4
 802028e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020292:	e07a      	b.n	802038a <UART_SetConfig+0x2fe>
 8020294:	2308      	movs	r3, #8
 8020296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802029a:	e076      	b.n	802038a <UART_SetConfig+0x2fe>
 802029c:	2310      	movs	r3, #16
 802029e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202a2:	e072      	b.n	802038a <UART_SetConfig+0x2fe>
 80202a4:	697b      	ldr	r3, [r7, #20]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	4a35      	ldr	r2, [pc, #212]	; (8020380 <UART_SetConfig+0x2f4>)
 80202aa:	4293      	cmp	r3, r2
 80202ac:	d12a      	bne.n	8020304 <UART_SetConfig+0x278>
 80202ae:	4b30      	ldr	r3, [pc, #192]	; (8020370 <UART_SetConfig+0x2e4>)
 80202b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80202b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80202b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80202bc:	d01a      	beq.n	80202f4 <UART_SetConfig+0x268>
 80202be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80202c2:	d81b      	bhi.n	80202fc <UART_SetConfig+0x270>
 80202c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80202c8:	d00c      	beq.n	80202e4 <UART_SetConfig+0x258>
 80202ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80202ce:	d815      	bhi.n	80202fc <UART_SetConfig+0x270>
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d003      	beq.n	80202dc <UART_SetConfig+0x250>
 80202d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80202d8:	d008      	beq.n	80202ec <UART_SetConfig+0x260>
 80202da:	e00f      	b.n	80202fc <UART_SetConfig+0x270>
 80202dc:	2300      	movs	r3, #0
 80202de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202e2:	e052      	b.n	802038a <UART_SetConfig+0x2fe>
 80202e4:	2302      	movs	r3, #2
 80202e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202ea:	e04e      	b.n	802038a <UART_SetConfig+0x2fe>
 80202ec:	2304      	movs	r3, #4
 80202ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202f2:	e04a      	b.n	802038a <UART_SetConfig+0x2fe>
 80202f4:	2308      	movs	r3, #8
 80202f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202fa:	e046      	b.n	802038a <UART_SetConfig+0x2fe>
 80202fc:	2310      	movs	r3, #16
 80202fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020302:	e042      	b.n	802038a <UART_SetConfig+0x2fe>
 8020304:	697b      	ldr	r3, [r7, #20]
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	4a17      	ldr	r2, [pc, #92]	; (8020368 <UART_SetConfig+0x2dc>)
 802030a:	4293      	cmp	r3, r2
 802030c:	d13a      	bne.n	8020384 <UART_SetConfig+0x2f8>
 802030e:	4b18      	ldr	r3, [pc, #96]	; (8020370 <UART_SetConfig+0x2e4>)
 8020310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8020318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802031c:	d01a      	beq.n	8020354 <UART_SetConfig+0x2c8>
 802031e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8020322:	d81b      	bhi.n	802035c <UART_SetConfig+0x2d0>
 8020324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020328:	d00c      	beq.n	8020344 <UART_SetConfig+0x2b8>
 802032a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802032e:	d815      	bhi.n	802035c <UART_SetConfig+0x2d0>
 8020330:	2b00      	cmp	r3, #0
 8020332:	d003      	beq.n	802033c <UART_SetConfig+0x2b0>
 8020334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020338:	d008      	beq.n	802034c <UART_SetConfig+0x2c0>
 802033a:	e00f      	b.n	802035c <UART_SetConfig+0x2d0>
 802033c:	2300      	movs	r3, #0
 802033e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020342:	e022      	b.n	802038a <UART_SetConfig+0x2fe>
 8020344:	2302      	movs	r3, #2
 8020346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802034a:	e01e      	b.n	802038a <UART_SetConfig+0x2fe>
 802034c:	2304      	movs	r3, #4
 802034e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020352:	e01a      	b.n	802038a <UART_SetConfig+0x2fe>
 8020354:	2308      	movs	r3, #8
 8020356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802035a:	e016      	b.n	802038a <UART_SetConfig+0x2fe>
 802035c:	2310      	movs	r3, #16
 802035e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020362:	e012      	b.n	802038a <UART_SetConfig+0x2fe>
 8020364:	cfff69f3 	.word	0xcfff69f3
 8020368:	40008000 	.word	0x40008000
 802036c:	40013800 	.word	0x40013800
 8020370:	40021000 	.word	0x40021000
 8020374:	40004400 	.word	0x40004400
 8020378:	40004800 	.word	0x40004800
 802037c:	40004c00 	.word	0x40004c00
 8020380:	40005000 	.word	0x40005000
 8020384:	2310      	movs	r3, #16
 8020386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802038a:	697b      	ldr	r3, [r7, #20]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	4aae      	ldr	r2, [pc, #696]	; (8020648 <UART_SetConfig+0x5bc>)
 8020390:	4293      	cmp	r3, r2
 8020392:	f040 8097 	bne.w	80204c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802039a:	2b08      	cmp	r3, #8
 802039c:	d823      	bhi.n	80203e6 <UART_SetConfig+0x35a>
 802039e:	a201      	add	r2, pc, #4	; (adr r2, 80203a4 <UART_SetConfig+0x318>)
 80203a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203a4:	080203c9 	.word	0x080203c9
 80203a8:	080203e7 	.word	0x080203e7
 80203ac:	080203d1 	.word	0x080203d1
 80203b0:	080203e7 	.word	0x080203e7
 80203b4:	080203d7 	.word	0x080203d7
 80203b8:	080203e7 	.word	0x080203e7
 80203bc:	080203e7 	.word	0x080203e7
 80203c0:	080203e7 	.word	0x080203e7
 80203c4:	080203df 	.word	0x080203df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80203c8:	f7fd f8b4 	bl	801d534 <HAL_RCC_GetPCLK1Freq>
 80203cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80203ce:	e010      	b.n	80203f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80203d0:	4b9e      	ldr	r3, [pc, #632]	; (802064c <UART_SetConfig+0x5c0>)
 80203d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80203d4:	e00d      	b.n	80203f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80203d6:	f7fd f841 	bl	801d45c <HAL_RCC_GetSysClockFreq>
 80203da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80203dc:	e009      	b.n	80203f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80203de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80203e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80203e4:	e005      	b.n	80203f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80203e6:	2300      	movs	r3, #0
 80203e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80203ea:	2301      	movs	r3, #1
 80203ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80203f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80203f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	f000 8130 	beq.w	802065a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80203fa:	697b      	ldr	r3, [r7, #20]
 80203fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203fe:	4a94      	ldr	r2, [pc, #592]	; (8020650 <UART_SetConfig+0x5c4>)
 8020400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020404:	461a      	mov	r2, r3
 8020406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020408:	fbb3 f3f2 	udiv	r3, r3, r2
 802040c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802040e:	697b      	ldr	r3, [r7, #20]
 8020410:	685a      	ldr	r2, [r3, #4]
 8020412:	4613      	mov	r3, r2
 8020414:	005b      	lsls	r3, r3, #1
 8020416:	4413      	add	r3, r2
 8020418:	69ba      	ldr	r2, [r7, #24]
 802041a:	429a      	cmp	r2, r3
 802041c:	d305      	bcc.n	802042a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802041e:	697b      	ldr	r3, [r7, #20]
 8020420:	685b      	ldr	r3, [r3, #4]
 8020422:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020424:	69ba      	ldr	r2, [r7, #24]
 8020426:	429a      	cmp	r2, r3
 8020428:	d903      	bls.n	8020432 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 802042a:	2301      	movs	r3, #1
 802042c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8020430:	e113      	b.n	802065a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020434:	2200      	movs	r2, #0
 8020436:	60bb      	str	r3, [r7, #8]
 8020438:	60fa      	str	r2, [r7, #12]
 802043a:	697b      	ldr	r3, [r7, #20]
 802043c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802043e:	4a84      	ldr	r2, [pc, #528]	; (8020650 <UART_SetConfig+0x5c4>)
 8020440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020444:	b29b      	uxth	r3, r3
 8020446:	2200      	movs	r2, #0
 8020448:	603b      	str	r3, [r7, #0]
 802044a:	607a      	str	r2, [r7, #4]
 802044c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020454:	f7e0 fc20 	bl	8000c98 <__aeabi_uldivmod>
 8020458:	4602      	mov	r2, r0
 802045a:	460b      	mov	r3, r1
 802045c:	4610      	mov	r0, r2
 802045e:	4619      	mov	r1, r3
 8020460:	f04f 0200 	mov.w	r2, #0
 8020464:	f04f 0300 	mov.w	r3, #0
 8020468:	020b      	lsls	r3, r1, #8
 802046a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802046e:	0202      	lsls	r2, r0, #8
 8020470:	6979      	ldr	r1, [r7, #20]
 8020472:	6849      	ldr	r1, [r1, #4]
 8020474:	0849      	lsrs	r1, r1, #1
 8020476:	2000      	movs	r0, #0
 8020478:	460c      	mov	r4, r1
 802047a:	4605      	mov	r5, r0
 802047c:	eb12 0804 	adds.w	r8, r2, r4
 8020480:	eb43 0905 	adc.w	r9, r3, r5
 8020484:	697b      	ldr	r3, [r7, #20]
 8020486:	685b      	ldr	r3, [r3, #4]
 8020488:	2200      	movs	r2, #0
 802048a:	469a      	mov	sl, r3
 802048c:	4693      	mov	fp, r2
 802048e:	4652      	mov	r2, sl
 8020490:	465b      	mov	r3, fp
 8020492:	4640      	mov	r0, r8
 8020494:	4649      	mov	r1, r9
 8020496:	f7e0 fbff 	bl	8000c98 <__aeabi_uldivmod>
 802049a:	4602      	mov	r2, r0
 802049c:	460b      	mov	r3, r1
 802049e:	4613      	mov	r3, r2
 80204a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80204a2:	6a3b      	ldr	r3, [r7, #32]
 80204a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80204a8:	d308      	bcc.n	80204bc <UART_SetConfig+0x430>
 80204aa:	6a3b      	ldr	r3, [r7, #32]
 80204ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80204b0:	d204      	bcs.n	80204bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	6a3a      	ldr	r2, [r7, #32]
 80204b8:	60da      	str	r2, [r3, #12]
 80204ba:	e0ce      	b.n	802065a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80204bc:	2301      	movs	r3, #1
 80204be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80204c2:	e0ca      	b.n	802065a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80204c4:	697b      	ldr	r3, [r7, #20]
 80204c6:	69db      	ldr	r3, [r3, #28]
 80204c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80204cc:	d166      	bne.n	802059c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80204ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80204d2:	2b08      	cmp	r3, #8
 80204d4:	d827      	bhi.n	8020526 <UART_SetConfig+0x49a>
 80204d6:	a201      	add	r2, pc, #4	; (adr r2, 80204dc <UART_SetConfig+0x450>)
 80204d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204dc:	08020501 	.word	0x08020501
 80204e0:	08020509 	.word	0x08020509
 80204e4:	08020511 	.word	0x08020511
 80204e8:	08020527 	.word	0x08020527
 80204ec:	08020517 	.word	0x08020517
 80204f0:	08020527 	.word	0x08020527
 80204f4:	08020527 	.word	0x08020527
 80204f8:	08020527 	.word	0x08020527
 80204fc:	0802051f 	.word	0x0802051f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020500:	f7fd f818 	bl	801d534 <HAL_RCC_GetPCLK1Freq>
 8020504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8020506:	e014      	b.n	8020532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020508:	f7fd f82a 	bl	801d560 <HAL_RCC_GetPCLK2Freq>
 802050c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802050e:	e010      	b.n	8020532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020510:	4b4e      	ldr	r3, [pc, #312]	; (802064c <UART_SetConfig+0x5c0>)
 8020512:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020514:	e00d      	b.n	8020532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020516:	f7fc ffa1 	bl	801d45c <HAL_RCC_GetSysClockFreq>
 802051a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802051c:	e009      	b.n	8020532 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802051e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8020524:	e005      	b.n	8020532 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8020526:	2300      	movs	r3, #0
 8020528:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802052a:	2301      	movs	r3, #1
 802052c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8020530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020534:	2b00      	cmp	r3, #0
 8020536:	f000 8090 	beq.w	802065a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802053a:	697b      	ldr	r3, [r7, #20]
 802053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802053e:	4a44      	ldr	r2, [pc, #272]	; (8020650 <UART_SetConfig+0x5c4>)
 8020540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020544:	461a      	mov	r2, r3
 8020546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020548:	fbb3 f3f2 	udiv	r3, r3, r2
 802054c:	005a      	lsls	r2, r3, #1
 802054e:	697b      	ldr	r3, [r7, #20]
 8020550:	685b      	ldr	r3, [r3, #4]
 8020552:	085b      	lsrs	r3, r3, #1
 8020554:	441a      	add	r2, r3
 8020556:	697b      	ldr	r3, [r7, #20]
 8020558:	685b      	ldr	r3, [r3, #4]
 802055a:	fbb2 f3f3 	udiv	r3, r2, r3
 802055e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020560:	6a3b      	ldr	r3, [r7, #32]
 8020562:	2b0f      	cmp	r3, #15
 8020564:	d916      	bls.n	8020594 <UART_SetConfig+0x508>
 8020566:	6a3b      	ldr	r3, [r7, #32]
 8020568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802056c:	d212      	bcs.n	8020594 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802056e:	6a3b      	ldr	r3, [r7, #32]
 8020570:	b29b      	uxth	r3, r3
 8020572:	f023 030f 	bic.w	r3, r3, #15
 8020576:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020578:	6a3b      	ldr	r3, [r7, #32]
 802057a:	085b      	lsrs	r3, r3, #1
 802057c:	b29b      	uxth	r3, r3
 802057e:	f003 0307 	and.w	r3, r3, #7
 8020582:	b29a      	uxth	r2, r3
 8020584:	8bfb      	ldrh	r3, [r7, #30]
 8020586:	4313      	orrs	r3, r2
 8020588:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 802058a:	697b      	ldr	r3, [r7, #20]
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	8bfa      	ldrh	r2, [r7, #30]
 8020590:	60da      	str	r2, [r3, #12]
 8020592:	e062      	b.n	802065a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8020594:	2301      	movs	r3, #1
 8020596:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 802059a:	e05e      	b.n	802065a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 802059c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80205a0:	2b08      	cmp	r3, #8
 80205a2:	d828      	bhi.n	80205f6 <UART_SetConfig+0x56a>
 80205a4:	a201      	add	r2, pc, #4	; (adr r2, 80205ac <UART_SetConfig+0x520>)
 80205a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205aa:	bf00      	nop
 80205ac:	080205d1 	.word	0x080205d1
 80205b0:	080205d9 	.word	0x080205d9
 80205b4:	080205e1 	.word	0x080205e1
 80205b8:	080205f7 	.word	0x080205f7
 80205bc:	080205e7 	.word	0x080205e7
 80205c0:	080205f7 	.word	0x080205f7
 80205c4:	080205f7 	.word	0x080205f7
 80205c8:	080205f7 	.word	0x080205f7
 80205cc:	080205ef 	.word	0x080205ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80205d0:	f7fc ffb0 	bl	801d534 <HAL_RCC_GetPCLK1Freq>
 80205d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205d6:	e014      	b.n	8020602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80205d8:	f7fc ffc2 	bl	801d560 <HAL_RCC_GetPCLK2Freq>
 80205dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205de:	e010      	b.n	8020602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80205e0:	4b1a      	ldr	r3, [pc, #104]	; (802064c <UART_SetConfig+0x5c0>)
 80205e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80205e4:	e00d      	b.n	8020602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80205e6:	f7fc ff39 	bl	801d45c <HAL_RCC_GetSysClockFreq>
 80205ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205ec:	e009      	b.n	8020602 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80205ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80205f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80205f4:	e005      	b.n	8020602 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80205f6:	2300      	movs	r3, #0
 80205f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80205fa:	2301      	movs	r3, #1
 80205fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8020600:	bf00      	nop
    }

    if (pclk != 0U)
 8020602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020604:	2b00      	cmp	r3, #0
 8020606:	d028      	beq.n	802065a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020608:	697b      	ldr	r3, [r7, #20]
 802060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802060c:	4a10      	ldr	r2, [pc, #64]	; (8020650 <UART_SetConfig+0x5c4>)
 802060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020612:	461a      	mov	r2, r3
 8020614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020616:	fbb3 f2f2 	udiv	r2, r3, r2
 802061a:	697b      	ldr	r3, [r7, #20]
 802061c:	685b      	ldr	r3, [r3, #4]
 802061e:	085b      	lsrs	r3, r3, #1
 8020620:	441a      	add	r2, r3
 8020622:	697b      	ldr	r3, [r7, #20]
 8020624:	685b      	ldr	r3, [r3, #4]
 8020626:	fbb2 f3f3 	udiv	r3, r2, r3
 802062a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802062c:	6a3b      	ldr	r3, [r7, #32]
 802062e:	2b0f      	cmp	r3, #15
 8020630:	d910      	bls.n	8020654 <UART_SetConfig+0x5c8>
 8020632:	6a3b      	ldr	r3, [r7, #32]
 8020634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020638:	d20c      	bcs.n	8020654 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802063a:	6a3b      	ldr	r3, [r7, #32]
 802063c:	b29a      	uxth	r2, r3
 802063e:	697b      	ldr	r3, [r7, #20]
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	60da      	str	r2, [r3, #12]
 8020644:	e009      	b.n	802065a <UART_SetConfig+0x5ce>
 8020646:	bf00      	nop
 8020648:	40008000 	.word	0x40008000
 802064c:	00f42400 	.word	0x00f42400
 8020650:	080251ec 	.word	0x080251ec
      }
      else
      {
        ret = HAL_ERROR;
 8020654:	2301      	movs	r3, #1
 8020656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802065a:	697b      	ldr	r3, [r7, #20]
 802065c:	2201      	movs	r2, #1
 802065e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8020662:	697b      	ldr	r3, [r7, #20]
 8020664:	2201      	movs	r2, #1
 8020666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802066a:	697b      	ldr	r3, [r7, #20]
 802066c:	2200      	movs	r2, #0
 802066e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8020670:	697b      	ldr	r3, [r7, #20]
 8020672:	2200      	movs	r2, #0
 8020674:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8020676:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 802067a:	4618      	mov	r0, r3
 802067c:	3730      	adds	r7, #48	; 0x30
 802067e:	46bd      	mov	sp, r7
 8020680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08020684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020684:	b480      	push	{r7}
 8020686:	b083      	sub	sp, #12
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020690:	f003 0301 	and.w	r3, r3, #1
 8020694:	2b00      	cmp	r3, #0
 8020696:	d00a      	beq.n	80206ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	685b      	ldr	r3, [r3, #4]
 802069e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	430a      	orrs	r2, r1
 80206ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206b2:	f003 0302 	and.w	r3, r3, #2
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d00a      	beq.n	80206d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	685b      	ldr	r3, [r3, #4]
 80206c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	681b      	ldr	r3, [r3, #0]
 80206cc:	430a      	orrs	r2, r1
 80206ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206d4:	f003 0304 	and.w	r3, r3, #4
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d00a      	beq.n	80206f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	685b      	ldr	r3, [r3, #4]
 80206e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	430a      	orrs	r2, r1
 80206f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206f6:	f003 0308 	and.w	r3, r3, #8
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d00a      	beq.n	8020714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	685b      	ldr	r3, [r3, #4]
 8020704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	430a      	orrs	r2, r1
 8020712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020718:	f003 0310 	and.w	r3, r3, #16
 802071c:	2b00      	cmp	r3, #0
 802071e:	d00a      	beq.n	8020736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	689b      	ldr	r3, [r3, #8]
 8020726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	681b      	ldr	r3, [r3, #0]
 8020732:	430a      	orrs	r2, r1
 8020734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802073a:	f003 0320 	and.w	r3, r3, #32
 802073e:	2b00      	cmp	r3, #0
 8020740:	d00a      	beq.n	8020758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	689b      	ldr	r3, [r3, #8]
 8020748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802074c:	687b      	ldr	r3, [r7, #4]
 802074e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	430a      	orrs	r2, r1
 8020756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802075c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020760:	2b00      	cmp	r3, #0
 8020762:	d01a      	beq.n	802079a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	681b      	ldr	r3, [r3, #0]
 8020768:	685b      	ldr	r3, [r3, #4]
 802076a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	430a      	orrs	r2, r1
 8020778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802077e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020782:	d10a      	bne.n	802079a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	685b      	ldr	r3, [r3, #4]
 802078a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	430a      	orrs	r2, r1
 8020798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d00a      	beq.n	80207bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	685b      	ldr	r3, [r3, #4]
 80207ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	430a      	orrs	r2, r1
 80207ba:	605a      	str	r2, [r3, #4]
  }
}
 80207bc:	bf00      	nop
 80207be:	370c      	adds	r7, #12
 80207c0:	46bd      	mov	sp, r7
 80207c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207c6:	4770      	bx	lr

080207c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80207c8:	b580      	push	{r7, lr}
 80207ca:	b086      	sub	sp, #24
 80207cc:	af02      	add	r7, sp, #8
 80207ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80207d0:	687b      	ldr	r3, [r7, #4]
 80207d2:	2200      	movs	r2, #0
 80207d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80207d8:	f7f8 ff58 	bl	801968c <HAL_GetTick>
 80207dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	681b      	ldr	r3, [r3, #0]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	f003 0308 	and.w	r3, r3, #8
 80207e8:	2b08      	cmp	r3, #8
 80207ea:	d10e      	bne.n	802080a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80207ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80207f0:	9300      	str	r3, [sp, #0]
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	2200      	movs	r2, #0
 80207f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80207fa:	6878      	ldr	r0, [r7, #4]
 80207fc:	f000 f82f 	bl	802085e <UART_WaitOnFlagUntilTimeout>
 8020800:	4603      	mov	r3, r0
 8020802:	2b00      	cmp	r3, #0
 8020804:	d001      	beq.n	802080a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020806:	2303      	movs	r3, #3
 8020808:	e025      	b.n	8020856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	f003 0304 	and.w	r3, r3, #4
 8020814:	2b04      	cmp	r3, #4
 8020816:	d10e      	bne.n	8020836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802081c:	9300      	str	r3, [sp, #0]
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	2200      	movs	r2, #0
 8020822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8020826:	6878      	ldr	r0, [r7, #4]
 8020828:	f000 f819 	bl	802085e <UART_WaitOnFlagUntilTimeout>
 802082c:	4603      	mov	r3, r0
 802082e:	2b00      	cmp	r3, #0
 8020830:	d001      	beq.n	8020836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020832:	2303      	movs	r3, #3
 8020834:	e00f      	b.n	8020856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	2220      	movs	r2, #32
 802083a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	2220      	movs	r2, #32
 8020842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	2200      	movs	r2, #0
 802084a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	2200      	movs	r2, #0
 8020850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020854:	2300      	movs	r3, #0
}
 8020856:	4618      	mov	r0, r3
 8020858:	3710      	adds	r7, #16
 802085a:	46bd      	mov	sp, r7
 802085c:	bd80      	pop	{r7, pc}

0802085e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802085e:	b580      	push	{r7, lr}
 8020860:	b09c      	sub	sp, #112	; 0x70
 8020862:	af00      	add	r7, sp, #0
 8020864:	60f8      	str	r0, [r7, #12]
 8020866:	60b9      	str	r1, [r7, #8]
 8020868:	603b      	str	r3, [r7, #0]
 802086a:	4613      	mov	r3, r2
 802086c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802086e:	e0a9      	b.n	80209c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020876:	f000 80a5 	beq.w	80209c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802087a:	f7f8 ff07 	bl	801968c <HAL_GetTick>
 802087e:	4602      	mov	r2, r0
 8020880:	683b      	ldr	r3, [r7, #0]
 8020882:	1ad3      	subs	r3, r2, r3
 8020884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020886:	429a      	cmp	r2, r3
 8020888:	d302      	bcc.n	8020890 <UART_WaitOnFlagUntilTimeout+0x32>
 802088a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802088c:	2b00      	cmp	r3, #0
 802088e:	d140      	bne.n	8020912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8020890:	68fb      	ldr	r3, [r7, #12]
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020898:	e853 3f00 	ldrex	r3, [r3]
 802089c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802089e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80208a4:	667b      	str	r3, [r7, #100]	; 0x64
 80208a6:	68fb      	ldr	r3, [r7, #12]
 80208a8:	681b      	ldr	r3, [r3, #0]
 80208aa:	461a      	mov	r2, r3
 80208ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80208ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80208b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80208b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80208b6:	e841 2300 	strex	r3, r2, [r1]
 80208ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80208bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d1e6      	bne.n	8020890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80208c2:	68fb      	ldr	r3, [r7, #12]
 80208c4:	681b      	ldr	r3, [r3, #0]
 80208c6:	3308      	adds	r3, #8
 80208c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80208ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80208cc:	e853 3f00 	ldrex	r3, [r3]
 80208d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80208d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80208d4:	f023 0301 	bic.w	r3, r3, #1
 80208d8:	663b      	str	r3, [r7, #96]	; 0x60
 80208da:	68fb      	ldr	r3, [r7, #12]
 80208dc:	681b      	ldr	r3, [r3, #0]
 80208de:	3308      	adds	r3, #8
 80208e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80208e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80208e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80208e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80208ea:	e841 2300 	strex	r3, r2, [r1]
 80208ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80208f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d1e5      	bne.n	80208c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80208f6:	68fb      	ldr	r3, [r7, #12]
 80208f8:	2220      	movs	r2, #32
 80208fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	2220      	movs	r2, #32
 8020902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	2200      	movs	r2, #0
 802090a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 802090e:	2303      	movs	r3, #3
 8020910:	e069      	b.n	80209e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	f003 0304 	and.w	r3, r3, #4
 802091c:	2b00      	cmp	r3, #0
 802091e:	d051      	beq.n	80209c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020920:	68fb      	ldr	r3, [r7, #12]
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	69db      	ldr	r3, [r3, #28]
 8020926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802092a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802092e:	d149      	bne.n	80209c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020930:	68fb      	ldr	r3, [r7, #12]
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	681b      	ldr	r3, [r3, #0]
 802093e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020942:	e853 3f00 	ldrex	r3, [r3]
 8020946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802094a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802094e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	461a      	mov	r2, r3
 8020956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020958:	637b      	str	r3, [r7, #52]	; 0x34
 802095a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802095c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802095e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020960:	e841 2300 	strex	r3, r2, [r1]
 8020964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8020966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020968:	2b00      	cmp	r3, #0
 802096a:	d1e6      	bne.n	802093a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	681b      	ldr	r3, [r3, #0]
 8020970:	3308      	adds	r3, #8
 8020972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020974:	697b      	ldr	r3, [r7, #20]
 8020976:	e853 3f00 	ldrex	r3, [r3]
 802097a:	613b      	str	r3, [r7, #16]
   return(result);
 802097c:	693b      	ldr	r3, [r7, #16]
 802097e:	f023 0301 	bic.w	r3, r3, #1
 8020982:	66bb      	str	r3, [r7, #104]	; 0x68
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	3308      	adds	r3, #8
 802098a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802098c:	623a      	str	r2, [r7, #32]
 802098e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020990:	69f9      	ldr	r1, [r7, #28]
 8020992:	6a3a      	ldr	r2, [r7, #32]
 8020994:	e841 2300 	strex	r3, r2, [r1]
 8020998:	61bb      	str	r3, [r7, #24]
   return(result);
 802099a:	69bb      	ldr	r3, [r7, #24]
 802099c:	2b00      	cmp	r3, #0
 802099e:	d1e5      	bne.n	802096c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	2220      	movs	r2, #32
 80209a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80209a8:	68fb      	ldr	r3, [r7, #12]
 80209aa:	2220      	movs	r2, #32
 80209ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80209b0:	68fb      	ldr	r3, [r7, #12]
 80209b2:	2220      	movs	r2, #32
 80209b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	2200      	movs	r2, #0
 80209bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80209c0:	2303      	movs	r3, #3
 80209c2:	e010      	b.n	80209e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80209c4:	68fb      	ldr	r3, [r7, #12]
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	69da      	ldr	r2, [r3, #28]
 80209ca:	68bb      	ldr	r3, [r7, #8]
 80209cc:	4013      	ands	r3, r2
 80209ce:	68ba      	ldr	r2, [r7, #8]
 80209d0:	429a      	cmp	r2, r3
 80209d2:	bf0c      	ite	eq
 80209d4:	2301      	moveq	r3, #1
 80209d6:	2300      	movne	r3, #0
 80209d8:	b2db      	uxtb	r3, r3
 80209da:	461a      	mov	r2, r3
 80209dc:	79fb      	ldrb	r3, [r7, #7]
 80209de:	429a      	cmp	r2, r3
 80209e0:	f43f af46 	beq.w	8020870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80209e4:	2300      	movs	r3, #0
}
 80209e6:	4618      	mov	r0, r3
 80209e8:	3770      	adds	r7, #112	; 0x70
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}

080209ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80209ee:	b480      	push	{r7}
 80209f0:	b085      	sub	sp, #20
 80209f2:	af00      	add	r7, sp, #0
 80209f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80209fc:	2b01      	cmp	r3, #1
 80209fe:	d101      	bne.n	8020a04 <HAL_UARTEx_DisableFifoMode+0x16>
 8020a00:	2302      	movs	r3, #2
 8020a02:	e027      	b.n	8020a54 <HAL_UARTEx_DisableFifoMode+0x66>
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	2201      	movs	r2, #1
 8020a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	2224      	movs	r2, #36	; 0x24
 8020a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	681a      	ldr	r2, [r3, #0]
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	681b      	ldr	r3, [r3, #0]
 8020a26:	f022 0201 	bic.w	r2, r2, #1
 8020a2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8020a32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	2200      	movs	r2, #0
 8020a38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	68fa      	ldr	r2, [r7, #12]
 8020a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	2220      	movs	r2, #32
 8020a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020a52:	2300      	movs	r3, #0
}
 8020a54:	4618      	mov	r0, r3
 8020a56:	3714      	adds	r7, #20
 8020a58:	46bd      	mov	sp, r7
 8020a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a5e:	4770      	bx	lr

08020a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b084      	sub	sp, #16
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
 8020a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020a70:	2b01      	cmp	r3, #1
 8020a72:	d101      	bne.n	8020a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020a74:	2302      	movs	r3, #2
 8020a76:	e02d      	b.n	8020ad4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020a78:	687b      	ldr	r3, [r7, #4]
 8020a7a:	2201      	movs	r2, #1
 8020a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	2224      	movs	r2, #36	; 0x24
 8020a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	681a      	ldr	r2, [r3, #0]
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	f022 0201 	bic.w	r2, r2, #1
 8020a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	681b      	ldr	r3, [r3, #0]
 8020aa4:	689b      	ldr	r3, [r3, #8]
 8020aa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	683a      	ldr	r2, [r7, #0]
 8020ab0:	430a      	orrs	r2, r1
 8020ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020ab4:	6878      	ldr	r0, [r7, #4]
 8020ab6:	f000 f84f 	bl	8020b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	681b      	ldr	r3, [r3, #0]
 8020abe:	68fa      	ldr	r2, [r7, #12]
 8020ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	2220      	movs	r2, #32
 8020ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	2200      	movs	r2, #0
 8020ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020ad2:	2300      	movs	r3, #0
}
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	3710      	adds	r7, #16
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bd80      	pop	{r7, pc}

08020adc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b084      	sub	sp, #16
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
 8020ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020aec:	2b01      	cmp	r3, #1
 8020aee:	d101      	bne.n	8020af4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020af0:	2302      	movs	r3, #2
 8020af2:	e02d      	b.n	8020b50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	2201      	movs	r2, #1
 8020af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	2224      	movs	r2, #36	; 0x24
 8020b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	681b      	ldr	r3, [r3, #0]
 8020b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	681a      	ldr	r2, [r3, #0]
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	f022 0201 	bic.w	r2, r2, #1
 8020b1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	689b      	ldr	r3, [r3, #8]
 8020b22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	683a      	ldr	r2, [r7, #0]
 8020b2c:	430a      	orrs	r2, r1
 8020b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020b30:	6878      	ldr	r0, [r7, #4]
 8020b32:	f000 f811 	bl	8020b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	68fa      	ldr	r2, [r7, #12]
 8020b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	2220      	movs	r2, #32
 8020b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020b46:	687b      	ldr	r3, [r7, #4]
 8020b48:	2200      	movs	r2, #0
 8020b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020b4e:	2300      	movs	r3, #0
}
 8020b50:	4618      	mov	r0, r3
 8020b52:	3710      	adds	r7, #16
 8020b54:	46bd      	mov	sp, r7
 8020b56:	bd80      	pop	{r7, pc}

08020b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020b58:	b480      	push	{r7}
 8020b5a:	b085      	sub	sp, #20
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d108      	bne.n	8020b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	2201      	movs	r2, #1
 8020b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	2201      	movs	r2, #1
 8020b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020b78:	e031      	b.n	8020bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020b7a:	2308      	movs	r3, #8
 8020b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020b7e:	2308      	movs	r3, #8
 8020b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	689b      	ldr	r3, [r3, #8]
 8020b88:	0e5b      	lsrs	r3, r3, #25
 8020b8a:	b2db      	uxtb	r3, r3
 8020b8c:	f003 0307 	and.w	r3, r3, #7
 8020b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	689b      	ldr	r3, [r3, #8]
 8020b98:	0f5b      	lsrs	r3, r3, #29
 8020b9a:	b2db      	uxtb	r3, r3
 8020b9c:	f003 0307 	and.w	r3, r3, #7
 8020ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020ba2:	7bbb      	ldrb	r3, [r7, #14]
 8020ba4:	7b3a      	ldrb	r2, [r7, #12]
 8020ba6:	4911      	ldr	r1, [pc, #68]	; (8020bec <UARTEx_SetNbDataToProcess+0x94>)
 8020ba8:	5c8a      	ldrb	r2, [r1, r2]
 8020baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020bae:	7b3a      	ldrb	r2, [r7, #12]
 8020bb0:	490f      	ldr	r1, [pc, #60]	; (8020bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8020bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8020bb8:	b29a      	uxth	r2, r3
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020bc0:	7bfb      	ldrb	r3, [r7, #15]
 8020bc2:	7b7a      	ldrb	r2, [r7, #13]
 8020bc4:	4909      	ldr	r1, [pc, #36]	; (8020bec <UARTEx_SetNbDataToProcess+0x94>)
 8020bc6:	5c8a      	ldrb	r2, [r1, r2]
 8020bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020bcc:	7b7a      	ldrb	r2, [r7, #13]
 8020bce:	4908      	ldr	r1, [pc, #32]	; (8020bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8020bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8020bd6:	b29a      	uxth	r2, r3
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020bde:	bf00      	nop
 8020be0:	3714      	adds	r7, #20
 8020be2:	46bd      	mov	sp, r7
 8020be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020be8:	4770      	bx	lr
 8020bea:	bf00      	nop
 8020bec:	08025204 	.word	0x08025204
 8020bf0:	0802520c 	.word	0x0802520c

08020bf4 <__errno>:
 8020bf4:	4b01      	ldr	r3, [pc, #4]	; (8020bfc <__errno+0x8>)
 8020bf6:	6818      	ldr	r0, [r3, #0]
 8020bf8:	4770      	bx	lr
 8020bfa:	bf00      	nop
 8020bfc:	2000002c 	.word	0x2000002c

08020c00 <__libc_init_array>:
 8020c00:	b570      	push	{r4, r5, r6, lr}
 8020c02:	4d0d      	ldr	r5, [pc, #52]	; (8020c38 <__libc_init_array+0x38>)
 8020c04:	4c0d      	ldr	r4, [pc, #52]	; (8020c3c <__libc_init_array+0x3c>)
 8020c06:	1b64      	subs	r4, r4, r5
 8020c08:	10a4      	asrs	r4, r4, #2
 8020c0a:	2600      	movs	r6, #0
 8020c0c:	42a6      	cmp	r6, r4
 8020c0e:	d109      	bne.n	8020c24 <__libc_init_array+0x24>
 8020c10:	4d0b      	ldr	r5, [pc, #44]	; (8020c40 <__libc_init_array+0x40>)
 8020c12:	4c0c      	ldr	r4, [pc, #48]	; (8020c44 <__libc_init_array+0x44>)
 8020c14:	f004 f94a 	bl	8024eac <_init>
 8020c18:	1b64      	subs	r4, r4, r5
 8020c1a:	10a4      	asrs	r4, r4, #2
 8020c1c:	2600      	movs	r6, #0
 8020c1e:	42a6      	cmp	r6, r4
 8020c20:	d105      	bne.n	8020c2e <__libc_init_array+0x2e>
 8020c22:	bd70      	pop	{r4, r5, r6, pc}
 8020c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c28:	4798      	blx	r3
 8020c2a:	3601      	adds	r6, #1
 8020c2c:	e7ee      	b.n	8020c0c <__libc_init_array+0xc>
 8020c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c32:	4798      	blx	r3
 8020c34:	3601      	adds	r6, #1
 8020c36:	e7f2      	b.n	8020c1e <__libc_init_array+0x1e>
 8020c38:	08025800 	.word	0x08025800
 8020c3c:	08025800 	.word	0x08025800
 8020c40:	08025800 	.word	0x08025800
 8020c44:	08025804 	.word	0x08025804

08020c48 <memcpy>:
 8020c48:	440a      	add	r2, r1
 8020c4a:	4291      	cmp	r1, r2
 8020c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c50:	d100      	bne.n	8020c54 <memcpy+0xc>
 8020c52:	4770      	bx	lr
 8020c54:	b510      	push	{r4, lr}
 8020c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020c5e:	4291      	cmp	r1, r2
 8020c60:	d1f9      	bne.n	8020c56 <memcpy+0xe>
 8020c62:	bd10      	pop	{r4, pc}

08020c64 <memset>:
 8020c64:	4402      	add	r2, r0
 8020c66:	4603      	mov	r3, r0
 8020c68:	4293      	cmp	r3, r2
 8020c6a:	d100      	bne.n	8020c6e <memset+0xa>
 8020c6c:	4770      	bx	lr
 8020c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8020c72:	e7f9      	b.n	8020c68 <memset+0x4>

08020c74 <__cvt>:
 8020c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c78:	ec55 4b10 	vmov	r4, r5, d0
 8020c7c:	2d00      	cmp	r5, #0
 8020c7e:	460e      	mov	r6, r1
 8020c80:	4619      	mov	r1, r3
 8020c82:	462b      	mov	r3, r5
 8020c84:	bfbb      	ittet	lt
 8020c86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8020c8a:	461d      	movlt	r5, r3
 8020c8c:	2300      	movge	r3, #0
 8020c8e:	232d      	movlt	r3, #45	; 0x2d
 8020c90:	700b      	strb	r3, [r1, #0]
 8020c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8020c98:	4691      	mov	r9, r2
 8020c9a:	f023 0820 	bic.w	r8, r3, #32
 8020c9e:	bfbc      	itt	lt
 8020ca0:	4622      	movlt	r2, r4
 8020ca2:	4614      	movlt	r4, r2
 8020ca4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020ca8:	d005      	beq.n	8020cb6 <__cvt+0x42>
 8020caa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8020cae:	d100      	bne.n	8020cb2 <__cvt+0x3e>
 8020cb0:	3601      	adds	r6, #1
 8020cb2:	2102      	movs	r1, #2
 8020cb4:	e000      	b.n	8020cb8 <__cvt+0x44>
 8020cb6:	2103      	movs	r1, #3
 8020cb8:	ab03      	add	r3, sp, #12
 8020cba:	9301      	str	r3, [sp, #4]
 8020cbc:	ab02      	add	r3, sp, #8
 8020cbe:	9300      	str	r3, [sp, #0]
 8020cc0:	ec45 4b10 	vmov	d0, r4, r5
 8020cc4:	4653      	mov	r3, sl
 8020cc6:	4632      	mov	r2, r6
 8020cc8:	f000 fe2e 	bl	8021928 <_dtoa_r>
 8020ccc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020cd0:	4607      	mov	r7, r0
 8020cd2:	d102      	bne.n	8020cda <__cvt+0x66>
 8020cd4:	f019 0f01 	tst.w	r9, #1
 8020cd8:	d022      	beq.n	8020d20 <__cvt+0xac>
 8020cda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020cde:	eb07 0906 	add.w	r9, r7, r6
 8020ce2:	d110      	bne.n	8020d06 <__cvt+0x92>
 8020ce4:	783b      	ldrb	r3, [r7, #0]
 8020ce6:	2b30      	cmp	r3, #48	; 0x30
 8020ce8:	d10a      	bne.n	8020d00 <__cvt+0x8c>
 8020cea:	2200      	movs	r2, #0
 8020cec:	2300      	movs	r3, #0
 8020cee:	4620      	mov	r0, r4
 8020cf0:	4629      	mov	r1, r5
 8020cf2:	f7df ff11 	bl	8000b18 <__aeabi_dcmpeq>
 8020cf6:	b918      	cbnz	r0, 8020d00 <__cvt+0x8c>
 8020cf8:	f1c6 0601 	rsb	r6, r6, #1
 8020cfc:	f8ca 6000 	str.w	r6, [sl]
 8020d00:	f8da 3000 	ldr.w	r3, [sl]
 8020d04:	4499      	add	r9, r3
 8020d06:	2200      	movs	r2, #0
 8020d08:	2300      	movs	r3, #0
 8020d0a:	4620      	mov	r0, r4
 8020d0c:	4629      	mov	r1, r5
 8020d0e:	f7df ff03 	bl	8000b18 <__aeabi_dcmpeq>
 8020d12:	b108      	cbz	r0, 8020d18 <__cvt+0xa4>
 8020d14:	f8cd 900c 	str.w	r9, [sp, #12]
 8020d18:	2230      	movs	r2, #48	; 0x30
 8020d1a:	9b03      	ldr	r3, [sp, #12]
 8020d1c:	454b      	cmp	r3, r9
 8020d1e:	d307      	bcc.n	8020d30 <__cvt+0xbc>
 8020d20:	9b03      	ldr	r3, [sp, #12]
 8020d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d24:	1bdb      	subs	r3, r3, r7
 8020d26:	4638      	mov	r0, r7
 8020d28:	6013      	str	r3, [r2, #0]
 8020d2a:	b004      	add	sp, #16
 8020d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d30:	1c59      	adds	r1, r3, #1
 8020d32:	9103      	str	r1, [sp, #12]
 8020d34:	701a      	strb	r2, [r3, #0]
 8020d36:	e7f0      	b.n	8020d1a <__cvt+0xa6>

08020d38 <__exponent>:
 8020d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d3a:	4603      	mov	r3, r0
 8020d3c:	2900      	cmp	r1, #0
 8020d3e:	bfb8      	it	lt
 8020d40:	4249      	neglt	r1, r1
 8020d42:	f803 2b02 	strb.w	r2, [r3], #2
 8020d46:	bfb4      	ite	lt
 8020d48:	222d      	movlt	r2, #45	; 0x2d
 8020d4a:	222b      	movge	r2, #43	; 0x2b
 8020d4c:	2909      	cmp	r1, #9
 8020d4e:	7042      	strb	r2, [r0, #1]
 8020d50:	dd2a      	ble.n	8020da8 <__exponent+0x70>
 8020d52:	f10d 0407 	add.w	r4, sp, #7
 8020d56:	46a4      	mov	ip, r4
 8020d58:	270a      	movs	r7, #10
 8020d5a:	46a6      	mov	lr, r4
 8020d5c:	460a      	mov	r2, r1
 8020d5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8020d62:	fb07 1516 	mls	r5, r7, r6, r1
 8020d66:	3530      	adds	r5, #48	; 0x30
 8020d68:	2a63      	cmp	r2, #99	; 0x63
 8020d6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8020d6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020d72:	4631      	mov	r1, r6
 8020d74:	dcf1      	bgt.n	8020d5a <__exponent+0x22>
 8020d76:	3130      	adds	r1, #48	; 0x30
 8020d78:	f1ae 0502 	sub.w	r5, lr, #2
 8020d7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020d80:	1c44      	adds	r4, r0, #1
 8020d82:	4629      	mov	r1, r5
 8020d84:	4561      	cmp	r1, ip
 8020d86:	d30a      	bcc.n	8020d9e <__exponent+0x66>
 8020d88:	f10d 0209 	add.w	r2, sp, #9
 8020d8c:	eba2 020e 	sub.w	r2, r2, lr
 8020d90:	4565      	cmp	r5, ip
 8020d92:	bf88      	it	hi
 8020d94:	2200      	movhi	r2, #0
 8020d96:	4413      	add	r3, r2
 8020d98:	1a18      	subs	r0, r3, r0
 8020d9a:	b003      	add	sp, #12
 8020d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020da2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020da6:	e7ed      	b.n	8020d84 <__exponent+0x4c>
 8020da8:	2330      	movs	r3, #48	; 0x30
 8020daa:	3130      	adds	r1, #48	; 0x30
 8020dac:	7083      	strb	r3, [r0, #2]
 8020dae:	70c1      	strb	r1, [r0, #3]
 8020db0:	1d03      	adds	r3, r0, #4
 8020db2:	e7f1      	b.n	8020d98 <__exponent+0x60>

08020db4 <_printf_float>:
 8020db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020db8:	ed2d 8b02 	vpush	{d8}
 8020dbc:	b08d      	sub	sp, #52	; 0x34
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020dc4:	4616      	mov	r6, r2
 8020dc6:	461f      	mov	r7, r3
 8020dc8:	4605      	mov	r5, r0
 8020dca:	f001 fd53 	bl	8022874 <_localeconv_r>
 8020dce:	f8d0 a000 	ldr.w	sl, [r0]
 8020dd2:	4650      	mov	r0, sl
 8020dd4:	f7df fa24 	bl	8000220 <strlen>
 8020dd8:	2300      	movs	r3, #0
 8020dda:	930a      	str	r3, [sp, #40]	; 0x28
 8020ddc:	6823      	ldr	r3, [r4, #0]
 8020dde:	9305      	str	r3, [sp, #20]
 8020de0:	f8d8 3000 	ldr.w	r3, [r8]
 8020de4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020de8:	3307      	adds	r3, #7
 8020dea:	f023 0307 	bic.w	r3, r3, #7
 8020dee:	f103 0208 	add.w	r2, r3, #8
 8020df2:	f8c8 2000 	str.w	r2, [r8]
 8020df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020dfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8020e02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020e06:	9307      	str	r3, [sp, #28]
 8020e08:	f8cd 8018 	str.w	r8, [sp, #24]
 8020e0c:	ee08 0a10 	vmov	s16, r0
 8020e10:	4b9f      	ldr	r3, [pc, #636]	; (8021090 <_printf_float+0x2dc>)
 8020e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020e16:	f04f 32ff 	mov.w	r2, #4294967295
 8020e1a:	f7df feaf 	bl	8000b7c <__aeabi_dcmpun>
 8020e1e:	bb88      	cbnz	r0, 8020e84 <_printf_float+0xd0>
 8020e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020e24:	4b9a      	ldr	r3, [pc, #616]	; (8021090 <_printf_float+0x2dc>)
 8020e26:	f04f 32ff 	mov.w	r2, #4294967295
 8020e2a:	f7df fe89 	bl	8000b40 <__aeabi_dcmple>
 8020e2e:	bb48      	cbnz	r0, 8020e84 <_printf_float+0xd0>
 8020e30:	2200      	movs	r2, #0
 8020e32:	2300      	movs	r3, #0
 8020e34:	4640      	mov	r0, r8
 8020e36:	4649      	mov	r1, r9
 8020e38:	f7df fe78 	bl	8000b2c <__aeabi_dcmplt>
 8020e3c:	b110      	cbz	r0, 8020e44 <_printf_float+0x90>
 8020e3e:	232d      	movs	r3, #45	; 0x2d
 8020e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e44:	4b93      	ldr	r3, [pc, #588]	; (8021094 <_printf_float+0x2e0>)
 8020e46:	4894      	ldr	r0, [pc, #592]	; (8021098 <_printf_float+0x2e4>)
 8020e48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020e4c:	bf94      	ite	ls
 8020e4e:	4698      	movls	r8, r3
 8020e50:	4680      	movhi	r8, r0
 8020e52:	2303      	movs	r3, #3
 8020e54:	6123      	str	r3, [r4, #16]
 8020e56:	9b05      	ldr	r3, [sp, #20]
 8020e58:	f023 0204 	bic.w	r2, r3, #4
 8020e5c:	6022      	str	r2, [r4, #0]
 8020e5e:	f04f 0900 	mov.w	r9, #0
 8020e62:	9700      	str	r7, [sp, #0]
 8020e64:	4633      	mov	r3, r6
 8020e66:	aa0b      	add	r2, sp, #44	; 0x2c
 8020e68:	4621      	mov	r1, r4
 8020e6a:	4628      	mov	r0, r5
 8020e6c:	f000 f9d8 	bl	8021220 <_printf_common>
 8020e70:	3001      	adds	r0, #1
 8020e72:	f040 8090 	bne.w	8020f96 <_printf_float+0x1e2>
 8020e76:	f04f 30ff 	mov.w	r0, #4294967295
 8020e7a:	b00d      	add	sp, #52	; 0x34
 8020e7c:	ecbd 8b02 	vpop	{d8}
 8020e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e84:	4642      	mov	r2, r8
 8020e86:	464b      	mov	r3, r9
 8020e88:	4640      	mov	r0, r8
 8020e8a:	4649      	mov	r1, r9
 8020e8c:	f7df fe76 	bl	8000b7c <__aeabi_dcmpun>
 8020e90:	b140      	cbz	r0, 8020ea4 <_printf_float+0xf0>
 8020e92:	464b      	mov	r3, r9
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	bfbc      	itt	lt
 8020e98:	232d      	movlt	r3, #45	; 0x2d
 8020e9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020e9e:	487f      	ldr	r0, [pc, #508]	; (802109c <_printf_float+0x2e8>)
 8020ea0:	4b7f      	ldr	r3, [pc, #508]	; (80210a0 <_printf_float+0x2ec>)
 8020ea2:	e7d1      	b.n	8020e48 <_printf_float+0x94>
 8020ea4:	6863      	ldr	r3, [r4, #4]
 8020ea6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8020eaa:	9206      	str	r2, [sp, #24]
 8020eac:	1c5a      	adds	r2, r3, #1
 8020eae:	d13f      	bne.n	8020f30 <_printf_float+0x17c>
 8020eb0:	2306      	movs	r3, #6
 8020eb2:	6063      	str	r3, [r4, #4]
 8020eb4:	9b05      	ldr	r3, [sp, #20]
 8020eb6:	6861      	ldr	r1, [r4, #4]
 8020eb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020ebc:	2300      	movs	r3, #0
 8020ebe:	9303      	str	r3, [sp, #12]
 8020ec0:	ab0a      	add	r3, sp, #40	; 0x28
 8020ec2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8020ec6:	ab09      	add	r3, sp, #36	; 0x24
 8020ec8:	ec49 8b10 	vmov	d0, r8, r9
 8020ecc:	9300      	str	r3, [sp, #0]
 8020ece:	6022      	str	r2, [r4, #0]
 8020ed0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020ed4:	4628      	mov	r0, r5
 8020ed6:	f7ff fecd 	bl	8020c74 <__cvt>
 8020eda:	9b06      	ldr	r3, [sp, #24]
 8020edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ede:	2b47      	cmp	r3, #71	; 0x47
 8020ee0:	4680      	mov	r8, r0
 8020ee2:	d108      	bne.n	8020ef6 <_printf_float+0x142>
 8020ee4:	1cc8      	adds	r0, r1, #3
 8020ee6:	db02      	blt.n	8020eee <_printf_float+0x13a>
 8020ee8:	6863      	ldr	r3, [r4, #4]
 8020eea:	4299      	cmp	r1, r3
 8020eec:	dd41      	ble.n	8020f72 <_printf_float+0x1be>
 8020eee:	f1ab 0b02 	sub.w	fp, fp, #2
 8020ef2:	fa5f fb8b 	uxtb.w	fp, fp
 8020ef6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020efa:	d820      	bhi.n	8020f3e <_printf_float+0x18a>
 8020efc:	3901      	subs	r1, #1
 8020efe:	465a      	mov	r2, fp
 8020f00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020f04:	9109      	str	r1, [sp, #36]	; 0x24
 8020f06:	f7ff ff17 	bl	8020d38 <__exponent>
 8020f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f0c:	1813      	adds	r3, r2, r0
 8020f0e:	2a01      	cmp	r2, #1
 8020f10:	4681      	mov	r9, r0
 8020f12:	6123      	str	r3, [r4, #16]
 8020f14:	dc02      	bgt.n	8020f1c <_printf_float+0x168>
 8020f16:	6822      	ldr	r2, [r4, #0]
 8020f18:	07d2      	lsls	r2, r2, #31
 8020f1a:	d501      	bpl.n	8020f20 <_printf_float+0x16c>
 8020f1c:	3301      	adds	r3, #1
 8020f1e:	6123      	str	r3, [r4, #16]
 8020f20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d09c      	beq.n	8020e62 <_printf_float+0xae>
 8020f28:	232d      	movs	r3, #45	; 0x2d
 8020f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020f2e:	e798      	b.n	8020e62 <_printf_float+0xae>
 8020f30:	9a06      	ldr	r2, [sp, #24]
 8020f32:	2a47      	cmp	r2, #71	; 0x47
 8020f34:	d1be      	bne.n	8020eb4 <_printf_float+0x100>
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d1bc      	bne.n	8020eb4 <_printf_float+0x100>
 8020f3a:	2301      	movs	r3, #1
 8020f3c:	e7b9      	b.n	8020eb2 <_printf_float+0xfe>
 8020f3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8020f42:	d118      	bne.n	8020f76 <_printf_float+0x1c2>
 8020f44:	2900      	cmp	r1, #0
 8020f46:	6863      	ldr	r3, [r4, #4]
 8020f48:	dd0b      	ble.n	8020f62 <_printf_float+0x1ae>
 8020f4a:	6121      	str	r1, [r4, #16]
 8020f4c:	b913      	cbnz	r3, 8020f54 <_printf_float+0x1a0>
 8020f4e:	6822      	ldr	r2, [r4, #0]
 8020f50:	07d0      	lsls	r0, r2, #31
 8020f52:	d502      	bpl.n	8020f5a <_printf_float+0x1a6>
 8020f54:	3301      	adds	r3, #1
 8020f56:	440b      	add	r3, r1
 8020f58:	6123      	str	r3, [r4, #16]
 8020f5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8020f5c:	f04f 0900 	mov.w	r9, #0
 8020f60:	e7de      	b.n	8020f20 <_printf_float+0x16c>
 8020f62:	b913      	cbnz	r3, 8020f6a <_printf_float+0x1b6>
 8020f64:	6822      	ldr	r2, [r4, #0]
 8020f66:	07d2      	lsls	r2, r2, #31
 8020f68:	d501      	bpl.n	8020f6e <_printf_float+0x1ba>
 8020f6a:	3302      	adds	r3, #2
 8020f6c:	e7f4      	b.n	8020f58 <_printf_float+0x1a4>
 8020f6e:	2301      	movs	r3, #1
 8020f70:	e7f2      	b.n	8020f58 <_printf_float+0x1a4>
 8020f72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8020f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f78:	4299      	cmp	r1, r3
 8020f7a:	db05      	blt.n	8020f88 <_printf_float+0x1d4>
 8020f7c:	6823      	ldr	r3, [r4, #0]
 8020f7e:	6121      	str	r1, [r4, #16]
 8020f80:	07d8      	lsls	r0, r3, #31
 8020f82:	d5ea      	bpl.n	8020f5a <_printf_float+0x1a6>
 8020f84:	1c4b      	adds	r3, r1, #1
 8020f86:	e7e7      	b.n	8020f58 <_printf_float+0x1a4>
 8020f88:	2900      	cmp	r1, #0
 8020f8a:	bfd4      	ite	le
 8020f8c:	f1c1 0202 	rsble	r2, r1, #2
 8020f90:	2201      	movgt	r2, #1
 8020f92:	4413      	add	r3, r2
 8020f94:	e7e0      	b.n	8020f58 <_printf_float+0x1a4>
 8020f96:	6823      	ldr	r3, [r4, #0]
 8020f98:	055a      	lsls	r2, r3, #21
 8020f9a:	d407      	bmi.n	8020fac <_printf_float+0x1f8>
 8020f9c:	6923      	ldr	r3, [r4, #16]
 8020f9e:	4642      	mov	r2, r8
 8020fa0:	4631      	mov	r1, r6
 8020fa2:	4628      	mov	r0, r5
 8020fa4:	47b8      	blx	r7
 8020fa6:	3001      	adds	r0, #1
 8020fa8:	d12c      	bne.n	8021004 <_printf_float+0x250>
 8020faa:	e764      	b.n	8020e76 <_printf_float+0xc2>
 8020fac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020fb0:	f240 80e0 	bls.w	8021174 <_printf_float+0x3c0>
 8020fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020fb8:	2200      	movs	r2, #0
 8020fba:	2300      	movs	r3, #0
 8020fbc:	f7df fdac 	bl	8000b18 <__aeabi_dcmpeq>
 8020fc0:	2800      	cmp	r0, #0
 8020fc2:	d034      	beq.n	802102e <_printf_float+0x27a>
 8020fc4:	4a37      	ldr	r2, [pc, #220]	; (80210a4 <_printf_float+0x2f0>)
 8020fc6:	2301      	movs	r3, #1
 8020fc8:	4631      	mov	r1, r6
 8020fca:	4628      	mov	r0, r5
 8020fcc:	47b8      	blx	r7
 8020fce:	3001      	adds	r0, #1
 8020fd0:	f43f af51 	beq.w	8020e76 <_printf_float+0xc2>
 8020fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020fd8:	429a      	cmp	r2, r3
 8020fda:	db02      	blt.n	8020fe2 <_printf_float+0x22e>
 8020fdc:	6823      	ldr	r3, [r4, #0]
 8020fde:	07d8      	lsls	r0, r3, #31
 8020fe0:	d510      	bpl.n	8021004 <_printf_float+0x250>
 8020fe2:	ee18 3a10 	vmov	r3, s16
 8020fe6:	4652      	mov	r2, sl
 8020fe8:	4631      	mov	r1, r6
 8020fea:	4628      	mov	r0, r5
 8020fec:	47b8      	blx	r7
 8020fee:	3001      	adds	r0, #1
 8020ff0:	f43f af41 	beq.w	8020e76 <_printf_float+0xc2>
 8020ff4:	f04f 0800 	mov.w	r8, #0
 8020ff8:	f104 091a 	add.w	r9, r4, #26
 8020ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ffe:	3b01      	subs	r3, #1
 8021000:	4543      	cmp	r3, r8
 8021002:	dc09      	bgt.n	8021018 <_printf_float+0x264>
 8021004:	6823      	ldr	r3, [r4, #0]
 8021006:	079b      	lsls	r3, r3, #30
 8021008:	f100 8105 	bmi.w	8021216 <_printf_float+0x462>
 802100c:	68e0      	ldr	r0, [r4, #12]
 802100e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021010:	4298      	cmp	r0, r3
 8021012:	bfb8      	it	lt
 8021014:	4618      	movlt	r0, r3
 8021016:	e730      	b.n	8020e7a <_printf_float+0xc6>
 8021018:	2301      	movs	r3, #1
 802101a:	464a      	mov	r2, r9
 802101c:	4631      	mov	r1, r6
 802101e:	4628      	mov	r0, r5
 8021020:	47b8      	blx	r7
 8021022:	3001      	adds	r0, #1
 8021024:	f43f af27 	beq.w	8020e76 <_printf_float+0xc2>
 8021028:	f108 0801 	add.w	r8, r8, #1
 802102c:	e7e6      	b.n	8020ffc <_printf_float+0x248>
 802102e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021030:	2b00      	cmp	r3, #0
 8021032:	dc39      	bgt.n	80210a8 <_printf_float+0x2f4>
 8021034:	4a1b      	ldr	r2, [pc, #108]	; (80210a4 <_printf_float+0x2f0>)
 8021036:	2301      	movs	r3, #1
 8021038:	4631      	mov	r1, r6
 802103a:	4628      	mov	r0, r5
 802103c:	47b8      	blx	r7
 802103e:	3001      	adds	r0, #1
 8021040:	f43f af19 	beq.w	8020e76 <_printf_float+0xc2>
 8021044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021048:	4313      	orrs	r3, r2
 802104a:	d102      	bne.n	8021052 <_printf_float+0x29e>
 802104c:	6823      	ldr	r3, [r4, #0]
 802104e:	07d9      	lsls	r1, r3, #31
 8021050:	d5d8      	bpl.n	8021004 <_printf_float+0x250>
 8021052:	ee18 3a10 	vmov	r3, s16
 8021056:	4652      	mov	r2, sl
 8021058:	4631      	mov	r1, r6
 802105a:	4628      	mov	r0, r5
 802105c:	47b8      	blx	r7
 802105e:	3001      	adds	r0, #1
 8021060:	f43f af09 	beq.w	8020e76 <_printf_float+0xc2>
 8021064:	f04f 0900 	mov.w	r9, #0
 8021068:	f104 0a1a 	add.w	sl, r4, #26
 802106c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802106e:	425b      	negs	r3, r3
 8021070:	454b      	cmp	r3, r9
 8021072:	dc01      	bgt.n	8021078 <_printf_float+0x2c4>
 8021074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021076:	e792      	b.n	8020f9e <_printf_float+0x1ea>
 8021078:	2301      	movs	r3, #1
 802107a:	4652      	mov	r2, sl
 802107c:	4631      	mov	r1, r6
 802107e:	4628      	mov	r0, r5
 8021080:	47b8      	blx	r7
 8021082:	3001      	adds	r0, #1
 8021084:	f43f aef7 	beq.w	8020e76 <_printf_float+0xc2>
 8021088:	f109 0901 	add.w	r9, r9, #1
 802108c:	e7ee      	b.n	802106c <_printf_float+0x2b8>
 802108e:	bf00      	nop
 8021090:	7fefffff 	.word	0x7fefffff
 8021094:	08025218 	.word	0x08025218
 8021098:	0802521c 	.word	0x0802521c
 802109c:	08025224 	.word	0x08025224
 80210a0:	08025220 	.word	0x08025220
 80210a4:	08025228 	.word	0x08025228
 80210a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80210ac:	429a      	cmp	r2, r3
 80210ae:	bfa8      	it	ge
 80210b0:	461a      	movge	r2, r3
 80210b2:	2a00      	cmp	r2, #0
 80210b4:	4691      	mov	r9, r2
 80210b6:	dc37      	bgt.n	8021128 <_printf_float+0x374>
 80210b8:	f04f 0b00 	mov.w	fp, #0
 80210bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80210c0:	f104 021a 	add.w	r2, r4, #26
 80210c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80210c6:	9305      	str	r3, [sp, #20]
 80210c8:	eba3 0309 	sub.w	r3, r3, r9
 80210cc:	455b      	cmp	r3, fp
 80210ce:	dc33      	bgt.n	8021138 <_printf_float+0x384>
 80210d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80210d4:	429a      	cmp	r2, r3
 80210d6:	db3b      	blt.n	8021150 <_printf_float+0x39c>
 80210d8:	6823      	ldr	r3, [r4, #0]
 80210da:	07da      	lsls	r2, r3, #31
 80210dc:	d438      	bmi.n	8021150 <_printf_float+0x39c>
 80210de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210e0:	9a05      	ldr	r2, [sp, #20]
 80210e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80210e4:	1a9a      	subs	r2, r3, r2
 80210e6:	eba3 0901 	sub.w	r9, r3, r1
 80210ea:	4591      	cmp	r9, r2
 80210ec:	bfa8      	it	ge
 80210ee:	4691      	movge	r9, r2
 80210f0:	f1b9 0f00 	cmp.w	r9, #0
 80210f4:	dc35      	bgt.n	8021162 <_printf_float+0x3ae>
 80210f6:	f04f 0800 	mov.w	r8, #0
 80210fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80210fe:	f104 0a1a 	add.w	sl, r4, #26
 8021102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021106:	1a9b      	subs	r3, r3, r2
 8021108:	eba3 0309 	sub.w	r3, r3, r9
 802110c:	4543      	cmp	r3, r8
 802110e:	f77f af79 	ble.w	8021004 <_printf_float+0x250>
 8021112:	2301      	movs	r3, #1
 8021114:	4652      	mov	r2, sl
 8021116:	4631      	mov	r1, r6
 8021118:	4628      	mov	r0, r5
 802111a:	47b8      	blx	r7
 802111c:	3001      	adds	r0, #1
 802111e:	f43f aeaa 	beq.w	8020e76 <_printf_float+0xc2>
 8021122:	f108 0801 	add.w	r8, r8, #1
 8021126:	e7ec      	b.n	8021102 <_printf_float+0x34e>
 8021128:	4613      	mov	r3, r2
 802112a:	4631      	mov	r1, r6
 802112c:	4642      	mov	r2, r8
 802112e:	4628      	mov	r0, r5
 8021130:	47b8      	blx	r7
 8021132:	3001      	adds	r0, #1
 8021134:	d1c0      	bne.n	80210b8 <_printf_float+0x304>
 8021136:	e69e      	b.n	8020e76 <_printf_float+0xc2>
 8021138:	2301      	movs	r3, #1
 802113a:	4631      	mov	r1, r6
 802113c:	4628      	mov	r0, r5
 802113e:	9205      	str	r2, [sp, #20]
 8021140:	47b8      	blx	r7
 8021142:	3001      	adds	r0, #1
 8021144:	f43f ae97 	beq.w	8020e76 <_printf_float+0xc2>
 8021148:	9a05      	ldr	r2, [sp, #20]
 802114a:	f10b 0b01 	add.w	fp, fp, #1
 802114e:	e7b9      	b.n	80210c4 <_printf_float+0x310>
 8021150:	ee18 3a10 	vmov	r3, s16
 8021154:	4652      	mov	r2, sl
 8021156:	4631      	mov	r1, r6
 8021158:	4628      	mov	r0, r5
 802115a:	47b8      	blx	r7
 802115c:	3001      	adds	r0, #1
 802115e:	d1be      	bne.n	80210de <_printf_float+0x32a>
 8021160:	e689      	b.n	8020e76 <_printf_float+0xc2>
 8021162:	9a05      	ldr	r2, [sp, #20]
 8021164:	464b      	mov	r3, r9
 8021166:	4442      	add	r2, r8
 8021168:	4631      	mov	r1, r6
 802116a:	4628      	mov	r0, r5
 802116c:	47b8      	blx	r7
 802116e:	3001      	adds	r0, #1
 8021170:	d1c1      	bne.n	80210f6 <_printf_float+0x342>
 8021172:	e680      	b.n	8020e76 <_printf_float+0xc2>
 8021174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021176:	2a01      	cmp	r2, #1
 8021178:	dc01      	bgt.n	802117e <_printf_float+0x3ca>
 802117a:	07db      	lsls	r3, r3, #31
 802117c:	d538      	bpl.n	80211f0 <_printf_float+0x43c>
 802117e:	2301      	movs	r3, #1
 8021180:	4642      	mov	r2, r8
 8021182:	4631      	mov	r1, r6
 8021184:	4628      	mov	r0, r5
 8021186:	47b8      	blx	r7
 8021188:	3001      	adds	r0, #1
 802118a:	f43f ae74 	beq.w	8020e76 <_printf_float+0xc2>
 802118e:	ee18 3a10 	vmov	r3, s16
 8021192:	4652      	mov	r2, sl
 8021194:	4631      	mov	r1, r6
 8021196:	4628      	mov	r0, r5
 8021198:	47b8      	blx	r7
 802119a:	3001      	adds	r0, #1
 802119c:	f43f ae6b 	beq.w	8020e76 <_printf_float+0xc2>
 80211a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80211a4:	2200      	movs	r2, #0
 80211a6:	2300      	movs	r3, #0
 80211a8:	f7df fcb6 	bl	8000b18 <__aeabi_dcmpeq>
 80211ac:	b9d8      	cbnz	r0, 80211e6 <_printf_float+0x432>
 80211ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b0:	f108 0201 	add.w	r2, r8, #1
 80211b4:	3b01      	subs	r3, #1
 80211b6:	4631      	mov	r1, r6
 80211b8:	4628      	mov	r0, r5
 80211ba:	47b8      	blx	r7
 80211bc:	3001      	adds	r0, #1
 80211be:	d10e      	bne.n	80211de <_printf_float+0x42a>
 80211c0:	e659      	b.n	8020e76 <_printf_float+0xc2>
 80211c2:	2301      	movs	r3, #1
 80211c4:	4652      	mov	r2, sl
 80211c6:	4631      	mov	r1, r6
 80211c8:	4628      	mov	r0, r5
 80211ca:	47b8      	blx	r7
 80211cc:	3001      	adds	r0, #1
 80211ce:	f43f ae52 	beq.w	8020e76 <_printf_float+0xc2>
 80211d2:	f108 0801 	add.w	r8, r8, #1
 80211d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211d8:	3b01      	subs	r3, #1
 80211da:	4543      	cmp	r3, r8
 80211dc:	dcf1      	bgt.n	80211c2 <_printf_float+0x40e>
 80211de:	464b      	mov	r3, r9
 80211e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80211e4:	e6dc      	b.n	8020fa0 <_printf_float+0x1ec>
 80211e6:	f04f 0800 	mov.w	r8, #0
 80211ea:	f104 0a1a 	add.w	sl, r4, #26
 80211ee:	e7f2      	b.n	80211d6 <_printf_float+0x422>
 80211f0:	2301      	movs	r3, #1
 80211f2:	4642      	mov	r2, r8
 80211f4:	e7df      	b.n	80211b6 <_printf_float+0x402>
 80211f6:	2301      	movs	r3, #1
 80211f8:	464a      	mov	r2, r9
 80211fa:	4631      	mov	r1, r6
 80211fc:	4628      	mov	r0, r5
 80211fe:	47b8      	blx	r7
 8021200:	3001      	adds	r0, #1
 8021202:	f43f ae38 	beq.w	8020e76 <_printf_float+0xc2>
 8021206:	f108 0801 	add.w	r8, r8, #1
 802120a:	68e3      	ldr	r3, [r4, #12]
 802120c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802120e:	1a5b      	subs	r3, r3, r1
 8021210:	4543      	cmp	r3, r8
 8021212:	dcf0      	bgt.n	80211f6 <_printf_float+0x442>
 8021214:	e6fa      	b.n	802100c <_printf_float+0x258>
 8021216:	f04f 0800 	mov.w	r8, #0
 802121a:	f104 0919 	add.w	r9, r4, #25
 802121e:	e7f4      	b.n	802120a <_printf_float+0x456>

08021220 <_printf_common>:
 8021220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021224:	4616      	mov	r6, r2
 8021226:	4699      	mov	r9, r3
 8021228:	688a      	ldr	r2, [r1, #8]
 802122a:	690b      	ldr	r3, [r1, #16]
 802122c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021230:	4293      	cmp	r3, r2
 8021232:	bfb8      	it	lt
 8021234:	4613      	movlt	r3, r2
 8021236:	6033      	str	r3, [r6, #0]
 8021238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802123c:	4607      	mov	r7, r0
 802123e:	460c      	mov	r4, r1
 8021240:	b10a      	cbz	r2, 8021246 <_printf_common+0x26>
 8021242:	3301      	adds	r3, #1
 8021244:	6033      	str	r3, [r6, #0]
 8021246:	6823      	ldr	r3, [r4, #0]
 8021248:	0699      	lsls	r1, r3, #26
 802124a:	bf42      	ittt	mi
 802124c:	6833      	ldrmi	r3, [r6, #0]
 802124e:	3302      	addmi	r3, #2
 8021250:	6033      	strmi	r3, [r6, #0]
 8021252:	6825      	ldr	r5, [r4, #0]
 8021254:	f015 0506 	ands.w	r5, r5, #6
 8021258:	d106      	bne.n	8021268 <_printf_common+0x48>
 802125a:	f104 0a19 	add.w	sl, r4, #25
 802125e:	68e3      	ldr	r3, [r4, #12]
 8021260:	6832      	ldr	r2, [r6, #0]
 8021262:	1a9b      	subs	r3, r3, r2
 8021264:	42ab      	cmp	r3, r5
 8021266:	dc26      	bgt.n	80212b6 <_printf_common+0x96>
 8021268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802126c:	1e13      	subs	r3, r2, #0
 802126e:	6822      	ldr	r2, [r4, #0]
 8021270:	bf18      	it	ne
 8021272:	2301      	movne	r3, #1
 8021274:	0692      	lsls	r2, r2, #26
 8021276:	d42b      	bmi.n	80212d0 <_printf_common+0xb0>
 8021278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802127c:	4649      	mov	r1, r9
 802127e:	4638      	mov	r0, r7
 8021280:	47c0      	blx	r8
 8021282:	3001      	adds	r0, #1
 8021284:	d01e      	beq.n	80212c4 <_printf_common+0xa4>
 8021286:	6823      	ldr	r3, [r4, #0]
 8021288:	68e5      	ldr	r5, [r4, #12]
 802128a:	6832      	ldr	r2, [r6, #0]
 802128c:	f003 0306 	and.w	r3, r3, #6
 8021290:	2b04      	cmp	r3, #4
 8021292:	bf08      	it	eq
 8021294:	1aad      	subeq	r5, r5, r2
 8021296:	68a3      	ldr	r3, [r4, #8]
 8021298:	6922      	ldr	r2, [r4, #16]
 802129a:	bf0c      	ite	eq
 802129c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80212a0:	2500      	movne	r5, #0
 80212a2:	4293      	cmp	r3, r2
 80212a4:	bfc4      	itt	gt
 80212a6:	1a9b      	subgt	r3, r3, r2
 80212a8:	18ed      	addgt	r5, r5, r3
 80212aa:	2600      	movs	r6, #0
 80212ac:	341a      	adds	r4, #26
 80212ae:	42b5      	cmp	r5, r6
 80212b0:	d11a      	bne.n	80212e8 <_printf_common+0xc8>
 80212b2:	2000      	movs	r0, #0
 80212b4:	e008      	b.n	80212c8 <_printf_common+0xa8>
 80212b6:	2301      	movs	r3, #1
 80212b8:	4652      	mov	r2, sl
 80212ba:	4649      	mov	r1, r9
 80212bc:	4638      	mov	r0, r7
 80212be:	47c0      	blx	r8
 80212c0:	3001      	adds	r0, #1
 80212c2:	d103      	bne.n	80212cc <_printf_common+0xac>
 80212c4:	f04f 30ff 	mov.w	r0, #4294967295
 80212c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212cc:	3501      	adds	r5, #1
 80212ce:	e7c6      	b.n	802125e <_printf_common+0x3e>
 80212d0:	18e1      	adds	r1, r4, r3
 80212d2:	1c5a      	adds	r2, r3, #1
 80212d4:	2030      	movs	r0, #48	; 0x30
 80212d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80212da:	4422      	add	r2, r4
 80212dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80212e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80212e4:	3302      	adds	r3, #2
 80212e6:	e7c7      	b.n	8021278 <_printf_common+0x58>
 80212e8:	2301      	movs	r3, #1
 80212ea:	4622      	mov	r2, r4
 80212ec:	4649      	mov	r1, r9
 80212ee:	4638      	mov	r0, r7
 80212f0:	47c0      	blx	r8
 80212f2:	3001      	adds	r0, #1
 80212f4:	d0e6      	beq.n	80212c4 <_printf_common+0xa4>
 80212f6:	3601      	adds	r6, #1
 80212f8:	e7d9      	b.n	80212ae <_printf_common+0x8e>
	...

080212fc <_printf_i>:
 80212fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021300:	7e0f      	ldrb	r7, [r1, #24]
 8021302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021304:	2f78      	cmp	r7, #120	; 0x78
 8021306:	4691      	mov	r9, r2
 8021308:	4680      	mov	r8, r0
 802130a:	460c      	mov	r4, r1
 802130c:	469a      	mov	sl, r3
 802130e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021312:	d807      	bhi.n	8021324 <_printf_i+0x28>
 8021314:	2f62      	cmp	r7, #98	; 0x62
 8021316:	d80a      	bhi.n	802132e <_printf_i+0x32>
 8021318:	2f00      	cmp	r7, #0
 802131a:	f000 80d8 	beq.w	80214ce <_printf_i+0x1d2>
 802131e:	2f58      	cmp	r7, #88	; 0x58
 8021320:	f000 80a3 	beq.w	802146a <_printf_i+0x16e>
 8021324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802132c:	e03a      	b.n	80213a4 <_printf_i+0xa8>
 802132e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021332:	2b15      	cmp	r3, #21
 8021334:	d8f6      	bhi.n	8021324 <_printf_i+0x28>
 8021336:	a101      	add	r1, pc, #4	; (adr r1, 802133c <_printf_i+0x40>)
 8021338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802133c:	08021395 	.word	0x08021395
 8021340:	080213a9 	.word	0x080213a9
 8021344:	08021325 	.word	0x08021325
 8021348:	08021325 	.word	0x08021325
 802134c:	08021325 	.word	0x08021325
 8021350:	08021325 	.word	0x08021325
 8021354:	080213a9 	.word	0x080213a9
 8021358:	08021325 	.word	0x08021325
 802135c:	08021325 	.word	0x08021325
 8021360:	08021325 	.word	0x08021325
 8021364:	08021325 	.word	0x08021325
 8021368:	080214b5 	.word	0x080214b5
 802136c:	080213d9 	.word	0x080213d9
 8021370:	08021497 	.word	0x08021497
 8021374:	08021325 	.word	0x08021325
 8021378:	08021325 	.word	0x08021325
 802137c:	080214d7 	.word	0x080214d7
 8021380:	08021325 	.word	0x08021325
 8021384:	080213d9 	.word	0x080213d9
 8021388:	08021325 	.word	0x08021325
 802138c:	08021325 	.word	0x08021325
 8021390:	0802149f 	.word	0x0802149f
 8021394:	682b      	ldr	r3, [r5, #0]
 8021396:	1d1a      	adds	r2, r3, #4
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	602a      	str	r2, [r5, #0]
 802139c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80213a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80213a4:	2301      	movs	r3, #1
 80213a6:	e0a3      	b.n	80214f0 <_printf_i+0x1f4>
 80213a8:	6820      	ldr	r0, [r4, #0]
 80213aa:	6829      	ldr	r1, [r5, #0]
 80213ac:	0606      	lsls	r6, r0, #24
 80213ae:	f101 0304 	add.w	r3, r1, #4
 80213b2:	d50a      	bpl.n	80213ca <_printf_i+0xce>
 80213b4:	680e      	ldr	r6, [r1, #0]
 80213b6:	602b      	str	r3, [r5, #0]
 80213b8:	2e00      	cmp	r6, #0
 80213ba:	da03      	bge.n	80213c4 <_printf_i+0xc8>
 80213bc:	232d      	movs	r3, #45	; 0x2d
 80213be:	4276      	negs	r6, r6
 80213c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80213c4:	485e      	ldr	r0, [pc, #376]	; (8021540 <_printf_i+0x244>)
 80213c6:	230a      	movs	r3, #10
 80213c8:	e019      	b.n	80213fe <_printf_i+0x102>
 80213ca:	680e      	ldr	r6, [r1, #0]
 80213cc:	602b      	str	r3, [r5, #0]
 80213ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80213d2:	bf18      	it	ne
 80213d4:	b236      	sxthne	r6, r6
 80213d6:	e7ef      	b.n	80213b8 <_printf_i+0xbc>
 80213d8:	682b      	ldr	r3, [r5, #0]
 80213da:	6820      	ldr	r0, [r4, #0]
 80213dc:	1d19      	adds	r1, r3, #4
 80213de:	6029      	str	r1, [r5, #0]
 80213e0:	0601      	lsls	r1, r0, #24
 80213e2:	d501      	bpl.n	80213e8 <_printf_i+0xec>
 80213e4:	681e      	ldr	r6, [r3, #0]
 80213e6:	e002      	b.n	80213ee <_printf_i+0xf2>
 80213e8:	0646      	lsls	r6, r0, #25
 80213ea:	d5fb      	bpl.n	80213e4 <_printf_i+0xe8>
 80213ec:	881e      	ldrh	r6, [r3, #0]
 80213ee:	4854      	ldr	r0, [pc, #336]	; (8021540 <_printf_i+0x244>)
 80213f0:	2f6f      	cmp	r7, #111	; 0x6f
 80213f2:	bf0c      	ite	eq
 80213f4:	2308      	moveq	r3, #8
 80213f6:	230a      	movne	r3, #10
 80213f8:	2100      	movs	r1, #0
 80213fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80213fe:	6865      	ldr	r5, [r4, #4]
 8021400:	60a5      	str	r5, [r4, #8]
 8021402:	2d00      	cmp	r5, #0
 8021404:	bfa2      	ittt	ge
 8021406:	6821      	ldrge	r1, [r4, #0]
 8021408:	f021 0104 	bicge.w	r1, r1, #4
 802140c:	6021      	strge	r1, [r4, #0]
 802140e:	b90e      	cbnz	r6, 8021414 <_printf_i+0x118>
 8021410:	2d00      	cmp	r5, #0
 8021412:	d04d      	beq.n	80214b0 <_printf_i+0x1b4>
 8021414:	4615      	mov	r5, r2
 8021416:	fbb6 f1f3 	udiv	r1, r6, r3
 802141a:	fb03 6711 	mls	r7, r3, r1, r6
 802141e:	5dc7      	ldrb	r7, [r0, r7]
 8021420:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021424:	4637      	mov	r7, r6
 8021426:	42bb      	cmp	r3, r7
 8021428:	460e      	mov	r6, r1
 802142a:	d9f4      	bls.n	8021416 <_printf_i+0x11a>
 802142c:	2b08      	cmp	r3, #8
 802142e:	d10b      	bne.n	8021448 <_printf_i+0x14c>
 8021430:	6823      	ldr	r3, [r4, #0]
 8021432:	07de      	lsls	r6, r3, #31
 8021434:	d508      	bpl.n	8021448 <_printf_i+0x14c>
 8021436:	6923      	ldr	r3, [r4, #16]
 8021438:	6861      	ldr	r1, [r4, #4]
 802143a:	4299      	cmp	r1, r3
 802143c:	bfde      	ittt	le
 802143e:	2330      	movle	r3, #48	; 0x30
 8021440:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021444:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021448:	1b52      	subs	r2, r2, r5
 802144a:	6122      	str	r2, [r4, #16]
 802144c:	f8cd a000 	str.w	sl, [sp]
 8021450:	464b      	mov	r3, r9
 8021452:	aa03      	add	r2, sp, #12
 8021454:	4621      	mov	r1, r4
 8021456:	4640      	mov	r0, r8
 8021458:	f7ff fee2 	bl	8021220 <_printf_common>
 802145c:	3001      	adds	r0, #1
 802145e:	d14c      	bne.n	80214fa <_printf_i+0x1fe>
 8021460:	f04f 30ff 	mov.w	r0, #4294967295
 8021464:	b004      	add	sp, #16
 8021466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802146a:	4835      	ldr	r0, [pc, #212]	; (8021540 <_printf_i+0x244>)
 802146c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8021470:	6829      	ldr	r1, [r5, #0]
 8021472:	6823      	ldr	r3, [r4, #0]
 8021474:	f851 6b04 	ldr.w	r6, [r1], #4
 8021478:	6029      	str	r1, [r5, #0]
 802147a:	061d      	lsls	r5, r3, #24
 802147c:	d514      	bpl.n	80214a8 <_printf_i+0x1ac>
 802147e:	07df      	lsls	r7, r3, #31
 8021480:	bf44      	itt	mi
 8021482:	f043 0320 	orrmi.w	r3, r3, #32
 8021486:	6023      	strmi	r3, [r4, #0]
 8021488:	b91e      	cbnz	r6, 8021492 <_printf_i+0x196>
 802148a:	6823      	ldr	r3, [r4, #0]
 802148c:	f023 0320 	bic.w	r3, r3, #32
 8021490:	6023      	str	r3, [r4, #0]
 8021492:	2310      	movs	r3, #16
 8021494:	e7b0      	b.n	80213f8 <_printf_i+0xfc>
 8021496:	6823      	ldr	r3, [r4, #0]
 8021498:	f043 0320 	orr.w	r3, r3, #32
 802149c:	6023      	str	r3, [r4, #0]
 802149e:	2378      	movs	r3, #120	; 0x78
 80214a0:	4828      	ldr	r0, [pc, #160]	; (8021544 <_printf_i+0x248>)
 80214a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80214a6:	e7e3      	b.n	8021470 <_printf_i+0x174>
 80214a8:	0659      	lsls	r1, r3, #25
 80214aa:	bf48      	it	mi
 80214ac:	b2b6      	uxthmi	r6, r6
 80214ae:	e7e6      	b.n	802147e <_printf_i+0x182>
 80214b0:	4615      	mov	r5, r2
 80214b2:	e7bb      	b.n	802142c <_printf_i+0x130>
 80214b4:	682b      	ldr	r3, [r5, #0]
 80214b6:	6826      	ldr	r6, [r4, #0]
 80214b8:	6961      	ldr	r1, [r4, #20]
 80214ba:	1d18      	adds	r0, r3, #4
 80214bc:	6028      	str	r0, [r5, #0]
 80214be:	0635      	lsls	r5, r6, #24
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	d501      	bpl.n	80214c8 <_printf_i+0x1cc>
 80214c4:	6019      	str	r1, [r3, #0]
 80214c6:	e002      	b.n	80214ce <_printf_i+0x1d2>
 80214c8:	0670      	lsls	r0, r6, #25
 80214ca:	d5fb      	bpl.n	80214c4 <_printf_i+0x1c8>
 80214cc:	8019      	strh	r1, [r3, #0]
 80214ce:	2300      	movs	r3, #0
 80214d0:	6123      	str	r3, [r4, #16]
 80214d2:	4615      	mov	r5, r2
 80214d4:	e7ba      	b.n	802144c <_printf_i+0x150>
 80214d6:	682b      	ldr	r3, [r5, #0]
 80214d8:	1d1a      	adds	r2, r3, #4
 80214da:	602a      	str	r2, [r5, #0]
 80214dc:	681d      	ldr	r5, [r3, #0]
 80214de:	6862      	ldr	r2, [r4, #4]
 80214e0:	2100      	movs	r1, #0
 80214e2:	4628      	mov	r0, r5
 80214e4:	f7de fea4 	bl	8000230 <memchr>
 80214e8:	b108      	cbz	r0, 80214ee <_printf_i+0x1f2>
 80214ea:	1b40      	subs	r0, r0, r5
 80214ec:	6060      	str	r0, [r4, #4]
 80214ee:	6863      	ldr	r3, [r4, #4]
 80214f0:	6123      	str	r3, [r4, #16]
 80214f2:	2300      	movs	r3, #0
 80214f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80214f8:	e7a8      	b.n	802144c <_printf_i+0x150>
 80214fa:	6923      	ldr	r3, [r4, #16]
 80214fc:	462a      	mov	r2, r5
 80214fe:	4649      	mov	r1, r9
 8021500:	4640      	mov	r0, r8
 8021502:	47d0      	blx	sl
 8021504:	3001      	adds	r0, #1
 8021506:	d0ab      	beq.n	8021460 <_printf_i+0x164>
 8021508:	6823      	ldr	r3, [r4, #0]
 802150a:	079b      	lsls	r3, r3, #30
 802150c:	d413      	bmi.n	8021536 <_printf_i+0x23a>
 802150e:	68e0      	ldr	r0, [r4, #12]
 8021510:	9b03      	ldr	r3, [sp, #12]
 8021512:	4298      	cmp	r0, r3
 8021514:	bfb8      	it	lt
 8021516:	4618      	movlt	r0, r3
 8021518:	e7a4      	b.n	8021464 <_printf_i+0x168>
 802151a:	2301      	movs	r3, #1
 802151c:	4632      	mov	r2, r6
 802151e:	4649      	mov	r1, r9
 8021520:	4640      	mov	r0, r8
 8021522:	47d0      	blx	sl
 8021524:	3001      	adds	r0, #1
 8021526:	d09b      	beq.n	8021460 <_printf_i+0x164>
 8021528:	3501      	adds	r5, #1
 802152a:	68e3      	ldr	r3, [r4, #12]
 802152c:	9903      	ldr	r1, [sp, #12]
 802152e:	1a5b      	subs	r3, r3, r1
 8021530:	42ab      	cmp	r3, r5
 8021532:	dcf2      	bgt.n	802151a <_printf_i+0x21e>
 8021534:	e7eb      	b.n	802150e <_printf_i+0x212>
 8021536:	2500      	movs	r5, #0
 8021538:	f104 0619 	add.w	r6, r4, #25
 802153c:	e7f5      	b.n	802152a <_printf_i+0x22e>
 802153e:	bf00      	nop
 8021540:	0802522a 	.word	0x0802522a
 8021544:	0802523b 	.word	0x0802523b

08021548 <iprintf>:
 8021548:	b40f      	push	{r0, r1, r2, r3}
 802154a:	4b0a      	ldr	r3, [pc, #40]	; (8021574 <iprintf+0x2c>)
 802154c:	b513      	push	{r0, r1, r4, lr}
 802154e:	681c      	ldr	r4, [r3, #0]
 8021550:	b124      	cbz	r4, 802155c <iprintf+0x14>
 8021552:	69a3      	ldr	r3, [r4, #24]
 8021554:	b913      	cbnz	r3, 802155c <iprintf+0x14>
 8021556:	4620      	mov	r0, r4
 8021558:	f001 f8ee 	bl	8022738 <__sinit>
 802155c:	ab05      	add	r3, sp, #20
 802155e:	9a04      	ldr	r2, [sp, #16]
 8021560:	68a1      	ldr	r1, [r4, #8]
 8021562:	9301      	str	r3, [sp, #4]
 8021564:	4620      	mov	r0, r4
 8021566:	f001 fe9d 	bl	80232a4 <_vfiprintf_r>
 802156a:	b002      	add	sp, #8
 802156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021570:	b004      	add	sp, #16
 8021572:	4770      	bx	lr
 8021574:	2000002c 	.word	0x2000002c

08021578 <putchar>:
 8021578:	4b09      	ldr	r3, [pc, #36]	; (80215a0 <putchar+0x28>)
 802157a:	b513      	push	{r0, r1, r4, lr}
 802157c:	681c      	ldr	r4, [r3, #0]
 802157e:	4601      	mov	r1, r0
 8021580:	b134      	cbz	r4, 8021590 <putchar+0x18>
 8021582:	69a3      	ldr	r3, [r4, #24]
 8021584:	b923      	cbnz	r3, 8021590 <putchar+0x18>
 8021586:	9001      	str	r0, [sp, #4]
 8021588:	4620      	mov	r0, r4
 802158a:	f001 f8d5 	bl	8022738 <__sinit>
 802158e:	9901      	ldr	r1, [sp, #4]
 8021590:	68a2      	ldr	r2, [r4, #8]
 8021592:	4620      	mov	r0, r4
 8021594:	b002      	add	sp, #8
 8021596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802159a:	f001 bfb3 	b.w	8023504 <_putc_r>
 802159e:	bf00      	nop
 80215a0:	2000002c 	.word	0x2000002c

080215a4 <_puts_r>:
 80215a4:	b570      	push	{r4, r5, r6, lr}
 80215a6:	460e      	mov	r6, r1
 80215a8:	4605      	mov	r5, r0
 80215aa:	b118      	cbz	r0, 80215b4 <_puts_r+0x10>
 80215ac:	6983      	ldr	r3, [r0, #24]
 80215ae:	b90b      	cbnz	r3, 80215b4 <_puts_r+0x10>
 80215b0:	f001 f8c2 	bl	8022738 <__sinit>
 80215b4:	69ab      	ldr	r3, [r5, #24]
 80215b6:	68ac      	ldr	r4, [r5, #8]
 80215b8:	b913      	cbnz	r3, 80215c0 <_puts_r+0x1c>
 80215ba:	4628      	mov	r0, r5
 80215bc:	f001 f8bc 	bl	8022738 <__sinit>
 80215c0:	4b2c      	ldr	r3, [pc, #176]	; (8021674 <_puts_r+0xd0>)
 80215c2:	429c      	cmp	r4, r3
 80215c4:	d120      	bne.n	8021608 <_puts_r+0x64>
 80215c6:	686c      	ldr	r4, [r5, #4]
 80215c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215ca:	07db      	lsls	r3, r3, #31
 80215cc:	d405      	bmi.n	80215da <_puts_r+0x36>
 80215ce:	89a3      	ldrh	r3, [r4, #12]
 80215d0:	0598      	lsls	r0, r3, #22
 80215d2:	d402      	bmi.n	80215da <_puts_r+0x36>
 80215d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215d6:	f001 f952 	bl	802287e <__retarget_lock_acquire_recursive>
 80215da:	89a3      	ldrh	r3, [r4, #12]
 80215dc:	0719      	lsls	r1, r3, #28
 80215de:	d51d      	bpl.n	802161c <_puts_r+0x78>
 80215e0:	6923      	ldr	r3, [r4, #16]
 80215e2:	b1db      	cbz	r3, 802161c <_puts_r+0x78>
 80215e4:	3e01      	subs	r6, #1
 80215e6:	68a3      	ldr	r3, [r4, #8]
 80215e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80215ec:	3b01      	subs	r3, #1
 80215ee:	60a3      	str	r3, [r4, #8]
 80215f0:	bb39      	cbnz	r1, 8021642 <_puts_r+0x9e>
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	da38      	bge.n	8021668 <_puts_r+0xc4>
 80215f6:	4622      	mov	r2, r4
 80215f8:	210a      	movs	r1, #10
 80215fa:	4628      	mov	r0, r5
 80215fc:	f000 f848 	bl	8021690 <__swbuf_r>
 8021600:	3001      	adds	r0, #1
 8021602:	d011      	beq.n	8021628 <_puts_r+0x84>
 8021604:	250a      	movs	r5, #10
 8021606:	e011      	b.n	802162c <_puts_r+0x88>
 8021608:	4b1b      	ldr	r3, [pc, #108]	; (8021678 <_puts_r+0xd4>)
 802160a:	429c      	cmp	r4, r3
 802160c:	d101      	bne.n	8021612 <_puts_r+0x6e>
 802160e:	68ac      	ldr	r4, [r5, #8]
 8021610:	e7da      	b.n	80215c8 <_puts_r+0x24>
 8021612:	4b1a      	ldr	r3, [pc, #104]	; (802167c <_puts_r+0xd8>)
 8021614:	429c      	cmp	r4, r3
 8021616:	bf08      	it	eq
 8021618:	68ec      	ldreq	r4, [r5, #12]
 802161a:	e7d5      	b.n	80215c8 <_puts_r+0x24>
 802161c:	4621      	mov	r1, r4
 802161e:	4628      	mov	r0, r5
 8021620:	f000 f888 	bl	8021734 <__swsetup_r>
 8021624:	2800      	cmp	r0, #0
 8021626:	d0dd      	beq.n	80215e4 <_puts_r+0x40>
 8021628:	f04f 35ff 	mov.w	r5, #4294967295
 802162c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802162e:	07da      	lsls	r2, r3, #31
 8021630:	d405      	bmi.n	802163e <_puts_r+0x9a>
 8021632:	89a3      	ldrh	r3, [r4, #12]
 8021634:	059b      	lsls	r3, r3, #22
 8021636:	d402      	bmi.n	802163e <_puts_r+0x9a>
 8021638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802163a:	f001 f921 	bl	8022880 <__retarget_lock_release_recursive>
 802163e:	4628      	mov	r0, r5
 8021640:	bd70      	pop	{r4, r5, r6, pc}
 8021642:	2b00      	cmp	r3, #0
 8021644:	da04      	bge.n	8021650 <_puts_r+0xac>
 8021646:	69a2      	ldr	r2, [r4, #24]
 8021648:	429a      	cmp	r2, r3
 802164a:	dc06      	bgt.n	802165a <_puts_r+0xb6>
 802164c:	290a      	cmp	r1, #10
 802164e:	d004      	beq.n	802165a <_puts_r+0xb6>
 8021650:	6823      	ldr	r3, [r4, #0]
 8021652:	1c5a      	adds	r2, r3, #1
 8021654:	6022      	str	r2, [r4, #0]
 8021656:	7019      	strb	r1, [r3, #0]
 8021658:	e7c5      	b.n	80215e6 <_puts_r+0x42>
 802165a:	4622      	mov	r2, r4
 802165c:	4628      	mov	r0, r5
 802165e:	f000 f817 	bl	8021690 <__swbuf_r>
 8021662:	3001      	adds	r0, #1
 8021664:	d1bf      	bne.n	80215e6 <_puts_r+0x42>
 8021666:	e7df      	b.n	8021628 <_puts_r+0x84>
 8021668:	6823      	ldr	r3, [r4, #0]
 802166a:	250a      	movs	r5, #10
 802166c:	1c5a      	adds	r2, r3, #1
 802166e:	6022      	str	r2, [r4, #0]
 8021670:	701d      	strb	r5, [r3, #0]
 8021672:	e7db      	b.n	802162c <_puts_r+0x88>
 8021674:	080252fc 	.word	0x080252fc
 8021678:	0802531c 	.word	0x0802531c
 802167c:	080252dc 	.word	0x080252dc

08021680 <puts>:
 8021680:	4b02      	ldr	r3, [pc, #8]	; (802168c <puts+0xc>)
 8021682:	4601      	mov	r1, r0
 8021684:	6818      	ldr	r0, [r3, #0]
 8021686:	f7ff bf8d 	b.w	80215a4 <_puts_r>
 802168a:	bf00      	nop
 802168c:	2000002c 	.word	0x2000002c

08021690 <__swbuf_r>:
 8021690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021692:	460e      	mov	r6, r1
 8021694:	4614      	mov	r4, r2
 8021696:	4605      	mov	r5, r0
 8021698:	b118      	cbz	r0, 80216a2 <__swbuf_r+0x12>
 802169a:	6983      	ldr	r3, [r0, #24]
 802169c:	b90b      	cbnz	r3, 80216a2 <__swbuf_r+0x12>
 802169e:	f001 f84b 	bl	8022738 <__sinit>
 80216a2:	4b21      	ldr	r3, [pc, #132]	; (8021728 <__swbuf_r+0x98>)
 80216a4:	429c      	cmp	r4, r3
 80216a6:	d12b      	bne.n	8021700 <__swbuf_r+0x70>
 80216a8:	686c      	ldr	r4, [r5, #4]
 80216aa:	69a3      	ldr	r3, [r4, #24]
 80216ac:	60a3      	str	r3, [r4, #8]
 80216ae:	89a3      	ldrh	r3, [r4, #12]
 80216b0:	071a      	lsls	r2, r3, #28
 80216b2:	d52f      	bpl.n	8021714 <__swbuf_r+0x84>
 80216b4:	6923      	ldr	r3, [r4, #16]
 80216b6:	b36b      	cbz	r3, 8021714 <__swbuf_r+0x84>
 80216b8:	6923      	ldr	r3, [r4, #16]
 80216ba:	6820      	ldr	r0, [r4, #0]
 80216bc:	1ac0      	subs	r0, r0, r3
 80216be:	6963      	ldr	r3, [r4, #20]
 80216c0:	b2f6      	uxtb	r6, r6
 80216c2:	4283      	cmp	r3, r0
 80216c4:	4637      	mov	r7, r6
 80216c6:	dc04      	bgt.n	80216d2 <__swbuf_r+0x42>
 80216c8:	4621      	mov	r1, r4
 80216ca:	4628      	mov	r0, r5
 80216cc:	f000 ffa0 	bl	8022610 <_fflush_r>
 80216d0:	bb30      	cbnz	r0, 8021720 <__swbuf_r+0x90>
 80216d2:	68a3      	ldr	r3, [r4, #8]
 80216d4:	3b01      	subs	r3, #1
 80216d6:	60a3      	str	r3, [r4, #8]
 80216d8:	6823      	ldr	r3, [r4, #0]
 80216da:	1c5a      	adds	r2, r3, #1
 80216dc:	6022      	str	r2, [r4, #0]
 80216de:	701e      	strb	r6, [r3, #0]
 80216e0:	6963      	ldr	r3, [r4, #20]
 80216e2:	3001      	adds	r0, #1
 80216e4:	4283      	cmp	r3, r0
 80216e6:	d004      	beq.n	80216f2 <__swbuf_r+0x62>
 80216e8:	89a3      	ldrh	r3, [r4, #12]
 80216ea:	07db      	lsls	r3, r3, #31
 80216ec:	d506      	bpl.n	80216fc <__swbuf_r+0x6c>
 80216ee:	2e0a      	cmp	r6, #10
 80216f0:	d104      	bne.n	80216fc <__swbuf_r+0x6c>
 80216f2:	4621      	mov	r1, r4
 80216f4:	4628      	mov	r0, r5
 80216f6:	f000 ff8b 	bl	8022610 <_fflush_r>
 80216fa:	b988      	cbnz	r0, 8021720 <__swbuf_r+0x90>
 80216fc:	4638      	mov	r0, r7
 80216fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021700:	4b0a      	ldr	r3, [pc, #40]	; (802172c <__swbuf_r+0x9c>)
 8021702:	429c      	cmp	r4, r3
 8021704:	d101      	bne.n	802170a <__swbuf_r+0x7a>
 8021706:	68ac      	ldr	r4, [r5, #8]
 8021708:	e7cf      	b.n	80216aa <__swbuf_r+0x1a>
 802170a:	4b09      	ldr	r3, [pc, #36]	; (8021730 <__swbuf_r+0xa0>)
 802170c:	429c      	cmp	r4, r3
 802170e:	bf08      	it	eq
 8021710:	68ec      	ldreq	r4, [r5, #12]
 8021712:	e7ca      	b.n	80216aa <__swbuf_r+0x1a>
 8021714:	4621      	mov	r1, r4
 8021716:	4628      	mov	r0, r5
 8021718:	f000 f80c 	bl	8021734 <__swsetup_r>
 802171c:	2800      	cmp	r0, #0
 802171e:	d0cb      	beq.n	80216b8 <__swbuf_r+0x28>
 8021720:	f04f 37ff 	mov.w	r7, #4294967295
 8021724:	e7ea      	b.n	80216fc <__swbuf_r+0x6c>
 8021726:	bf00      	nop
 8021728:	080252fc 	.word	0x080252fc
 802172c:	0802531c 	.word	0x0802531c
 8021730:	080252dc 	.word	0x080252dc

08021734 <__swsetup_r>:
 8021734:	4b32      	ldr	r3, [pc, #200]	; (8021800 <__swsetup_r+0xcc>)
 8021736:	b570      	push	{r4, r5, r6, lr}
 8021738:	681d      	ldr	r5, [r3, #0]
 802173a:	4606      	mov	r6, r0
 802173c:	460c      	mov	r4, r1
 802173e:	b125      	cbz	r5, 802174a <__swsetup_r+0x16>
 8021740:	69ab      	ldr	r3, [r5, #24]
 8021742:	b913      	cbnz	r3, 802174a <__swsetup_r+0x16>
 8021744:	4628      	mov	r0, r5
 8021746:	f000 fff7 	bl	8022738 <__sinit>
 802174a:	4b2e      	ldr	r3, [pc, #184]	; (8021804 <__swsetup_r+0xd0>)
 802174c:	429c      	cmp	r4, r3
 802174e:	d10f      	bne.n	8021770 <__swsetup_r+0x3c>
 8021750:	686c      	ldr	r4, [r5, #4]
 8021752:	89a3      	ldrh	r3, [r4, #12]
 8021754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021758:	0719      	lsls	r1, r3, #28
 802175a:	d42c      	bmi.n	80217b6 <__swsetup_r+0x82>
 802175c:	06dd      	lsls	r5, r3, #27
 802175e:	d411      	bmi.n	8021784 <__swsetup_r+0x50>
 8021760:	2309      	movs	r3, #9
 8021762:	6033      	str	r3, [r6, #0]
 8021764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021768:	81a3      	strh	r3, [r4, #12]
 802176a:	f04f 30ff 	mov.w	r0, #4294967295
 802176e:	e03e      	b.n	80217ee <__swsetup_r+0xba>
 8021770:	4b25      	ldr	r3, [pc, #148]	; (8021808 <__swsetup_r+0xd4>)
 8021772:	429c      	cmp	r4, r3
 8021774:	d101      	bne.n	802177a <__swsetup_r+0x46>
 8021776:	68ac      	ldr	r4, [r5, #8]
 8021778:	e7eb      	b.n	8021752 <__swsetup_r+0x1e>
 802177a:	4b24      	ldr	r3, [pc, #144]	; (802180c <__swsetup_r+0xd8>)
 802177c:	429c      	cmp	r4, r3
 802177e:	bf08      	it	eq
 8021780:	68ec      	ldreq	r4, [r5, #12]
 8021782:	e7e6      	b.n	8021752 <__swsetup_r+0x1e>
 8021784:	0758      	lsls	r0, r3, #29
 8021786:	d512      	bpl.n	80217ae <__swsetup_r+0x7a>
 8021788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802178a:	b141      	cbz	r1, 802179e <__swsetup_r+0x6a>
 802178c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021790:	4299      	cmp	r1, r3
 8021792:	d002      	beq.n	802179a <__swsetup_r+0x66>
 8021794:	4630      	mov	r0, r6
 8021796:	f001 fc7b 	bl	8023090 <_free_r>
 802179a:	2300      	movs	r3, #0
 802179c:	6363      	str	r3, [r4, #52]	; 0x34
 802179e:	89a3      	ldrh	r3, [r4, #12]
 80217a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80217a4:	81a3      	strh	r3, [r4, #12]
 80217a6:	2300      	movs	r3, #0
 80217a8:	6063      	str	r3, [r4, #4]
 80217aa:	6923      	ldr	r3, [r4, #16]
 80217ac:	6023      	str	r3, [r4, #0]
 80217ae:	89a3      	ldrh	r3, [r4, #12]
 80217b0:	f043 0308 	orr.w	r3, r3, #8
 80217b4:	81a3      	strh	r3, [r4, #12]
 80217b6:	6923      	ldr	r3, [r4, #16]
 80217b8:	b94b      	cbnz	r3, 80217ce <__swsetup_r+0x9a>
 80217ba:	89a3      	ldrh	r3, [r4, #12]
 80217bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80217c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80217c4:	d003      	beq.n	80217ce <__swsetup_r+0x9a>
 80217c6:	4621      	mov	r1, r4
 80217c8:	4630      	mov	r0, r6
 80217ca:	f001 f87f 	bl	80228cc <__smakebuf_r>
 80217ce:	89a0      	ldrh	r0, [r4, #12]
 80217d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80217d4:	f010 0301 	ands.w	r3, r0, #1
 80217d8:	d00a      	beq.n	80217f0 <__swsetup_r+0xbc>
 80217da:	2300      	movs	r3, #0
 80217dc:	60a3      	str	r3, [r4, #8]
 80217de:	6963      	ldr	r3, [r4, #20]
 80217e0:	425b      	negs	r3, r3
 80217e2:	61a3      	str	r3, [r4, #24]
 80217e4:	6923      	ldr	r3, [r4, #16]
 80217e6:	b943      	cbnz	r3, 80217fa <__swsetup_r+0xc6>
 80217e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80217ec:	d1ba      	bne.n	8021764 <__swsetup_r+0x30>
 80217ee:	bd70      	pop	{r4, r5, r6, pc}
 80217f0:	0781      	lsls	r1, r0, #30
 80217f2:	bf58      	it	pl
 80217f4:	6963      	ldrpl	r3, [r4, #20]
 80217f6:	60a3      	str	r3, [r4, #8]
 80217f8:	e7f4      	b.n	80217e4 <__swsetup_r+0xb0>
 80217fa:	2000      	movs	r0, #0
 80217fc:	e7f7      	b.n	80217ee <__swsetup_r+0xba>
 80217fe:	bf00      	nop
 8021800:	2000002c 	.word	0x2000002c
 8021804:	080252fc 	.word	0x080252fc
 8021808:	0802531c 	.word	0x0802531c
 802180c:	080252dc 	.word	0x080252dc

08021810 <quorem>:
 8021810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021814:	6903      	ldr	r3, [r0, #16]
 8021816:	690c      	ldr	r4, [r1, #16]
 8021818:	42a3      	cmp	r3, r4
 802181a:	4607      	mov	r7, r0
 802181c:	f2c0 8081 	blt.w	8021922 <quorem+0x112>
 8021820:	3c01      	subs	r4, #1
 8021822:	f101 0814 	add.w	r8, r1, #20
 8021826:	f100 0514 	add.w	r5, r0, #20
 802182a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802182e:	9301      	str	r3, [sp, #4]
 8021830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021838:	3301      	adds	r3, #1
 802183a:	429a      	cmp	r2, r3
 802183c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021844:	fbb2 f6f3 	udiv	r6, r2, r3
 8021848:	d331      	bcc.n	80218ae <quorem+0x9e>
 802184a:	f04f 0e00 	mov.w	lr, #0
 802184e:	4640      	mov	r0, r8
 8021850:	46ac      	mov	ip, r5
 8021852:	46f2      	mov	sl, lr
 8021854:	f850 2b04 	ldr.w	r2, [r0], #4
 8021858:	b293      	uxth	r3, r2
 802185a:	fb06 e303 	mla	r3, r6, r3, lr
 802185e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021862:	b29b      	uxth	r3, r3
 8021864:	ebaa 0303 	sub.w	r3, sl, r3
 8021868:	f8dc a000 	ldr.w	sl, [ip]
 802186c:	0c12      	lsrs	r2, r2, #16
 802186e:	fa13 f38a 	uxtah	r3, r3, sl
 8021872:	fb06 e202 	mla	r2, r6, r2, lr
 8021876:	9300      	str	r3, [sp, #0]
 8021878:	9b00      	ldr	r3, [sp, #0]
 802187a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802187e:	b292      	uxth	r2, r2
 8021880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8021884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021888:	f8bd 3000 	ldrh.w	r3, [sp]
 802188c:	4581      	cmp	r9, r0
 802188e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021892:	f84c 3b04 	str.w	r3, [ip], #4
 8021896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802189a:	d2db      	bcs.n	8021854 <quorem+0x44>
 802189c:	f855 300b 	ldr.w	r3, [r5, fp]
 80218a0:	b92b      	cbnz	r3, 80218ae <quorem+0x9e>
 80218a2:	9b01      	ldr	r3, [sp, #4]
 80218a4:	3b04      	subs	r3, #4
 80218a6:	429d      	cmp	r5, r3
 80218a8:	461a      	mov	r2, r3
 80218aa:	d32e      	bcc.n	802190a <quorem+0xfa>
 80218ac:	613c      	str	r4, [r7, #16]
 80218ae:	4638      	mov	r0, r7
 80218b0:	f001 fad6 	bl	8022e60 <__mcmp>
 80218b4:	2800      	cmp	r0, #0
 80218b6:	db24      	blt.n	8021902 <quorem+0xf2>
 80218b8:	3601      	adds	r6, #1
 80218ba:	4628      	mov	r0, r5
 80218bc:	f04f 0c00 	mov.w	ip, #0
 80218c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80218c4:	f8d0 e000 	ldr.w	lr, [r0]
 80218c8:	b293      	uxth	r3, r2
 80218ca:	ebac 0303 	sub.w	r3, ip, r3
 80218ce:	0c12      	lsrs	r2, r2, #16
 80218d0:	fa13 f38e 	uxtah	r3, r3, lr
 80218d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80218d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80218dc:	b29b      	uxth	r3, r3
 80218de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80218e2:	45c1      	cmp	r9, r8
 80218e4:	f840 3b04 	str.w	r3, [r0], #4
 80218e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80218ec:	d2e8      	bcs.n	80218c0 <quorem+0xb0>
 80218ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80218f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80218f6:	b922      	cbnz	r2, 8021902 <quorem+0xf2>
 80218f8:	3b04      	subs	r3, #4
 80218fa:	429d      	cmp	r5, r3
 80218fc:	461a      	mov	r2, r3
 80218fe:	d30a      	bcc.n	8021916 <quorem+0x106>
 8021900:	613c      	str	r4, [r7, #16]
 8021902:	4630      	mov	r0, r6
 8021904:	b003      	add	sp, #12
 8021906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802190a:	6812      	ldr	r2, [r2, #0]
 802190c:	3b04      	subs	r3, #4
 802190e:	2a00      	cmp	r2, #0
 8021910:	d1cc      	bne.n	80218ac <quorem+0x9c>
 8021912:	3c01      	subs	r4, #1
 8021914:	e7c7      	b.n	80218a6 <quorem+0x96>
 8021916:	6812      	ldr	r2, [r2, #0]
 8021918:	3b04      	subs	r3, #4
 802191a:	2a00      	cmp	r2, #0
 802191c:	d1f0      	bne.n	8021900 <quorem+0xf0>
 802191e:	3c01      	subs	r4, #1
 8021920:	e7eb      	b.n	80218fa <quorem+0xea>
 8021922:	2000      	movs	r0, #0
 8021924:	e7ee      	b.n	8021904 <quorem+0xf4>
	...

08021928 <_dtoa_r>:
 8021928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192c:	ed2d 8b04 	vpush	{d8-d9}
 8021930:	ec57 6b10 	vmov	r6, r7, d0
 8021934:	b093      	sub	sp, #76	; 0x4c
 8021936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802193c:	9106      	str	r1, [sp, #24]
 802193e:	ee10 aa10 	vmov	sl, s0
 8021942:	4604      	mov	r4, r0
 8021944:	9209      	str	r2, [sp, #36]	; 0x24
 8021946:	930c      	str	r3, [sp, #48]	; 0x30
 8021948:	46bb      	mov	fp, r7
 802194a:	b975      	cbnz	r5, 802196a <_dtoa_r+0x42>
 802194c:	2010      	movs	r0, #16
 802194e:	f000 fffd 	bl	802294c <malloc>
 8021952:	4602      	mov	r2, r0
 8021954:	6260      	str	r0, [r4, #36]	; 0x24
 8021956:	b920      	cbnz	r0, 8021962 <_dtoa_r+0x3a>
 8021958:	4ba7      	ldr	r3, [pc, #668]	; (8021bf8 <_dtoa_r+0x2d0>)
 802195a:	21ea      	movs	r1, #234	; 0xea
 802195c:	48a7      	ldr	r0, [pc, #668]	; (8021bfc <_dtoa_r+0x2d4>)
 802195e:	f001 fe7f 	bl	8023660 <__assert_func>
 8021962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021966:	6005      	str	r5, [r0, #0]
 8021968:	60c5      	str	r5, [r0, #12]
 802196a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802196c:	6819      	ldr	r1, [r3, #0]
 802196e:	b151      	cbz	r1, 8021986 <_dtoa_r+0x5e>
 8021970:	685a      	ldr	r2, [r3, #4]
 8021972:	604a      	str	r2, [r1, #4]
 8021974:	2301      	movs	r3, #1
 8021976:	4093      	lsls	r3, r2
 8021978:	608b      	str	r3, [r1, #8]
 802197a:	4620      	mov	r0, r4
 802197c:	f001 f82e 	bl	80229dc <_Bfree>
 8021980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021982:	2200      	movs	r2, #0
 8021984:	601a      	str	r2, [r3, #0]
 8021986:	1e3b      	subs	r3, r7, #0
 8021988:	bfaa      	itet	ge
 802198a:	2300      	movge	r3, #0
 802198c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8021990:	f8c8 3000 	strge.w	r3, [r8]
 8021994:	4b9a      	ldr	r3, [pc, #616]	; (8021c00 <_dtoa_r+0x2d8>)
 8021996:	bfbc      	itt	lt
 8021998:	2201      	movlt	r2, #1
 802199a:	f8c8 2000 	strlt.w	r2, [r8]
 802199e:	ea33 030b 	bics.w	r3, r3, fp
 80219a2:	d11b      	bne.n	80219dc <_dtoa_r+0xb4>
 80219a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80219aa:	6013      	str	r3, [r2, #0]
 80219ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80219b0:	4333      	orrs	r3, r6
 80219b2:	f000 8592 	beq.w	80224da <_dtoa_r+0xbb2>
 80219b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80219b8:	b963      	cbnz	r3, 80219d4 <_dtoa_r+0xac>
 80219ba:	4b92      	ldr	r3, [pc, #584]	; (8021c04 <_dtoa_r+0x2dc>)
 80219bc:	e022      	b.n	8021a04 <_dtoa_r+0xdc>
 80219be:	4b92      	ldr	r3, [pc, #584]	; (8021c08 <_dtoa_r+0x2e0>)
 80219c0:	9301      	str	r3, [sp, #4]
 80219c2:	3308      	adds	r3, #8
 80219c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80219c6:	6013      	str	r3, [r2, #0]
 80219c8:	9801      	ldr	r0, [sp, #4]
 80219ca:	b013      	add	sp, #76	; 0x4c
 80219cc:	ecbd 8b04 	vpop	{d8-d9}
 80219d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219d4:	4b8b      	ldr	r3, [pc, #556]	; (8021c04 <_dtoa_r+0x2dc>)
 80219d6:	9301      	str	r3, [sp, #4]
 80219d8:	3303      	adds	r3, #3
 80219da:	e7f3      	b.n	80219c4 <_dtoa_r+0x9c>
 80219dc:	2200      	movs	r2, #0
 80219de:	2300      	movs	r3, #0
 80219e0:	4650      	mov	r0, sl
 80219e2:	4659      	mov	r1, fp
 80219e4:	f7df f898 	bl	8000b18 <__aeabi_dcmpeq>
 80219e8:	ec4b ab19 	vmov	d9, sl, fp
 80219ec:	4680      	mov	r8, r0
 80219ee:	b158      	cbz	r0, 8021a08 <_dtoa_r+0xe0>
 80219f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219f2:	2301      	movs	r3, #1
 80219f4:	6013      	str	r3, [r2, #0]
 80219f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	f000 856b 	beq.w	80224d4 <_dtoa_r+0xbac>
 80219fe:	4883      	ldr	r0, [pc, #524]	; (8021c0c <_dtoa_r+0x2e4>)
 8021a00:	6018      	str	r0, [r3, #0]
 8021a02:	1e43      	subs	r3, r0, #1
 8021a04:	9301      	str	r3, [sp, #4]
 8021a06:	e7df      	b.n	80219c8 <_dtoa_r+0xa0>
 8021a08:	ec4b ab10 	vmov	d0, sl, fp
 8021a0c:	aa10      	add	r2, sp, #64	; 0x40
 8021a0e:	a911      	add	r1, sp, #68	; 0x44
 8021a10:	4620      	mov	r0, r4
 8021a12:	f001 facb 	bl	8022fac <__d2b>
 8021a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8021a1a:	ee08 0a10 	vmov	s16, r0
 8021a1e:	2d00      	cmp	r5, #0
 8021a20:	f000 8084 	beq.w	8021b2c <_dtoa_r+0x204>
 8021a24:	ee19 3a90 	vmov	r3, s19
 8021a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8021a30:	4656      	mov	r6, sl
 8021a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8021a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021a3e:	4b74      	ldr	r3, [pc, #464]	; (8021c10 <_dtoa_r+0x2e8>)
 8021a40:	2200      	movs	r2, #0
 8021a42:	4630      	mov	r0, r6
 8021a44:	4639      	mov	r1, r7
 8021a46:	f7de fc47 	bl	80002d8 <__aeabi_dsub>
 8021a4a:	a365      	add	r3, pc, #404	; (adr r3, 8021be0 <_dtoa_r+0x2b8>)
 8021a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a50:	f7de fdfa 	bl	8000648 <__aeabi_dmul>
 8021a54:	a364      	add	r3, pc, #400	; (adr r3, 8021be8 <_dtoa_r+0x2c0>)
 8021a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a5a:	f7de fc3f 	bl	80002dc <__adddf3>
 8021a5e:	4606      	mov	r6, r0
 8021a60:	4628      	mov	r0, r5
 8021a62:	460f      	mov	r7, r1
 8021a64:	f7de fd86 	bl	8000574 <__aeabi_i2d>
 8021a68:	a361      	add	r3, pc, #388	; (adr r3, 8021bf0 <_dtoa_r+0x2c8>)
 8021a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a6e:	f7de fdeb 	bl	8000648 <__aeabi_dmul>
 8021a72:	4602      	mov	r2, r0
 8021a74:	460b      	mov	r3, r1
 8021a76:	4630      	mov	r0, r6
 8021a78:	4639      	mov	r1, r7
 8021a7a:	f7de fc2f 	bl	80002dc <__adddf3>
 8021a7e:	4606      	mov	r6, r0
 8021a80:	460f      	mov	r7, r1
 8021a82:	f7df f891 	bl	8000ba8 <__aeabi_d2iz>
 8021a86:	2200      	movs	r2, #0
 8021a88:	9000      	str	r0, [sp, #0]
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	4630      	mov	r0, r6
 8021a8e:	4639      	mov	r1, r7
 8021a90:	f7df f84c 	bl	8000b2c <__aeabi_dcmplt>
 8021a94:	b150      	cbz	r0, 8021aac <_dtoa_r+0x184>
 8021a96:	9800      	ldr	r0, [sp, #0]
 8021a98:	f7de fd6c 	bl	8000574 <__aeabi_i2d>
 8021a9c:	4632      	mov	r2, r6
 8021a9e:	463b      	mov	r3, r7
 8021aa0:	f7df f83a 	bl	8000b18 <__aeabi_dcmpeq>
 8021aa4:	b910      	cbnz	r0, 8021aac <_dtoa_r+0x184>
 8021aa6:	9b00      	ldr	r3, [sp, #0]
 8021aa8:	3b01      	subs	r3, #1
 8021aaa:	9300      	str	r3, [sp, #0]
 8021aac:	9b00      	ldr	r3, [sp, #0]
 8021aae:	2b16      	cmp	r3, #22
 8021ab0:	d85a      	bhi.n	8021b68 <_dtoa_r+0x240>
 8021ab2:	9a00      	ldr	r2, [sp, #0]
 8021ab4:	4b57      	ldr	r3, [pc, #348]	; (8021c14 <_dtoa_r+0x2ec>)
 8021ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021abe:	ec51 0b19 	vmov	r0, r1, d9
 8021ac2:	f7df f833 	bl	8000b2c <__aeabi_dcmplt>
 8021ac6:	2800      	cmp	r0, #0
 8021ac8:	d050      	beq.n	8021b6c <_dtoa_r+0x244>
 8021aca:	9b00      	ldr	r3, [sp, #0]
 8021acc:	3b01      	subs	r3, #1
 8021ace:	9300      	str	r3, [sp, #0]
 8021ad0:	2300      	movs	r3, #0
 8021ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ad6:	1b5d      	subs	r5, r3, r5
 8021ad8:	1e6b      	subs	r3, r5, #1
 8021ada:	9305      	str	r3, [sp, #20]
 8021adc:	bf45      	ittet	mi
 8021ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8021ae2:	9304      	strmi	r3, [sp, #16]
 8021ae4:	2300      	movpl	r3, #0
 8021ae6:	2300      	movmi	r3, #0
 8021ae8:	bf4c      	ite	mi
 8021aea:	9305      	strmi	r3, [sp, #20]
 8021aec:	9304      	strpl	r3, [sp, #16]
 8021aee:	9b00      	ldr	r3, [sp, #0]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	db3d      	blt.n	8021b70 <_dtoa_r+0x248>
 8021af4:	9b05      	ldr	r3, [sp, #20]
 8021af6:	9a00      	ldr	r2, [sp, #0]
 8021af8:	920a      	str	r2, [sp, #40]	; 0x28
 8021afa:	4413      	add	r3, r2
 8021afc:	9305      	str	r3, [sp, #20]
 8021afe:	2300      	movs	r3, #0
 8021b00:	9307      	str	r3, [sp, #28]
 8021b02:	9b06      	ldr	r3, [sp, #24]
 8021b04:	2b09      	cmp	r3, #9
 8021b06:	f200 8089 	bhi.w	8021c1c <_dtoa_r+0x2f4>
 8021b0a:	2b05      	cmp	r3, #5
 8021b0c:	bfc4      	itt	gt
 8021b0e:	3b04      	subgt	r3, #4
 8021b10:	9306      	strgt	r3, [sp, #24]
 8021b12:	9b06      	ldr	r3, [sp, #24]
 8021b14:	f1a3 0302 	sub.w	r3, r3, #2
 8021b18:	bfcc      	ite	gt
 8021b1a:	2500      	movgt	r5, #0
 8021b1c:	2501      	movle	r5, #1
 8021b1e:	2b03      	cmp	r3, #3
 8021b20:	f200 8087 	bhi.w	8021c32 <_dtoa_r+0x30a>
 8021b24:	e8df f003 	tbb	[pc, r3]
 8021b28:	59383a2d 	.word	0x59383a2d
 8021b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8021b30:	441d      	add	r5, r3
 8021b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021b36:	2b20      	cmp	r3, #32
 8021b38:	bfc1      	itttt	gt
 8021b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8021b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021b4a:	bfda      	itte	le
 8021b4c:	f1c3 0320 	rsble	r3, r3, #32
 8021b50:	fa06 f003 	lslle.w	r0, r6, r3
 8021b54:	4318      	orrgt	r0, r3
 8021b56:	f7de fcfd 	bl	8000554 <__aeabi_ui2d>
 8021b5a:	2301      	movs	r3, #1
 8021b5c:	4606      	mov	r6, r0
 8021b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021b62:	3d01      	subs	r5, #1
 8021b64:	930e      	str	r3, [sp, #56]	; 0x38
 8021b66:	e76a      	b.n	8021a3e <_dtoa_r+0x116>
 8021b68:	2301      	movs	r3, #1
 8021b6a:	e7b2      	b.n	8021ad2 <_dtoa_r+0x1aa>
 8021b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8021b6e:	e7b1      	b.n	8021ad4 <_dtoa_r+0x1ac>
 8021b70:	9b04      	ldr	r3, [sp, #16]
 8021b72:	9a00      	ldr	r2, [sp, #0]
 8021b74:	1a9b      	subs	r3, r3, r2
 8021b76:	9304      	str	r3, [sp, #16]
 8021b78:	4253      	negs	r3, r2
 8021b7a:	9307      	str	r3, [sp, #28]
 8021b7c:	2300      	movs	r3, #0
 8021b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8021b80:	e7bf      	b.n	8021b02 <_dtoa_r+0x1da>
 8021b82:	2300      	movs	r3, #0
 8021b84:	9308      	str	r3, [sp, #32]
 8021b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	dc55      	bgt.n	8021c38 <_dtoa_r+0x310>
 8021b8c:	2301      	movs	r3, #1
 8021b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021b92:	461a      	mov	r2, r3
 8021b94:	9209      	str	r2, [sp, #36]	; 0x24
 8021b96:	e00c      	b.n	8021bb2 <_dtoa_r+0x28a>
 8021b98:	2301      	movs	r3, #1
 8021b9a:	e7f3      	b.n	8021b84 <_dtoa_r+0x25c>
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ba0:	9308      	str	r3, [sp, #32]
 8021ba2:	9b00      	ldr	r3, [sp, #0]
 8021ba4:	4413      	add	r3, r2
 8021ba6:	9302      	str	r3, [sp, #8]
 8021ba8:	3301      	adds	r3, #1
 8021baa:	2b01      	cmp	r3, #1
 8021bac:	9303      	str	r3, [sp, #12]
 8021bae:	bfb8      	it	lt
 8021bb0:	2301      	movlt	r3, #1
 8021bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021bb4:	2200      	movs	r2, #0
 8021bb6:	6042      	str	r2, [r0, #4]
 8021bb8:	2204      	movs	r2, #4
 8021bba:	f102 0614 	add.w	r6, r2, #20
 8021bbe:	429e      	cmp	r6, r3
 8021bc0:	6841      	ldr	r1, [r0, #4]
 8021bc2:	d93d      	bls.n	8021c40 <_dtoa_r+0x318>
 8021bc4:	4620      	mov	r0, r4
 8021bc6:	f000 fec9 	bl	802295c <_Balloc>
 8021bca:	9001      	str	r0, [sp, #4]
 8021bcc:	2800      	cmp	r0, #0
 8021bce:	d13b      	bne.n	8021c48 <_dtoa_r+0x320>
 8021bd0:	4b11      	ldr	r3, [pc, #68]	; (8021c18 <_dtoa_r+0x2f0>)
 8021bd2:	4602      	mov	r2, r0
 8021bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021bd8:	e6c0      	b.n	802195c <_dtoa_r+0x34>
 8021bda:	2301      	movs	r3, #1
 8021bdc:	e7df      	b.n	8021b9e <_dtoa_r+0x276>
 8021bde:	bf00      	nop
 8021be0:	636f4361 	.word	0x636f4361
 8021be4:	3fd287a7 	.word	0x3fd287a7
 8021be8:	8b60c8b3 	.word	0x8b60c8b3
 8021bec:	3fc68a28 	.word	0x3fc68a28
 8021bf0:	509f79fb 	.word	0x509f79fb
 8021bf4:	3fd34413 	.word	0x3fd34413
 8021bf8:	08025259 	.word	0x08025259
 8021bfc:	08025270 	.word	0x08025270
 8021c00:	7ff00000 	.word	0x7ff00000
 8021c04:	08025255 	.word	0x08025255
 8021c08:	0802524c 	.word	0x0802524c
 8021c0c:	08025229 	.word	0x08025229
 8021c10:	3ff80000 	.word	0x3ff80000
 8021c14:	080253c0 	.word	0x080253c0
 8021c18:	080252cb 	.word	0x080252cb
 8021c1c:	2501      	movs	r5, #1
 8021c1e:	2300      	movs	r3, #0
 8021c20:	9306      	str	r3, [sp, #24]
 8021c22:	9508      	str	r5, [sp, #32]
 8021c24:	f04f 33ff 	mov.w	r3, #4294967295
 8021c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	2312      	movs	r3, #18
 8021c30:	e7b0      	b.n	8021b94 <_dtoa_r+0x26c>
 8021c32:	2301      	movs	r3, #1
 8021c34:	9308      	str	r3, [sp, #32]
 8021c36:	e7f5      	b.n	8021c24 <_dtoa_r+0x2fc>
 8021c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021c3e:	e7b8      	b.n	8021bb2 <_dtoa_r+0x28a>
 8021c40:	3101      	adds	r1, #1
 8021c42:	6041      	str	r1, [r0, #4]
 8021c44:	0052      	lsls	r2, r2, #1
 8021c46:	e7b8      	b.n	8021bba <_dtoa_r+0x292>
 8021c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c4a:	9a01      	ldr	r2, [sp, #4]
 8021c4c:	601a      	str	r2, [r3, #0]
 8021c4e:	9b03      	ldr	r3, [sp, #12]
 8021c50:	2b0e      	cmp	r3, #14
 8021c52:	f200 809d 	bhi.w	8021d90 <_dtoa_r+0x468>
 8021c56:	2d00      	cmp	r5, #0
 8021c58:	f000 809a 	beq.w	8021d90 <_dtoa_r+0x468>
 8021c5c:	9b00      	ldr	r3, [sp, #0]
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	dd32      	ble.n	8021cc8 <_dtoa_r+0x3a0>
 8021c62:	4ab7      	ldr	r2, [pc, #732]	; (8021f40 <_dtoa_r+0x618>)
 8021c64:	f003 030f 	and.w	r3, r3, #15
 8021c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021c70:	9b00      	ldr	r3, [sp, #0]
 8021c72:	05d8      	lsls	r0, r3, #23
 8021c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8021c78:	d516      	bpl.n	8021ca8 <_dtoa_r+0x380>
 8021c7a:	4bb2      	ldr	r3, [pc, #712]	; (8021f44 <_dtoa_r+0x61c>)
 8021c7c:	ec51 0b19 	vmov	r0, r1, d9
 8021c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021c84:	f7de fe0a 	bl	800089c <__aeabi_ddiv>
 8021c88:	f007 070f 	and.w	r7, r7, #15
 8021c8c:	4682      	mov	sl, r0
 8021c8e:	468b      	mov	fp, r1
 8021c90:	2503      	movs	r5, #3
 8021c92:	4eac      	ldr	r6, [pc, #688]	; (8021f44 <_dtoa_r+0x61c>)
 8021c94:	b957      	cbnz	r7, 8021cac <_dtoa_r+0x384>
 8021c96:	4642      	mov	r2, r8
 8021c98:	464b      	mov	r3, r9
 8021c9a:	4650      	mov	r0, sl
 8021c9c:	4659      	mov	r1, fp
 8021c9e:	f7de fdfd 	bl	800089c <__aeabi_ddiv>
 8021ca2:	4682      	mov	sl, r0
 8021ca4:	468b      	mov	fp, r1
 8021ca6:	e028      	b.n	8021cfa <_dtoa_r+0x3d2>
 8021ca8:	2502      	movs	r5, #2
 8021caa:	e7f2      	b.n	8021c92 <_dtoa_r+0x36a>
 8021cac:	07f9      	lsls	r1, r7, #31
 8021cae:	d508      	bpl.n	8021cc2 <_dtoa_r+0x39a>
 8021cb0:	4640      	mov	r0, r8
 8021cb2:	4649      	mov	r1, r9
 8021cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021cb8:	f7de fcc6 	bl	8000648 <__aeabi_dmul>
 8021cbc:	3501      	adds	r5, #1
 8021cbe:	4680      	mov	r8, r0
 8021cc0:	4689      	mov	r9, r1
 8021cc2:	107f      	asrs	r7, r7, #1
 8021cc4:	3608      	adds	r6, #8
 8021cc6:	e7e5      	b.n	8021c94 <_dtoa_r+0x36c>
 8021cc8:	f000 809b 	beq.w	8021e02 <_dtoa_r+0x4da>
 8021ccc:	9b00      	ldr	r3, [sp, #0]
 8021cce:	4f9d      	ldr	r7, [pc, #628]	; (8021f44 <_dtoa_r+0x61c>)
 8021cd0:	425e      	negs	r6, r3
 8021cd2:	4b9b      	ldr	r3, [pc, #620]	; (8021f40 <_dtoa_r+0x618>)
 8021cd4:	f006 020f 	and.w	r2, r6, #15
 8021cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ce0:	ec51 0b19 	vmov	r0, r1, d9
 8021ce4:	f7de fcb0 	bl	8000648 <__aeabi_dmul>
 8021ce8:	1136      	asrs	r6, r6, #4
 8021cea:	4682      	mov	sl, r0
 8021cec:	468b      	mov	fp, r1
 8021cee:	2300      	movs	r3, #0
 8021cf0:	2502      	movs	r5, #2
 8021cf2:	2e00      	cmp	r6, #0
 8021cf4:	d17a      	bne.n	8021dec <_dtoa_r+0x4c4>
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d1d3      	bne.n	8021ca2 <_dtoa_r+0x37a>
 8021cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	f000 8082 	beq.w	8021e06 <_dtoa_r+0x4de>
 8021d02:	4b91      	ldr	r3, [pc, #580]	; (8021f48 <_dtoa_r+0x620>)
 8021d04:	2200      	movs	r2, #0
 8021d06:	4650      	mov	r0, sl
 8021d08:	4659      	mov	r1, fp
 8021d0a:	f7de ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8021d0e:	2800      	cmp	r0, #0
 8021d10:	d079      	beq.n	8021e06 <_dtoa_r+0x4de>
 8021d12:	9b03      	ldr	r3, [sp, #12]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d076      	beq.n	8021e06 <_dtoa_r+0x4de>
 8021d18:	9b02      	ldr	r3, [sp, #8]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	dd36      	ble.n	8021d8c <_dtoa_r+0x464>
 8021d1e:	9b00      	ldr	r3, [sp, #0]
 8021d20:	4650      	mov	r0, sl
 8021d22:	4659      	mov	r1, fp
 8021d24:	1e5f      	subs	r7, r3, #1
 8021d26:	2200      	movs	r2, #0
 8021d28:	4b88      	ldr	r3, [pc, #544]	; (8021f4c <_dtoa_r+0x624>)
 8021d2a:	f7de fc8d 	bl	8000648 <__aeabi_dmul>
 8021d2e:	9e02      	ldr	r6, [sp, #8]
 8021d30:	4682      	mov	sl, r0
 8021d32:	468b      	mov	fp, r1
 8021d34:	3501      	adds	r5, #1
 8021d36:	4628      	mov	r0, r5
 8021d38:	f7de fc1c 	bl	8000574 <__aeabi_i2d>
 8021d3c:	4652      	mov	r2, sl
 8021d3e:	465b      	mov	r3, fp
 8021d40:	f7de fc82 	bl	8000648 <__aeabi_dmul>
 8021d44:	4b82      	ldr	r3, [pc, #520]	; (8021f50 <_dtoa_r+0x628>)
 8021d46:	2200      	movs	r2, #0
 8021d48:	f7de fac8 	bl	80002dc <__adddf3>
 8021d4c:	46d0      	mov	r8, sl
 8021d4e:	46d9      	mov	r9, fp
 8021d50:	4682      	mov	sl, r0
 8021d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8021d56:	2e00      	cmp	r6, #0
 8021d58:	d158      	bne.n	8021e0c <_dtoa_r+0x4e4>
 8021d5a:	4b7e      	ldr	r3, [pc, #504]	; (8021f54 <_dtoa_r+0x62c>)
 8021d5c:	2200      	movs	r2, #0
 8021d5e:	4640      	mov	r0, r8
 8021d60:	4649      	mov	r1, r9
 8021d62:	f7de fab9 	bl	80002d8 <__aeabi_dsub>
 8021d66:	4652      	mov	r2, sl
 8021d68:	465b      	mov	r3, fp
 8021d6a:	4680      	mov	r8, r0
 8021d6c:	4689      	mov	r9, r1
 8021d6e:	f7de fefb 	bl	8000b68 <__aeabi_dcmpgt>
 8021d72:	2800      	cmp	r0, #0
 8021d74:	f040 8295 	bne.w	80222a2 <_dtoa_r+0x97a>
 8021d78:	4652      	mov	r2, sl
 8021d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8021d7e:	4640      	mov	r0, r8
 8021d80:	4649      	mov	r1, r9
 8021d82:	f7de fed3 	bl	8000b2c <__aeabi_dcmplt>
 8021d86:	2800      	cmp	r0, #0
 8021d88:	f040 8289 	bne.w	802229e <_dtoa_r+0x976>
 8021d8c:	ec5b ab19 	vmov	sl, fp, d9
 8021d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	f2c0 8148 	blt.w	8022028 <_dtoa_r+0x700>
 8021d98:	9a00      	ldr	r2, [sp, #0]
 8021d9a:	2a0e      	cmp	r2, #14
 8021d9c:	f300 8144 	bgt.w	8022028 <_dtoa_r+0x700>
 8021da0:	4b67      	ldr	r3, [pc, #412]	; (8021f40 <_dtoa_r+0x618>)
 8021da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	f280 80d5 	bge.w	8021f5c <_dtoa_r+0x634>
 8021db2:	9b03      	ldr	r3, [sp, #12]
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	f300 80d1 	bgt.w	8021f5c <_dtoa_r+0x634>
 8021dba:	f040 826f 	bne.w	802229c <_dtoa_r+0x974>
 8021dbe:	4b65      	ldr	r3, [pc, #404]	; (8021f54 <_dtoa_r+0x62c>)
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	4640      	mov	r0, r8
 8021dc4:	4649      	mov	r1, r9
 8021dc6:	f7de fc3f 	bl	8000648 <__aeabi_dmul>
 8021dca:	4652      	mov	r2, sl
 8021dcc:	465b      	mov	r3, fp
 8021dce:	f7de fec1 	bl	8000b54 <__aeabi_dcmpge>
 8021dd2:	9e03      	ldr	r6, [sp, #12]
 8021dd4:	4637      	mov	r7, r6
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	f040 8245 	bne.w	8022266 <_dtoa_r+0x93e>
 8021ddc:	9d01      	ldr	r5, [sp, #4]
 8021dde:	2331      	movs	r3, #49	; 0x31
 8021de0:	f805 3b01 	strb.w	r3, [r5], #1
 8021de4:	9b00      	ldr	r3, [sp, #0]
 8021de6:	3301      	adds	r3, #1
 8021de8:	9300      	str	r3, [sp, #0]
 8021dea:	e240      	b.n	802226e <_dtoa_r+0x946>
 8021dec:	07f2      	lsls	r2, r6, #31
 8021dee:	d505      	bpl.n	8021dfc <_dtoa_r+0x4d4>
 8021df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021df4:	f7de fc28 	bl	8000648 <__aeabi_dmul>
 8021df8:	3501      	adds	r5, #1
 8021dfa:	2301      	movs	r3, #1
 8021dfc:	1076      	asrs	r6, r6, #1
 8021dfe:	3708      	adds	r7, #8
 8021e00:	e777      	b.n	8021cf2 <_dtoa_r+0x3ca>
 8021e02:	2502      	movs	r5, #2
 8021e04:	e779      	b.n	8021cfa <_dtoa_r+0x3d2>
 8021e06:	9f00      	ldr	r7, [sp, #0]
 8021e08:	9e03      	ldr	r6, [sp, #12]
 8021e0a:	e794      	b.n	8021d36 <_dtoa_r+0x40e>
 8021e0c:	9901      	ldr	r1, [sp, #4]
 8021e0e:	4b4c      	ldr	r3, [pc, #304]	; (8021f40 <_dtoa_r+0x618>)
 8021e10:	4431      	add	r1, r6
 8021e12:	910d      	str	r1, [sp, #52]	; 0x34
 8021e14:	9908      	ldr	r1, [sp, #32]
 8021e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021e1e:	2900      	cmp	r1, #0
 8021e20:	d043      	beq.n	8021eaa <_dtoa_r+0x582>
 8021e22:	494d      	ldr	r1, [pc, #308]	; (8021f58 <_dtoa_r+0x630>)
 8021e24:	2000      	movs	r0, #0
 8021e26:	f7de fd39 	bl	800089c <__aeabi_ddiv>
 8021e2a:	4652      	mov	r2, sl
 8021e2c:	465b      	mov	r3, fp
 8021e2e:	f7de fa53 	bl	80002d8 <__aeabi_dsub>
 8021e32:	9d01      	ldr	r5, [sp, #4]
 8021e34:	4682      	mov	sl, r0
 8021e36:	468b      	mov	fp, r1
 8021e38:	4649      	mov	r1, r9
 8021e3a:	4640      	mov	r0, r8
 8021e3c:	f7de feb4 	bl	8000ba8 <__aeabi_d2iz>
 8021e40:	4606      	mov	r6, r0
 8021e42:	f7de fb97 	bl	8000574 <__aeabi_i2d>
 8021e46:	4602      	mov	r2, r0
 8021e48:	460b      	mov	r3, r1
 8021e4a:	4640      	mov	r0, r8
 8021e4c:	4649      	mov	r1, r9
 8021e4e:	f7de fa43 	bl	80002d8 <__aeabi_dsub>
 8021e52:	3630      	adds	r6, #48	; 0x30
 8021e54:	f805 6b01 	strb.w	r6, [r5], #1
 8021e58:	4652      	mov	r2, sl
 8021e5a:	465b      	mov	r3, fp
 8021e5c:	4680      	mov	r8, r0
 8021e5e:	4689      	mov	r9, r1
 8021e60:	f7de fe64 	bl	8000b2c <__aeabi_dcmplt>
 8021e64:	2800      	cmp	r0, #0
 8021e66:	d163      	bne.n	8021f30 <_dtoa_r+0x608>
 8021e68:	4642      	mov	r2, r8
 8021e6a:	464b      	mov	r3, r9
 8021e6c:	4936      	ldr	r1, [pc, #216]	; (8021f48 <_dtoa_r+0x620>)
 8021e6e:	2000      	movs	r0, #0
 8021e70:	f7de fa32 	bl	80002d8 <__aeabi_dsub>
 8021e74:	4652      	mov	r2, sl
 8021e76:	465b      	mov	r3, fp
 8021e78:	f7de fe58 	bl	8000b2c <__aeabi_dcmplt>
 8021e7c:	2800      	cmp	r0, #0
 8021e7e:	f040 80b5 	bne.w	8021fec <_dtoa_r+0x6c4>
 8021e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e84:	429d      	cmp	r5, r3
 8021e86:	d081      	beq.n	8021d8c <_dtoa_r+0x464>
 8021e88:	4b30      	ldr	r3, [pc, #192]	; (8021f4c <_dtoa_r+0x624>)
 8021e8a:	2200      	movs	r2, #0
 8021e8c:	4650      	mov	r0, sl
 8021e8e:	4659      	mov	r1, fp
 8021e90:	f7de fbda 	bl	8000648 <__aeabi_dmul>
 8021e94:	4b2d      	ldr	r3, [pc, #180]	; (8021f4c <_dtoa_r+0x624>)
 8021e96:	4682      	mov	sl, r0
 8021e98:	468b      	mov	fp, r1
 8021e9a:	4640      	mov	r0, r8
 8021e9c:	4649      	mov	r1, r9
 8021e9e:	2200      	movs	r2, #0
 8021ea0:	f7de fbd2 	bl	8000648 <__aeabi_dmul>
 8021ea4:	4680      	mov	r8, r0
 8021ea6:	4689      	mov	r9, r1
 8021ea8:	e7c6      	b.n	8021e38 <_dtoa_r+0x510>
 8021eaa:	4650      	mov	r0, sl
 8021eac:	4659      	mov	r1, fp
 8021eae:	f7de fbcb 	bl	8000648 <__aeabi_dmul>
 8021eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021eb4:	9d01      	ldr	r5, [sp, #4]
 8021eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8021eb8:	4682      	mov	sl, r0
 8021eba:	468b      	mov	fp, r1
 8021ebc:	4649      	mov	r1, r9
 8021ebe:	4640      	mov	r0, r8
 8021ec0:	f7de fe72 	bl	8000ba8 <__aeabi_d2iz>
 8021ec4:	4606      	mov	r6, r0
 8021ec6:	f7de fb55 	bl	8000574 <__aeabi_i2d>
 8021eca:	3630      	adds	r6, #48	; 0x30
 8021ecc:	4602      	mov	r2, r0
 8021ece:	460b      	mov	r3, r1
 8021ed0:	4640      	mov	r0, r8
 8021ed2:	4649      	mov	r1, r9
 8021ed4:	f7de fa00 	bl	80002d8 <__aeabi_dsub>
 8021ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8021edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ede:	429d      	cmp	r5, r3
 8021ee0:	4680      	mov	r8, r0
 8021ee2:	4689      	mov	r9, r1
 8021ee4:	f04f 0200 	mov.w	r2, #0
 8021ee8:	d124      	bne.n	8021f34 <_dtoa_r+0x60c>
 8021eea:	4b1b      	ldr	r3, [pc, #108]	; (8021f58 <_dtoa_r+0x630>)
 8021eec:	4650      	mov	r0, sl
 8021eee:	4659      	mov	r1, fp
 8021ef0:	f7de f9f4 	bl	80002dc <__adddf3>
 8021ef4:	4602      	mov	r2, r0
 8021ef6:	460b      	mov	r3, r1
 8021ef8:	4640      	mov	r0, r8
 8021efa:	4649      	mov	r1, r9
 8021efc:	f7de fe34 	bl	8000b68 <__aeabi_dcmpgt>
 8021f00:	2800      	cmp	r0, #0
 8021f02:	d173      	bne.n	8021fec <_dtoa_r+0x6c4>
 8021f04:	4652      	mov	r2, sl
 8021f06:	465b      	mov	r3, fp
 8021f08:	4913      	ldr	r1, [pc, #76]	; (8021f58 <_dtoa_r+0x630>)
 8021f0a:	2000      	movs	r0, #0
 8021f0c:	f7de f9e4 	bl	80002d8 <__aeabi_dsub>
 8021f10:	4602      	mov	r2, r0
 8021f12:	460b      	mov	r3, r1
 8021f14:	4640      	mov	r0, r8
 8021f16:	4649      	mov	r1, r9
 8021f18:	f7de fe08 	bl	8000b2c <__aeabi_dcmplt>
 8021f1c:	2800      	cmp	r0, #0
 8021f1e:	f43f af35 	beq.w	8021d8c <_dtoa_r+0x464>
 8021f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021f24:	1e6b      	subs	r3, r5, #1
 8021f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021f2c:	2b30      	cmp	r3, #48	; 0x30
 8021f2e:	d0f8      	beq.n	8021f22 <_dtoa_r+0x5fa>
 8021f30:	9700      	str	r7, [sp, #0]
 8021f32:	e049      	b.n	8021fc8 <_dtoa_r+0x6a0>
 8021f34:	4b05      	ldr	r3, [pc, #20]	; (8021f4c <_dtoa_r+0x624>)
 8021f36:	f7de fb87 	bl	8000648 <__aeabi_dmul>
 8021f3a:	4680      	mov	r8, r0
 8021f3c:	4689      	mov	r9, r1
 8021f3e:	e7bd      	b.n	8021ebc <_dtoa_r+0x594>
 8021f40:	080253c0 	.word	0x080253c0
 8021f44:	08025398 	.word	0x08025398
 8021f48:	3ff00000 	.word	0x3ff00000
 8021f4c:	40240000 	.word	0x40240000
 8021f50:	401c0000 	.word	0x401c0000
 8021f54:	40140000 	.word	0x40140000
 8021f58:	3fe00000 	.word	0x3fe00000
 8021f5c:	9d01      	ldr	r5, [sp, #4]
 8021f5e:	4656      	mov	r6, sl
 8021f60:	465f      	mov	r7, fp
 8021f62:	4642      	mov	r2, r8
 8021f64:	464b      	mov	r3, r9
 8021f66:	4630      	mov	r0, r6
 8021f68:	4639      	mov	r1, r7
 8021f6a:	f7de fc97 	bl	800089c <__aeabi_ddiv>
 8021f6e:	f7de fe1b 	bl	8000ba8 <__aeabi_d2iz>
 8021f72:	4682      	mov	sl, r0
 8021f74:	f7de fafe 	bl	8000574 <__aeabi_i2d>
 8021f78:	4642      	mov	r2, r8
 8021f7a:	464b      	mov	r3, r9
 8021f7c:	f7de fb64 	bl	8000648 <__aeabi_dmul>
 8021f80:	4602      	mov	r2, r0
 8021f82:	460b      	mov	r3, r1
 8021f84:	4630      	mov	r0, r6
 8021f86:	4639      	mov	r1, r7
 8021f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021f8c:	f7de f9a4 	bl	80002d8 <__aeabi_dsub>
 8021f90:	f805 6b01 	strb.w	r6, [r5], #1
 8021f94:	9e01      	ldr	r6, [sp, #4]
 8021f96:	9f03      	ldr	r7, [sp, #12]
 8021f98:	1bae      	subs	r6, r5, r6
 8021f9a:	42b7      	cmp	r7, r6
 8021f9c:	4602      	mov	r2, r0
 8021f9e:	460b      	mov	r3, r1
 8021fa0:	d135      	bne.n	802200e <_dtoa_r+0x6e6>
 8021fa2:	f7de f99b 	bl	80002dc <__adddf3>
 8021fa6:	4642      	mov	r2, r8
 8021fa8:	464b      	mov	r3, r9
 8021faa:	4606      	mov	r6, r0
 8021fac:	460f      	mov	r7, r1
 8021fae:	f7de fddb 	bl	8000b68 <__aeabi_dcmpgt>
 8021fb2:	b9d0      	cbnz	r0, 8021fea <_dtoa_r+0x6c2>
 8021fb4:	4642      	mov	r2, r8
 8021fb6:	464b      	mov	r3, r9
 8021fb8:	4630      	mov	r0, r6
 8021fba:	4639      	mov	r1, r7
 8021fbc:	f7de fdac 	bl	8000b18 <__aeabi_dcmpeq>
 8021fc0:	b110      	cbz	r0, 8021fc8 <_dtoa_r+0x6a0>
 8021fc2:	f01a 0f01 	tst.w	sl, #1
 8021fc6:	d110      	bne.n	8021fea <_dtoa_r+0x6c2>
 8021fc8:	4620      	mov	r0, r4
 8021fca:	ee18 1a10 	vmov	r1, s16
 8021fce:	f000 fd05 	bl	80229dc <_Bfree>
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	9800      	ldr	r0, [sp, #0]
 8021fd6:	702b      	strb	r3, [r5, #0]
 8021fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fda:	3001      	adds	r0, #1
 8021fdc:	6018      	str	r0, [r3, #0]
 8021fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	f43f acf1 	beq.w	80219c8 <_dtoa_r+0xa0>
 8021fe6:	601d      	str	r5, [r3, #0]
 8021fe8:	e4ee      	b.n	80219c8 <_dtoa_r+0xa0>
 8021fea:	9f00      	ldr	r7, [sp, #0]
 8021fec:	462b      	mov	r3, r5
 8021fee:	461d      	mov	r5, r3
 8021ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ff4:	2a39      	cmp	r2, #57	; 0x39
 8021ff6:	d106      	bne.n	8022006 <_dtoa_r+0x6de>
 8021ff8:	9a01      	ldr	r2, [sp, #4]
 8021ffa:	429a      	cmp	r2, r3
 8021ffc:	d1f7      	bne.n	8021fee <_dtoa_r+0x6c6>
 8021ffe:	9901      	ldr	r1, [sp, #4]
 8022000:	2230      	movs	r2, #48	; 0x30
 8022002:	3701      	adds	r7, #1
 8022004:	700a      	strb	r2, [r1, #0]
 8022006:	781a      	ldrb	r2, [r3, #0]
 8022008:	3201      	adds	r2, #1
 802200a:	701a      	strb	r2, [r3, #0]
 802200c:	e790      	b.n	8021f30 <_dtoa_r+0x608>
 802200e:	4ba6      	ldr	r3, [pc, #664]	; (80222a8 <_dtoa_r+0x980>)
 8022010:	2200      	movs	r2, #0
 8022012:	f7de fb19 	bl	8000648 <__aeabi_dmul>
 8022016:	2200      	movs	r2, #0
 8022018:	2300      	movs	r3, #0
 802201a:	4606      	mov	r6, r0
 802201c:	460f      	mov	r7, r1
 802201e:	f7de fd7b 	bl	8000b18 <__aeabi_dcmpeq>
 8022022:	2800      	cmp	r0, #0
 8022024:	d09d      	beq.n	8021f62 <_dtoa_r+0x63a>
 8022026:	e7cf      	b.n	8021fc8 <_dtoa_r+0x6a0>
 8022028:	9a08      	ldr	r2, [sp, #32]
 802202a:	2a00      	cmp	r2, #0
 802202c:	f000 80d7 	beq.w	80221de <_dtoa_r+0x8b6>
 8022030:	9a06      	ldr	r2, [sp, #24]
 8022032:	2a01      	cmp	r2, #1
 8022034:	f300 80ba 	bgt.w	80221ac <_dtoa_r+0x884>
 8022038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802203a:	2a00      	cmp	r2, #0
 802203c:	f000 80b2 	beq.w	80221a4 <_dtoa_r+0x87c>
 8022040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022044:	9e07      	ldr	r6, [sp, #28]
 8022046:	9d04      	ldr	r5, [sp, #16]
 8022048:	9a04      	ldr	r2, [sp, #16]
 802204a:	441a      	add	r2, r3
 802204c:	9204      	str	r2, [sp, #16]
 802204e:	9a05      	ldr	r2, [sp, #20]
 8022050:	2101      	movs	r1, #1
 8022052:	441a      	add	r2, r3
 8022054:	4620      	mov	r0, r4
 8022056:	9205      	str	r2, [sp, #20]
 8022058:	f000 fd78 	bl	8022b4c <__i2b>
 802205c:	4607      	mov	r7, r0
 802205e:	2d00      	cmp	r5, #0
 8022060:	dd0c      	ble.n	802207c <_dtoa_r+0x754>
 8022062:	9b05      	ldr	r3, [sp, #20]
 8022064:	2b00      	cmp	r3, #0
 8022066:	dd09      	ble.n	802207c <_dtoa_r+0x754>
 8022068:	42ab      	cmp	r3, r5
 802206a:	9a04      	ldr	r2, [sp, #16]
 802206c:	bfa8      	it	ge
 802206e:	462b      	movge	r3, r5
 8022070:	1ad2      	subs	r2, r2, r3
 8022072:	9204      	str	r2, [sp, #16]
 8022074:	9a05      	ldr	r2, [sp, #20]
 8022076:	1aed      	subs	r5, r5, r3
 8022078:	1ad3      	subs	r3, r2, r3
 802207a:	9305      	str	r3, [sp, #20]
 802207c:	9b07      	ldr	r3, [sp, #28]
 802207e:	b31b      	cbz	r3, 80220c8 <_dtoa_r+0x7a0>
 8022080:	9b08      	ldr	r3, [sp, #32]
 8022082:	2b00      	cmp	r3, #0
 8022084:	f000 80af 	beq.w	80221e6 <_dtoa_r+0x8be>
 8022088:	2e00      	cmp	r6, #0
 802208a:	dd13      	ble.n	80220b4 <_dtoa_r+0x78c>
 802208c:	4639      	mov	r1, r7
 802208e:	4632      	mov	r2, r6
 8022090:	4620      	mov	r0, r4
 8022092:	f000 fe1b 	bl	8022ccc <__pow5mult>
 8022096:	ee18 2a10 	vmov	r2, s16
 802209a:	4601      	mov	r1, r0
 802209c:	4607      	mov	r7, r0
 802209e:	4620      	mov	r0, r4
 80220a0:	f000 fd6a 	bl	8022b78 <__multiply>
 80220a4:	ee18 1a10 	vmov	r1, s16
 80220a8:	4680      	mov	r8, r0
 80220aa:	4620      	mov	r0, r4
 80220ac:	f000 fc96 	bl	80229dc <_Bfree>
 80220b0:	ee08 8a10 	vmov	s16, r8
 80220b4:	9b07      	ldr	r3, [sp, #28]
 80220b6:	1b9a      	subs	r2, r3, r6
 80220b8:	d006      	beq.n	80220c8 <_dtoa_r+0x7a0>
 80220ba:	ee18 1a10 	vmov	r1, s16
 80220be:	4620      	mov	r0, r4
 80220c0:	f000 fe04 	bl	8022ccc <__pow5mult>
 80220c4:	ee08 0a10 	vmov	s16, r0
 80220c8:	2101      	movs	r1, #1
 80220ca:	4620      	mov	r0, r4
 80220cc:	f000 fd3e 	bl	8022b4c <__i2b>
 80220d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	4606      	mov	r6, r0
 80220d6:	f340 8088 	ble.w	80221ea <_dtoa_r+0x8c2>
 80220da:	461a      	mov	r2, r3
 80220dc:	4601      	mov	r1, r0
 80220de:	4620      	mov	r0, r4
 80220e0:	f000 fdf4 	bl	8022ccc <__pow5mult>
 80220e4:	9b06      	ldr	r3, [sp, #24]
 80220e6:	2b01      	cmp	r3, #1
 80220e8:	4606      	mov	r6, r0
 80220ea:	f340 8081 	ble.w	80221f0 <_dtoa_r+0x8c8>
 80220ee:	f04f 0800 	mov.w	r8, #0
 80220f2:	6933      	ldr	r3, [r6, #16]
 80220f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80220f8:	6918      	ldr	r0, [r3, #16]
 80220fa:	f000 fcd7 	bl	8022aac <__hi0bits>
 80220fe:	f1c0 0020 	rsb	r0, r0, #32
 8022102:	9b05      	ldr	r3, [sp, #20]
 8022104:	4418      	add	r0, r3
 8022106:	f010 001f 	ands.w	r0, r0, #31
 802210a:	f000 8092 	beq.w	8022232 <_dtoa_r+0x90a>
 802210e:	f1c0 0320 	rsb	r3, r0, #32
 8022112:	2b04      	cmp	r3, #4
 8022114:	f340 808a 	ble.w	802222c <_dtoa_r+0x904>
 8022118:	f1c0 001c 	rsb	r0, r0, #28
 802211c:	9b04      	ldr	r3, [sp, #16]
 802211e:	4403      	add	r3, r0
 8022120:	9304      	str	r3, [sp, #16]
 8022122:	9b05      	ldr	r3, [sp, #20]
 8022124:	4403      	add	r3, r0
 8022126:	4405      	add	r5, r0
 8022128:	9305      	str	r3, [sp, #20]
 802212a:	9b04      	ldr	r3, [sp, #16]
 802212c:	2b00      	cmp	r3, #0
 802212e:	dd07      	ble.n	8022140 <_dtoa_r+0x818>
 8022130:	ee18 1a10 	vmov	r1, s16
 8022134:	461a      	mov	r2, r3
 8022136:	4620      	mov	r0, r4
 8022138:	f000 fe22 	bl	8022d80 <__lshift>
 802213c:	ee08 0a10 	vmov	s16, r0
 8022140:	9b05      	ldr	r3, [sp, #20]
 8022142:	2b00      	cmp	r3, #0
 8022144:	dd05      	ble.n	8022152 <_dtoa_r+0x82a>
 8022146:	4631      	mov	r1, r6
 8022148:	461a      	mov	r2, r3
 802214a:	4620      	mov	r0, r4
 802214c:	f000 fe18 	bl	8022d80 <__lshift>
 8022150:	4606      	mov	r6, r0
 8022152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022154:	2b00      	cmp	r3, #0
 8022156:	d06e      	beq.n	8022236 <_dtoa_r+0x90e>
 8022158:	ee18 0a10 	vmov	r0, s16
 802215c:	4631      	mov	r1, r6
 802215e:	f000 fe7f 	bl	8022e60 <__mcmp>
 8022162:	2800      	cmp	r0, #0
 8022164:	da67      	bge.n	8022236 <_dtoa_r+0x90e>
 8022166:	9b00      	ldr	r3, [sp, #0]
 8022168:	3b01      	subs	r3, #1
 802216a:	ee18 1a10 	vmov	r1, s16
 802216e:	9300      	str	r3, [sp, #0]
 8022170:	220a      	movs	r2, #10
 8022172:	2300      	movs	r3, #0
 8022174:	4620      	mov	r0, r4
 8022176:	f000 fc53 	bl	8022a20 <__multadd>
 802217a:	9b08      	ldr	r3, [sp, #32]
 802217c:	ee08 0a10 	vmov	s16, r0
 8022180:	2b00      	cmp	r3, #0
 8022182:	f000 81b1 	beq.w	80224e8 <_dtoa_r+0xbc0>
 8022186:	2300      	movs	r3, #0
 8022188:	4639      	mov	r1, r7
 802218a:	220a      	movs	r2, #10
 802218c:	4620      	mov	r0, r4
 802218e:	f000 fc47 	bl	8022a20 <__multadd>
 8022192:	9b02      	ldr	r3, [sp, #8]
 8022194:	2b00      	cmp	r3, #0
 8022196:	4607      	mov	r7, r0
 8022198:	f300 808e 	bgt.w	80222b8 <_dtoa_r+0x990>
 802219c:	9b06      	ldr	r3, [sp, #24]
 802219e:	2b02      	cmp	r3, #2
 80221a0:	dc51      	bgt.n	8022246 <_dtoa_r+0x91e>
 80221a2:	e089      	b.n	80222b8 <_dtoa_r+0x990>
 80221a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80221aa:	e74b      	b.n	8022044 <_dtoa_r+0x71c>
 80221ac:	9b03      	ldr	r3, [sp, #12]
 80221ae:	1e5e      	subs	r6, r3, #1
 80221b0:	9b07      	ldr	r3, [sp, #28]
 80221b2:	42b3      	cmp	r3, r6
 80221b4:	bfbf      	itttt	lt
 80221b6:	9b07      	ldrlt	r3, [sp, #28]
 80221b8:	9607      	strlt	r6, [sp, #28]
 80221ba:	1af2      	sublt	r2, r6, r3
 80221bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80221be:	bfb6      	itet	lt
 80221c0:	189b      	addlt	r3, r3, r2
 80221c2:	1b9e      	subge	r6, r3, r6
 80221c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80221c6:	9b03      	ldr	r3, [sp, #12]
 80221c8:	bfb8      	it	lt
 80221ca:	2600      	movlt	r6, #0
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	bfb7      	itett	lt
 80221d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80221d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80221d8:	1a9d      	sublt	r5, r3, r2
 80221da:	2300      	movlt	r3, #0
 80221dc:	e734      	b.n	8022048 <_dtoa_r+0x720>
 80221de:	9e07      	ldr	r6, [sp, #28]
 80221e0:	9d04      	ldr	r5, [sp, #16]
 80221e2:	9f08      	ldr	r7, [sp, #32]
 80221e4:	e73b      	b.n	802205e <_dtoa_r+0x736>
 80221e6:	9a07      	ldr	r2, [sp, #28]
 80221e8:	e767      	b.n	80220ba <_dtoa_r+0x792>
 80221ea:	9b06      	ldr	r3, [sp, #24]
 80221ec:	2b01      	cmp	r3, #1
 80221ee:	dc18      	bgt.n	8022222 <_dtoa_r+0x8fa>
 80221f0:	f1ba 0f00 	cmp.w	sl, #0
 80221f4:	d115      	bne.n	8022222 <_dtoa_r+0x8fa>
 80221f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80221fa:	b993      	cbnz	r3, 8022222 <_dtoa_r+0x8fa>
 80221fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8022200:	0d1b      	lsrs	r3, r3, #20
 8022202:	051b      	lsls	r3, r3, #20
 8022204:	b183      	cbz	r3, 8022228 <_dtoa_r+0x900>
 8022206:	9b04      	ldr	r3, [sp, #16]
 8022208:	3301      	adds	r3, #1
 802220a:	9304      	str	r3, [sp, #16]
 802220c:	9b05      	ldr	r3, [sp, #20]
 802220e:	3301      	adds	r3, #1
 8022210:	9305      	str	r3, [sp, #20]
 8022212:	f04f 0801 	mov.w	r8, #1
 8022216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022218:	2b00      	cmp	r3, #0
 802221a:	f47f af6a 	bne.w	80220f2 <_dtoa_r+0x7ca>
 802221e:	2001      	movs	r0, #1
 8022220:	e76f      	b.n	8022102 <_dtoa_r+0x7da>
 8022222:	f04f 0800 	mov.w	r8, #0
 8022226:	e7f6      	b.n	8022216 <_dtoa_r+0x8ee>
 8022228:	4698      	mov	r8, r3
 802222a:	e7f4      	b.n	8022216 <_dtoa_r+0x8ee>
 802222c:	f43f af7d 	beq.w	802212a <_dtoa_r+0x802>
 8022230:	4618      	mov	r0, r3
 8022232:	301c      	adds	r0, #28
 8022234:	e772      	b.n	802211c <_dtoa_r+0x7f4>
 8022236:	9b03      	ldr	r3, [sp, #12]
 8022238:	2b00      	cmp	r3, #0
 802223a:	dc37      	bgt.n	80222ac <_dtoa_r+0x984>
 802223c:	9b06      	ldr	r3, [sp, #24]
 802223e:	2b02      	cmp	r3, #2
 8022240:	dd34      	ble.n	80222ac <_dtoa_r+0x984>
 8022242:	9b03      	ldr	r3, [sp, #12]
 8022244:	9302      	str	r3, [sp, #8]
 8022246:	9b02      	ldr	r3, [sp, #8]
 8022248:	b96b      	cbnz	r3, 8022266 <_dtoa_r+0x93e>
 802224a:	4631      	mov	r1, r6
 802224c:	2205      	movs	r2, #5
 802224e:	4620      	mov	r0, r4
 8022250:	f000 fbe6 	bl	8022a20 <__multadd>
 8022254:	4601      	mov	r1, r0
 8022256:	4606      	mov	r6, r0
 8022258:	ee18 0a10 	vmov	r0, s16
 802225c:	f000 fe00 	bl	8022e60 <__mcmp>
 8022260:	2800      	cmp	r0, #0
 8022262:	f73f adbb 	bgt.w	8021ddc <_dtoa_r+0x4b4>
 8022266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022268:	9d01      	ldr	r5, [sp, #4]
 802226a:	43db      	mvns	r3, r3
 802226c:	9300      	str	r3, [sp, #0]
 802226e:	f04f 0800 	mov.w	r8, #0
 8022272:	4631      	mov	r1, r6
 8022274:	4620      	mov	r0, r4
 8022276:	f000 fbb1 	bl	80229dc <_Bfree>
 802227a:	2f00      	cmp	r7, #0
 802227c:	f43f aea4 	beq.w	8021fc8 <_dtoa_r+0x6a0>
 8022280:	f1b8 0f00 	cmp.w	r8, #0
 8022284:	d005      	beq.n	8022292 <_dtoa_r+0x96a>
 8022286:	45b8      	cmp	r8, r7
 8022288:	d003      	beq.n	8022292 <_dtoa_r+0x96a>
 802228a:	4641      	mov	r1, r8
 802228c:	4620      	mov	r0, r4
 802228e:	f000 fba5 	bl	80229dc <_Bfree>
 8022292:	4639      	mov	r1, r7
 8022294:	4620      	mov	r0, r4
 8022296:	f000 fba1 	bl	80229dc <_Bfree>
 802229a:	e695      	b.n	8021fc8 <_dtoa_r+0x6a0>
 802229c:	2600      	movs	r6, #0
 802229e:	4637      	mov	r7, r6
 80222a0:	e7e1      	b.n	8022266 <_dtoa_r+0x93e>
 80222a2:	9700      	str	r7, [sp, #0]
 80222a4:	4637      	mov	r7, r6
 80222a6:	e599      	b.n	8021ddc <_dtoa_r+0x4b4>
 80222a8:	40240000 	.word	0x40240000
 80222ac:	9b08      	ldr	r3, [sp, #32]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	f000 80ca 	beq.w	8022448 <_dtoa_r+0xb20>
 80222b4:	9b03      	ldr	r3, [sp, #12]
 80222b6:	9302      	str	r3, [sp, #8]
 80222b8:	2d00      	cmp	r5, #0
 80222ba:	dd05      	ble.n	80222c8 <_dtoa_r+0x9a0>
 80222bc:	4639      	mov	r1, r7
 80222be:	462a      	mov	r2, r5
 80222c0:	4620      	mov	r0, r4
 80222c2:	f000 fd5d 	bl	8022d80 <__lshift>
 80222c6:	4607      	mov	r7, r0
 80222c8:	f1b8 0f00 	cmp.w	r8, #0
 80222cc:	d05b      	beq.n	8022386 <_dtoa_r+0xa5e>
 80222ce:	6879      	ldr	r1, [r7, #4]
 80222d0:	4620      	mov	r0, r4
 80222d2:	f000 fb43 	bl	802295c <_Balloc>
 80222d6:	4605      	mov	r5, r0
 80222d8:	b928      	cbnz	r0, 80222e6 <_dtoa_r+0x9be>
 80222da:	4b87      	ldr	r3, [pc, #540]	; (80224f8 <_dtoa_r+0xbd0>)
 80222dc:	4602      	mov	r2, r0
 80222de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80222e2:	f7ff bb3b 	b.w	802195c <_dtoa_r+0x34>
 80222e6:	693a      	ldr	r2, [r7, #16]
 80222e8:	3202      	adds	r2, #2
 80222ea:	0092      	lsls	r2, r2, #2
 80222ec:	f107 010c 	add.w	r1, r7, #12
 80222f0:	300c      	adds	r0, #12
 80222f2:	f7fe fca9 	bl	8020c48 <memcpy>
 80222f6:	2201      	movs	r2, #1
 80222f8:	4629      	mov	r1, r5
 80222fa:	4620      	mov	r0, r4
 80222fc:	f000 fd40 	bl	8022d80 <__lshift>
 8022300:	9b01      	ldr	r3, [sp, #4]
 8022302:	f103 0901 	add.w	r9, r3, #1
 8022306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802230a:	4413      	add	r3, r2
 802230c:	9305      	str	r3, [sp, #20]
 802230e:	f00a 0301 	and.w	r3, sl, #1
 8022312:	46b8      	mov	r8, r7
 8022314:	9304      	str	r3, [sp, #16]
 8022316:	4607      	mov	r7, r0
 8022318:	4631      	mov	r1, r6
 802231a:	ee18 0a10 	vmov	r0, s16
 802231e:	f7ff fa77 	bl	8021810 <quorem>
 8022322:	4641      	mov	r1, r8
 8022324:	9002      	str	r0, [sp, #8]
 8022326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802232a:	ee18 0a10 	vmov	r0, s16
 802232e:	f000 fd97 	bl	8022e60 <__mcmp>
 8022332:	463a      	mov	r2, r7
 8022334:	9003      	str	r0, [sp, #12]
 8022336:	4631      	mov	r1, r6
 8022338:	4620      	mov	r0, r4
 802233a:	f000 fdad 	bl	8022e98 <__mdiff>
 802233e:	68c2      	ldr	r2, [r0, #12]
 8022340:	f109 3bff 	add.w	fp, r9, #4294967295
 8022344:	4605      	mov	r5, r0
 8022346:	bb02      	cbnz	r2, 802238a <_dtoa_r+0xa62>
 8022348:	4601      	mov	r1, r0
 802234a:	ee18 0a10 	vmov	r0, s16
 802234e:	f000 fd87 	bl	8022e60 <__mcmp>
 8022352:	4602      	mov	r2, r0
 8022354:	4629      	mov	r1, r5
 8022356:	4620      	mov	r0, r4
 8022358:	9207      	str	r2, [sp, #28]
 802235a:	f000 fb3f 	bl	80229dc <_Bfree>
 802235e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8022362:	ea43 0102 	orr.w	r1, r3, r2
 8022366:	9b04      	ldr	r3, [sp, #16]
 8022368:	430b      	orrs	r3, r1
 802236a:	464d      	mov	r5, r9
 802236c:	d10f      	bne.n	802238e <_dtoa_r+0xa66>
 802236e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8022372:	d02a      	beq.n	80223ca <_dtoa_r+0xaa2>
 8022374:	9b03      	ldr	r3, [sp, #12]
 8022376:	2b00      	cmp	r3, #0
 8022378:	dd02      	ble.n	8022380 <_dtoa_r+0xa58>
 802237a:	9b02      	ldr	r3, [sp, #8]
 802237c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8022380:	f88b a000 	strb.w	sl, [fp]
 8022384:	e775      	b.n	8022272 <_dtoa_r+0x94a>
 8022386:	4638      	mov	r0, r7
 8022388:	e7ba      	b.n	8022300 <_dtoa_r+0x9d8>
 802238a:	2201      	movs	r2, #1
 802238c:	e7e2      	b.n	8022354 <_dtoa_r+0xa2c>
 802238e:	9b03      	ldr	r3, [sp, #12]
 8022390:	2b00      	cmp	r3, #0
 8022392:	db04      	blt.n	802239e <_dtoa_r+0xa76>
 8022394:	9906      	ldr	r1, [sp, #24]
 8022396:	430b      	orrs	r3, r1
 8022398:	9904      	ldr	r1, [sp, #16]
 802239a:	430b      	orrs	r3, r1
 802239c:	d122      	bne.n	80223e4 <_dtoa_r+0xabc>
 802239e:	2a00      	cmp	r2, #0
 80223a0:	ddee      	ble.n	8022380 <_dtoa_r+0xa58>
 80223a2:	ee18 1a10 	vmov	r1, s16
 80223a6:	2201      	movs	r2, #1
 80223a8:	4620      	mov	r0, r4
 80223aa:	f000 fce9 	bl	8022d80 <__lshift>
 80223ae:	4631      	mov	r1, r6
 80223b0:	ee08 0a10 	vmov	s16, r0
 80223b4:	f000 fd54 	bl	8022e60 <__mcmp>
 80223b8:	2800      	cmp	r0, #0
 80223ba:	dc03      	bgt.n	80223c4 <_dtoa_r+0xa9c>
 80223bc:	d1e0      	bne.n	8022380 <_dtoa_r+0xa58>
 80223be:	f01a 0f01 	tst.w	sl, #1
 80223c2:	d0dd      	beq.n	8022380 <_dtoa_r+0xa58>
 80223c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80223c8:	d1d7      	bne.n	802237a <_dtoa_r+0xa52>
 80223ca:	2339      	movs	r3, #57	; 0x39
 80223cc:	f88b 3000 	strb.w	r3, [fp]
 80223d0:	462b      	mov	r3, r5
 80223d2:	461d      	mov	r5, r3
 80223d4:	3b01      	subs	r3, #1
 80223d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80223da:	2a39      	cmp	r2, #57	; 0x39
 80223dc:	d071      	beq.n	80224c2 <_dtoa_r+0xb9a>
 80223de:	3201      	adds	r2, #1
 80223e0:	701a      	strb	r2, [r3, #0]
 80223e2:	e746      	b.n	8022272 <_dtoa_r+0x94a>
 80223e4:	2a00      	cmp	r2, #0
 80223e6:	dd07      	ble.n	80223f8 <_dtoa_r+0xad0>
 80223e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80223ec:	d0ed      	beq.n	80223ca <_dtoa_r+0xaa2>
 80223ee:	f10a 0301 	add.w	r3, sl, #1
 80223f2:	f88b 3000 	strb.w	r3, [fp]
 80223f6:	e73c      	b.n	8022272 <_dtoa_r+0x94a>
 80223f8:	9b05      	ldr	r3, [sp, #20]
 80223fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80223fe:	4599      	cmp	r9, r3
 8022400:	d047      	beq.n	8022492 <_dtoa_r+0xb6a>
 8022402:	ee18 1a10 	vmov	r1, s16
 8022406:	2300      	movs	r3, #0
 8022408:	220a      	movs	r2, #10
 802240a:	4620      	mov	r0, r4
 802240c:	f000 fb08 	bl	8022a20 <__multadd>
 8022410:	45b8      	cmp	r8, r7
 8022412:	ee08 0a10 	vmov	s16, r0
 8022416:	f04f 0300 	mov.w	r3, #0
 802241a:	f04f 020a 	mov.w	r2, #10
 802241e:	4641      	mov	r1, r8
 8022420:	4620      	mov	r0, r4
 8022422:	d106      	bne.n	8022432 <_dtoa_r+0xb0a>
 8022424:	f000 fafc 	bl	8022a20 <__multadd>
 8022428:	4680      	mov	r8, r0
 802242a:	4607      	mov	r7, r0
 802242c:	f109 0901 	add.w	r9, r9, #1
 8022430:	e772      	b.n	8022318 <_dtoa_r+0x9f0>
 8022432:	f000 faf5 	bl	8022a20 <__multadd>
 8022436:	4639      	mov	r1, r7
 8022438:	4680      	mov	r8, r0
 802243a:	2300      	movs	r3, #0
 802243c:	220a      	movs	r2, #10
 802243e:	4620      	mov	r0, r4
 8022440:	f000 faee 	bl	8022a20 <__multadd>
 8022444:	4607      	mov	r7, r0
 8022446:	e7f1      	b.n	802242c <_dtoa_r+0xb04>
 8022448:	9b03      	ldr	r3, [sp, #12]
 802244a:	9302      	str	r3, [sp, #8]
 802244c:	9d01      	ldr	r5, [sp, #4]
 802244e:	ee18 0a10 	vmov	r0, s16
 8022452:	4631      	mov	r1, r6
 8022454:	f7ff f9dc 	bl	8021810 <quorem>
 8022458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802245c:	9b01      	ldr	r3, [sp, #4]
 802245e:	f805 ab01 	strb.w	sl, [r5], #1
 8022462:	1aea      	subs	r2, r5, r3
 8022464:	9b02      	ldr	r3, [sp, #8]
 8022466:	4293      	cmp	r3, r2
 8022468:	dd09      	ble.n	802247e <_dtoa_r+0xb56>
 802246a:	ee18 1a10 	vmov	r1, s16
 802246e:	2300      	movs	r3, #0
 8022470:	220a      	movs	r2, #10
 8022472:	4620      	mov	r0, r4
 8022474:	f000 fad4 	bl	8022a20 <__multadd>
 8022478:	ee08 0a10 	vmov	s16, r0
 802247c:	e7e7      	b.n	802244e <_dtoa_r+0xb26>
 802247e:	9b02      	ldr	r3, [sp, #8]
 8022480:	2b00      	cmp	r3, #0
 8022482:	bfc8      	it	gt
 8022484:	461d      	movgt	r5, r3
 8022486:	9b01      	ldr	r3, [sp, #4]
 8022488:	bfd8      	it	le
 802248a:	2501      	movle	r5, #1
 802248c:	441d      	add	r5, r3
 802248e:	f04f 0800 	mov.w	r8, #0
 8022492:	ee18 1a10 	vmov	r1, s16
 8022496:	2201      	movs	r2, #1
 8022498:	4620      	mov	r0, r4
 802249a:	f000 fc71 	bl	8022d80 <__lshift>
 802249e:	4631      	mov	r1, r6
 80224a0:	ee08 0a10 	vmov	s16, r0
 80224a4:	f000 fcdc 	bl	8022e60 <__mcmp>
 80224a8:	2800      	cmp	r0, #0
 80224aa:	dc91      	bgt.n	80223d0 <_dtoa_r+0xaa8>
 80224ac:	d102      	bne.n	80224b4 <_dtoa_r+0xb8c>
 80224ae:	f01a 0f01 	tst.w	sl, #1
 80224b2:	d18d      	bne.n	80223d0 <_dtoa_r+0xaa8>
 80224b4:	462b      	mov	r3, r5
 80224b6:	461d      	mov	r5, r3
 80224b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80224bc:	2a30      	cmp	r2, #48	; 0x30
 80224be:	d0fa      	beq.n	80224b6 <_dtoa_r+0xb8e>
 80224c0:	e6d7      	b.n	8022272 <_dtoa_r+0x94a>
 80224c2:	9a01      	ldr	r2, [sp, #4]
 80224c4:	429a      	cmp	r2, r3
 80224c6:	d184      	bne.n	80223d2 <_dtoa_r+0xaaa>
 80224c8:	9b00      	ldr	r3, [sp, #0]
 80224ca:	3301      	adds	r3, #1
 80224cc:	9300      	str	r3, [sp, #0]
 80224ce:	2331      	movs	r3, #49	; 0x31
 80224d0:	7013      	strb	r3, [r2, #0]
 80224d2:	e6ce      	b.n	8022272 <_dtoa_r+0x94a>
 80224d4:	4b09      	ldr	r3, [pc, #36]	; (80224fc <_dtoa_r+0xbd4>)
 80224d6:	f7ff ba95 	b.w	8021a04 <_dtoa_r+0xdc>
 80224da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80224dc:	2b00      	cmp	r3, #0
 80224de:	f47f aa6e 	bne.w	80219be <_dtoa_r+0x96>
 80224e2:	4b07      	ldr	r3, [pc, #28]	; (8022500 <_dtoa_r+0xbd8>)
 80224e4:	f7ff ba8e 	b.w	8021a04 <_dtoa_r+0xdc>
 80224e8:	9b02      	ldr	r3, [sp, #8]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	dcae      	bgt.n	802244c <_dtoa_r+0xb24>
 80224ee:	9b06      	ldr	r3, [sp, #24]
 80224f0:	2b02      	cmp	r3, #2
 80224f2:	f73f aea8 	bgt.w	8022246 <_dtoa_r+0x91e>
 80224f6:	e7a9      	b.n	802244c <_dtoa_r+0xb24>
 80224f8:	080252cb 	.word	0x080252cb
 80224fc:	08025228 	.word	0x08025228
 8022500:	0802524c 	.word	0x0802524c

08022504 <__sflush_r>:
 8022504:	898a      	ldrh	r2, [r1, #12]
 8022506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802250a:	4605      	mov	r5, r0
 802250c:	0710      	lsls	r0, r2, #28
 802250e:	460c      	mov	r4, r1
 8022510:	d458      	bmi.n	80225c4 <__sflush_r+0xc0>
 8022512:	684b      	ldr	r3, [r1, #4]
 8022514:	2b00      	cmp	r3, #0
 8022516:	dc05      	bgt.n	8022524 <__sflush_r+0x20>
 8022518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802251a:	2b00      	cmp	r3, #0
 802251c:	dc02      	bgt.n	8022524 <__sflush_r+0x20>
 802251e:	2000      	movs	r0, #0
 8022520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022526:	2e00      	cmp	r6, #0
 8022528:	d0f9      	beq.n	802251e <__sflush_r+0x1a>
 802252a:	2300      	movs	r3, #0
 802252c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022530:	682f      	ldr	r7, [r5, #0]
 8022532:	602b      	str	r3, [r5, #0]
 8022534:	d032      	beq.n	802259c <__sflush_r+0x98>
 8022536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022538:	89a3      	ldrh	r3, [r4, #12]
 802253a:	075a      	lsls	r2, r3, #29
 802253c:	d505      	bpl.n	802254a <__sflush_r+0x46>
 802253e:	6863      	ldr	r3, [r4, #4]
 8022540:	1ac0      	subs	r0, r0, r3
 8022542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022544:	b10b      	cbz	r3, 802254a <__sflush_r+0x46>
 8022546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022548:	1ac0      	subs	r0, r0, r3
 802254a:	2300      	movs	r3, #0
 802254c:	4602      	mov	r2, r0
 802254e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022550:	6a21      	ldr	r1, [r4, #32]
 8022552:	4628      	mov	r0, r5
 8022554:	47b0      	blx	r6
 8022556:	1c43      	adds	r3, r0, #1
 8022558:	89a3      	ldrh	r3, [r4, #12]
 802255a:	d106      	bne.n	802256a <__sflush_r+0x66>
 802255c:	6829      	ldr	r1, [r5, #0]
 802255e:	291d      	cmp	r1, #29
 8022560:	d82c      	bhi.n	80225bc <__sflush_r+0xb8>
 8022562:	4a2a      	ldr	r2, [pc, #168]	; (802260c <__sflush_r+0x108>)
 8022564:	40ca      	lsrs	r2, r1
 8022566:	07d6      	lsls	r6, r2, #31
 8022568:	d528      	bpl.n	80225bc <__sflush_r+0xb8>
 802256a:	2200      	movs	r2, #0
 802256c:	6062      	str	r2, [r4, #4]
 802256e:	04d9      	lsls	r1, r3, #19
 8022570:	6922      	ldr	r2, [r4, #16]
 8022572:	6022      	str	r2, [r4, #0]
 8022574:	d504      	bpl.n	8022580 <__sflush_r+0x7c>
 8022576:	1c42      	adds	r2, r0, #1
 8022578:	d101      	bne.n	802257e <__sflush_r+0x7a>
 802257a:	682b      	ldr	r3, [r5, #0]
 802257c:	b903      	cbnz	r3, 8022580 <__sflush_r+0x7c>
 802257e:	6560      	str	r0, [r4, #84]	; 0x54
 8022580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022582:	602f      	str	r7, [r5, #0]
 8022584:	2900      	cmp	r1, #0
 8022586:	d0ca      	beq.n	802251e <__sflush_r+0x1a>
 8022588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802258c:	4299      	cmp	r1, r3
 802258e:	d002      	beq.n	8022596 <__sflush_r+0x92>
 8022590:	4628      	mov	r0, r5
 8022592:	f000 fd7d 	bl	8023090 <_free_r>
 8022596:	2000      	movs	r0, #0
 8022598:	6360      	str	r0, [r4, #52]	; 0x34
 802259a:	e7c1      	b.n	8022520 <__sflush_r+0x1c>
 802259c:	6a21      	ldr	r1, [r4, #32]
 802259e:	2301      	movs	r3, #1
 80225a0:	4628      	mov	r0, r5
 80225a2:	47b0      	blx	r6
 80225a4:	1c41      	adds	r1, r0, #1
 80225a6:	d1c7      	bne.n	8022538 <__sflush_r+0x34>
 80225a8:	682b      	ldr	r3, [r5, #0]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d0c4      	beq.n	8022538 <__sflush_r+0x34>
 80225ae:	2b1d      	cmp	r3, #29
 80225b0:	d001      	beq.n	80225b6 <__sflush_r+0xb2>
 80225b2:	2b16      	cmp	r3, #22
 80225b4:	d101      	bne.n	80225ba <__sflush_r+0xb6>
 80225b6:	602f      	str	r7, [r5, #0]
 80225b8:	e7b1      	b.n	802251e <__sflush_r+0x1a>
 80225ba:	89a3      	ldrh	r3, [r4, #12]
 80225bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225c0:	81a3      	strh	r3, [r4, #12]
 80225c2:	e7ad      	b.n	8022520 <__sflush_r+0x1c>
 80225c4:	690f      	ldr	r7, [r1, #16]
 80225c6:	2f00      	cmp	r7, #0
 80225c8:	d0a9      	beq.n	802251e <__sflush_r+0x1a>
 80225ca:	0793      	lsls	r3, r2, #30
 80225cc:	680e      	ldr	r6, [r1, #0]
 80225ce:	bf08      	it	eq
 80225d0:	694b      	ldreq	r3, [r1, #20]
 80225d2:	600f      	str	r7, [r1, #0]
 80225d4:	bf18      	it	ne
 80225d6:	2300      	movne	r3, #0
 80225d8:	eba6 0807 	sub.w	r8, r6, r7
 80225dc:	608b      	str	r3, [r1, #8]
 80225de:	f1b8 0f00 	cmp.w	r8, #0
 80225e2:	dd9c      	ble.n	802251e <__sflush_r+0x1a>
 80225e4:	6a21      	ldr	r1, [r4, #32]
 80225e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80225e8:	4643      	mov	r3, r8
 80225ea:	463a      	mov	r2, r7
 80225ec:	4628      	mov	r0, r5
 80225ee:	47b0      	blx	r6
 80225f0:	2800      	cmp	r0, #0
 80225f2:	dc06      	bgt.n	8022602 <__sflush_r+0xfe>
 80225f4:	89a3      	ldrh	r3, [r4, #12]
 80225f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225fa:	81a3      	strh	r3, [r4, #12]
 80225fc:	f04f 30ff 	mov.w	r0, #4294967295
 8022600:	e78e      	b.n	8022520 <__sflush_r+0x1c>
 8022602:	4407      	add	r7, r0
 8022604:	eba8 0800 	sub.w	r8, r8, r0
 8022608:	e7e9      	b.n	80225de <__sflush_r+0xda>
 802260a:	bf00      	nop
 802260c:	20400001 	.word	0x20400001

08022610 <_fflush_r>:
 8022610:	b538      	push	{r3, r4, r5, lr}
 8022612:	690b      	ldr	r3, [r1, #16]
 8022614:	4605      	mov	r5, r0
 8022616:	460c      	mov	r4, r1
 8022618:	b913      	cbnz	r3, 8022620 <_fflush_r+0x10>
 802261a:	2500      	movs	r5, #0
 802261c:	4628      	mov	r0, r5
 802261e:	bd38      	pop	{r3, r4, r5, pc}
 8022620:	b118      	cbz	r0, 802262a <_fflush_r+0x1a>
 8022622:	6983      	ldr	r3, [r0, #24]
 8022624:	b90b      	cbnz	r3, 802262a <_fflush_r+0x1a>
 8022626:	f000 f887 	bl	8022738 <__sinit>
 802262a:	4b14      	ldr	r3, [pc, #80]	; (802267c <_fflush_r+0x6c>)
 802262c:	429c      	cmp	r4, r3
 802262e:	d11b      	bne.n	8022668 <_fflush_r+0x58>
 8022630:	686c      	ldr	r4, [r5, #4]
 8022632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022636:	2b00      	cmp	r3, #0
 8022638:	d0ef      	beq.n	802261a <_fflush_r+0xa>
 802263a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802263c:	07d0      	lsls	r0, r2, #31
 802263e:	d404      	bmi.n	802264a <_fflush_r+0x3a>
 8022640:	0599      	lsls	r1, r3, #22
 8022642:	d402      	bmi.n	802264a <_fflush_r+0x3a>
 8022644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022646:	f000 f91a 	bl	802287e <__retarget_lock_acquire_recursive>
 802264a:	4628      	mov	r0, r5
 802264c:	4621      	mov	r1, r4
 802264e:	f7ff ff59 	bl	8022504 <__sflush_r>
 8022652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022654:	07da      	lsls	r2, r3, #31
 8022656:	4605      	mov	r5, r0
 8022658:	d4e0      	bmi.n	802261c <_fflush_r+0xc>
 802265a:	89a3      	ldrh	r3, [r4, #12]
 802265c:	059b      	lsls	r3, r3, #22
 802265e:	d4dd      	bmi.n	802261c <_fflush_r+0xc>
 8022660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022662:	f000 f90d 	bl	8022880 <__retarget_lock_release_recursive>
 8022666:	e7d9      	b.n	802261c <_fflush_r+0xc>
 8022668:	4b05      	ldr	r3, [pc, #20]	; (8022680 <_fflush_r+0x70>)
 802266a:	429c      	cmp	r4, r3
 802266c:	d101      	bne.n	8022672 <_fflush_r+0x62>
 802266e:	68ac      	ldr	r4, [r5, #8]
 8022670:	e7df      	b.n	8022632 <_fflush_r+0x22>
 8022672:	4b04      	ldr	r3, [pc, #16]	; (8022684 <_fflush_r+0x74>)
 8022674:	429c      	cmp	r4, r3
 8022676:	bf08      	it	eq
 8022678:	68ec      	ldreq	r4, [r5, #12]
 802267a:	e7da      	b.n	8022632 <_fflush_r+0x22>
 802267c:	080252fc 	.word	0x080252fc
 8022680:	0802531c 	.word	0x0802531c
 8022684:	080252dc 	.word	0x080252dc

08022688 <std>:
 8022688:	2300      	movs	r3, #0
 802268a:	b510      	push	{r4, lr}
 802268c:	4604      	mov	r4, r0
 802268e:	e9c0 3300 	strd	r3, r3, [r0]
 8022692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022696:	6083      	str	r3, [r0, #8]
 8022698:	8181      	strh	r1, [r0, #12]
 802269a:	6643      	str	r3, [r0, #100]	; 0x64
 802269c:	81c2      	strh	r2, [r0, #14]
 802269e:	6183      	str	r3, [r0, #24]
 80226a0:	4619      	mov	r1, r3
 80226a2:	2208      	movs	r2, #8
 80226a4:	305c      	adds	r0, #92	; 0x5c
 80226a6:	f7fe fadd 	bl	8020c64 <memset>
 80226aa:	4b05      	ldr	r3, [pc, #20]	; (80226c0 <std+0x38>)
 80226ac:	6263      	str	r3, [r4, #36]	; 0x24
 80226ae:	4b05      	ldr	r3, [pc, #20]	; (80226c4 <std+0x3c>)
 80226b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80226b2:	4b05      	ldr	r3, [pc, #20]	; (80226c8 <std+0x40>)
 80226b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80226b6:	4b05      	ldr	r3, [pc, #20]	; (80226cc <std+0x44>)
 80226b8:	6224      	str	r4, [r4, #32]
 80226ba:	6323      	str	r3, [r4, #48]	; 0x30
 80226bc:	bd10      	pop	{r4, pc}
 80226be:	bf00      	nop
 80226c0:	080235b5 	.word	0x080235b5
 80226c4:	080235d7 	.word	0x080235d7
 80226c8:	0802360f 	.word	0x0802360f
 80226cc:	08023633 	.word	0x08023633

080226d0 <_cleanup_r>:
 80226d0:	4901      	ldr	r1, [pc, #4]	; (80226d8 <_cleanup_r+0x8>)
 80226d2:	f000 b8af 	b.w	8022834 <_fwalk_reent>
 80226d6:	bf00      	nop
 80226d8:	08022611 	.word	0x08022611

080226dc <__sfmoreglue>:
 80226dc:	b570      	push	{r4, r5, r6, lr}
 80226de:	2268      	movs	r2, #104	; 0x68
 80226e0:	1e4d      	subs	r5, r1, #1
 80226e2:	4355      	muls	r5, r2
 80226e4:	460e      	mov	r6, r1
 80226e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80226ea:	f000 fd3d 	bl	8023168 <_malloc_r>
 80226ee:	4604      	mov	r4, r0
 80226f0:	b140      	cbz	r0, 8022704 <__sfmoreglue+0x28>
 80226f2:	2100      	movs	r1, #0
 80226f4:	e9c0 1600 	strd	r1, r6, [r0]
 80226f8:	300c      	adds	r0, #12
 80226fa:	60a0      	str	r0, [r4, #8]
 80226fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022700:	f7fe fab0 	bl	8020c64 <memset>
 8022704:	4620      	mov	r0, r4
 8022706:	bd70      	pop	{r4, r5, r6, pc}

08022708 <__sfp_lock_acquire>:
 8022708:	4801      	ldr	r0, [pc, #4]	; (8022710 <__sfp_lock_acquire+0x8>)
 802270a:	f000 b8b8 	b.w	802287e <__retarget_lock_acquire_recursive>
 802270e:	bf00      	nop
 8022710:	2000fdd1 	.word	0x2000fdd1

08022714 <__sfp_lock_release>:
 8022714:	4801      	ldr	r0, [pc, #4]	; (802271c <__sfp_lock_release+0x8>)
 8022716:	f000 b8b3 	b.w	8022880 <__retarget_lock_release_recursive>
 802271a:	bf00      	nop
 802271c:	2000fdd1 	.word	0x2000fdd1

08022720 <__sinit_lock_acquire>:
 8022720:	4801      	ldr	r0, [pc, #4]	; (8022728 <__sinit_lock_acquire+0x8>)
 8022722:	f000 b8ac 	b.w	802287e <__retarget_lock_acquire_recursive>
 8022726:	bf00      	nop
 8022728:	2000fdd2 	.word	0x2000fdd2

0802272c <__sinit_lock_release>:
 802272c:	4801      	ldr	r0, [pc, #4]	; (8022734 <__sinit_lock_release+0x8>)
 802272e:	f000 b8a7 	b.w	8022880 <__retarget_lock_release_recursive>
 8022732:	bf00      	nop
 8022734:	2000fdd2 	.word	0x2000fdd2

08022738 <__sinit>:
 8022738:	b510      	push	{r4, lr}
 802273a:	4604      	mov	r4, r0
 802273c:	f7ff fff0 	bl	8022720 <__sinit_lock_acquire>
 8022740:	69a3      	ldr	r3, [r4, #24]
 8022742:	b11b      	cbz	r3, 802274c <__sinit+0x14>
 8022744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022748:	f7ff bff0 	b.w	802272c <__sinit_lock_release>
 802274c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022750:	6523      	str	r3, [r4, #80]	; 0x50
 8022752:	4b13      	ldr	r3, [pc, #76]	; (80227a0 <__sinit+0x68>)
 8022754:	4a13      	ldr	r2, [pc, #76]	; (80227a4 <__sinit+0x6c>)
 8022756:	681b      	ldr	r3, [r3, #0]
 8022758:	62a2      	str	r2, [r4, #40]	; 0x28
 802275a:	42a3      	cmp	r3, r4
 802275c:	bf04      	itt	eq
 802275e:	2301      	moveq	r3, #1
 8022760:	61a3      	streq	r3, [r4, #24]
 8022762:	4620      	mov	r0, r4
 8022764:	f000 f820 	bl	80227a8 <__sfp>
 8022768:	6060      	str	r0, [r4, #4]
 802276a:	4620      	mov	r0, r4
 802276c:	f000 f81c 	bl	80227a8 <__sfp>
 8022770:	60a0      	str	r0, [r4, #8]
 8022772:	4620      	mov	r0, r4
 8022774:	f000 f818 	bl	80227a8 <__sfp>
 8022778:	2200      	movs	r2, #0
 802277a:	60e0      	str	r0, [r4, #12]
 802277c:	2104      	movs	r1, #4
 802277e:	6860      	ldr	r0, [r4, #4]
 8022780:	f7ff ff82 	bl	8022688 <std>
 8022784:	68a0      	ldr	r0, [r4, #8]
 8022786:	2201      	movs	r2, #1
 8022788:	2109      	movs	r1, #9
 802278a:	f7ff ff7d 	bl	8022688 <std>
 802278e:	68e0      	ldr	r0, [r4, #12]
 8022790:	2202      	movs	r2, #2
 8022792:	2112      	movs	r1, #18
 8022794:	f7ff ff78 	bl	8022688 <std>
 8022798:	2301      	movs	r3, #1
 802279a:	61a3      	str	r3, [r4, #24]
 802279c:	e7d2      	b.n	8022744 <__sinit+0xc>
 802279e:	bf00      	nop
 80227a0:	08025214 	.word	0x08025214
 80227a4:	080226d1 	.word	0x080226d1

080227a8 <__sfp>:
 80227a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227aa:	4607      	mov	r7, r0
 80227ac:	f7ff ffac 	bl	8022708 <__sfp_lock_acquire>
 80227b0:	4b1e      	ldr	r3, [pc, #120]	; (802282c <__sfp+0x84>)
 80227b2:	681e      	ldr	r6, [r3, #0]
 80227b4:	69b3      	ldr	r3, [r6, #24]
 80227b6:	b913      	cbnz	r3, 80227be <__sfp+0x16>
 80227b8:	4630      	mov	r0, r6
 80227ba:	f7ff ffbd 	bl	8022738 <__sinit>
 80227be:	3648      	adds	r6, #72	; 0x48
 80227c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80227c4:	3b01      	subs	r3, #1
 80227c6:	d503      	bpl.n	80227d0 <__sfp+0x28>
 80227c8:	6833      	ldr	r3, [r6, #0]
 80227ca:	b30b      	cbz	r3, 8022810 <__sfp+0x68>
 80227cc:	6836      	ldr	r6, [r6, #0]
 80227ce:	e7f7      	b.n	80227c0 <__sfp+0x18>
 80227d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80227d4:	b9d5      	cbnz	r5, 802280c <__sfp+0x64>
 80227d6:	4b16      	ldr	r3, [pc, #88]	; (8022830 <__sfp+0x88>)
 80227d8:	60e3      	str	r3, [r4, #12]
 80227da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80227de:	6665      	str	r5, [r4, #100]	; 0x64
 80227e0:	f000 f84c 	bl	802287c <__retarget_lock_init_recursive>
 80227e4:	f7ff ff96 	bl	8022714 <__sfp_lock_release>
 80227e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80227ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80227f0:	6025      	str	r5, [r4, #0]
 80227f2:	61a5      	str	r5, [r4, #24]
 80227f4:	2208      	movs	r2, #8
 80227f6:	4629      	mov	r1, r5
 80227f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80227fc:	f7fe fa32 	bl	8020c64 <memset>
 8022800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022808:	4620      	mov	r0, r4
 802280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802280c:	3468      	adds	r4, #104	; 0x68
 802280e:	e7d9      	b.n	80227c4 <__sfp+0x1c>
 8022810:	2104      	movs	r1, #4
 8022812:	4638      	mov	r0, r7
 8022814:	f7ff ff62 	bl	80226dc <__sfmoreglue>
 8022818:	4604      	mov	r4, r0
 802281a:	6030      	str	r0, [r6, #0]
 802281c:	2800      	cmp	r0, #0
 802281e:	d1d5      	bne.n	80227cc <__sfp+0x24>
 8022820:	f7ff ff78 	bl	8022714 <__sfp_lock_release>
 8022824:	230c      	movs	r3, #12
 8022826:	603b      	str	r3, [r7, #0]
 8022828:	e7ee      	b.n	8022808 <__sfp+0x60>
 802282a:	bf00      	nop
 802282c:	08025214 	.word	0x08025214
 8022830:	ffff0001 	.word	0xffff0001

08022834 <_fwalk_reent>:
 8022834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022838:	4606      	mov	r6, r0
 802283a:	4688      	mov	r8, r1
 802283c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022840:	2700      	movs	r7, #0
 8022842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022846:	f1b9 0901 	subs.w	r9, r9, #1
 802284a:	d505      	bpl.n	8022858 <_fwalk_reent+0x24>
 802284c:	6824      	ldr	r4, [r4, #0]
 802284e:	2c00      	cmp	r4, #0
 8022850:	d1f7      	bne.n	8022842 <_fwalk_reent+0xe>
 8022852:	4638      	mov	r0, r7
 8022854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022858:	89ab      	ldrh	r3, [r5, #12]
 802285a:	2b01      	cmp	r3, #1
 802285c:	d907      	bls.n	802286e <_fwalk_reent+0x3a>
 802285e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022862:	3301      	adds	r3, #1
 8022864:	d003      	beq.n	802286e <_fwalk_reent+0x3a>
 8022866:	4629      	mov	r1, r5
 8022868:	4630      	mov	r0, r6
 802286a:	47c0      	blx	r8
 802286c:	4307      	orrs	r7, r0
 802286e:	3568      	adds	r5, #104	; 0x68
 8022870:	e7e9      	b.n	8022846 <_fwalk_reent+0x12>
	...

08022874 <_localeconv_r>:
 8022874:	4800      	ldr	r0, [pc, #0]	; (8022878 <_localeconv_r+0x4>)
 8022876:	4770      	bx	lr
 8022878:	20000180 	.word	0x20000180

0802287c <__retarget_lock_init_recursive>:
 802287c:	4770      	bx	lr

0802287e <__retarget_lock_acquire_recursive>:
 802287e:	4770      	bx	lr

08022880 <__retarget_lock_release_recursive>:
 8022880:	4770      	bx	lr

08022882 <__swhatbuf_r>:
 8022882:	b570      	push	{r4, r5, r6, lr}
 8022884:	460e      	mov	r6, r1
 8022886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802288a:	2900      	cmp	r1, #0
 802288c:	b096      	sub	sp, #88	; 0x58
 802288e:	4614      	mov	r4, r2
 8022890:	461d      	mov	r5, r3
 8022892:	da08      	bge.n	80228a6 <__swhatbuf_r+0x24>
 8022894:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022898:	2200      	movs	r2, #0
 802289a:	602a      	str	r2, [r5, #0]
 802289c:	061a      	lsls	r2, r3, #24
 802289e:	d410      	bmi.n	80228c2 <__swhatbuf_r+0x40>
 80228a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80228a4:	e00e      	b.n	80228c4 <__swhatbuf_r+0x42>
 80228a6:	466a      	mov	r2, sp
 80228a8:	f000 ff1a 	bl	80236e0 <_fstat_r>
 80228ac:	2800      	cmp	r0, #0
 80228ae:	dbf1      	blt.n	8022894 <__swhatbuf_r+0x12>
 80228b0:	9a01      	ldr	r2, [sp, #4]
 80228b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80228b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80228ba:	425a      	negs	r2, r3
 80228bc:	415a      	adcs	r2, r3
 80228be:	602a      	str	r2, [r5, #0]
 80228c0:	e7ee      	b.n	80228a0 <__swhatbuf_r+0x1e>
 80228c2:	2340      	movs	r3, #64	; 0x40
 80228c4:	2000      	movs	r0, #0
 80228c6:	6023      	str	r3, [r4, #0]
 80228c8:	b016      	add	sp, #88	; 0x58
 80228ca:	bd70      	pop	{r4, r5, r6, pc}

080228cc <__smakebuf_r>:
 80228cc:	898b      	ldrh	r3, [r1, #12]
 80228ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80228d0:	079d      	lsls	r5, r3, #30
 80228d2:	4606      	mov	r6, r0
 80228d4:	460c      	mov	r4, r1
 80228d6:	d507      	bpl.n	80228e8 <__smakebuf_r+0x1c>
 80228d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80228dc:	6023      	str	r3, [r4, #0]
 80228de:	6123      	str	r3, [r4, #16]
 80228e0:	2301      	movs	r3, #1
 80228e2:	6163      	str	r3, [r4, #20]
 80228e4:	b002      	add	sp, #8
 80228e6:	bd70      	pop	{r4, r5, r6, pc}
 80228e8:	ab01      	add	r3, sp, #4
 80228ea:	466a      	mov	r2, sp
 80228ec:	f7ff ffc9 	bl	8022882 <__swhatbuf_r>
 80228f0:	9900      	ldr	r1, [sp, #0]
 80228f2:	4605      	mov	r5, r0
 80228f4:	4630      	mov	r0, r6
 80228f6:	f000 fc37 	bl	8023168 <_malloc_r>
 80228fa:	b948      	cbnz	r0, 8022910 <__smakebuf_r+0x44>
 80228fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022900:	059a      	lsls	r2, r3, #22
 8022902:	d4ef      	bmi.n	80228e4 <__smakebuf_r+0x18>
 8022904:	f023 0303 	bic.w	r3, r3, #3
 8022908:	f043 0302 	orr.w	r3, r3, #2
 802290c:	81a3      	strh	r3, [r4, #12]
 802290e:	e7e3      	b.n	80228d8 <__smakebuf_r+0xc>
 8022910:	4b0d      	ldr	r3, [pc, #52]	; (8022948 <__smakebuf_r+0x7c>)
 8022912:	62b3      	str	r3, [r6, #40]	; 0x28
 8022914:	89a3      	ldrh	r3, [r4, #12]
 8022916:	6020      	str	r0, [r4, #0]
 8022918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802291c:	81a3      	strh	r3, [r4, #12]
 802291e:	9b00      	ldr	r3, [sp, #0]
 8022920:	6163      	str	r3, [r4, #20]
 8022922:	9b01      	ldr	r3, [sp, #4]
 8022924:	6120      	str	r0, [r4, #16]
 8022926:	b15b      	cbz	r3, 8022940 <__smakebuf_r+0x74>
 8022928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802292c:	4630      	mov	r0, r6
 802292e:	f000 fee9 	bl	8023704 <_isatty_r>
 8022932:	b128      	cbz	r0, 8022940 <__smakebuf_r+0x74>
 8022934:	89a3      	ldrh	r3, [r4, #12]
 8022936:	f023 0303 	bic.w	r3, r3, #3
 802293a:	f043 0301 	orr.w	r3, r3, #1
 802293e:	81a3      	strh	r3, [r4, #12]
 8022940:	89a0      	ldrh	r0, [r4, #12]
 8022942:	4305      	orrs	r5, r0
 8022944:	81a5      	strh	r5, [r4, #12]
 8022946:	e7cd      	b.n	80228e4 <__smakebuf_r+0x18>
 8022948:	080226d1 	.word	0x080226d1

0802294c <malloc>:
 802294c:	4b02      	ldr	r3, [pc, #8]	; (8022958 <malloc+0xc>)
 802294e:	4601      	mov	r1, r0
 8022950:	6818      	ldr	r0, [r3, #0]
 8022952:	f000 bc09 	b.w	8023168 <_malloc_r>
 8022956:	bf00      	nop
 8022958:	2000002c 	.word	0x2000002c

0802295c <_Balloc>:
 802295c:	b570      	push	{r4, r5, r6, lr}
 802295e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022960:	4604      	mov	r4, r0
 8022962:	460d      	mov	r5, r1
 8022964:	b976      	cbnz	r6, 8022984 <_Balloc+0x28>
 8022966:	2010      	movs	r0, #16
 8022968:	f7ff fff0 	bl	802294c <malloc>
 802296c:	4602      	mov	r2, r0
 802296e:	6260      	str	r0, [r4, #36]	; 0x24
 8022970:	b920      	cbnz	r0, 802297c <_Balloc+0x20>
 8022972:	4b18      	ldr	r3, [pc, #96]	; (80229d4 <_Balloc+0x78>)
 8022974:	4818      	ldr	r0, [pc, #96]	; (80229d8 <_Balloc+0x7c>)
 8022976:	2166      	movs	r1, #102	; 0x66
 8022978:	f000 fe72 	bl	8023660 <__assert_func>
 802297c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022980:	6006      	str	r6, [r0, #0]
 8022982:	60c6      	str	r6, [r0, #12]
 8022984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8022986:	68f3      	ldr	r3, [r6, #12]
 8022988:	b183      	cbz	r3, 80229ac <_Balloc+0x50>
 802298a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802298c:	68db      	ldr	r3, [r3, #12]
 802298e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022992:	b9b8      	cbnz	r0, 80229c4 <_Balloc+0x68>
 8022994:	2101      	movs	r1, #1
 8022996:	fa01 f605 	lsl.w	r6, r1, r5
 802299a:	1d72      	adds	r2, r6, #5
 802299c:	0092      	lsls	r2, r2, #2
 802299e:	4620      	mov	r0, r4
 80229a0:	f000 fb60 	bl	8023064 <_calloc_r>
 80229a4:	b160      	cbz	r0, 80229c0 <_Balloc+0x64>
 80229a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80229aa:	e00e      	b.n	80229ca <_Balloc+0x6e>
 80229ac:	2221      	movs	r2, #33	; 0x21
 80229ae:	2104      	movs	r1, #4
 80229b0:	4620      	mov	r0, r4
 80229b2:	f000 fb57 	bl	8023064 <_calloc_r>
 80229b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80229b8:	60f0      	str	r0, [r6, #12]
 80229ba:	68db      	ldr	r3, [r3, #12]
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d1e4      	bne.n	802298a <_Balloc+0x2e>
 80229c0:	2000      	movs	r0, #0
 80229c2:	bd70      	pop	{r4, r5, r6, pc}
 80229c4:	6802      	ldr	r2, [r0, #0]
 80229c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80229ca:	2300      	movs	r3, #0
 80229cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80229d0:	e7f7      	b.n	80229c2 <_Balloc+0x66>
 80229d2:	bf00      	nop
 80229d4:	08025259 	.word	0x08025259
 80229d8:	0802533c 	.word	0x0802533c

080229dc <_Bfree>:
 80229dc:	b570      	push	{r4, r5, r6, lr}
 80229de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80229e0:	4605      	mov	r5, r0
 80229e2:	460c      	mov	r4, r1
 80229e4:	b976      	cbnz	r6, 8022a04 <_Bfree+0x28>
 80229e6:	2010      	movs	r0, #16
 80229e8:	f7ff ffb0 	bl	802294c <malloc>
 80229ec:	4602      	mov	r2, r0
 80229ee:	6268      	str	r0, [r5, #36]	; 0x24
 80229f0:	b920      	cbnz	r0, 80229fc <_Bfree+0x20>
 80229f2:	4b09      	ldr	r3, [pc, #36]	; (8022a18 <_Bfree+0x3c>)
 80229f4:	4809      	ldr	r0, [pc, #36]	; (8022a1c <_Bfree+0x40>)
 80229f6:	218a      	movs	r1, #138	; 0x8a
 80229f8:	f000 fe32 	bl	8023660 <__assert_func>
 80229fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022a00:	6006      	str	r6, [r0, #0]
 8022a02:	60c6      	str	r6, [r0, #12]
 8022a04:	b13c      	cbz	r4, 8022a16 <_Bfree+0x3a>
 8022a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022a08:	6862      	ldr	r2, [r4, #4]
 8022a0a:	68db      	ldr	r3, [r3, #12]
 8022a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022a10:	6021      	str	r1, [r4, #0]
 8022a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022a16:	bd70      	pop	{r4, r5, r6, pc}
 8022a18:	08025259 	.word	0x08025259
 8022a1c:	0802533c 	.word	0x0802533c

08022a20 <__multadd>:
 8022a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a24:	690d      	ldr	r5, [r1, #16]
 8022a26:	4607      	mov	r7, r0
 8022a28:	460c      	mov	r4, r1
 8022a2a:	461e      	mov	r6, r3
 8022a2c:	f101 0c14 	add.w	ip, r1, #20
 8022a30:	2000      	movs	r0, #0
 8022a32:	f8dc 3000 	ldr.w	r3, [ip]
 8022a36:	b299      	uxth	r1, r3
 8022a38:	fb02 6101 	mla	r1, r2, r1, r6
 8022a3c:	0c1e      	lsrs	r6, r3, #16
 8022a3e:	0c0b      	lsrs	r3, r1, #16
 8022a40:	fb02 3306 	mla	r3, r2, r6, r3
 8022a44:	b289      	uxth	r1, r1
 8022a46:	3001      	adds	r0, #1
 8022a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022a4c:	4285      	cmp	r5, r0
 8022a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8022a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022a56:	dcec      	bgt.n	8022a32 <__multadd+0x12>
 8022a58:	b30e      	cbz	r6, 8022a9e <__multadd+0x7e>
 8022a5a:	68a3      	ldr	r3, [r4, #8]
 8022a5c:	42ab      	cmp	r3, r5
 8022a5e:	dc19      	bgt.n	8022a94 <__multadd+0x74>
 8022a60:	6861      	ldr	r1, [r4, #4]
 8022a62:	4638      	mov	r0, r7
 8022a64:	3101      	adds	r1, #1
 8022a66:	f7ff ff79 	bl	802295c <_Balloc>
 8022a6a:	4680      	mov	r8, r0
 8022a6c:	b928      	cbnz	r0, 8022a7a <__multadd+0x5a>
 8022a6e:	4602      	mov	r2, r0
 8022a70:	4b0c      	ldr	r3, [pc, #48]	; (8022aa4 <__multadd+0x84>)
 8022a72:	480d      	ldr	r0, [pc, #52]	; (8022aa8 <__multadd+0x88>)
 8022a74:	21b5      	movs	r1, #181	; 0xb5
 8022a76:	f000 fdf3 	bl	8023660 <__assert_func>
 8022a7a:	6922      	ldr	r2, [r4, #16]
 8022a7c:	3202      	adds	r2, #2
 8022a7e:	f104 010c 	add.w	r1, r4, #12
 8022a82:	0092      	lsls	r2, r2, #2
 8022a84:	300c      	adds	r0, #12
 8022a86:	f7fe f8df 	bl	8020c48 <memcpy>
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	4638      	mov	r0, r7
 8022a8e:	f7ff ffa5 	bl	80229dc <_Bfree>
 8022a92:	4644      	mov	r4, r8
 8022a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022a98:	3501      	adds	r5, #1
 8022a9a:	615e      	str	r6, [r3, #20]
 8022a9c:	6125      	str	r5, [r4, #16]
 8022a9e:	4620      	mov	r0, r4
 8022aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022aa4:	080252cb 	.word	0x080252cb
 8022aa8:	0802533c 	.word	0x0802533c

08022aac <__hi0bits>:
 8022aac:	0c03      	lsrs	r3, r0, #16
 8022aae:	041b      	lsls	r3, r3, #16
 8022ab0:	b9d3      	cbnz	r3, 8022ae8 <__hi0bits+0x3c>
 8022ab2:	0400      	lsls	r0, r0, #16
 8022ab4:	2310      	movs	r3, #16
 8022ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022aba:	bf04      	itt	eq
 8022abc:	0200      	lsleq	r0, r0, #8
 8022abe:	3308      	addeq	r3, #8
 8022ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022ac4:	bf04      	itt	eq
 8022ac6:	0100      	lsleq	r0, r0, #4
 8022ac8:	3304      	addeq	r3, #4
 8022aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022ace:	bf04      	itt	eq
 8022ad0:	0080      	lsleq	r0, r0, #2
 8022ad2:	3302      	addeq	r3, #2
 8022ad4:	2800      	cmp	r0, #0
 8022ad6:	db05      	blt.n	8022ae4 <__hi0bits+0x38>
 8022ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022adc:	f103 0301 	add.w	r3, r3, #1
 8022ae0:	bf08      	it	eq
 8022ae2:	2320      	moveq	r3, #32
 8022ae4:	4618      	mov	r0, r3
 8022ae6:	4770      	bx	lr
 8022ae8:	2300      	movs	r3, #0
 8022aea:	e7e4      	b.n	8022ab6 <__hi0bits+0xa>

08022aec <__lo0bits>:
 8022aec:	6803      	ldr	r3, [r0, #0]
 8022aee:	f013 0207 	ands.w	r2, r3, #7
 8022af2:	4601      	mov	r1, r0
 8022af4:	d00b      	beq.n	8022b0e <__lo0bits+0x22>
 8022af6:	07da      	lsls	r2, r3, #31
 8022af8:	d423      	bmi.n	8022b42 <__lo0bits+0x56>
 8022afa:	0798      	lsls	r0, r3, #30
 8022afc:	bf49      	itett	mi
 8022afe:	085b      	lsrmi	r3, r3, #1
 8022b00:	089b      	lsrpl	r3, r3, #2
 8022b02:	2001      	movmi	r0, #1
 8022b04:	600b      	strmi	r3, [r1, #0]
 8022b06:	bf5c      	itt	pl
 8022b08:	600b      	strpl	r3, [r1, #0]
 8022b0a:	2002      	movpl	r0, #2
 8022b0c:	4770      	bx	lr
 8022b0e:	b298      	uxth	r0, r3
 8022b10:	b9a8      	cbnz	r0, 8022b3e <__lo0bits+0x52>
 8022b12:	0c1b      	lsrs	r3, r3, #16
 8022b14:	2010      	movs	r0, #16
 8022b16:	b2da      	uxtb	r2, r3
 8022b18:	b90a      	cbnz	r2, 8022b1e <__lo0bits+0x32>
 8022b1a:	3008      	adds	r0, #8
 8022b1c:	0a1b      	lsrs	r3, r3, #8
 8022b1e:	071a      	lsls	r2, r3, #28
 8022b20:	bf04      	itt	eq
 8022b22:	091b      	lsreq	r3, r3, #4
 8022b24:	3004      	addeq	r0, #4
 8022b26:	079a      	lsls	r2, r3, #30
 8022b28:	bf04      	itt	eq
 8022b2a:	089b      	lsreq	r3, r3, #2
 8022b2c:	3002      	addeq	r0, #2
 8022b2e:	07da      	lsls	r2, r3, #31
 8022b30:	d403      	bmi.n	8022b3a <__lo0bits+0x4e>
 8022b32:	085b      	lsrs	r3, r3, #1
 8022b34:	f100 0001 	add.w	r0, r0, #1
 8022b38:	d005      	beq.n	8022b46 <__lo0bits+0x5a>
 8022b3a:	600b      	str	r3, [r1, #0]
 8022b3c:	4770      	bx	lr
 8022b3e:	4610      	mov	r0, r2
 8022b40:	e7e9      	b.n	8022b16 <__lo0bits+0x2a>
 8022b42:	2000      	movs	r0, #0
 8022b44:	4770      	bx	lr
 8022b46:	2020      	movs	r0, #32
 8022b48:	4770      	bx	lr
	...

08022b4c <__i2b>:
 8022b4c:	b510      	push	{r4, lr}
 8022b4e:	460c      	mov	r4, r1
 8022b50:	2101      	movs	r1, #1
 8022b52:	f7ff ff03 	bl	802295c <_Balloc>
 8022b56:	4602      	mov	r2, r0
 8022b58:	b928      	cbnz	r0, 8022b66 <__i2b+0x1a>
 8022b5a:	4b05      	ldr	r3, [pc, #20]	; (8022b70 <__i2b+0x24>)
 8022b5c:	4805      	ldr	r0, [pc, #20]	; (8022b74 <__i2b+0x28>)
 8022b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022b62:	f000 fd7d 	bl	8023660 <__assert_func>
 8022b66:	2301      	movs	r3, #1
 8022b68:	6144      	str	r4, [r0, #20]
 8022b6a:	6103      	str	r3, [r0, #16]
 8022b6c:	bd10      	pop	{r4, pc}
 8022b6e:	bf00      	nop
 8022b70:	080252cb 	.word	0x080252cb
 8022b74:	0802533c 	.word	0x0802533c

08022b78 <__multiply>:
 8022b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b7c:	4691      	mov	r9, r2
 8022b7e:	690a      	ldr	r2, [r1, #16]
 8022b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022b84:	429a      	cmp	r2, r3
 8022b86:	bfb8      	it	lt
 8022b88:	460b      	movlt	r3, r1
 8022b8a:	460c      	mov	r4, r1
 8022b8c:	bfbc      	itt	lt
 8022b8e:	464c      	movlt	r4, r9
 8022b90:	4699      	movlt	r9, r3
 8022b92:	6927      	ldr	r7, [r4, #16]
 8022b94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022b98:	68a3      	ldr	r3, [r4, #8]
 8022b9a:	6861      	ldr	r1, [r4, #4]
 8022b9c:	eb07 060a 	add.w	r6, r7, sl
 8022ba0:	42b3      	cmp	r3, r6
 8022ba2:	b085      	sub	sp, #20
 8022ba4:	bfb8      	it	lt
 8022ba6:	3101      	addlt	r1, #1
 8022ba8:	f7ff fed8 	bl	802295c <_Balloc>
 8022bac:	b930      	cbnz	r0, 8022bbc <__multiply+0x44>
 8022bae:	4602      	mov	r2, r0
 8022bb0:	4b44      	ldr	r3, [pc, #272]	; (8022cc4 <__multiply+0x14c>)
 8022bb2:	4845      	ldr	r0, [pc, #276]	; (8022cc8 <__multiply+0x150>)
 8022bb4:	f240 115d 	movw	r1, #349	; 0x15d
 8022bb8:	f000 fd52 	bl	8023660 <__assert_func>
 8022bbc:	f100 0514 	add.w	r5, r0, #20
 8022bc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022bc4:	462b      	mov	r3, r5
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	4543      	cmp	r3, r8
 8022bca:	d321      	bcc.n	8022c10 <__multiply+0x98>
 8022bcc:	f104 0314 	add.w	r3, r4, #20
 8022bd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022bd4:	f109 0314 	add.w	r3, r9, #20
 8022bd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022bdc:	9202      	str	r2, [sp, #8]
 8022bde:	1b3a      	subs	r2, r7, r4
 8022be0:	3a15      	subs	r2, #21
 8022be2:	f022 0203 	bic.w	r2, r2, #3
 8022be6:	3204      	adds	r2, #4
 8022be8:	f104 0115 	add.w	r1, r4, #21
 8022bec:	428f      	cmp	r7, r1
 8022bee:	bf38      	it	cc
 8022bf0:	2204      	movcc	r2, #4
 8022bf2:	9201      	str	r2, [sp, #4]
 8022bf4:	9a02      	ldr	r2, [sp, #8]
 8022bf6:	9303      	str	r3, [sp, #12]
 8022bf8:	429a      	cmp	r2, r3
 8022bfa:	d80c      	bhi.n	8022c16 <__multiply+0x9e>
 8022bfc:	2e00      	cmp	r6, #0
 8022bfe:	dd03      	ble.n	8022c08 <__multiply+0x90>
 8022c00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d05a      	beq.n	8022cbe <__multiply+0x146>
 8022c08:	6106      	str	r6, [r0, #16]
 8022c0a:	b005      	add	sp, #20
 8022c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c10:	f843 2b04 	str.w	r2, [r3], #4
 8022c14:	e7d8      	b.n	8022bc8 <__multiply+0x50>
 8022c16:	f8b3 a000 	ldrh.w	sl, [r3]
 8022c1a:	f1ba 0f00 	cmp.w	sl, #0
 8022c1e:	d024      	beq.n	8022c6a <__multiply+0xf2>
 8022c20:	f104 0e14 	add.w	lr, r4, #20
 8022c24:	46a9      	mov	r9, r5
 8022c26:	f04f 0c00 	mov.w	ip, #0
 8022c2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022c2e:	f8d9 1000 	ldr.w	r1, [r9]
 8022c32:	fa1f fb82 	uxth.w	fp, r2
 8022c36:	b289      	uxth	r1, r1
 8022c38:	fb0a 110b 	mla	r1, sl, fp, r1
 8022c3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022c40:	f8d9 2000 	ldr.w	r2, [r9]
 8022c44:	4461      	add	r1, ip
 8022c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022c4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8022c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022c52:	b289      	uxth	r1, r1
 8022c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022c58:	4577      	cmp	r7, lr
 8022c5a:	f849 1b04 	str.w	r1, [r9], #4
 8022c5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022c62:	d8e2      	bhi.n	8022c2a <__multiply+0xb2>
 8022c64:	9a01      	ldr	r2, [sp, #4]
 8022c66:	f845 c002 	str.w	ip, [r5, r2]
 8022c6a:	9a03      	ldr	r2, [sp, #12]
 8022c6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022c70:	3304      	adds	r3, #4
 8022c72:	f1b9 0f00 	cmp.w	r9, #0
 8022c76:	d020      	beq.n	8022cba <__multiply+0x142>
 8022c78:	6829      	ldr	r1, [r5, #0]
 8022c7a:	f104 0c14 	add.w	ip, r4, #20
 8022c7e:	46ae      	mov	lr, r5
 8022c80:	f04f 0a00 	mov.w	sl, #0
 8022c84:	f8bc b000 	ldrh.w	fp, [ip]
 8022c88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022c8c:	fb09 220b 	mla	r2, r9, fp, r2
 8022c90:	4492      	add	sl, r2
 8022c92:	b289      	uxth	r1, r1
 8022c94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022c98:	f84e 1b04 	str.w	r1, [lr], #4
 8022c9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8022ca4:	0c12      	lsrs	r2, r2, #16
 8022ca6:	fb09 1102 	mla	r1, r9, r2, r1
 8022caa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022cae:	4567      	cmp	r7, ip
 8022cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022cb4:	d8e6      	bhi.n	8022c84 <__multiply+0x10c>
 8022cb6:	9a01      	ldr	r2, [sp, #4]
 8022cb8:	50a9      	str	r1, [r5, r2]
 8022cba:	3504      	adds	r5, #4
 8022cbc:	e79a      	b.n	8022bf4 <__multiply+0x7c>
 8022cbe:	3e01      	subs	r6, #1
 8022cc0:	e79c      	b.n	8022bfc <__multiply+0x84>
 8022cc2:	bf00      	nop
 8022cc4:	080252cb 	.word	0x080252cb
 8022cc8:	0802533c 	.word	0x0802533c

08022ccc <__pow5mult>:
 8022ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cd0:	4615      	mov	r5, r2
 8022cd2:	f012 0203 	ands.w	r2, r2, #3
 8022cd6:	4606      	mov	r6, r0
 8022cd8:	460f      	mov	r7, r1
 8022cda:	d007      	beq.n	8022cec <__pow5mult+0x20>
 8022cdc:	4c25      	ldr	r4, [pc, #148]	; (8022d74 <__pow5mult+0xa8>)
 8022cde:	3a01      	subs	r2, #1
 8022ce0:	2300      	movs	r3, #0
 8022ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022ce6:	f7ff fe9b 	bl	8022a20 <__multadd>
 8022cea:	4607      	mov	r7, r0
 8022cec:	10ad      	asrs	r5, r5, #2
 8022cee:	d03d      	beq.n	8022d6c <__pow5mult+0xa0>
 8022cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022cf2:	b97c      	cbnz	r4, 8022d14 <__pow5mult+0x48>
 8022cf4:	2010      	movs	r0, #16
 8022cf6:	f7ff fe29 	bl	802294c <malloc>
 8022cfa:	4602      	mov	r2, r0
 8022cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8022cfe:	b928      	cbnz	r0, 8022d0c <__pow5mult+0x40>
 8022d00:	4b1d      	ldr	r3, [pc, #116]	; (8022d78 <__pow5mult+0xac>)
 8022d02:	481e      	ldr	r0, [pc, #120]	; (8022d7c <__pow5mult+0xb0>)
 8022d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022d08:	f000 fcaa 	bl	8023660 <__assert_func>
 8022d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022d10:	6004      	str	r4, [r0, #0]
 8022d12:	60c4      	str	r4, [r0, #12]
 8022d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022d1c:	b94c      	cbnz	r4, 8022d32 <__pow5mult+0x66>
 8022d1e:	f240 2171 	movw	r1, #625	; 0x271
 8022d22:	4630      	mov	r0, r6
 8022d24:	f7ff ff12 	bl	8022b4c <__i2b>
 8022d28:	2300      	movs	r3, #0
 8022d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8022d2e:	4604      	mov	r4, r0
 8022d30:	6003      	str	r3, [r0, #0]
 8022d32:	f04f 0900 	mov.w	r9, #0
 8022d36:	07eb      	lsls	r3, r5, #31
 8022d38:	d50a      	bpl.n	8022d50 <__pow5mult+0x84>
 8022d3a:	4639      	mov	r1, r7
 8022d3c:	4622      	mov	r2, r4
 8022d3e:	4630      	mov	r0, r6
 8022d40:	f7ff ff1a 	bl	8022b78 <__multiply>
 8022d44:	4639      	mov	r1, r7
 8022d46:	4680      	mov	r8, r0
 8022d48:	4630      	mov	r0, r6
 8022d4a:	f7ff fe47 	bl	80229dc <_Bfree>
 8022d4e:	4647      	mov	r7, r8
 8022d50:	106d      	asrs	r5, r5, #1
 8022d52:	d00b      	beq.n	8022d6c <__pow5mult+0xa0>
 8022d54:	6820      	ldr	r0, [r4, #0]
 8022d56:	b938      	cbnz	r0, 8022d68 <__pow5mult+0x9c>
 8022d58:	4622      	mov	r2, r4
 8022d5a:	4621      	mov	r1, r4
 8022d5c:	4630      	mov	r0, r6
 8022d5e:	f7ff ff0b 	bl	8022b78 <__multiply>
 8022d62:	6020      	str	r0, [r4, #0]
 8022d64:	f8c0 9000 	str.w	r9, [r0]
 8022d68:	4604      	mov	r4, r0
 8022d6a:	e7e4      	b.n	8022d36 <__pow5mult+0x6a>
 8022d6c:	4638      	mov	r0, r7
 8022d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d72:	bf00      	nop
 8022d74:	08025488 	.word	0x08025488
 8022d78:	08025259 	.word	0x08025259
 8022d7c:	0802533c 	.word	0x0802533c

08022d80 <__lshift>:
 8022d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d84:	460c      	mov	r4, r1
 8022d86:	6849      	ldr	r1, [r1, #4]
 8022d88:	6923      	ldr	r3, [r4, #16]
 8022d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022d8e:	68a3      	ldr	r3, [r4, #8]
 8022d90:	4607      	mov	r7, r0
 8022d92:	4691      	mov	r9, r2
 8022d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022d98:	f108 0601 	add.w	r6, r8, #1
 8022d9c:	42b3      	cmp	r3, r6
 8022d9e:	db0b      	blt.n	8022db8 <__lshift+0x38>
 8022da0:	4638      	mov	r0, r7
 8022da2:	f7ff fddb 	bl	802295c <_Balloc>
 8022da6:	4605      	mov	r5, r0
 8022da8:	b948      	cbnz	r0, 8022dbe <__lshift+0x3e>
 8022daa:	4602      	mov	r2, r0
 8022dac:	4b2a      	ldr	r3, [pc, #168]	; (8022e58 <__lshift+0xd8>)
 8022dae:	482b      	ldr	r0, [pc, #172]	; (8022e5c <__lshift+0xdc>)
 8022db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022db4:	f000 fc54 	bl	8023660 <__assert_func>
 8022db8:	3101      	adds	r1, #1
 8022dba:	005b      	lsls	r3, r3, #1
 8022dbc:	e7ee      	b.n	8022d9c <__lshift+0x1c>
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	f100 0114 	add.w	r1, r0, #20
 8022dc4:	f100 0210 	add.w	r2, r0, #16
 8022dc8:	4618      	mov	r0, r3
 8022dca:	4553      	cmp	r3, sl
 8022dcc:	db37      	blt.n	8022e3e <__lshift+0xbe>
 8022dce:	6920      	ldr	r0, [r4, #16]
 8022dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022dd4:	f104 0314 	add.w	r3, r4, #20
 8022dd8:	f019 091f 	ands.w	r9, r9, #31
 8022ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022de0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022de4:	d02f      	beq.n	8022e46 <__lshift+0xc6>
 8022de6:	f1c9 0e20 	rsb	lr, r9, #32
 8022dea:	468a      	mov	sl, r1
 8022dec:	f04f 0c00 	mov.w	ip, #0
 8022df0:	681a      	ldr	r2, [r3, #0]
 8022df2:	fa02 f209 	lsl.w	r2, r2, r9
 8022df6:	ea42 020c 	orr.w	r2, r2, ip
 8022dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8022dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e02:	4298      	cmp	r0, r3
 8022e04:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022e08:	d8f2      	bhi.n	8022df0 <__lshift+0x70>
 8022e0a:	1b03      	subs	r3, r0, r4
 8022e0c:	3b15      	subs	r3, #21
 8022e0e:	f023 0303 	bic.w	r3, r3, #3
 8022e12:	3304      	adds	r3, #4
 8022e14:	f104 0215 	add.w	r2, r4, #21
 8022e18:	4290      	cmp	r0, r2
 8022e1a:	bf38      	it	cc
 8022e1c:	2304      	movcc	r3, #4
 8022e1e:	f841 c003 	str.w	ip, [r1, r3]
 8022e22:	f1bc 0f00 	cmp.w	ip, #0
 8022e26:	d001      	beq.n	8022e2c <__lshift+0xac>
 8022e28:	f108 0602 	add.w	r6, r8, #2
 8022e2c:	3e01      	subs	r6, #1
 8022e2e:	4638      	mov	r0, r7
 8022e30:	612e      	str	r6, [r5, #16]
 8022e32:	4621      	mov	r1, r4
 8022e34:	f7ff fdd2 	bl	80229dc <_Bfree>
 8022e38:	4628      	mov	r0, r5
 8022e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022e42:	3301      	adds	r3, #1
 8022e44:	e7c1      	b.n	8022dca <__lshift+0x4a>
 8022e46:	3904      	subs	r1, #4
 8022e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022e50:	4298      	cmp	r0, r3
 8022e52:	d8f9      	bhi.n	8022e48 <__lshift+0xc8>
 8022e54:	e7ea      	b.n	8022e2c <__lshift+0xac>
 8022e56:	bf00      	nop
 8022e58:	080252cb 	.word	0x080252cb
 8022e5c:	0802533c 	.word	0x0802533c

08022e60 <__mcmp>:
 8022e60:	b530      	push	{r4, r5, lr}
 8022e62:	6902      	ldr	r2, [r0, #16]
 8022e64:	690c      	ldr	r4, [r1, #16]
 8022e66:	1b12      	subs	r2, r2, r4
 8022e68:	d10e      	bne.n	8022e88 <__mcmp+0x28>
 8022e6a:	f100 0314 	add.w	r3, r0, #20
 8022e6e:	3114      	adds	r1, #20
 8022e70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022e74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022e78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022e7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022e80:	42a5      	cmp	r5, r4
 8022e82:	d003      	beq.n	8022e8c <__mcmp+0x2c>
 8022e84:	d305      	bcc.n	8022e92 <__mcmp+0x32>
 8022e86:	2201      	movs	r2, #1
 8022e88:	4610      	mov	r0, r2
 8022e8a:	bd30      	pop	{r4, r5, pc}
 8022e8c:	4283      	cmp	r3, r0
 8022e8e:	d3f3      	bcc.n	8022e78 <__mcmp+0x18>
 8022e90:	e7fa      	b.n	8022e88 <__mcmp+0x28>
 8022e92:	f04f 32ff 	mov.w	r2, #4294967295
 8022e96:	e7f7      	b.n	8022e88 <__mcmp+0x28>

08022e98 <__mdiff>:
 8022e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e9c:	460c      	mov	r4, r1
 8022e9e:	4606      	mov	r6, r0
 8022ea0:	4611      	mov	r1, r2
 8022ea2:	4620      	mov	r0, r4
 8022ea4:	4690      	mov	r8, r2
 8022ea6:	f7ff ffdb 	bl	8022e60 <__mcmp>
 8022eaa:	1e05      	subs	r5, r0, #0
 8022eac:	d110      	bne.n	8022ed0 <__mdiff+0x38>
 8022eae:	4629      	mov	r1, r5
 8022eb0:	4630      	mov	r0, r6
 8022eb2:	f7ff fd53 	bl	802295c <_Balloc>
 8022eb6:	b930      	cbnz	r0, 8022ec6 <__mdiff+0x2e>
 8022eb8:	4b3a      	ldr	r3, [pc, #232]	; (8022fa4 <__mdiff+0x10c>)
 8022eba:	4602      	mov	r2, r0
 8022ebc:	f240 2132 	movw	r1, #562	; 0x232
 8022ec0:	4839      	ldr	r0, [pc, #228]	; (8022fa8 <__mdiff+0x110>)
 8022ec2:	f000 fbcd 	bl	8023660 <__assert_func>
 8022ec6:	2301      	movs	r3, #1
 8022ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ed0:	bfa4      	itt	ge
 8022ed2:	4643      	movge	r3, r8
 8022ed4:	46a0      	movge	r8, r4
 8022ed6:	4630      	mov	r0, r6
 8022ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022edc:	bfa6      	itte	ge
 8022ede:	461c      	movge	r4, r3
 8022ee0:	2500      	movge	r5, #0
 8022ee2:	2501      	movlt	r5, #1
 8022ee4:	f7ff fd3a 	bl	802295c <_Balloc>
 8022ee8:	b920      	cbnz	r0, 8022ef4 <__mdiff+0x5c>
 8022eea:	4b2e      	ldr	r3, [pc, #184]	; (8022fa4 <__mdiff+0x10c>)
 8022eec:	4602      	mov	r2, r0
 8022eee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022ef2:	e7e5      	b.n	8022ec0 <__mdiff+0x28>
 8022ef4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022ef8:	6926      	ldr	r6, [r4, #16]
 8022efa:	60c5      	str	r5, [r0, #12]
 8022efc:	f104 0914 	add.w	r9, r4, #20
 8022f00:	f108 0514 	add.w	r5, r8, #20
 8022f04:	f100 0e14 	add.w	lr, r0, #20
 8022f08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022f0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022f10:	f108 0210 	add.w	r2, r8, #16
 8022f14:	46f2      	mov	sl, lr
 8022f16:	2100      	movs	r1, #0
 8022f18:	f859 3b04 	ldr.w	r3, [r9], #4
 8022f1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022f20:	fa1f f883 	uxth.w	r8, r3
 8022f24:	fa11 f18b 	uxtah	r1, r1, fp
 8022f28:	0c1b      	lsrs	r3, r3, #16
 8022f2a:	eba1 0808 	sub.w	r8, r1, r8
 8022f2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022f32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022f36:	fa1f f888 	uxth.w	r8, r8
 8022f3a:	1419      	asrs	r1, r3, #16
 8022f3c:	454e      	cmp	r6, r9
 8022f3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022f42:	f84a 3b04 	str.w	r3, [sl], #4
 8022f46:	d8e7      	bhi.n	8022f18 <__mdiff+0x80>
 8022f48:	1b33      	subs	r3, r6, r4
 8022f4a:	3b15      	subs	r3, #21
 8022f4c:	f023 0303 	bic.w	r3, r3, #3
 8022f50:	3304      	adds	r3, #4
 8022f52:	3415      	adds	r4, #21
 8022f54:	42a6      	cmp	r6, r4
 8022f56:	bf38      	it	cc
 8022f58:	2304      	movcc	r3, #4
 8022f5a:	441d      	add	r5, r3
 8022f5c:	4473      	add	r3, lr
 8022f5e:	469e      	mov	lr, r3
 8022f60:	462e      	mov	r6, r5
 8022f62:	4566      	cmp	r6, ip
 8022f64:	d30e      	bcc.n	8022f84 <__mdiff+0xec>
 8022f66:	f10c 0203 	add.w	r2, ip, #3
 8022f6a:	1b52      	subs	r2, r2, r5
 8022f6c:	f022 0203 	bic.w	r2, r2, #3
 8022f70:	3d03      	subs	r5, #3
 8022f72:	45ac      	cmp	ip, r5
 8022f74:	bf38      	it	cc
 8022f76:	2200      	movcc	r2, #0
 8022f78:	441a      	add	r2, r3
 8022f7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022f7e:	b17b      	cbz	r3, 8022fa0 <__mdiff+0x108>
 8022f80:	6107      	str	r7, [r0, #16]
 8022f82:	e7a3      	b.n	8022ecc <__mdiff+0x34>
 8022f84:	f856 8b04 	ldr.w	r8, [r6], #4
 8022f88:	fa11 f288 	uxtah	r2, r1, r8
 8022f8c:	1414      	asrs	r4, r2, #16
 8022f8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022f92:	b292      	uxth	r2, r2
 8022f94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022f98:	f84e 2b04 	str.w	r2, [lr], #4
 8022f9c:	1421      	asrs	r1, r4, #16
 8022f9e:	e7e0      	b.n	8022f62 <__mdiff+0xca>
 8022fa0:	3f01      	subs	r7, #1
 8022fa2:	e7ea      	b.n	8022f7a <__mdiff+0xe2>
 8022fa4:	080252cb 	.word	0x080252cb
 8022fa8:	0802533c 	.word	0x0802533c

08022fac <__d2b>:
 8022fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022fb0:	4689      	mov	r9, r1
 8022fb2:	2101      	movs	r1, #1
 8022fb4:	ec57 6b10 	vmov	r6, r7, d0
 8022fb8:	4690      	mov	r8, r2
 8022fba:	f7ff fccf 	bl	802295c <_Balloc>
 8022fbe:	4604      	mov	r4, r0
 8022fc0:	b930      	cbnz	r0, 8022fd0 <__d2b+0x24>
 8022fc2:	4602      	mov	r2, r0
 8022fc4:	4b25      	ldr	r3, [pc, #148]	; (802305c <__d2b+0xb0>)
 8022fc6:	4826      	ldr	r0, [pc, #152]	; (8023060 <__d2b+0xb4>)
 8022fc8:	f240 310a 	movw	r1, #778	; 0x30a
 8022fcc:	f000 fb48 	bl	8023660 <__assert_func>
 8022fd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022fd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022fd8:	bb35      	cbnz	r5, 8023028 <__d2b+0x7c>
 8022fda:	2e00      	cmp	r6, #0
 8022fdc:	9301      	str	r3, [sp, #4]
 8022fde:	d028      	beq.n	8023032 <__d2b+0x86>
 8022fe0:	4668      	mov	r0, sp
 8022fe2:	9600      	str	r6, [sp, #0]
 8022fe4:	f7ff fd82 	bl	8022aec <__lo0bits>
 8022fe8:	9900      	ldr	r1, [sp, #0]
 8022fea:	b300      	cbz	r0, 802302e <__d2b+0x82>
 8022fec:	9a01      	ldr	r2, [sp, #4]
 8022fee:	f1c0 0320 	rsb	r3, r0, #32
 8022ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8022ff6:	430b      	orrs	r3, r1
 8022ff8:	40c2      	lsrs	r2, r0
 8022ffa:	6163      	str	r3, [r4, #20]
 8022ffc:	9201      	str	r2, [sp, #4]
 8022ffe:	9b01      	ldr	r3, [sp, #4]
 8023000:	61a3      	str	r3, [r4, #24]
 8023002:	2b00      	cmp	r3, #0
 8023004:	bf14      	ite	ne
 8023006:	2202      	movne	r2, #2
 8023008:	2201      	moveq	r2, #1
 802300a:	6122      	str	r2, [r4, #16]
 802300c:	b1d5      	cbz	r5, 8023044 <__d2b+0x98>
 802300e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8023012:	4405      	add	r5, r0
 8023014:	f8c9 5000 	str.w	r5, [r9]
 8023018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802301c:	f8c8 0000 	str.w	r0, [r8]
 8023020:	4620      	mov	r0, r4
 8023022:	b003      	add	sp, #12
 8023024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802302c:	e7d5      	b.n	8022fda <__d2b+0x2e>
 802302e:	6161      	str	r1, [r4, #20]
 8023030:	e7e5      	b.n	8022ffe <__d2b+0x52>
 8023032:	a801      	add	r0, sp, #4
 8023034:	f7ff fd5a 	bl	8022aec <__lo0bits>
 8023038:	9b01      	ldr	r3, [sp, #4]
 802303a:	6163      	str	r3, [r4, #20]
 802303c:	2201      	movs	r2, #1
 802303e:	6122      	str	r2, [r4, #16]
 8023040:	3020      	adds	r0, #32
 8023042:	e7e3      	b.n	802300c <__d2b+0x60>
 8023044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802304c:	f8c9 0000 	str.w	r0, [r9]
 8023050:	6918      	ldr	r0, [r3, #16]
 8023052:	f7ff fd2b 	bl	8022aac <__hi0bits>
 8023056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802305a:	e7df      	b.n	802301c <__d2b+0x70>
 802305c:	080252cb 	.word	0x080252cb
 8023060:	0802533c 	.word	0x0802533c

08023064 <_calloc_r>:
 8023064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023066:	fba1 2402 	umull	r2, r4, r1, r2
 802306a:	b94c      	cbnz	r4, 8023080 <_calloc_r+0x1c>
 802306c:	4611      	mov	r1, r2
 802306e:	9201      	str	r2, [sp, #4]
 8023070:	f000 f87a 	bl	8023168 <_malloc_r>
 8023074:	9a01      	ldr	r2, [sp, #4]
 8023076:	4605      	mov	r5, r0
 8023078:	b930      	cbnz	r0, 8023088 <_calloc_r+0x24>
 802307a:	4628      	mov	r0, r5
 802307c:	b003      	add	sp, #12
 802307e:	bd30      	pop	{r4, r5, pc}
 8023080:	220c      	movs	r2, #12
 8023082:	6002      	str	r2, [r0, #0]
 8023084:	2500      	movs	r5, #0
 8023086:	e7f8      	b.n	802307a <_calloc_r+0x16>
 8023088:	4621      	mov	r1, r4
 802308a:	f7fd fdeb 	bl	8020c64 <memset>
 802308e:	e7f4      	b.n	802307a <_calloc_r+0x16>

08023090 <_free_r>:
 8023090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023092:	2900      	cmp	r1, #0
 8023094:	d044      	beq.n	8023120 <_free_r+0x90>
 8023096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802309a:	9001      	str	r0, [sp, #4]
 802309c:	2b00      	cmp	r3, #0
 802309e:	f1a1 0404 	sub.w	r4, r1, #4
 80230a2:	bfb8      	it	lt
 80230a4:	18e4      	addlt	r4, r4, r3
 80230a6:	f000 fb61 	bl	802376c <__malloc_lock>
 80230aa:	4a1e      	ldr	r2, [pc, #120]	; (8023124 <_free_r+0x94>)
 80230ac:	9801      	ldr	r0, [sp, #4]
 80230ae:	6813      	ldr	r3, [r2, #0]
 80230b0:	b933      	cbnz	r3, 80230c0 <_free_r+0x30>
 80230b2:	6063      	str	r3, [r4, #4]
 80230b4:	6014      	str	r4, [r2, #0]
 80230b6:	b003      	add	sp, #12
 80230b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80230bc:	f000 bb5c 	b.w	8023778 <__malloc_unlock>
 80230c0:	42a3      	cmp	r3, r4
 80230c2:	d908      	bls.n	80230d6 <_free_r+0x46>
 80230c4:	6825      	ldr	r5, [r4, #0]
 80230c6:	1961      	adds	r1, r4, r5
 80230c8:	428b      	cmp	r3, r1
 80230ca:	bf01      	itttt	eq
 80230cc:	6819      	ldreq	r1, [r3, #0]
 80230ce:	685b      	ldreq	r3, [r3, #4]
 80230d0:	1949      	addeq	r1, r1, r5
 80230d2:	6021      	streq	r1, [r4, #0]
 80230d4:	e7ed      	b.n	80230b2 <_free_r+0x22>
 80230d6:	461a      	mov	r2, r3
 80230d8:	685b      	ldr	r3, [r3, #4]
 80230da:	b10b      	cbz	r3, 80230e0 <_free_r+0x50>
 80230dc:	42a3      	cmp	r3, r4
 80230de:	d9fa      	bls.n	80230d6 <_free_r+0x46>
 80230e0:	6811      	ldr	r1, [r2, #0]
 80230e2:	1855      	adds	r5, r2, r1
 80230e4:	42a5      	cmp	r5, r4
 80230e6:	d10b      	bne.n	8023100 <_free_r+0x70>
 80230e8:	6824      	ldr	r4, [r4, #0]
 80230ea:	4421      	add	r1, r4
 80230ec:	1854      	adds	r4, r2, r1
 80230ee:	42a3      	cmp	r3, r4
 80230f0:	6011      	str	r1, [r2, #0]
 80230f2:	d1e0      	bne.n	80230b6 <_free_r+0x26>
 80230f4:	681c      	ldr	r4, [r3, #0]
 80230f6:	685b      	ldr	r3, [r3, #4]
 80230f8:	6053      	str	r3, [r2, #4]
 80230fa:	4421      	add	r1, r4
 80230fc:	6011      	str	r1, [r2, #0]
 80230fe:	e7da      	b.n	80230b6 <_free_r+0x26>
 8023100:	d902      	bls.n	8023108 <_free_r+0x78>
 8023102:	230c      	movs	r3, #12
 8023104:	6003      	str	r3, [r0, #0]
 8023106:	e7d6      	b.n	80230b6 <_free_r+0x26>
 8023108:	6825      	ldr	r5, [r4, #0]
 802310a:	1961      	adds	r1, r4, r5
 802310c:	428b      	cmp	r3, r1
 802310e:	bf04      	itt	eq
 8023110:	6819      	ldreq	r1, [r3, #0]
 8023112:	685b      	ldreq	r3, [r3, #4]
 8023114:	6063      	str	r3, [r4, #4]
 8023116:	bf04      	itt	eq
 8023118:	1949      	addeq	r1, r1, r5
 802311a:	6021      	streq	r1, [r4, #0]
 802311c:	6054      	str	r4, [r2, #4]
 802311e:	e7ca      	b.n	80230b6 <_free_r+0x26>
 8023120:	b003      	add	sp, #12
 8023122:	bd30      	pop	{r4, r5, pc}
 8023124:	2000fdd4 	.word	0x2000fdd4

08023128 <sbrk_aligned>:
 8023128:	b570      	push	{r4, r5, r6, lr}
 802312a:	4e0e      	ldr	r6, [pc, #56]	; (8023164 <sbrk_aligned+0x3c>)
 802312c:	460c      	mov	r4, r1
 802312e:	6831      	ldr	r1, [r6, #0]
 8023130:	4605      	mov	r5, r0
 8023132:	b911      	cbnz	r1, 802313a <sbrk_aligned+0x12>
 8023134:	f000 fa2e 	bl	8023594 <_sbrk_r>
 8023138:	6030      	str	r0, [r6, #0]
 802313a:	4621      	mov	r1, r4
 802313c:	4628      	mov	r0, r5
 802313e:	f000 fa29 	bl	8023594 <_sbrk_r>
 8023142:	1c43      	adds	r3, r0, #1
 8023144:	d00a      	beq.n	802315c <sbrk_aligned+0x34>
 8023146:	1cc4      	adds	r4, r0, #3
 8023148:	f024 0403 	bic.w	r4, r4, #3
 802314c:	42a0      	cmp	r0, r4
 802314e:	d007      	beq.n	8023160 <sbrk_aligned+0x38>
 8023150:	1a21      	subs	r1, r4, r0
 8023152:	4628      	mov	r0, r5
 8023154:	f000 fa1e 	bl	8023594 <_sbrk_r>
 8023158:	3001      	adds	r0, #1
 802315a:	d101      	bne.n	8023160 <sbrk_aligned+0x38>
 802315c:	f04f 34ff 	mov.w	r4, #4294967295
 8023160:	4620      	mov	r0, r4
 8023162:	bd70      	pop	{r4, r5, r6, pc}
 8023164:	2000fdd8 	.word	0x2000fdd8

08023168 <_malloc_r>:
 8023168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802316c:	1ccd      	adds	r5, r1, #3
 802316e:	f025 0503 	bic.w	r5, r5, #3
 8023172:	3508      	adds	r5, #8
 8023174:	2d0c      	cmp	r5, #12
 8023176:	bf38      	it	cc
 8023178:	250c      	movcc	r5, #12
 802317a:	2d00      	cmp	r5, #0
 802317c:	4607      	mov	r7, r0
 802317e:	db01      	blt.n	8023184 <_malloc_r+0x1c>
 8023180:	42a9      	cmp	r1, r5
 8023182:	d905      	bls.n	8023190 <_malloc_r+0x28>
 8023184:	230c      	movs	r3, #12
 8023186:	603b      	str	r3, [r7, #0]
 8023188:	2600      	movs	r6, #0
 802318a:	4630      	mov	r0, r6
 802318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023190:	4e2e      	ldr	r6, [pc, #184]	; (802324c <_malloc_r+0xe4>)
 8023192:	f000 faeb 	bl	802376c <__malloc_lock>
 8023196:	6833      	ldr	r3, [r6, #0]
 8023198:	461c      	mov	r4, r3
 802319a:	bb34      	cbnz	r4, 80231ea <_malloc_r+0x82>
 802319c:	4629      	mov	r1, r5
 802319e:	4638      	mov	r0, r7
 80231a0:	f7ff ffc2 	bl	8023128 <sbrk_aligned>
 80231a4:	1c43      	adds	r3, r0, #1
 80231a6:	4604      	mov	r4, r0
 80231a8:	d14d      	bne.n	8023246 <_malloc_r+0xde>
 80231aa:	6834      	ldr	r4, [r6, #0]
 80231ac:	4626      	mov	r6, r4
 80231ae:	2e00      	cmp	r6, #0
 80231b0:	d140      	bne.n	8023234 <_malloc_r+0xcc>
 80231b2:	6823      	ldr	r3, [r4, #0]
 80231b4:	4631      	mov	r1, r6
 80231b6:	4638      	mov	r0, r7
 80231b8:	eb04 0803 	add.w	r8, r4, r3
 80231bc:	f000 f9ea 	bl	8023594 <_sbrk_r>
 80231c0:	4580      	cmp	r8, r0
 80231c2:	d13a      	bne.n	802323a <_malloc_r+0xd2>
 80231c4:	6821      	ldr	r1, [r4, #0]
 80231c6:	3503      	adds	r5, #3
 80231c8:	1a6d      	subs	r5, r5, r1
 80231ca:	f025 0503 	bic.w	r5, r5, #3
 80231ce:	3508      	adds	r5, #8
 80231d0:	2d0c      	cmp	r5, #12
 80231d2:	bf38      	it	cc
 80231d4:	250c      	movcc	r5, #12
 80231d6:	4629      	mov	r1, r5
 80231d8:	4638      	mov	r0, r7
 80231da:	f7ff ffa5 	bl	8023128 <sbrk_aligned>
 80231de:	3001      	adds	r0, #1
 80231e0:	d02b      	beq.n	802323a <_malloc_r+0xd2>
 80231e2:	6823      	ldr	r3, [r4, #0]
 80231e4:	442b      	add	r3, r5
 80231e6:	6023      	str	r3, [r4, #0]
 80231e8:	e00e      	b.n	8023208 <_malloc_r+0xa0>
 80231ea:	6822      	ldr	r2, [r4, #0]
 80231ec:	1b52      	subs	r2, r2, r5
 80231ee:	d41e      	bmi.n	802322e <_malloc_r+0xc6>
 80231f0:	2a0b      	cmp	r2, #11
 80231f2:	d916      	bls.n	8023222 <_malloc_r+0xba>
 80231f4:	1961      	adds	r1, r4, r5
 80231f6:	42a3      	cmp	r3, r4
 80231f8:	6025      	str	r5, [r4, #0]
 80231fa:	bf18      	it	ne
 80231fc:	6059      	strne	r1, [r3, #4]
 80231fe:	6863      	ldr	r3, [r4, #4]
 8023200:	bf08      	it	eq
 8023202:	6031      	streq	r1, [r6, #0]
 8023204:	5162      	str	r2, [r4, r5]
 8023206:	604b      	str	r3, [r1, #4]
 8023208:	4638      	mov	r0, r7
 802320a:	f104 060b 	add.w	r6, r4, #11
 802320e:	f000 fab3 	bl	8023778 <__malloc_unlock>
 8023212:	f026 0607 	bic.w	r6, r6, #7
 8023216:	1d23      	adds	r3, r4, #4
 8023218:	1af2      	subs	r2, r6, r3
 802321a:	d0b6      	beq.n	802318a <_malloc_r+0x22>
 802321c:	1b9b      	subs	r3, r3, r6
 802321e:	50a3      	str	r3, [r4, r2]
 8023220:	e7b3      	b.n	802318a <_malloc_r+0x22>
 8023222:	6862      	ldr	r2, [r4, #4]
 8023224:	42a3      	cmp	r3, r4
 8023226:	bf0c      	ite	eq
 8023228:	6032      	streq	r2, [r6, #0]
 802322a:	605a      	strne	r2, [r3, #4]
 802322c:	e7ec      	b.n	8023208 <_malloc_r+0xa0>
 802322e:	4623      	mov	r3, r4
 8023230:	6864      	ldr	r4, [r4, #4]
 8023232:	e7b2      	b.n	802319a <_malloc_r+0x32>
 8023234:	4634      	mov	r4, r6
 8023236:	6876      	ldr	r6, [r6, #4]
 8023238:	e7b9      	b.n	80231ae <_malloc_r+0x46>
 802323a:	230c      	movs	r3, #12
 802323c:	603b      	str	r3, [r7, #0]
 802323e:	4638      	mov	r0, r7
 8023240:	f000 fa9a 	bl	8023778 <__malloc_unlock>
 8023244:	e7a1      	b.n	802318a <_malloc_r+0x22>
 8023246:	6025      	str	r5, [r4, #0]
 8023248:	e7de      	b.n	8023208 <_malloc_r+0xa0>
 802324a:	bf00      	nop
 802324c:	2000fdd4 	.word	0x2000fdd4

08023250 <__sfputc_r>:
 8023250:	6893      	ldr	r3, [r2, #8]
 8023252:	3b01      	subs	r3, #1
 8023254:	2b00      	cmp	r3, #0
 8023256:	b410      	push	{r4}
 8023258:	6093      	str	r3, [r2, #8]
 802325a:	da08      	bge.n	802326e <__sfputc_r+0x1e>
 802325c:	6994      	ldr	r4, [r2, #24]
 802325e:	42a3      	cmp	r3, r4
 8023260:	db01      	blt.n	8023266 <__sfputc_r+0x16>
 8023262:	290a      	cmp	r1, #10
 8023264:	d103      	bne.n	802326e <__sfputc_r+0x1e>
 8023266:	f85d 4b04 	ldr.w	r4, [sp], #4
 802326a:	f7fe ba11 	b.w	8021690 <__swbuf_r>
 802326e:	6813      	ldr	r3, [r2, #0]
 8023270:	1c58      	adds	r0, r3, #1
 8023272:	6010      	str	r0, [r2, #0]
 8023274:	7019      	strb	r1, [r3, #0]
 8023276:	4608      	mov	r0, r1
 8023278:	f85d 4b04 	ldr.w	r4, [sp], #4
 802327c:	4770      	bx	lr

0802327e <__sfputs_r>:
 802327e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023280:	4606      	mov	r6, r0
 8023282:	460f      	mov	r7, r1
 8023284:	4614      	mov	r4, r2
 8023286:	18d5      	adds	r5, r2, r3
 8023288:	42ac      	cmp	r4, r5
 802328a:	d101      	bne.n	8023290 <__sfputs_r+0x12>
 802328c:	2000      	movs	r0, #0
 802328e:	e007      	b.n	80232a0 <__sfputs_r+0x22>
 8023290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023294:	463a      	mov	r2, r7
 8023296:	4630      	mov	r0, r6
 8023298:	f7ff ffda 	bl	8023250 <__sfputc_r>
 802329c:	1c43      	adds	r3, r0, #1
 802329e:	d1f3      	bne.n	8023288 <__sfputs_r+0xa>
 80232a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080232a4 <_vfiprintf_r>:
 80232a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a8:	460d      	mov	r5, r1
 80232aa:	b09d      	sub	sp, #116	; 0x74
 80232ac:	4614      	mov	r4, r2
 80232ae:	4698      	mov	r8, r3
 80232b0:	4606      	mov	r6, r0
 80232b2:	b118      	cbz	r0, 80232bc <_vfiprintf_r+0x18>
 80232b4:	6983      	ldr	r3, [r0, #24]
 80232b6:	b90b      	cbnz	r3, 80232bc <_vfiprintf_r+0x18>
 80232b8:	f7ff fa3e 	bl	8022738 <__sinit>
 80232bc:	4b89      	ldr	r3, [pc, #548]	; (80234e4 <_vfiprintf_r+0x240>)
 80232be:	429d      	cmp	r5, r3
 80232c0:	d11b      	bne.n	80232fa <_vfiprintf_r+0x56>
 80232c2:	6875      	ldr	r5, [r6, #4]
 80232c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232c6:	07d9      	lsls	r1, r3, #31
 80232c8:	d405      	bmi.n	80232d6 <_vfiprintf_r+0x32>
 80232ca:	89ab      	ldrh	r3, [r5, #12]
 80232cc:	059a      	lsls	r2, r3, #22
 80232ce:	d402      	bmi.n	80232d6 <_vfiprintf_r+0x32>
 80232d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232d2:	f7ff fad4 	bl	802287e <__retarget_lock_acquire_recursive>
 80232d6:	89ab      	ldrh	r3, [r5, #12]
 80232d8:	071b      	lsls	r3, r3, #28
 80232da:	d501      	bpl.n	80232e0 <_vfiprintf_r+0x3c>
 80232dc:	692b      	ldr	r3, [r5, #16]
 80232de:	b9eb      	cbnz	r3, 802331c <_vfiprintf_r+0x78>
 80232e0:	4629      	mov	r1, r5
 80232e2:	4630      	mov	r0, r6
 80232e4:	f7fe fa26 	bl	8021734 <__swsetup_r>
 80232e8:	b1c0      	cbz	r0, 802331c <_vfiprintf_r+0x78>
 80232ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232ec:	07dc      	lsls	r4, r3, #31
 80232ee:	d50e      	bpl.n	802330e <_vfiprintf_r+0x6a>
 80232f0:	f04f 30ff 	mov.w	r0, #4294967295
 80232f4:	b01d      	add	sp, #116	; 0x74
 80232f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232fa:	4b7b      	ldr	r3, [pc, #492]	; (80234e8 <_vfiprintf_r+0x244>)
 80232fc:	429d      	cmp	r5, r3
 80232fe:	d101      	bne.n	8023304 <_vfiprintf_r+0x60>
 8023300:	68b5      	ldr	r5, [r6, #8]
 8023302:	e7df      	b.n	80232c4 <_vfiprintf_r+0x20>
 8023304:	4b79      	ldr	r3, [pc, #484]	; (80234ec <_vfiprintf_r+0x248>)
 8023306:	429d      	cmp	r5, r3
 8023308:	bf08      	it	eq
 802330a:	68f5      	ldreq	r5, [r6, #12]
 802330c:	e7da      	b.n	80232c4 <_vfiprintf_r+0x20>
 802330e:	89ab      	ldrh	r3, [r5, #12]
 8023310:	0598      	lsls	r0, r3, #22
 8023312:	d4ed      	bmi.n	80232f0 <_vfiprintf_r+0x4c>
 8023314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023316:	f7ff fab3 	bl	8022880 <__retarget_lock_release_recursive>
 802331a:	e7e9      	b.n	80232f0 <_vfiprintf_r+0x4c>
 802331c:	2300      	movs	r3, #0
 802331e:	9309      	str	r3, [sp, #36]	; 0x24
 8023320:	2320      	movs	r3, #32
 8023322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023326:	f8cd 800c 	str.w	r8, [sp, #12]
 802332a:	2330      	movs	r3, #48	; 0x30
 802332c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234f0 <_vfiprintf_r+0x24c>
 8023330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023334:	f04f 0901 	mov.w	r9, #1
 8023338:	4623      	mov	r3, r4
 802333a:	469a      	mov	sl, r3
 802333c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023340:	b10a      	cbz	r2, 8023346 <_vfiprintf_r+0xa2>
 8023342:	2a25      	cmp	r2, #37	; 0x25
 8023344:	d1f9      	bne.n	802333a <_vfiprintf_r+0x96>
 8023346:	ebba 0b04 	subs.w	fp, sl, r4
 802334a:	d00b      	beq.n	8023364 <_vfiprintf_r+0xc0>
 802334c:	465b      	mov	r3, fp
 802334e:	4622      	mov	r2, r4
 8023350:	4629      	mov	r1, r5
 8023352:	4630      	mov	r0, r6
 8023354:	f7ff ff93 	bl	802327e <__sfputs_r>
 8023358:	3001      	adds	r0, #1
 802335a:	f000 80aa 	beq.w	80234b2 <_vfiprintf_r+0x20e>
 802335e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023360:	445a      	add	r2, fp
 8023362:	9209      	str	r2, [sp, #36]	; 0x24
 8023364:	f89a 3000 	ldrb.w	r3, [sl]
 8023368:	2b00      	cmp	r3, #0
 802336a:	f000 80a2 	beq.w	80234b2 <_vfiprintf_r+0x20e>
 802336e:	2300      	movs	r3, #0
 8023370:	f04f 32ff 	mov.w	r2, #4294967295
 8023374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023378:	f10a 0a01 	add.w	sl, sl, #1
 802337c:	9304      	str	r3, [sp, #16]
 802337e:	9307      	str	r3, [sp, #28]
 8023380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023384:	931a      	str	r3, [sp, #104]	; 0x68
 8023386:	4654      	mov	r4, sl
 8023388:	2205      	movs	r2, #5
 802338a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802338e:	4858      	ldr	r0, [pc, #352]	; (80234f0 <_vfiprintf_r+0x24c>)
 8023390:	f7dc ff4e 	bl	8000230 <memchr>
 8023394:	9a04      	ldr	r2, [sp, #16]
 8023396:	b9d8      	cbnz	r0, 80233d0 <_vfiprintf_r+0x12c>
 8023398:	06d1      	lsls	r1, r2, #27
 802339a:	bf44      	itt	mi
 802339c:	2320      	movmi	r3, #32
 802339e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233a2:	0713      	lsls	r3, r2, #28
 80233a4:	bf44      	itt	mi
 80233a6:	232b      	movmi	r3, #43	; 0x2b
 80233a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233ac:	f89a 3000 	ldrb.w	r3, [sl]
 80233b0:	2b2a      	cmp	r3, #42	; 0x2a
 80233b2:	d015      	beq.n	80233e0 <_vfiprintf_r+0x13c>
 80233b4:	9a07      	ldr	r2, [sp, #28]
 80233b6:	4654      	mov	r4, sl
 80233b8:	2000      	movs	r0, #0
 80233ba:	f04f 0c0a 	mov.w	ip, #10
 80233be:	4621      	mov	r1, r4
 80233c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233c4:	3b30      	subs	r3, #48	; 0x30
 80233c6:	2b09      	cmp	r3, #9
 80233c8:	d94e      	bls.n	8023468 <_vfiprintf_r+0x1c4>
 80233ca:	b1b0      	cbz	r0, 80233fa <_vfiprintf_r+0x156>
 80233cc:	9207      	str	r2, [sp, #28]
 80233ce:	e014      	b.n	80233fa <_vfiprintf_r+0x156>
 80233d0:	eba0 0308 	sub.w	r3, r0, r8
 80233d4:	fa09 f303 	lsl.w	r3, r9, r3
 80233d8:	4313      	orrs	r3, r2
 80233da:	9304      	str	r3, [sp, #16]
 80233dc:	46a2      	mov	sl, r4
 80233de:	e7d2      	b.n	8023386 <_vfiprintf_r+0xe2>
 80233e0:	9b03      	ldr	r3, [sp, #12]
 80233e2:	1d19      	adds	r1, r3, #4
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	9103      	str	r1, [sp, #12]
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	bfbb      	ittet	lt
 80233ec:	425b      	neglt	r3, r3
 80233ee:	f042 0202 	orrlt.w	r2, r2, #2
 80233f2:	9307      	strge	r3, [sp, #28]
 80233f4:	9307      	strlt	r3, [sp, #28]
 80233f6:	bfb8      	it	lt
 80233f8:	9204      	strlt	r2, [sp, #16]
 80233fa:	7823      	ldrb	r3, [r4, #0]
 80233fc:	2b2e      	cmp	r3, #46	; 0x2e
 80233fe:	d10c      	bne.n	802341a <_vfiprintf_r+0x176>
 8023400:	7863      	ldrb	r3, [r4, #1]
 8023402:	2b2a      	cmp	r3, #42	; 0x2a
 8023404:	d135      	bne.n	8023472 <_vfiprintf_r+0x1ce>
 8023406:	9b03      	ldr	r3, [sp, #12]
 8023408:	1d1a      	adds	r2, r3, #4
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	9203      	str	r2, [sp, #12]
 802340e:	2b00      	cmp	r3, #0
 8023410:	bfb8      	it	lt
 8023412:	f04f 33ff 	movlt.w	r3, #4294967295
 8023416:	3402      	adds	r4, #2
 8023418:	9305      	str	r3, [sp, #20]
 802341a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023500 <_vfiprintf_r+0x25c>
 802341e:	7821      	ldrb	r1, [r4, #0]
 8023420:	2203      	movs	r2, #3
 8023422:	4650      	mov	r0, sl
 8023424:	f7dc ff04 	bl	8000230 <memchr>
 8023428:	b140      	cbz	r0, 802343c <_vfiprintf_r+0x198>
 802342a:	2340      	movs	r3, #64	; 0x40
 802342c:	eba0 000a 	sub.w	r0, r0, sl
 8023430:	fa03 f000 	lsl.w	r0, r3, r0
 8023434:	9b04      	ldr	r3, [sp, #16]
 8023436:	4303      	orrs	r3, r0
 8023438:	3401      	adds	r4, #1
 802343a:	9304      	str	r3, [sp, #16]
 802343c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023440:	482c      	ldr	r0, [pc, #176]	; (80234f4 <_vfiprintf_r+0x250>)
 8023442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023446:	2206      	movs	r2, #6
 8023448:	f7dc fef2 	bl	8000230 <memchr>
 802344c:	2800      	cmp	r0, #0
 802344e:	d03f      	beq.n	80234d0 <_vfiprintf_r+0x22c>
 8023450:	4b29      	ldr	r3, [pc, #164]	; (80234f8 <_vfiprintf_r+0x254>)
 8023452:	bb1b      	cbnz	r3, 802349c <_vfiprintf_r+0x1f8>
 8023454:	9b03      	ldr	r3, [sp, #12]
 8023456:	3307      	adds	r3, #7
 8023458:	f023 0307 	bic.w	r3, r3, #7
 802345c:	3308      	adds	r3, #8
 802345e:	9303      	str	r3, [sp, #12]
 8023460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023462:	443b      	add	r3, r7
 8023464:	9309      	str	r3, [sp, #36]	; 0x24
 8023466:	e767      	b.n	8023338 <_vfiprintf_r+0x94>
 8023468:	fb0c 3202 	mla	r2, ip, r2, r3
 802346c:	460c      	mov	r4, r1
 802346e:	2001      	movs	r0, #1
 8023470:	e7a5      	b.n	80233be <_vfiprintf_r+0x11a>
 8023472:	2300      	movs	r3, #0
 8023474:	3401      	adds	r4, #1
 8023476:	9305      	str	r3, [sp, #20]
 8023478:	4619      	mov	r1, r3
 802347a:	f04f 0c0a 	mov.w	ip, #10
 802347e:	4620      	mov	r0, r4
 8023480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023484:	3a30      	subs	r2, #48	; 0x30
 8023486:	2a09      	cmp	r2, #9
 8023488:	d903      	bls.n	8023492 <_vfiprintf_r+0x1ee>
 802348a:	2b00      	cmp	r3, #0
 802348c:	d0c5      	beq.n	802341a <_vfiprintf_r+0x176>
 802348e:	9105      	str	r1, [sp, #20]
 8023490:	e7c3      	b.n	802341a <_vfiprintf_r+0x176>
 8023492:	fb0c 2101 	mla	r1, ip, r1, r2
 8023496:	4604      	mov	r4, r0
 8023498:	2301      	movs	r3, #1
 802349a:	e7f0      	b.n	802347e <_vfiprintf_r+0x1da>
 802349c:	ab03      	add	r3, sp, #12
 802349e:	9300      	str	r3, [sp, #0]
 80234a0:	462a      	mov	r2, r5
 80234a2:	4b16      	ldr	r3, [pc, #88]	; (80234fc <_vfiprintf_r+0x258>)
 80234a4:	a904      	add	r1, sp, #16
 80234a6:	4630      	mov	r0, r6
 80234a8:	f7fd fc84 	bl	8020db4 <_printf_float>
 80234ac:	4607      	mov	r7, r0
 80234ae:	1c78      	adds	r0, r7, #1
 80234b0:	d1d6      	bne.n	8023460 <_vfiprintf_r+0x1bc>
 80234b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234b4:	07d9      	lsls	r1, r3, #31
 80234b6:	d405      	bmi.n	80234c4 <_vfiprintf_r+0x220>
 80234b8:	89ab      	ldrh	r3, [r5, #12]
 80234ba:	059a      	lsls	r2, r3, #22
 80234bc:	d402      	bmi.n	80234c4 <_vfiprintf_r+0x220>
 80234be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234c0:	f7ff f9de 	bl	8022880 <__retarget_lock_release_recursive>
 80234c4:	89ab      	ldrh	r3, [r5, #12]
 80234c6:	065b      	lsls	r3, r3, #25
 80234c8:	f53f af12 	bmi.w	80232f0 <_vfiprintf_r+0x4c>
 80234cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234ce:	e711      	b.n	80232f4 <_vfiprintf_r+0x50>
 80234d0:	ab03      	add	r3, sp, #12
 80234d2:	9300      	str	r3, [sp, #0]
 80234d4:	462a      	mov	r2, r5
 80234d6:	4b09      	ldr	r3, [pc, #36]	; (80234fc <_vfiprintf_r+0x258>)
 80234d8:	a904      	add	r1, sp, #16
 80234da:	4630      	mov	r0, r6
 80234dc:	f7fd ff0e 	bl	80212fc <_printf_i>
 80234e0:	e7e4      	b.n	80234ac <_vfiprintf_r+0x208>
 80234e2:	bf00      	nop
 80234e4:	080252fc 	.word	0x080252fc
 80234e8:	0802531c 	.word	0x0802531c
 80234ec:	080252dc 	.word	0x080252dc
 80234f0:	08025494 	.word	0x08025494
 80234f4:	0802549e 	.word	0x0802549e
 80234f8:	08020db5 	.word	0x08020db5
 80234fc:	0802327f 	.word	0x0802327f
 8023500:	0802549a 	.word	0x0802549a

08023504 <_putc_r>:
 8023504:	b570      	push	{r4, r5, r6, lr}
 8023506:	460d      	mov	r5, r1
 8023508:	4614      	mov	r4, r2
 802350a:	4606      	mov	r6, r0
 802350c:	b118      	cbz	r0, 8023516 <_putc_r+0x12>
 802350e:	6983      	ldr	r3, [r0, #24]
 8023510:	b90b      	cbnz	r3, 8023516 <_putc_r+0x12>
 8023512:	f7ff f911 	bl	8022738 <__sinit>
 8023516:	4b1c      	ldr	r3, [pc, #112]	; (8023588 <_putc_r+0x84>)
 8023518:	429c      	cmp	r4, r3
 802351a:	d124      	bne.n	8023566 <_putc_r+0x62>
 802351c:	6874      	ldr	r4, [r6, #4]
 802351e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023520:	07d8      	lsls	r0, r3, #31
 8023522:	d405      	bmi.n	8023530 <_putc_r+0x2c>
 8023524:	89a3      	ldrh	r3, [r4, #12]
 8023526:	0599      	lsls	r1, r3, #22
 8023528:	d402      	bmi.n	8023530 <_putc_r+0x2c>
 802352a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802352c:	f7ff f9a7 	bl	802287e <__retarget_lock_acquire_recursive>
 8023530:	68a3      	ldr	r3, [r4, #8]
 8023532:	3b01      	subs	r3, #1
 8023534:	2b00      	cmp	r3, #0
 8023536:	60a3      	str	r3, [r4, #8]
 8023538:	da05      	bge.n	8023546 <_putc_r+0x42>
 802353a:	69a2      	ldr	r2, [r4, #24]
 802353c:	4293      	cmp	r3, r2
 802353e:	db1c      	blt.n	802357a <_putc_r+0x76>
 8023540:	b2eb      	uxtb	r3, r5
 8023542:	2b0a      	cmp	r3, #10
 8023544:	d019      	beq.n	802357a <_putc_r+0x76>
 8023546:	6823      	ldr	r3, [r4, #0]
 8023548:	1c5a      	adds	r2, r3, #1
 802354a:	6022      	str	r2, [r4, #0]
 802354c:	701d      	strb	r5, [r3, #0]
 802354e:	b2ed      	uxtb	r5, r5
 8023550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023552:	07da      	lsls	r2, r3, #31
 8023554:	d405      	bmi.n	8023562 <_putc_r+0x5e>
 8023556:	89a3      	ldrh	r3, [r4, #12]
 8023558:	059b      	lsls	r3, r3, #22
 802355a:	d402      	bmi.n	8023562 <_putc_r+0x5e>
 802355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802355e:	f7ff f98f 	bl	8022880 <__retarget_lock_release_recursive>
 8023562:	4628      	mov	r0, r5
 8023564:	bd70      	pop	{r4, r5, r6, pc}
 8023566:	4b09      	ldr	r3, [pc, #36]	; (802358c <_putc_r+0x88>)
 8023568:	429c      	cmp	r4, r3
 802356a:	d101      	bne.n	8023570 <_putc_r+0x6c>
 802356c:	68b4      	ldr	r4, [r6, #8]
 802356e:	e7d6      	b.n	802351e <_putc_r+0x1a>
 8023570:	4b07      	ldr	r3, [pc, #28]	; (8023590 <_putc_r+0x8c>)
 8023572:	429c      	cmp	r4, r3
 8023574:	bf08      	it	eq
 8023576:	68f4      	ldreq	r4, [r6, #12]
 8023578:	e7d1      	b.n	802351e <_putc_r+0x1a>
 802357a:	4629      	mov	r1, r5
 802357c:	4622      	mov	r2, r4
 802357e:	4630      	mov	r0, r6
 8023580:	f7fe f886 	bl	8021690 <__swbuf_r>
 8023584:	4605      	mov	r5, r0
 8023586:	e7e3      	b.n	8023550 <_putc_r+0x4c>
 8023588:	080252fc 	.word	0x080252fc
 802358c:	0802531c 	.word	0x0802531c
 8023590:	080252dc 	.word	0x080252dc

08023594 <_sbrk_r>:
 8023594:	b538      	push	{r3, r4, r5, lr}
 8023596:	4d06      	ldr	r5, [pc, #24]	; (80235b0 <_sbrk_r+0x1c>)
 8023598:	2300      	movs	r3, #0
 802359a:	4604      	mov	r4, r0
 802359c:	4608      	mov	r0, r1
 802359e:	602b      	str	r3, [r5, #0]
 80235a0:	f7f4 fd3c 	bl	801801c <_sbrk>
 80235a4:	1c43      	adds	r3, r0, #1
 80235a6:	d102      	bne.n	80235ae <_sbrk_r+0x1a>
 80235a8:	682b      	ldr	r3, [r5, #0]
 80235aa:	b103      	cbz	r3, 80235ae <_sbrk_r+0x1a>
 80235ac:	6023      	str	r3, [r4, #0]
 80235ae:	bd38      	pop	{r3, r4, r5, pc}
 80235b0:	2000fddc 	.word	0x2000fddc

080235b4 <__sread>:
 80235b4:	b510      	push	{r4, lr}
 80235b6:	460c      	mov	r4, r1
 80235b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235bc:	f000 f8e2 	bl	8023784 <_read_r>
 80235c0:	2800      	cmp	r0, #0
 80235c2:	bfab      	itete	ge
 80235c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80235c6:	89a3      	ldrhlt	r3, [r4, #12]
 80235c8:	181b      	addge	r3, r3, r0
 80235ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80235ce:	bfac      	ite	ge
 80235d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80235d2:	81a3      	strhlt	r3, [r4, #12]
 80235d4:	bd10      	pop	{r4, pc}

080235d6 <__swrite>:
 80235d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235da:	461f      	mov	r7, r3
 80235dc:	898b      	ldrh	r3, [r1, #12]
 80235de:	05db      	lsls	r3, r3, #23
 80235e0:	4605      	mov	r5, r0
 80235e2:	460c      	mov	r4, r1
 80235e4:	4616      	mov	r6, r2
 80235e6:	d505      	bpl.n	80235f4 <__swrite+0x1e>
 80235e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235ec:	2302      	movs	r3, #2
 80235ee:	2200      	movs	r2, #0
 80235f0:	f000 f898 	bl	8023724 <_lseek_r>
 80235f4:	89a3      	ldrh	r3, [r4, #12]
 80235f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80235fe:	81a3      	strh	r3, [r4, #12]
 8023600:	4632      	mov	r2, r6
 8023602:	463b      	mov	r3, r7
 8023604:	4628      	mov	r0, r5
 8023606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802360a:	f000 b817 	b.w	802363c <_write_r>

0802360e <__sseek>:
 802360e:	b510      	push	{r4, lr}
 8023610:	460c      	mov	r4, r1
 8023612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023616:	f000 f885 	bl	8023724 <_lseek_r>
 802361a:	1c43      	adds	r3, r0, #1
 802361c:	89a3      	ldrh	r3, [r4, #12]
 802361e:	bf15      	itete	ne
 8023620:	6560      	strne	r0, [r4, #84]	; 0x54
 8023622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802362a:	81a3      	strheq	r3, [r4, #12]
 802362c:	bf18      	it	ne
 802362e:	81a3      	strhne	r3, [r4, #12]
 8023630:	bd10      	pop	{r4, pc}

08023632 <__sclose>:
 8023632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023636:	f000 b831 	b.w	802369c <_close_r>
	...

0802363c <_write_r>:
 802363c:	b538      	push	{r3, r4, r5, lr}
 802363e:	4d07      	ldr	r5, [pc, #28]	; (802365c <_write_r+0x20>)
 8023640:	4604      	mov	r4, r0
 8023642:	4608      	mov	r0, r1
 8023644:	4611      	mov	r1, r2
 8023646:	2200      	movs	r2, #0
 8023648:	602a      	str	r2, [r5, #0]
 802364a:	461a      	mov	r2, r3
 802364c:	f7f4 fc92 	bl	8017f74 <_write>
 8023650:	1c43      	adds	r3, r0, #1
 8023652:	d102      	bne.n	802365a <_write_r+0x1e>
 8023654:	682b      	ldr	r3, [r5, #0]
 8023656:	b103      	cbz	r3, 802365a <_write_r+0x1e>
 8023658:	6023      	str	r3, [r4, #0]
 802365a:	bd38      	pop	{r3, r4, r5, pc}
 802365c:	2000fddc 	.word	0x2000fddc

08023660 <__assert_func>:
 8023660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023662:	4614      	mov	r4, r2
 8023664:	461a      	mov	r2, r3
 8023666:	4b09      	ldr	r3, [pc, #36]	; (802368c <__assert_func+0x2c>)
 8023668:	681b      	ldr	r3, [r3, #0]
 802366a:	4605      	mov	r5, r0
 802366c:	68d8      	ldr	r0, [r3, #12]
 802366e:	b14c      	cbz	r4, 8023684 <__assert_func+0x24>
 8023670:	4b07      	ldr	r3, [pc, #28]	; (8023690 <__assert_func+0x30>)
 8023672:	9100      	str	r1, [sp, #0]
 8023674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023678:	4906      	ldr	r1, [pc, #24]	; (8023694 <__assert_func+0x34>)
 802367a:	462b      	mov	r3, r5
 802367c:	f000 f81e 	bl	80236bc <fiprintf>
 8023680:	f000 f89f 	bl	80237c2 <abort>
 8023684:	4b04      	ldr	r3, [pc, #16]	; (8023698 <__assert_func+0x38>)
 8023686:	461c      	mov	r4, r3
 8023688:	e7f3      	b.n	8023672 <__assert_func+0x12>
 802368a:	bf00      	nop
 802368c:	2000002c 	.word	0x2000002c
 8023690:	080254a5 	.word	0x080254a5
 8023694:	080254b2 	.word	0x080254b2
 8023698:	080254e0 	.word	0x080254e0

0802369c <_close_r>:
 802369c:	b538      	push	{r3, r4, r5, lr}
 802369e:	4d06      	ldr	r5, [pc, #24]	; (80236b8 <_close_r+0x1c>)
 80236a0:	2300      	movs	r3, #0
 80236a2:	4604      	mov	r4, r0
 80236a4:	4608      	mov	r0, r1
 80236a6:	602b      	str	r3, [r5, #0]
 80236a8:	f7f4 fc84 	bl	8017fb4 <_close>
 80236ac:	1c43      	adds	r3, r0, #1
 80236ae:	d102      	bne.n	80236b6 <_close_r+0x1a>
 80236b0:	682b      	ldr	r3, [r5, #0]
 80236b2:	b103      	cbz	r3, 80236b6 <_close_r+0x1a>
 80236b4:	6023      	str	r3, [r4, #0]
 80236b6:	bd38      	pop	{r3, r4, r5, pc}
 80236b8:	2000fddc 	.word	0x2000fddc

080236bc <fiprintf>:
 80236bc:	b40e      	push	{r1, r2, r3}
 80236be:	b503      	push	{r0, r1, lr}
 80236c0:	4601      	mov	r1, r0
 80236c2:	ab03      	add	r3, sp, #12
 80236c4:	4805      	ldr	r0, [pc, #20]	; (80236dc <fiprintf+0x20>)
 80236c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80236ca:	6800      	ldr	r0, [r0, #0]
 80236cc:	9301      	str	r3, [sp, #4]
 80236ce:	f7ff fde9 	bl	80232a4 <_vfiprintf_r>
 80236d2:	b002      	add	sp, #8
 80236d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80236d8:	b003      	add	sp, #12
 80236da:	4770      	bx	lr
 80236dc:	2000002c 	.word	0x2000002c

080236e0 <_fstat_r>:
 80236e0:	b538      	push	{r3, r4, r5, lr}
 80236e2:	4d07      	ldr	r5, [pc, #28]	; (8023700 <_fstat_r+0x20>)
 80236e4:	2300      	movs	r3, #0
 80236e6:	4604      	mov	r4, r0
 80236e8:	4608      	mov	r0, r1
 80236ea:	4611      	mov	r1, r2
 80236ec:	602b      	str	r3, [r5, #0]
 80236ee:	f7f4 fc6d 	bl	8017fcc <_fstat>
 80236f2:	1c43      	adds	r3, r0, #1
 80236f4:	d102      	bne.n	80236fc <_fstat_r+0x1c>
 80236f6:	682b      	ldr	r3, [r5, #0]
 80236f8:	b103      	cbz	r3, 80236fc <_fstat_r+0x1c>
 80236fa:	6023      	str	r3, [r4, #0]
 80236fc:	bd38      	pop	{r3, r4, r5, pc}
 80236fe:	bf00      	nop
 8023700:	2000fddc 	.word	0x2000fddc

08023704 <_isatty_r>:
 8023704:	b538      	push	{r3, r4, r5, lr}
 8023706:	4d06      	ldr	r5, [pc, #24]	; (8023720 <_isatty_r+0x1c>)
 8023708:	2300      	movs	r3, #0
 802370a:	4604      	mov	r4, r0
 802370c:	4608      	mov	r0, r1
 802370e:	602b      	str	r3, [r5, #0]
 8023710:	f7f4 fc6c 	bl	8017fec <_isatty>
 8023714:	1c43      	adds	r3, r0, #1
 8023716:	d102      	bne.n	802371e <_isatty_r+0x1a>
 8023718:	682b      	ldr	r3, [r5, #0]
 802371a:	b103      	cbz	r3, 802371e <_isatty_r+0x1a>
 802371c:	6023      	str	r3, [r4, #0]
 802371e:	bd38      	pop	{r3, r4, r5, pc}
 8023720:	2000fddc 	.word	0x2000fddc

08023724 <_lseek_r>:
 8023724:	b538      	push	{r3, r4, r5, lr}
 8023726:	4d07      	ldr	r5, [pc, #28]	; (8023744 <_lseek_r+0x20>)
 8023728:	4604      	mov	r4, r0
 802372a:	4608      	mov	r0, r1
 802372c:	4611      	mov	r1, r2
 802372e:	2200      	movs	r2, #0
 8023730:	602a      	str	r2, [r5, #0]
 8023732:	461a      	mov	r2, r3
 8023734:	f7f4 fc65 	bl	8018002 <_lseek>
 8023738:	1c43      	adds	r3, r0, #1
 802373a:	d102      	bne.n	8023742 <_lseek_r+0x1e>
 802373c:	682b      	ldr	r3, [r5, #0]
 802373e:	b103      	cbz	r3, 8023742 <_lseek_r+0x1e>
 8023740:	6023      	str	r3, [r4, #0]
 8023742:	bd38      	pop	{r3, r4, r5, pc}
 8023744:	2000fddc 	.word	0x2000fddc

08023748 <__ascii_mbtowc>:
 8023748:	b082      	sub	sp, #8
 802374a:	b901      	cbnz	r1, 802374e <__ascii_mbtowc+0x6>
 802374c:	a901      	add	r1, sp, #4
 802374e:	b142      	cbz	r2, 8023762 <__ascii_mbtowc+0x1a>
 8023750:	b14b      	cbz	r3, 8023766 <__ascii_mbtowc+0x1e>
 8023752:	7813      	ldrb	r3, [r2, #0]
 8023754:	600b      	str	r3, [r1, #0]
 8023756:	7812      	ldrb	r2, [r2, #0]
 8023758:	1e10      	subs	r0, r2, #0
 802375a:	bf18      	it	ne
 802375c:	2001      	movne	r0, #1
 802375e:	b002      	add	sp, #8
 8023760:	4770      	bx	lr
 8023762:	4610      	mov	r0, r2
 8023764:	e7fb      	b.n	802375e <__ascii_mbtowc+0x16>
 8023766:	f06f 0001 	mvn.w	r0, #1
 802376a:	e7f8      	b.n	802375e <__ascii_mbtowc+0x16>

0802376c <__malloc_lock>:
 802376c:	4801      	ldr	r0, [pc, #4]	; (8023774 <__malloc_lock+0x8>)
 802376e:	f7ff b886 	b.w	802287e <__retarget_lock_acquire_recursive>
 8023772:	bf00      	nop
 8023774:	2000fdd0 	.word	0x2000fdd0

08023778 <__malloc_unlock>:
 8023778:	4801      	ldr	r0, [pc, #4]	; (8023780 <__malloc_unlock+0x8>)
 802377a:	f7ff b881 	b.w	8022880 <__retarget_lock_release_recursive>
 802377e:	bf00      	nop
 8023780:	2000fdd0 	.word	0x2000fdd0

08023784 <_read_r>:
 8023784:	b538      	push	{r3, r4, r5, lr}
 8023786:	4d07      	ldr	r5, [pc, #28]	; (80237a4 <_read_r+0x20>)
 8023788:	4604      	mov	r4, r0
 802378a:	4608      	mov	r0, r1
 802378c:	4611      	mov	r1, r2
 802378e:	2200      	movs	r2, #0
 8023790:	602a      	str	r2, [r5, #0]
 8023792:	461a      	mov	r2, r3
 8023794:	f7f4 fbd0 	bl	8017f38 <_read>
 8023798:	1c43      	adds	r3, r0, #1
 802379a:	d102      	bne.n	80237a2 <_read_r+0x1e>
 802379c:	682b      	ldr	r3, [r5, #0]
 802379e:	b103      	cbz	r3, 80237a2 <_read_r+0x1e>
 80237a0:	6023      	str	r3, [r4, #0]
 80237a2:	bd38      	pop	{r3, r4, r5, pc}
 80237a4:	2000fddc 	.word	0x2000fddc

080237a8 <__ascii_wctomb>:
 80237a8:	b149      	cbz	r1, 80237be <__ascii_wctomb+0x16>
 80237aa:	2aff      	cmp	r2, #255	; 0xff
 80237ac:	bf85      	ittet	hi
 80237ae:	238a      	movhi	r3, #138	; 0x8a
 80237b0:	6003      	strhi	r3, [r0, #0]
 80237b2:	700a      	strbls	r2, [r1, #0]
 80237b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80237b8:	bf98      	it	ls
 80237ba:	2001      	movls	r0, #1
 80237bc:	4770      	bx	lr
 80237be:	4608      	mov	r0, r1
 80237c0:	4770      	bx	lr

080237c2 <abort>:
 80237c2:	b508      	push	{r3, lr}
 80237c4:	2006      	movs	r0, #6
 80237c6:	f000 f82b 	bl	8023820 <raise>
 80237ca:	2001      	movs	r0, #1
 80237cc:	f7f4 fbaa 	bl	8017f24 <_exit>

080237d0 <_raise_r>:
 80237d0:	291f      	cmp	r1, #31
 80237d2:	b538      	push	{r3, r4, r5, lr}
 80237d4:	4604      	mov	r4, r0
 80237d6:	460d      	mov	r5, r1
 80237d8:	d904      	bls.n	80237e4 <_raise_r+0x14>
 80237da:	2316      	movs	r3, #22
 80237dc:	6003      	str	r3, [r0, #0]
 80237de:	f04f 30ff 	mov.w	r0, #4294967295
 80237e2:	bd38      	pop	{r3, r4, r5, pc}
 80237e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80237e6:	b112      	cbz	r2, 80237ee <_raise_r+0x1e>
 80237e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80237ec:	b94b      	cbnz	r3, 8023802 <_raise_r+0x32>
 80237ee:	4620      	mov	r0, r4
 80237f0:	f000 f830 	bl	8023854 <_getpid_r>
 80237f4:	462a      	mov	r2, r5
 80237f6:	4601      	mov	r1, r0
 80237f8:	4620      	mov	r0, r4
 80237fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80237fe:	f000 b817 	b.w	8023830 <_kill_r>
 8023802:	2b01      	cmp	r3, #1
 8023804:	d00a      	beq.n	802381c <_raise_r+0x4c>
 8023806:	1c59      	adds	r1, r3, #1
 8023808:	d103      	bne.n	8023812 <_raise_r+0x42>
 802380a:	2316      	movs	r3, #22
 802380c:	6003      	str	r3, [r0, #0]
 802380e:	2001      	movs	r0, #1
 8023810:	e7e7      	b.n	80237e2 <_raise_r+0x12>
 8023812:	2400      	movs	r4, #0
 8023814:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023818:	4628      	mov	r0, r5
 802381a:	4798      	blx	r3
 802381c:	2000      	movs	r0, #0
 802381e:	e7e0      	b.n	80237e2 <_raise_r+0x12>

08023820 <raise>:
 8023820:	4b02      	ldr	r3, [pc, #8]	; (802382c <raise+0xc>)
 8023822:	4601      	mov	r1, r0
 8023824:	6818      	ldr	r0, [r3, #0]
 8023826:	f7ff bfd3 	b.w	80237d0 <_raise_r>
 802382a:	bf00      	nop
 802382c:	2000002c 	.word	0x2000002c

08023830 <_kill_r>:
 8023830:	b538      	push	{r3, r4, r5, lr}
 8023832:	4d07      	ldr	r5, [pc, #28]	; (8023850 <_kill_r+0x20>)
 8023834:	2300      	movs	r3, #0
 8023836:	4604      	mov	r4, r0
 8023838:	4608      	mov	r0, r1
 802383a:	4611      	mov	r1, r2
 802383c:	602b      	str	r3, [r5, #0]
 802383e:	f7f4 fb61 	bl	8017f04 <_kill>
 8023842:	1c43      	adds	r3, r0, #1
 8023844:	d102      	bne.n	802384c <_kill_r+0x1c>
 8023846:	682b      	ldr	r3, [r5, #0]
 8023848:	b103      	cbz	r3, 802384c <_kill_r+0x1c>
 802384a:	6023      	str	r3, [r4, #0]
 802384c:	bd38      	pop	{r3, r4, r5, pc}
 802384e:	bf00      	nop
 8023850:	2000fddc 	.word	0x2000fddc

08023854 <_getpid_r>:
 8023854:	f7f4 bb4e 	b.w	8017ef4 <_getpid>

08023858 <ceil>:
 8023858:	ec51 0b10 	vmov	r0, r1, d0
 802385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023860:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023864:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023868:	2e13      	cmp	r6, #19
 802386a:	ee10 5a10 	vmov	r5, s0
 802386e:	ee10 8a10 	vmov	r8, s0
 8023872:	460c      	mov	r4, r1
 8023874:	dc30      	bgt.n	80238d8 <ceil+0x80>
 8023876:	2e00      	cmp	r6, #0
 8023878:	da12      	bge.n	80238a0 <ceil+0x48>
 802387a:	a335      	add	r3, pc, #212	; (adr r3, 8023950 <ceil+0xf8>)
 802387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023880:	f7dc fd2c 	bl	80002dc <__adddf3>
 8023884:	2200      	movs	r2, #0
 8023886:	2300      	movs	r3, #0
 8023888:	f7dd f96e 	bl	8000b68 <__aeabi_dcmpgt>
 802388c:	b128      	cbz	r0, 802389a <ceil+0x42>
 802388e:	2c00      	cmp	r4, #0
 8023890:	db55      	blt.n	802393e <ceil+0xe6>
 8023892:	432c      	orrs	r4, r5
 8023894:	d057      	beq.n	8023946 <ceil+0xee>
 8023896:	4c30      	ldr	r4, [pc, #192]	; (8023958 <ceil+0x100>)
 8023898:	2500      	movs	r5, #0
 802389a:	4621      	mov	r1, r4
 802389c:	4628      	mov	r0, r5
 802389e:	e025      	b.n	80238ec <ceil+0x94>
 80238a0:	4f2e      	ldr	r7, [pc, #184]	; (802395c <ceil+0x104>)
 80238a2:	4137      	asrs	r7, r6
 80238a4:	ea01 0307 	and.w	r3, r1, r7
 80238a8:	4303      	orrs	r3, r0
 80238aa:	d01f      	beq.n	80238ec <ceil+0x94>
 80238ac:	a328      	add	r3, pc, #160	; (adr r3, 8023950 <ceil+0xf8>)
 80238ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238b2:	f7dc fd13 	bl	80002dc <__adddf3>
 80238b6:	2200      	movs	r2, #0
 80238b8:	2300      	movs	r3, #0
 80238ba:	f7dd f955 	bl	8000b68 <__aeabi_dcmpgt>
 80238be:	2800      	cmp	r0, #0
 80238c0:	d0eb      	beq.n	802389a <ceil+0x42>
 80238c2:	2c00      	cmp	r4, #0
 80238c4:	bfc2      	ittt	gt
 80238c6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80238ca:	fa43 f606 	asrgt.w	r6, r3, r6
 80238ce:	19a4      	addgt	r4, r4, r6
 80238d0:	ea24 0407 	bic.w	r4, r4, r7
 80238d4:	2500      	movs	r5, #0
 80238d6:	e7e0      	b.n	802389a <ceil+0x42>
 80238d8:	2e33      	cmp	r6, #51	; 0x33
 80238da:	dd0b      	ble.n	80238f4 <ceil+0x9c>
 80238dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80238e0:	d104      	bne.n	80238ec <ceil+0x94>
 80238e2:	ee10 2a10 	vmov	r2, s0
 80238e6:	460b      	mov	r3, r1
 80238e8:	f7dc fcf8 	bl	80002dc <__adddf3>
 80238ec:	ec41 0b10 	vmov	d0, r0, r1
 80238f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80238f4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80238f8:	f04f 33ff 	mov.w	r3, #4294967295
 80238fc:	fa23 f707 	lsr.w	r7, r3, r7
 8023900:	4207      	tst	r7, r0
 8023902:	d0f3      	beq.n	80238ec <ceil+0x94>
 8023904:	a312      	add	r3, pc, #72	; (adr r3, 8023950 <ceil+0xf8>)
 8023906:	e9d3 2300 	ldrd	r2, r3, [r3]
 802390a:	f7dc fce7 	bl	80002dc <__adddf3>
 802390e:	2200      	movs	r2, #0
 8023910:	2300      	movs	r3, #0
 8023912:	f7dd f929 	bl	8000b68 <__aeabi_dcmpgt>
 8023916:	2800      	cmp	r0, #0
 8023918:	d0bf      	beq.n	802389a <ceil+0x42>
 802391a:	2c00      	cmp	r4, #0
 802391c:	dd02      	ble.n	8023924 <ceil+0xcc>
 802391e:	2e14      	cmp	r6, #20
 8023920:	d103      	bne.n	802392a <ceil+0xd2>
 8023922:	3401      	adds	r4, #1
 8023924:	ea25 0507 	bic.w	r5, r5, r7
 8023928:	e7b7      	b.n	802389a <ceil+0x42>
 802392a:	2301      	movs	r3, #1
 802392c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023930:	fa03 f606 	lsl.w	r6, r3, r6
 8023934:	4435      	add	r5, r6
 8023936:	4545      	cmp	r5, r8
 8023938:	bf38      	it	cc
 802393a:	18e4      	addcc	r4, r4, r3
 802393c:	e7f2      	b.n	8023924 <ceil+0xcc>
 802393e:	2500      	movs	r5, #0
 8023940:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023944:	e7a9      	b.n	802389a <ceil+0x42>
 8023946:	4625      	mov	r5, r4
 8023948:	e7a7      	b.n	802389a <ceil+0x42>
 802394a:	bf00      	nop
 802394c:	f3af 8000 	nop.w
 8023950:	8800759c 	.word	0x8800759c
 8023954:	7e37e43c 	.word	0x7e37e43c
 8023958:	3ff00000 	.word	0x3ff00000
 802395c:	000fffff 	.word	0x000fffff

08023960 <cos>:
 8023960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023962:	ec53 2b10 	vmov	r2, r3, d0
 8023966:	4826      	ldr	r0, [pc, #152]	; (8023a00 <cos+0xa0>)
 8023968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802396c:	4281      	cmp	r1, r0
 802396e:	dc06      	bgt.n	802397e <cos+0x1e>
 8023970:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80239f8 <cos+0x98>
 8023974:	b005      	add	sp, #20
 8023976:	f85d eb04 	ldr.w	lr, [sp], #4
 802397a:	f000 bc75 	b.w	8024268 <__kernel_cos>
 802397e:	4821      	ldr	r0, [pc, #132]	; (8023a04 <cos+0xa4>)
 8023980:	4281      	cmp	r1, r0
 8023982:	dd09      	ble.n	8023998 <cos+0x38>
 8023984:	ee10 0a10 	vmov	r0, s0
 8023988:	4619      	mov	r1, r3
 802398a:	f7dc fca5 	bl	80002d8 <__aeabi_dsub>
 802398e:	ec41 0b10 	vmov	d0, r0, r1
 8023992:	b005      	add	sp, #20
 8023994:	f85d fb04 	ldr.w	pc, [sp], #4
 8023998:	4668      	mov	r0, sp
 802399a:	f000 fa59 	bl	8023e50 <__ieee754_rem_pio2>
 802399e:	f000 0003 	and.w	r0, r0, #3
 80239a2:	2801      	cmp	r0, #1
 80239a4:	d00b      	beq.n	80239be <cos+0x5e>
 80239a6:	2802      	cmp	r0, #2
 80239a8:	d016      	beq.n	80239d8 <cos+0x78>
 80239aa:	b9e0      	cbnz	r0, 80239e6 <cos+0x86>
 80239ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239b0:	ed9d 0b00 	vldr	d0, [sp]
 80239b4:	f000 fc58 	bl	8024268 <__kernel_cos>
 80239b8:	ec51 0b10 	vmov	r0, r1, d0
 80239bc:	e7e7      	b.n	802398e <cos+0x2e>
 80239be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239c2:	ed9d 0b00 	vldr	d0, [sp]
 80239c6:	f001 f867 	bl	8024a98 <__kernel_sin>
 80239ca:	ec53 2b10 	vmov	r2, r3, d0
 80239ce:	ee10 0a10 	vmov	r0, s0
 80239d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80239d6:	e7da      	b.n	802398e <cos+0x2e>
 80239d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239dc:	ed9d 0b00 	vldr	d0, [sp]
 80239e0:	f000 fc42 	bl	8024268 <__kernel_cos>
 80239e4:	e7f1      	b.n	80239ca <cos+0x6a>
 80239e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239ea:	ed9d 0b00 	vldr	d0, [sp]
 80239ee:	2001      	movs	r0, #1
 80239f0:	f001 f852 	bl	8024a98 <__kernel_sin>
 80239f4:	e7e0      	b.n	80239b8 <cos+0x58>
 80239f6:	bf00      	nop
	...
 8023a00:	3fe921fb 	.word	0x3fe921fb
 8023a04:	7fefffff 	.word	0x7fefffff

08023a08 <sin>:
 8023a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023a0a:	ec53 2b10 	vmov	r2, r3, d0
 8023a0e:	4828      	ldr	r0, [pc, #160]	; (8023ab0 <sin+0xa8>)
 8023a10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023a14:	4281      	cmp	r1, r0
 8023a16:	dc07      	bgt.n	8023a28 <sin+0x20>
 8023a18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023aa8 <sin+0xa0>
 8023a1c:	2000      	movs	r0, #0
 8023a1e:	b005      	add	sp, #20
 8023a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8023a24:	f001 b838 	b.w	8024a98 <__kernel_sin>
 8023a28:	4822      	ldr	r0, [pc, #136]	; (8023ab4 <sin+0xac>)
 8023a2a:	4281      	cmp	r1, r0
 8023a2c:	dd09      	ble.n	8023a42 <sin+0x3a>
 8023a2e:	ee10 0a10 	vmov	r0, s0
 8023a32:	4619      	mov	r1, r3
 8023a34:	f7dc fc50 	bl	80002d8 <__aeabi_dsub>
 8023a38:	ec41 0b10 	vmov	d0, r0, r1
 8023a3c:	b005      	add	sp, #20
 8023a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023a42:	4668      	mov	r0, sp
 8023a44:	f000 fa04 	bl	8023e50 <__ieee754_rem_pio2>
 8023a48:	f000 0003 	and.w	r0, r0, #3
 8023a4c:	2801      	cmp	r0, #1
 8023a4e:	d00c      	beq.n	8023a6a <sin+0x62>
 8023a50:	2802      	cmp	r0, #2
 8023a52:	d011      	beq.n	8023a78 <sin+0x70>
 8023a54:	b9f0      	cbnz	r0, 8023a94 <sin+0x8c>
 8023a56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a5a:	ed9d 0b00 	vldr	d0, [sp]
 8023a5e:	2001      	movs	r0, #1
 8023a60:	f001 f81a 	bl	8024a98 <__kernel_sin>
 8023a64:	ec51 0b10 	vmov	r0, r1, d0
 8023a68:	e7e6      	b.n	8023a38 <sin+0x30>
 8023a6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a6e:	ed9d 0b00 	vldr	d0, [sp]
 8023a72:	f000 fbf9 	bl	8024268 <__kernel_cos>
 8023a76:	e7f5      	b.n	8023a64 <sin+0x5c>
 8023a78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a7c:	ed9d 0b00 	vldr	d0, [sp]
 8023a80:	2001      	movs	r0, #1
 8023a82:	f001 f809 	bl	8024a98 <__kernel_sin>
 8023a86:	ec53 2b10 	vmov	r2, r3, d0
 8023a8a:	ee10 0a10 	vmov	r0, s0
 8023a8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023a92:	e7d1      	b.n	8023a38 <sin+0x30>
 8023a94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a98:	ed9d 0b00 	vldr	d0, [sp]
 8023a9c:	f000 fbe4 	bl	8024268 <__kernel_cos>
 8023aa0:	e7f1      	b.n	8023a86 <sin+0x7e>
 8023aa2:	bf00      	nop
 8023aa4:	f3af 8000 	nop.w
	...
 8023ab0:	3fe921fb 	.word	0x3fe921fb
 8023ab4:	7fefffff 	.word	0x7fefffff

08023ab8 <exp>:
 8023ab8:	b538      	push	{r3, r4, r5, lr}
 8023aba:	ed2d 8b02 	vpush	{d8}
 8023abe:	ec55 4b10 	vmov	r4, r5, d0
 8023ac2:	f000 f841 	bl	8023b48 <__ieee754_exp>
 8023ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8023aca:	eef0 8a60 	vmov.f32	s17, s1
 8023ace:	ec45 4b10 	vmov	d0, r4, r5
 8023ad2:	f001 f8d8 	bl	8024c86 <finite>
 8023ad6:	b168      	cbz	r0, 8023af4 <exp+0x3c>
 8023ad8:	a317      	add	r3, pc, #92	; (adr r3, 8023b38 <exp+0x80>)
 8023ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ade:	4620      	mov	r0, r4
 8023ae0:	4629      	mov	r1, r5
 8023ae2:	f7dd f841 	bl	8000b68 <__aeabi_dcmpgt>
 8023ae6:	b160      	cbz	r0, 8023b02 <exp+0x4a>
 8023ae8:	f7fd f884 	bl	8020bf4 <__errno>
 8023aec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8023b28 <exp+0x70>
 8023af0:	2322      	movs	r3, #34	; 0x22
 8023af2:	6003      	str	r3, [r0, #0]
 8023af4:	eeb0 0a48 	vmov.f32	s0, s16
 8023af8:	eef0 0a68 	vmov.f32	s1, s17
 8023afc:	ecbd 8b02 	vpop	{d8}
 8023b00:	bd38      	pop	{r3, r4, r5, pc}
 8023b02:	a30f      	add	r3, pc, #60	; (adr r3, 8023b40 <exp+0x88>)
 8023b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b08:	4620      	mov	r0, r4
 8023b0a:	4629      	mov	r1, r5
 8023b0c:	f7dd f80e 	bl	8000b2c <__aeabi_dcmplt>
 8023b10:	2800      	cmp	r0, #0
 8023b12:	d0ef      	beq.n	8023af4 <exp+0x3c>
 8023b14:	f7fd f86e 	bl	8020bf4 <__errno>
 8023b18:	2322      	movs	r3, #34	; 0x22
 8023b1a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8023b30 <exp+0x78>
 8023b1e:	6003      	str	r3, [r0, #0]
 8023b20:	e7e8      	b.n	8023af4 <exp+0x3c>
 8023b22:	bf00      	nop
 8023b24:	f3af 8000 	nop.w
 8023b28:	00000000 	.word	0x00000000
 8023b2c:	7ff00000 	.word	0x7ff00000
	...
 8023b38:	fefa39ef 	.word	0xfefa39ef
 8023b3c:	40862e42 	.word	0x40862e42
 8023b40:	d52d3051 	.word	0xd52d3051
 8023b44:	c0874910 	.word	0xc0874910

08023b48 <__ieee754_exp>:
 8023b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b4c:	ec55 4b10 	vmov	r4, r5, d0
 8023b50:	49b5      	ldr	r1, [pc, #724]	; (8023e28 <__ieee754_exp+0x2e0>)
 8023b52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023b56:	428b      	cmp	r3, r1
 8023b58:	ed2d 8b04 	vpush	{d8-d9}
 8023b5c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023b60:	d93d      	bls.n	8023bde <__ieee754_exp+0x96>
 8023b62:	49b2      	ldr	r1, [pc, #712]	; (8023e2c <__ieee754_exp+0x2e4>)
 8023b64:	428b      	cmp	r3, r1
 8023b66:	d918      	bls.n	8023b9a <__ieee754_exp+0x52>
 8023b68:	ee10 3a10 	vmov	r3, s0
 8023b6c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8023b70:	4313      	orrs	r3, r2
 8023b72:	d009      	beq.n	8023b88 <__ieee754_exp+0x40>
 8023b74:	ee10 2a10 	vmov	r2, s0
 8023b78:	462b      	mov	r3, r5
 8023b7a:	4620      	mov	r0, r4
 8023b7c:	4629      	mov	r1, r5
 8023b7e:	f7dc fbad 	bl	80002dc <__adddf3>
 8023b82:	4604      	mov	r4, r0
 8023b84:	460d      	mov	r5, r1
 8023b86:	e002      	b.n	8023b8e <__ieee754_exp+0x46>
 8023b88:	b10e      	cbz	r6, 8023b8e <__ieee754_exp+0x46>
 8023b8a:	2400      	movs	r4, #0
 8023b8c:	2500      	movs	r5, #0
 8023b8e:	ecbd 8b04 	vpop	{d8-d9}
 8023b92:	ec45 4b10 	vmov	d0, r4, r5
 8023b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b9a:	a38d      	add	r3, pc, #564	; (adr r3, 8023dd0 <__ieee754_exp+0x288>)
 8023b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ba0:	ee10 0a10 	vmov	r0, s0
 8023ba4:	4629      	mov	r1, r5
 8023ba6:	f7dc ffdf 	bl	8000b68 <__aeabi_dcmpgt>
 8023baa:	4607      	mov	r7, r0
 8023bac:	b130      	cbz	r0, 8023bbc <__ieee754_exp+0x74>
 8023bae:	ecbd 8b04 	vpop	{d8-d9}
 8023bb2:	2000      	movs	r0, #0
 8023bb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023bb8:	f001 b853 	b.w	8024c62 <__math_oflow>
 8023bbc:	a386      	add	r3, pc, #536	; (adr r3, 8023dd8 <__ieee754_exp+0x290>)
 8023bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc2:	4620      	mov	r0, r4
 8023bc4:	4629      	mov	r1, r5
 8023bc6:	f7dc ffb1 	bl	8000b2c <__aeabi_dcmplt>
 8023bca:	2800      	cmp	r0, #0
 8023bcc:	f000 808b 	beq.w	8023ce6 <__ieee754_exp+0x19e>
 8023bd0:	ecbd 8b04 	vpop	{d8-d9}
 8023bd4:	4638      	mov	r0, r7
 8023bd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023bda:	f001 b839 	b.w	8024c50 <__math_uflow>
 8023bde:	4a94      	ldr	r2, [pc, #592]	; (8023e30 <__ieee754_exp+0x2e8>)
 8023be0:	4293      	cmp	r3, r2
 8023be2:	f240 80ac 	bls.w	8023d3e <__ieee754_exp+0x1f6>
 8023be6:	4a93      	ldr	r2, [pc, #588]	; (8023e34 <__ieee754_exp+0x2ec>)
 8023be8:	4293      	cmp	r3, r2
 8023bea:	d87c      	bhi.n	8023ce6 <__ieee754_exp+0x19e>
 8023bec:	4b92      	ldr	r3, [pc, #584]	; (8023e38 <__ieee754_exp+0x2f0>)
 8023bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bf6:	ee10 0a10 	vmov	r0, s0
 8023bfa:	4629      	mov	r1, r5
 8023bfc:	f7dc fb6c 	bl	80002d8 <__aeabi_dsub>
 8023c00:	4b8e      	ldr	r3, [pc, #568]	; (8023e3c <__ieee754_exp+0x2f4>)
 8023c02:	00f7      	lsls	r7, r6, #3
 8023c04:	443b      	add	r3, r7
 8023c06:	ed93 7b00 	vldr	d7, [r3]
 8023c0a:	f1c6 0a01 	rsb	sl, r6, #1
 8023c0e:	4680      	mov	r8, r0
 8023c10:	4689      	mov	r9, r1
 8023c12:	ebaa 0a06 	sub.w	sl, sl, r6
 8023c16:	eeb0 8a47 	vmov.f32	s16, s14
 8023c1a:	eef0 8a67 	vmov.f32	s17, s15
 8023c1e:	ec53 2b18 	vmov	r2, r3, d8
 8023c22:	4640      	mov	r0, r8
 8023c24:	4649      	mov	r1, r9
 8023c26:	f7dc fb57 	bl	80002d8 <__aeabi_dsub>
 8023c2a:	4604      	mov	r4, r0
 8023c2c:	460d      	mov	r5, r1
 8023c2e:	4622      	mov	r2, r4
 8023c30:	462b      	mov	r3, r5
 8023c32:	4620      	mov	r0, r4
 8023c34:	4629      	mov	r1, r5
 8023c36:	f7dc fd07 	bl	8000648 <__aeabi_dmul>
 8023c3a:	a369      	add	r3, pc, #420	; (adr r3, 8023de0 <__ieee754_exp+0x298>)
 8023c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c40:	4606      	mov	r6, r0
 8023c42:	460f      	mov	r7, r1
 8023c44:	f7dc fd00 	bl	8000648 <__aeabi_dmul>
 8023c48:	a367      	add	r3, pc, #412	; (adr r3, 8023de8 <__ieee754_exp+0x2a0>)
 8023c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c4e:	f7dc fb43 	bl	80002d8 <__aeabi_dsub>
 8023c52:	4632      	mov	r2, r6
 8023c54:	463b      	mov	r3, r7
 8023c56:	f7dc fcf7 	bl	8000648 <__aeabi_dmul>
 8023c5a:	a365      	add	r3, pc, #404	; (adr r3, 8023df0 <__ieee754_exp+0x2a8>)
 8023c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c60:	f7dc fb3c 	bl	80002dc <__adddf3>
 8023c64:	4632      	mov	r2, r6
 8023c66:	463b      	mov	r3, r7
 8023c68:	f7dc fcee 	bl	8000648 <__aeabi_dmul>
 8023c6c:	a362      	add	r3, pc, #392	; (adr r3, 8023df8 <__ieee754_exp+0x2b0>)
 8023c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c72:	f7dc fb31 	bl	80002d8 <__aeabi_dsub>
 8023c76:	4632      	mov	r2, r6
 8023c78:	463b      	mov	r3, r7
 8023c7a:	f7dc fce5 	bl	8000648 <__aeabi_dmul>
 8023c7e:	a360      	add	r3, pc, #384	; (adr r3, 8023e00 <__ieee754_exp+0x2b8>)
 8023c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c84:	f7dc fb2a 	bl	80002dc <__adddf3>
 8023c88:	4632      	mov	r2, r6
 8023c8a:	463b      	mov	r3, r7
 8023c8c:	f7dc fcdc 	bl	8000648 <__aeabi_dmul>
 8023c90:	4602      	mov	r2, r0
 8023c92:	460b      	mov	r3, r1
 8023c94:	4620      	mov	r0, r4
 8023c96:	4629      	mov	r1, r5
 8023c98:	f7dc fb1e 	bl	80002d8 <__aeabi_dsub>
 8023c9c:	4602      	mov	r2, r0
 8023c9e:	460b      	mov	r3, r1
 8023ca0:	4606      	mov	r6, r0
 8023ca2:	460f      	mov	r7, r1
 8023ca4:	4620      	mov	r0, r4
 8023ca6:	4629      	mov	r1, r5
 8023ca8:	f7dc fcce 	bl	8000648 <__aeabi_dmul>
 8023cac:	ec41 0b19 	vmov	d9, r0, r1
 8023cb0:	f1ba 0f00 	cmp.w	sl, #0
 8023cb4:	d15d      	bne.n	8023d72 <__ieee754_exp+0x22a>
 8023cb6:	2200      	movs	r2, #0
 8023cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023cbc:	4630      	mov	r0, r6
 8023cbe:	4639      	mov	r1, r7
 8023cc0:	f7dc fb0a 	bl	80002d8 <__aeabi_dsub>
 8023cc4:	4602      	mov	r2, r0
 8023cc6:	460b      	mov	r3, r1
 8023cc8:	ec51 0b19 	vmov	r0, r1, d9
 8023ccc:	f7dc fde6 	bl	800089c <__aeabi_ddiv>
 8023cd0:	4622      	mov	r2, r4
 8023cd2:	462b      	mov	r3, r5
 8023cd4:	f7dc fb00 	bl	80002d8 <__aeabi_dsub>
 8023cd8:	4602      	mov	r2, r0
 8023cda:	460b      	mov	r3, r1
 8023cdc:	2000      	movs	r0, #0
 8023cde:	4958      	ldr	r1, [pc, #352]	; (8023e40 <__ieee754_exp+0x2f8>)
 8023ce0:	f7dc fafa 	bl	80002d8 <__aeabi_dsub>
 8023ce4:	e74d      	b.n	8023b82 <__ieee754_exp+0x3a>
 8023ce6:	4857      	ldr	r0, [pc, #348]	; (8023e44 <__ieee754_exp+0x2fc>)
 8023ce8:	a347      	add	r3, pc, #284	; (adr r3, 8023e08 <__ieee754_exp+0x2c0>)
 8023cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cee:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8023cf2:	4629      	mov	r1, r5
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	f7dc fca7 	bl	8000648 <__aeabi_dmul>
 8023cfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023cfe:	f7dc faed 	bl	80002dc <__adddf3>
 8023d02:	f7dc ff51 	bl	8000ba8 <__aeabi_d2iz>
 8023d06:	4682      	mov	sl, r0
 8023d08:	f7dc fc34 	bl	8000574 <__aeabi_i2d>
 8023d0c:	a340      	add	r3, pc, #256	; (adr r3, 8023e10 <__ieee754_exp+0x2c8>)
 8023d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d12:	4606      	mov	r6, r0
 8023d14:	460f      	mov	r7, r1
 8023d16:	f7dc fc97 	bl	8000648 <__aeabi_dmul>
 8023d1a:	4602      	mov	r2, r0
 8023d1c:	460b      	mov	r3, r1
 8023d1e:	4620      	mov	r0, r4
 8023d20:	4629      	mov	r1, r5
 8023d22:	f7dc fad9 	bl	80002d8 <__aeabi_dsub>
 8023d26:	a33c      	add	r3, pc, #240	; (adr r3, 8023e18 <__ieee754_exp+0x2d0>)
 8023d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d2c:	4680      	mov	r8, r0
 8023d2e:	4689      	mov	r9, r1
 8023d30:	4630      	mov	r0, r6
 8023d32:	4639      	mov	r1, r7
 8023d34:	f7dc fc88 	bl	8000648 <__aeabi_dmul>
 8023d38:	ec41 0b18 	vmov	d8, r0, r1
 8023d3c:	e76f      	b.n	8023c1e <__ieee754_exp+0xd6>
 8023d3e:	4a42      	ldr	r2, [pc, #264]	; (8023e48 <__ieee754_exp+0x300>)
 8023d40:	4293      	cmp	r3, r2
 8023d42:	d811      	bhi.n	8023d68 <__ieee754_exp+0x220>
 8023d44:	a336      	add	r3, pc, #216	; (adr r3, 8023e20 <__ieee754_exp+0x2d8>)
 8023d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d4a:	ee10 0a10 	vmov	r0, s0
 8023d4e:	4629      	mov	r1, r5
 8023d50:	f7dc fac4 	bl	80002dc <__adddf3>
 8023d54:	4b3a      	ldr	r3, [pc, #232]	; (8023e40 <__ieee754_exp+0x2f8>)
 8023d56:	2200      	movs	r2, #0
 8023d58:	f7dc ff06 	bl	8000b68 <__aeabi_dcmpgt>
 8023d5c:	b138      	cbz	r0, 8023d6e <__ieee754_exp+0x226>
 8023d5e:	4b38      	ldr	r3, [pc, #224]	; (8023e40 <__ieee754_exp+0x2f8>)
 8023d60:	2200      	movs	r2, #0
 8023d62:	4620      	mov	r0, r4
 8023d64:	4629      	mov	r1, r5
 8023d66:	e70a      	b.n	8023b7e <__ieee754_exp+0x36>
 8023d68:	f04f 0a00 	mov.w	sl, #0
 8023d6c:	e75f      	b.n	8023c2e <__ieee754_exp+0xe6>
 8023d6e:	4682      	mov	sl, r0
 8023d70:	e75d      	b.n	8023c2e <__ieee754_exp+0xe6>
 8023d72:	4632      	mov	r2, r6
 8023d74:	463b      	mov	r3, r7
 8023d76:	2000      	movs	r0, #0
 8023d78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023d7c:	f7dc faac 	bl	80002d8 <__aeabi_dsub>
 8023d80:	4602      	mov	r2, r0
 8023d82:	460b      	mov	r3, r1
 8023d84:	ec51 0b19 	vmov	r0, r1, d9
 8023d88:	f7dc fd88 	bl	800089c <__aeabi_ddiv>
 8023d8c:	4602      	mov	r2, r0
 8023d8e:	460b      	mov	r3, r1
 8023d90:	ec51 0b18 	vmov	r0, r1, d8
 8023d94:	f7dc faa0 	bl	80002d8 <__aeabi_dsub>
 8023d98:	4642      	mov	r2, r8
 8023d9a:	464b      	mov	r3, r9
 8023d9c:	f7dc fa9c 	bl	80002d8 <__aeabi_dsub>
 8023da0:	4602      	mov	r2, r0
 8023da2:	460b      	mov	r3, r1
 8023da4:	2000      	movs	r0, #0
 8023da6:	4926      	ldr	r1, [pc, #152]	; (8023e40 <__ieee754_exp+0x2f8>)
 8023da8:	f7dc fa96 	bl	80002d8 <__aeabi_dsub>
 8023dac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023db0:	4592      	cmp	sl, r2
 8023db2:	db02      	blt.n	8023dba <__ieee754_exp+0x272>
 8023db4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023db8:	e6e3      	b.n	8023b82 <__ieee754_exp+0x3a>
 8023dba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8023dbe:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023dc2:	2200      	movs	r2, #0
 8023dc4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023dc8:	f7dc fc3e 	bl	8000648 <__aeabi_dmul>
 8023dcc:	e6d9      	b.n	8023b82 <__ieee754_exp+0x3a>
 8023dce:	bf00      	nop
 8023dd0:	fefa39ef 	.word	0xfefa39ef
 8023dd4:	40862e42 	.word	0x40862e42
 8023dd8:	d52d3051 	.word	0xd52d3051
 8023ddc:	c0874910 	.word	0xc0874910
 8023de0:	72bea4d0 	.word	0x72bea4d0
 8023de4:	3e663769 	.word	0x3e663769
 8023de8:	c5d26bf1 	.word	0xc5d26bf1
 8023dec:	3ebbbd41 	.word	0x3ebbbd41
 8023df0:	af25de2c 	.word	0xaf25de2c
 8023df4:	3f11566a 	.word	0x3f11566a
 8023df8:	16bebd93 	.word	0x16bebd93
 8023dfc:	3f66c16c 	.word	0x3f66c16c
 8023e00:	5555553e 	.word	0x5555553e
 8023e04:	3fc55555 	.word	0x3fc55555
 8023e08:	652b82fe 	.word	0x652b82fe
 8023e0c:	3ff71547 	.word	0x3ff71547
 8023e10:	fee00000 	.word	0xfee00000
 8023e14:	3fe62e42 	.word	0x3fe62e42
 8023e18:	35793c76 	.word	0x35793c76
 8023e1c:	3dea39ef 	.word	0x3dea39ef
 8023e20:	8800759c 	.word	0x8800759c
 8023e24:	7e37e43c 	.word	0x7e37e43c
 8023e28:	40862e41 	.word	0x40862e41
 8023e2c:	7fefffff 	.word	0x7fefffff
 8023e30:	3fd62e42 	.word	0x3fd62e42
 8023e34:	3ff0a2b1 	.word	0x3ff0a2b1
 8023e38:	08025600 	.word	0x08025600
 8023e3c:	08025610 	.word	0x08025610
 8023e40:	3ff00000 	.word	0x3ff00000
 8023e44:	080255f0 	.word	0x080255f0
 8023e48:	3defffff 	.word	0x3defffff
 8023e4c:	00000000 	.word	0x00000000

08023e50 <__ieee754_rem_pio2>:
 8023e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e54:	ed2d 8b02 	vpush	{d8}
 8023e58:	ec55 4b10 	vmov	r4, r5, d0
 8023e5c:	4bca      	ldr	r3, [pc, #808]	; (8024188 <__ieee754_rem_pio2+0x338>)
 8023e5e:	b08b      	sub	sp, #44	; 0x2c
 8023e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023e64:	4598      	cmp	r8, r3
 8023e66:	4682      	mov	sl, r0
 8023e68:	9502      	str	r5, [sp, #8]
 8023e6a:	dc08      	bgt.n	8023e7e <__ieee754_rem_pio2+0x2e>
 8023e6c:	2200      	movs	r2, #0
 8023e6e:	2300      	movs	r3, #0
 8023e70:	ed80 0b00 	vstr	d0, [r0]
 8023e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023e78:	f04f 0b00 	mov.w	fp, #0
 8023e7c:	e028      	b.n	8023ed0 <__ieee754_rem_pio2+0x80>
 8023e7e:	4bc3      	ldr	r3, [pc, #780]	; (802418c <__ieee754_rem_pio2+0x33c>)
 8023e80:	4598      	cmp	r8, r3
 8023e82:	dc78      	bgt.n	8023f76 <__ieee754_rem_pio2+0x126>
 8023e84:	9b02      	ldr	r3, [sp, #8]
 8023e86:	4ec2      	ldr	r6, [pc, #776]	; (8024190 <__ieee754_rem_pio2+0x340>)
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	ee10 0a10 	vmov	r0, s0
 8023e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8024150 <__ieee754_rem_pio2+0x300>)
 8023e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e94:	4629      	mov	r1, r5
 8023e96:	dd39      	ble.n	8023f0c <__ieee754_rem_pio2+0xbc>
 8023e98:	f7dc fa1e 	bl	80002d8 <__aeabi_dsub>
 8023e9c:	45b0      	cmp	r8, r6
 8023e9e:	4604      	mov	r4, r0
 8023ea0:	460d      	mov	r5, r1
 8023ea2:	d01b      	beq.n	8023edc <__ieee754_rem_pio2+0x8c>
 8023ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 8024158 <__ieee754_rem_pio2+0x308>)
 8023ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eaa:	f7dc fa15 	bl	80002d8 <__aeabi_dsub>
 8023eae:	4602      	mov	r2, r0
 8023eb0:	460b      	mov	r3, r1
 8023eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8023eb6:	4620      	mov	r0, r4
 8023eb8:	4629      	mov	r1, r5
 8023eba:	f7dc fa0d 	bl	80002d8 <__aeabi_dsub>
 8023ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 8024158 <__ieee754_rem_pio2+0x308>)
 8023ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ec4:	f7dc fa08 	bl	80002d8 <__aeabi_dsub>
 8023ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023ecc:	f04f 0b01 	mov.w	fp, #1
 8023ed0:	4658      	mov	r0, fp
 8023ed2:	b00b      	add	sp, #44	; 0x2c
 8023ed4:	ecbd 8b02 	vpop	{d8}
 8023ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023edc:	a3a0      	add	r3, pc, #640	; (adr r3, 8024160 <__ieee754_rem_pio2+0x310>)
 8023ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ee2:	f7dc f9f9 	bl	80002d8 <__aeabi_dsub>
 8023ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8024168 <__ieee754_rem_pio2+0x318>)
 8023ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eec:	4604      	mov	r4, r0
 8023eee:	460d      	mov	r5, r1
 8023ef0:	f7dc f9f2 	bl	80002d8 <__aeabi_dsub>
 8023ef4:	4602      	mov	r2, r0
 8023ef6:	460b      	mov	r3, r1
 8023ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8023efc:	4620      	mov	r0, r4
 8023efe:	4629      	mov	r1, r5
 8023f00:	f7dc f9ea 	bl	80002d8 <__aeabi_dsub>
 8023f04:	a398      	add	r3, pc, #608	; (adr r3, 8024168 <__ieee754_rem_pio2+0x318>)
 8023f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f0a:	e7db      	b.n	8023ec4 <__ieee754_rem_pio2+0x74>
 8023f0c:	f7dc f9e6 	bl	80002dc <__adddf3>
 8023f10:	45b0      	cmp	r8, r6
 8023f12:	4604      	mov	r4, r0
 8023f14:	460d      	mov	r5, r1
 8023f16:	d016      	beq.n	8023f46 <__ieee754_rem_pio2+0xf6>
 8023f18:	a38f      	add	r3, pc, #572	; (adr r3, 8024158 <__ieee754_rem_pio2+0x308>)
 8023f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f1e:	f7dc f9dd 	bl	80002dc <__adddf3>
 8023f22:	4602      	mov	r2, r0
 8023f24:	460b      	mov	r3, r1
 8023f26:	e9ca 2300 	strd	r2, r3, [sl]
 8023f2a:	4620      	mov	r0, r4
 8023f2c:	4629      	mov	r1, r5
 8023f2e:	f7dc f9d3 	bl	80002d8 <__aeabi_dsub>
 8023f32:	a389      	add	r3, pc, #548	; (adr r3, 8024158 <__ieee754_rem_pio2+0x308>)
 8023f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f38:	f7dc f9d0 	bl	80002dc <__adddf3>
 8023f3c:	f04f 3bff 	mov.w	fp, #4294967295
 8023f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023f44:	e7c4      	b.n	8023ed0 <__ieee754_rem_pio2+0x80>
 8023f46:	a386      	add	r3, pc, #536	; (adr r3, 8024160 <__ieee754_rem_pio2+0x310>)
 8023f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f4c:	f7dc f9c6 	bl	80002dc <__adddf3>
 8023f50:	a385      	add	r3, pc, #532	; (adr r3, 8024168 <__ieee754_rem_pio2+0x318>)
 8023f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f56:	4604      	mov	r4, r0
 8023f58:	460d      	mov	r5, r1
 8023f5a:	f7dc f9bf 	bl	80002dc <__adddf3>
 8023f5e:	4602      	mov	r2, r0
 8023f60:	460b      	mov	r3, r1
 8023f62:	e9ca 2300 	strd	r2, r3, [sl]
 8023f66:	4620      	mov	r0, r4
 8023f68:	4629      	mov	r1, r5
 8023f6a:	f7dc f9b5 	bl	80002d8 <__aeabi_dsub>
 8023f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8024168 <__ieee754_rem_pio2+0x318>)
 8023f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f74:	e7e0      	b.n	8023f38 <__ieee754_rem_pio2+0xe8>
 8023f76:	4b87      	ldr	r3, [pc, #540]	; (8024194 <__ieee754_rem_pio2+0x344>)
 8023f78:	4598      	cmp	r8, r3
 8023f7a:	f300 80d9 	bgt.w	8024130 <__ieee754_rem_pio2+0x2e0>
 8023f7e:	f000 fe79 	bl	8024c74 <fabs>
 8023f82:	ec55 4b10 	vmov	r4, r5, d0
 8023f86:	ee10 0a10 	vmov	r0, s0
 8023f8a:	a379      	add	r3, pc, #484	; (adr r3, 8024170 <__ieee754_rem_pio2+0x320>)
 8023f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f90:	4629      	mov	r1, r5
 8023f92:	f7dc fb59 	bl	8000648 <__aeabi_dmul>
 8023f96:	4b80      	ldr	r3, [pc, #512]	; (8024198 <__ieee754_rem_pio2+0x348>)
 8023f98:	2200      	movs	r2, #0
 8023f9a:	f7dc f99f 	bl	80002dc <__adddf3>
 8023f9e:	f7dc fe03 	bl	8000ba8 <__aeabi_d2iz>
 8023fa2:	4683      	mov	fp, r0
 8023fa4:	f7dc fae6 	bl	8000574 <__aeabi_i2d>
 8023fa8:	4602      	mov	r2, r0
 8023faa:	460b      	mov	r3, r1
 8023fac:	ec43 2b18 	vmov	d8, r2, r3
 8023fb0:	a367      	add	r3, pc, #412	; (adr r3, 8024150 <__ieee754_rem_pio2+0x300>)
 8023fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb6:	f7dc fb47 	bl	8000648 <__aeabi_dmul>
 8023fba:	4602      	mov	r2, r0
 8023fbc:	460b      	mov	r3, r1
 8023fbe:	4620      	mov	r0, r4
 8023fc0:	4629      	mov	r1, r5
 8023fc2:	f7dc f989 	bl	80002d8 <__aeabi_dsub>
 8023fc6:	a364      	add	r3, pc, #400	; (adr r3, 8024158 <__ieee754_rem_pio2+0x308>)
 8023fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fcc:	4606      	mov	r6, r0
 8023fce:	460f      	mov	r7, r1
 8023fd0:	ec51 0b18 	vmov	r0, r1, d8
 8023fd4:	f7dc fb38 	bl	8000648 <__aeabi_dmul>
 8023fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8023fdc:	4604      	mov	r4, r0
 8023fde:	460d      	mov	r5, r1
 8023fe0:	dc0d      	bgt.n	8023ffe <__ieee754_rem_pio2+0x1ae>
 8023fe2:	4b6e      	ldr	r3, [pc, #440]	; (802419c <__ieee754_rem_pio2+0x34c>)
 8023fe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023fec:	4543      	cmp	r3, r8
 8023fee:	d006      	beq.n	8023ffe <__ieee754_rem_pio2+0x1ae>
 8023ff0:	4622      	mov	r2, r4
 8023ff2:	462b      	mov	r3, r5
 8023ff4:	4630      	mov	r0, r6
 8023ff6:	4639      	mov	r1, r7
 8023ff8:	f7dc f96e 	bl	80002d8 <__aeabi_dsub>
 8023ffc:	e00f      	b.n	802401e <__ieee754_rem_pio2+0x1ce>
 8023ffe:	462b      	mov	r3, r5
 8024000:	4622      	mov	r2, r4
 8024002:	4630      	mov	r0, r6
 8024004:	4639      	mov	r1, r7
 8024006:	f7dc f967 	bl	80002d8 <__aeabi_dsub>
 802400a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802400e:	9303      	str	r3, [sp, #12]
 8024010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024014:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8024018:	f1b8 0f10 	cmp.w	r8, #16
 802401c:	dc02      	bgt.n	8024024 <__ieee754_rem_pio2+0x1d4>
 802401e:	e9ca 0100 	strd	r0, r1, [sl]
 8024022:	e039      	b.n	8024098 <__ieee754_rem_pio2+0x248>
 8024024:	a34e      	add	r3, pc, #312	; (adr r3, 8024160 <__ieee754_rem_pio2+0x310>)
 8024026:	e9d3 2300 	ldrd	r2, r3, [r3]
 802402a:	ec51 0b18 	vmov	r0, r1, d8
 802402e:	f7dc fb0b 	bl	8000648 <__aeabi_dmul>
 8024032:	4604      	mov	r4, r0
 8024034:	460d      	mov	r5, r1
 8024036:	4602      	mov	r2, r0
 8024038:	460b      	mov	r3, r1
 802403a:	4630      	mov	r0, r6
 802403c:	4639      	mov	r1, r7
 802403e:	f7dc f94b 	bl	80002d8 <__aeabi_dsub>
 8024042:	4602      	mov	r2, r0
 8024044:	460b      	mov	r3, r1
 8024046:	4680      	mov	r8, r0
 8024048:	4689      	mov	r9, r1
 802404a:	4630      	mov	r0, r6
 802404c:	4639      	mov	r1, r7
 802404e:	f7dc f943 	bl	80002d8 <__aeabi_dsub>
 8024052:	4622      	mov	r2, r4
 8024054:	462b      	mov	r3, r5
 8024056:	f7dc f93f 	bl	80002d8 <__aeabi_dsub>
 802405a:	a343      	add	r3, pc, #268	; (adr r3, 8024168 <__ieee754_rem_pio2+0x318>)
 802405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024060:	4604      	mov	r4, r0
 8024062:	460d      	mov	r5, r1
 8024064:	ec51 0b18 	vmov	r0, r1, d8
 8024068:	f7dc faee 	bl	8000648 <__aeabi_dmul>
 802406c:	4622      	mov	r2, r4
 802406e:	462b      	mov	r3, r5
 8024070:	f7dc f932 	bl	80002d8 <__aeabi_dsub>
 8024074:	4602      	mov	r2, r0
 8024076:	460b      	mov	r3, r1
 8024078:	4604      	mov	r4, r0
 802407a:	460d      	mov	r5, r1
 802407c:	4640      	mov	r0, r8
 802407e:	4649      	mov	r1, r9
 8024080:	f7dc f92a 	bl	80002d8 <__aeabi_dsub>
 8024084:	9a03      	ldr	r2, [sp, #12]
 8024086:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802408a:	1ad3      	subs	r3, r2, r3
 802408c:	2b31      	cmp	r3, #49	; 0x31
 802408e:	dc24      	bgt.n	80240da <__ieee754_rem_pio2+0x28a>
 8024090:	e9ca 0100 	strd	r0, r1, [sl]
 8024094:	4646      	mov	r6, r8
 8024096:	464f      	mov	r7, r9
 8024098:	e9da 8900 	ldrd	r8, r9, [sl]
 802409c:	4630      	mov	r0, r6
 802409e:	4642      	mov	r2, r8
 80240a0:	464b      	mov	r3, r9
 80240a2:	4639      	mov	r1, r7
 80240a4:	f7dc f918 	bl	80002d8 <__aeabi_dsub>
 80240a8:	462b      	mov	r3, r5
 80240aa:	4622      	mov	r2, r4
 80240ac:	f7dc f914 	bl	80002d8 <__aeabi_dsub>
 80240b0:	9b02      	ldr	r3, [sp, #8]
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80240b8:	f6bf af0a 	bge.w	8023ed0 <__ieee754_rem_pio2+0x80>
 80240bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80240c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80240c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80240c8:	f8ca 8000 	str.w	r8, [sl]
 80240cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80240d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80240d4:	f1cb 0b00 	rsb	fp, fp, #0
 80240d8:	e6fa      	b.n	8023ed0 <__ieee754_rem_pio2+0x80>
 80240da:	a327      	add	r3, pc, #156	; (adr r3, 8024178 <__ieee754_rem_pio2+0x328>)
 80240dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240e0:	ec51 0b18 	vmov	r0, r1, d8
 80240e4:	f7dc fab0 	bl	8000648 <__aeabi_dmul>
 80240e8:	4604      	mov	r4, r0
 80240ea:	460d      	mov	r5, r1
 80240ec:	4602      	mov	r2, r0
 80240ee:	460b      	mov	r3, r1
 80240f0:	4640      	mov	r0, r8
 80240f2:	4649      	mov	r1, r9
 80240f4:	f7dc f8f0 	bl	80002d8 <__aeabi_dsub>
 80240f8:	4602      	mov	r2, r0
 80240fa:	460b      	mov	r3, r1
 80240fc:	4606      	mov	r6, r0
 80240fe:	460f      	mov	r7, r1
 8024100:	4640      	mov	r0, r8
 8024102:	4649      	mov	r1, r9
 8024104:	f7dc f8e8 	bl	80002d8 <__aeabi_dsub>
 8024108:	4622      	mov	r2, r4
 802410a:	462b      	mov	r3, r5
 802410c:	f7dc f8e4 	bl	80002d8 <__aeabi_dsub>
 8024110:	a31b      	add	r3, pc, #108	; (adr r3, 8024180 <__ieee754_rem_pio2+0x330>)
 8024112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024116:	4604      	mov	r4, r0
 8024118:	460d      	mov	r5, r1
 802411a:	ec51 0b18 	vmov	r0, r1, d8
 802411e:	f7dc fa93 	bl	8000648 <__aeabi_dmul>
 8024122:	4622      	mov	r2, r4
 8024124:	462b      	mov	r3, r5
 8024126:	f7dc f8d7 	bl	80002d8 <__aeabi_dsub>
 802412a:	4604      	mov	r4, r0
 802412c:	460d      	mov	r5, r1
 802412e:	e75f      	b.n	8023ff0 <__ieee754_rem_pio2+0x1a0>
 8024130:	4b1b      	ldr	r3, [pc, #108]	; (80241a0 <__ieee754_rem_pio2+0x350>)
 8024132:	4598      	cmp	r8, r3
 8024134:	dd36      	ble.n	80241a4 <__ieee754_rem_pio2+0x354>
 8024136:	ee10 2a10 	vmov	r2, s0
 802413a:	462b      	mov	r3, r5
 802413c:	4620      	mov	r0, r4
 802413e:	4629      	mov	r1, r5
 8024140:	f7dc f8ca 	bl	80002d8 <__aeabi_dsub>
 8024144:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024148:	e9ca 0100 	strd	r0, r1, [sl]
 802414c:	e694      	b.n	8023e78 <__ieee754_rem_pio2+0x28>
 802414e:	bf00      	nop
 8024150:	54400000 	.word	0x54400000
 8024154:	3ff921fb 	.word	0x3ff921fb
 8024158:	1a626331 	.word	0x1a626331
 802415c:	3dd0b461 	.word	0x3dd0b461
 8024160:	1a600000 	.word	0x1a600000
 8024164:	3dd0b461 	.word	0x3dd0b461
 8024168:	2e037073 	.word	0x2e037073
 802416c:	3ba3198a 	.word	0x3ba3198a
 8024170:	6dc9c883 	.word	0x6dc9c883
 8024174:	3fe45f30 	.word	0x3fe45f30
 8024178:	2e000000 	.word	0x2e000000
 802417c:	3ba3198a 	.word	0x3ba3198a
 8024180:	252049c1 	.word	0x252049c1
 8024184:	397b839a 	.word	0x397b839a
 8024188:	3fe921fb 	.word	0x3fe921fb
 802418c:	4002d97b 	.word	0x4002d97b
 8024190:	3ff921fb 	.word	0x3ff921fb
 8024194:	413921fb 	.word	0x413921fb
 8024198:	3fe00000 	.word	0x3fe00000
 802419c:	08025620 	.word	0x08025620
 80241a0:	7fefffff 	.word	0x7fefffff
 80241a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80241a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80241ac:	ee10 0a10 	vmov	r0, s0
 80241b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80241b4:	ee10 6a10 	vmov	r6, s0
 80241b8:	460f      	mov	r7, r1
 80241ba:	f7dc fcf5 	bl	8000ba8 <__aeabi_d2iz>
 80241be:	f7dc f9d9 	bl	8000574 <__aeabi_i2d>
 80241c2:	4602      	mov	r2, r0
 80241c4:	460b      	mov	r3, r1
 80241c6:	4630      	mov	r0, r6
 80241c8:	4639      	mov	r1, r7
 80241ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80241ce:	f7dc f883 	bl	80002d8 <__aeabi_dsub>
 80241d2:	4b23      	ldr	r3, [pc, #140]	; (8024260 <__ieee754_rem_pio2+0x410>)
 80241d4:	2200      	movs	r2, #0
 80241d6:	f7dc fa37 	bl	8000648 <__aeabi_dmul>
 80241da:	460f      	mov	r7, r1
 80241dc:	4606      	mov	r6, r0
 80241de:	f7dc fce3 	bl	8000ba8 <__aeabi_d2iz>
 80241e2:	f7dc f9c7 	bl	8000574 <__aeabi_i2d>
 80241e6:	4602      	mov	r2, r0
 80241e8:	460b      	mov	r3, r1
 80241ea:	4630      	mov	r0, r6
 80241ec:	4639      	mov	r1, r7
 80241ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80241f2:	f7dc f871 	bl	80002d8 <__aeabi_dsub>
 80241f6:	4b1a      	ldr	r3, [pc, #104]	; (8024260 <__ieee754_rem_pio2+0x410>)
 80241f8:	2200      	movs	r2, #0
 80241fa:	f7dc fa25 	bl	8000648 <__aeabi_dmul>
 80241fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024202:	ad04      	add	r5, sp, #16
 8024204:	f04f 0803 	mov.w	r8, #3
 8024208:	46a9      	mov	r9, r5
 802420a:	2600      	movs	r6, #0
 802420c:	2700      	movs	r7, #0
 802420e:	4632      	mov	r2, r6
 8024210:	463b      	mov	r3, r7
 8024212:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8024216:	46c3      	mov	fp, r8
 8024218:	3d08      	subs	r5, #8
 802421a:	f108 38ff 	add.w	r8, r8, #4294967295
 802421e:	f7dc fc7b 	bl	8000b18 <__aeabi_dcmpeq>
 8024222:	2800      	cmp	r0, #0
 8024224:	d1f3      	bne.n	802420e <__ieee754_rem_pio2+0x3be>
 8024226:	4b0f      	ldr	r3, [pc, #60]	; (8024264 <__ieee754_rem_pio2+0x414>)
 8024228:	9301      	str	r3, [sp, #4]
 802422a:	2302      	movs	r3, #2
 802422c:	9300      	str	r3, [sp, #0]
 802422e:	4622      	mov	r2, r4
 8024230:	465b      	mov	r3, fp
 8024232:	4651      	mov	r1, sl
 8024234:	4648      	mov	r0, r9
 8024236:	f000 f8df 	bl	80243f8 <__kernel_rem_pio2>
 802423a:	9b02      	ldr	r3, [sp, #8]
 802423c:	2b00      	cmp	r3, #0
 802423e:	4683      	mov	fp, r0
 8024240:	f6bf ae46 	bge.w	8023ed0 <__ieee754_rem_pio2+0x80>
 8024244:	e9da 2100 	ldrd	r2, r1, [sl]
 8024248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802424c:	e9ca 2300 	strd	r2, r3, [sl]
 8024250:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8024254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024258:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802425c:	e73a      	b.n	80240d4 <__ieee754_rem_pio2+0x284>
 802425e:	bf00      	nop
 8024260:	41700000 	.word	0x41700000
 8024264:	080256a0 	.word	0x080256a0

08024268 <__kernel_cos>:
 8024268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802426c:	ec57 6b10 	vmov	r6, r7, d0
 8024270:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024274:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024278:	ed8d 1b00 	vstr	d1, [sp]
 802427c:	da07      	bge.n	802428e <__kernel_cos+0x26>
 802427e:	ee10 0a10 	vmov	r0, s0
 8024282:	4639      	mov	r1, r7
 8024284:	f7dc fc90 	bl	8000ba8 <__aeabi_d2iz>
 8024288:	2800      	cmp	r0, #0
 802428a:	f000 8088 	beq.w	802439e <__kernel_cos+0x136>
 802428e:	4632      	mov	r2, r6
 8024290:	463b      	mov	r3, r7
 8024292:	4630      	mov	r0, r6
 8024294:	4639      	mov	r1, r7
 8024296:	f7dc f9d7 	bl	8000648 <__aeabi_dmul>
 802429a:	4b51      	ldr	r3, [pc, #324]	; (80243e0 <__kernel_cos+0x178>)
 802429c:	2200      	movs	r2, #0
 802429e:	4604      	mov	r4, r0
 80242a0:	460d      	mov	r5, r1
 80242a2:	f7dc f9d1 	bl	8000648 <__aeabi_dmul>
 80242a6:	a340      	add	r3, pc, #256	; (adr r3, 80243a8 <__kernel_cos+0x140>)
 80242a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242ac:	4682      	mov	sl, r0
 80242ae:	468b      	mov	fp, r1
 80242b0:	4620      	mov	r0, r4
 80242b2:	4629      	mov	r1, r5
 80242b4:	f7dc f9c8 	bl	8000648 <__aeabi_dmul>
 80242b8:	a33d      	add	r3, pc, #244	; (adr r3, 80243b0 <__kernel_cos+0x148>)
 80242ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242be:	f7dc f80d 	bl	80002dc <__adddf3>
 80242c2:	4622      	mov	r2, r4
 80242c4:	462b      	mov	r3, r5
 80242c6:	f7dc f9bf 	bl	8000648 <__aeabi_dmul>
 80242ca:	a33b      	add	r3, pc, #236	; (adr r3, 80243b8 <__kernel_cos+0x150>)
 80242cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242d0:	f7dc f802 	bl	80002d8 <__aeabi_dsub>
 80242d4:	4622      	mov	r2, r4
 80242d6:	462b      	mov	r3, r5
 80242d8:	f7dc f9b6 	bl	8000648 <__aeabi_dmul>
 80242dc:	a338      	add	r3, pc, #224	; (adr r3, 80243c0 <__kernel_cos+0x158>)
 80242de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242e2:	f7db fffb 	bl	80002dc <__adddf3>
 80242e6:	4622      	mov	r2, r4
 80242e8:	462b      	mov	r3, r5
 80242ea:	f7dc f9ad 	bl	8000648 <__aeabi_dmul>
 80242ee:	a336      	add	r3, pc, #216	; (adr r3, 80243c8 <__kernel_cos+0x160>)
 80242f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242f4:	f7db fff0 	bl	80002d8 <__aeabi_dsub>
 80242f8:	4622      	mov	r2, r4
 80242fa:	462b      	mov	r3, r5
 80242fc:	f7dc f9a4 	bl	8000648 <__aeabi_dmul>
 8024300:	a333      	add	r3, pc, #204	; (adr r3, 80243d0 <__kernel_cos+0x168>)
 8024302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024306:	f7db ffe9 	bl	80002dc <__adddf3>
 802430a:	4622      	mov	r2, r4
 802430c:	462b      	mov	r3, r5
 802430e:	f7dc f99b 	bl	8000648 <__aeabi_dmul>
 8024312:	4622      	mov	r2, r4
 8024314:	462b      	mov	r3, r5
 8024316:	f7dc f997 	bl	8000648 <__aeabi_dmul>
 802431a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802431e:	4604      	mov	r4, r0
 8024320:	460d      	mov	r5, r1
 8024322:	4630      	mov	r0, r6
 8024324:	4639      	mov	r1, r7
 8024326:	f7dc f98f 	bl	8000648 <__aeabi_dmul>
 802432a:	460b      	mov	r3, r1
 802432c:	4602      	mov	r2, r0
 802432e:	4629      	mov	r1, r5
 8024330:	4620      	mov	r0, r4
 8024332:	f7db ffd1 	bl	80002d8 <__aeabi_dsub>
 8024336:	4b2b      	ldr	r3, [pc, #172]	; (80243e4 <__kernel_cos+0x17c>)
 8024338:	4598      	cmp	r8, r3
 802433a:	4606      	mov	r6, r0
 802433c:	460f      	mov	r7, r1
 802433e:	dc10      	bgt.n	8024362 <__kernel_cos+0xfa>
 8024340:	4602      	mov	r2, r0
 8024342:	460b      	mov	r3, r1
 8024344:	4650      	mov	r0, sl
 8024346:	4659      	mov	r1, fp
 8024348:	f7db ffc6 	bl	80002d8 <__aeabi_dsub>
 802434c:	460b      	mov	r3, r1
 802434e:	4926      	ldr	r1, [pc, #152]	; (80243e8 <__kernel_cos+0x180>)
 8024350:	4602      	mov	r2, r0
 8024352:	2000      	movs	r0, #0
 8024354:	f7db ffc0 	bl	80002d8 <__aeabi_dsub>
 8024358:	ec41 0b10 	vmov	d0, r0, r1
 802435c:	b003      	add	sp, #12
 802435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024362:	4b22      	ldr	r3, [pc, #136]	; (80243ec <__kernel_cos+0x184>)
 8024364:	4920      	ldr	r1, [pc, #128]	; (80243e8 <__kernel_cos+0x180>)
 8024366:	4598      	cmp	r8, r3
 8024368:	bfcc      	ite	gt
 802436a:	4d21      	ldrgt	r5, [pc, #132]	; (80243f0 <__kernel_cos+0x188>)
 802436c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024370:	2400      	movs	r4, #0
 8024372:	4622      	mov	r2, r4
 8024374:	462b      	mov	r3, r5
 8024376:	2000      	movs	r0, #0
 8024378:	f7db ffae 	bl	80002d8 <__aeabi_dsub>
 802437c:	4622      	mov	r2, r4
 802437e:	4680      	mov	r8, r0
 8024380:	4689      	mov	r9, r1
 8024382:	462b      	mov	r3, r5
 8024384:	4650      	mov	r0, sl
 8024386:	4659      	mov	r1, fp
 8024388:	f7db ffa6 	bl	80002d8 <__aeabi_dsub>
 802438c:	4632      	mov	r2, r6
 802438e:	463b      	mov	r3, r7
 8024390:	f7db ffa2 	bl	80002d8 <__aeabi_dsub>
 8024394:	4602      	mov	r2, r0
 8024396:	460b      	mov	r3, r1
 8024398:	4640      	mov	r0, r8
 802439a:	4649      	mov	r1, r9
 802439c:	e7da      	b.n	8024354 <__kernel_cos+0xec>
 802439e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80243d8 <__kernel_cos+0x170>
 80243a2:	e7db      	b.n	802435c <__kernel_cos+0xf4>
 80243a4:	f3af 8000 	nop.w
 80243a8:	be8838d4 	.word	0xbe8838d4
 80243ac:	bda8fae9 	.word	0xbda8fae9
 80243b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80243b4:	3e21ee9e 	.word	0x3e21ee9e
 80243b8:	809c52ad 	.word	0x809c52ad
 80243bc:	3e927e4f 	.word	0x3e927e4f
 80243c0:	19cb1590 	.word	0x19cb1590
 80243c4:	3efa01a0 	.word	0x3efa01a0
 80243c8:	16c15177 	.word	0x16c15177
 80243cc:	3f56c16c 	.word	0x3f56c16c
 80243d0:	5555554c 	.word	0x5555554c
 80243d4:	3fa55555 	.word	0x3fa55555
 80243d8:	00000000 	.word	0x00000000
 80243dc:	3ff00000 	.word	0x3ff00000
 80243e0:	3fe00000 	.word	0x3fe00000
 80243e4:	3fd33332 	.word	0x3fd33332
 80243e8:	3ff00000 	.word	0x3ff00000
 80243ec:	3fe90000 	.word	0x3fe90000
 80243f0:	3fd20000 	.word	0x3fd20000
 80243f4:	00000000 	.word	0x00000000

080243f8 <__kernel_rem_pio2>:
 80243f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243fc:	ed2d 8b02 	vpush	{d8}
 8024400:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024404:	f112 0f14 	cmn.w	r2, #20
 8024408:	9308      	str	r3, [sp, #32]
 802440a:	9101      	str	r1, [sp, #4]
 802440c:	4bc4      	ldr	r3, [pc, #784]	; (8024720 <__kernel_rem_pio2+0x328>)
 802440e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024410:	900b      	str	r0, [sp, #44]	; 0x2c
 8024412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024416:	9302      	str	r3, [sp, #8]
 8024418:	9b08      	ldr	r3, [sp, #32]
 802441a:	f103 33ff 	add.w	r3, r3, #4294967295
 802441e:	bfa8      	it	ge
 8024420:	1ed4      	subge	r4, r2, #3
 8024422:	9306      	str	r3, [sp, #24]
 8024424:	bfb2      	itee	lt
 8024426:	2400      	movlt	r4, #0
 8024428:	2318      	movge	r3, #24
 802442a:	fb94 f4f3 	sdivge	r4, r4, r3
 802442e:	f06f 0317 	mvn.w	r3, #23
 8024432:	fb04 3303 	mla	r3, r4, r3, r3
 8024436:	eb03 0a02 	add.w	sl, r3, r2
 802443a:	9b02      	ldr	r3, [sp, #8]
 802443c:	9a06      	ldr	r2, [sp, #24]
 802443e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024710 <__kernel_rem_pio2+0x318>
 8024442:	eb03 0802 	add.w	r8, r3, r2
 8024446:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024448:	1aa7      	subs	r7, r4, r2
 802444a:	ae22      	add	r6, sp, #136	; 0x88
 802444c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024450:	2500      	movs	r5, #0
 8024452:	4545      	cmp	r5, r8
 8024454:	dd13      	ble.n	802447e <__kernel_rem_pio2+0x86>
 8024456:	9b08      	ldr	r3, [sp, #32]
 8024458:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024710 <__kernel_rem_pio2+0x318>
 802445c:	aa22      	add	r2, sp, #136	; 0x88
 802445e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024462:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024466:	f04f 0800 	mov.w	r8, #0
 802446a:	9b02      	ldr	r3, [sp, #8]
 802446c:	4598      	cmp	r8, r3
 802446e:	dc2f      	bgt.n	80244d0 <__kernel_rem_pio2+0xd8>
 8024470:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024474:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024478:	462f      	mov	r7, r5
 802447a:	2600      	movs	r6, #0
 802447c:	e01b      	b.n	80244b6 <__kernel_rem_pio2+0xbe>
 802447e:	42ef      	cmn	r7, r5
 8024480:	d407      	bmi.n	8024492 <__kernel_rem_pio2+0x9a>
 8024482:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024486:	f7dc f875 	bl	8000574 <__aeabi_i2d>
 802448a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802448e:	3501      	adds	r5, #1
 8024490:	e7df      	b.n	8024452 <__kernel_rem_pio2+0x5a>
 8024492:	ec51 0b18 	vmov	r0, r1, d8
 8024496:	e7f8      	b.n	802448a <__kernel_rem_pio2+0x92>
 8024498:	e9d7 2300 	ldrd	r2, r3, [r7]
 802449c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80244a0:	f7dc f8d2 	bl	8000648 <__aeabi_dmul>
 80244a4:	4602      	mov	r2, r0
 80244a6:	460b      	mov	r3, r1
 80244a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80244ac:	f7db ff16 	bl	80002dc <__adddf3>
 80244b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80244b4:	3601      	adds	r6, #1
 80244b6:	9b06      	ldr	r3, [sp, #24]
 80244b8:	429e      	cmp	r6, r3
 80244ba:	f1a7 0708 	sub.w	r7, r7, #8
 80244be:	ddeb      	ble.n	8024498 <__kernel_rem_pio2+0xa0>
 80244c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80244c4:	f108 0801 	add.w	r8, r8, #1
 80244c8:	ecab 7b02 	vstmia	fp!, {d7}
 80244cc:	3508      	adds	r5, #8
 80244ce:	e7cc      	b.n	802446a <__kernel_rem_pio2+0x72>
 80244d0:	9b02      	ldr	r3, [sp, #8]
 80244d2:	aa0e      	add	r2, sp, #56	; 0x38
 80244d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80244d8:	930d      	str	r3, [sp, #52]	; 0x34
 80244da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80244dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80244e0:	9c02      	ldr	r4, [sp, #8]
 80244e2:	930c      	str	r3, [sp, #48]	; 0x30
 80244e4:	00e3      	lsls	r3, r4, #3
 80244e6:	930a      	str	r3, [sp, #40]	; 0x28
 80244e8:	ab9a      	add	r3, sp, #616	; 0x268
 80244ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80244ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80244f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80244f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80244f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80244fc:	46c3      	mov	fp, r8
 80244fe:	46a1      	mov	r9, r4
 8024500:	f1b9 0f00 	cmp.w	r9, #0
 8024504:	f1a5 0508 	sub.w	r5, r5, #8
 8024508:	dc77      	bgt.n	80245fa <__kernel_rem_pio2+0x202>
 802450a:	ec47 6b10 	vmov	d0, r6, r7
 802450e:	4650      	mov	r0, sl
 8024510:	f000 fc46 	bl	8024da0 <scalbn>
 8024514:	ec57 6b10 	vmov	r6, r7, d0
 8024518:	2200      	movs	r2, #0
 802451a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802451e:	ee10 0a10 	vmov	r0, s0
 8024522:	4639      	mov	r1, r7
 8024524:	f7dc f890 	bl	8000648 <__aeabi_dmul>
 8024528:	ec41 0b10 	vmov	d0, r0, r1
 802452c:	f000 fbb8 	bl	8024ca0 <floor>
 8024530:	4b7c      	ldr	r3, [pc, #496]	; (8024724 <__kernel_rem_pio2+0x32c>)
 8024532:	ec51 0b10 	vmov	r0, r1, d0
 8024536:	2200      	movs	r2, #0
 8024538:	f7dc f886 	bl	8000648 <__aeabi_dmul>
 802453c:	4602      	mov	r2, r0
 802453e:	460b      	mov	r3, r1
 8024540:	4630      	mov	r0, r6
 8024542:	4639      	mov	r1, r7
 8024544:	f7db fec8 	bl	80002d8 <__aeabi_dsub>
 8024548:	460f      	mov	r7, r1
 802454a:	4606      	mov	r6, r0
 802454c:	f7dc fb2c 	bl	8000ba8 <__aeabi_d2iz>
 8024550:	9004      	str	r0, [sp, #16]
 8024552:	f7dc f80f 	bl	8000574 <__aeabi_i2d>
 8024556:	4602      	mov	r2, r0
 8024558:	460b      	mov	r3, r1
 802455a:	4630      	mov	r0, r6
 802455c:	4639      	mov	r1, r7
 802455e:	f7db febb 	bl	80002d8 <__aeabi_dsub>
 8024562:	f1ba 0f00 	cmp.w	sl, #0
 8024566:	4606      	mov	r6, r0
 8024568:	460f      	mov	r7, r1
 802456a:	dd6d      	ble.n	8024648 <__kernel_rem_pio2+0x250>
 802456c:	1e62      	subs	r2, r4, #1
 802456e:	ab0e      	add	r3, sp, #56	; 0x38
 8024570:	9d04      	ldr	r5, [sp, #16]
 8024572:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024576:	f1ca 0118 	rsb	r1, sl, #24
 802457a:	fa40 f301 	asr.w	r3, r0, r1
 802457e:	441d      	add	r5, r3
 8024580:	408b      	lsls	r3, r1
 8024582:	1ac0      	subs	r0, r0, r3
 8024584:	ab0e      	add	r3, sp, #56	; 0x38
 8024586:	9504      	str	r5, [sp, #16]
 8024588:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802458c:	f1ca 0317 	rsb	r3, sl, #23
 8024590:	fa40 fb03 	asr.w	fp, r0, r3
 8024594:	f1bb 0f00 	cmp.w	fp, #0
 8024598:	dd65      	ble.n	8024666 <__kernel_rem_pio2+0x26e>
 802459a:	9b04      	ldr	r3, [sp, #16]
 802459c:	2200      	movs	r2, #0
 802459e:	3301      	adds	r3, #1
 80245a0:	9304      	str	r3, [sp, #16]
 80245a2:	4615      	mov	r5, r2
 80245a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80245a8:	4294      	cmp	r4, r2
 80245aa:	f300 809c 	bgt.w	80246e6 <__kernel_rem_pio2+0x2ee>
 80245ae:	f1ba 0f00 	cmp.w	sl, #0
 80245b2:	dd07      	ble.n	80245c4 <__kernel_rem_pio2+0x1cc>
 80245b4:	f1ba 0f01 	cmp.w	sl, #1
 80245b8:	f000 80c0 	beq.w	802473c <__kernel_rem_pio2+0x344>
 80245bc:	f1ba 0f02 	cmp.w	sl, #2
 80245c0:	f000 80c6 	beq.w	8024750 <__kernel_rem_pio2+0x358>
 80245c4:	f1bb 0f02 	cmp.w	fp, #2
 80245c8:	d14d      	bne.n	8024666 <__kernel_rem_pio2+0x26e>
 80245ca:	4632      	mov	r2, r6
 80245cc:	463b      	mov	r3, r7
 80245ce:	4956      	ldr	r1, [pc, #344]	; (8024728 <__kernel_rem_pio2+0x330>)
 80245d0:	2000      	movs	r0, #0
 80245d2:	f7db fe81 	bl	80002d8 <__aeabi_dsub>
 80245d6:	4606      	mov	r6, r0
 80245d8:	460f      	mov	r7, r1
 80245da:	2d00      	cmp	r5, #0
 80245dc:	d043      	beq.n	8024666 <__kernel_rem_pio2+0x26e>
 80245de:	4650      	mov	r0, sl
 80245e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024718 <__kernel_rem_pio2+0x320>
 80245e4:	f000 fbdc 	bl	8024da0 <scalbn>
 80245e8:	4630      	mov	r0, r6
 80245ea:	4639      	mov	r1, r7
 80245ec:	ec53 2b10 	vmov	r2, r3, d0
 80245f0:	f7db fe72 	bl	80002d8 <__aeabi_dsub>
 80245f4:	4606      	mov	r6, r0
 80245f6:	460f      	mov	r7, r1
 80245f8:	e035      	b.n	8024666 <__kernel_rem_pio2+0x26e>
 80245fa:	4b4c      	ldr	r3, [pc, #304]	; (802472c <__kernel_rem_pio2+0x334>)
 80245fc:	2200      	movs	r2, #0
 80245fe:	4630      	mov	r0, r6
 8024600:	4639      	mov	r1, r7
 8024602:	f7dc f821 	bl	8000648 <__aeabi_dmul>
 8024606:	f7dc facf 	bl	8000ba8 <__aeabi_d2iz>
 802460a:	f7db ffb3 	bl	8000574 <__aeabi_i2d>
 802460e:	4602      	mov	r2, r0
 8024610:	460b      	mov	r3, r1
 8024612:	ec43 2b18 	vmov	d8, r2, r3
 8024616:	4b46      	ldr	r3, [pc, #280]	; (8024730 <__kernel_rem_pio2+0x338>)
 8024618:	2200      	movs	r2, #0
 802461a:	f7dc f815 	bl	8000648 <__aeabi_dmul>
 802461e:	4602      	mov	r2, r0
 8024620:	460b      	mov	r3, r1
 8024622:	4630      	mov	r0, r6
 8024624:	4639      	mov	r1, r7
 8024626:	f7db fe57 	bl	80002d8 <__aeabi_dsub>
 802462a:	f7dc fabd 	bl	8000ba8 <__aeabi_d2iz>
 802462e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024632:	f84b 0b04 	str.w	r0, [fp], #4
 8024636:	ec51 0b18 	vmov	r0, r1, d8
 802463a:	f7db fe4f 	bl	80002dc <__adddf3>
 802463e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024642:	4606      	mov	r6, r0
 8024644:	460f      	mov	r7, r1
 8024646:	e75b      	b.n	8024500 <__kernel_rem_pio2+0x108>
 8024648:	d106      	bne.n	8024658 <__kernel_rem_pio2+0x260>
 802464a:	1e63      	subs	r3, r4, #1
 802464c:	aa0e      	add	r2, sp, #56	; 0x38
 802464e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024652:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024656:	e79d      	b.n	8024594 <__kernel_rem_pio2+0x19c>
 8024658:	4b36      	ldr	r3, [pc, #216]	; (8024734 <__kernel_rem_pio2+0x33c>)
 802465a:	2200      	movs	r2, #0
 802465c:	f7dc fa7a 	bl	8000b54 <__aeabi_dcmpge>
 8024660:	2800      	cmp	r0, #0
 8024662:	d13d      	bne.n	80246e0 <__kernel_rem_pio2+0x2e8>
 8024664:	4683      	mov	fp, r0
 8024666:	2200      	movs	r2, #0
 8024668:	2300      	movs	r3, #0
 802466a:	4630      	mov	r0, r6
 802466c:	4639      	mov	r1, r7
 802466e:	f7dc fa53 	bl	8000b18 <__aeabi_dcmpeq>
 8024672:	2800      	cmp	r0, #0
 8024674:	f000 80c0 	beq.w	80247f8 <__kernel_rem_pio2+0x400>
 8024678:	1e65      	subs	r5, r4, #1
 802467a:	462b      	mov	r3, r5
 802467c:	2200      	movs	r2, #0
 802467e:	9902      	ldr	r1, [sp, #8]
 8024680:	428b      	cmp	r3, r1
 8024682:	da6c      	bge.n	802475e <__kernel_rem_pio2+0x366>
 8024684:	2a00      	cmp	r2, #0
 8024686:	f000 8089 	beq.w	802479c <__kernel_rem_pio2+0x3a4>
 802468a:	ab0e      	add	r3, sp, #56	; 0x38
 802468c:	f1aa 0a18 	sub.w	sl, sl, #24
 8024690:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024694:	2b00      	cmp	r3, #0
 8024696:	f000 80ad 	beq.w	80247f4 <__kernel_rem_pio2+0x3fc>
 802469a:	4650      	mov	r0, sl
 802469c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024718 <__kernel_rem_pio2+0x320>
 80246a0:	f000 fb7e 	bl	8024da0 <scalbn>
 80246a4:	ab9a      	add	r3, sp, #616	; 0x268
 80246a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80246aa:	ec57 6b10 	vmov	r6, r7, d0
 80246ae:	00ec      	lsls	r4, r5, #3
 80246b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80246b4:	46aa      	mov	sl, r5
 80246b6:	f1ba 0f00 	cmp.w	sl, #0
 80246ba:	f280 80d6 	bge.w	802486a <__kernel_rem_pio2+0x472>
 80246be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024710 <__kernel_rem_pio2+0x318>
 80246c2:	462e      	mov	r6, r5
 80246c4:	2e00      	cmp	r6, #0
 80246c6:	f2c0 8104 	blt.w	80248d2 <__kernel_rem_pio2+0x4da>
 80246ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80246cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80246d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024738 <__kernel_rem_pio2+0x340>
 80246d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80246d8:	f04f 0800 	mov.w	r8, #0
 80246dc:	1baf      	subs	r7, r5, r6
 80246de:	e0ea      	b.n	80248b6 <__kernel_rem_pio2+0x4be>
 80246e0:	f04f 0b02 	mov.w	fp, #2
 80246e4:	e759      	b.n	802459a <__kernel_rem_pio2+0x1a2>
 80246e6:	f8d8 3000 	ldr.w	r3, [r8]
 80246ea:	b955      	cbnz	r5, 8024702 <__kernel_rem_pio2+0x30a>
 80246ec:	b123      	cbz	r3, 80246f8 <__kernel_rem_pio2+0x300>
 80246ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80246f2:	f8c8 3000 	str.w	r3, [r8]
 80246f6:	2301      	movs	r3, #1
 80246f8:	3201      	adds	r2, #1
 80246fa:	f108 0804 	add.w	r8, r8, #4
 80246fe:	461d      	mov	r5, r3
 8024700:	e752      	b.n	80245a8 <__kernel_rem_pio2+0x1b0>
 8024702:	1acb      	subs	r3, r1, r3
 8024704:	f8c8 3000 	str.w	r3, [r8]
 8024708:	462b      	mov	r3, r5
 802470a:	e7f5      	b.n	80246f8 <__kernel_rem_pio2+0x300>
 802470c:	f3af 8000 	nop.w
	...
 802471c:	3ff00000 	.word	0x3ff00000
 8024720:	080257e8 	.word	0x080257e8
 8024724:	40200000 	.word	0x40200000
 8024728:	3ff00000 	.word	0x3ff00000
 802472c:	3e700000 	.word	0x3e700000
 8024730:	41700000 	.word	0x41700000
 8024734:	3fe00000 	.word	0x3fe00000
 8024738:	080257a8 	.word	0x080257a8
 802473c:	1e62      	subs	r2, r4, #1
 802473e:	ab0e      	add	r3, sp, #56	; 0x38
 8024740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024744:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024748:	a90e      	add	r1, sp, #56	; 0x38
 802474a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802474e:	e739      	b.n	80245c4 <__kernel_rem_pio2+0x1cc>
 8024750:	1e62      	subs	r2, r4, #1
 8024752:	ab0e      	add	r3, sp, #56	; 0x38
 8024754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024758:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802475c:	e7f4      	b.n	8024748 <__kernel_rem_pio2+0x350>
 802475e:	a90e      	add	r1, sp, #56	; 0x38
 8024760:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024764:	3b01      	subs	r3, #1
 8024766:	430a      	orrs	r2, r1
 8024768:	e789      	b.n	802467e <__kernel_rem_pio2+0x286>
 802476a:	3301      	adds	r3, #1
 802476c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024770:	2900      	cmp	r1, #0
 8024772:	d0fa      	beq.n	802476a <__kernel_rem_pio2+0x372>
 8024774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024776:	f502 721a 	add.w	r2, r2, #616	; 0x268
 802477a:	446a      	add	r2, sp
 802477c:	3a98      	subs	r2, #152	; 0x98
 802477e:	920a      	str	r2, [sp, #40]	; 0x28
 8024780:	9a08      	ldr	r2, [sp, #32]
 8024782:	18e3      	adds	r3, r4, r3
 8024784:	18a5      	adds	r5, r4, r2
 8024786:	aa22      	add	r2, sp, #136	; 0x88
 8024788:	f104 0801 	add.w	r8, r4, #1
 802478c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024790:	9304      	str	r3, [sp, #16]
 8024792:	9b04      	ldr	r3, [sp, #16]
 8024794:	4543      	cmp	r3, r8
 8024796:	da04      	bge.n	80247a2 <__kernel_rem_pio2+0x3aa>
 8024798:	461c      	mov	r4, r3
 802479a:	e6a3      	b.n	80244e4 <__kernel_rem_pio2+0xec>
 802479c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802479e:	2301      	movs	r3, #1
 80247a0:	e7e4      	b.n	802476c <__kernel_rem_pio2+0x374>
 80247a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80247a8:	f7db fee4 	bl	8000574 <__aeabi_i2d>
 80247ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80247b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247b2:	46ab      	mov	fp, r5
 80247b4:	461c      	mov	r4, r3
 80247b6:	f04f 0900 	mov.w	r9, #0
 80247ba:	2600      	movs	r6, #0
 80247bc:	2700      	movs	r7, #0
 80247be:	9b06      	ldr	r3, [sp, #24]
 80247c0:	4599      	cmp	r9, r3
 80247c2:	dd06      	ble.n	80247d2 <__kernel_rem_pio2+0x3da>
 80247c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80247ca:	f108 0801 	add.w	r8, r8, #1
 80247ce:	930a      	str	r3, [sp, #40]	; 0x28
 80247d0:	e7df      	b.n	8024792 <__kernel_rem_pio2+0x39a>
 80247d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80247d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80247da:	f7db ff35 	bl	8000648 <__aeabi_dmul>
 80247de:	4602      	mov	r2, r0
 80247e0:	460b      	mov	r3, r1
 80247e2:	4630      	mov	r0, r6
 80247e4:	4639      	mov	r1, r7
 80247e6:	f7db fd79 	bl	80002dc <__adddf3>
 80247ea:	f109 0901 	add.w	r9, r9, #1
 80247ee:	4606      	mov	r6, r0
 80247f0:	460f      	mov	r7, r1
 80247f2:	e7e4      	b.n	80247be <__kernel_rem_pio2+0x3c6>
 80247f4:	3d01      	subs	r5, #1
 80247f6:	e748      	b.n	802468a <__kernel_rem_pio2+0x292>
 80247f8:	ec47 6b10 	vmov	d0, r6, r7
 80247fc:	f1ca 0000 	rsb	r0, sl, #0
 8024800:	f000 face 	bl	8024da0 <scalbn>
 8024804:	ec57 6b10 	vmov	r6, r7, d0
 8024808:	4ba0      	ldr	r3, [pc, #640]	; (8024a8c <__kernel_rem_pio2+0x694>)
 802480a:	ee10 0a10 	vmov	r0, s0
 802480e:	2200      	movs	r2, #0
 8024810:	4639      	mov	r1, r7
 8024812:	f7dc f99f 	bl	8000b54 <__aeabi_dcmpge>
 8024816:	b1f8      	cbz	r0, 8024858 <__kernel_rem_pio2+0x460>
 8024818:	4b9d      	ldr	r3, [pc, #628]	; (8024a90 <__kernel_rem_pio2+0x698>)
 802481a:	2200      	movs	r2, #0
 802481c:	4630      	mov	r0, r6
 802481e:	4639      	mov	r1, r7
 8024820:	f7db ff12 	bl	8000648 <__aeabi_dmul>
 8024824:	f7dc f9c0 	bl	8000ba8 <__aeabi_d2iz>
 8024828:	4680      	mov	r8, r0
 802482a:	f7db fea3 	bl	8000574 <__aeabi_i2d>
 802482e:	4b97      	ldr	r3, [pc, #604]	; (8024a8c <__kernel_rem_pio2+0x694>)
 8024830:	2200      	movs	r2, #0
 8024832:	f7db ff09 	bl	8000648 <__aeabi_dmul>
 8024836:	460b      	mov	r3, r1
 8024838:	4602      	mov	r2, r0
 802483a:	4639      	mov	r1, r7
 802483c:	4630      	mov	r0, r6
 802483e:	f7db fd4b 	bl	80002d8 <__aeabi_dsub>
 8024842:	f7dc f9b1 	bl	8000ba8 <__aeabi_d2iz>
 8024846:	1c65      	adds	r5, r4, #1
 8024848:	ab0e      	add	r3, sp, #56	; 0x38
 802484a:	f10a 0a18 	add.w	sl, sl, #24
 802484e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024852:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8024856:	e720      	b.n	802469a <__kernel_rem_pio2+0x2a2>
 8024858:	4630      	mov	r0, r6
 802485a:	4639      	mov	r1, r7
 802485c:	f7dc f9a4 	bl	8000ba8 <__aeabi_d2iz>
 8024860:	ab0e      	add	r3, sp, #56	; 0x38
 8024862:	4625      	mov	r5, r4
 8024864:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024868:	e717      	b.n	802469a <__kernel_rem_pio2+0x2a2>
 802486a:	ab0e      	add	r3, sp, #56	; 0x38
 802486c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8024870:	f7db fe80 	bl	8000574 <__aeabi_i2d>
 8024874:	4632      	mov	r2, r6
 8024876:	463b      	mov	r3, r7
 8024878:	f7db fee6 	bl	8000648 <__aeabi_dmul>
 802487c:	4b84      	ldr	r3, [pc, #528]	; (8024a90 <__kernel_rem_pio2+0x698>)
 802487e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8024882:	2200      	movs	r2, #0
 8024884:	4630      	mov	r0, r6
 8024886:	4639      	mov	r1, r7
 8024888:	f7db fede 	bl	8000648 <__aeabi_dmul>
 802488c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024890:	4606      	mov	r6, r0
 8024892:	460f      	mov	r7, r1
 8024894:	e70f      	b.n	80246b6 <__kernel_rem_pio2+0x2be>
 8024896:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802489a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802489e:	f7db fed3 	bl	8000648 <__aeabi_dmul>
 80248a2:	4602      	mov	r2, r0
 80248a4:	460b      	mov	r3, r1
 80248a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80248aa:	f7db fd17 	bl	80002dc <__adddf3>
 80248ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80248b2:	f108 0801 	add.w	r8, r8, #1
 80248b6:	9b02      	ldr	r3, [sp, #8]
 80248b8:	4598      	cmp	r8, r3
 80248ba:	dc01      	bgt.n	80248c0 <__kernel_rem_pio2+0x4c8>
 80248bc:	45b8      	cmp	r8, r7
 80248be:	ddea      	ble.n	8024896 <__kernel_rem_pio2+0x49e>
 80248c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80248c4:	ab4a      	add	r3, sp, #296	; 0x128
 80248c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80248ca:	ed87 7b00 	vstr	d7, [r7]
 80248ce:	3e01      	subs	r6, #1
 80248d0:	e6f8      	b.n	80246c4 <__kernel_rem_pio2+0x2cc>
 80248d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80248d4:	2b02      	cmp	r3, #2
 80248d6:	dc0b      	bgt.n	80248f0 <__kernel_rem_pio2+0x4f8>
 80248d8:	2b00      	cmp	r3, #0
 80248da:	dc35      	bgt.n	8024948 <__kernel_rem_pio2+0x550>
 80248dc:	d059      	beq.n	8024992 <__kernel_rem_pio2+0x59a>
 80248de:	9b04      	ldr	r3, [sp, #16]
 80248e0:	f003 0007 	and.w	r0, r3, #7
 80248e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80248e8:	ecbd 8b02 	vpop	{d8}
 80248ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80248f2:	2b03      	cmp	r3, #3
 80248f4:	d1f3      	bne.n	80248de <__kernel_rem_pio2+0x4e6>
 80248f6:	ab4a      	add	r3, sp, #296	; 0x128
 80248f8:	4423      	add	r3, r4
 80248fa:	9306      	str	r3, [sp, #24]
 80248fc:	461c      	mov	r4, r3
 80248fe:	469a      	mov	sl, r3
 8024900:	9502      	str	r5, [sp, #8]
 8024902:	9b02      	ldr	r3, [sp, #8]
 8024904:	2b00      	cmp	r3, #0
 8024906:	f1aa 0a08 	sub.w	sl, sl, #8
 802490a:	dc6b      	bgt.n	80249e4 <__kernel_rem_pio2+0x5ec>
 802490c:	46aa      	mov	sl, r5
 802490e:	f1ba 0f01 	cmp.w	sl, #1
 8024912:	f1a4 0408 	sub.w	r4, r4, #8
 8024916:	f300 8085 	bgt.w	8024a24 <__kernel_rem_pio2+0x62c>
 802491a:	9c06      	ldr	r4, [sp, #24]
 802491c:	2000      	movs	r0, #0
 802491e:	3408      	adds	r4, #8
 8024920:	2100      	movs	r1, #0
 8024922:	2d01      	cmp	r5, #1
 8024924:	f300 809d 	bgt.w	8024a62 <__kernel_rem_pio2+0x66a>
 8024928:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802492c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8024930:	f1bb 0f00 	cmp.w	fp, #0
 8024934:	f040 809b 	bne.w	8024a6e <__kernel_rem_pio2+0x676>
 8024938:	9b01      	ldr	r3, [sp, #4]
 802493a:	e9c3 5600 	strd	r5, r6, [r3]
 802493e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8024942:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8024946:	e7ca      	b.n	80248de <__kernel_rem_pio2+0x4e6>
 8024948:	3408      	adds	r4, #8
 802494a:	ab4a      	add	r3, sp, #296	; 0x128
 802494c:	441c      	add	r4, r3
 802494e:	462e      	mov	r6, r5
 8024950:	2000      	movs	r0, #0
 8024952:	2100      	movs	r1, #0
 8024954:	2e00      	cmp	r6, #0
 8024956:	da36      	bge.n	80249c6 <__kernel_rem_pio2+0x5ce>
 8024958:	f1bb 0f00 	cmp.w	fp, #0
 802495c:	d039      	beq.n	80249d2 <__kernel_rem_pio2+0x5da>
 802495e:	4602      	mov	r2, r0
 8024960:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024964:	9c01      	ldr	r4, [sp, #4]
 8024966:	e9c4 2300 	strd	r2, r3, [r4]
 802496a:	4602      	mov	r2, r0
 802496c:	460b      	mov	r3, r1
 802496e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8024972:	f7db fcb1 	bl	80002d8 <__aeabi_dsub>
 8024976:	ae4c      	add	r6, sp, #304	; 0x130
 8024978:	2401      	movs	r4, #1
 802497a:	42a5      	cmp	r5, r4
 802497c:	da2c      	bge.n	80249d8 <__kernel_rem_pio2+0x5e0>
 802497e:	f1bb 0f00 	cmp.w	fp, #0
 8024982:	d002      	beq.n	802498a <__kernel_rem_pio2+0x592>
 8024984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024988:	4619      	mov	r1, r3
 802498a:	9b01      	ldr	r3, [sp, #4]
 802498c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8024990:	e7a5      	b.n	80248de <__kernel_rem_pio2+0x4e6>
 8024992:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8024996:	eb0d 0403 	add.w	r4, sp, r3
 802499a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802499e:	2000      	movs	r0, #0
 80249a0:	2100      	movs	r1, #0
 80249a2:	2d00      	cmp	r5, #0
 80249a4:	da09      	bge.n	80249ba <__kernel_rem_pio2+0x5c2>
 80249a6:	f1bb 0f00 	cmp.w	fp, #0
 80249aa:	d002      	beq.n	80249b2 <__kernel_rem_pio2+0x5ba>
 80249ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80249b0:	4619      	mov	r1, r3
 80249b2:	9b01      	ldr	r3, [sp, #4]
 80249b4:	e9c3 0100 	strd	r0, r1, [r3]
 80249b8:	e791      	b.n	80248de <__kernel_rem_pio2+0x4e6>
 80249ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80249be:	f7db fc8d 	bl	80002dc <__adddf3>
 80249c2:	3d01      	subs	r5, #1
 80249c4:	e7ed      	b.n	80249a2 <__kernel_rem_pio2+0x5aa>
 80249c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80249ca:	f7db fc87 	bl	80002dc <__adddf3>
 80249ce:	3e01      	subs	r6, #1
 80249d0:	e7c0      	b.n	8024954 <__kernel_rem_pio2+0x55c>
 80249d2:	4602      	mov	r2, r0
 80249d4:	460b      	mov	r3, r1
 80249d6:	e7c5      	b.n	8024964 <__kernel_rem_pio2+0x56c>
 80249d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80249dc:	f7db fc7e 	bl	80002dc <__adddf3>
 80249e0:	3401      	adds	r4, #1
 80249e2:	e7ca      	b.n	802497a <__kernel_rem_pio2+0x582>
 80249e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80249e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80249ec:	9b02      	ldr	r3, [sp, #8]
 80249ee:	3b01      	subs	r3, #1
 80249f0:	9302      	str	r3, [sp, #8]
 80249f2:	4632      	mov	r2, r6
 80249f4:	463b      	mov	r3, r7
 80249f6:	4640      	mov	r0, r8
 80249f8:	4649      	mov	r1, r9
 80249fa:	f7db fc6f 	bl	80002dc <__adddf3>
 80249fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024a02:	4602      	mov	r2, r0
 8024a04:	460b      	mov	r3, r1
 8024a06:	4640      	mov	r0, r8
 8024a08:	4649      	mov	r1, r9
 8024a0a:	f7db fc65 	bl	80002d8 <__aeabi_dsub>
 8024a0e:	4632      	mov	r2, r6
 8024a10:	463b      	mov	r3, r7
 8024a12:	f7db fc63 	bl	80002dc <__adddf3>
 8024a16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8024a1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024a1e:	ed8a 7b00 	vstr	d7, [sl]
 8024a22:	e76e      	b.n	8024902 <__kernel_rem_pio2+0x50a>
 8024a24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8024a28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8024a2c:	4640      	mov	r0, r8
 8024a2e:	4632      	mov	r2, r6
 8024a30:	463b      	mov	r3, r7
 8024a32:	4649      	mov	r1, r9
 8024a34:	f7db fc52 	bl	80002dc <__adddf3>
 8024a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a3c:	4602      	mov	r2, r0
 8024a3e:	460b      	mov	r3, r1
 8024a40:	4640      	mov	r0, r8
 8024a42:	4649      	mov	r1, r9
 8024a44:	f7db fc48 	bl	80002d8 <__aeabi_dsub>
 8024a48:	4632      	mov	r2, r6
 8024a4a:	463b      	mov	r3, r7
 8024a4c:	f7db fc46 	bl	80002dc <__adddf3>
 8024a50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024a54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024a58:	ed84 7b00 	vstr	d7, [r4]
 8024a5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a60:	e755      	b.n	802490e <__kernel_rem_pio2+0x516>
 8024a62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a66:	f7db fc39 	bl	80002dc <__adddf3>
 8024a6a:	3d01      	subs	r5, #1
 8024a6c:	e759      	b.n	8024922 <__kernel_rem_pio2+0x52a>
 8024a6e:	9b01      	ldr	r3, [sp, #4]
 8024a70:	9a01      	ldr	r2, [sp, #4]
 8024a72:	601d      	str	r5, [r3, #0]
 8024a74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8024a78:	605c      	str	r4, [r3, #4]
 8024a7a:	609f      	str	r7, [r3, #8]
 8024a7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8024a80:	60d3      	str	r3, [r2, #12]
 8024a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024a86:	6110      	str	r0, [r2, #16]
 8024a88:	6153      	str	r3, [r2, #20]
 8024a8a:	e728      	b.n	80248de <__kernel_rem_pio2+0x4e6>
 8024a8c:	41700000 	.word	0x41700000
 8024a90:	3e700000 	.word	0x3e700000
 8024a94:	00000000 	.word	0x00000000

08024a98 <__kernel_sin>:
 8024a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a9c:	ed2d 8b04 	vpush	{d8-d9}
 8024aa0:	eeb0 8a41 	vmov.f32	s16, s2
 8024aa4:	eef0 8a61 	vmov.f32	s17, s3
 8024aa8:	ec55 4b10 	vmov	r4, r5, d0
 8024aac:	b083      	sub	sp, #12
 8024aae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024ab2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024ab6:	9001      	str	r0, [sp, #4]
 8024ab8:	da06      	bge.n	8024ac8 <__kernel_sin+0x30>
 8024aba:	ee10 0a10 	vmov	r0, s0
 8024abe:	4629      	mov	r1, r5
 8024ac0:	f7dc f872 	bl	8000ba8 <__aeabi_d2iz>
 8024ac4:	2800      	cmp	r0, #0
 8024ac6:	d051      	beq.n	8024b6c <__kernel_sin+0xd4>
 8024ac8:	4622      	mov	r2, r4
 8024aca:	462b      	mov	r3, r5
 8024acc:	4620      	mov	r0, r4
 8024ace:	4629      	mov	r1, r5
 8024ad0:	f7db fdba 	bl	8000648 <__aeabi_dmul>
 8024ad4:	4682      	mov	sl, r0
 8024ad6:	468b      	mov	fp, r1
 8024ad8:	4602      	mov	r2, r0
 8024ada:	460b      	mov	r3, r1
 8024adc:	4620      	mov	r0, r4
 8024ade:	4629      	mov	r1, r5
 8024ae0:	f7db fdb2 	bl	8000648 <__aeabi_dmul>
 8024ae4:	a341      	add	r3, pc, #260	; (adr r3, 8024bec <__kernel_sin+0x154>)
 8024ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aea:	4680      	mov	r8, r0
 8024aec:	4689      	mov	r9, r1
 8024aee:	4650      	mov	r0, sl
 8024af0:	4659      	mov	r1, fp
 8024af2:	f7db fda9 	bl	8000648 <__aeabi_dmul>
 8024af6:	a33f      	add	r3, pc, #252	; (adr r3, 8024bf4 <__kernel_sin+0x15c>)
 8024af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024afc:	f7db fbec 	bl	80002d8 <__aeabi_dsub>
 8024b00:	4652      	mov	r2, sl
 8024b02:	465b      	mov	r3, fp
 8024b04:	f7db fda0 	bl	8000648 <__aeabi_dmul>
 8024b08:	a33c      	add	r3, pc, #240	; (adr r3, 8024bfc <__kernel_sin+0x164>)
 8024b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b0e:	f7db fbe5 	bl	80002dc <__adddf3>
 8024b12:	4652      	mov	r2, sl
 8024b14:	465b      	mov	r3, fp
 8024b16:	f7db fd97 	bl	8000648 <__aeabi_dmul>
 8024b1a:	a33a      	add	r3, pc, #232	; (adr r3, 8024c04 <__kernel_sin+0x16c>)
 8024b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b20:	f7db fbda 	bl	80002d8 <__aeabi_dsub>
 8024b24:	4652      	mov	r2, sl
 8024b26:	465b      	mov	r3, fp
 8024b28:	f7db fd8e 	bl	8000648 <__aeabi_dmul>
 8024b2c:	a337      	add	r3, pc, #220	; (adr r3, 8024c0c <__kernel_sin+0x174>)
 8024b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b32:	f7db fbd3 	bl	80002dc <__adddf3>
 8024b36:	9b01      	ldr	r3, [sp, #4]
 8024b38:	4606      	mov	r6, r0
 8024b3a:	460f      	mov	r7, r1
 8024b3c:	b9eb      	cbnz	r3, 8024b7a <__kernel_sin+0xe2>
 8024b3e:	4602      	mov	r2, r0
 8024b40:	460b      	mov	r3, r1
 8024b42:	4650      	mov	r0, sl
 8024b44:	4659      	mov	r1, fp
 8024b46:	f7db fd7f 	bl	8000648 <__aeabi_dmul>
 8024b4a:	a325      	add	r3, pc, #148	; (adr r3, 8024be0 <__kernel_sin+0x148>)
 8024b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b50:	f7db fbc2 	bl	80002d8 <__aeabi_dsub>
 8024b54:	4642      	mov	r2, r8
 8024b56:	464b      	mov	r3, r9
 8024b58:	f7db fd76 	bl	8000648 <__aeabi_dmul>
 8024b5c:	4602      	mov	r2, r0
 8024b5e:	460b      	mov	r3, r1
 8024b60:	4620      	mov	r0, r4
 8024b62:	4629      	mov	r1, r5
 8024b64:	f7db fbba 	bl	80002dc <__adddf3>
 8024b68:	4604      	mov	r4, r0
 8024b6a:	460d      	mov	r5, r1
 8024b6c:	ec45 4b10 	vmov	d0, r4, r5
 8024b70:	b003      	add	sp, #12
 8024b72:	ecbd 8b04 	vpop	{d8-d9}
 8024b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b7a:	4b1b      	ldr	r3, [pc, #108]	; (8024be8 <__kernel_sin+0x150>)
 8024b7c:	ec51 0b18 	vmov	r0, r1, d8
 8024b80:	2200      	movs	r2, #0
 8024b82:	f7db fd61 	bl	8000648 <__aeabi_dmul>
 8024b86:	4632      	mov	r2, r6
 8024b88:	ec41 0b19 	vmov	d9, r0, r1
 8024b8c:	463b      	mov	r3, r7
 8024b8e:	4640      	mov	r0, r8
 8024b90:	4649      	mov	r1, r9
 8024b92:	f7db fd59 	bl	8000648 <__aeabi_dmul>
 8024b96:	4602      	mov	r2, r0
 8024b98:	460b      	mov	r3, r1
 8024b9a:	ec51 0b19 	vmov	r0, r1, d9
 8024b9e:	f7db fb9b 	bl	80002d8 <__aeabi_dsub>
 8024ba2:	4652      	mov	r2, sl
 8024ba4:	465b      	mov	r3, fp
 8024ba6:	f7db fd4f 	bl	8000648 <__aeabi_dmul>
 8024baa:	ec53 2b18 	vmov	r2, r3, d8
 8024bae:	f7db fb93 	bl	80002d8 <__aeabi_dsub>
 8024bb2:	a30b      	add	r3, pc, #44	; (adr r3, 8024be0 <__kernel_sin+0x148>)
 8024bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bb8:	4606      	mov	r6, r0
 8024bba:	460f      	mov	r7, r1
 8024bbc:	4640      	mov	r0, r8
 8024bbe:	4649      	mov	r1, r9
 8024bc0:	f7db fd42 	bl	8000648 <__aeabi_dmul>
 8024bc4:	4602      	mov	r2, r0
 8024bc6:	460b      	mov	r3, r1
 8024bc8:	4630      	mov	r0, r6
 8024bca:	4639      	mov	r1, r7
 8024bcc:	f7db fb86 	bl	80002dc <__adddf3>
 8024bd0:	4602      	mov	r2, r0
 8024bd2:	460b      	mov	r3, r1
 8024bd4:	4620      	mov	r0, r4
 8024bd6:	4629      	mov	r1, r5
 8024bd8:	f7db fb7e 	bl	80002d8 <__aeabi_dsub>
 8024bdc:	e7c4      	b.n	8024b68 <__kernel_sin+0xd0>
 8024bde:	bf00      	nop
 8024be0:	55555549 	.word	0x55555549
 8024be4:	3fc55555 	.word	0x3fc55555
 8024be8:	3fe00000 	.word	0x3fe00000
 8024bec:	5acfd57c 	.word	0x5acfd57c
 8024bf0:	3de5d93a 	.word	0x3de5d93a
 8024bf4:	8a2b9ceb 	.word	0x8a2b9ceb
 8024bf8:	3e5ae5e6 	.word	0x3e5ae5e6
 8024bfc:	57b1fe7d 	.word	0x57b1fe7d
 8024c00:	3ec71de3 	.word	0x3ec71de3
 8024c04:	19c161d5 	.word	0x19c161d5
 8024c08:	3f2a01a0 	.word	0x3f2a01a0
 8024c0c:	1110f8a6 	.word	0x1110f8a6
 8024c10:	3f811111 	.word	0x3f811111

08024c14 <with_errno>:
 8024c14:	b570      	push	{r4, r5, r6, lr}
 8024c16:	4604      	mov	r4, r0
 8024c18:	460d      	mov	r5, r1
 8024c1a:	4616      	mov	r6, r2
 8024c1c:	f7fb ffea 	bl	8020bf4 <__errno>
 8024c20:	4629      	mov	r1, r5
 8024c22:	6006      	str	r6, [r0, #0]
 8024c24:	4620      	mov	r0, r4
 8024c26:	bd70      	pop	{r4, r5, r6, pc}

08024c28 <xflow>:
 8024c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024c2a:	4614      	mov	r4, r2
 8024c2c:	461d      	mov	r5, r3
 8024c2e:	b108      	cbz	r0, 8024c34 <xflow+0xc>
 8024c30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024c34:	e9cd 2300 	strd	r2, r3, [sp]
 8024c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024c3c:	4620      	mov	r0, r4
 8024c3e:	4629      	mov	r1, r5
 8024c40:	f7db fd02 	bl	8000648 <__aeabi_dmul>
 8024c44:	2222      	movs	r2, #34	; 0x22
 8024c46:	b003      	add	sp, #12
 8024c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024c4c:	f7ff bfe2 	b.w	8024c14 <with_errno>

08024c50 <__math_uflow>:
 8024c50:	b508      	push	{r3, lr}
 8024c52:	2200      	movs	r2, #0
 8024c54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8024c58:	f7ff ffe6 	bl	8024c28 <xflow>
 8024c5c:	ec41 0b10 	vmov	d0, r0, r1
 8024c60:	bd08      	pop	{r3, pc}

08024c62 <__math_oflow>:
 8024c62:	b508      	push	{r3, lr}
 8024c64:	2200      	movs	r2, #0
 8024c66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8024c6a:	f7ff ffdd 	bl	8024c28 <xflow>
 8024c6e:	ec41 0b10 	vmov	d0, r0, r1
 8024c72:	bd08      	pop	{r3, pc}

08024c74 <fabs>:
 8024c74:	ec51 0b10 	vmov	r0, r1, d0
 8024c78:	ee10 2a10 	vmov	r2, s0
 8024c7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024c80:	ec43 2b10 	vmov	d0, r2, r3
 8024c84:	4770      	bx	lr

08024c86 <finite>:
 8024c86:	b082      	sub	sp, #8
 8024c88:	ed8d 0b00 	vstr	d0, [sp]
 8024c8c:	9801      	ldr	r0, [sp, #4]
 8024c8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024c92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024c96:	0fc0      	lsrs	r0, r0, #31
 8024c98:	b002      	add	sp, #8
 8024c9a:	4770      	bx	lr
 8024c9c:	0000      	movs	r0, r0
	...

08024ca0 <floor>:
 8024ca0:	ec51 0b10 	vmov	r0, r1, d0
 8024ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ca8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024cac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024cb0:	2e13      	cmp	r6, #19
 8024cb2:	ee10 5a10 	vmov	r5, s0
 8024cb6:	ee10 8a10 	vmov	r8, s0
 8024cba:	460c      	mov	r4, r1
 8024cbc:	dc32      	bgt.n	8024d24 <floor+0x84>
 8024cbe:	2e00      	cmp	r6, #0
 8024cc0:	da14      	bge.n	8024cec <floor+0x4c>
 8024cc2:	a333      	add	r3, pc, #204	; (adr r3, 8024d90 <floor+0xf0>)
 8024cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cc8:	f7db fb08 	bl	80002dc <__adddf3>
 8024ccc:	2200      	movs	r2, #0
 8024cce:	2300      	movs	r3, #0
 8024cd0:	f7db ff4a 	bl	8000b68 <__aeabi_dcmpgt>
 8024cd4:	b138      	cbz	r0, 8024ce6 <floor+0x46>
 8024cd6:	2c00      	cmp	r4, #0
 8024cd8:	da57      	bge.n	8024d8a <floor+0xea>
 8024cda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024cde:	431d      	orrs	r5, r3
 8024ce0:	d001      	beq.n	8024ce6 <floor+0x46>
 8024ce2:	4c2d      	ldr	r4, [pc, #180]	; (8024d98 <floor+0xf8>)
 8024ce4:	2500      	movs	r5, #0
 8024ce6:	4621      	mov	r1, r4
 8024ce8:	4628      	mov	r0, r5
 8024cea:	e025      	b.n	8024d38 <floor+0x98>
 8024cec:	4f2b      	ldr	r7, [pc, #172]	; (8024d9c <floor+0xfc>)
 8024cee:	4137      	asrs	r7, r6
 8024cf0:	ea01 0307 	and.w	r3, r1, r7
 8024cf4:	4303      	orrs	r3, r0
 8024cf6:	d01f      	beq.n	8024d38 <floor+0x98>
 8024cf8:	a325      	add	r3, pc, #148	; (adr r3, 8024d90 <floor+0xf0>)
 8024cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cfe:	f7db faed 	bl	80002dc <__adddf3>
 8024d02:	2200      	movs	r2, #0
 8024d04:	2300      	movs	r3, #0
 8024d06:	f7db ff2f 	bl	8000b68 <__aeabi_dcmpgt>
 8024d0a:	2800      	cmp	r0, #0
 8024d0c:	d0eb      	beq.n	8024ce6 <floor+0x46>
 8024d0e:	2c00      	cmp	r4, #0
 8024d10:	bfbe      	ittt	lt
 8024d12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024d16:	fa43 f606 	asrlt.w	r6, r3, r6
 8024d1a:	19a4      	addlt	r4, r4, r6
 8024d1c:	ea24 0407 	bic.w	r4, r4, r7
 8024d20:	2500      	movs	r5, #0
 8024d22:	e7e0      	b.n	8024ce6 <floor+0x46>
 8024d24:	2e33      	cmp	r6, #51	; 0x33
 8024d26:	dd0b      	ble.n	8024d40 <floor+0xa0>
 8024d28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024d2c:	d104      	bne.n	8024d38 <floor+0x98>
 8024d2e:	ee10 2a10 	vmov	r2, s0
 8024d32:	460b      	mov	r3, r1
 8024d34:	f7db fad2 	bl	80002dc <__adddf3>
 8024d38:	ec41 0b10 	vmov	d0, r0, r1
 8024d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024d44:	f04f 33ff 	mov.w	r3, #4294967295
 8024d48:	fa23 f707 	lsr.w	r7, r3, r7
 8024d4c:	4207      	tst	r7, r0
 8024d4e:	d0f3      	beq.n	8024d38 <floor+0x98>
 8024d50:	a30f      	add	r3, pc, #60	; (adr r3, 8024d90 <floor+0xf0>)
 8024d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d56:	f7db fac1 	bl	80002dc <__adddf3>
 8024d5a:	2200      	movs	r2, #0
 8024d5c:	2300      	movs	r3, #0
 8024d5e:	f7db ff03 	bl	8000b68 <__aeabi_dcmpgt>
 8024d62:	2800      	cmp	r0, #0
 8024d64:	d0bf      	beq.n	8024ce6 <floor+0x46>
 8024d66:	2c00      	cmp	r4, #0
 8024d68:	da02      	bge.n	8024d70 <floor+0xd0>
 8024d6a:	2e14      	cmp	r6, #20
 8024d6c:	d103      	bne.n	8024d76 <floor+0xd6>
 8024d6e:	3401      	adds	r4, #1
 8024d70:	ea25 0507 	bic.w	r5, r5, r7
 8024d74:	e7b7      	b.n	8024ce6 <floor+0x46>
 8024d76:	2301      	movs	r3, #1
 8024d78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024d7c:	fa03 f606 	lsl.w	r6, r3, r6
 8024d80:	4435      	add	r5, r6
 8024d82:	4545      	cmp	r5, r8
 8024d84:	bf38      	it	cc
 8024d86:	18e4      	addcc	r4, r4, r3
 8024d88:	e7f2      	b.n	8024d70 <floor+0xd0>
 8024d8a:	2500      	movs	r5, #0
 8024d8c:	462c      	mov	r4, r5
 8024d8e:	e7aa      	b.n	8024ce6 <floor+0x46>
 8024d90:	8800759c 	.word	0x8800759c
 8024d94:	7e37e43c 	.word	0x7e37e43c
 8024d98:	bff00000 	.word	0xbff00000
 8024d9c:	000fffff 	.word	0x000fffff

08024da0 <scalbn>:
 8024da0:	b570      	push	{r4, r5, r6, lr}
 8024da2:	ec55 4b10 	vmov	r4, r5, d0
 8024da6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024daa:	4606      	mov	r6, r0
 8024dac:	462b      	mov	r3, r5
 8024dae:	b99a      	cbnz	r2, 8024dd8 <scalbn+0x38>
 8024db0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024db4:	4323      	orrs	r3, r4
 8024db6:	d036      	beq.n	8024e26 <scalbn+0x86>
 8024db8:	4b39      	ldr	r3, [pc, #228]	; (8024ea0 <scalbn+0x100>)
 8024dba:	4629      	mov	r1, r5
 8024dbc:	ee10 0a10 	vmov	r0, s0
 8024dc0:	2200      	movs	r2, #0
 8024dc2:	f7db fc41 	bl	8000648 <__aeabi_dmul>
 8024dc6:	4b37      	ldr	r3, [pc, #220]	; (8024ea4 <scalbn+0x104>)
 8024dc8:	429e      	cmp	r6, r3
 8024dca:	4604      	mov	r4, r0
 8024dcc:	460d      	mov	r5, r1
 8024dce:	da10      	bge.n	8024df2 <scalbn+0x52>
 8024dd0:	a32b      	add	r3, pc, #172	; (adr r3, 8024e80 <scalbn+0xe0>)
 8024dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dd6:	e03a      	b.n	8024e4e <scalbn+0xae>
 8024dd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024ddc:	428a      	cmp	r2, r1
 8024dde:	d10c      	bne.n	8024dfa <scalbn+0x5a>
 8024de0:	ee10 2a10 	vmov	r2, s0
 8024de4:	4620      	mov	r0, r4
 8024de6:	4629      	mov	r1, r5
 8024de8:	f7db fa78 	bl	80002dc <__adddf3>
 8024dec:	4604      	mov	r4, r0
 8024dee:	460d      	mov	r5, r1
 8024df0:	e019      	b.n	8024e26 <scalbn+0x86>
 8024df2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024df6:	460b      	mov	r3, r1
 8024df8:	3a36      	subs	r2, #54	; 0x36
 8024dfa:	4432      	add	r2, r6
 8024dfc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024e00:	428a      	cmp	r2, r1
 8024e02:	dd08      	ble.n	8024e16 <scalbn+0x76>
 8024e04:	2d00      	cmp	r5, #0
 8024e06:	a120      	add	r1, pc, #128	; (adr r1, 8024e88 <scalbn+0xe8>)
 8024e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e0c:	da1c      	bge.n	8024e48 <scalbn+0xa8>
 8024e0e:	a120      	add	r1, pc, #128	; (adr r1, 8024e90 <scalbn+0xf0>)
 8024e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e14:	e018      	b.n	8024e48 <scalbn+0xa8>
 8024e16:	2a00      	cmp	r2, #0
 8024e18:	dd08      	ble.n	8024e2c <scalbn+0x8c>
 8024e1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024e1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024e26:	ec45 4b10 	vmov	d0, r4, r5
 8024e2a:	bd70      	pop	{r4, r5, r6, pc}
 8024e2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024e30:	da19      	bge.n	8024e66 <scalbn+0xc6>
 8024e32:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024e36:	429e      	cmp	r6, r3
 8024e38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024e3c:	dd0a      	ble.n	8024e54 <scalbn+0xb4>
 8024e3e:	a112      	add	r1, pc, #72	; (adr r1, 8024e88 <scalbn+0xe8>)
 8024e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	d1e2      	bne.n	8024e0e <scalbn+0x6e>
 8024e48:	a30f      	add	r3, pc, #60	; (adr r3, 8024e88 <scalbn+0xe8>)
 8024e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e4e:	f7db fbfb 	bl	8000648 <__aeabi_dmul>
 8024e52:	e7cb      	b.n	8024dec <scalbn+0x4c>
 8024e54:	a10a      	add	r1, pc, #40	; (adr r1, 8024e80 <scalbn+0xe0>)
 8024e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d0b8      	beq.n	8024dd0 <scalbn+0x30>
 8024e5e:	a10e      	add	r1, pc, #56	; (adr r1, 8024e98 <scalbn+0xf8>)
 8024e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e64:	e7b4      	b.n	8024dd0 <scalbn+0x30>
 8024e66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024e6a:	3236      	adds	r2, #54	; 0x36
 8024e6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024e70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024e74:	4620      	mov	r0, r4
 8024e76:	4b0c      	ldr	r3, [pc, #48]	; (8024ea8 <scalbn+0x108>)
 8024e78:	2200      	movs	r2, #0
 8024e7a:	e7e8      	b.n	8024e4e <scalbn+0xae>
 8024e7c:	f3af 8000 	nop.w
 8024e80:	c2f8f359 	.word	0xc2f8f359
 8024e84:	01a56e1f 	.word	0x01a56e1f
 8024e88:	8800759c 	.word	0x8800759c
 8024e8c:	7e37e43c 	.word	0x7e37e43c
 8024e90:	8800759c 	.word	0x8800759c
 8024e94:	fe37e43c 	.word	0xfe37e43c
 8024e98:	c2f8f359 	.word	0xc2f8f359
 8024e9c:	81a56e1f 	.word	0x81a56e1f
 8024ea0:	43500000 	.word	0x43500000
 8024ea4:	ffff3cb0 	.word	0xffff3cb0
 8024ea8:	3c900000 	.word	0x3c900000

08024eac <_init>:
 8024eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024eae:	bf00      	nop
 8024eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024eb2:	bc08      	pop	{r3}
 8024eb4:	469e      	mov	lr, r3
 8024eb6:	4770      	bx	lr

08024eb8 <_fini>:
 8024eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024eba:	bf00      	nop
 8024ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024ebe:	bc08      	pop	{r3}
 8024ec0:	469e      	mov	lr, r3
 8024ec2:	4770      	bx	lr
