
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026074  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08026258  08026258  00036258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b88  08026b88  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08026b88  08026b88  00036b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026b90  08026b90  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026b90  08026b90  00036b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026b94  08026b94  00036b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08026b98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fbe4  200001fc  08026d94  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fde0  08026d94  0004fde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d09  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006094  00000000  00000000  00067f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  0006dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d10  00000000  00000000  0006ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002882e  00000000  00000000  00071ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000328cb  00000000  00000000  0009a516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb494  00000000  00000000  000ccde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b8275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ba0  00000000  00000000  001b82c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802623c 	.word	0x0802623c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0802623c 	.word	0x0802623c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f266666 	.word	0x3f266666
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <reset_speed+0x4c>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <reset_speed+0x50>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <reset_speed+0x54>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <reset_speed+0x58>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <reset_speed+0x5c>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <reset_speed+0x60>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <reset_speed+0x64>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <reset_speed+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <reset_speed+0x6c>)
 8001060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	2000024c 	.word	0x2000024c
 8001078:	20000238 	.word	0x20000238
 800107c:	2000023c 	.word	0x2000023c
 8001080:	20000258 	.word	0x20000258
 8001084:	2000025c 	.word	0x2000025c
 8001088:	20000260 	.word	0x20000260
 800108c:	3f266666 	.word	0x3f266666
 8001090:	20000264 	.word	0x20000264
 8001094:	00000000 	.word	0x00000000

08001098 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 80010a0:	4be5      	ldr	r3, [pc, #916]	; (8001438 <interupt_calEncoder+0x3a0>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4be5      	ldr	r3, [pc, #916]	; (800143c <interupt_calEncoder+0x3a4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001440 <interupt_calEncoder+0x3a8>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd07      	ble.n	80010d6 <interupt_calEncoder+0x3e>
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001444 <interupt_calEncoder+0x3ac>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001448 <interupt_calEncoder+0x3b0>
 80010de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d507      	bpl.n	80010f8 <interupt_calEncoder+0x60>
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001444 <interupt_calEncoder+0x3ac>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010f8:	4bd4      	ldr	r3, [pc, #848]	; (800144c <interupt_calEncoder+0x3b4>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <interupt_calEncoder+0x3b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eef1 7a67 	vneg.f32	s15, s15
 800110c:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001440 <interupt_calEncoder+0x3a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd07      	ble.n	8001132 <interupt_calEncoder+0x9a>
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001444 <interupt_calEncoder+0x3ac>
 800112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001448 <interupt_calEncoder+0x3b0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d507      	bpl.n	8001154 <interupt_calEncoder+0xbc>
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001444 <interupt_calEncoder+0x3ac>
 800114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001150:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa72 	bl	8000648 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001172:	f7ff fb93 	bl	800089c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a396      	add	r3, pc, #600	; (adr r3, 80013d8 <interupt_calEncoder+0x340>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa60 	bl	8000648 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a393      	add	r3, pc, #588	; (adr r3, 80013e0 <interupt_calEncoder+0x348>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a391      	add	r3, pc, #580	; (adr r3, 80013e8 <interupt_calEncoder+0x350>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa4e 	bl	8000648 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a38e      	add	r3, pc, #568	; (adr r3, 80013f0 <interupt_calEncoder+0x358>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb6f 	bl	800089c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4ba3      	ldr	r3, [pc, #652]	; (8001458 <interupt_calEncoder+0x3c0>)
 80011cc:	f7ff fa3c 	bl	8000648 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a387      	add	r3, pc, #540	; (adr r3, 80013f8 <interupt_calEncoder+0x360>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb5d 	bl	800089c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <interupt_calEncoder+0x3c4>)
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <interupt_calEncoder+0x3c8>)
 8001202:	f7ff fb4b 	bl	800089c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a37c      	add	r3, pc, #496	; (adr r3, 8001400 <interupt_calEncoder+0x368>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a379      	add	r3, pc, #484	; (adr r3, 8001408 <interupt_calEncoder+0x370>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <interupt_calEncoder+0x3cc>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b85      	ldr	r3, [pc, #532]	; (8001460 <interupt_calEncoder+0x3c8>)
 800124a:	f7ff fb27 	bl	800089c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125e:	f7ff fb1d 	bl	800089c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <interupt_calEncoder+0x3d0>)
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a364      	add	r3, pc, #400	; (adr r3, 8001410 <interupt_calEncoder+0x378>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff fb0b 	bl	800089c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	a362      	add	r3, pc, #392	; (adr r3, 8001418 <interupt_calEncoder+0x380>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9d8 	bl	8000648 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4690      	mov	r8, r2
 800129e:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <interupt_calEncoder+0x3d4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f977 	bl	8000598 <__aeabi_f2d>
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <interupt_calEncoder+0x3b4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f970 	bl	8000598 <__aeabi_f2d>
 80012b8:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f9c3 	bl	8000648 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012d0:	f7ff fae4 	bl	800089c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b17 	vmov	d7, r2, r3
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	f023 fd58 	bl	8024d98 <sin>
 80012e8:	ec51 0b10 	vmov	r0, r1, d0
 80012ec:	a34c      	add	r3, pc, #304	; (adr r3, 8001420 <interupt_calEncoder+0x388>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff f9a9 	bl	8000648 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4692      	mov	sl, r2
 80012fc:	469b      	mov	fp, r3
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <interupt_calEncoder+0x3b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f948 	bl	8000598 <__aeabi_f2d>
 8001308:	a331      	add	r3, pc, #196	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f99b 	bl	8000648 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001320:	f7ff fabc 	bl	800089c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	ec43 2b17 	vmov	d7, r2, r3
 800132c:	eeb0 0a47 	vmov.f32	s0, s14
 8001330:	eef0 0a67 	vmov.f32	s1, s15
 8001334:	f023 fcdc 	bl	8024cf0 <cos>
 8001338:	ec51 0b10 	vmov	r0, r1, d0
 800133c:	a33a      	add	r3, pc, #232	; (adr r3, 8001428 <interupt_calEncoder+0x390>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4650      	mov	r0, sl
 800134c:	4659      	mov	r1, fp
 800134e:	f7fe ffc5 	bl	80002dc <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4692      	mov	sl, r2
 8001358:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <interupt_calEncoder+0x3b4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	a318      	add	r3, pc, #96	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f969 	bl	8000648 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001384:	f7ff fa8a 	bl	800089c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	ec43 2b17 	vmov	d7, r2, r3
 8001390:	eeb0 0a47 	vmov.f32	s0, s14
 8001394:	eef0 0a67 	vmov.f32	s1, s15
 8001398:	f023 fcfe 	bl	8024d98 <sin>
 800139c:	ec51 0b10 	vmov	r0, r1, d0
 80013a0:	a323      	add	r3, pc, #140	; (adr r3, 8001430 <interupt_calEncoder+0x398>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f94f 	bl	8000648 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4650      	mov	r0, sl
 80013b0:	4659      	mov	r1, fp
 80013b2:	f7fe ff93 	bl	80002dc <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4692      	mov	sl, r2
 80013bc:	469b      	mov	fp, r3
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <interupt_calEncoder+0x3b4>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c8:	e052      	b.n	8001470 <interupt_calEncoder+0x3d8>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	4e70a65b 	.word	0x4e70a65b
 80013dc:	3f882f36 	.word	0x3f882f36
 80013e0:	a858793e 	.word	0xa858793e
 80013e4:	3ff1cd35 	.word	0x3ff1cd35
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4078c000 	.word	0x4078c000
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	4078fbae 	.word	0x4078fbae
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	4078efd7 	.word	0x4078efd7
 8001400:	00000000 	.word	0x00000000
 8001404:	4125eb2e 	.word	0x4125eb2e
 8001408:	33333333 	.word	0x33333333
 800140c:	4125f7be 	.word	0x4125f7be
 8001410:	d2f1a9fc 	.word	0xd2f1a9fc
 8001414:	3f50624d 	.word	0x3f50624d
 8001418:	d0353719 	.word	0xd0353719
 800141c:	409a862c 	.word	0x409a862c
 8001420:	aa14ef84 	.word	0xaa14ef84
 8001424:	400ca14f 	.word	0x400ca14f
 8001428:	74decf2e 	.word	0x74decf2e
 800142c:	c05a4d26 	.word	0xc05a4d26
 8001430:	19d7419b 	.word	0x19d7419b
 8001434:	c0710f5a 	.word	0xc0710f5a
 8001438:	200006e4 	.word	0x200006e4
 800143c:	20000218 	.word	0x20000218
 8001440:	43340000 	.word	0x43340000
 8001444:	43b40000 	.word	0x43b40000
 8001448:	c3340000 	.word	0xc3340000
 800144c:	200006e8 	.word	0x200006e8
 8001450:	2000021c 	.word	0x2000021c
 8001454:	40668000 	.word	0x40668000
 8001458:	40790000 	.word	0x40790000
 800145c:	40870800 	.word	0x40870800
 8001460:	40868000 	.word	0x40868000
 8001464:	40862000 	.word	0x40862000
 8001468:	408f4000 	.word	0x408f4000
 800146c:	20000264 	.word	0x20000264
 8001470:	ee17 0a90 	vmov	r0, s15
 8001474:	f7ff f890 	bl	8000598 <__aeabi_f2d>
 8001478:	a3d3      	add	r3, pc, #844	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8e3 	bl	8000648 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4be6      	ldr	r3, [pc, #920]	; (8001828 <interupt_calEncoder+0x790>)
 8001490:	f7ff fa04 	bl	800089c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f023 fc24 	bl	8024cf0 <cos>
 80014a8:	ec51 0b10 	vmov	r0, r1, d0
 80014ac:	a3c2      	add	r3, pc, #776	; (adr r3, 80017b8 <interupt_calEncoder+0x720>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8c9 	bl	8000648 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4650      	mov	r0, sl
 80014bc:	4659      	mov	r1, fp
 80014be:	f7fe ff0d 	bl	80002dc <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f8bd 	bl	8000648 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a3ba      	add	r3, pc, #744	; (adr r3, 80017c0 <interupt_calEncoder+0x728>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fefe 	bl	80002dc <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f9d8 	bl	800089c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb80 	bl	8000bf8 <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014fa:	4acc      	ldr	r2, [pc, #816]	; (800182c <interupt_calEncoder+0x794>)
 80014fc:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff f84a 	bl	8000598 <__aeabi_f2d>
 8001504:	a3b0      	add	r3, pc, #704	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f89d 	bl	8000648 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4bc3      	ldr	r3, [pc, #780]	; (8001828 <interupt_calEncoder+0x790>)
 800151c:	f7ff f9be 	bl	800089c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	a3a9      	add	r3, pc, #676	; (adr r3, 80017d0 <interupt_calEncoder+0x738>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f88b 	bl	8000648 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a3a7      	add	r3, pc, #668	; (adr r3, 80017d8 <interupt_calEncoder+0x740>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f882 	bl	8000648 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a3a4      	add	r3, pc, #656	; (adr r3, 80017e0 <interupt_calEncoder+0x748>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f879 	bl	8000648 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	a3a2      	add	r3, pc, #648	; (adr r3, 80017e8 <interupt_calEncoder+0x750>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f99a 	bl	800089c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4bae      	ldr	r3, [pc, #696]	; (8001830 <interupt_calEncoder+0x798>)
 8001576:	f7ff f867 	bl	8000648 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	a39b      	add	r3, pc, #620	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7ff f988 	bl	800089c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4ba6      	ldr	r3, [pc, #664]	; (8001834 <interupt_calEncoder+0x79c>)
 800159a:	f7ff f855 	bl	8000648 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015ac:	f7ff f976 	bl	800089c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b9f      	ldr	r3, [pc, #636]	; (800183c <interupt_calEncoder+0x7a4>)
 80015be:	f7ff f843 	bl	8000648 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <interupt_calEncoder+0x7a0>)
 80015d0:	f7ff f964 	bl	800089c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e4:	f7ff f95a 	bl	800089c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <interupt_calEncoder+0x7a8>)
 80015f6:	f7ff f827 	bl	8000648 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a37d      	add	r3, pc, #500	; (adr r3, 80017f8 <interupt_calEncoder+0x760>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f948 	bl	800089c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a37a      	add	r3, pc, #488	; (adr r3, 8001800 <interupt_calEncoder+0x768>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f815 	bl	8000648 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4690      	mov	r8, r2
 8001624:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <interupt_calEncoder+0x7ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4604      	mov	r4, r0
 8001632:	460d      	mov	r5, r1
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a362      	add	r3, pc, #392	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b74      	ldr	r3, [pc, #464]	; (8001828 <interupt_calEncoder+0x790>)
 8001656:	f7ff f921 	bl	800089c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b17 	vmov	d7, r2, r3
 8001662:	eeb0 0a47 	vmov.f32	s0, s14
 8001666:	eef0 0a67 	vmov.f32	s1, s15
 800166a:	f023 fb95 	bl	8024d98 <sin>
 800166e:	ec51 0b10 	vmov	r0, r1, d0
 8001672:	a365      	add	r3, pc, #404	; (adr r3, 8001808 <interupt_calEncoder+0x770>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffe6 	bl	8000648 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4692      	mov	sl, r2
 8001682:	469b      	mov	fp, r3
 8001684:	4b70      	ldr	r3, [pc, #448]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff85 	bl	8000598 <__aeabi_f2d>
 800168e:	a34e      	add	r3, pc, #312	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ffd8 	bl	8000648 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b60      	ldr	r3, [pc, #384]	; (8001828 <interupt_calEncoder+0x790>)
 80016a6:	f7ff f8f9 	bl	800089c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	ec43 2b17 	vmov	d7, r2, r3
 80016b2:	eeb0 0a47 	vmov.f32	s0, s14
 80016b6:	eef0 0a67 	vmov.f32	s1, s15
 80016ba:	f023 fb19 	bl	8024cf0 <cos>
 80016be:	ec51 0b10 	vmov	r0, r1, d0
 80016c2:	a353      	add	r3, pc, #332	; (adr r3, 8001810 <interupt_calEncoder+0x778>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ffbe 	bl	8000648 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4650      	mov	r0, sl
 80016d2:	4659      	mov	r1, fp
 80016d4:	f7fe fe02 	bl	80002dc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4692      	mov	sl, r2
 80016de:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <interupt_calEncoder+0x7b0>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7fe ff53 	bl	8000598 <__aeabi_f2d>
 80016f2:	a335      	add	r3, pc, #212	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ffa6 	bl	8000648 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <interupt_calEncoder+0x790>)
 800170a:	f7ff f8c7 	bl	800089c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b17 	vmov	d7, r2, r3
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	eef0 0a67 	vmov.f32	s1, s15
 800171e:	f023 fb3b 	bl	8024d98 <sin>
 8001722:	ec51 0b10 	vmov	r0, r1, d0
 8001726:	a33c      	add	r3, pc, #240	; (adr r3, 8001818 <interupt_calEncoder+0x780>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff8c 	bl	8000648 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4650      	mov	r0, sl
 8001736:	4659      	mov	r1, fp
 8001738:	f7fe fdd0 	bl	80002dc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4692      	mov	sl, r2
 8001742:	469b      	mov	fp, r3
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <interupt_calEncoder+0x7b0>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174e:	ee17 0a90 	vmov	r0, s15
 8001752:	f7fe ff21 	bl	8000598 <__aeabi_f2d>
 8001756:	a31c      	add	r3, pc, #112	; (adr r3, 80017c8 <interupt_calEncoder+0x730>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <interupt_calEncoder+0x790>)
 800176e:	f7ff f895 	bl	800089c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b17 	vmov	d7, r2, r3
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	f023 fab5 	bl	8024cf0 <cos>
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	a325      	add	r3, pc, #148	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff5a 	bl	8000648 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4650      	mov	r0, sl
 800179a:	4659      	mov	r1, fp
 800179c:	f7fe fd9e 	bl	80002dc <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe ff4e 	bl	8000648 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	e04a      	b.n	800184c <interupt_calEncoder+0x7b4>
 80017b6:	bf00      	nop
 80017b8:	a96b73c1 	.word	0xa96b73c1
 80017bc:	4058baae 	.word	0x4058baae
 80017c0:	d0353719 	.word	0xd0353719
 80017c4:	409a862c 	.word	0x409a862c
 80017c8:	54411744 	.word	0x54411744
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	4e70a65b 	.word	0x4e70a65b
 80017d4:	3f882f36 	.word	0x3f882f36
 80017d8:	a858793e 	.word	0xa858793e
 80017dc:	3ff1cd35 	.word	0x3ff1cd35
 80017e0:	00000000 	.word	0x00000000
 80017e4:	4078c000 	.word	0x4078c000
 80017e8:	147ae148 	.word	0x147ae148
 80017ec:	4078fbae 	.word	0x4078fbae
 80017f0:	5c28f5c3 	.word	0x5c28f5c3
 80017f4:	40792a8f 	.word	0x40792a8f
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	11d3671b 	.word	0x11d3671b
 8001804:	409c0a10 	.word	0x409c0a10
 8001808:	27aee802 	.word	0x27aee802
 800180c:	c0234be5 	.word	0xc0234be5
 8001810:	578a2a91 	.word	0x578a2a91
 8001814:	405f0f59 	.word	0x405f0f59
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	404d0ccc 	.word	0x404d0ccc
 8001820:	45e8419d 	.word	0x45e8419d
 8001824:	4075ef32 	.word	0x4075ef32
 8001828:	40668000 	.word	0x40668000
 800182c:	20000228 	.word	0x20000228
 8001830:	40790000 	.word	0x40790000
 8001834:	40870800 	.word	0x40870800
 8001838:	40868000 	.word	0x40868000
 800183c:	40862000 	.word	0x40862000
 8001840:	408f4000 	.word	0x408f4000
 8001844:	20000264 	.word	0x20000264
 8001848:	200006e4 	.word	0x200006e4
 800184c:	a33a      	add	r3, pc, #232	; (adr r3, 8001938 <interupt_calEncoder+0x8a0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fd43 	bl	80002dc <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f7ff f81d 	bl	800089c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9c5 	bl	8000bf8 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <interupt_calEncoder+0x880>)
 8001872:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <interupt_calEncoder+0x884>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe8d 	bl	8000598 <__aeabi_f2d>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <interupt_calEncoder+0x888>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe86 	bl	8000598 <__aeabi_f2d>
 800188c:	a320      	add	r3, pc, #128	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <interupt_calEncoder+0x884>)
 80018b2:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <interupt_calEncoder+0x88c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <interupt_calEncoder+0x880>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe66 	bl	8000598 <__aeabi_f2d>
 80018cc:	a310      	add	r3, pc, #64	; (adr r3, 8001910 <interupt_calEncoder+0x878>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe feb9 	bl	8000648 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fcfd 	bl	80002dc <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f985 	bl	8000bf8 <__aeabi_d2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <interupt_calEncoder+0x88c>)
 80018f2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <interupt_calEncoder+0x890>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <interupt_calEncoder+0x894>)
 80018fa:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <interupt_calEncoder+0x898>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <interupt_calEncoder+0x89c>)
 8001902:	6013      	str	r3, [r2, #0]

}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	d2f1a9fc 	.word	0xd2f1a9fc
 8001914:	3f50624d 	.word	0x3f50624d
 8001918:	2000022c 	.word	0x2000022c
 800191c:	20000220 	.word	0x20000220
 8001920:	20000228 	.word	0x20000228
 8001924:	20000224 	.word	0x20000224
 8001928:	200006e8 	.word	0x200006e8
 800192c:	2000021c 	.word	0x2000021c
 8001930:	200006e4 	.word	0x200006e4
 8001934:	20000218 	.word	0x20000218
 8001938:	11d3671b 	.word	0x11d3671b
 800193c:	409c0a10 	.word	0x409c0a10

08001940 <interupt_calFusion>:


void interupt_calFusion(void) {
 8001940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001944:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 8001946:	4ba4      	ldr	r3, [pc, #656]	; (8001bd8 <interupt_calFusion+0x298>)
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	4ba3      	ldr	r3, [pc, #652]	; (8001bdc <interupt_calFusion+0x29c>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	4ba0      	ldr	r3, [pc, #640]	; (8001bd8 <interupt_calFusion+0x298>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001960:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <interupt_calFusion+0x29c>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001978:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <interupt_calFusion+0x298>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <interupt_calFusion+0x2a4>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <interupt_calFusion+0x298>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001992:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001996:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <interupt_calFusion+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdf2 	bl	8000598 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interupt_calFusion+0x29c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	a383      	add	r3, pc, #524	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe3e 	bl	8000648 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc82 	bl	80002dc <__adddf3>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f90a 	bl	8000bf8 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <interupt_calFusion+0x2ac>)
 80019e8:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <interupt_calFusion+0x2b0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdd2 	bl	8000598 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <interupt_calFusion+0x2a4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdcb 	bl	8000598 <__aeabi_f2d>
 8001a02:	a373      	add	r3, pc, #460	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe1e 	bl	8000648 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc62 	bl	80002dc <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8ea 	bl	8000bf8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <interupt_calFusion+0x2b0>)
 8001a28:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001a2a:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fdb2 	bl	8000598 <__aeabi_f2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fdab 	bl	8000598 <__aeabi_f2d>
 8001a42:	4680      	mov	r8, r0
 8001a44:	4689      	mov	r9, r1
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fda4 	bl	8000598 <__aeabi_f2d>
 8001a50:	a35f      	add	r3, pc, #380	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdf7 	bl	8000648 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4640      	mov	r0, r8
 8001a60:	4649      	mov	r1, r9
 8001a62:	f7fe fc3b 	bl	80002dc <__adddf3>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fdeb 	bl	8000648 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <interupt_calFusion+0x298>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <interupt_calFusion+0x2a0>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd7f 	bl	8000598 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc1b 	bl	80002dc <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f8a3 	bl	8000bf8 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ab6:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <interupt_calFusion+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd6b 	bl	8000598 <__aeabi_f2d>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4680      	mov	r8, r0
 8001ad2:	4689      	mov	r9, r1
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <interupt_calFusion+0x2b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd5d 	bl	8000598 <__aeabi_f2d>
 8001ade:	a33c      	add	r3, pc, #240	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fdb0 	bl	8000648 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe fbf4 	bl	80002dc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fda4 	bl	8000648 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <interupt_calFusion+0x298>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <interupt_calFusion+0x2a8>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fd38 	bl	8000598 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b44:	6013      	str	r3, [r2, #0]
//	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel);
//	fusion_speedL = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedL;
//	fusion_speedR = straight_alpha * (fusion_speedL) + (1 - straight_alpha) * E_speedR;
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <interupt_calFusion+0x2b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a31c      	add	r3, pc, #112	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <interupt_calFusion+0x2c0>)
 8001b84:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd04 	bl	8000598 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <interupt_calFusion+0x2bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcfd 	bl	8000598 <__aeabi_f2d>
 8001b9e:	a30c      	add	r3, pc, #48	; (adr r3, 8001bd0 <interupt_calFusion+0x290>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd50 	bl	8000648 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb94 	bl	80002dc <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff f81c 	bl	8000bf8 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <interupt_calFusion+0x2c4>)
 8001bc4:	6013      	str	r3, [r2, #0]

}
 8001bc6:	bf00      	nop
 8001bc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f50624d 	.word	0x3f50624d
 8001bd8:	20000260 	.word	0x20000260
 8001bdc:	20000238 	.word	0x20000238
 8001be0:	20000228 	.word	0x20000228
 8001be4:	2000023c 	.word	0x2000023c
 8001be8:	2000022c 	.word	0x2000022c
 8001bec:	20000230 	.word	0x20000230
 8001bf0:	20000234 	.word	0x20000234
 8001bf4:	20000258 	.word	0x20000258
 8001bf8:	20000284 	.word	0x20000284
 8001bfc:	2000025c 	.word	0x2000025c
 8001c00:	20000250 	.word	0x20000250
 8001c04:	20000254 	.word	0x20000254

08001c08 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	int s = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <reset_gyro+0xfc>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <reset_gyro+0x100>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001c22:	2301      	movs	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e026      	b.n	8001c76 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <reset_gyro+0x104>)
 8001c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <reset_gyro+0x100>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <reset_gyro+0x100>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <reset_gyro+0x104>)
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <reset_gyro+0x108>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <reset_gyro+0x108>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <reset_gyro+0x104>)
 8001c56:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <reset_gyro+0x10c>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <reset_gyro+0x10c>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f007 fbbc 	bl	80093e8 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7c:	ddd4      	ble.n	8001c28 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <reset_gyro+0x100>)
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001d18 <reset_gyro+0x110>
 8001c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <reset_gyro+0x100>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <reset_gyro+0x108>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001d18 <reset_gyro+0x110>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <reset_gyro+0x108>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <reset_gyro+0x10c>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001d18 <reset_gyro+0x110>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <reset_gyro+0x10c>)
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <reset_gyro+0xfc>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <reset_gyro+0x114>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <reset_gyro+0x118>)
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <reset_gyro+0x11c>)
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e009      	b.n	8001cf4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <reset_gyro+0x120>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	ddf2      	ble.n	8001ce0 <reset_gyro+0xd8>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000268 	.word	0x20000268
 8001d08:	2000028c 	.word	0x2000028c
 8001d0c:	200006f0 	.word	0x200006f0
 8001d10:	20000288 	.word	0x20000288
 8001d14:	20000290 	.word	0x20000290
 8001d18:	447a0000 	.word	0x447a0000
 8001d1c:	20000270 	.word	0x20000270
 8001d20:	2000027c 	.word	0x2000027c
 8001d24:	20000280 	.word	0x20000280
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	00000000 	.word	0x00000000

08001d30 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	int j = 9;
 8001d36:	2309      	movs	r3, #9
 8001d38:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	e00d      	b.n	8001d5c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4ab0      	ldr	r2, [pc, #704]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	49ae      	ldr	r1, [pc, #696]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dcee      	bgt.n	8001d40 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d62:	4baa      	ldr	r3, [pc, #680]	; (800200c <interrupt_calGyro+0x2dc>)
 8001d64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <interrupt_calGyro+0x2e0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fc0f 	bl	8000598 <__aeabi_f2d>
 8001d7a:	a391      	add	r3, pc, #580	; (adr r3, 8001fc0 <interrupt_calGyro+0x290>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc62 	bl	8000648 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	a38e      	add	r3, pc, #568	; (adr r3, 8001fc8 <interrupt_calGyro+0x298>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc59 	bl	8000648 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	a38c      	add	r3, pc, #560	; (adr r3, 8001fd0 <interrupt_calGyro+0x2a0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fd7a 	bl	800089c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff22 	bl	8000bf8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a94      	ldr	r2, [pc, #592]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001db8:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001dba:	4b93      	ldr	r3, [pc, #588]	; (8002008 <interrupt_calGyro+0x2d8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a95      	ldr	r2, [pc, #596]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001dc0:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <interrupt_calGyro+0x2e8>)
 8001dc8:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001dca:	4b90      	ldr	r3, [pc, #576]	; (800200c <interrupt_calGyro+0x2dc>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <interrupt_calGyro+0x2ec>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <interrupt_calGyro+0x2f0>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
	angle += INTERRUPT_TIME * angle_speed; //deg
 8001de0:	4b90      	ldr	r3, [pc, #576]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbd7 	bl	8000598 <__aeabi_f2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <interrupt_calGyro+0x2e4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbd0 	bl	8000598 <__aeabi_f2d>
 8001df8:	a377      	add	r3, pc, #476	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc23 	bl	8000648 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa67 	bl	80002dc <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a81      	ldr	r2, [pc, #516]	; (8002024 <interrupt_calGyro+0x2f4>)
 8001e1e:	6013      	str	r3, [r2, #0]
	anglex += INTERRUPT_TIME * (gyro.omega_x - omegaX_offset); //deg
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbb7 	bl	8000598 <__aeabi_f2d>
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4b77      	ldr	r3, [pc, #476]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b79      	ldr	r3, [pc, #484]	; (800201c <interrupt_calGyro+0x2ec>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fba9 	bl	8000598 <__aeabi_f2d>
 8001e46:	a364      	add	r3, pc, #400	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbfc 	bl	8000648 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa40 	bl	80002dc <__adddf3>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fec8 	bl	8000bf8 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	; (8002028 <interrupt_calGyro+0x2f8>)
 8001e6c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <interrupt_calGyro+0x2dc>)
 8001e70:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <interrupt_calGyro+0x2fc>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	ee17 0a90 	vmov	r0, s15
 8001e82:	f7fe fb89 	bl	8000598 <__aeabi_f2d>
 8001e86:	a356      	add	r3, pc, #344	; (adr r3, 8001fe0 <interrupt_calGyro+0x2b0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbdc 	bl	8000648 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	a353      	add	r3, pc, #332	; (adr r3, 8001fe8 <interrupt_calGyro+0x2b8>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbd3 	bl	8000648 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	a351      	add	r3, pc, #324	; (adr r3, 8001ff0 <interrupt_calGyro+0x2c0>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fcf4 	bl	800089c <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <interrupt_calGyro+0x300>)
 8001ec2:	f7fe fbc1 	bl	8000648 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a34a      	add	r3, pc, #296	; (adr r3, 8001ff8 <interrupt_calGyro+0x2c8>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fce2 	bl	800089c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <interrupt_calGyro+0x304>)
 8001ee6:	f7fe fbaf 	bl	8000648 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <interrupt_calGyro+0x308>)
 8001ef8:	f7fe fcd0 	bl	800089c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <interrupt_calGyro+0x30c>)
 8001f0a:	f7fe fb9d 	bl	8000648 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	a33a      	add	r3, pc, #232	; (adr r3, 8002000 <interrupt_calGyro+0x2d0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fe66 	bl	8000bf8 <__aeabi_d2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <interrupt_calGyro+0x310>)
 8001f30:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <interrupt_calGyro+0x314>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb2e 	bl	8000598 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <interrupt_calGyro+0x310>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	a323      	add	r3, pc, #140	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fb7a 	bl	8000648 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f9be 	bl	80002dc <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fe46 	bl	8000bf8 <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4a35      	ldr	r2, [pc, #212]	; (8002044 <interrupt_calGyro+0x314>)
 8001f70:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <interrupt_calGyro+0x318>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fb0e 	bl	8000598 <__aeabi_f2d>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
 8001f80:	4b30      	ldr	r3, [pc, #192]	; (8002044 <interrupt_calGyro+0x314>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb07 	bl	8000598 <__aeabi_f2d>
 8001f8a:	a313      	add	r3, pc, #76	; (adr r3, 8001fd8 <interrupt_calGyro+0x2a8>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb5a 	bl	8000648 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f7fe f99e 	bl	80002dc <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fe26 	bl	8000bf8 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <interrupt_calGyro+0x318>)
 8001fb0:	6013      	str	r3, [r2, #0]




}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	70a3d70a 	.word	0x70a3d70a
 8001fc4:	3fef0a3d 	.word	0x3fef0a3d
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40acd400 	.word	0x40acd400
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40ac2000 	.word	0x40ac2000
 8001fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fdc:	3f50624d 	.word	0x3f50624d
 8001fe0:	0fcf80dc 	.word	0x0fcf80dc
 8001fe4:	3ff0a423 	.word	0x3ff0a423
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	4078c000 	.word	0x4078c000
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	4077d000 	.word	0x4077d000
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	407a7000 	.word	0x407a7000
 8002000:	3a92a305 	.word	0x3a92a305
 8002004:	40239d01 	.word	0x40239d01
 8002008:	20000294 	.word	0x20000294
 800200c:	200006f0 	.word	0x200006f0
 8002010:	2000028c 	.word	0x2000028c
 8002014:	2000026c 	.word	0x2000026c
 8002018:	20000274 	.word	0x20000274
 800201c:	20000288 	.word	0x20000288
 8002020:	20000278 	.word	0x20000278
 8002024:	20000268 	.word	0x20000268
 8002028:	20000270 	.word	0x20000270
 800202c:	20000290 	.word	0x20000290
 8002030:	40790000 	.word	0x40790000
 8002034:	40862000 	.word	0x40862000
 8002038:	40868000 	.word	0x40868000
 800203c:	408f4000 	.word	0x408f4000
 8002040:	20000284 	.word	0x20000284
 8002044:	2000027c 	.word	0x2000027c
 8002048:	20000280 	.word	0x20000280
 800204c:	00000000 	.word	0x00000000

08002050 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00f      	b.n	800207c <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 800205c:	f006 ff68 	bl	8008f30 <pl_getbatt>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <battcheak+0xe8>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8002070:	200a      	movs	r0, #10
 8002072:	f007 f975 	bl	8009360 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b13      	cmp	r3, #19
 8002080:	ddec      	ble.n	800205c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <battcheak+0xec>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e010      	b.n	80020b2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <battcheak+0xe8>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <battcheak+0xec>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <battcheak+0xec>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b13      	cmp	r3, #19
 80020b6:	ddeb      	ble.n	8002090 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <battcheak+0xec>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <battcheak+0xec>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <battcheak+0xec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa61 	bl	8000598 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4819      	ldr	r0, [pc, #100]	; (8002140 <battcheak+0xf0>)
 80020dc:	f020 fbfc 	bl	80228d8 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <battcheak+0xec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa57 	bl	8000598 <__aeabi_f2d>
 80020ea:	a311      	add	r3, pc, #68	; (adr r3, 8002130 <battcheak+0xe0>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fd26 	bl	8000b40 <__aeabi_dcmple>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 80020fa:	e014      	b.n	8002126 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f006 f9b3 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002102:	2001      	movs	r0, #1
 8002104:	f006 f9c2 	bl	800848c <pl_l_blue_LED>
		wait_ms(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210c:	f007 f928 	bl	8009360 <wait_ms>
		pl_r_blue_LED(OFF);
 8002110:	2000      	movs	r0, #0
 8002112:	f006 f9a9 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002116:	2000      	movs	r0, #0
 8002118:	f006 f9b8 	bl	800848c <pl_l_blue_LED>
		wait_ms(500);
 800211c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002120:	f007 f91e 	bl	8009360 <wait_ms>
		pl_r_blue_LED(ON);
 8002124:	e7ea      	b.n	80020fc <battcheak+0xac>
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	9999999a 	.word	0x9999999a
 8002134:	400d9999 	.word	0x400d9999
 8002138:	20000488 	.word	0x20000488
 800213c:	200004d8 	.word	0x200004d8
 8002140:	08026258 	.word	0x08026258

08002144 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 800214a:	f007 f88f 	bl	800926c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 800214e:	2313      	movs	r3, #19
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e037      	b.n	80021c4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <interupt_calSensor+0x170>)
 800215a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800215e:	4955      	ldr	r1, [pc, #340]	; (80022b4 <interupt_calSensor+0x170>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3b01      	subs	r3, #1
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <interupt_calSensor+0x170>)
 800216c:	3314      	adds	r3, #20
 800216e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <interupt_calSensor+0x170>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3314      	adds	r3, #20
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <interupt_calSensor+0x170>)
 8002182:	3328      	adds	r3, #40	; 0x28
 8002184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002188:	494a      	ldr	r1, [pc, #296]	; (80022b4 <interupt_calSensor+0x170>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3328      	adds	r3, #40	; 0x28
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3b01      	subs	r3, #1
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <interupt_calSensor+0x170>)
 8002198:	333c      	adds	r3, #60	; 0x3c
 800219a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800219e:	4945      	ldr	r1, [pc, #276]	; (80022b4 <interupt_calSensor+0x170>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <interupt_calSensor+0x170>)
 80021ae:	3350      	adds	r3, #80	; 0x50
 80021b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021b4:	493f      	ldr	r1, [pc, #252]	; (80022b4 <interupt_calSensor+0x170>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3350      	adds	r3, #80	; 0x50
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dcc4      	bgt.n	8002154 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <interupt_calSensor+0x174>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <interupt_calSensor+0x178>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <interupt_calSensor+0x170>)
 80021d8:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <interupt_calSensor+0x174>)
 80021dc:	885b      	ldrh	r3, [r3, #2]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <interupt_calSensor+0x178>)
 80021e2:	885b      	ldrh	r3, [r3, #2]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <interupt_calSensor+0x170>)
 80021e8:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <interupt_calSensor+0x174>)
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <interupt_calSensor+0x178>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a2f      	ldr	r2, [pc, #188]	; (80022b4 <interupt_calSensor+0x170>)
 80021f8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <interupt_calSensor+0x174>)
 80021fe:	88db      	ldrh	r3, [r3, #6]
 8002200:	461a      	mov	r2, r3
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <interupt_calSensor+0x178>)
 8002204:	88db      	ldrh	r3, [r3, #6]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <interupt_calSensor+0x170>)
 800220a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <interupt_calSensor+0x174>)
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	461a      	mov	r2, r3
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <interupt_calSensor+0x178>)
 8002216:	891b      	ldrh	r3, [r3, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <interupt_calSensor+0x170>)
 800221c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	e03d      	b.n	80022a2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8002226:	4923      	ldr	r1, [pc, #140]	; (80022b4 <interupt_calSensor+0x170>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <interupt_calSensor+0x170>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4403      	add	r3, r0
 8002244:	332c      	adds	r3, #44	; 0x2c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1aca      	subs	r2, r1, r3
 800224a:	491d      	ldr	r1, [pc, #116]	; (80022c0 <interupt_calSensor+0x17c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8002252:	4918      	ldr	r1, [pc, #96]	; (80022b4 <interupt_calSensor+0x170>)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	440b      	add	r3, r1
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <interupt_calSensor+0x170>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4403      	add	r3, r0
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4419      	add	r1, r3
 8002276:	480f      	ldr	r0, [pc, #60]	; (80022b4 <interupt_calSensor+0x170>)
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4403      	add	r3, r0
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	440b      	add	r3, r1
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <interupt_calSensor+0x180>)
 800228c:	fb82 1203 	smull	r1, r2, r2, r3
 8002290:	17db      	asrs	r3, r3, #31
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <interupt_calSensor+0x184>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	ddbe      	ble.n	8002226 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200002bc 	.word	0x200002bc
 80022b8:	20000718 	.word	0x20000718
 80022bc:	20000724 	.word	0x20000724
 80022c0:	2000044c 	.word	0x2000044c
 80022c4:	55555556 	.word	0x55555556
 80022c8:	20000474 	.word	0x20000474

080022cc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

	modeacc = 0;
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <Control_mode_Init+0x28>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <Control_mode_Init+0x2c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <Control_mode_Init+0x30>)
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <Control_mode_Init+0x34>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000534 	.word	0x20000534
 80022f8:	20000811 	.word	0x20000811
 80022fc:	2000080c 	.word	0x2000080c
 8002300:	20000535 	.word	0x20000535

08002304 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	ed87 0a03 	vstr	s0, [r7, #12]
 800230e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	db14      	blt.n	800234e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8002324:	2001      	movs	r0, #1
 8002326:	f006 fd39 	bl	8008d9c <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <get_duty+0x11c>)
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	edd7 6a03 	vldr	s13, [r7, #12]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002424 <get_duty+0x120>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e015      	b.n	800237a <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 800234e:	2002      	movs	r0, #2
 8002350:	f006 fd24 	bl	8008d9c <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8002354:	edd7 7a03 	vldr	s15, [r7, #12]
 8002358:	eef1 6a67 	vneg.f32	s13, s15
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <get_duty+0x11c>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002424 <get_duty+0x120>
 800236a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002372:	ee17 2a90 	vmov	r2, s15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 800237a:	edd7 7a02 	vldr	s15, [r7, #8]
 800237e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db14      	blt.n	80023b2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002388:	2001      	movs	r0, #1
 800238a:	f006 fd2f 	bl	8008dec <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <get_duty+0x11c>)
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	edd7 6a02 	vldr	s13, [r7, #8]
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002424 <get_duty+0x120>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 2a90 	vmov	r2, s15
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e015      	b.n	80023de <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 80023b2:	2002      	movs	r0, #2
 80023b4:	f006 fd1a 	bl	8008dec <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 80023b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023bc:	eef1 6a67 	vneg.f32	s13, s15
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <get_duty+0x11c>)
 80023c2:	ed93 7a00 	vldr	s14, [r3]
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002424 <get_duty+0x120>
 80023ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 2a90 	vmov	r2, s15
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f240 628c 	movw	r2, #1676	; 0x68c
 80023f6:	4293      	cmp	r3, r2
 80023f8:	dd03      	ble.n	8002402 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f240 628d 	movw	r2, #1677	; 0x68d
 8002400:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f240 628c 	movw	r2, #1676	; 0x68c
 800240a:	4293      	cmp	r3, r2
 800240c:	dd03      	ble.n	8002416 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f240 628d 	movw	r2, #1677	; 0x68d
 8002414:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200004d8 	.word	0x200004d8
 8002424:	44d1e000 	.word	0x44d1e000

08002428 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242c:	b08e      	sub	sp, #56	; 0x38
 800242e:	af04      	add	r7, sp, #16
	int duty_L=0, duty_R=0;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8002456:	4bd2      	ldr	r3, [pc, #840]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 800245e:	4bd1      	ldr	r3, [pc, #836]	; (80027a4 <interupt_DriveMotor+0x37c>)
 8002460:	2204      	movs	r2, #4
 8002462:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8002464:	4bd0      	ldr	r3, [pc, #832]	; (80027a8 <interupt_DriveMotor+0x380>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 800246a:	4bd0      	ldr	r3, [pc, #832]	; (80027ac <interupt_DriveMotor+0x384>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002470:	4bcb      	ldr	r3, [pc, #812]	; (80027a0 <interupt_DriveMotor+0x378>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 8293 	bne.w	80029a0 <interupt_DriveMotor+0x578>
		g_wallCut_mode=1;
 800247a:	4bcc      	ldr	r3, [pc, #816]	; (80027ac <interupt_DriveMotor+0x384>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002480:	4bcb      	ldr	r3, [pc, #812]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	4aca      	ldr	r2, [pc, #808]	; (80027b0 <interupt_DriveMotor+0x388>)
 8002488:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800248a:	4bca      	ldr	r3, [pc, #808]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f882 	bl	8000598 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	4bc6      	ldr	r3, [pc, #792]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f87b 	bl	8000598 <__aeabi_f2d>
 80024a2:	a3bb      	add	r3, pc, #748	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe f8ce 	bl	8000648 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4bbf      	ldr	r3, [pc, #764]	; (80027b4 <interupt_DriveMotor+0x38c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f86d 	bl	8000598 <__aeabi_f2d>
 80024be:	a3b4      	add	r3, pc, #720	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f8c0 	bl	8000648 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	a3af      	add	r3, pc, #700	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f8b7 	bl	8000648 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ea:	f7fe f9d7 	bl	800089c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fd fef1 	bl	80002dc <__adddf3>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd feeb 	bl	80002dc <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb73 	bl	8000bf8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4aa7      	ldr	r2, [pc, #668]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002516:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002518:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f83b 	bl	8000598 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	4ba3      	ldr	r3, [pc, #652]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f834 	bl	8000598 <__aeabi_f2d>
 8002530:	a397      	add	r3, pc, #604	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f887 	bl	8000648 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fd fecb 	bl	80002dc <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb53 	bl	8000bf8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a97      	ldr	r2, [pc, #604]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002556:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002558:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <interupt_DriveMotor+0x390>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f81b 	bl	8000598 <__aeabi_f2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	a387      	add	r3, pc, #540	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f867 	bl	8000648 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4690      	mov	r8, r2
 8002580:	4699      	mov	r9, r3
 8002582:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe f806 	bl	8000598 <__aeabi_f2d>
 800258c:	a380      	add	r3, pc, #512	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fe f859 	bl	8000648 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	a37c      	add	r3, pc, #496	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f850 	bl	8000648 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	f7fe f970 	bl	800089c <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4640      	mov	r0, r8
 80025c2:	4649      	mov	r1, r9
 80025c4:	f7fd fe8a 	bl	80002dc <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fd fe84 	bl	80002dc <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb0c 	bl	8000bf8 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e4:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025e6:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffd4 	bl	8000598 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <interupt_DriveMotor+0x390>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffcd 	bl	8000598 <__aeabi_f2d>
 80025fe:	a364      	add	r3, pc, #400	; (adr r3, 8002790 <interupt_DriveMotor+0x368>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe f820 	bl	8000648 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd fe64 	bl	80002dc <__adddf3>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe faec 	bl	8000bf8 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002624:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <interupt_DriveMotor+0x394>)
 8002628:	4a62      	ldr	r2, [pc, #392]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800262a:	9202      	str	r2, [sp, #8]
 800262c:	466c      	mov	r4, sp
 800262e:	f103 0210 	add.w	r2, r3, #16
 8002632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002636:	e884 0003 	stmia.w	r4, {r0, r1}
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	f007 f88e 	bl	800975c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <interupt_DriveMotor+0x38c>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <interupt_DriveMotor+0x390>)
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	eef0 0a47 	vmov.f32	s1, s14
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fa12 	bl	8005a88 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <interupt_DriveMotor+0x398>)
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <interupt_DriveMotor+0x39c>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002678:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <interupt_DriveMotor+0x38c>)
 800267e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <interupt_DriveMotor+0x3a0>)
 8002684:	edd3 6a00 	vldr	s13, [r3]
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <interupt_DriveMotor+0x390>)
 800268a:	ed93 6a01 	vldr	s12, [r3, #4]
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	eef0 1a46 	vmov.f32	s3, s12
 8002698:	eeb0 1a66 	vmov.f32	s2, s13
 800269c:	4611      	mov	r1, r2
 800269e:	eef0 0a67 	vmov.f32	s1, s15
 80026a2:	eeb0 0a47 	vmov.f32	s0, s14
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 ff2e 	bl	8005508 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80026ac:	f003 fc18 	bl	8005ee0 <calWallConrol>
 80026b0:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80026b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80026bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80026dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002704:	ed97 7a04 	vldr	s14, [r7, #16]
 8002708:	edd7 7a02 	vldr	s15, [r7, #8]
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff40 	bl	8000598 <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <interupt_DriveMotor+0x3a4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd ff39 	bl	8000598 <__aeabi_f2d>
 8002726:	a31c      	add	r3, pc, #112	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff8c 	bl	8000648 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fe fa16 	bl	8000b68 <__aeabi_dcmpgt>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808c 	beq.w	800285c <interupt_DriveMotor+0x434>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002746:	f7fd ff27 	bl	8000598 <__aeabi_f2d>
 800274a:	4604      	mov	r4, r0
 800274c:	460d      	mov	r5, r1
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <interupt_DriveMotor+0x3a4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd ff20 	bl	8000598 <__aeabi_f2d>
 8002758:	a30f      	add	r3, pc, #60	; (adr r3, 8002798 <interupt_DriveMotor+0x370>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff73 	bl	8000648 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4690      	mov	r8, r2
 8002768:	4699      	mov	r9, r3
 800276a:	ed97 7a04 	vldr	s14, [r7, #16]
 800276e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	ee17 0a90 	vmov	r0, s15
 800277a:	f7fd ff0d 	bl	8000598 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4640      	mov	r0, r8
 8002784:	4649      	mov	r1, r9
 8002786:	f7fd fda7 	bl	80002d8 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	e01f      	b.n	80027d0 <interupt_DriveMotor+0x3a8>
 8002790:	d2f1a9fc 	.word	0xd2f1a9fc
 8002794:	3f50624d 	.word	0x3f50624d
 8002798:	d916872b 	.word	0xd916872b
 800279c:	3feff7ce 	.word	0x3feff7ce
 80027a0:	20000534 	.word	0x20000534
 80027a4:	20000810 	.word	0x20000810
 80027a8:	2000059c 	.word	0x2000059c
 80027ac:	2000059e 	.word	0x2000059e
 80027b0:	20000530 	.word	0x20000530
 80027b4:	200004dc 	.word	0x200004dc
 80027b8:	200004e8 	.word	0x200004e8
 80027bc:	200004f4 	.word	0x200004f4
 80027c0:	20000238 	.word	0x20000238
 80027c4:	2000023c 	.word	0x2000023c
 80027c8:	2000026c 	.word	0x2000026c
 80027cc:	200004d8 	.word	0x200004d8
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fd82 	bl	80002dc <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe fa0a 	bl	8000bf8 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027e8:	6a38      	ldr	r0, [r7, #32]
 80027ea:	f7fd fed5 	bl	8000598 <__aeabi_f2d>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <interupt_DriveMotor+0x430>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fece 	bl	8000598 <__aeabi_f2d>
 80027fc:	a314      	add	r3, pc, #80	; (adr r3, 8002850 <interupt_DriveMotor+0x428>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ff21 	bl	8000648 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4690      	mov	r8, r2
 800280c:	4699      	mov	r9, r3
 800280e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002812:	edd7 7a02 	vldr	s15, [r7, #8]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	ee17 0a90 	vmov	r0, s15
 800281e:	f7fd febb 	bl	8000598 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4640      	mov	r0, r8
 8002828:	4649      	mov	r1, r9
 800282a:	f7fd fd55 	bl	80002d8 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd51 	bl	80002dc <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9d9 	bl	8000bf8 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	e097      	b.n	800297c <interupt_DriveMotor+0x554>
 800284c:	f3af 8000 	nop.w
 8002850:	d916872b 	.word	0xd916872b
 8002854:	3feff7ce 	.word	0x3feff7ce
 8002858:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800285c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002860:	edd7 7a02 	vldr	s15, [r7, #8]
 8002864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe94 	bl	8000598 <__aeabi_f2d>
 8002870:	4604      	mov	r4, r0
 8002872:	460d      	mov	r5, r1
 8002874:	4bd0      	ldr	r3, [pc, #832]	; (8002bb8 <interupt_DriveMotor+0x790>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eef1 7a67 	vneg.f32	s15, s15
 800287e:	ee17 3a90 	vmov	r3, s15
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe88 	bl	8000598 <__aeabi_f2d>
 8002888:	a3c7      	add	r3, pc, #796	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fedb 	bl	8000648 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fe f947 	bl	8000b2c <__aeabi_dcmplt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06b      	beq.n	800297c <interupt_DriveMotor+0x554>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a6:	f7fd fe77 	bl	8000598 <__aeabi_f2d>
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	4bc2      	ldr	r3, [pc, #776]	; (8002bb8 <interupt_DriveMotor+0x790>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eef1 7a67 	vneg.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe6b 	bl	8000598 <__aeabi_f2d>
 80028c2:	a3b9      	add	r3, pc, #740	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd febe 	bl	8000648 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4690      	mov	r8, r2
 80028d2:	4699      	mov	r9, r3
 80028d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e0:	ee17 0a90 	vmov	r0, s15
 80028e4:	f7fd fe58 	bl	8000598 <__aeabi_f2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fd fcf2 	bl	80002d8 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fcee 	bl	80002dc <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f976 	bl	8000bf8 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002910:	6a38      	ldr	r0, [r7, #32]
 8002912:	f7fd fe41 	bl	8000598 <__aeabi_f2d>
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
 800291a:	4ba7      	ldr	r3, [pc, #668]	; (8002bb8 <interupt_DriveMotor+0x790>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eef1 7a67 	vneg.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe35 	bl	8000598 <__aeabi_f2d>
 800292e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ba8 <interupt_DriveMotor+0x780>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe88 	bl	8000648 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4690      	mov	r8, r2
 800293e:	4699      	mov	r9, r3
 8002940:	ed97 7a04 	vldr	s14, [r7, #16]
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4640      	mov	r0, r8
 800295a:	4649      	mov	r1, r9
 800295c:	f7fd fcbc 	bl	80002d8 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcb8 	bl	80002dc <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f940 	bl	8000bf8 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	edd7 0a08 	vldr	s1, [r7, #32]
 800298c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002990:	f7ff fcb8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f006 fa68 	bl	8008e70 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d004      	beq.n	80029b2 <interupt_DriveMotor+0x58a>
 80029a8:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <interupt_DriveMotor+0x794>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	f040 828d 	bne.w	8002ecc <interupt_DriveMotor+0xaa4>
		g_WallControl_mode=0;
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <interupt_DriveMotor+0x798>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <interupt_DriveMotor+0x79c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <interupt_DriveMotor+0x7a0>)
 80029c6:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fde3 	bl	8000598 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b7d      	ldr	r3, [pc, #500]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fddc 	bl	8000598 <__aeabi_f2d>
 80029e0:	a373      	add	r3, pc, #460	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe2f 	bl	8000648 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4690      	mov	r8, r2
 80029f0:	4699      	mov	r9, r3
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdce 	bl	8000598 <__aeabi_f2d>
 80029fc:	a36c      	add	r3, pc, #432	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fe21 	bl	8000648 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	a368      	add	r3, pc, #416	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fe18 	bl	8000648 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a28:	f7fd ff38 	bl	800089c <__aeabi_ddiv>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fc52 	bl	80002dc <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fc4c 	bl	80002dc <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fe f8d4 	bl	8000bf8 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a54:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd9c 	bl	8000598 <__aeabi_f2d>
 8002a60:	4604      	mov	r4, r0
 8002a62:	460d      	mov	r5, r1
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd95 	bl	8000598 <__aeabi_f2d>
 8002a6e:	a350      	add	r3, pc, #320	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fde8 	bl	8000648 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002a94:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a340      	add	r3, pc, #256	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd67 	bl	8000598 <__aeabi_f2d>
 8002aca:	a339      	add	r3, pc, #228	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	a334      	add	r3, pc, #208	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fdb1 	bl	8000648 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af6:	f7fd fed1 	bl	800089c <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fbeb 	bl	80002dc <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbe5 	bl	80002dc <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f86d 	bl	8000bf8 <__aeabi_d2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b22:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd35 	bl	8000598 <__aeabi_f2d>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd2e 	bl	8000598 <__aeabi_f2d>
 8002b3c:	a31c      	add	r3, pc, #112	; (adr r3, 8002bb0 <interupt_DriveMotor+0x788>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd81 	bl	8000648 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b62:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <interupt_DriveMotor+0x7ac>)
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	466c      	mov	r4, sp
 8002b6c:	f103 0210 	add.w	r2, r3, #16
 8002b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b74:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b7a:	f006 fdef 	bl	800975c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <interupt_DriveMotor+0x7a4>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <interupt_DriveMotor+0x7a8>)
 8002b86:	ed93 7a00 	vldr	s14, [r3]
 8002b8a:	f107 020c 	add.w	r2, r7, #12
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	eef0 0a47 	vmov.f32	s1, s14
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 ff73 	bl	8005a88 <EncoderGyro_PID>
 8002ba2:	e019      	b.n	8002bd8 <interupt_DriveMotor+0x7b0>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	d916872b 	.word	0xd916872b
 8002bac:	3feff7ce 	.word	0x3feff7ce
 8002bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bb4:	3f50624d 	.word	0x3f50624d
 8002bb8:	200004d8 	.word	0x200004d8
 8002bbc:	20000534 	.word	0x20000534
 8002bc0:	2000059c 	.word	0x2000059c
 8002bc4:	2000059e 	.word	0x2000059e
 8002bc8:	20000530 	.word	0x20000530
 8002bcc:	200004dc 	.word	0x200004dc
 8002bd0:	200004e8 	.word	0x200004e8
 8002bd4:	2000050c 	.word	0x2000050c
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <interupt_DriveMotor+0x948>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <interupt_DriveMotor+0x94c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <interupt_DriveMotor+0x950>)
 8002bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <interupt_DriveMotor+0x954>)
 8002bf8:	edd3 6a00 	vldr	s13, [r3]
 8002bfc:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <interupt_DriveMotor+0x958>)
 8002bfe:	ed93 6a01 	vldr	s12, [r3, #4]
 8002c02:	1d3a      	adds	r2, r7, #4
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	eef0 1a46 	vmov.f32	s3, s12
 8002c0c:	eeb0 1a66 	vmov.f32	s2, s13
 8002c10:	4611      	mov	r1, r2
 8002c12:	eef0 0a67 	vmov.f32	s1, s15
 8002c16:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fc74 	bl	8005508 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c20:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002c60:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	ee17 0a90 	vmov	r0, s15
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_f2d>
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc8b 	bl	8000598 <__aeabi_f2d>
 8002c82:	a339      	add	r3, pc, #228	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd ff68 	bl	8000b68 <__aeabi_dcmpgt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d074      	beq.n	8002d88 <interupt_DriveMotor+0x960>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca0:	f7fd fc7a 	bl	8000598 <__aeabi_f2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc73 	bl	8000598 <__aeabi_f2d>
 8002cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fcc6 	bl	8000648 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fc60 	bl	8000598 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4640      	mov	r0, r8
 8002cde:	4649      	mov	r1, r9
 8002ce0:	f7fd fafa 	bl	80002d8 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd faf6 	bl	80002dc <__adddf3>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd ff7e 	bl	8000bf8 <__aeabi_d2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d00:	6a38      	ldr	r0, [r7, #32]
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <interupt_DriveMotor+0x95c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc42 	bl	8000598 <__aeabi_f2d>
 8002d14:	a314      	add	r3, pc, #80	; (adr r3, 8002d68 <interupt_DriveMotor+0x940>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fc95 	bl	8000648 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	f7fd fc2f 	bl	8000598 <__aeabi_f2d>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f7fd fac9 	bl	80002d8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fd fac5 	bl	80002dc <__adddf3>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd ff4d 	bl	8000bf8 <__aeabi_d2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e0a1      	b.n	8002ea8 <interupt_DriveMotor+0xa80>
 8002d64:	f3af 8000 	nop.w
 8002d68:	d916872b 	.word	0xd916872b
 8002d6c:	3feff7ce 	.word	0x3feff7ce
 8002d70:	20000238 	.word	0x20000238
 8002d74:	2000023c 	.word	0x2000023c
 8002d78:	200004dc 	.word	0x200004dc
 8002d7c:	2000026c 	.word	0x2000026c
 8002d80:	200004e8 	.word	0x200004e8
 8002d84:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002d88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4bd5      	ldr	r3, [pc, #852]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	eef1 7a67 	vneg.f32	s15, s15
 8002daa:	ee17 3a90 	vmov	r3, s15
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbf2 	bl	8000598 <__aeabi_f2d>
 8002db4:	a3cc      	add	r3, pc, #816	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd feb1 	bl	8000b2c <__aeabi_dcmplt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d06b      	beq.n	8002ea8 <interupt_DriveMotor+0xa80>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f7fd fbe1 	bl	8000598 <__aeabi_f2d>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4bc7      	ldr	r3, [pc, #796]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eef1 7a67 	vneg.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fbd5 	bl	8000598 <__aeabi_f2d>
 8002dee:	a3be      	add	r3, pc, #760	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fc28 	bl	8000648 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	4699      	mov	r9, r3
 8002e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbc2 	bl	8000598 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	f7fd fa5c 	bl	80002d8 <__aeabi_dsub>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fa58 	bl	80002dc <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fee0 	bl	8000bf8 <__aeabi_d2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002e3c:	6a38      	ldr	r0, [r7, #32]
 8002e3e:	f7fd fbab 	bl	8000598 <__aeabi_f2d>
 8002e42:	4604      	mov	r4, r0
 8002e44:	460d      	mov	r5, r1
 8002e46:	4bac      	ldr	r3, [pc, #688]	; (80030f8 <interupt_DriveMotor+0xcd0>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eef1 7a67 	vneg.f32	s15, s15
 8002e50:	ee17 3a90 	vmov	r3, s15
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb9f 	bl	8000598 <__aeabi_f2d>
 8002e5a:	a3a3      	add	r3, pc, #652	; (adr r3, 80030e8 <interupt_DriveMotor+0xcc0>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fbf2 	bl	8000648 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4690      	mov	r8, r2
 8002e6a:	4699      	mov	r9, r3
 8002e6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	ee17 0a90 	vmov	r0, s15
 8002e7c:	f7fd fb8c 	bl	8000598 <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4640      	mov	r0, r8
 8002e86:	4649      	mov	r1, r9
 8002e88:	f7fd fa26 	bl	80002d8 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fa22 	bl	80002dc <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd feaa 	bl	8000bf8 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ea8:	f107 0214 	add.w	r2, r7, #20
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002eb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ebc:	f7ff fa22 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 ffd2 	bl	8008e70 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002ecc:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <interupt_DriveMotor+0xcd4>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	f040 8135 	bne.w	8003140 <interupt_DriveMotor+0xd18>
		g_WallControl_mode=0;
 8002ed6:	4b8a      	ldr	r3, [pc, #552]	; (8003100 <interupt_DriveMotor+0xcd8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002edc:	4b89      	ldr	r3, [pc, #548]	; (8003104 <interupt_DriveMotor+0xcdc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a87      	ldr	r2, [pc, #540]	; (8003108 <interupt_DriveMotor+0xce0>)
 8002eea:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <interupt_DriveMotor+0xce4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb51 	bl	8000598 <__aeabi_f2d>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	4b84      	ldr	r3, [pc, #528]	; (800310c <interupt_DriveMotor+0xce4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb4a 	bl	8000598 <__aeabi_f2d>
 8002f04:	a37a      	add	r3, pc, #488	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb9d 	bl	8000648 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb3c 	bl	8000598 <__aeabi_f2d>
 8002f20:	a373      	add	r3, pc, #460	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd fb8f 	bl	8000648 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	a36f      	add	r3, pc, #444	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb86 	bl	8000648 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4c:	f7fd fca6 	bl	800089c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4640      	mov	r0, r8
 8002f56:	4649      	mov	r1, r9
 8002f58:	f7fd f9c0 	bl	80002dc <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f9ba 	bl	80002dc <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe42 	bl	8000bf8 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a65      	ldr	r2, [pc, #404]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f78:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fb0a 	bl	8000598 <__aeabi_f2d>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <interupt_DriveMotor+0xce4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fb03 	bl	8000598 <__aeabi_f2d>
 8002f92:	a357      	add	r3, pc, #348	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fb56 	bl	8000648 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f99a 	bl	80002dc <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fe22 	bl	8000bf8 <__aeabi_d2f>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <interupt_DriveMotor+0xce4>)
 8002fb8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002fba:	4b55      	ldr	r3, [pc, #340]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd faea 	bl	8000598 <__aeabi_f2d>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	460d      	mov	r5, r1
 8002fc8:	4b51      	ldr	r3, [pc, #324]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fae3 	bl	8000598 <__aeabi_f2d>
 8002fd2:	a347      	add	r3, pc, #284	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb36 	bl	8000648 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4690      	mov	r8, r2
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <interupt_DriveMotor+0xce8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fad5 	bl	8000598 <__aeabi_f2d>
 8002fee:	a340      	add	r3, pc, #256	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb28 	bl	8000648 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	a33b      	add	r3, pc, #236	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fb1f 	bl	8000648 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800301a:	f7fd fc3f 	bl	800089c <__aeabi_ddiv>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	f7fd f959 	bl	80002dc <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd f953 	bl	80002dc <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fddb 	bl	8000bf8 <__aeabi_d2f>
 8003042:	4603      	mov	r3, r0
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003046:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <interupt_DriveMotor+0xce8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa9c 	bl	8000598 <__aeabi_f2d>
 8003060:	a323      	add	r3, pc, #140	; (adr r3, 80030f0 <interupt_DriveMotor+0xcc8>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd faef 	bl	8000648 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f933 	bl	80002dc <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdbb 	bl	8000bf8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003086:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <interupt_DriveMotor+0xce4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <interupt_DriveMotor+0xce8>)
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	eef0 0a47 	vmov.f32	s1, s14
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fcee 	bl	8005a88 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80030d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e4:	e016      	b.n	8003114 <interupt_DriveMotor+0xcec>
 80030e6:	bf00      	nop
 80030e8:	d916872b 	.word	0xd916872b
 80030ec:	3feff7ce 	.word	0x3feff7ce
 80030f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030f4:	3f50624d 	.word	0x3f50624d
 80030f8:	200004d8 	.word	0x200004d8
 80030fc:	20000534 	.word	0x20000534
 8003100:	2000059c 	.word	0x2000059c
 8003104:	2000059e 	.word	0x2000059e
 8003108:	20000530 	.word	0x20000530
 800310c:	200004dc 	.word	0x200004dc
 8003110:	200004e8 	.word	0x200004e8
 8003114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003118:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800311c:	f107 0214 	add.w	r2, r7, #20
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	edd7 0a08 	vldr	s1, [r7, #32]
 800312c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003130:	f7ff f8e8 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f005 fe98 	bl	8008e70 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8003140:	4bd3      	ldr	r3, [pc, #844]	; (8003490 <interupt_DriveMotor+0x1068>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d137      	bne.n	80031b8 <interupt_DriveMotor+0xd90>
		g_WallControl_mode=0;
 8003148:	4bd2      	ldr	r3, [pc, #840]	; (8003494 <interupt_DriveMotor+0x106c>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 800314e:	4bd2      	ldr	r3, [pc, #840]	; (8003498 <interupt_DriveMotor+0x1070>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003154:	ed97 7a04 	vldr	s14, [r7, #16]
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003160:	edd7 7a02 	vldr	s15, [r7, #8]
 8003164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003168:	edd7 7a01 	vldr	s15, [r7, #4]
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003174:	ed97 7a04 	vldr	s14, [r7, #16]
 8003178:	edd7 7a03 	vldr	s15, [r7, #12]
 800317c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003180:	edd7 7a02 	vldr	s15, [r7, #8]
 8003184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003188:	edd7 7a01 	vldr	s15, [r7, #4]
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003194:	f107 0214 	add.w	r2, r7, #20
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	edd7 0a08 	vldr	s1, [r7, #32]
 80031a4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80031a8:	f7ff f8ac 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f005 fe5c 	bl	8008e70 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 80031b8:	4bb5      	ldr	r3, [pc, #724]	; (8003490 <interupt_DriveMotor+0x1068>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	f040 8105 	bne.w	80033cc <interupt_DriveMotor+0xfa4>
		g_WallControl_mode=0;
 80031c2:	4bb4      	ldr	r3, [pc, #720]	; (8003494 <interupt_DriveMotor+0x106c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80031c8:	4bb3      	ldr	r3, [pc, #716]	; (8003498 <interupt_DriveMotor+0x1070>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80031ce:	4bb3      	ldr	r3, [pc, #716]	; (800349c <interupt_DriveMotor+0x1074>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9e0 	bl	8000598 <__aeabi_f2d>
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	4baf      	ldr	r3, [pc, #700]	; (800349c <interupt_DriveMotor+0x1074>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	a3a8      	add	r3, pc, #672	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fa2c 	bl	8000648 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4690      	mov	r8, r2
 80031f6:	4699      	mov	r9, r3
 80031f8:	4ba8      	ldr	r3, [pc, #672]	; (800349c <interupt_DriveMotor+0x1074>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9cb 	bl	8000598 <__aeabi_f2d>
 8003202:	a3a1      	add	r3, pc, #644	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd fa1e 	bl	8000648 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	a39c      	add	r3, pc, #624	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa15 	bl	8000648 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	f7fd fb35 	bl	800089c <__aeabi_ddiv>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4640      	mov	r0, r8
 8003238:	4649      	mov	r1, r9
 800323a:	f7fd f84f 	bl	80002dc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4620      	mov	r0, r4
 8003244:	4629      	mov	r1, r5
 8003246:	f7fd f849 	bl	80002dc <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f7fd fcd1 	bl	8000bf8 <__aeabi_d2f>
 8003256:	4603      	mov	r3, r0
 8003258:	4a90      	ldr	r2, [pc, #576]	; (800349c <interupt_DriveMotor+0x1074>)
 800325a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <interupt_DriveMotor+0x1074>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f999 	bl	8000598 <__aeabi_f2d>
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	4b8c      	ldr	r3, [pc, #560]	; (800349c <interupt_DriveMotor+0x1074>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f992 	bl	8000598 <__aeabi_f2d>
 8003274:	a384      	add	r3, pc, #528	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f9e5 	bl	8000648 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f7fd f829 	bl	80002dc <__adddf3>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fcb1 	bl	8000bf8 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	4a80      	ldr	r2, [pc, #512]	; (800349c <interupt_DriveMotor+0x1074>)
 800329a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <interupt_DriveMotor+0x1078>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f979 	bl	8000598 <__aeabi_f2d>
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f972 	bl	8000598 <__aeabi_f2d>
 80032b4:	a374      	add	r3, pc, #464	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f9c5 	bl	8000648 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd f809 	bl	80002dc <__adddf3>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc91 	bl	8000bf8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032da:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 80032dc:	4b71      	ldr	r3, [pc, #452]	; (80034a4 <interupt_DriveMotor+0x107c>)
 80032de:	edd3 6a00 	vldr	s13, [r3]
 80032e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80032e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ea:	486d      	ldr	r0, [pc, #436]	; (80034a0 <interupt_DriveMotor+0x1078>)
 80032ec:	eeb0 0a66 	vmov.f32	s0, s13
 80032f0:	eef0 0a47 	vmov.f32	s1, s14
 80032f4:	eeb0 1a67 	vmov.f32	s2, s15
 80032f8:	f007 fd3a 	bl	800ad70 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <interupt_DriveMotor+0x1074>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	f107 020c 	add.w	r2, r7, #12
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	eef0 0a47 	vmov.f32	s1, s14
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fbb4 	bl	8005a88 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <interupt_DriveMotor+0x1080>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <interupt_DriveMotor+0x1084>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <interupt_DriveMotor+0x1074>)
 800333a:	edd3 7a01 	vldr	s15, [r3, #4]
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <interupt_DriveMotor+0x1088>)
 8003340:	edd3 6a00 	vldr	s13, [r3]
 8003344:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <interupt_DriveMotor+0x1078>)
 8003346:	ed93 6a01 	vldr	s12, [r3, #4]
 800334a:	1d3a      	adds	r2, r7, #4
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	eef0 1a46 	vmov.f32	s3, s12
 8003354:	eeb0 1a66 	vmov.f32	s2, s13
 8003358:	4611      	mov	r1, r2
 800335a:	eef0 0a67 	vmov.f32	s1, s15
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	4618      	mov	r0, r3
 8003364:	f002 f8d0 	bl	8005508 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003368:	ed97 7a04 	vldr	s14, [r7, #16]
 800336c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003374:	edd7 7a02 	vldr	s15, [r7, #8]
 8003378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800337c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003388:	ed97 7a04 	vldr	s14, [r7, #16]
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	edd7 7a02 	vldr	s15, [r7, #8]
 8003398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339c:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80033a8:	f107 0214 	add.w	r2, r7, #20
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	edd7 0a08 	vldr	s1, [r7, #32]
 80033b8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033bc:	f7fe ffa2 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fd52 	bl	8008e70 <pl_DriveMotor_duty>

	}if (modeacc == 7) {
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <interupt_DriveMotor+0x1068>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	f040 829d 	bne.w	8003910 <interupt_DriveMotor+0x14e8>
		g_wallCut_mode=1;
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <interupt_DriveMotor+0x1070>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <interupt_DriveMotor+0x108c>)
 80033e4:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <interupt_DriveMotor+0x1074>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8d4 	bl	8000598 <__aeabi_f2d>
 80033f0:	4604      	mov	r4, r0
 80033f2:	460d      	mov	r5, r1
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <interupt_DriveMotor+0x1074>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f8cd 	bl	8000598 <__aeabi_f2d>
 80033fe:	a322      	add	r3, pc, #136	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fd f920 	bl	8000648 <__aeabi_dmul>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <interupt_DriveMotor+0x1074>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f8bf 	bl	8000598 <__aeabi_f2d>
 800341a:	a31b      	add	r3, pc, #108	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f912 	bl	8000648 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	a316      	add	r3, pc, #88	; (adr r3, 8003488 <interupt_DriveMotor+0x1060>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd f909 	bl	8000648 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003446:	f7fd fa29 	bl	800089c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fc ff43 	bl	80002dc <__adddf3>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fc ff3d 	bl	80002dc <__adddf3>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fbc5 	bl	8000bf8 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <interupt_DriveMotor+0x1074>)
 8003472:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <interupt_DriveMotor+0x1074>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd f88d 	bl	8000598 <__aeabi_f2d>
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	e019      	b.n	80034b8 <interupt_DriveMotor+0x1090>
 8003484:	f3af 8000 	nop.w
 8003488:	d2f1a9fc 	.word	0xd2f1a9fc
 800348c:	3f50624d 	.word	0x3f50624d
 8003490:	20000534 	.word	0x20000534
 8003494:	2000059c 	.word	0x2000059c
 8003498:	2000059e 	.word	0x2000059e
 800349c:	200004dc 	.word	0x200004dc
 80034a0:	200004e8 	.word	0x200004e8
 80034a4:	20000524 	.word	0x20000524
 80034a8:	20000238 	.word	0x20000238
 80034ac:	2000023c 	.word	0x2000023c
 80034b0:	2000026c 	.word	0x2000026c
 80034b4:	20000530 	.word	0x20000530
 80034b8:	4bbd      	ldr	r3, [pc, #756]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	a3b7      	add	r3, pc, #732	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f7fd f8be 	bl	8000648 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fc ff02 	bl	80002dc <__adddf3>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4ab2      	ldr	r2, [pc, #712]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80034e8:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80034ea:	4bb2      	ldr	r3, [pc, #712]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f852 	bl	8000598 <__aeabi_f2d>
 80034f4:	4604      	mov	r4, r0
 80034f6:	460d      	mov	r5, r1
 80034f8:	4bae      	ldr	r3, [pc, #696]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f84b 	bl	8000598 <__aeabi_f2d>
 8003502:	a3a7      	add	r3, pc, #668	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f7fd f89e 	bl	8000648 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4690      	mov	r8, r2
 8003512:	4699      	mov	r9, r3
 8003514:	4ba7      	ldr	r3, [pc, #668]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f83d 	bl	8000598 <__aeabi_f2d>
 800351e:	a3a0      	add	r3, pc, #640	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f890 	bl	8000648 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	a39b      	add	r3, pc, #620	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f887 	bl	8000648 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800354a:	f7fd f9a7 	bl	800089c <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f7fc fec1 	bl	80002dc <__adddf3>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fc febb 	bl	80002dc <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fb43 	bl	8000bf8 <__aeabi_d2f>
 8003572:	4603      	mov	r3, r0
 8003574:	4a8f      	ldr	r2, [pc, #572]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003576:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <interupt_DriveMotor+0x138c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd f80b 	bl	8000598 <__aeabi_f2d>
 8003582:	4604      	mov	r4, r0
 8003584:	460d      	mov	r5, r1
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <interupt_DriveMotor+0x138c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f804 	bl	8000598 <__aeabi_f2d>
 8003590:	a383      	add	r3, pc, #524	; (adr r3, 80037a0 <interupt_DriveMotor+0x1378>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f857 	bl	8000648 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fc fe9b 	bl	80002dc <__adddf3>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fb23 	bl	8000bf8 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a7f      	ldr	r2, [pc, #508]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80035b6:	6013      	str	r3, [r2, #0]
		cal_table_dis(Trapezoid_straight,&straight);
 80035b8:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <interupt_DriveMotor+0x1390>)
 80035ba:	4a7d      	ldr	r2, [pc, #500]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80035bc:	9202      	str	r2, [sp, #8]
 80035be:	466c      	mov	r4, sp
 80035c0:	f103 0210 	add.w	r2, r3, #16
 80035c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80035cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ce:	f006 fc1d 	bl	8009e0c <cal_table_dis>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <interupt_DriveMotor+0x1388>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <interupt_DriveMotor+0x138c>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	f107 020c 	add.w	r2, r7, #12
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	eef0 0a47 	vmov.f32	s1, s14
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fa49 	bl	8005a88 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80035f6:	4b71      	ldr	r3, [pc, #452]	; (80037bc <interupt_DriveMotor+0x1394>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <interupt_DriveMotor+0x1398>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003606:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800360a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800360e:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <interupt_DriveMotor+0x1388>)
 8003610:	edd3 7a01 	vldr	s15, [r3, #4]
 8003614:	4b6b      	ldr	r3, [pc, #428]	; (80037c4 <interupt_DriveMotor+0x139c>)
 8003616:	edd3 6a00 	vldr	s13, [r3]
 800361a:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <interupt_DriveMotor+0x138c>)
 800361c:	ed93 6a01 	vldr	s12, [r3, #4]
 8003620:	1d3a      	adds	r2, r7, #4
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	eef0 1a46 	vmov.f32	s3, s12
 800362a:	eeb0 1a66 	vmov.f32	s2, s13
 800362e:	4611      	mov	r1, r2
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	eeb0 0a47 	vmov.f32	s0, s14
 8003638:	4618      	mov	r0, r3
 800363a:	f001 ff65 	bl	8005508 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800363e:	f002 fc4f 	bl	8005ee0 <calWallConrol>
 8003642:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 8003646:	ed97 7a04 	vldr	s14, [r7, #16]
 800364a:	edd7 7a03 	vldr	s15, [r7, #12]
 800364e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003652:	edd7 7a07 	vldr	s15, [r7, #28]
 8003656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365a:	edd7 7a02 	vldr	s15, [r7, #8]
 800365e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003662:	edd7 7a01 	vldr	s15, [r7, #4]
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 800366e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003672:	edd7 7a03 	vldr	s15, [r7, #12]
 8003676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367a:	edd7 7a07 	vldr	s15, [r7, #28]
 800367e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003682:	edd7 7a02 	vldr	s15, [r7, #8]
 8003686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800368a:	edd7 7a01 	vldr	s15, [r7, #4]
 800368e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003692:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003696:	ed97 7a04 	vldr	s14, [r7, #16]
 800369a:	edd7 7a02 	vldr	s15, [r7, #8]
 800369e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a2:	ee17 0a90 	vmov	r0, s15
 80036a6:	f7fc ff77 	bl	8000598 <__aeabi_f2d>
 80036aa:	4604      	mov	r4, r0
 80036ac:	460d      	mov	r5, r1
 80036ae:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff70 	bl	8000598 <__aeabi_f2d>
 80036b8:	a33b      	add	r3, pc, #236	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc ffc3 	bl	8000648 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fd fa4d 	bl	8000b68 <__aeabi_dcmpgt>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07b      	beq.n	80037cc <interupt_DriveMotor+0x13a4>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80036d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d6:	f7fc ff5f 	bl	8000598 <__aeabi_f2d>
 80036da:	4604      	mov	r4, r0
 80036dc:	460d      	mov	r5, r1
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc ff58 	bl	8000598 <__aeabi_f2d>
 80036e8:	a32f      	add	r3, pc, #188	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc ffab 	bl	8000648 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80036fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	ee17 0a90 	vmov	r0, s15
 800370a:	f7fc ff45 	bl	8000598 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fddf 	bl	80002d8 <__aeabi_dsub>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fc fddb 	bl	80002dc <__adddf3>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7fd fa63 	bl	8000bf8 <__aeabi_d2f>
 8003732:	4603      	mov	r3, r0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003736:	6a38      	ldr	r0, [r7, #32]
 8003738:	f7fc ff2e 	bl	8000598 <__aeabi_f2d>
 800373c:	4604      	mov	r4, r0
 800373e:	460d      	mov	r5, r1
 8003740:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <interupt_DriveMotor+0x13a0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc ff27 	bl	8000598 <__aeabi_f2d>
 800374a:	a317      	add	r3, pc, #92	; (adr r3, 80037a8 <interupt_DriveMotor+0x1380>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc ff7a 	bl	8000648 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4690      	mov	r8, r2
 800375a:	4699      	mov	r9, r3
 800375c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003760:	edd7 7a02 	vldr	s15, [r7, #8]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc ff14 	bl	8000598 <__aeabi_f2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4640      	mov	r0, r8
 8003776:	4649      	mov	r1, r9
 8003778:	f7fc fdae 	bl	80002d8 <__aeabi_dsub>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc fdaa 	bl	80002dc <__adddf3>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd fa32 	bl	8000bf8 <__aeabi_d2f>
 8003794:	4603      	mov	r3, r0
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	e0a8      	b.n	80038ec <interupt_DriveMotor+0x14c4>
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
 80037a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037a4:	3f50624d 	.word	0x3f50624d
 80037a8:	d916872b 	.word	0xd916872b
 80037ac:	3feff7ce 	.word	0x3feff7ce
 80037b0:	200004dc 	.word	0x200004dc
 80037b4:	200004e8 	.word	0x200004e8
 80037b8:	200004f4 	.word	0x200004f4
 80037bc:	20000238 	.word	0x20000238
 80037c0:	2000023c 	.word	0x2000023c
 80037c4:	2000026c 	.word	0x2000026c
 80037c8:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80037cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80037d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d8:	ee17 0a90 	vmov	r0, s15
 80037dc:	f7fc fedc 	bl	8000598 <__aeabi_f2d>
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	4bd2      	ldr	r3, [pc, #840]	; (8003b30 <interupt_DriveMotor+0x1708>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eef1 7a67 	vneg.f32	s15, s15
 80037ee:	ee17 3a90 	vmov	r3, s15
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fed0 	bl	8000598 <__aeabi_f2d>
 80037f8:	a3c9      	add	r3, pc, #804	; (adr r3, 8003b20 <interupt_DriveMotor+0x16f8>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fc ff23 	bl	8000648 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fd f98f 	bl	8000b2c <__aeabi_dcmplt>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d06b      	beq.n	80038ec <interupt_DriveMotor+0x14c4>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003816:	f7fc febf 	bl	8000598 <__aeabi_f2d>
 800381a:	4604      	mov	r4, r0
 800381c:	460d      	mov	r5, r1
 800381e:	4bc4      	ldr	r3, [pc, #784]	; (8003b30 <interupt_DriveMotor+0x1708>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	eef1 7a67 	vneg.f32	s15, s15
 8003828:	ee17 3a90 	vmov	r3, s15
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc feb3 	bl	8000598 <__aeabi_f2d>
 8003832:	a3bb      	add	r3, pc, #748	; (adr r3, 8003b20 <interupt_DriveMotor+0x16f8>)
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f7fc ff06 	bl	8000648 <__aeabi_dmul>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4690      	mov	r8, r2
 8003842:	4699      	mov	r9, r3
 8003844:	ed97 7a04 	vldr	s14, [r7, #16]
 8003848:	edd7 7a02 	vldr	s15, [r7, #8]
 800384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003850:	ee17 0a90 	vmov	r0, s15
 8003854:	f7fc fea0 	bl	8000598 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4640      	mov	r0, r8
 800385e:	4649      	mov	r1, r9
 8003860:	f7fc fd3a 	bl	80002d8 <__aeabi_dsub>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fd36 	bl	80002dc <__adddf3>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	f7fd f9be 	bl	8000bf8 <__aeabi_d2f>
 800387c:	4603      	mov	r3, r0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003880:	6a38      	ldr	r0, [r7, #32]
 8003882:	f7fc fe89 	bl	8000598 <__aeabi_f2d>
 8003886:	4604      	mov	r4, r0
 8003888:	460d      	mov	r5, r1
 800388a:	4ba9      	ldr	r3, [pc, #676]	; (8003b30 <interupt_DriveMotor+0x1708>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	eef1 7a67 	vneg.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fe7d 	bl	8000598 <__aeabi_f2d>
 800389e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003b20 <interupt_DriveMotor+0x16f8>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fed0 	bl	8000648 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4690      	mov	r8, r2
 80038ae:	4699      	mov	r9, r3
 80038b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80038b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	ee17 0a90 	vmov	r0, s15
 80038c0:	f7fc fe6a 	bl	8000598 <__aeabi_f2d>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4640      	mov	r0, r8
 80038ca:	4649      	mov	r1, r9
 80038cc:	f7fc fd04 	bl	80002d8 <__aeabi_dsub>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fd00 	bl	80002dc <__adddf3>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f988 	bl	8000bf8 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80038ec:	f107 0214 	add.w	r2, r7, #20
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	edd7 0a08 	vldr	s1, [r7, #32]
 80038fc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003900:	f7fe fd00 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f005 fab0 	bl	8008e70 <pl_DriveMotor_duty>
	}if (modeacc == 8) {
 8003910:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <interupt_DriveMotor+0x170c>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	f040 8291 	bne.w	8003e3c <interupt_DriveMotor+0x1a14>
		g_wallCut_mode=1;
 800391a:	4b87      	ldr	r3, [pc, #540]	; (8003b38 <interupt_DriveMotor+0x1710>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8003920:	4b86      	ldr	r3, [pc, #536]	; (8003b3c <interupt_DriveMotor+0x1714>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a85      	ldr	r2, [pc, #532]	; (8003b3c <interupt_DriveMotor+0x1714>)
 8003928:	6013      	str	r3, [r2, #0]

		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <interupt_DriveMotor+0x1718>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe32 	bl	8000598 <__aeabi_f2d>
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4b81      	ldr	r3, [pc, #516]	; (8003b40 <interupt_DriveMotor+0x1718>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fe2b 	bl	8000598 <__aeabi_f2d>
 8003942:	a379      	add	r3, pc, #484	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fe7e 	bl	8000648 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4690      	mov	r8, r2
 8003952:	4699      	mov	r9, r3
 8003954:	4b7a      	ldr	r3, [pc, #488]	; (8003b40 <interupt_DriveMotor+0x1718>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fe1d 	bl	8000598 <__aeabi_f2d>
 800395e:	a372      	add	r3, pc, #456	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fc fe70 	bl	8000648 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	a36d      	add	r3, pc, #436	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fe67 	bl	8000648 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800398a:	f7fc ff87 	bl	800089c <__aeabi_ddiv>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	f7fc fca1 	bl	80002dc <__adddf3>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4620      	mov	r0, r4
 80039a0:	4629      	mov	r1, r5
 80039a2:	f7fc fc9b 	bl	80002dc <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fd f923 	bl	8000bf8 <__aeabi_d2f>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a62      	ldr	r2, [pc, #392]	; (8003b40 <interupt_DriveMotor+0x1718>)
 80039b6:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <interupt_DriveMotor+0x1718>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fdeb 	bl	8000598 <__aeabi_f2d>
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
 80039c6:	4b5e      	ldr	r3, [pc, #376]	; (8003b40 <interupt_DriveMotor+0x1718>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fde4 	bl	8000598 <__aeabi_f2d>
 80039d0:	a355      	add	r3, pc, #340	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fe37 	bl	8000648 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7fc fc7b 	bl	80002dc <__adddf3>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f903 	bl	8000bf8 <__aeabi_d2f>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <interupt_DriveMotor+0x1718>)
 80039f6:	6013      	str	r3, [r2, #0]

		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80039f8:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <interupt_DriveMotor+0x171c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fdcb 	bl	8000598 <__aeabi_f2d>
 8003a02:	4604      	mov	r4, r0
 8003a04:	460d      	mov	r5, r1
 8003a06:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fc fdc4 	bl	8000598 <__aeabi_f2d>
 8003a10:	a345      	add	r3, pc, #276	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f7fc fe17 	bl	8000648 <__aeabi_dmul>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4690      	mov	r8, r2
 8003a20:	4699      	mov	r9, r3
 8003a22:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fdb6 	bl	8000598 <__aeabi_f2d>
 8003a2c:	a33e      	add	r3, pc, #248	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f7fc fe09 	bl	8000648 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	a33a      	add	r3, pc, #232	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fe00 	bl	8000648 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a58:	f7fc ff20 	bl	800089c <__aeabi_ddiv>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4640      	mov	r0, r8
 8003a62:	4649      	mov	r1, r9
 8003a64:	f7fc fc3a 	bl	80002dc <__adddf3>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	f7fc fc34 	bl	80002dc <__adddf3>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f8bc 	bl	8000bf8 <__aeabi_d2f>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003a84:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd84 	bl	8000598 <__aeabi_f2d>
 8003a90:	4604      	mov	r4, r0
 8003a92:	460d      	mov	r5, r1
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd7d 	bl	8000598 <__aeabi_f2d>
 8003a9e:	a322      	add	r3, pc, #136	; (adr r3, 8003b28 <interupt_DriveMotor+0x1700>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fdd0 	bl	8000648 <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fc14 	bl	80002dc <__adddf3>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fd f89c 	bl	8000bf8 <__aeabi_d2f>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003ac4:	6013      	str	r3, [r2, #0]
		cal_table_max(Trapezoid_straight,&straight);
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <interupt_DriveMotor+0x1720>)
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <interupt_DriveMotor+0x1718>)
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	466c      	mov	r4, sp
 8003ace:	f103 0210 	add.w	r2, r3, #16
 8003ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ad6:	e884 0003 	stmia.w	r4, {r0, r1}
 8003ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003adc:	f006 fd18 	bl	800a510 <cal_table_max>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <interupt_DriveMotor+0x1718>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <interupt_DriveMotor+0x171c>)
 8003ae8:	ed93 7a00 	vldr	s14, [r3]
 8003aec:	f107 020c 	add.w	r2, r7, #12
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	eef0 0a47 	vmov.f32	s1, s14
 8003af8:	eeb0 0a67 	vmov.f32	s0, s15
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 ffc2 	bl	8005a88 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <interupt_DriveMotor+0x1724>)
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <interupt_DriveMotor+0x1728>)
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b1c:	e01a      	b.n	8003b54 <interupt_DriveMotor+0x172c>
 8003b1e:	bf00      	nop
 8003b20:	d916872b 	.word	0xd916872b
 8003b24:	3feff7ce 	.word	0x3feff7ce
 8003b28:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b2c:	3f50624d 	.word	0x3f50624d
 8003b30:	200004d8 	.word	0x200004d8
 8003b34:	20000534 	.word	0x20000534
 8003b38:	2000059e 	.word	0x2000059e
 8003b3c:	20000530 	.word	0x20000530
 8003b40:	200004dc 	.word	0x200004dc
 8003b44:	200004e8 	.word	0x200004e8
 8003b48:	200004f4 	.word	0x200004f4
 8003b4c:	20000238 	.word	0x20000238
 8003b50:	2000023c 	.word	0x2000023c
 8003b54:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <interupt_DriveMotor+0x18c0>)
 8003b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b5a:	4b64      	ldr	r3, [pc, #400]	; (8003cec <interupt_DriveMotor+0x18c4>)
 8003b5c:	edd3 6a00 	vldr	s13, [r3]
 8003b60:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <interupt_DriveMotor+0x18c8>)
 8003b62:	ed93 6a01 	vldr	s12, [r3, #4]
 8003b66:	1d3a      	adds	r2, r7, #4
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	eef0 1a46 	vmov.f32	s3, s12
 8003b70:	eeb0 1a66 	vmov.f32	s2, s13
 8003b74:	4611      	mov	r1, r2
 8003b76:	eef0 0a67 	vmov.f32	s1, s15
 8003b7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fcc2 	bl	8005508 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8003b84:	f002 f9ac 	bl	8005ee0 <calWallConrol>
 8003b88:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 8003b8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8003bb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003bdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be8:	ee17 0a90 	vmov	r0, s15
 8003bec:	f7fc fcd4 	bl	8000598 <__aeabi_f2d>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	460d      	mov	r5, r1
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <interupt_DriveMotor+0x18cc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fccd 	bl	8000598 <__aeabi_f2d>
 8003bfe:	a338      	add	r3, pc, #224	; (adr r3, 8003ce0 <interupt_DriveMotor+0x18b8>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f7fc fd20 	bl	8000648 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc ffaa 	bl	8000b68 <__aeabi_dcmpgt>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06e      	beq.n	8003cf8 <interupt_DriveMotor+0x18d0>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c1c:	f7fc fcbc 	bl	8000598 <__aeabi_f2d>
 8003c20:	4604      	mov	r4, r0
 8003c22:	460d      	mov	r5, r1
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <interupt_DriveMotor+0x18cc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc fcb5 	bl	8000598 <__aeabi_f2d>
 8003c2e:	a32c      	add	r3, pc, #176	; (adr r3, 8003ce0 <interupt_DriveMotor+0x18b8>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fd08 	bl	8000648 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4690      	mov	r8, r2
 8003c3e:	4699      	mov	r9, r3
 8003c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4c:	ee17 0a90 	vmov	r0, s15
 8003c50:	f7fc fca2 	bl	8000598 <__aeabi_f2d>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc fb3c 	bl	80002d8 <__aeabi_dsub>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fb38 	bl	80002dc <__adddf3>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fc ffc0 	bl	8000bf8 <__aeabi_d2f>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003c7c:	6a38      	ldr	r0, [r7, #32]
 8003c7e:	f7fc fc8b 	bl	8000598 <__aeabi_f2d>
 8003c82:	4604      	mov	r4, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <interupt_DriveMotor+0x18cc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fc84 	bl	8000598 <__aeabi_f2d>
 8003c90:	a313      	add	r3, pc, #76	; (adr r3, 8003ce0 <interupt_DriveMotor+0x18b8>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc fcd7 	bl	8000648 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cae:	ee17 0a90 	vmov	r0, s15
 8003cb2:	f7fc fc71 	bl	8000598 <__aeabi_f2d>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4640      	mov	r0, r8
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	f7fc fb0b 	bl	80002d8 <__aeabi_dsub>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7fc fb07 	bl	80002dc <__adddf3>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fc ff8f 	bl	8000bf8 <__aeabi_d2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	e09b      	b.n	8003e18 <interupt_DriveMotor+0x19f0>
 8003ce0:	d916872b 	.word	0xd916872b
 8003ce4:	3feff7ce 	.word	0x3feff7ce
 8003ce8:	200004dc 	.word	0x200004dc
 8003cec:	2000026c 	.word	0x2000026c
 8003cf0:	200004e8 	.word	0x200004e8
 8003cf4:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d04:	ee17 0a90 	vmov	r0, s15
 8003d08:	f7fc fc46 	bl	8000598 <__aeabi_f2d>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	460d      	mov	r5, r1
 8003d10:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <interupt_DriveMotor+0x1ad8>)
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	eef1 7a67 	vneg.f32	s15, s15
 8003d1a:	ee17 3a90 	vmov	r3, s15
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fc3a 	bl	8000598 <__aeabi_f2d>
 8003d24:	a374      	add	r3, pc, #464	; (adr r3, 8003ef8 <interupt_DriveMotor+0x1ad0>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc8d 	bl	8000648 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fef9 	bl	8000b2c <__aeabi_dcmplt>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d06b      	beq.n	8003e18 <interupt_DriveMotor+0x19f0>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d42:	f7fc fc29 	bl	8000598 <__aeabi_f2d>
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <interupt_DriveMotor+0x1ad8>)
 8003d4c:	edd3 7a00 	vldr	s15, [r3]
 8003d50:	eef1 7a67 	vneg.f32	s15, s15
 8003d54:	ee17 3a90 	vmov	r3, s15
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fc1d 	bl	8000598 <__aeabi_f2d>
 8003d5e:	a366      	add	r3, pc, #408	; (adr r3, 8003ef8 <interupt_DriveMotor+0x1ad0>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fc70 	bl	8000648 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4690      	mov	r8, r2
 8003d6e:	4699      	mov	r9, r3
 8003d70:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7c:	ee17 0a90 	vmov	r0, s15
 8003d80:	f7fc fc0a 	bl	8000598 <__aeabi_f2d>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4640      	mov	r0, r8
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	f7fc faa4 	bl	80002d8 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7fc faa0 	bl	80002dc <__adddf3>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f7fc ff28 	bl	8000bf8 <__aeabi_d2f>
 8003da8:	4603      	mov	r3, r0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003dac:	6a38      	ldr	r0, [r7, #32]
 8003dae:	f7fc fbf3 	bl	8000598 <__aeabi_f2d>
 8003db2:	4604      	mov	r4, r0
 8003db4:	460d      	mov	r5, r1
 8003db6:	4b52      	ldr	r3, [pc, #328]	; (8003f00 <interupt_DriveMotor+0x1ad8>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	eef1 7a67 	vneg.f32	s15, s15
 8003dc0:	ee17 3a90 	vmov	r3, s15
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fbe7 	bl	8000598 <__aeabi_f2d>
 8003dca:	a34b      	add	r3, pc, #300	; (adr r3, 8003ef8 <interupt_DriveMotor+0x1ad0>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fc3a 	bl	8000648 <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4690      	mov	r8, r2
 8003dda:	4699      	mov	r9, r3
 8003ddc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de8:	ee17 0a90 	vmov	r0, s15
 8003dec:	f7fc fbd4 	bl	8000598 <__aeabi_f2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4640      	mov	r0, r8
 8003df6:	4649      	mov	r1, r9
 8003df8:	f7fc fa6e 	bl	80002d8 <__aeabi_dsub>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4620      	mov	r0, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	f7fc fa6a 	bl	80002dc <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fc fef2 	bl	8000bf8 <__aeabi_d2f>
 8003e14:	4603      	mov	r3, r0
 8003e16:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003e18:	f107 0214 	add.w	r2, r7, #20
 8003e1c:	f107 0318 	add.w	r3, r7, #24
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	edd7 0a08 	vldr	s1, [r7, #32]
 8003e28:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003e2c:	f7fe fa6a 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f005 f81a 	bl	8008e70 <pl_DriveMotor_duty>
	}
	if (modeacc == 100) {
 8003e3c:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <interupt_DriveMotor+0x1adc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d14b      	bne.n	8003edc <interupt_DriveMotor+0x1ab4>
		straight.velocity = 0;
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <interupt_DriveMotor+0x1ae0>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <interupt_DriveMotor+0x1ae4>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <interupt_DriveMotor+0x1ae0>)
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <interupt_DriveMotor+0x1ae4>)
 8003e5c:	ed93 7a00 	vldr	s14, [r3]
 8003e60:	f107 020c 	add.w	r2, r7, #12
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	eef0 0a47 	vmov.f32	s1, s14
 8003e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fe08 	bl	8005a88 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003e78:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003e98:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ea4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb4:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003eb8:	f107 0214 	add.w	r2, r7, #20
 8003ebc:	f107 0318 	add.w	r3, r7, #24
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	edd7 0a08 	vldr	s1, [r7, #32]
 8003ec8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003ecc:	f7fe fa1a 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 ffca 	bl	8008e70 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <interupt_DriveMotor+0x1ae8>)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8003ee2:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <interupt_DriveMotor+0x1aec>)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	6013      	str	r3, [r2, #0]



}
 8003ee8:	bf00      	nop
 8003eea:	3728      	adds	r7, #40	; 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ef2:	bf00      	nop
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	d916872b 	.word	0xd916872b
 8003efc:	3feff7ce 	.word	0x3feff7ce
 8003f00:	200004d8 	.word	0x200004d8
 8003f04:	20000534 	.word	0x20000534
 8003f08:	200004dc 	.word	0x200004dc
 8003f0c:	200004e8 	.word	0x200004e8
 8003f10:	20000538 	.word	0x20000538
 8003f14:	2000053c 	.word	0x2000053c

08003f18 <straight_table_dis>:

float straight_table_dis(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration, float input_deceleration,MOTOR_MODE motor_mode) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	ed87 0a07 	vstr	s0, [r7, #28]
 8003f22:	edc7 0a06 	vstr	s1, [r7, #24]
 8003f26:	ed87 1a05 	vstr	s2, [r7, #20]
 8003f2a:	edc7 1a04 	vstr	s3, [r7, #16]
 8003f2e:	ed87 2a03 	vstr	s4, [r7, #12]
 8003f32:	edc7 2a02 	vstr	s5, [r7, #8]
 8003f36:	6078      	str	r0, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f3c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f48:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003f4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f50:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003f54:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	fusion_distanceL=0;
 8003f60:	4b82      	ldr	r3, [pc, #520]	; (800416c <straight_table_dis+0x254>)
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8003f68:	4b81      	ldr	r3, [pc, #516]	; (8004170 <straight_table_dis+0x258>)
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
	//straight_alpha=0.99;

	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7c:	d505      	bpl.n	8003f8a <straight_table_dis+0x72>
 8003f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f82:	eef1 7a67 	vneg.f32	s15, s15
 8003f86:	edc7 7a03 	vstr	s15, [r7, #12]
	if (input_deceleration < 0){input_deceleration=-input_deceleration;}//減速が負
 8003f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	d505      	bpl.n	8003fa4 <straight_table_dis+0x8c>
 8003f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f9c:	eef1 7a67 	vneg.f32	s15, s15
 8003fa0:	edc7 7a02 	vstr	s15, [r7, #8]


	Trapezoid_straight.displacement = input_displacement;
 8003fa4:	4a73      	ldr	r2, [pc, #460]	; (8004174 <straight_table_dis+0x25c>)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003faa:	4a72      	ldr	r2, [pc, #456]	; (8004174 <straight_table_dis+0x25c>)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003fb0:	4a70      	ldr	r2, [pc, #448]	; (8004174 <straight_table_dis+0x25c>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003fb6:	4a6f      	ldr	r2, [pc, #444]	; (8004174 <straight_table_dis+0x25c>)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003fbc:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <straight_table_dis+0x25c>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6113      	str	r3, [r2, #16]
	Trapezoid_straight.deceleration = input_deceleration;
 8003fc2:	4a6c      	ldr	r2, [pc, #432]	; (8004174 <straight_table_dis+0x25c>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6153      	str	r3, [r2, #20]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	db03      	blt.n	8003fde <straight_table_dis+0xc6>
 8003fd6:	4a68      	ldr	r2, [pc, #416]	; (8004178 <straight_table_dis+0x260>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6053      	str	r3, [r2, #4]
 8003fdc:	e006      	b.n	8003fec <straight_table_dis+0xd4>
	}else{straight.acceleration = -input_acceleration;}
 8003fde:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fe2:	eef1 7a67 	vneg.f32	s15, s15
 8003fe6:	4b64      	ldr	r3, [pc, #400]	; (8004178 <straight_table_dis+0x260>)
 8003fe8:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003fec:	4a62      	ldr	r2, [pc, #392]	; (8004178 <straight_table_dis+0x260>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <straight_table_dis+0x260>)
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003ffa:	4b60      	ldr	r3, [pc, #384]	; (800417c <straight_table_dis+0x264>)
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8004002:	4b5e      	ldr	r3, [pc, #376]	; (800417c <straight_table_dis+0x264>)
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800400a:	4b5c      	ldr	r3, [pc, #368]	; (800417c <straight_table_dis+0x264>)
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <straight_table_dis+0x268>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <straight_table_dis+0x26c>)
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800401e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402a:	dd0e      	ble.n	800404a <straight_table_dis+0x132>
 800402c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004030:	edd7 7a07 	vldr	s15, [r7, #28]
 8004034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	dd05      	ble.n	800404a <straight_table_dis+0x132>
 800403e:	4b51      	ldr	r3, [pc, #324]	; (8004184 <straight_table_dis+0x26c>)
 8004040:	2205      	movs	r2, #5
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	4a4c      	ldr	r2, [pc, #304]	; (8004178 <straight_table_dis+0x260>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800404a:	edd7 7a07 	vldr	s15, [r7, #28]
 800404e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004056:	dd14      	ble.n	8004082 <straight_table_dis+0x16a>
 8004058:	edd7 7a07 	vldr	s15, [r7, #28]
 800405c:	eef1 7a67 	vneg.f32	s15, s15
 8004060:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406c:	d509      	bpl.n	8004082 <straight_table_dis+0x16a>
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <straight_table_dis+0x26c>)
 8004070:	2206      	movs	r2, #6
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	edd7 7a03 	vldr	s15, [r7, #12]
 8004078:	eef1 7a67 	vneg.f32	s15, s15
 800407c:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <straight_table_dis+0x260>)
 800407e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004082:	edd7 7a07 	vldr	s15, [r7, #28]
 8004086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800408a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408e:	d514      	bpl.n	80040ba <straight_table_dis+0x1a2>
 8004090:	edd7 7a07 	vldr	s15, [r7, #28]
 8004094:	eef1 7a67 	vneg.f32	s15, s15
 8004098:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800409c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a4:	dd09      	ble.n	80040ba <straight_table_dis+0x1a2>
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <straight_table_dis+0x26c>)
 80040a8:	2205      	movs	r2, #5
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80040b0:	eef1 7a67 	vneg.f32	s15, s15
 80040b4:	4b30      	ldr	r3, [pc, #192]	; (8004178 <straight_table_dis+0x260>)
 80040b6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80040ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80040be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	d50e      	bpl.n	80040e6 <straight_table_dis+0x1ce>
 80040c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80040cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d505      	bpl.n	80040e6 <straight_table_dis+0x1ce>
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <straight_table_dis+0x26c>)
 80040dc:	2206      	movs	r2, #6
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	4a25      	ldr	r2, [pc, #148]	; (8004178 <straight_table_dis+0x260>)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6053      	str	r3, [r2, #4]
	modeacc = 7;
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <straight_table_dis+0x270>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 80040ec:	793a      	ldrb	r2, [r7, #4]
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <straight_table_dis+0x274>)
 80040f0:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80040f2:	f004 fea1 	bl	8008e38 <pl_DriveMotor_start>

	while (g_acc_flag!=4){
 80040f6:	bf00      	nop
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <straight_table_dis+0x26c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d1fa      	bne.n	80040f8 <straight_table_dis+0x1e0>


	}
	if(input_end_velocity==0){//BREAK
 8004102:	edd7 7a05 	vldr	s15, [r7, #20]
 8004106:	eef5 7a40 	vcmp.f32	s15, #0.0
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	d110      	bne.n	8004132 <straight_table_dis+0x21a>
		wait_ms_NoReset(100);
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	f005 f969 	bl	80093e8 <wait_ms_NoReset>
		modeacc = 0;
 8004116:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <straight_table_dis+0x270>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800411c:	2003      	movs	r0, #3
 800411e:	f004 fe65 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8004122:	2003      	movs	r0, #3
 8004124:	f004 fe3a 	bl	8008d9c <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 8004128:	f004 fe94 	bl	8008e54 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 800412c:	2064      	movs	r0, #100	; 0x64
 800412e:	f005 f95b 	bl	80093e8 <wait_ms_NoReset>

	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <straight_table_dis+0x278>)
 8004134:	ed93 7a00 	vldr	s14, [r3]
 8004138:	edd7 7a07 	vldr	s15, [r7, #28]
 800413c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <straight_table_dis+0x278>)
 8004142:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <straight_table_dis+0x27c>)
 8004148:	ed93 7a00 	vldr	s14, [r3]
 800414c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <straight_table_dis+0x27c>)
 8004156:	edc3 7a00 	vstr	s15, [r3]




	return straight.velocity;
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <straight_table_dis+0x260>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	ee07 3a90 	vmov	s15, r3



}
 8004162:	eeb0 0a67 	vmov.f32	s0, s15
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000250 	.word	0x20000250
 8004170:	20000254 	.word	0x20000254
 8004174:	200004f4 	.word	0x200004f4
 8004178:	200004dc 	.word	0x200004dc
 800417c:	200004e8 	.word	0x200004e8
 8004180:	20000811 	.word	0x20000811
 8004184:	20000810 	.word	0x20000810
 8004188:	20000534 	.word	0x20000534
 800418c:	2000059c 	.word	0x2000059c
 8004190:	20000220 	.word	0x20000220
 8004194:	20000224 	.word	0x20000224

08004198 <straight_table_max>:

float straight_table_max(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration, float input_deceleration,MOTOR_MODE motor_mode) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	ed87 0a07 	vstr	s0, [r7, #28]
 80041a2:	edc7 0a06 	vstr	s1, [r7, #24]
 80041a6:	ed87 1a05 	vstr	s2, [r7, #20]
 80041aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80041ae:	ed87 2a03 	vstr	s4, [r7, #12]
 80041b2:	edc7 2a02 	vstr	s5, [r7, #8]
 80041b6:	6078      	str	r0, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80041b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80041bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80041c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80041c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041c8:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80041cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80041d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80041d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80041d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	fusion_distanceL=0;
 80041e0:	4b82      	ldr	r3, [pc, #520]	; (80043ec <straight_table_max+0x254>)
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 80041e8:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <straight_table_max+0x258>)
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
	//straight_alpha=0.99;

	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80041f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80041f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	d505      	bpl.n	800420a <straight_table_max+0x72>
 80041fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004202:	eef1 7a67 	vneg.f32	s15, s15
 8004206:	edc7 7a03 	vstr	s15, [r7, #12]
	if (input_deceleration < 0){input_deceleration=-input_deceleration;}//減速が負
 800420a:	edd7 7a02 	vldr	s15, [r7, #8]
 800420e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	d505      	bpl.n	8004224 <straight_table_max+0x8c>
 8004218:	edd7 7a02 	vldr	s15, [r7, #8]
 800421c:	eef1 7a67 	vneg.f32	s15, s15
 8004220:	edc7 7a02 	vstr	s15, [r7, #8]


	Trapezoid_straight.displacement = input_displacement;
 8004224:	4a73      	ldr	r2, [pc, #460]	; (80043f4 <straight_table_max+0x25c>)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800422a:	4a72      	ldr	r2, [pc, #456]	; (80043f4 <straight_table_max+0x25c>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8004230:	4a70      	ldr	r2, [pc, #448]	; (80043f4 <straight_table_max+0x25c>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8004236:	4a6f      	ldr	r2, [pc, #444]	; (80043f4 <straight_table_max+0x25c>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800423c:	4a6d      	ldr	r2, [pc, #436]	; (80043f4 <straight_table_max+0x25c>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6113      	str	r3, [r2, #16]
	Trapezoid_straight.deceleration = input_deceleration;
 8004242:	4a6c      	ldr	r2, [pc, #432]	; (80043f4 <straight_table_max+0x25c>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6153      	str	r3, [r2, #20]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004248:	edd7 7a04 	vldr	s15, [r7, #16]
 800424c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	db03      	blt.n	800425e <straight_table_max+0xc6>
 8004256:	4a68      	ldr	r2, [pc, #416]	; (80043f8 <straight_table_max+0x260>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6053      	str	r3, [r2, #4]
 800425c:	e006      	b.n	800426c <straight_table_max+0xd4>
	}else{straight.acceleration = -input_acceleration;}
 800425e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004262:	eef1 7a67 	vneg.f32	s15, s15
 8004266:	4b64      	ldr	r3, [pc, #400]	; (80043f8 <straight_table_max+0x260>)
 8004268:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 800426c:	4a62      	ldr	r2, [pc, #392]	; (80043f8 <straight_table_max+0x260>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8004272:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <straight_table_max+0x260>)
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800427a:	4b60      	ldr	r3, [pc, #384]	; (80043fc <straight_table_max+0x264>)
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8004282:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <straight_table_max+0x264>)
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800428a:	4b5c      	ldr	r3, [pc, #368]	; (80043fc <straight_table_max+0x264>)
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <straight_table_max+0x268>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004298:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <straight_table_max+0x26c>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800429e:	edd7 7a07 	vldr	s15, [r7, #28]
 80042a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	dd0e      	ble.n	80042ca <straight_table_max+0x132>
 80042ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	dd05      	ble.n	80042ca <straight_table_max+0x132>
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <straight_table_max+0x26c>)
 80042c0:	2205      	movs	r2, #5
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <straight_table_max+0x260>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80042ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80042ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	dd14      	ble.n	8004302 <straight_table_max+0x16a>
 80042d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80042dc:	eef1 7a67 	vneg.f32	s15, s15
 80042e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d509      	bpl.n	8004302 <straight_table_max+0x16a>
 80042ee:	4b45      	ldr	r3, [pc, #276]	; (8004404 <straight_table_max+0x26c>)
 80042f0:	2206      	movs	r2, #6
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f8:	eef1 7a67 	vneg.f32	s15, s15
 80042fc:	4b3e      	ldr	r3, [pc, #248]	; (80043f8 <straight_table_max+0x260>)
 80042fe:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004302:	edd7 7a07 	vldr	s15, [r7, #28]
 8004306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	d514      	bpl.n	800433a <straight_table_max+0x1a2>
 8004310:	edd7 7a07 	vldr	s15, [r7, #28]
 8004314:	eef1 7a67 	vneg.f32	s15, s15
 8004318:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800431c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	dd09      	ble.n	800433a <straight_table_max+0x1a2>
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <straight_table_max+0x26c>)
 8004328:	2205      	movs	r2, #5
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004330:	eef1 7a67 	vneg.f32	s15, s15
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <straight_table_max+0x260>)
 8004336:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800433a:	edd7 7a07 	vldr	s15, [r7, #28]
 800433e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	d50e      	bpl.n	8004366 <straight_table_max+0x1ce>
 8004348:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800434c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	d505      	bpl.n	8004366 <straight_table_max+0x1ce>
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <straight_table_max+0x26c>)
 800435c:	2206      	movs	r2, #6
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <straight_table_max+0x260>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6053      	str	r3, [r2, #4]
	modeacc = 8;
 8004366:	4b28      	ldr	r3, [pc, #160]	; (8004408 <straight_table_max+0x270>)
 8004368:	2208      	movs	r2, #8
 800436a:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 800436c:	793a      	ldrb	r2, [r7, #4]
 800436e:	4b27      	ldr	r3, [pc, #156]	; (800440c <straight_table_max+0x274>)
 8004370:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8004372:	f004 fd61 	bl	8008e38 <pl_DriveMotor_start>

	while (g_acc_flag!=4){
 8004376:	bf00      	nop
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <straight_table_max+0x26c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1fa      	bne.n	8004378 <straight_table_max+0x1e0>


	}
	if(input_end_velocity==0){//BREAK
 8004382:	edd7 7a05 	vldr	s15, [r7, #20]
 8004386:	eef5 7a40 	vcmp.f32	s15, #0.0
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	d110      	bne.n	80043b2 <straight_table_max+0x21a>
		wait_ms_NoReset(100);
 8004390:	2064      	movs	r0, #100	; 0x64
 8004392:	f005 f829 	bl	80093e8 <wait_ms_NoReset>
		modeacc = 0;
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <straight_table_max+0x270>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800439c:	2003      	movs	r0, #3
 800439e:	f004 fd25 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 80043a2:	2003      	movs	r0, #3
 80043a4:	f004 fcfa 	bl	8008d9c <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 80043a8:	f004 fd54 	bl	8008e54 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 80043ac:	2064      	movs	r0, #100	; 0x64
 80043ae:	f005 f81b 	bl	80093e8 <wait_ms_NoReset>

	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <straight_table_max+0x278>)
 80043b4:	ed93 7a00 	vldr	s14, [r3]
 80043b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80043bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <straight_table_max+0x278>)
 80043c2:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <straight_table_max+0x27c>)
 80043c8:	ed93 7a00 	vldr	s14, [r3]
 80043cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80043d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <straight_table_max+0x27c>)
 80043d6:	edc3 7a00 	vstr	s15, [r3]




	return straight.velocity;
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <straight_table_max+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	ee07 3a90 	vmov	s15, r3



}
 80043e2:	eeb0 0a67 	vmov.f32	s0, s15
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000250 	.word	0x20000250
 80043f0:	20000254 	.word	0x20000254
 80043f4:	200004f4 	.word	0x200004f4
 80043f8:	200004dc 	.word	0x200004dc
 80043fc:	200004e8 	.word	0x200004e8
 8004400:	20000811 	.word	0x20000811
 8004404:	20000810 	.word	0x20000810
 8004408:	20000534 	.word	0x20000534
 800440c:	2000059c 	.word	0x2000059c
 8004410:	20000220 	.word	0x20000220
 8004414:	20000224 	.word	0x20000224

08004418 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004422:	edc7 0a04 	vstr	s1, [r7, #16]
 8004426:	ed87 1a03 	vstr	s2, [r7, #12]
 800442a:	edc7 1a02 	vstr	s3, [r7, #8]
 800442e:	ed87 2a01 	vstr	s4, [r7, #4]
 8004432:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004434:	edd7 7a03 	vldr	s15, [r7, #12]
 8004438:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800443c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004440:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004444:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004448:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800444c:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004450:	ed97 7a01 	vldr	s14, [r7, #4]
 8004454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004458:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800445c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	d505      	bpl.n	8004476 <straight_table2+0x5e>
 800446a:	edd7 7a01 	vldr	s15, [r7, #4]
 800446e:	eef1 7a67 	vneg.f32	s15, s15
 8004472:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 8004476:	4bba      	ldr	r3, [pc, #744]	; (8004760 <straight_table2+0x348>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10c      	bne.n	8004498 <straight_table2+0x80>
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d109      	bne.n	8004498 <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8004484:	2300      	movs	r3, #0
 8004486:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 8004488:	edd7 7a05 	vldr	s15, [r7, #20]
 800448c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004494:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 8004498:	4ab2      	ldr	r2, [pc, #712]	; (8004764 <straight_table2+0x34c>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800449e:	4ab1      	ldr	r2, [pc, #708]	; (8004764 <straight_table2+0x34c>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80044a4:	4aaf      	ldr	r2, [pc, #700]	; (8004764 <straight_table2+0x34c>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80044aa:	4aae      	ldr	r2, [pc, #696]	; (8004764 <straight_table2+0x34c>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80044b0:	4aac      	ldr	r2, [pc, #688]	; (8004764 <straight_table2+0x34c>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80044b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	db03      	blt.n	80044cc <straight_table2+0xb4>
 80044c4:	4aa8      	ldr	r2, [pc, #672]	; (8004768 <straight_table2+0x350>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6053      	str	r3, [r2, #4]
 80044ca:	e006      	b.n	80044da <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 80044cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80044d0:	eef1 7a67 	vneg.f32	s15, s15
 80044d4:	4ba4      	ldr	r3, [pc, #656]	; (8004768 <straight_table2+0x350>)
 80044d6:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80044da:	4aa3      	ldr	r2, [pc, #652]	; (8004768 <straight_table2+0x350>)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80044e0:	4ba1      	ldr	r3, [pc, #644]	; (8004768 <straight_table2+0x350>)
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80044e8:	4ba0      	ldr	r3, [pc, #640]	; (800476c <straight_table2+0x354>)
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80044f0:	4b9e      	ldr	r3, [pc, #632]	; (800476c <straight_table2+0x354>)
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <straight_table2+0x354>)
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004500:	4b9b      	ldr	r3, [pc, #620]	; (8004770 <straight_table2+0x358>)
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004506:	4b9b      	ldr	r3, [pc, #620]	; (8004774 <straight_table2+0x35c>)
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800450c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	dd0e      	ble.n	8004538 <straight_table2+0x120>
 800451a:	ed97 7a07 	vldr	s14, [r7, #28]
 800451e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	dd05      	ble.n	8004538 <straight_table2+0x120>
 800452c:	4b91      	ldr	r3, [pc, #580]	; (8004774 <straight_table2+0x35c>)
 800452e:	2205      	movs	r2, #5
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	4a8d      	ldr	r2, [pc, #564]	; (8004768 <straight_table2+0x350>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004538:	edd7 7a05 	vldr	s15, [r7, #20]
 800453c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	dd14      	ble.n	8004570 <straight_table2+0x158>
 8004546:	edd7 7a05 	vldr	s15, [r7, #20]
 800454a:	eef1 7a67 	vneg.f32	s15, s15
 800454e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d509      	bpl.n	8004570 <straight_table2+0x158>
 800455c:	4b85      	ldr	r3, [pc, #532]	; (8004774 <straight_table2+0x35c>)
 800455e:	2206      	movs	r2, #6
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	edd7 7a01 	vldr	s15, [r7, #4]
 8004566:	eef1 7a67 	vneg.f32	s15, s15
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <straight_table2+0x350>)
 800456c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004570:	edd7 7a05 	vldr	s15, [r7, #20]
 8004574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	d514      	bpl.n	80045a8 <straight_table2+0x190>
 800457e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004582:	eef1 7a67 	vneg.f32	s15, s15
 8004586:	ed97 7a07 	vldr	s14, [r7, #28]
 800458a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	dd09      	ble.n	80045a8 <straight_table2+0x190>
 8004594:	4b77      	ldr	r3, [pc, #476]	; (8004774 <straight_table2+0x35c>)
 8004596:	2205      	movs	r2, #5
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	edd7 7a01 	vldr	s15, [r7, #4]
 800459e:	eef1 7a67 	vneg.f32	s15, s15
 80045a2:	4b71      	ldr	r3, [pc, #452]	; (8004768 <straight_table2+0x350>)
 80045a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80045a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80045ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	d50e      	bpl.n	80045d4 <straight_table2+0x1bc>
 80045b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80045ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80045be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	d505      	bpl.n	80045d4 <straight_table2+0x1bc>
 80045c8:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <straight_table2+0x35c>)
 80045ca:	2206      	movs	r2, #6
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	4a66      	ldr	r2, [pc, #408]	; (8004768 <straight_table2+0x350>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <straight_table2+0x360>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 80045da:	783a      	ldrb	r2, [r7, #0]
 80045dc:	4b67      	ldr	r3, [pc, #412]	; (800477c <straight_table2+0x364>)
 80045de:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80045e0:	f004 fc2a 	bl	8008e38 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	f040 80d4 	bne.w	8004794 <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80045ec:	4b64      	ldr	r3, [pc, #400]	; (8004780 <straight_table2+0x368>)
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80045f4:	4b5f      	ldr	r3, [pc, #380]	; (8004774 <straight_table2+0x35c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <straight_table2+0x350>)
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8004602:	bf00      	nop
 8004604:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <straight_table2+0x36c>)
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800460e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004616:	d409      	bmi.n	800462c <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8004618:	4b5a      	ldr	r3, [pc, #360]	; (8004784 <straight_table2+0x36c>)
 800461a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 800461e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004788 <straight_table2+0x370>
 8004622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462a:	dd18      	ble.n	800465e <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <straight_table2+0x374>)
 800462e:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8004632:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d409      	bmi.n	8004654 <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <straight_table2+0x374>)
 8004642:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8004646:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004788 <straight_table2+0x370>
 800464a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	dd04      	ble.n	800465e <straight_table2+0x246>
			  front_wall_break_90==0){}
 8004654:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <straight_table2+0x378>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0d2      	beq.n	8004604 <straight_table2+0x1ec>
		straight.displacement=0;
 800465e:	4b42      	ldr	r3, [pc, #264]	; (8004768 <straight_table2+0x350>)
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004666:	edd7 7a02 	vldr	s15, [r7, #8]
 800466a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	db03      	blt.n	800467c <straight_table2+0x264>
 8004674:	4a3c      	ldr	r2, [pc, #240]	; (8004768 <straight_table2+0x350>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6053      	str	r3, [r2, #4]
 800467a:	e006      	b.n	800468a <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 800467c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004680:	eef1 7a67 	vneg.f32	s15, s15
 8004684:	4b38      	ldr	r3, [pc, #224]	; (8004768 <straight_table2+0x350>)
 8004686:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <straight_table2+0x35c>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004690:	edd7 7a05 	vldr	s15, [r7, #20]
 8004694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	dd0e      	ble.n	80046bc <straight_table2+0x2a4>
 800469e:	ed97 7a07 	vldr	s14, [r7, #28]
 80046a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80046a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	dd05      	ble.n	80046bc <straight_table2+0x2a4>
 80046b0:	4b30      	ldr	r3, [pc, #192]	; (8004774 <straight_table2+0x35c>)
 80046b2:	2205      	movs	r2, #5
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <straight_table2+0x350>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80046bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80046c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	dd14      	ble.n	80046f4 <straight_table2+0x2dc>
 80046ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ce:	eef1 7a67 	vneg.f32	s15, s15
 80046d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80046d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d509      	bpl.n	80046f4 <straight_table2+0x2dc>
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <straight_table2+0x35c>)
 80046e2:	2206      	movs	r2, #6
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ea:	eef1 7a67 	vneg.f32	s15, s15
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <straight_table2+0x350>)
 80046f0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80046f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80046f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	d514      	bpl.n	800472c <straight_table2+0x314>
 8004702:	edd7 7a05 	vldr	s15, [r7, #20]
 8004706:	eef1 7a67 	vneg.f32	s15, s15
 800470a:	ed97 7a07 	vldr	s14, [r7, #28]
 800470e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	dd09      	ble.n	800472c <straight_table2+0x314>
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <straight_table2+0x35c>)
 800471a:	2205      	movs	r2, #5
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004722:	eef1 7a67 	vneg.f32	s15, s15
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <straight_table2+0x350>)
 8004728:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800472c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	f140 825c 	bpl.w	8004bf4 <straight_table2+0x7dc>
 800473c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004740:	edd7 7a05 	vldr	s15, [r7, #20]
 8004744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	f140 8252 	bpl.w	8004bf4 <straight_table2+0x7dc>
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <straight_table2+0x35c>)
 8004752:	2206      	movs	r2, #6
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <straight_table2+0x350>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6053      	str	r3, [r2, #4]
 800475c:	e24a      	b.n	8004bf4 <straight_table2+0x7dc>
 800475e:	bf00      	nop
 8004760:	20000535 	.word	0x20000535
 8004764:	200004f4 	.word	0x200004f4
 8004768:	200004dc 	.word	0x200004dc
 800476c:	200004e8 	.word	0x200004e8
 8004770:	20000811 	.word	0x20000811
 8004774:	20000810 	.word	0x20000810
 8004778:	20000534 	.word	0x20000534
 800477c:	2000059c 	.word	0x2000059c
 8004780:	20000540 	.word	0x20000540
 8004784:	200005d8 	.word	0x200005d8
 8004788:	425c0000 	.word	0x425c0000
 800478c:	200005dc 	.word	0x200005dc
 8004790:	200005fe 	.word	0x200005fe
	}else if(motor_mode.WallCutMode==2){
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	2b02      	cmp	r3, #2
 8004798:	f040 80c9 	bne.w	800492e <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 800479c:	4bb8      	ldr	r3, [pc, #736]	; (8004a80 <straight_table2+0x668>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80047a2:	4bb8      	ldr	r3, [pc, #736]	; (8004a84 <straight_table2+0x66c>)
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80047aa:	bf00      	nop
 80047ac:	4bb6      	ldr	r3, [pc, #728]	; (8004a88 <straight_table2+0x670>)
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	d913      	bls.n	80047e4 <straight_table2+0x3cc>
 80047bc:	4bb2      	ldr	r3, [pc, #712]	; (8004a88 <straight_table2+0x670>)
 80047be:	edd3 7a00 	vldr	s15, [r3]
 80047c2:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80047c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	d909      	bls.n	80047e4 <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80047d0:	4bad      	ldr	r3, [pc, #692]	; (8004a88 <straight_table2+0x670>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80047d6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004a8c <straight_table2+0x674>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	db20      	blt.n	8004826 <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80047e4:	4baa      	ldr	r3, [pc, #680]	; (8004a90 <straight_table2+0x678>)
 80047e6:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80047ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f2:	d913      	bls.n	800481c <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80047f4:	4ba6      	ldr	r3, [pc, #664]	; (8004a90 <straight_table2+0x678>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80047fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004806:	d909      	bls.n	800481c <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8004808:	4ba1      	ldr	r3, [pc, #644]	; (8004a90 <straight_table2+0x678>)
 800480a:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800480e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004a8c <straight_table2+0x674>
 8004812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	db04      	blt.n	8004826 <straight_table2+0x40e>
			  front_wall_break_45==0){}
 800481c:	4b9d      	ldr	r3, [pc, #628]	; (8004a94 <straight_table2+0x67c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0c2      	beq.n	80047ac <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 8004826:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <straight_table2+0x680>)
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 800482e:	4b95      	ldr	r3, [pc, #596]	; (8004a84 <straight_table2+0x66c>)
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004836:	edd7 7a02 	vldr	s15, [r7, #8]
 800483a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	db03      	blt.n	800484c <straight_table2+0x434>
 8004844:	4a8f      	ldr	r2, [pc, #572]	; (8004a84 <straight_table2+0x66c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6053      	str	r3, [r2, #4]
 800484a:	e006      	b.n	800485a <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 800484c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004850:	eef1 7a67 	vneg.f32	s15, s15
 8004854:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <straight_table2+0x66c>)
 8004856:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800485a:	4b89      	ldr	r3, [pc, #548]	; (8004a80 <straight_table2+0x668>)
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004860:	edd7 7a05 	vldr	s15, [r7, #20]
 8004864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486c:	dd0e      	ble.n	800488c <straight_table2+0x474>
 800486e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004872:	edd7 7a05 	vldr	s15, [r7, #20]
 8004876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	dd05      	ble.n	800488c <straight_table2+0x474>
 8004880:	4b7f      	ldr	r3, [pc, #508]	; (8004a80 <straight_table2+0x668>)
 8004882:	2205      	movs	r2, #5
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	4a7f      	ldr	r2, [pc, #508]	; (8004a84 <straight_table2+0x66c>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800488c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	dd14      	ble.n	80048c4 <straight_table2+0x4ac>
 800489a:	edd7 7a05 	vldr	s15, [r7, #20]
 800489e:	eef1 7a67 	vneg.f32	s15, s15
 80048a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80048a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	d509      	bpl.n	80048c4 <straight_table2+0x4ac>
 80048b0:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <straight_table2+0x668>)
 80048b2:	2206      	movs	r2, #6
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ba:	eef1 7a67 	vneg.f32	s15, s15
 80048be:	4b71      	ldr	r3, [pc, #452]	; (8004a84 <straight_table2+0x66c>)
 80048c0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80048c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80048c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	d514      	bpl.n	80048fc <straight_table2+0x4e4>
 80048d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80048d6:	eef1 7a67 	vneg.f32	s15, s15
 80048da:	ed97 7a07 	vldr	s14, [r7, #28]
 80048de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e6:	dd09      	ble.n	80048fc <straight_table2+0x4e4>
 80048e8:	4b65      	ldr	r3, [pc, #404]	; (8004a80 <straight_table2+0x668>)
 80048ea:	2205      	movs	r2, #5
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80048f2:	eef1 7a67 	vneg.f32	s15, s15
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <straight_table2+0x66c>)
 80048f8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80048fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004900:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	f140 8174 	bpl.w	8004bf4 <straight_table2+0x7dc>
 800490c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004910:	edd7 7a05 	vldr	s15, [r7, #20]
 8004914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	f140 816a 	bpl.w	8004bf4 <straight_table2+0x7dc>
 8004920:	4b57      	ldr	r3, [pc, #348]	; (8004a80 <straight_table2+0x668>)
 8004922:	2206      	movs	r2, #6
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	4a57      	ldr	r2, [pc, #348]	; (8004a84 <straight_table2+0x66c>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6053      	str	r3, [r2, #4]
 800492c:	e162      	b.n	8004bf4 <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	2b03      	cmp	r3, #3
 8004932:	f040 80b9 	bne.w	8004aa8 <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004936:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <straight_table2+0x668>)
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800493c:	4b51      	ldr	r3, [pc, #324]	; (8004a84 <straight_table2+0x66c>)
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8004944:	bf00      	nop
 8004946:	4b55      	ldr	r3, [pc, #340]	; (8004a9c <straight_table2+0x684>)
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	d409      	bmi.n	800496e <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800495a:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <straight_table2+0x684>)
 800495c:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8004960:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004aa0 <straight_table2+0x688>
 8004964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496c:	dd04      	ble.n	8004978 <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 800496e:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <straight_table2+0x68c>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0e6      	beq.n	8004946 <straight_table2+0x52e>
		enc.sigma_error=0;
 8004978:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <straight_table2+0x680>)
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <straight_table2+0x66c>)
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004988:	edd7 7a02 	vldr	s15, [r7, #8]
 800498c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	db03      	blt.n	800499e <straight_table2+0x586>
 8004996:	4a3b      	ldr	r2, [pc, #236]	; (8004a84 <straight_table2+0x66c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6053      	str	r3, [r2, #4]
 800499c:	e006      	b.n	80049ac <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 800499e:	edd7 7a01 	vldr	s15, [r7, #4]
 80049a2:	eef1 7a67 	vneg.f32	s15, s15
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <straight_table2+0x66c>)
 80049a8:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <straight_table2+0x668>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80049b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80049b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	dd0e      	ble.n	80049de <straight_table2+0x5c6>
 80049c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80049c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80049c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	dd05      	ble.n	80049de <straight_table2+0x5c6>
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <straight_table2+0x668>)
 80049d4:	2205      	movs	r2, #5
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <straight_table2+0x66c>)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80049de:	edd7 7a05 	vldr	s15, [r7, #20]
 80049e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	dd14      	ble.n	8004a16 <straight_table2+0x5fe>
 80049ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80049f0:	eef1 7a67 	vneg.f32	s15, s15
 80049f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80049f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	d509      	bpl.n	8004a16 <straight_table2+0x5fe>
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <straight_table2+0x668>)
 8004a04:	2206      	movs	r2, #6
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0c:	eef1 7a67 	vneg.f32	s15, s15
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <straight_table2+0x66c>)
 8004a12:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004a16:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	d514      	bpl.n	8004a4e <straight_table2+0x636>
 8004a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a28:	eef1 7a67 	vneg.f32	s15, s15
 8004a2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	dd09      	ble.n	8004a4e <straight_table2+0x636>
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <straight_table2+0x668>)
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a44:	eef1 7a67 	vneg.f32	s15, s15
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <straight_table2+0x66c>)
 8004a4a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004a4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5a:	f140 80cb 	bpl.w	8004bf4 <straight_table2+0x7dc>
 8004a5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	f140 80c1 	bpl.w	8004bf4 <straight_table2+0x7dc>
 8004a72:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <straight_table2+0x668>)
 8004a74:	2206      	movs	r2, #6
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <straight_table2+0x66c>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6053      	str	r3, [r2, #4]
 8004a7e:	e0b9      	b.n	8004bf4 <straight_table2+0x7dc>
 8004a80:	20000810 	.word	0x20000810
 8004a84:	200004dc 	.word	0x200004dc
 8004a88:	200005e0 	.word	0x200005e0
 8004a8c:	42000000 	.word	0x42000000
 8004a90:	200005e4 	.word	0x200005e4
 8004a94:	200005ff 	.word	0x200005ff
 8004a98:	20000540 	.word	0x20000540
 8004a9c:	200005f0 	.word	0x200005f0
 8004aa0:	420c0000 	.word	0x420c0000
 8004aa4:	20000600 	.word	0x20000600
	}else if(motor_mode.WallCutMode==4){
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	f040 80a2 	bne.w	8004bf4 <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004ab0:	4baa      	ldr	r3, [pc, #680]	; (8004d5c <straight_table2+0x944>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8004ab6:	4baa      	ldr	r3, [pc, #680]	; (8004d60 <straight_table2+0x948>)
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004abe:	bf00      	nop
 8004ac0:	4ba8      	ldr	r3, [pc, #672]	; (8004d64 <straight_table2+0x94c>)
 8004ac2:	edd3 7a00 	vldr	s15, [r3]
 8004ac6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	d409      	bmi.n	8004ae8 <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8004ad4:	4ba3      	ldr	r3, [pc, #652]	; (8004d64 <straight_table2+0x94c>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004ada:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8004d68 <straight_table2+0x950>
 8004ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	dd04      	ble.n	8004af2 <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 8004ae8:	4ba0      	ldr	r3, [pc, #640]	; (8004d6c <straight_table2+0x954>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0e6      	beq.n	8004ac0 <straight_table2+0x6a8>
		enc.sigma_error=0;
 8004af2:	4b9f      	ldr	r3, [pc, #636]	; (8004d70 <straight_table2+0x958>)
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8004afa:	4b99      	ldr	r3, [pc, #612]	; (8004d60 <straight_table2+0x948>)
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	db03      	blt.n	8004b18 <straight_table2+0x700>
 8004b10:	4a93      	ldr	r2, [pc, #588]	; (8004d60 <straight_table2+0x948>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6053      	str	r3, [r2, #4]
 8004b16:	e006      	b.n	8004b26 <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 8004b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b1c:	eef1 7a67 	vneg.f32	s15, s15
 8004b20:	4b8f      	ldr	r3, [pc, #572]	; (8004d60 <straight_table2+0x948>)
 8004b22:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8004b26:	4b8d      	ldr	r3, [pc, #564]	; (8004d5c <straight_table2+0x944>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	dd0e      	ble.n	8004b58 <straight_table2+0x740>
 8004b3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	dd05      	ble.n	8004b58 <straight_table2+0x740>
 8004b4c:	4b83      	ldr	r3, [pc, #524]	; (8004d5c <straight_table2+0x944>)
 8004b4e:	2205      	movs	r2, #5
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	4a83      	ldr	r2, [pc, #524]	; (8004d60 <straight_table2+0x948>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004b58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	dd14      	ble.n	8004b90 <straight_table2+0x778>
 8004b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b6a:	eef1 7a67 	vneg.f32	s15, s15
 8004b6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7a:	d509      	bpl.n	8004b90 <straight_table2+0x778>
 8004b7c:	4b77      	ldr	r3, [pc, #476]	; (8004d5c <straight_table2+0x944>)
 8004b7e:	2206      	movs	r2, #6
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b86:	eef1 7a67 	vneg.f32	s15, s15
 8004b8a:	4b75      	ldr	r3, [pc, #468]	; (8004d60 <straight_table2+0x948>)
 8004b8c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9c:	d514      	bpl.n	8004bc8 <straight_table2+0x7b0>
 8004b9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ba2:	eef1 7a67 	vneg.f32	s15, s15
 8004ba6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	dd09      	ble.n	8004bc8 <straight_table2+0x7b0>
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <straight_table2+0x944>)
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bbe:	eef1 7a67 	vneg.f32	s15, s15
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <straight_table2+0x948>)
 8004bc4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d50e      	bpl.n	8004bf4 <straight_table2+0x7dc>
 8004bd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004bda:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d505      	bpl.n	8004bf4 <straight_table2+0x7dc>
 8004be8:	4b5c      	ldr	r3, [pc, #368]	; (8004d5c <straight_table2+0x944>)
 8004bea:	2206      	movs	r2, #6
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <straight_table2+0x948>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8004bf4:	78bb      	ldrb	r3, [r7, #2]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 80a7 	bne.w	8004d4a <straight_table2+0x932>
	while (g_acc_flag!=4){
 8004bfc:	e074      	b.n	8004ce8 <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d120      	bne.n	8004c46 <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c08:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c10:	4b58      	ldr	r3, [pc, #352]	; (8004d74 <straight_table2+0x95c>)
 8004c12:	edd3 7a00 	vldr	s15, [r3]
 8004c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	d90e      	bls.n	8004c3e <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8004c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c24:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8004c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2c:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <straight_table2+0x960>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	d900      	bls.n	8004c3e <straight_table2+0x826>
 8004c3c:	e054      	b.n	8004ce8 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <straight_table2+0x944>)
 8004c40:	2204      	movs	r2, #4
 8004c42:	701a      	strb	r2, [r3, #0]
				break;
 8004c44:	e055      	b.n	8004cf2 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d121      	bne.n	8004c90 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8004c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c58:	4b48      	ldr	r3, [pc, #288]	; (8004d7c <straight_table2+0x964>)
 8004c5a:	edd3 7a00 	vldr	s15, [r3]
 8004c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	d900      	bls.n	8004c6a <straight_table2+0x852>
 8004c68:	e03e      	b.n	8004ce8 <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8004c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c6e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004c72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c76:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <straight_table2+0x968>)
 8004c78:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8004c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d900      	bls.n	8004c88 <straight_table2+0x870>
 8004c86:	e02f      	b.n	8004ce8 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004c88:	4b34      	ldr	r3, [pc, #208]	; (8004d5c <straight_table2+0x944>)
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	701a      	strb	r2, [r3, #0]
				break;
 8004c8e:	e030      	b.n	8004cf2 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d112      	bne.n	8004cbc <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8004c96:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <straight_table2+0x96c>)
 8004ca4:	edd3 7a00 	vldr	s15, [r3]
 8004ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d900      	bls.n	8004cb4 <straight_table2+0x89c>
 8004cb2:	e019      	b.n	8004ce8 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004cb4:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <straight_table2+0x944>)
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	701a      	strb	r2, [r3, #0]
				break;
 8004cba:	e01a      	b.n	8004cf2 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d112      	bne.n	8004ce8 <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8004cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cc6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cce:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <straight_table2+0x94c>)
 8004cd0:	edd3 7a00 	vldr	s15, [r3]
 8004cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	d900      	bls.n	8004ce0 <straight_table2+0x8c8>
 8004cde:	e003      	b.n	8004ce8 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <straight_table2+0x944>)
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	701a      	strb	r2, [r3, #0]
				break;
 8004ce6:	e004      	b.n	8004cf2 <straight_table2+0x8da>
	while (g_acc_flag!=4){
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <straight_table2+0x944>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d185      	bne.n	8004bfe <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8004cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfe:	d110      	bne.n	8004d22 <straight_table2+0x90a>
		wait_ms_NoReset(100);
 8004d00:	2064      	movs	r0, #100	; 0x64
 8004d02:	f004 fb71 	bl	80093e8 <wait_ms_NoReset>
		modeacc = 0;
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <straight_table2+0x970>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	f004 f86d 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8004d12:	2003      	movs	r0, #3
 8004d14:	f004 f842 	bl	8008d9c <pl_L_DriveMotor_mode>
		pl_DriveMotor_stop();//これは必要か？
 8004d18:	f004 f89c 	bl	8008e54 <pl_DriveMotor_stop>
		wait_ms_NoReset(100);
 8004d1c:	2064      	movs	r0, #100	; 0x64
 8004d1e:	f004 fb63 	bl	80093e8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004d22:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <straight_table2+0x974>)
 8004d24:	ed93 7a00 	vldr	s14, [r3]
 8004d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d30:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <straight_table2+0x974>)
 8004d32:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <straight_table2+0x978>)
 8004d38:	ed93 7a00 	vldr	s14, [r3]
 8004d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <straight_table2+0x978>)
 8004d46:	edc3 7a00 	vstr	s15, [r3]


	}

	return straight.velocity;
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <straight_table2+0x948>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	ee07 3a90 	vmov	s15, r3



}
 8004d52:	eeb0 0a67 	vmov.f32	s0, s15
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000810 	.word	0x20000810
 8004d60:	200004dc 	.word	0x200004dc
 8004d64:	200005f4 	.word	0x200005f4
 8004d68:	420c0000 	.word	0x420c0000
 8004d6c:	20000600 	.word	0x20000600
 8004d70:	20000540 	.word	0x20000540
 8004d74:	200005dc 	.word	0x200005dc
 8004d78:	200005d8 	.word	0x200005d8
 8004d7c:	200005e4 	.word	0x200005e4
 8004d80:	200005e0 	.word	0x200005e0
 8004d84:	200005f0 	.word	0x200005f0
 8004d88:	20000534 	.word	0x20000534
 8004d8c:	20000220 	.word	0x20000220
 8004d90:	20000224 	.word	0x20000224

08004d94 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d9e:	60b8      	str	r0, [r7, #8]
 8004da0:	460b      	mov	r3, r1
 8004da2:	71fb      	strb	r3, [r7, #7]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 8004da8:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <End_straight+0xc0>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d132      	bne.n	8004e16 <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 8004db4:	e02f      	b.n	8004e16 <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	f083 0301 	eor.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <End_straight+0x3a>
 8004dc2:	79bb      	ldrb	r3, [r7, #6]
 8004dc4:	f083 0301 	eor.w	r3, r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d023      	beq.n	8004e16 <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d120      	bne.n	8004e16 <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <End_straight+0xc4>)
 8004de2:	edd3 7a00 	vldr	s15, [r3]
 8004de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	d90e      	bls.n	8004e0e <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8004df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df4:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8004df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <End_straight+0xc8>)
 8004dfe:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8004e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	d900      	bls.n	8004e0e <End_straight+0x7a>
 8004e0c:	e003      	b.n	8004e16 <End_straight+0x82>
						g_acc_flag=4;
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <End_straight+0xcc>)
 8004e10:	2204      	movs	r2, #4
 8004e12:	701a      	strb	r2, [r3, #0]
						break;
 8004e14:	e004      	b.n	8004e20 <End_straight+0x8c>
	while (g_acc_flag!=4){
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <End_straight+0xcc>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d1ca      	bne.n	8004db6 <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8004e20:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <End_straight+0xd0>)
 8004e22:	ed93 7a00 	vldr	s14, [r3]
 8004e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <End_straight+0xd0>)
 8004e30:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <End_straight+0xd4>)
 8004e36:	ed93 7a00 	vldr	s14, [r3]
 8004e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <End_straight+0xd4>)
 8004e44:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004e48:	f004 f804 	bl	8008e54 <pl_DriveMotor_stop>
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000535 	.word	0x20000535
 8004e58:	200005dc 	.word	0x200005dc
 8004e5c:	200005d8 	.word	0x200005d8
 8004e60:	20000810 	.word	0x20000810
 8004e64:	20000220 	.word	0x20000220
 8004e68:	20000224 	.word	0x20000224

08004e6c <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	ed87 0a05 	vstr	s0, [r7, #20]
 8004e76:	edc7 0a04 	vstr	s1, [r7, #16]
 8004e7a:	ed87 1a03 	vstr	s2, [r7, #12]
 8004e7e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004e82:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e96:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004e9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004e9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8004ea2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	d505      	bpl.n	8004ec8 <turning_table2+0x5c>
 8004ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec0:	eef1 7a67 	vneg.f32	s15, s15
 8004ec4:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8004ec8:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <turning_table2+0x218>)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8004ece:	4a6d      	ldr	r2, [pc, #436]	; (8005084 <turning_table2+0x218>)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004ed4:	4a6b      	ldr	r2, [pc, #428]	; (8005084 <turning_table2+0x218>)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004eda:	4a6a      	ldr	r2, [pc, #424]	; (8005084 <turning_table2+0x218>)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004ee0:	4a68      	ldr	r2, [pc, #416]	; (8005084 <turning_table2+0x218>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004ee6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	db03      	blt.n	8004efc <turning_table2+0x90>
 8004ef4:	4a64      	ldr	r2, [pc, #400]	; (8005088 <turning_table2+0x21c>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6053      	str	r3, [r2, #4]
 8004efa:	e006      	b.n	8004f0a <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8004efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f00:	eef1 7a67 	vneg.f32	s15, s15
 8004f04:	4b60      	ldr	r3, [pc, #384]	; (8005088 <turning_table2+0x21c>)
 8004f06:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004f0a:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <turning_table2+0x21c>)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004f10:	4b5d      	ldr	r3, [pc, #372]	; (8005088 <turning_table2+0x21c>)
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004f18:	4b5c      	ldr	r3, [pc, #368]	; (800508c <turning_table2+0x220>)
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004f20:	4b5a      	ldr	r3, [pc, #360]	; (800508c <turning_table2+0x220>)
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004f28:	4b58      	ldr	r3, [pc, #352]	; (800508c <turning_table2+0x220>)
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004f30:	4b57      	ldr	r3, [pc, #348]	; (8005090 <turning_table2+0x224>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004f36:	4b57      	ldr	r3, [pc, #348]	; (8005094 <turning_table2+0x228>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8004f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	dd0e      	ble.n	8004f68 <turning_table2+0xfc>
 8004f4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	dd05      	ble.n	8004f68 <turning_table2+0xfc>
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <turning_table2+0x228>)
 8004f5e:	2205      	movs	r2, #5
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	4a49      	ldr	r2, [pc, #292]	; (8005088 <turning_table2+0x21c>)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8004f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	dd14      	ble.n	8004fa0 <turning_table2+0x134>
 8004f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f7a:	eef1 7a67 	vneg.f32	s15, s15
 8004f7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8a:	d509      	bpl.n	8004fa0 <turning_table2+0x134>
 8004f8c:	4b41      	ldr	r3, [pc, #260]	; (8005094 <turning_table2+0x228>)
 8004f8e:	2206      	movs	r2, #6
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f96:	eef1 7a67 	vneg.f32	s15, s15
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <turning_table2+0x21c>)
 8004f9c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8004fa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d514      	bpl.n	8004fd8 <turning_table2+0x16c>
 8004fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fb2:	eef1 7a67 	vneg.f32	s15, s15
 8004fb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	dd09      	ble.n	8004fd8 <turning_table2+0x16c>
 8004fc4:	4b33      	ldr	r3, [pc, #204]	; (8005094 <turning_table2+0x228>)
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fce:	eef1 7a67 	vneg.f32	s15, s15
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <turning_table2+0x21c>)
 8004fd4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004fd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d50e      	bpl.n	8005004 <turning_table2+0x198>
 8004fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff6:	d505      	bpl.n	8005004 <turning_table2+0x198>
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <turning_table2+0x228>)
 8004ffa:	2206      	movs	r2, #6
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <turning_table2+0x21c>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <turning_table2+0x22c>)
 8005006:	2202      	movs	r2, #2
 8005008:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 800500a:	f003 ff15 	bl	8008e38 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 800500e:	bf00      	nop
 8005010:	4b20      	ldr	r3, [pc, #128]	; (8005094 <turning_table2+0x228>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b04      	cmp	r3, #4
 8005018:	d1fa      	bne.n	8005010 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 800501a:	edd7 7a03 	vldr	s15, [r7, #12]
 800501e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d10f      	bne.n	8005048 <turning_table2+0x1dc>
		wait_ms_NoReset(300);
 8005028:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800502c:	f004 f9dc 	bl	80093e8 <wait_ms_NoReset>
		modeacc = 0;
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <turning_table2+0x22c>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8005036:	2003      	movs	r0, #3
 8005038:	f003 fed8 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800503c:	2003      	movs	r0, #3
 800503e:	f003 fead 	bl	8008d9c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8005042:	2064      	movs	r0, #100	; 0x64
 8005044:	f004 f9d0 	bl	80093e8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <turning_table2+0x230>)
 800504a:	ed93 7a00 	vldr	s14, [r3]
 800504e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <turning_table2+0x230>)
 8005058:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 800505c:	f003 fefa 	bl	8008e54 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <turning_table2+0x234>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <turning_table2+0x238>)
 8005066:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <turning_table2+0x23c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <turning_table2+0x240>)
 800506e:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <turning_table2+0x21c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	ee07 3a90 	vmov	s15, r3
}
 8005078:	eeb0 0a67 	vmov.f32	s0, s15
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2000050c 	.word	0x2000050c
 8005088:	200004e8 	.word	0x200004e8
 800508c:	200004dc 	.word	0x200004dc
 8005090:	20000811 	.word	0x20000811
 8005094:	20000810 	.word	0x20000810
 8005098:	20000534 	.word	0x20000534
 800509c:	20000268 	.word	0x20000268
 80050a0:	20000228 	.word	0x20000228
 80050a4:	20000258 	.word	0x20000258
 80050a8:	2000022c 	.word	0x2000022c
 80050ac:	2000025c 	.word	0x2000025c

080050b0 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80050ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80050be:	ed87 1a03 	vstr	s2, [r7, #12]
 80050c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80050c6:	ed87 2a01 	vstr	s4, [r7, #4]
 80050ca:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80050ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80050d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80050d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80050da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050de:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80050e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80050e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80050ea:	ed97 7a00 	vldr	s14, [r7]
 80050ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80050f6:	edd7 7a00 	vldr	s15, [r7]
 80050fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	d505      	bpl.n	8005110 <slalom_table2+0x60>
 8005104:	edd7 7a00 	vldr	s15, [r7]
 8005108:	eef1 7a67 	vneg.f32	s15, s15
 800510c:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <slalom_table2+0x1dc>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8005116:	4a5d      	ldr	r2, [pc, #372]	; (800528c <slalom_table2+0x1dc>)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 800511c:	4a5b      	ldr	r2, [pc, #364]	; (800528c <slalom_table2+0x1dc>)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8005122:	4a5a      	ldr	r2, [pc, #360]	; (800528c <slalom_table2+0x1dc>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8005128:	4a58      	ldr	r2, [pc, #352]	; (800528c <slalom_table2+0x1dc>)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800512e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	db03      	blt.n	8005144 <slalom_table2+0x94>
 800513c:	4a54      	ldr	r2, [pc, #336]	; (8005290 <slalom_table2+0x1e0>)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6053      	str	r3, [r2, #4]
 8005142:	e006      	b.n	8005152 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8005144:	edd7 7a00 	vldr	s15, [r7]
 8005148:	eef1 7a67 	vneg.f32	s15, s15
 800514c:	4b50      	ldr	r3, [pc, #320]	; (8005290 <slalom_table2+0x1e0>)
 800514e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8005152:	4a4f      	ldr	r2, [pc, #316]	; (8005290 <slalom_table2+0x1e0>)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8005158:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <slalom_table2+0x1e0>)
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8005160:	4a4c      	ldr	r2, [pc, #304]	; (8005294 <slalom_table2+0x1e4>)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8005166:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <slalom_table2+0x1e4>)
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800516e:	4b49      	ldr	r3, [pc, #292]	; (8005294 <slalom_table2+0x1e4>)
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8005176:	4b48      	ldr	r3, [pc, #288]	; (8005298 <slalom_table2+0x1e8>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800517c:	4b47      	ldr	r3, [pc, #284]	; (800529c <slalom_table2+0x1ec>)
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8005182:	edd7 7a04 	vldr	s15, [r7, #16]
 8005186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	dd0e      	ble.n	80051ae <slalom_table2+0xfe>
 8005190:	ed97 7a07 	vldr	s14, [r7, #28]
 8005194:	edd7 7a04 	vldr	s15, [r7, #16]
 8005198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	dd05      	ble.n	80051ae <slalom_table2+0xfe>
 80051a2:	4b3e      	ldr	r3, [pc, #248]	; (800529c <slalom_table2+0x1ec>)
 80051a4:	2205      	movs	r2, #5
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	4a39      	ldr	r2, [pc, #228]	; (8005290 <slalom_table2+0x1e0>)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80051ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80051b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	dd14      	ble.n	80051e6 <slalom_table2+0x136>
 80051bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80051c0:	eef1 7a67 	vneg.f32	s15, s15
 80051c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80051c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	d509      	bpl.n	80051e6 <slalom_table2+0x136>
 80051d2:	4b32      	ldr	r3, [pc, #200]	; (800529c <slalom_table2+0x1ec>)
 80051d4:	2206      	movs	r2, #6
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	edd7 7a00 	vldr	s15, [r7]
 80051dc:	eef1 7a67 	vneg.f32	s15, s15
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <slalom_table2+0x1e0>)
 80051e2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80051e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80051ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	d514      	bpl.n	800521e <slalom_table2+0x16e>
 80051f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80051f8:	eef1 7a67 	vneg.f32	s15, s15
 80051fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8005200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005208:	dd09      	ble.n	800521e <slalom_table2+0x16e>
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <slalom_table2+0x1ec>)
 800520c:	2205      	movs	r2, #5
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	edd7 7a00 	vldr	s15, [r7]
 8005214:	eef1 7a67 	vneg.f32	s15, s15
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <slalom_table2+0x1e0>)
 800521a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 800521e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	d50e      	bpl.n	800524a <slalom_table2+0x19a>
 800522c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005230:	edd7 7a04 	vldr	s15, [r7, #16]
 8005234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d505      	bpl.n	800524a <slalom_table2+0x19a>
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <slalom_table2+0x1ec>)
 8005240:	2206      	movs	r2, #6
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <slalom_table2+0x1e0>)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <slalom_table2+0x1f0>)
 800524c:	2204      	movs	r2, #4
 800524e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8005250:	f003 fdf2 	bl	8008e38 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8005254:	bf00      	nop
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <slalom_table2+0x1ec>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b04      	cmp	r3, #4
 800525e:	d1fa      	bne.n	8005256 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8005260:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <slalom_table2+0x1f4>)
 8005262:	ed93 7a00 	vldr	s14, [r3]
 8005266:	edd7 7a04 	vldr	s15, [r7, #16]
 800526a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <slalom_table2+0x1f4>)
 8005270:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8005274:	f003 fdee 	bl	8008e54 <pl_DriveMotor_stop>

	return turning.velocity;
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <slalom_table2+0x1e0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	ee07 3a90 	vmov	s15, r3
}
 8005280:	eeb0 0a67 	vmov.f32	s0, s15
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2000050c 	.word	0x2000050c
 8005290:	200004e8 	.word	0x200004e8
 8005294:	200004dc 	.word	0x200004dc
 8005298:	20000811 	.word	0x20000811
 800529c:	20000810 	.word	0x20000810
 80052a0:	20000534 	.word	0x20000534
 80052a4:	20000268 	.word	0x20000268

080052a8 <no_angle>:

void no_angle(void){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <no_angle+0x88>)
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 80052b4:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <no_angle+0x88>)
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <no_angle+0x88>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <no_angle+0x8c>)
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <no_angle+0x8c>)
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80052d4:	4b17      	ldr	r3, [pc, #92]	; (8005334 <no_angle+0x8c>)
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 80052dc:	4b16      	ldr	r3, [pc, #88]	; (8005338 <no_angle+0x90>)
 80052de:	2203      	movs	r2, #3
 80052e0:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80052e2:	f003 fda9 	bl	8008e38 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80052e6:	e002      	b.n	80052ee <no_angle+0x46>
		HAL_Delay(1);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f015 fba3 	bl	801aa34 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <no_angle+0x94>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80052f6:	ddf7      	ble.n	80052e8 <no_angle+0x40>
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <no_angle+0x94>)
 80052fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005302:	ddf1      	ble.n	80052e8 <no_angle+0x40>
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <no_angle+0x94>)
 8005306:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800530a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800530e:	ddeb      	ble.n	80052e8 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8005310:	4b09      	ldr	r3, [pc, #36]	; (8005338 <no_angle+0x90>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8005316:	f003 fd9d 	bl	8008e54 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <no_angle+0x98>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <no_angle+0x9c>)
 8005320:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <no_angle+0xa0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a09      	ldr	r2, [pc, #36]	; (800534c <no_angle+0xa4>)
 8005328:	6013      	str	r3, [r2, #0]

}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	200004e8 	.word	0x200004e8
 8005334:	200004dc 	.word	0x200004dc
 8005338:	20000534 	.word	0x20000534
 800533c:	200002bc 	.word	0x200002bc
 8005340:	20000228 	.word	0x20000228
 8005344:	20000258 	.word	0x20000258
 8005348:	2000022c 	.word	0x2000022c
 800534c:	2000025c 	.word	0x2000025c

08005350 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8005350:	b5b0      	push	{r4, r5, r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	ed87 0a03 	vstr	s0, [r7, #12]
 800535a:	edc7 0a02 	vstr	s1, [r7, #8]
 800535e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8005362:	4a3d      	ldr	r2, [pc, #244]	; (8005458 <mollifier_slalom_table+0x108>)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8005368:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <mollifier_slalom_table+0x108>)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <mollifier_slalom_table+0x108>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <mollifier_slalom_table+0x10c>)
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800537c:	4b37      	ldr	r3, [pc, #220]	; (800545c <mollifier_slalom_table+0x10c>)
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8005384:	4a36      	ldr	r2, [pc, #216]	; (8005460 <mollifier_slalom_table+0x110>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 800538a:	4b35      	ldr	r3, [pc, #212]	; (8005460 <mollifier_slalom_table+0x110>)
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8005392:	4b33      	ldr	r3, [pc, #204]	; (8005460 <mollifier_slalom_table+0x110>)
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800539a:	4b32      	ldr	r3, [pc, #200]	; (8005464 <mollifier_slalom_table+0x114>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80053a0:	4b31      	ldr	r3, [pc, #196]	; (8005468 <mollifier_slalom_table+0x118>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 80053a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80053aa:	eef0 7ae7 	vabs.f32	s15, s15
 80053ae:	ee17 0a90 	vmov	r0, s15
 80053b2:	f7fb f8f1 	bl	8000598 <__aeabi_f2d>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80053c0:	a321      	add	r3, pc, #132	; (adr r3, 8005448 <mollifier_slalom_table+0xf8>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7fb fa67 	bl	800089c <__aeabi_ddiv>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	a31e      	add	r3, pc, #120	; (adr r3, 8005450 <mollifier_slalom_table+0x100>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f934 	bl	8000648 <__aeabi_dmul>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fb f8d5 	bl	8000598 <__aeabi_f2d>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fb fa51 	bl	800089c <__aeabi_ddiv>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f7fb fbf9 	bl	8000bf8 <__aeabi_d2f>
 8005406:	4603      	mov	r3, r0
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <mollifier_slalom_table+0x11c>)
 800540a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 800540c:	4b18      	ldr	r3, [pc, #96]	; (8005470 <mollifier_slalom_table+0x120>)
 800540e:	2206      	movs	r2, #6
 8005410:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8005412:	f003 fd11 	bl	8008e38 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8005416:	bf00      	nop
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <mollifier_slalom_table+0x118>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b04      	cmp	r3, #4
 8005420:	d1fa      	bne.n	8005418 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <mollifier_slalom_table+0x124>)
 8005424:	ed93 7a00 	vldr	s14, [r3]
 8005428:	edd7 7a02 	vldr	s15, [r7, #8]
 800542c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005430:	4b10      	ldr	r3, [pc, #64]	; (8005474 <mollifier_slalom_table+0x124>)
 8005432:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8005436:	f003 fd0d 	bl	8008e54 <pl_DriveMotor_stop>

}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bdb0      	pop	{r4, r5, r7, pc}
 8005442:	bf00      	nop
 8005444:	f3af 8000 	nop.w
 8005448:	f9db22d1 	.word	0xf9db22d1
 800544c:	3fdc6a7e 	.word	0x3fdc6a7e
 8005450:	362cef38 	.word	0x362cef38
 8005454:	3fd78b56 	.word	0x3fd78b56
 8005458:	20000524 	.word	0x20000524
 800545c:	200004e8 	.word	0x200004e8
 8005460:	200004dc 	.word	0x200004dc
 8005464:	20000811 	.word	0x20000811
 8005468:	20000810 	.word	0x20000810
 800546c:	2000080c 	.word	0x2000080c
 8005470:	20000534 	.word	0x20000534
 8005474:	20000268 	.word	0x20000268

08005478 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <no_frontwall_straight+0x70>)
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8005484:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <no_frontwall_straight+0x70>)
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 800548c:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <no_frontwall_straight+0x70>)
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <no_frontwall_straight+0x74>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <no_frontwall_straight+0x74>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <no_frontwall_straight+0x74>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <no_frontwall_straight+0x78>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <no_frontwall_straight+0x7c>)
 80054b4:	2205      	movs	r2, #5
 80054b6:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80054b8:	f003 fcbe 	bl	8008e38 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 80054bc:	2096      	movs	r0, #150	; 0x96
 80054be:	f003 ff93 	bl	80093e8 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <no_frontwall_straight+0x78>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <no_frontwall_straight+0x7c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 80054ce:	f003 fcc1 	bl	8008e54 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <no_frontwall_straight+0x80>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <no_frontwall_straight+0x84>)
 80054d8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <no_frontwall_straight+0x88>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <no_frontwall_straight+0x8c>)
 80054e0:	6013      	str	r3, [r2, #0]

}
 80054e2:	bf00      	nop
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200004e8 	.word	0x200004e8
 80054ec:	200004dc 	.word	0x200004dc
 80054f0:	2000059d 	.word	0x2000059d
 80054f4:	20000534 	.word	0x20000534
 80054f8:	20000228 	.word	0x20000228
 80054fc:	20000258 	.word	0x20000258
 8005500:	2000022c 	.word	0x2000022c
 8005504:	2000025c 	.word	0x2000025c

08005508 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6178      	str	r0, [r7, #20]
 8005510:	ed87 0a04 	vstr	s0, [r7, #16]
 8005514:	edc7 0a03 	vstr	s1, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	ed87 1a01 	vstr	s2, [r7, #4]
 800551e:	edc7 1a00 	vstr	s3, [r7]

float Im;
float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 8005522:	4bdb      	ldr	r3, [pc, #876]	; (8005890 <feedforward_const_accel+0x388>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d104      	bne.n	8005534 <feedforward_const_accel+0x2c>
	Im = 0.00000301;
 800552a:	4bda      	ldr	r3, [pc, #872]	; (8005894 <feedforward_const_accel+0x38c>)
 800552c:	61fb      	str	r3, [r7, #28]
	ImT = 0.00000052;
 800552e:	4bda      	ldr	r3, [pc, #872]	; (8005898 <feedforward_const_accel+0x390>)
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <feedforward_const_accel+0x34>
}else{
	Im = 0.00000121;
 8005534:	4bd9      	ldr	r3, [pc, #868]	; (800589c <feedforward_const_accel+0x394>)
 8005536:	61fb      	str	r3, [r7, #28]
	ImT = 0.00000035;
 8005538:	4bd9      	ldr	r3, [pc, #868]	; (80058a0 <feedforward_const_accel+0x398>)
 800553a:	61bb      	str	r3, [r7, #24]

}
if(straight_velocity>3000){
 800553c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005540:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 80058a4 <feedforward_const_accel+0x39c>
 8005544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	dd01      	ble.n	8005552 <feedforward_const_accel+0x4a>
	Im = 0.00000401;
 800554e:	4bd6      	ldr	r3, [pc, #856]	; (80058a8 <feedforward_const_accel+0x3a0>)
 8005550:	61fb      	str	r3, [r7, #28]
}

	if (straight_velocity >= 0) {
 8005552:	edd7 7a04 	vldr	s15, [r7, #16]
 8005556:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	db7d      	blt.n	800565c <feedforward_const_accel+0x154>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8005560:	edd7 7a07 	vldr	s15, [r7, #28]
 8005564:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 80058ac <feedforward_const_accel+0x3a4>
 8005568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8005570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005574:	edd7 7a03 	vldr	s15, [r7, #12]
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80058b0 <feedforward_const_accel+0x3a8>
 8005580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005584:	ee16 0a90 	vmov	r0, s13
 8005588:	f7fb f806 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 800558c:	a3b6      	add	r3, pc, #728	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fb f983 	bl	800089c <__aeabi_ddiv>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055a6:	f7fb f979 	bl	800089c <__aeabi_ddiv>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	a3af      	add	r3, pc, #700	; (adr r3, 8005870 <feedforward_const_accel+0x368>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa fe90 	bl	80002dc <__adddf3>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005878 <feedforward_const_accel+0x370>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fb f83d 	bl	8000648 <__aeabi_dmul>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	a3aa      	add	r3, pc, #680	; (adr r3, 8005880 <feedforward_const_accel+0x378>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f95e 	bl	800089c <__aeabi_ddiv>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80055e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80055ec:	eddf 6ab0 	vldr	s13, [pc, #704]	; 80058b0 <feedforward_const_accel+0x3a8>
 80055f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80058ac <feedforward_const_accel+0x3a4>
 80055f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005600:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005604:	ee16 0a90 	vmov	r0, s13
 8005608:	f7fa ffc6 	bl	8000598 <__aeabi_f2d>
 800560c:	a39e      	add	r3, pc, #632	; (adr r3, 8005888 <feedforward_const_accel+0x380>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f7fb f819 	bl	8000648 <__aeabi_dmul>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4610      	mov	r0, r2
 800561c:	4619      	mov	r1, r3
 800561e:	a392      	add	r3, pc, #584	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fb f93a 	bl	800089c <__aeabi_ddiv>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005638:	f7fb f930 	bl	800089c <__aeabi_ddiv>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4620      	mov	r0, r4
 8005642:	4629      	mov	r1, r5
 8005644:	f7fa fe4a 	bl	80002dc <__adddf3>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	f7fb fad2 	bl	8000bf8 <__aeabi_d2f>
 8005654:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e07c      	b.n	8005756 <feedforward_const_accel+0x24e>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800565c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005660:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80058ac <feedforward_const_accel+0x3a4>
 8005664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005668:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800566c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005670:	edd7 7a03 	vldr	s15, [r7, #12]
 8005674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005678:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80058b0 <feedforward_const_accel+0x3a8>
 800567c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005680:	ee16 0a90 	vmov	r0, s13
 8005684:	f7fa ff88 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8005688:	a377      	add	r3, pc, #476	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fb f905 	bl	800089c <__aeabi_ddiv>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056a2:	f7fb f8fb 	bl	800089c <__aeabi_ddiv>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	a370      	add	r3, pc, #448	; (adr r3, 8005870 <feedforward_const_accel+0x368>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f7fa fe10 	bl	80002d8 <__aeabi_dsub>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	a36d      	add	r3, pc, #436	; (adr r3, 8005878 <feedforward_const_accel+0x370>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa ffbf 	bl	8000648 <__aeabi_dmul>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4610      	mov	r0, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	a36b      	add	r3, pc, #428	; (adr r3, 8005880 <feedforward_const_accel+0x378>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fb f8e0 	bl	800089c <__aeabi_ddiv>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80056e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80056e8:	eddf 6a71 	vldr	s13, [pc, #452]	; 80058b0 <feedforward_const_accel+0x3a8>
 80056ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056f0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80058ac <feedforward_const_accel+0x3a4>
 80056f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056f8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80056fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005700:	ee16 0a90 	vmov	r0, s13
 8005704:	f7fa ff48 	bl	8000598 <__aeabi_f2d>
 8005708:	a35f      	add	r3, pc, #380	; (adr r3, 8005888 <feedforward_const_accel+0x380>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa ff9b 	bl	8000648 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	a353      	add	r3, pc, #332	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fb f8bc 	bl	800089c <__aeabi_ddiv>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4610      	mov	r0, r2
 800572a:	4619      	mov	r1, r3
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005734:	f7fb f8b2 	bl	800089c <__aeabi_ddiv>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fa fdcc 	bl	80002dc <__adddf3>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	f7fb fa54 	bl	8000bf8 <__aeabi_d2f>
 8005750:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8005756:	edd7 7a01 	vldr	s15, [r7, #4]
 800575a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	f2c0 80a7 	blt.w	80058b4 <feedforward_const_accel+0x3ac>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8005766:	edd7 7a06 	vldr	s15, [r7, #24]
 800576a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80058ac <feedforward_const_accel+0x3a4>
 800576e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005772:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8005776:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800577a:	edd7 7a00 	vldr	s15, [r7]
 800577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005782:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80058b0 <feedforward_const_accel+0x3a8>
 8005786:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800578a:	ee16 0a90 	vmov	r0, s13
 800578e:	f7fa ff03 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8005792:	a335      	add	r3, pc, #212	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fb f880 	bl	800089c <__aeabi_ddiv>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ac:	f7fb f876 	bl	800089c <__aeabi_ddiv>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	a32d      	add	r3, pc, #180	; (adr r3, 8005870 <feedforward_const_accel+0x368>)
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fa fd8d 	bl	80002dc <__adddf3>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	a32b      	add	r3, pc, #172	; (adr r3, 8005878 <feedforward_const_accel+0x370>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f7fa ff3a 	bl	8000648 <__aeabi_dmul>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	a328      	add	r3, pc, #160	; (adr r3, 8005880 <feedforward_const_accel+0x378>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f7fb f85b 	bl	800089c <__aeabi_ddiv>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4614      	mov	r4, r2
 80057ec:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80057ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80057f2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80058b0 <feedforward_const_accel+0x3a8>
 80057f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80058ac <feedforward_const_accel+0x3a4>
 80057fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005802:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005806:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800580a:	ee16 0a90 	vmov	r0, s13
 800580e:	f7fa fec3 	bl	8000598 <__aeabi_f2d>
 8005812:	a31d      	add	r3, pc, #116	; (adr r3, 8005888 <feedforward_const_accel+0x380>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fa ff16 	bl	8000648 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	a310      	add	r3, pc, #64	; (adr r3, 8005868 <feedforward_const_accel+0x360>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fb f837 	bl	800089c <__aeabi_ddiv>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800583e:	f7fb f82d 	bl	800089c <__aeabi_ddiv>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fa fd47 	bl	80002dc <__adddf3>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	f7fb f9cf 	bl	8000bf8 <__aeabi_d2f>
 800585a:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 8005860:	e0a5      	b.n	80059ae <feedforward_const_accel+0x4a6>
 8005862:	bf00      	nop
 8005864:	f3af 8000 	nop.w
 8005868:	69243a16 	.word	0x69243a16
 800586c:	3f9abf15 	.word	0x3f9abf15
 8005870:	eb1c432d 	.word	0xeb1c432d
 8005874:	3f1a36e2 	.word	0x3f1a36e2
 8005878:	51eb851f 	.word	0x51eb851f
 800587c:	3ff11eb8 	.word	0x3ff11eb8
 8005880:	b7952d23 	.word	0xb7952d23
 8005884:	3f569c23 	.word	0x3f569c23
 8005888:	761b0f50 	.word	0x761b0f50
 800588c:	3f66bf29 	.word	0x3f66bf29
 8005890:	20000814 	.word	0x20000814
 8005894:	3649ff68 	.word	0x3649ff68
 8005898:	350b9621 	.word	0x350b9621
 800589c:	35a26749 	.word	0x35a26749
 80058a0:	34bbe7a2 	.word	0x34bbe7a2
 80058a4:	453b8000 	.word	0x453b8000
 80058a8:	36868da3 	.word	0x36868da3
 80058ac:	421c0000 	.word	0x421c0000
 80058b0:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80058b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80058b8:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80058ac <feedforward_const_accel+0x3a4>
 80058bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c0:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80058c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80058c8:	edd7 7a00 	vldr	s15, [r7]
 80058cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d0:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80058b0 <feedforward_const_accel+0x3a8>
 80058d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058d8:	ee16 0a90 	vmov	r0, s13
 80058dc:	f7fa fe5c 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80058e0:	a337      	add	r3, pc, #220	; (adr r3, 80059c0 <feedforward_const_accel+0x4b8>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa ffd9 	bl	800089c <__aeabi_ddiv>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058fa:	f7fa ffcf 	bl	800089c <__aeabi_ddiv>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	a332      	add	r3, pc, #200	; (adr r3, 80059d0 <feedforward_const_accel+0x4c8>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fce4 	bl	80002d8 <__aeabi_dsub>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	a32f      	add	r3, pc, #188	; (adr r3, 80059d8 <feedforward_const_accel+0x4d0>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fe93 	bl	8000648 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	a32d      	add	r3, pc, #180	; (adr r3, 80059e0 <feedforward_const_accel+0x4d8>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa ffb4 	bl	800089c <__aeabi_ddiv>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4614      	mov	r4, r2
 800593a:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800593c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005940:	eddf 6a21 	vldr	s13, [pc, #132]	; 80059c8 <feedforward_const_accel+0x4c0>
 8005944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005948:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80059cc <feedforward_const_accel+0x4c4>
 800594c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005950:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005954:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005958:	ee16 0a90 	vmov	r0, s13
 800595c:	f7fa fe1c 	bl	8000598 <__aeabi_f2d>
 8005960:	a315      	add	r3, pc, #84	; (adr r3, 80059b8 <feedforward_const_accel+0x4b0>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fe6f 	bl	8000648 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	a313      	add	r3, pc, #76	; (adr r3, 80059c0 <feedforward_const_accel+0x4b8>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f7fa ff90 	bl	800089c <__aeabi_ddiv>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800598c:	f7fa ff86 	bl	800089c <__aeabi_ddiv>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fca0 	bl	80002dc <__adddf3>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4610      	mov	r0, r2
 80059a2:	4619      	mov	r1, r3
 80059a4:	f7fb f928 	bl	8000bf8 <__aeabi_d2f>
 80059a8:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	601a      	str	r2, [r3, #0]
}
 80059ae:	bf00      	nop
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bdb0      	pop	{r4, r5, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	761b0f50 	.word	0x761b0f50
 80059bc:	3f66bf29 	.word	0x3f66bf29
 80059c0:	69243a16 	.word	0x69243a16
 80059c4:	3f9abf15 	.word	0x3f9abf15
 80059c8:	447a0000 	.word	0x447a0000
 80059cc:	421c0000 	.word	0x421c0000
 80059d0:	eb1c432d 	.word	0xeb1c432d
 80059d4:	3f1a36e2 	.word	0x3f1a36e2
 80059d8:	51eb851f 	.word	0x51eb851f
 80059dc:	3ff11eb8 	.word	0x3ff11eb8
 80059e0:	b7952d23 	.word	0xb7952d23
 80059e4:	3f569c23 	.word	0x3f569c23

080059e8 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <PID_Init+0x44>)
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <PID_Init+0x48>)
 80059f0:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <PID_Init+0x4c>)
 80059f4:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <PID_Init+0x50>)
 80059f6:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <PID_Init+0x54>)
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8005a00:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <PID_Init+0x58>)
 8005a02:	4a10      	ldr	r2, [pc, #64]	; (8005a44 <PID_Init+0x5c>)
 8005a04:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <PID_Init+0x60>)
 8005a08:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <PID_Init+0x64>)
 8005a0a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8005a0c:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <PID_Init+0x68>)
 8005a0e:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <PID_Init+0x6c>)
 8005a10:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <PID_Init+0x70>)
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <PID_Init+0x74>)
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]

}
 8005a22:	bf00      	nop
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	20000560 	.word	0x20000560
 8005a30:	40466666 	.word	0x40466666
 8005a34:	20000564 	.word	0x20000564
 8005a38:	3da3d70a 	.word	0x3da3d70a
 8005a3c:	20000568 	.word	0x20000568
 8005a40:	2000056c 	.word	0x2000056c
 8005a44:	3fcccccd 	.word	0x3fcccccd
 8005a48:	20000570 	.word	0x20000570
 8005a4c:	3d75c28f 	.word	0x3d75c28f
 8005a50:	20000574 	.word	0x20000574
 8005a54:	3b03126f 	.word	0x3b03126f
 8005a58:	20000540 	.word	0x20000540
 8005a5c:	20000550 	.word	0x20000550

08005a60 <clear_Ierror>:

void clear_Ierror(void) {
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <clear_Ierror+0x20>)
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <clear_Ierror+0x24>)
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000540 	.word	0x20000540
 8005a84:	20000550 	.word	0x20000550

08005a88 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a96:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 8005aa6:	4b86      	ldr	r3, [pc, #536]	; (8005cc0 <EncoderGyro_PID+0x238>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d111      	bne.n	8005ad2 <EncoderGyro_PID+0x4a>
		Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8005aae:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <EncoderGyro_PID+0x23c>)
 8005ab0:	4a85      	ldr	r2, [pc, #532]	; (8005cc8 <EncoderGyro_PID+0x240>)
 8005ab2:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8005ab4:	4b85      	ldr	r3, [pc, #532]	; (8005ccc <EncoderGyro_PID+0x244>)
 8005ab6:	4a86      	ldr	r2, [pc, #536]	; (8005cd0 <EncoderGyro_PID+0x248>)
 8005ab8:	601a      	str	r2, [r3, #0]
		Ksd = -0.001; //D項の制御量直進*****************************************************
 8005aba:	4b86      	ldr	r3, [pc, #536]	; (8005cd4 <EncoderGyro_PID+0x24c>)
 8005abc:	4a86      	ldr	r2, [pc, #536]	; (8005cd8 <EncoderGyro_PID+0x250>)
 8005abe:	601a      	str	r2, [r3, #0]
		Ktp = 4.6; //295//P項の制御量旋回*****************************************************
 8005ac0:	4b86      	ldr	r3, [pc, #536]	; (8005cdc <EncoderGyro_PID+0x254>)
 8005ac2:	4a87      	ldr	r2, [pc, #540]	; (8005ce0 <EncoderGyro_PID+0x258>)
 8005ac4:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8005ac6:	4b87      	ldr	r3, [pc, #540]	; (8005ce4 <EncoderGyro_PID+0x25c>)
 8005ac8:	4a87      	ldr	r2, [pc, #540]	; (8005ce8 <EncoderGyro_PID+0x260>)
 8005aca:	601a      	str	r2, [r3, #0]
		Ktd = -0.01; //205//D項の制御量旋回*****************************************************
 8005acc:	4b87      	ldr	r3, [pc, #540]	; (8005cec <EncoderGyro_PID+0x264>)
 8005ace:	4a88      	ldr	r2, [pc, #544]	; (8005cf0 <EncoderGyro_PID+0x268>)
 8005ad0:	601a      	str	r2, [r3, #0]
	}
	if(straight_velocity>3000){
 8005ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ad6:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8005cf4 <EncoderGyro_PID+0x26c>
 8005ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	dd08      	ble.n	8005af6 <EncoderGyro_PID+0x6e>
		Ksp = 2.1; //3//P項の制御量直進*****************************************************
 8005ae4:	4b77      	ldr	r3, [pc, #476]	; (8005cc4 <EncoderGyro_PID+0x23c>)
 8005ae6:	4a84      	ldr	r2, [pc, #528]	; (8005cf8 <EncoderGyro_PID+0x270>)
 8005ae8:	601a      	str	r2, [r3, #0]
		Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8005aea:	4b78      	ldr	r3, [pc, #480]	; (8005ccc <EncoderGyro_PID+0x244>)
 8005aec:	4a83      	ldr	r2, [pc, #524]	; (8005cfc <EncoderGyro_PID+0x274>)
 8005aee:	601a      	str	r2, [r3, #0]
		Ksd = -0.001; //D項の制御量直進*****************************************************
 8005af0:	4b78      	ldr	r3, [pc, #480]	; (8005cd4 <EncoderGyro_PID+0x24c>)
 8005af2:	4a79      	ldr	r2, [pc, #484]	; (8005cd8 <EncoderGyro_PID+0x250>)
 8005af4:	601a      	str	r2, [r3, #0]

//	if (straight_velocity == 0) {
//		reset_speed();
//	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8005af6:	4b82      	ldr	r3, [pc, #520]	; (8005d00 <EncoderGyro_PID+0x278>)
 8005af8:	edd3 7a00 	vldr	s15, [r3]
 8005afc:	eef0 7ae7 	vabs.f32	s15, s15
 8005b00:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8005d04 <EncoderGyro_PID+0x27c>
 8005b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	d520      	bpl.n	8005b50 <EncoderGyro_PID+0xc8>
 8005b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b12:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005d08 <EncoderGyro_PID+0x280>
 8005b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	db17      	blt.n	8005b50 <EncoderGyro_PID+0xc8>
 8005b20:	4b7a      	ldr	r3, [pc, #488]	; (8005d0c <EncoderGyro_PID+0x284>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d013      	beq.n	8005b50 <EncoderGyro_PID+0xc8>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8005b28:	4b79      	ldr	r3, [pc, #484]	; (8005d10 <EncoderGyro_PID+0x288>)
 8005b2a:	ed93 7a00 	vldr	s14, [r3]
 8005b2e:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <EncoderGyro_PID+0x28c>)
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b40:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b48:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b4a:	edc3 7a00 	vstr	s15, [r3]
 8005b4e:	e01a      	b.n	8005b86 <EncoderGyro_PID+0xfe>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8005b50:	4b72      	ldr	r3, [pc, #456]	; (8005d1c <EncoderGyro_PID+0x294>)
 8005b52:	ed93 7a00 	vldr	s14, [r3]
 8005b56:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <EncoderGyro_PID+0x298>)
 8005b58:	edd3 7a00 	vldr	s15, [r3]
 8005b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b68:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b70:	4b69      	ldr	r3, [pc, #420]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b72:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 8005b76:	4b6b      	ldr	r3, [pc, #428]	; (8005d24 <EncoderGyro_PID+0x29c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a66      	ldr	r2, [pc, #408]	; (8005d14 <EncoderGyro_PID+0x28c>)
 8005b7c:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8005b7e:	4b6a      	ldr	r3, [pc, #424]	; (8005d28 <EncoderGyro_PID+0x2a0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <EncoderGyro_PID+0x288>)
 8005b84:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8005b86:	4b64      	ldr	r3, [pc, #400]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b88:	ed93 7a00 	vldr	s14, [r3]
 8005b8c:	4b62      	ldr	r3, [pc, #392]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b96:	4b60      	ldr	r3, [pc, #384]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b98:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8005b9c:	4b5e      	ldr	r3, [pc, #376]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5d      	ldr	r2, [pc, #372]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005ba2:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8005ba4:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005ba6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005baa:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005bac:	edd3 7a00 	vldr	s15, [r3]
 8005bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb4:	4b58      	ldr	r3, [pc, #352]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005bb6:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8005bba:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005bbc:	ed93 7a00 	vldr	s14, [r3]
 8005bc0:	4b40      	ldr	r3, [pc, #256]	; (8005cc4 <EncoderGyro_PID+0x23c>)
 8005bc2:	edd3 7a00 	vldr	s15, [r3]
 8005bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005bcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <EncoderGyro_PID+0x244>)
 8005bd2:	edd3 7a00 	vldr	s15, [r3]
 8005bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bde:	4b4e      	ldr	r3, [pc, #312]	; (8005d18 <EncoderGyro_PID+0x290>)
 8005be0:	edd3 6a03 	vldr	s13, [r3, #12]
 8005be4:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <EncoderGyro_PID+0x24c>)
 8005be6:	edd3 7a00 	vldr	s15, [r3]
 8005bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf2:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <EncoderGyro_PID+0x278>)
 8005bf8:	edd3 7a00 	vldr	s15, [r3]
 8005bfc:	ed97 7a00 	vldr	s14, [r7]
 8005c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c04:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c06:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8005c0a:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c0c:	ed93 7a00 	vldr	s14, [r3]
 8005c10:	4b46      	ldr	r3, [pc, #280]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c1c:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8005c20:	4b42      	ldr	r3, [pc, #264]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c26:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8005c28:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005c2e:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c30:	edd3 7a00 	vldr	s15, [r3]
 8005c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c38:	4b3c      	ldr	r3, [pc, #240]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c3a:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8005c3e:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c40:	ed93 7a00 	vldr	s14, [r3]
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <EncoderGyro_PID+0x254>)
 8005c46:	edd3 7a00 	vldr	s15, [r3]
 8005c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c4e:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c50:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <EncoderGyro_PID+0x25c>)
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8005c62:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <EncoderGyro_PID+0x2a4>)
 8005c64:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <EncoderGyro_PID+0x264>)
 8005c6a:	edd3 7a00 	vldr	s15, [r3]
 8005c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8005c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c76:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8005c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c7e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005d30 <EncoderGyro_PID+0x2a8>
 8005c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005c86:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <EncoderGyro_PID+0x2ac>)
 8005c88:	edd3 7a00 	vldr	s15, [r3]
 8005c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8005c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c9a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005d30 <EncoderGyro_PID+0x2a8>
 8005c9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ca2:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <EncoderGyro_PID+0x2ac>)
 8005ca4:	edd3 7a00 	vldr	s15, [r3]
 8005ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	edc3 7a00 	vstr	s15, [r3]

}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000814 	.word	0x20000814
 8005cc4:	20000560 	.word	0x20000560
 8005cc8:	40466666 	.word	0x40466666
 8005ccc:	20000564 	.word	0x20000564
 8005cd0:	3db851ec 	.word	0x3db851ec
 8005cd4:	20000568 	.word	0x20000568
 8005cd8:	ba83126f 	.word	0xba83126f
 8005cdc:	2000056c 	.word	0x2000056c
 8005ce0:	40933333 	.word	0x40933333
 8005ce4:	20000570 	.word	0x20000570
 8005ce8:	3d8f5c29 	.word	0x3d8f5c29
 8005cec:	20000574 	.word	0x20000574
 8005cf0:	bc23d70a 	.word	0xbc23d70a
 8005cf4:	453b8000 	.word	0x453b8000
 8005cf8:	40066666 	.word	0x40066666
 8005cfc:	3da3d70a 	.word	0x3da3d70a
 8005d00:	2000026c 	.word	0x2000026c
 8005d04:	42f00000 	.word	0x42f00000
 8005d08:	42c80000 	.word	0x42c80000
 8005d0c:	20000534 	.word	0x20000534
 8005d10:	2000025c 	.word	0x2000025c
 8005d14:	20000258 	.word	0x20000258
 8005d18:	20000540 	.word	0x20000540
 8005d1c:	2000022c 	.word	0x2000022c
 8005d20:	20000228 	.word	0x20000228
 8005d24:	20000238 	.word	0x20000238
 8005d28:	2000023c 	.word	0x2000023c
 8005d2c:	20000550 	.word	0x20000550
 8005d30:	44d1e000 	.word	0x44d1e000
 8005d34:	200004d8 	.word	0x200004d8

08005d38 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8005d3c:	4b3f      	ldr	r3, [pc, #252]	; (8005e3c <init_WallControl+0x104>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8005d42:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <init_WallControl+0x108>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8005d48:	4b3e      	ldr	r3, [pc, #248]	; (8005e44 <init_WallControl+0x10c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <init_WallControl+0x110>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8005d54:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <init_WallControl+0x114>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8005d5a:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <init_WallControl+0x118>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8005d60:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <init_WallControl+0x11c>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8005d66:	4b3c      	ldr	r3, [pc, #240]	; (8005e58 <init_WallControl+0x120>)
 8005d68:	4a3c      	ldr	r2, [pc, #240]	; (8005e5c <init_WallControl+0x124>)
 8005d6a:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8005d6c:	4b3c      	ldr	r3, [pc, #240]	; (8005e60 <init_WallControl+0x128>)
 8005d6e:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <init_WallControl+0x12c>)
 8005d70:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8005d72:	4b3d      	ldr	r3, [pc, #244]	; (8005e68 <init_WallControl+0x130>)
 8005d74:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <init_WallControl+0x134>)
 8005d76:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8005d78:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <init_WallControl+0x138>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8005d7e:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <init_WallControl+0x13c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <init_WallControl+0x140>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	; (8005e7c <init_WallControl+0x144>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8005d90:	4b3b      	ldr	r3, [pc, #236]	; (8005e80 <init_WallControl+0x148>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8005d96:	4b3b      	ldr	r3, [pc, #236]	; (8005e84 <init_WallControl+0x14c>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8005d9c:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <init_WallControl+0x150>)
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8005da4:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <init_WallControl+0x154>)
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8005dac:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <init_WallControl+0x158>)
 8005dae:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005db2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8005db4:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <init_WallControl+0x15c>)
 8005db6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005dba:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8005dbc:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <init_WallControl+0x160>)
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <init_WallControl+0x164>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8005dcc:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <init_WallControl+0x168>)
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8005dd4:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <init_WallControl+0x16c>)
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8005ddc:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <init_WallControl+0x170>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8005de2:	4b32      	ldr	r3, [pc, #200]	; (8005eac <init_WallControl+0x174>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <init_WallControl+0x178>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8005dee:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <init_WallControl+0x17c>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8005df4:	4b30      	ldr	r3, [pc, #192]	; (8005eb8 <init_WallControl+0x180>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <init_WallControl+0x184>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8005e00:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <init_WallControl+0x188>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <init_WallControl+0x18c>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8005e0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <init_WallControl+0x190>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <init_WallControl+0x194>)
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <init_WallControl+0x198>)
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8005e22:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <init_WallControl+0x19c>)
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <init_WallControl+0x1a0>)
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	2000059c 	.word	0x2000059c
 8005e40:	2000059d 	.word	0x2000059d
 8005e44:	2000059f 	.word	0x2000059f
 8005e48:	2000059e 	.word	0x2000059e
 8005e4c:	200005a1 	.word	0x200005a1
 8005e50:	200005a2 	.word	0x200005a2
 8005e54:	200005a3 	.word	0x200005a3
 8005e58:	200005a4 	.word	0x200005a4
 8005e5c:	44be6000 	.word	0x44be6000
 8005e60:	200005a8 	.word	0x200005a8
 8005e64:	44974000 	.word	0x44974000
 8005e68:	200005ac 	.word	0x200005ac
 8005e6c:	41a00000 	.word	0x41a00000
 8005e70:	200005c4 	.word	0x200005c4
 8005e74:	200005c0 	.word	0x200005c0
 8005e78:	200005cc 	.word	0x200005cc
 8005e7c:	200005c8 	.word	0x200005c8
 8005e80:	200005d4 	.word	0x200005d4
 8005e84:	200005d0 	.word	0x200005d0
 8005e88:	200005dc 	.word	0x200005dc
 8005e8c:	200005d8 	.word	0x200005d8
 8005e90:	200005e4 	.word	0x200005e4
 8005e94:	200005e0 	.word	0x200005e0
 8005e98:	200005ec 	.word	0x200005ec
 8005e9c:	200005e8 	.word	0x200005e8
 8005ea0:	200005f4 	.word	0x200005f4
 8005ea4:	200005f0 	.word	0x200005f0
 8005ea8:	200005f8 	.word	0x200005f8
 8005eac:	200005f9 	.word	0x200005f9
 8005eb0:	200005fa 	.word	0x200005fa
 8005eb4:	200005fb 	.word	0x200005fb
 8005eb8:	200005fc 	.word	0x200005fc
 8005ebc:	200005fd 	.word	0x200005fd
 8005ec0:	200005fe 	.word	0x200005fe
 8005ec4:	200005ff 	.word	0x200005ff
 8005ec8:	20000600 	.word	0x20000600
 8005ecc:	20000604 	.word	0x20000604
 8005ed0:	20000608 	.word	0x20000608
 8005ed4:	2000060c 	.word	0x2000060c
 8005ed8:	20000610 	.word	0x20000610
 8005edc:	00000000 	.word	0x00000000

08005ee0 <calWallConrol>:


float calWallConrol(void) {
 8005ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee4:	b0aa      	sub	sp, #168	; 0xa8
 8005ee6:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8005ee8:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <calWallConrol+0x290>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d13d      	bne.n	8005f6c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8005ef0:	4ba0      	ldr	r3, [pc, #640]	; (8006174 <calWallConrol+0x294>)
 8005ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8005ef6:	4ba0      	ldr	r3, [pc, #640]	; (8006178 <calWallConrol+0x298>)
 8005ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8005efc:	4b9f      	ldr	r3, [pc, #636]	; (800617c <calWallConrol+0x29c>)
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8006180 <calWallConrol+0x2a0>
 8005f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0e:	dd06      	ble.n	8005f1e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8005f10:	4b9c      	ldr	r3, [pc, #624]	; (8006184 <calWallConrol+0x2a4>)
 8005f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8005f16:	4b9c      	ldr	r3, [pc, #624]	; (8006188 <calWallConrol+0x2a8>)
 8005f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f1c:	e052      	b.n	8005fc4 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8005f1e:	4b97      	ldr	r3, [pc, #604]	; (800617c <calWallConrol+0x29c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fa fb38 	bl	8000598 <__aeabi_f2d>
 8005f28:	a389      	add	r3, pc, #548	; (adr r3, 8006150 <calWallConrol+0x270>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa fb8b 	bl	8000648 <__aeabi_dmul>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fa fe5d 	bl	8000bf8 <__aeabi_d2f>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8005f44:	4b8d      	ldr	r3, [pc, #564]	; (800617c <calWallConrol+0x29c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fb25 	bl	8000598 <__aeabi_f2d>
 8005f4e:	a382      	add	r3, pc, #520	; (adr r3, 8006158 <calWallConrol+0x278>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa fb78 	bl	8000648 <__aeabi_dmul>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f7fa fe4a 	bl	8000bf8 <__aeabi_d2f>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f6a:	e02b      	b.n	8005fc4 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8005f6c:	4b87      	ldr	r3, [pc, #540]	; (800618c <calWallConrol+0x2ac>)
 8005f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8005f72:	4b87      	ldr	r3, [pc, #540]	; (8006190 <calWallConrol+0x2b0>)
 8005f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8005f78:	4b80      	ldr	r3, [pc, #512]	; (800617c <calWallConrol+0x29c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa fb0b 	bl	8000598 <__aeabi_f2d>
 8005f82:	a377      	add	r3, pc, #476	; (adr r3, 8006160 <calWallConrol+0x280>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa fb5e 	bl	8000648 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	f7fa fe30 	bl	8000bf8 <__aeabi_d2f>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8005f9e:	4b77      	ldr	r3, [pc, #476]	; (800617c <calWallConrol+0x29c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa faf8 	bl	8000598 <__aeabi_f2d>
 8005fa8:	a36f      	add	r3, pc, #444	; (adr r3, 8006168 <calWallConrol+0x288>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa fb4b 	bl	8000648 <__aeabi_dmul>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7fa fe1d 	bl	8000bf8 <__aeabi_d2f>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8005fc4:	4b73      	ldr	r3, [pc, #460]	; (8006194 <calWallConrol+0x2b4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f240 2289 	movw	r2, #649	; 0x289
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	dc03      	bgt.n	8005fd8 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8005fd0:	4b71      	ldr	r3, [pc, #452]	; (8006198 <calWallConrol+0x2b8>)
 8005fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd6:	e011      	b.n	8005ffc <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8005fd8:	4b6e      	ldr	r3, [pc, #440]	; (8006194 <calWallConrol+0x2b4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	dd03      	ble.n	8005fec <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8005fe4:	4b6d      	ldr	r3, [pc, #436]	; (800619c <calWallConrol+0x2bc>)
 8005fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fea:	e007      	b.n	8005ffc <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8005fec:	4b69      	ldr	r3, [pc, #420]	; (8006194 <calWallConrol+0x2b4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8005ffc:	4b65      	ldr	r3, [pc, #404]	; (8006194 <calWallConrol+0x2b4>)
 8005ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006002:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006006:	da03      	bge.n	8006010 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8006008:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <calWallConrol+0x2c0>)
 800600a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800600e:	e012      	b.n	8006036 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8006010:	4b60      	ldr	r3, [pc, #384]	; (8006194 <calWallConrol+0x2b4>)
 8006012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006016:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800601a:	dd03      	ble.n	8006024 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 800601c:	4b61      	ldr	r3, [pc, #388]	; (80061a4 <calWallConrol+0x2c4>)
 800601e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006022:	e008      	b.n	8006036 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006024:	4b5b      	ldr	r3, [pc, #364]	; (8006194 <calWallConrol+0x2b4>)
 8006026:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006032:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8006044:	4b58      	ldr	r3, [pc, #352]	; (80061a8 <calWallConrol+0x2c8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11c      	bne.n	8006086 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 800604c:	4b57      	ldr	r3, [pc, #348]	; (80061ac <calWallConrol+0x2cc>)
 800604e:	2200      	movs	r2, #0
 8006050:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8006052:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <calWallConrol+0x2d0>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8006058:	4b56      	ldr	r3, [pc, #344]	; (80061b4 <calWallConrol+0x2d4>)
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 800605e:	4b56      	ldr	r3, [pc, #344]	; (80061b8 <calWallConrol+0x2d8>)
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8006064:	4b55      	ldr	r3, [pc, #340]	; (80061bc <calWallConrol+0x2dc>)
 8006066:	4a56      	ldr	r2, [pc, #344]	; (80061c0 <calWallConrol+0x2e0>)
 8006068:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 800606a:	4b56      	ldr	r3, [pc, #344]	; (80061c4 <calWallConrol+0x2e4>)
 800606c:	4a56      	ldr	r2, [pc, #344]	; (80061c8 <calWallConrol+0x2e8>)
 800606e:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8006070:	4b56      	ldr	r3, [pc, #344]	; (80061cc <calWallConrol+0x2ec>)
 8006072:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <calWallConrol+0x2f0>)
 8006074:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 800607e:	f002 f909 	bl	8008294 <pl_yellow_LED_off>
 8006082:	f001 ba4c 	b.w	800751e <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8006086:	4b48      	ldr	r3, [pc, #288]	; (80061a8 <calWallConrol+0x2c8>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b01      	cmp	r3, #1
 800608c:	f040 82ef 	bne.w	800666e <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8006090:	4b46      	ldr	r3, [pc, #280]	; (80061ac <calWallConrol+0x2cc>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 809d 	beq.w	80061d8 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 800609e:	4b3d      	ldr	r3, [pc, #244]	; (8006194 <calWallConrol+0x2b4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80060a6:	db16      	blt.n	80060d6 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 80060a8:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <calWallConrol+0x2f4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fa fa61 	bl	8000574 <__aeabi_i2d>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4690      	mov	r8, r2
 80060b8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80060bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80060c0:	f7fa fa6a 	bl	8000598 <__aeabi_f2d>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa fd4c 	bl	8000b68 <__aeabi_dcmpgt>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d037      	beq.n	8006146 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 80060d6:	4b35      	ldr	r3, [pc, #212]	; (80061ac <calWallConrol+0x2cc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	3b01      	subs	r3, #1
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <calWallConrol+0x2cc>)
 80060e0:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <calWallConrol+0x2dc>)
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060f0:	e021      	b.n	8006136 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 80060f2:	4a28      	ldr	r2, [pc, #160]	; (8006194 <calWallConrol+0x2b4>)
 80060f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <calWallConrol+0x2dc>)
 8006106:	edd3 7a00 	vldr	s15, [r3]
 800610a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	dd0b      	ble.n	800612c <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <calWallConrol+0x2b4>)
 8006116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006126:	4b25      	ldr	r3, [pc, #148]	; (80061bc <calWallConrol+0x2dc>)
 8006128:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800612c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006130:	3301      	adds	r3, #1
 8006132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800613a:	2b13      	cmp	r3, #19
 800613c:	ddd9      	ble.n	80060f2 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 800613e:	4b23      	ldr	r3, [pc, #140]	; (80061cc <calWallConrol+0x2ec>)
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <calWallConrol+0x2d4>)
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e066      	b.n	800621c <calWallConrol+0x33c>
 800614e:	bf00      	nop
 8006150:	33333333 	.word	0x33333333
 8006154:	3fd33333 	.word	0x3fd33333
 8006158:	d2f1a9fc 	.word	0xd2f1a9fc
 800615c:	bf70624d 	.word	0xbf70624d
 8006160:	33333333 	.word	0x33333333
 8006164:	3fe33333 	.word	0x3fe33333
 8006168:	bc6a7efa 	.word	0xbc6a7efa
 800616c:	3f789374 	.word	0x3f789374
 8006170:	20000814 	.word	0x20000814
 8006174:	435c0000 	.word	0x435c0000
 8006178:	43480000 	.word	0x43480000
 800617c:	200004dc 	.word	0x200004dc
 8006180:	447a0000 	.word	0x447a0000
 8006184:	43960000 	.word	0x43960000
 8006188:	c0800000 	.word	0xc0800000
 800618c:	431d0000 	.word	0x431d0000
 8006190:	42dc0000 	.word	0x42dc0000
 8006194:	200002bc 	.word	0x200002bc
 8006198:	44228000 	.word	0x44228000
 800619c:	450fc000 	.word	0x450fc000
 80061a0:	44160000 	.word	0x44160000
 80061a4:	44fa0000 	.word	0x44fa0000
 80061a8:	2000059c 	.word	0x2000059c
 80061ac:	2000059f 	.word	0x2000059f
 80061b0:	200005a1 	.word	0x200005a1
 80061b4:	200005a2 	.word	0x200005a2
 80061b8:	200005a3 	.word	0x200005a3
 80061bc:	200005a4 	.word	0x200005a4
 80061c0:	44be6000 	.word	0x44be6000
 80061c4:	200005a8 	.word	0x200005a8
 80061c8:	44974000 	.word	0x44974000
 80061cc:	200005ac 	.word	0x200005ac
 80061d0:	41a00000 	.word	0x41a00000
 80061d4:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 80061d8:	4bbf      	ldr	r3, [pc, #764]	; (80064d8 <calWallConrol+0x5f8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80061e0:	dd1c      	ble.n	800621c <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 80061e2:	4bbe      	ldr	r3, [pc, #760]	; (80064dc <calWallConrol+0x5fc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa f9c4 	bl	8000574 <__aeabi_i2d>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4614      	mov	r4, r2
 80061f2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80061f6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80061fa:	f7fa f9cd 	bl	8000598 <__aeabi_f2d>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4620      	mov	r0, r4
 8006204:	4629      	mov	r1, r5
 8006206:	f7fa fc91 	bl	8000b2c <__aeabi_dcmplt>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8006210:	4bb3      	ldr	r3, [pc, #716]	; (80064e0 <calWallConrol+0x600>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	4bb1      	ldr	r3, [pc, #708]	; (80064e0 <calWallConrol+0x600>)
 800621a:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 800621c:	4bb0      	ldr	r3, [pc, #704]	; (80064e0 <calWallConrol+0x600>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d05c      	beq.n	80062e6 <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 800622c:	4baa      	ldr	r3, [pc, #680]	; (80064d8 <calWallConrol+0x5f8>)
 800622e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006232:	f240 2225 	movw	r2, #549	; 0x225
 8006236:	4293      	cmp	r3, r2
 8006238:	dd17      	ble.n	800626a <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 800623a:	4ba8      	ldr	r3, [pc, #672]	; (80064dc <calWallConrol+0x5fc>)
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f998 	bl	8000574 <__aeabi_i2d>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	613a      	str	r2, [r7, #16]
 800624a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800624e:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8006250:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006254:	f7fa f9a0 	bl	8000598 <__aeabi_f2d>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 800625c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006260:	f7fa fc82 	bl	8000b68 <__aeabi_dcmpgt>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d039      	beq.n	80062de <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 800626a:	4b9d      	ldr	r3, [pc, #628]	; (80064e0 <calWallConrol+0x600>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	3b02      	subs	r3, #2
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b9b      	ldr	r3, [pc, #620]	; (80064e0 <calWallConrol+0x600>)
 8006274:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8006276:	4b9b      	ldr	r3, [pc, #620]	; (80064e4 <calWallConrol+0x604>)
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 800627e:	2300      	movs	r3, #0
 8006280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006284:	e023      	b.n	80062ce <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8006286:	4a94      	ldr	r2, [pc, #592]	; (80064d8 <calWallConrol+0x5f8>)
 8006288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800628c:	3350      	adds	r3, #80	; 0x50
 800628e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800629a:	4b92      	ldr	r3, [pc, #584]	; (80064e4 <calWallConrol+0x604>)
 800629c:	edd3 7a00 	vldr	s15, [r3]
 80062a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	dd0c      	ble.n	80062c4 <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 80062aa:	4a8b      	ldr	r2, [pc, #556]	; (80064d8 <calWallConrol+0x5f8>)
 80062ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b0:	3350      	adds	r3, #80	; 0x50
 80062b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062be:	4b89      	ldr	r3, [pc, #548]	; (80064e4 <calWallConrol+0x604>)
 80062c0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80062c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c8:	3301      	adds	r3, #1
 80062ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d2:	2b13      	cmp	r3, #19
 80062d4:	ddd7      	ble.n	8006286 <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 80062d6:	4b84      	ldr	r3, [pc, #528]	; (80064e8 <calWallConrol+0x608>)
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 80062de:	4b83      	ldr	r3, [pc, #524]	; (80064ec <calWallConrol+0x60c>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e024      	b.n	8006330 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 80062e6:	4b7c      	ldr	r3, [pc, #496]	; (80064d8 <calWallConrol+0x5f8>)
 80062e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062ec:	f240 2226 	movw	r2, #550	; 0x226
 80062f0:	4293      	cmp	r3, r2
 80062f2:	dd1d      	ble.n	8006330 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 80062f4:	4b79      	ldr	r3, [pc, #484]	; (80064dc <calWallConrol+0x5fc>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fa f93b 	bl	8000574 <__aeabi_i2d>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	60ba      	str	r2, [r7, #8]
 8006304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006308:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 800630a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800630e:	f7fa f943 	bl	8000598 <__aeabi_f2d>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8006316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800631a:	f7fa fc07 	bl	8000b2c <__aeabi_dcmplt>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8006324:	4b6e      	ldr	r3, [pc, #440]	; (80064e0 <calWallConrol+0x600>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	3302      	adds	r3, #2
 800632a:	b2da      	uxtb	r2, r3
 800632c:	4b6c      	ldr	r3, [pc, #432]	; (80064e0 <calWallConrol+0x600>)
 800632e:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8006330:	4b6b      	ldr	r3, [pc, #428]	; (80064e0 <calWallConrol+0x600>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b03      	cmp	r3, #3
 8006336:	f201 80f2 	bhi.w	800751e <calWallConrol+0x163e>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <calWallConrol+0x460>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006351 	.word	0x08006351
 8006344:	08006457 	.word	0x08006457
 8006348:	08006505 	.word	0x08006505
 800634c:	0800656f 	.word	0x0800656f
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8006350:	4b65      	ldr	r3, [pc, #404]	; (80064e8 <calWallConrol+0x608>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fa f91f 	bl	8000598 <__aeabi_f2d>
 800635a:	4604      	mov	r4, r0
 800635c:	460d      	mov	r5, r1
 800635e:	4b64      	ldr	r3, [pc, #400]	; (80064f0 <calWallConrol+0x610>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fa f918 	bl	8000598 <__aeabi_f2d>
 8006368:	a357      	add	r3, pc, #348	; (adr r3, 80064c8 <calWallConrol+0x5e8>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa f96b 	bl	8000648 <__aeabi_dmul>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7f9 ffaf 	bl	80002dc <__adddf3>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	f7fa fc37 	bl	8000bf8 <__aeabi_d2f>
 800638a:	4603      	mov	r3, r0
 800638c:	4a56      	ldr	r2, [pc, #344]	; (80064e8 <calWallConrol+0x608>)
 800638e:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8006390:	4b55      	ldr	r3, [pc, #340]	; (80064e8 <calWallConrol+0x608>)
 8006392:	edd3 7a00 	vldr	s15, [r3]
 8006396:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800639a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800639e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a2:	d52e      	bpl.n	8006402 <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80063a4:	4b53      	ldr	r3, [pc, #332]	; (80064f4 <calWallConrol+0x614>)
 80063a6:	edd3 7a00 	vldr	s15, [r3]
 80063aa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80064f8 <calWallConrol+0x618>
 80063ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063b2:	eef1 6a67 	vneg.f32	s13, s15
 80063b6:	4b4f      	ldr	r3, [pc, #316]	; (80064f4 <calWallConrol+0x614>)
 80063b8:	edd3 7a00 	vldr	s15, [r3]
 80063bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 80063c0:	4b48      	ldr	r3, [pc, #288]	; (80064e4 <calWallConrol+0x604>)
 80063c2:	edd3 7a00 	vldr	s15, [r3]
 80063c6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006500 <calWallConrol+0x620>
 80063ca:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80063ce:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <calWallConrol+0x604>)
 80063d0:	edd3 6a00 	vldr	s13, [r3]
 80063d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80063d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063dc:	ee17 0a90 	vmov	r0, s15
 80063e0:	f7fa f8da 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80063e4:	a33a      	add	r3, pc, #232	; (adr r3, 80064d0 <calWallConrol+0x5f0>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7fa f92d 	bl	8000648 <__aeabi_dmul>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fbff 	bl	8000bf8 <__aeabi_d2f>
 80063fa:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 80063fc:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <calWallConrol+0x61c>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e003      	b.n	800640a <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8006402:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <calWallConrol+0x61c>)
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800640a:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <calWallConrol+0x61c>)
 800640c:	ed93 7a00 	vldr	s14, [r3]
 8006410:	4b3a      	ldr	r3, [pc, #232]	; (80064fc <calWallConrol+0x61c>)
 8006412:	edd3 7a01 	vldr	s15, [r3, #4]
 8006416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641a:	4b38      	ldr	r3, [pc, #224]	; (80064fc <calWallConrol+0x61c>)
 800641c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <calWallConrol+0x61c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a35      	ldr	r2, [pc, #212]	; (80064fc <calWallConrol+0x61c>)
 8006426:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8006428:	4b34      	ldr	r3, [pc, #208]	; (80064fc <calWallConrol+0x61c>)
 800642a:	ed93 7a00 	vldr	s14, [r3]
 800642e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006432:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8006436:	4b31      	ldr	r3, [pc, #196]	; (80064fc <calWallConrol+0x61c>)
 8006438:	edd3 6a02 	vldr	s13, [r3, #8]
 800643c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006440:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8006444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006448:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 800644c:	2000      	movs	r0, #0
 800644e:	f001 ff5b 	bl	8008308 <pl_yellow_LED_count>
			break;
 8006452:	f001 b864 	b.w	800751e <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8006456:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800645a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80064f8 <calWallConrol+0x618>
 800645e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006462:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006466:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 800646a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800646e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <calWallConrol+0x61c>)
 8006474:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8006478:	4b20      	ldr	r3, [pc, #128]	; (80064fc <calWallConrol+0x61c>)
 800647a:	ed93 7a00 	vldr	s14, [r3]
 800647e:	4b1f      	ldr	r3, [pc, #124]	; (80064fc <calWallConrol+0x61c>)
 8006480:	edd3 7a01 	vldr	s15, [r3, #4]
 8006484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006488:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <calWallConrol+0x61c>)
 800648a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800648e:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <calWallConrol+0x61c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <calWallConrol+0x61c>)
 8006494:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8006496:	4b19      	ldr	r3, [pc, #100]	; (80064fc <calWallConrol+0x61c>)
 8006498:	ed93 7a00 	vldr	s14, [r3]
 800649c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80064a0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <calWallConrol+0x61c>)
 80064a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80064aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80064ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80064b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 80064ba:	2080      	movs	r0, #128	; 0x80
 80064bc:	f001 ff24 	bl	8008308 <pl_yellow_LED_count>
			break;
 80064c0:	f001 b82d 	b.w	800751e <calWallConrol+0x163e>
 80064c4:	f3af 8000 	nop.w
 80064c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80064cc:	3f50624d 	.word	0x3f50624d
 80064d0:	66666666 	.word	0x66666666
 80064d4:	3fe66666 	.word	0x3fe66666
 80064d8:	200002bc 	.word	0x200002bc
 80064dc:	2000044c 	.word	0x2000044c
 80064e0:	2000059f 	.word	0x2000059f
 80064e4:	200005a8 	.word	0x200005a8
 80064e8:	200005ac 	.word	0x200005ac
 80064ec:	200005a3 	.word	0x200005a3
 80064f0:	200004dc 	.word	0x200004dc
 80064f4:	200005a4 	.word	0x200005a4
 80064f8:	44be6000 	.word	0x44be6000
 80064fc:	20000578 	.word	0x20000578
 8006500:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8006504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006508:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8006500 <calWallConrol+0x620>
 800650c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006510:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8006514:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006518:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 800651c:	4baa      	ldr	r3, [pc, #680]	; (80067c8 <calWallConrol+0x8e8>)
 800651e:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8006522:	4ba9      	ldr	r3, [pc, #676]	; (80067c8 <calWallConrol+0x8e8>)
 8006524:	ed93 7a00 	vldr	s14, [r3]
 8006528:	4ba7      	ldr	r3, [pc, #668]	; (80067c8 <calWallConrol+0x8e8>)
 800652a:	edd3 7a01 	vldr	s15, [r3, #4]
 800652e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006532:	4ba5      	ldr	r3, [pc, #660]	; (80067c8 <calWallConrol+0x8e8>)
 8006534:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8006538:	4ba3      	ldr	r3, [pc, #652]	; (80067c8 <calWallConrol+0x8e8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4aa2      	ldr	r2, [pc, #648]	; (80067c8 <calWallConrol+0x8e8>)
 800653e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8006540:	4ba1      	ldr	r3, [pc, #644]	; (80067c8 <calWallConrol+0x8e8>)
 8006542:	ed93 7a00 	vldr	s14, [r3]
 8006546:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800654a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800654e:	4b9e      	ldr	r3, [pc, #632]	; (80067c8 <calWallConrol+0x8e8>)
 8006550:	edd3 6a02 	vldr	s13, [r3, #8]
 8006554:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006558:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800655c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006560:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8006564:	2001      	movs	r0, #1
 8006566:	f001 fecf 	bl	8008308 <pl_yellow_LED_count>
			break;
 800656a:	f000 bfd8 	b.w	800751e <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 800656e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006572:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80067cc <calWallConrol+0x8ec>
 8006576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800657a:	eef1 6a67 	vneg.f32	s13, s15
 800657e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8006586:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800658a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80067d0 <calWallConrol+0x8f0>
 800658e:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8006592:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006596:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 800659a:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 800659e:	4b8a      	ldr	r3, [pc, #552]	; (80067c8 <calWallConrol+0x8e8>)
 80065a0:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <calWallConrol+0x8e8>)
 80065a6:	ed93 7a00 	vldr	s14, [r3]
 80065aa:	4b87      	ldr	r3, [pc, #540]	; (80067c8 <calWallConrol+0x8e8>)
 80065ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80065b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b4:	4b84      	ldr	r3, [pc, #528]	; (80067c8 <calWallConrol+0x8e8>)
 80065b6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80065ba:	4b83      	ldr	r3, [pc, #524]	; (80067c8 <calWallConrol+0x8e8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a82      	ldr	r2, [pc, #520]	; (80067c8 <calWallConrol+0x8e8>)
 80065c0:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <calWallConrol+0x8e8>)
 80065c4:	ed93 7a00 	vldr	s14, [r3]
 80065c8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80065cc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80065d0:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <calWallConrol+0x8e8>)
 80065d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80065d6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80065da:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80065de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 80065e6:	2081      	movs	r0, #129	; 0x81
 80065e8:	f001 fe8e 	bl	8008308 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 80065ec:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <calWallConrol+0x8f4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7f9 ffbf 	bl	8000574 <__aeabi_i2d>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	603a      	str	r2, [r7, #0]
 80065fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <calWallConrol+0x8f8>)
 8006608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800660c:	f7fa fa8e 	bl	8000b2c <__aeabi_dcmplt>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01a      	beq.n	800664c <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8006616:	4b6f      	ldr	r3, [pc, #444]	; (80067d4 <calWallConrol+0x8f4>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	4618      	mov	r0, r3
 800661c:	f7f9 ffaa 	bl	8000574 <__aeabi_i2d>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4692      	mov	sl, r2
 8006626:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	4b6a      	ldr	r3, [pc, #424]	; (80067d8 <calWallConrol+0x8f8>)
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	f7fa fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <calWallConrol+0x76c>
				StabilityCount_reset++;
 800663e:	4b67      	ldr	r3, [pc, #412]	; (80067dc <calWallConrol+0x8fc>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	b2da      	uxtb	r2, r3
 8006646:	4b65      	ldr	r3, [pc, #404]	; (80067dc <calWallConrol+0x8fc>)
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	e002      	b.n	8006652 <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 800664c:	4b63      	ldr	r3, [pc, #396]	; (80067dc <calWallConrol+0x8fc>)
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8006652:	4b62      	ldr	r3, [pc, #392]	; (80067dc <calWallConrol+0x8fc>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b18      	cmp	r3, #24
 8006658:	f240 8760 	bls.w	800751c <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 800665c:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <calWallConrol+0x900>)
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8006664:	4b5d      	ldr	r3, [pc, #372]	; (80067dc <calWallConrol+0x8fc>)
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
			}
			break;
 800666a:	f000 bf57 	b.w	800751c <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 800666e:	4b5d      	ldr	r3, [pc, #372]	; (80067e4 <calWallConrol+0x904>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b02      	cmp	r3, #2
 8006674:	f000 8753 	beq.w	800751e <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8006678:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <calWallConrol+0x904>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b03      	cmp	r3, #3
 800667e:	f040 874e 	bne.w	800751e <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 8006682:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <calWallConrol+0x908>)
 8006684:	edd3 7a00 	vldr	s15, [r3]
 8006688:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80067ec <calWallConrol+0x90c>
 800668c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	dd05      	ble.n	80066a2 <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <calWallConrol+0x910>)
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 800669c:	4b55      	ldr	r3, [pc, #340]	; (80067f4 <calWallConrol+0x914>)
 800669e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066a0:	e024      	b.n	80066ec <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80066a2:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <calWallConrol+0x908>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7f9 ff76 	bl	8000598 <__aeabi_f2d>
 80066ac:	a342      	add	r3, pc, #264	; (adr r3, 80067b8 <calWallConrol+0x8d8>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 ffc9 	bl	8000648 <__aeabi_dmul>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	f7fa fa9b 	bl	8000bf8 <__aeabi_d2f>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80066c8:	4b47      	ldr	r3, [pc, #284]	; (80067e8 <calWallConrol+0x908>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7f9 ff63 	bl	8000598 <__aeabi_f2d>
 80066d2:	a33b      	add	r3, pc, #236	; (adr r3, 80067c0 <calWallConrol+0x8e0>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 ffb6 	bl	8000648 <__aeabi_dmul>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4610      	mov	r0, r2
 80066e2:	4619      	mov	r1, r3
 80066e4:	f7fa fa88 	bl	8000bf8 <__aeabi_d2f>
 80066e8:	4603      	mov	r3, r0
 80066ea:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 80066ec:	4b42      	ldr	r3, [pc, #264]	; (80067f8 <calWallConrol+0x918>)
 80066ee:	edd3 7a00 	vldr	s15, [r3]
 80066f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	dd12      	ble.n	8006726 <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8006700:	4b3d      	ldr	r3, [pc, #244]	; (80067f8 <calWallConrol+0x918>)
 8006702:	edd3 7a00 	vldr	s15, [r3]
 8006706:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800670a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800670e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006712:	d808      	bhi.n	8006726 <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 8006714:	4b39      	ldr	r3, [pc, #228]	; (80067fc <calWallConrol+0x91c>)
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <calWallConrol+0x920>)
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 800671c:	4b39      	ldr	r3, [pc, #228]	; (8006804 <calWallConrol+0x924>)
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8006720:	4b39      	ldr	r3, [pc, #228]	; (8006808 <calWallConrol+0x928>)
 8006722:	657b      	str	r3, [r7, #84]	; 0x54
 8006724:	e0a7      	b.n	8006876 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 8006726:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <calWallConrol+0x918>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800680c <calWallConrol+0x92c>
 8006730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006738:	dd12      	ble.n	8006760 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800673a:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <calWallConrol+0x918>)
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006810 <calWallConrol+0x930>
 8006744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	d808      	bhi.n	8006760 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <calWallConrol+0x934>)
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <calWallConrol+0x938>)
 8006754:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8006756:	4b31      	ldr	r3, [pc, #196]	; (800681c <calWallConrol+0x93c>)
 8006758:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <calWallConrol+0x940>)
 800675c:	657b      	str	r3, [r7, #84]	; 0x54
 800675e:	e08a      	b.n	8006876 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8006760:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <calWallConrol+0x918>)
 8006762:	edd3 7a00 	vldr	s15, [r3]
 8006766:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006824 <calWallConrol+0x944>
 800676a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006772:	dd12      	ble.n	800679a <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <calWallConrol+0x918>)
 8006776:	edd3 7a00 	vldr	s15, [r3]
 800677a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006828 <calWallConrol+0x948>
 800677e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006786:	d808      	bhi.n	800679a <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8006788:	4b28      	ldr	r3, [pc, #160]	; (800682c <calWallConrol+0x94c>)
 800678a:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 800678c:	4b28      	ldr	r3, [pc, #160]	; (8006830 <calWallConrol+0x950>)
 800678e:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <calWallConrol+0x954>)
 8006792:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8006794:	4b28      	ldr	r3, [pc, #160]	; (8006838 <calWallConrol+0x958>)
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	e06d      	b.n	8006876 <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800679a:	4b28      	ldr	r3, [pc, #160]	; (800683c <calWallConrol+0x95c>)
 800679c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80067a0:	2bb4      	cmp	r3, #180	; 0xb4
 80067a2:	dd4f      	ble.n	8006844 <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80067a4:	4b26      	ldr	r3, [pc, #152]	; (8006840 <calWallConrol+0x960>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <calWallConrol+0x960>)
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e04e      	b.n	8006852 <calWallConrol+0x972>
 80067b4:	f3af 8000 	nop.w
 80067b8:	cccccccd 	.word	0xcccccccd
 80067bc:	3feccccc 	.word	0x3feccccc
 80067c0:	1eb851ec 	.word	0x1eb851ec
 80067c4:	bfb1eb85 	.word	0xbfb1eb85
 80067c8:	20000578 	.word	0x20000578
 80067cc:	44be6000 	.word	0x44be6000
 80067d0:	44974000 	.word	0x44974000
 80067d4:	2000044c 	.word	0x2000044c
 80067d8:	403e0000 	.word	0x403e0000
 80067dc:	200005a1 	.word	0x200005a1
 80067e0:	20000550 	.word	0x20000550
 80067e4:	2000059c 	.word	0x2000059c
 80067e8:	200004dc 	.word	0x200004dc
 80067ec:	447a0000 	.word	0x447a0000
 80067f0:	44610000 	.word	0x44610000
 80067f4:	c28c0000 	.word	0xc28c0000
 80067f8:	200005e8 	.word	0x200005e8
 80067fc:	4519d2f5 	.word	0x4519d2f5
 8006800:	c40e02ec 	.word	0xc40e02ec
 8006804:	423da41a 	.word	0x423da41a
 8006808:	bfa28f5c 	.word	0xbfa28f5c
 800680c:	420c0000 	.word	0x420c0000
 8006810:	42700000 	.word	0x42700000
 8006814:	440d1857 	.word	0x440d1857
 8006818:	c181619b 	.word	0xc181619b
 800681c:	3eaab6f2 	.word	0x3eaab6f2
 8006820:	bacaf00f 	.word	0xbacaf00f
 8006824:	42c80000 	.word	0x42c80000
 8006828:	42f00000 	.word	0x42f00000
 800682c:	4559c991 	.word	0x4559c991
 8006830:	41cef541 	.word	0x41cef541
 8006834:	bfbda504 	.word	0xbfbda504
 8006838:	3c22339c 	.word	0x3c22339c
 800683c:	200002bc 	.word	0x200002bc
 8006840:	2000059f 	.word	0x2000059f
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8006844:	4b79      	ldr	r3, [pc, #484]	; (8006a2c <calWallConrol+0xb4c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f023 0302 	bic.w	r3, r3, #2
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b77      	ldr	r3, [pc, #476]	; (8006a2c <calWallConrol+0xb4c>)
 8006850:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006852:	4b77      	ldr	r3, [pc, #476]	; (8006a30 <calWallConrol+0xb50>)
 8006854:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006860:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8006876:	4b6f      	ldr	r3, [pc, #444]	; (8006a34 <calWallConrol+0xb54>)
 8006878:	edd3 7a00 	vldr	s15, [r3]
 800687c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006888:	dd12      	ble.n	80068b0 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 800688a:	4b6a      	ldr	r3, [pc, #424]	; (8006a34 <calWallConrol+0xb54>)
 800688c:	edd3 7a00 	vldr	s15, [r3]
 8006890:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8006894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	d808      	bhi.n	80068b0 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 800689e:	4b66      	ldr	r3, [pc, #408]	; (8006a38 <calWallConrol+0xb58>)
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80068a2:	4b66      	ldr	r3, [pc, #408]	; (8006a3c <calWallConrol+0xb5c>)
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <calWallConrol+0xb60>)
 80068a8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80068aa:	4b66      	ldr	r3, [pc, #408]	; (8006a44 <calWallConrol+0xb64>)
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
 80068ae:	e05d      	b.n	800696c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80068b0:	4b60      	ldr	r3, [pc, #384]	; (8006a34 <calWallConrol+0xb54>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8006a48 <calWallConrol+0xb68>
 80068ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	dd12      	ble.n	80068ea <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80068c4:	4b5b      	ldr	r3, [pc, #364]	; (8006a34 <calWallConrol+0xb54>)
 80068c6:	edd3 7a00 	vldr	s15, [r3]
 80068ca:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8006a4c <calWallConrol+0xb6c>
 80068ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d6:	d808      	bhi.n	80068ea <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 80068d8:	4b5d      	ldr	r3, [pc, #372]	; (8006a50 <calWallConrol+0xb70>)
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80068dc:	4b5d      	ldr	r3, [pc, #372]	; (8006a54 <calWallConrol+0xb74>)
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 80068e0:	4b5d      	ldr	r3, [pc, #372]	; (8006a58 <calWallConrol+0xb78>)
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 80068e4:	4b5d      	ldr	r3, [pc, #372]	; (8006a5c <calWallConrol+0xb7c>)
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
 80068e8:	e040      	b.n	800696c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80068ea:	4b52      	ldr	r3, [pc, #328]	; (8006a34 <calWallConrol+0xb54>)
 80068ec:	edd3 7a00 	vldr	s15, [r3]
 80068f0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8006a60 <calWallConrol+0xb80>
 80068f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	dd12      	ble.n	8006924 <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80068fe:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <calWallConrol+0xb54>)
 8006900:	edd3 7a00 	vldr	s15, [r3]
 8006904:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8006a64 <calWallConrol+0xb84>
 8006908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	d808      	bhi.n	8006924 <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 8006912:	4b55      	ldr	r3, [pc, #340]	; (8006a68 <calWallConrol+0xb88>)
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8006916:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <calWallConrol+0xb8c>)
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800691a:	4b55      	ldr	r3, [pc, #340]	; (8006a70 <calWallConrol+0xb90>)
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800691e:	4b55      	ldr	r3, [pc, #340]	; (8006a74 <calWallConrol+0xb94>)
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
 8006922:	e023      	b.n	800696c <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8006924:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <calWallConrol+0xb50>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2bb4      	cmp	r3, #180	; 0xb4
 800692a:	dd07      	ble.n	800693c <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800692c:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <calWallConrol+0xb4c>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b3d      	ldr	r3, [pc, #244]	; (8006a2c <calWallConrol+0xb4c>)
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	e006      	b.n	800694a <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <calWallConrol+0xb4c>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <calWallConrol+0xb4c>)
 8006948:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800694a:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <calWallConrol+0xb50>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006956:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800696c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8006970:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <calWallConrol+0xb98>)
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800697e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8006982:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006986:	4b3c      	ldr	r3, [pc, #240]	; (8006a78 <calWallConrol+0xb98>)
 8006988:	edd3 7a00 	vldr	s15, [r3]
 800698c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006990:	4b39      	ldr	r3, [pc, #228]	; (8006a78 <calWallConrol+0xb98>)
 8006992:	edd3 7a00 	vldr	s15, [r3]
 8006996:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800699a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800699e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80069a2:	4b35      	ldr	r3, [pc, #212]	; (8006a78 <calWallConrol+0xb98>)
 80069a4:	edd3 7a00 	vldr	s15, [r3]
 80069a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80069ac:	4b32      	ldr	r3, [pc, #200]	; (8006a78 <calWallConrol+0xb98>)
 80069ae:	edd3 7a00 	vldr	s15, [r3]
 80069b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80069b6:	4b30      	ldr	r3, [pc, #192]	; (8006a78 <calWallConrol+0xb98>)
 80069b8:	edd3 7a00 	vldr	s15, [r3]
 80069bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80069c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069c4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80069c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80069cc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80069d0:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <calWallConrol+0xb54>)
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069da:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80069de:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <calWallConrol+0xb54>)
 80069e4:	edd3 7a00 	vldr	s15, [r3]
 80069e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80069ec:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <calWallConrol+0xb54>)
 80069ee:	edd3 7a00 	vldr	s15, [r3]
 80069f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80069f6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80069fa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80069fe:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <calWallConrol+0xb54>)
 8006a00:	edd3 7a00 	vldr	s15, [r3]
 8006a04:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <calWallConrol+0xb54>)
 8006a0a:	edd3 7a00 	vldr	s15, [r3]
 8006a0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <calWallConrol+0xb54>)
 8006a14:	edd3 7a00 	vldr	s15, [r3]
 8006a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8006a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a20:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8006a24:	230b      	movs	r3, #11
 8006a26:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a28:	e041      	b.n	8006aae <calWallConrol+0xbce>
 8006a2a:	bf00      	nop
 8006a2c:	2000059f 	.word	0x2000059f
 8006a30:	200002bc 	.word	0x200002bc
 8006a34:	200005ec 	.word	0x200005ec
 8006a38:	44f286e9 	.word	0x44f286e9
 8006a3c:	c3c54757 	.word	0xc3c54757
 8006a40:	41e9f1c4 	.word	0x41e9f1c4
 8006a44:	bf307804 	.word	0xbf307804
 8006a48:	420c0000 	.word	0x420c0000
 8006a4c:	42700000 	.word	0x42700000
 8006a50:	43b4a7f9 	.word	0x43b4a7f9
 8006a54:	c04f43da 	.word	0xc04f43da
 8006a58:	3a9164ed 	.word	0x3a9164ed
 8006a5c:	3a8c6aa9 	.word	0x3a8c6aa9
 8006a60:	42c80000 	.word	0x42c80000
 8006a64:	42f00000 	.word	0x42f00000
 8006a68:	478c2a26 	.word	0x478c2a26
 8006a6c:	c4fbb229 	.word	0xc4fbb229
 8006a70:	4195b611 	.word	0x4195b611
 8006a74:	bd67d567 	.word	0xbd67d567
 8006a78:	200005e8 	.word	0x200005e8
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8006a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4a9c      	ldr	r2, [pc, #624]	; (8006cf4 <calWallConrol+0xe14>)
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	499a      	ldr	r1, [pc, #616]	; (8006cf4 <calWallConrol+0xe14>)
 8006a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8006a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a94:	3b01      	subs	r3, #1
 8006a96:	4a98      	ldr	r2, [pc, #608]	; (8006cf8 <calWallConrol+0xe18>)
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4996      	ldr	r1, [pc, #600]	; (8006cf8 <calWallConrol+0xe18>)
 8006aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dce3      	bgt.n	8006a7c <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8006ab4:	4a8f      	ldr	r2, [pc, #572]	; (8006cf4 <calWallConrol+0xe14>)
 8006ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ab8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8006aba:	4a8f      	ldr	r2, [pc, #572]	; (8006cf8 <calWallConrol+0xe18>)
 8006abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abe:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8006ac0:	4b8c      	ldr	r3, [pc, #560]	; (8006cf4 <calWallConrol+0xe14>)
 8006ac2:	ed93 7a00 	vldr	s14, [r3]
 8006ac6:	4b8b      	ldr	r3, [pc, #556]	; (8006cf4 <calWallConrol+0xe14>)
 8006ac8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad0:	4b8a      	ldr	r3, [pc, #552]	; (8006cfc <calWallConrol+0xe1c>)
 8006ad2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8006ad6:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <calWallConrol+0xe18>)
 8006ad8:	ed93 7a00 	vldr	s14, [r3]
 8006adc:	4b86      	ldr	r3, [pc, #536]	; (8006cf8 <calWallConrol+0xe18>)
 8006ade:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ae6:	4b86      	ldr	r3, [pc, #536]	; (8006d00 <calWallConrol+0xe20>)
 8006ae8:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8006aec:	4b85      	ldr	r3, [pc, #532]	; (8006d04 <calWallConrol+0xe24>)
 8006aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006af2:	2bb4      	cmp	r3, #180	; 0xb4
 8006af4:	dd1a      	ble.n	8006b2c <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8006af6:	4b84      	ldr	r3, [pc, #528]	; (8006d08 <calWallConrol+0xe28>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b02:	4b7e      	ldr	r3, [pc, #504]	; (8006cfc <calWallConrol+0xe1c>)
 8006b04:	edd3 7a00 	vldr	s15, [r3]
 8006b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b0c:	eef0 7ae7 	vabs.f32	s15, s15
 8006b10:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006d0c <calWallConrol+0xe2c>
 8006b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1c:	d506      	bpl.n	8006b2c <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8006b1e:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <calWallConrol+0xe30>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f043 0302 	orr.w	r3, r3, #2
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	4b79      	ldr	r3, [pc, #484]	; (8006d10 <calWallConrol+0xe30>)
 8006b2a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8006b2c:	4b75      	ldr	r3, [pc, #468]	; (8006d04 <calWallConrol+0xe24>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2bb4      	cmp	r3, #180	; 0xb4
 8006b32:	dd1a      	ble.n	8006b6a <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8006b34:	4b74      	ldr	r3, [pc, #464]	; (8006d08 <calWallConrol+0xe28>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b40:	4b6f      	ldr	r3, [pc, #444]	; (8006d00 <calWallConrol+0xe20>)
 8006b42:	edd3 7a00 	vldr	s15, [r3]
 8006b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b4a:	eef0 7ae7 	vabs.f32	s15, s15
 8006b4e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8006d0c <calWallConrol+0xe2c>
 8006b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	d506      	bpl.n	8006b6a <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8006b5c:	4b6c      	ldr	r3, [pc, #432]	; (8006d10 <calWallConrol+0xe30>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	4b6a      	ldr	r3, [pc, #424]	; (8006d10 <calWallConrol+0xe30>)
 8006b68:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8006b6a:	4b66      	ldr	r3, [pc, #408]	; (8006d04 <calWallConrol+0xe24>)
 8006b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006b70:	2bb3      	cmp	r3, #179	; 0xb3
 8006b72:	dd13      	ble.n	8006b9c <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8006b74:	4b64      	ldr	r3, [pc, #400]	; (8006d08 <calWallConrol+0xe28>)
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b80:	4b5e      	ldr	r3, [pc, #376]	; (8006cfc <calWallConrol+0xe1c>)
 8006b82:	edd3 7a00 	vldr	s15, [r3]
 8006b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8a:	eef0 7ae7 	vabs.f32	s15, s15
 8006b8e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006d0c <calWallConrol+0xe2c>
 8006b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9a:	dd06      	ble.n	8006baa <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8006b9c:	4b5c      	ldr	r3, [pc, #368]	; (8006d10 <calWallConrol+0xe30>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f023 0302 	bic.w	r3, r3, #2
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b5a      	ldr	r3, [pc, #360]	; (8006d10 <calWallConrol+0xe30>)
 8006ba8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8006baa:	4b56      	ldr	r3, [pc, #344]	; (8006d04 <calWallConrol+0xe24>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2bb3      	cmp	r3, #179	; 0xb3
 8006bb0:	dd13      	ble.n	8006bda <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8006bb2:	4b55      	ldr	r3, [pc, #340]	; (8006d08 <calWallConrol+0xe28>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bbe:	4b50      	ldr	r3, [pc, #320]	; (8006d00 <calWallConrol+0xe20>)
 8006bc0:	edd3 7a00 	vldr	s15, [r3]
 8006bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8006bcc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8006d0c <calWallConrol+0xe2c>
 8006bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd8:	dd06      	ble.n	8006be8 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8006bda:	4b4d      	ldr	r3, [pc, #308]	; (8006d10 <calWallConrol+0xe30>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <calWallConrol+0xe30>)
 8006be6:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8006be8:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <calWallConrol+0xe30>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	f200 813d 	bhi.w	8006e6c <calWallConrol+0xf8c>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <calWallConrol+0xd18>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c09 	.word	0x08006c09
 8006bfc:	08006c5d 	.word	0x08006c5d
 8006c00:	08006d21 	.word	0x08006d21
 8006c04:	08006db7 	.word	0x08006db7
		case 0:			//両壁なし
			PID_wall = 0;
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f001 faf7 	bl	8008204 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006c16:	2000      	movs	r0, #0
 8006c18:	f001 fb2a 	bl	8008270 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006c1c:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <calWallConrol+0xe24>)
 8006c1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c2a:	4b3a      	ldr	r3, [pc, #232]	; (8006d14 <calWallConrol+0xe34>)
 8006c2c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006c30:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <calWallConrol+0xe24>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c3c:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <calWallConrol+0xe38>)
 8006c3e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8006c42:	4b36      	ldr	r3, [pc, #216]	; (8006d1c <calWallConrol+0xe3c>)
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8006c4a:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <calWallConrol+0xe3c>)
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8006c52:	4b32      	ldr	r3, [pc, #200]	; (8006d1c <calWallConrol+0xe3c>)
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
			break;
 8006c5a:	e107      	b.n	8006e6c <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f001 fad1 	bl	8008204 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8006c62:	2001      	movs	r0, #1
 8006c64:	f001 fb04 	bl	8008270 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006c68:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <calWallConrol+0xe24>)
 8006c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c76:	4b27      	ldr	r3, [pc, #156]	; (8006d14 <calWallConrol+0xe34>)
 8006c78:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8006c7c:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <calWallConrol+0xe38>)
 8006c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c80:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <calWallConrol+0xe24>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c96:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <calWallConrol+0xe24>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006caa:	4b1c      	ldr	r3, [pc, #112]	; (8006d1c <calWallConrol+0xe3c>)
 8006cac:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006cb0:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <calWallConrol+0xe3c>)
 8006cb2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006cb6:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <calWallConrol+0xe3c>)
 8006cb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006cc0:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <calWallConrol+0xe3c>)
 8006cc2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <calWallConrol+0xe3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a14      	ldr	r2, [pc, #80]	; (8006d1c <calWallConrol+0xe3c>)
 8006ccc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <calWallConrol+0xe3c>)
 8006cd0:	ed93 7a00 	vldr	s14, [r3]
 8006cd4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <calWallConrol+0xe3c>)
 8006cde:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ce2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006cf2:	e0bb      	b.n	8006e6c <calWallConrol+0xf8c>
 8006cf4:	20000614 	.word	0x20000614
 8006cf8:	20000644 	.word	0x20000644
 8006cfc:	200006d4 	.word	0x200006d4
 8006d00:	200006d8 	.word	0x200006d8
 8006d04:	200002bc 	.word	0x200002bc
 8006d08:	2000044c 	.word	0x2000044c
 8006d0c:	42a00000 	.word	0x42a00000
 8006d10:	2000059f 	.word	0x2000059f
 8006d14:	200005b8 	.word	0x200005b8
 8006d18:	200005bc 	.word	0x200005bc
 8006d1c:	20000584 	.word	0x20000584
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8006d20:	2001      	movs	r0, #1
 8006d22:	f001 fa6f 	bl	8008204 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8006d26:	2000      	movs	r0, #0
 8006d28:	f001 faa2 	bl	8008270 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8006d2c:	4aa4      	ldr	r2, [pc, #656]	; (8006fc0 <calWallConrol+0x10e0>)
 8006d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d30:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006d32:	4ba4      	ldr	r3, [pc, #656]	; (8006fc4 <calWallConrol+0x10e4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d3e:	4ba2      	ldr	r3, [pc, #648]	; (8006fc8 <calWallConrol+0x10e8>)
 8006d40:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8006d44:	4b9f      	ldr	r3, [pc, #636]	; (8006fc4 <calWallConrol+0x10e4>)
 8006d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d52:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006d56:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8006d5a:	4b9a      	ldr	r3, [pc, #616]	; (8006fc4 <calWallConrol+0x10e4>)
 8006d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8006d6c:	4b97      	ldr	r3, [pc, #604]	; (8006fcc <calWallConrol+0x10ec>)
 8006d6e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006d72:	4b96      	ldr	r3, [pc, #600]	; (8006fcc <calWallConrol+0x10ec>)
 8006d74:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006d78:	4b94      	ldr	r3, [pc, #592]	; (8006fcc <calWallConrol+0x10ec>)
 8006d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006d82:	4b92      	ldr	r3, [pc, #584]	; (8006fcc <calWallConrol+0x10ec>)
 8006d84:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8006d88:	4b90      	ldr	r3, [pc, #576]	; (8006fcc <calWallConrol+0x10ec>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a8f      	ldr	r2, [pc, #572]	; (8006fcc <calWallConrol+0x10ec>)
 8006d8e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006d90:	4b8e      	ldr	r3, [pc, #568]	; (8006fcc <calWallConrol+0x10ec>)
 8006d92:	ed93 7a00 	vldr	s14, [r3]
 8006d96:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006d9e:	4b8b      	ldr	r3, [pc, #556]	; (8006fcc <calWallConrol+0x10ec>)
 8006da0:	edd3 6a02 	vldr	s13, [r3, #8]
 8006da4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006db4:	e05a      	b.n	8006e6c <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8006db6:	2001      	movs	r0, #1
 8006db8:	f001 fa24 	bl	8008204 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f001 fa57 	bl	8008270 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8006dc2:	4a7f      	ldr	r2, [pc, #508]	; (8006fc0 <calWallConrol+0x10e0>)
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8006dc8:	4a7f      	ldr	r2, [pc, #508]	; (8006fc8 <calWallConrol+0x10e8>)
 8006dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dcc:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006dce:	4b7d      	ldr	r3, [pc, #500]	; (8006fc4 <calWallConrol+0x10e4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dda:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006de2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8006de6:	4b77      	ldr	r3, [pc, #476]	; (8006fc4 <calWallConrol+0x10e4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8006df6:	4b73      	ldr	r3, [pc, #460]	; (8006fc4 <calWallConrol+0x10e4>)
 8006df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e04:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006e08:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8006e0c:	4b6d      	ldr	r3, [pc, #436]	; (8006fc4 <calWallConrol+0x10e4>)
 8006e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8006e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006e22:	4b6a      	ldr	r3, [pc, #424]	; (8006fcc <calWallConrol+0x10ec>)
 8006e24:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006e28:	4b68      	ldr	r3, [pc, #416]	; (8006fcc <calWallConrol+0x10ec>)
 8006e2a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006e2e:	4b67      	ldr	r3, [pc, #412]	; (8006fcc <calWallConrol+0x10ec>)
 8006e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e34:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006e38:	4b64      	ldr	r3, [pc, #400]	; (8006fcc <calWallConrol+0x10ec>)
 8006e3a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8006e3e:	4b63      	ldr	r3, [pc, #396]	; (8006fcc <calWallConrol+0x10ec>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a62      	ldr	r2, [pc, #392]	; (8006fcc <calWallConrol+0x10ec>)
 8006e44:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006e46:	4b61      	ldr	r3, [pc, #388]	; (8006fcc <calWallConrol+0x10ec>)
 8006e48:	ed93 7a00 	vldr	s14, [r3]
 8006e4c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006e50:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006e54:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <calWallConrol+0x10ec>)
 8006e56:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e5a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e66:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006e6a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <calWallConrol+0x10f0>)
 8006e6e:	edd3 7a00 	vldr	s15, [r3]
 8006e72:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006fd4 <calWallConrol+0x10f4>
 8006e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	dd04      	ble.n	8006e8a <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 8006e80:	4b55      	ldr	r3, [pc, #340]	; (8006fd8 <calWallConrol+0x10f8>)
 8006e82:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 8006e84:	4b55      	ldr	r3, [pc, #340]	; (8006fdc <calWallConrol+0x10fc>)
 8006e86:	673b      	str	r3, [r7, #112]	; 0x70
 8006e88:	e023      	b.n	8006ed2 <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8006e8a:	4b51      	ldr	r3, [pc, #324]	; (8006fd0 <calWallConrol+0x10f0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7f9 fb82 	bl	8000598 <__aeabi_f2d>
 8006e94:	a346      	add	r3, pc, #280	; (adr r3, 8006fb0 <calWallConrol+0x10d0>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 fbd5 	bl	8000648 <__aeabi_dmul>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7f9 fea7 	bl	8000bf8 <__aeabi_d2f>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8006eae:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <calWallConrol+0x10f0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7f9 fb70 	bl	8000598 <__aeabi_f2d>
 8006eb8:	a33f      	add	r3, pc, #252	; (adr r3, 8006fb8 <calWallConrol+0x10d8>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fbc3 	bl	8000648 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 fe95 	bl	8000bf8 <__aeabi_d2f>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8006ed2:	4b43      	ldr	r3, [pc, #268]	; (8006fe0 <calWallConrol+0x1100>)
 8006ed4:	edd3 7a00 	vldr	s15, [r3]
 8006ed8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee4:	dd12      	ble.n	8006f0c <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8006ee6:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <calWallConrol+0x1100>)
 8006ee8:	edd3 7a00 	vldr	s15, [r3]
 8006eec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8006fe4 <calWallConrol+0x1104>
 8006ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef8:	d808      	bhi.n	8006f0c <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8006efa:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <calWallConrol+0x1108>)
 8006efc:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8006efe:	4b3b      	ldr	r3, [pc, #236]	; (8006fec <calWallConrol+0x110c>)
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8006f02:	4b3b      	ldr	r3, [pc, #236]	; (8006ff0 <calWallConrol+0x1110>)
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8006f06:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <calWallConrol+0x1114>)
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	e025      	b.n	8006f58 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006f0c:	4b2d      	ldr	r3, [pc, #180]	; (8006fc4 <calWallConrol+0x10e4>)
 8006f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f12:	2bdc      	cmp	r3, #220	; 0xdc
 8006f14:	dd07      	ble.n	8006f26 <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006f16:	4b38      	ldr	r3, [pc, #224]	; (8006ff8 <calWallConrol+0x1118>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	f043 0302 	orr.w	r3, r3, #2
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	4b35      	ldr	r3, [pc, #212]	; (8006ff8 <calWallConrol+0x1118>)
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e006      	b.n	8006f34 <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006f26:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <calWallConrol+0x1118>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f023 0302 	bic.w	r3, r3, #2
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <calWallConrol+0x1118>)
 8006f32:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8006f34:	4b23      	ldr	r3, [pc, #140]	; (8006fc4 <calWallConrol+0x10e4>)
 8006f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8006f58:	4b28      	ldr	r3, [pc, #160]	; (8006ffc <calWallConrol+0x111c>)
 8006f5a:	edd3 7a00 	vldr	s15, [r3]
 8006f5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6a:	dd12      	ble.n	8006f92 <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8006f6c:	4b23      	ldr	r3, [pc, #140]	; (8006ffc <calWallConrol+0x111c>)
 8006f6e:	edd3 7a00 	vldr	s15, [r3]
 8006f72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006fe4 <calWallConrol+0x1104>
 8006f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	d808      	bhi.n	8006f92 <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8006f80:	4b1f      	ldr	r3, [pc, #124]	; (8007000 <calWallConrol+0x1120>)
 8006f82:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8006f84:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <calWallConrol+0x1124>)
 8006f86:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8006f88:	4b1f      	ldr	r3, [pc, #124]	; (8007008 <calWallConrol+0x1128>)
 8006f8a:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8006f8c:	4b1f      	ldr	r3, [pc, #124]	; (800700c <calWallConrol+0x112c>)
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f90:	e056      	b.n	8007040 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <calWallConrol+0x10e4>)
 8006f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f96:	2bdc      	cmp	r3, #220	; 0xdc
 8006f98:	dd3a      	ble.n	8007010 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006f9a:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <calWallConrol+0x1118>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <calWallConrol+0x1118>)
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e039      	b.n	800701e <calWallConrol+0x113e>
 8006faa:	bf00      	nop
 8006fac:	f3af 8000 	nop.w
 8006fb0:	9999999a 	.word	0x9999999a
 8006fb4:	3fe99999 	.word	0x3fe99999
 8006fb8:	eb851eb8 	.word	0xeb851eb8
 8006fbc:	bfaeb851 	.word	0xbfaeb851
 8006fc0:	200005b8 	.word	0x200005b8
 8006fc4:	200002bc 	.word	0x200002bc
 8006fc8:	200005bc 	.word	0x200005bc
 8006fcc:	20000584 	.word	0x20000584
 8006fd0:	200004dc 	.word	0x200004dc
 8006fd4:	447a0000 	.word	0x447a0000
 8006fd8:	44480000 	.word	0x44480000
 8006fdc:	c2700000 	.word	0xc2700000
 8006fe0:	200005e8 	.word	0x200005e8
 8006fe4:	42a00000 	.word	0x42a00000
 8006fe8:	43e7e73c 	.word	0x43e7e73c
 8006fec:	c0f9d45b 	.word	0xc0f9d45b
 8006ff0:	3e043787 	.word	0x3e043787
 8006ff4:	b83cbe62 	.word	0xb83cbe62
 8006ff8:	200005a0 	.word	0x200005a0
 8006ffc:	200005ec 	.word	0x200005ec
 8007000:	440fa6b0 	.word	0x440fa6b0
 8007004:	c1892199 	.word	0xc1892199
 8007008:	3ea1604b 	.word	0x3ea1604b
 800700c:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8007010:	4bb5      	ldr	r3, [pc, #724]	; (80072e8 <calWallConrol+0x1408>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	4bb3      	ldr	r3, [pc, #716]	; (80072e8 <calWallConrol+0x1408>)
 800701c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 800701e:	4bb3      	ldr	r3, [pc, #716]	; (80072ec <calWallConrol+0x140c>)
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800702a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8007040:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8007044:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007048:	4ba9      	ldr	r3, [pc, #676]	; (80072f0 <calWallConrol+0x1410>)
 800704a:	edd3 7a00 	vldr	s15, [r3]
 800704e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007052:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8007056:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800705a:	4ba5      	ldr	r3, [pc, #660]	; (80072f0 <calWallConrol+0x1410>)
 800705c:	edd3 7a00 	vldr	s15, [r3]
 8007060:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8007064:	4ba2      	ldr	r3, [pc, #648]	; (80072f0 <calWallConrol+0x1410>)
 8007066:	edd3 7a00 	vldr	s15, [r3]
 800706a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800706e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8007072:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8007076:	4b9e      	ldr	r3, [pc, #632]	; (80072f0 <calWallConrol+0x1410>)
 8007078:	edd3 7a00 	vldr	s15, [r3]
 800707c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8007080:	4b9b      	ldr	r3, [pc, #620]	; (80072f0 <calWallConrol+0x1410>)
 8007082:	edd3 7a00 	vldr	s15, [r3]
 8007086:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800708a:	4b99      	ldr	r3, [pc, #612]	; (80072f0 <calWallConrol+0x1410>)
 800708c:	edd3 7a00 	vldr	s15, [r3]
 8007090:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8007094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007098:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 800709c:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 80070a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a4:	4b93      	ldr	r3, [pc, #588]	; (80072f4 <calWallConrol+0x1414>)
 80070a6:	edd3 7a00 	vldr	s15, [r3]
 80070aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80070b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80070b6:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <calWallConrol+0x1414>)
 80070b8:	edd3 7a00 	vldr	s15, [r3]
 80070bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80070c0:	4b8c      	ldr	r3, [pc, #560]	; (80072f4 <calWallConrol+0x1414>)
 80070c2:	edd3 7a00 	vldr	s15, [r3]
 80070c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80070ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 80070ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80070d2:	4b88      	ldr	r3, [pc, #544]	; (80072f4 <calWallConrol+0x1414>)
 80070d4:	edd3 7a00 	vldr	s15, [r3]
 80070d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80070dc:	4b85      	ldr	r3, [pc, #532]	; (80072f4 <calWallConrol+0x1414>)
 80070de:	edd3 7a00 	vldr	s15, [r3]
 80070e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80070e6:	4b83      	ldr	r3, [pc, #524]	; (80072f4 <calWallConrol+0x1414>)
 80070e8:	edd3 7a00 	vldr	s15, [r3]
 80070ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 80070f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 80070f8:	230b      	movs	r3, #11
 80070fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070fc:	e018      	b.n	8007130 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	3b01      	subs	r3, #1
 8007102:	4a7d      	ldr	r2, [pc, #500]	; (80072f8 <calWallConrol+0x1418>)
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	497b      	ldr	r1, [pc, #492]	; (80072f8 <calWallConrol+0x1418>)
 800710c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8007114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007116:	3b01      	subs	r3, #1
 8007118:	4a78      	ldr	r2, [pc, #480]	; (80072fc <calWallConrol+0x141c>)
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4976      	ldr	r1, [pc, #472]	; (80072fc <calWallConrol+0x141c>)
 8007122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800712a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712c:	3b01      	subs	r3, #1
 800712e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	2b00      	cmp	r3, #0
 8007134:	dce3      	bgt.n	80070fe <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8007136:	4a70      	ldr	r2, [pc, #448]	; (80072f8 <calWallConrol+0x1418>)
 8007138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 800713c:	4a6f      	ldr	r2, [pc, #444]	; (80072fc <calWallConrol+0x141c>)
 800713e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007140:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8007142:	4b6d      	ldr	r3, [pc, #436]	; (80072f8 <calWallConrol+0x1418>)
 8007144:	ed93 7a00 	vldr	s14, [r3]
 8007148:	4b6b      	ldr	r3, [pc, #428]	; (80072f8 <calWallConrol+0x1418>)
 800714a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800714e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007152:	4b6b      	ldr	r3, [pc, #428]	; (8007300 <calWallConrol+0x1420>)
 8007154:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8007158:	4b68      	ldr	r3, [pc, #416]	; (80072fc <calWallConrol+0x141c>)
 800715a:	ed93 7a00 	vldr	s14, [r3]
 800715e:	4b67      	ldr	r3, [pc, #412]	; (80072fc <calWallConrol+0x141c>)
 8007160:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007168:	4b66      	ldr	r3, [pc, #408]	; (8007304 <calWallConrol+0x1424>)
 800716a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 800716e:	4b5f      	ldr	r3, [pc, #380]	; (80072ec <calWallConrol+0x140c>)
 8007170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007174:	2bdc      	cmp	r3, #220	; 0xdc
 8007176:	dd1a      	ble.n	80071ae <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8007178:	4b63      	ldr	r3, [pc, #396]	; (8007308 <calWallConrol+0x1428>)
 800717a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <calWallConrol+0x1420>)
 8007186:	edd3 7a00 	vldr	s15, [r3]
 800718a:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 800718e:	eef0 7ae7 	vabs.f32	s15, s15
 8007192:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800730c <calWallConrol+0x142c>
 8007196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	d506      	bpl.n	80071ae <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80071a0:	4b51      	ldr	r3, [pc, #324]	; (80072e8 <calWallConrol+0x1408>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f043 0302 	orr.w	r3, r3, #2
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b4f      	ldr	r3, [pc, #316]	; (80072e8 <calWallConrol+0x1408>)
 80071ac:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80071ae:	4b4f      	ldr	r3, [pc, #316]	; (80072ec <calWallConrol+0x140c>)
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	2bdc      	cmp	r3, #220	; 0xdc
 80071b4:	dd1a      	ble.n	80071ec <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80071b6:	4b54      	ldr	r3, [pc, #336]	; (8007308 <calWallConrol+0x1428>)
 80071b8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071c2:	4b50      	ldr	r3, [pc, #320]	; (8007304 <calWallConrol+0x1424>)
 80071c4:	edd3 7a00 	vldr	s15, [r3]
 80071c8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80071cc:	eef0 7ae7 	vabs.f32	s15, s15
 80071d0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800730c <calWallConrol+0x142c>
 80071d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071dc:	d506      	bpl.n	80071ec <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 80071de:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <calWallConrol+0x1408>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <calWallConrol+0x1408>)
 80071ea:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 80071ec:	4b3f      	ldr	r3, [pc, #252]	; (80072ec <calWallConrol+0x140c>)
 80071ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071f2:	2bdb      	cmp	r3, #219	; 0xdb
 80071f4:	dd13      	ble.n	800721e <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80071f6:	4b44      	ldr	r3, [pc, #272]	; (8007308 <calWallConrol+0x1428>)
 80071f8:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007202:	4b3f      	ldr	r3, [pc, #252]	; (8007300 <calWallConrol+0x1420>)
 8007204:	edd3 7a00 	vldr	s15, [r3]
 8007208:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800720c:	eef0 7ae7 	vabs.f32	s15, s15
 8007210:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800730c <calWallConrol+0x142c>
 8007214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721c:	dd06      	ble.n	800722c <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 800721e:	4b32      	ldr	r3, [pc, #200]	; (80072e8 <calWallConrol+0x1408>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f023 0302 	bic.w	r3, r3, #2
 8007226:	b2da      	uxtb	r2, r3
 8007228:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <calWallConrol+0x1408>)
 800722a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 800722c:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <calWallConrol+0x140c>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	2bdb      	cmp	r3, #219	; 0xdb
 8007232:	dd13      	ble.n	800725c <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8007234:	4b34      	ldr	r3, [pc, #208]	; (8007308 <calWallConrol+0x1428>)
 8007236:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007240:	4b30      	ldr	r3, [pc, #192]	; (8007304 <calWallConrol+0x1424>)
 8007242:	edd3 7a00 	vldr	s15, [r3]
 8007246:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800724a:	eef0 7ae7 	vabs.f32	s15, s15
 800724e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800730c <calWallConrol+0x142c>
 8007252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725a:	dd06      	ble.n	800726a <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 800725c:	4b22      	ldr	r3, [pc, #136]	; (80072e8 <calWallConrol+0x1408>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <calWallConrol+0x1408>)
 8007268:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 800726a:	4b1f      	ldr	r3, [pc, #124]	; (80072e8 <calWallConrol+0x1408>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b03      	cmp	r3, #3
 8007270:	f200 8155 	bhi.w	800751e <calWallConrol+0x163e>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <calWallConrol+0x139c>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	0800728d 	.word	0x0800728d
 8007280:	08007321 	.word	0x08007321
 8007284:	080073c1 	.word	0x080073c1
 8007288:	0800745f 	.word	0x0800745f
		case 0:			//両壁なし
			PID_wall += 0;
 800728c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007290:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007310 <calWallConrol+0x1430>
 8007294:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007298:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 800729c:	2000      	movs	r0, #0
 800729e:	f000 ffc3 	bl	8008228 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80072a2:	2000      	movs	r0, #0
 80072a4:	f000 ffd2 	bl	800824c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80072a8:	4b10      	ldr	r3, [pc, #64]	; (80072ec <calWallConrol+0x140c>)
 80072aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <calWallConrol+0x1434>)
 80072b8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <calWallConrol+0x140c>)
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c8:	4b13      	ldr	r3, [pc, #76]	; (8007318 <calWallConrol+0x1438>)
 80072ca:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <calWallConrol+0x143c>)
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 80072d6:	4b11      	ldr	r3, [pc, #68]	; (800731c <calWallConrol+0x143c>)
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <calWallConrol+0x143c>)
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	605a      	str	r2, [r3, #4]
			break;
 80072e6:	e11a      	b.n	800751e <calWallConrol+0x163e>
 80072e8:	200005a0 	.word	0x200005a0
 80072ec:	200002bc 	.word	0x200002bc
 80072f0:	200005e8 	.word	0x200005e8
 80072f4:	200005ec 	.word	0x200005ec
 80072f8:	20000674 	.word	0x20000674
 80072fc:	200006a4 	.word	0x200006a4
 8007300:	200006dc 	.word	0x200006dc
 8007304:	200006e0 	.word	0x200006e0
 8007308:	2000044c 	.word	0x2000044c
 800730c:	42a00000 	.word	0x42a00000
 8007310:	00000000 	.word	0x00000000
 8007314:	200005b0 	.word	0x200005b0
 8007318:	200005b4 	.word	0x200005b4
 800731c:	20000590 	.word	0x20000590
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8007320:	2000      	movs	r0, #0
 8007322:	f000 ff81 	bl	8008228 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8007326:	2001      	movs	r0, #1
 8007328:	f000 ff90 	bl	800824c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 800732c:	4b87      	ldr	r3, [pc, #540]	; (800754c <calWallConrol+0x166c>)
 800732e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800733a:	4b85      	ldr	r3, [pc, #532]	; (8007550 <calWallConrol+0x1670>)
 800733c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8007340:	4a84      	ldr	r2, [pc, #528]	; (8007554 <calWallConrol+0x1674>)
 8007342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007344:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8007346:	4b81      	ldr	r3, [pc, #516]	; (800754c <calWallConrol+0x166c>)
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007352:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800735a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 800735e:	4b7b      	ldr	r3, [pc, #492]	; (800754c <calWallConrol+0x166c>)
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800736a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 800736e:	4b7a      	ldr	r3, [pc, #488]	; (8007558 <calWallConrol+0x1678>)
 8007370:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8007374:	4b78      	ldr	r3, [pc, #480]	; (8007558 <calWallConrol+0x1678>)
 8007376:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800737a:	4b77      	ldr	r3, [pc, #476]	; (8007558 <calWallConrol+0x1678>)
 800737c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007380:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8007384:	4b74      	ldr	r3, [pc, #464]	; (8007558 <calWallConrol+0x1678>)
 8007386:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800738a:	4b73      	ldr	r3, [pc, #460]	; (8007558 <calWallConrol+0x1678>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a72      	ldr	r2, [pc, #456]	; (8007558 <calWallConrol+0x1678>)
 8007390:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8007392:	4b71      	ldr	r3, [pc, #452]	; (8007558 <calWallConrol+0x1678>)
 8007394:	ed93 7a00 	vldr	s14, [r3]
 8007398:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800739c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80073a0:	4b6d      	ldr	r3, [pc, #436]	; (8007558 <calWallConrol+0x1678>)
 80073a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80073a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80073aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ae:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80073b2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80073b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80073be:	e0ae      	b.n	800751e <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 80073c0:	2001      	movs	r0, #1
 80073c2:	f000 ff31 	bl	8008228 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80073c6:	2000      	movs	r0, #0
 80073c8:	f000 ff40 	bl	800824c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80073cc:	4a60      	ldr	r2, [pc, #384]	; (8007550 <calWallConrol+0x1670>)
 80073ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 80073d2:	4b5e      	ldr	r3, [pc, #376]	; (800754c <calWallConrol+0x166c>)
 80073d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073de:	4b5d      	ldr	r3, [pc, #372]	; (8007554 <calWallConrol+0x1674>)
 80073e0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80073e4:	4b59      	ldr	r3, [pc, #356]	; (800754c <calWallConrol+0x166c>)
 80073e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80073f6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80073fa:	4b54      	ldr	r3, [pc, #336]	; (800754c <calWallConrol+0x166c>)
 80073fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007408:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800740c:	4b52      	ldr	r3, [pc, #328]	; (8007558 <calWallConrol+0x1678>)
 800740e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8007412:	4b51      	ldr	r3, [pc, #324]	; (8007558 <calWallConrol+0x1678>)
 8007414:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8007418:	4b4f      	ldr	r3, [pc, #316]	; (8007558 <calWallConrol+0x1678>)
 800741a:	edd3 7a01 	vldr	s15, [r3, #4]
 800741e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8007422:	4b4d      	ldr	r3, [pc, #308]	; (8007558 <calWallConrol+0x1678>)
 8007424:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8007428:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <calWallConrol+0x1678>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a4a      	ldr	r2, [pc, #296]	; (8007558 <calWallConrol+0x1678>)
 800742e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8007430:	4b49      	ldr	r3, [pc, #292]	; (8007558 <calWallConrol+0x1678>)
 8007432:	ed93 7a00 	vldr	s14, [r3]
 8007436:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800743a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800743e:	4b46      	ldr	r3, [pc, #280]	; (8007558 <calWallConrol+0x1678>)
 8007440:	edd3 6a02 	vldr	s13, [r3, #8]
 8007444:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800744c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8007450:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007458:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800745c:	e05f      	b.n	800751e <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 800745e:	2001      	movs	r0, #1
 8007460:	f000 fee2 	bl	8008228 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8007464:	2001      	movs	r0, #1
 8007466:	f000 fef1 	bl	800824c <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800746a:	4a39      	ldr	r2, [pc, #228]	; (8007550 <calWallConrol+0x1670>)
 800746c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8007470:	4a38      	ldr	r2, [pc, #224]	; (8007554 <calWallConrol+0x1674>)
 8007472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007474:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8007476:	4b35      	ldr	r3, [pc, #212]	; (800754c <calWallConrol+0x166c>)
 8007478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007482:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800748a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <calWallConrol+0x166c>)
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800749e:	4b2b      	ldr	r3, [pc, #172]	; (800754c <calWallConrol+0x166c>)
 80074a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80074ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80074b0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80074b4:	4b25      	ldr	r3, [pc, #148]	; (800754c <calWallConrol+0x166c>)
 80074b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80074c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80074c6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <calWallConrol+0x1678>)
 80074cc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80074d0:	4b21      	ldr	r3, [pc, #132]	; (8007558 <calWallConrol+0x1678>)
 80074d2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <calWallConrol+0x1678>)
 80074d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80074dc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <calWallConrol+0x1678>)
 80074e2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80074e6:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <calWallConrol+0x1678>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <calWallConrol+0x1678>)
 80074ec:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80074ee:	4b1a      	ldr	r3, [pc, #104]	; (8007558 <calWallConrol+0x1678>)
 80074f0:	ed93 7a00 	vldr	s14, [r3]
 80074f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80074f8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80074fc:	4b16      	ldr	r3, [pc, #88]	; (8007558 <calWallConrol+0x1678>)
 80074fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8007502:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800750a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800750e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007516:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800751a:	e000      	b.n	800751e <calWallConrol+0x163e>
			break;
 800751c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 800751e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007522:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800755c <calWallConrol+0x167c>
 8007526:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800752a:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <calWallConrol+0x1680>)
 800752c:	edd3 7a00 	vldr	s15, [r3]
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8007538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800753a:	ee07 3a90 	vmov	s15, r3
}
 800753e:	eeb0 0a67 	vmov.f32	s0, s15
 8007542:	37a8      	adds	r7, #168	; 0xa8
 8007544:	46bd      	mov	sp, r7
 8007546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754a:	bf00      	nop
 800754c:	200002bc 	.word	0x200002bc
 8007550:	200005b0 	.word	0x200005b0
 8007554:	200005b4 	.word	0x200005b4
 8007558:	20000590 	.word	0x20000590
 800755c:	44d1e000 	.word	0x44d1e000
 8007560:	200004d8 	.word	0x200004d8
 8007564:	00000000 	.word	0x00000000

08007568 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8007568:	b5b0      	push	{r4, r5, r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 800756e:	4ba2      	ldr	r3, [pc, #648]	; (80077f8 <interrupt_WallCut+0x290>)
 8007570:	edd3 7a00 	vldr	s15, [r3]
 8007574:	eef0 7ae7 	vabs.f32	s15, s15
 8007578:	ee17 0a90 	vmov	r0, s15
 800757c:	f7f9 f80c 	bl	8000598 <__aeabi_f2d>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	a198      	add	r1, pc, #608	; (adr r1, 80077e8 <interrupt_WallCut+0x280>)
 8007586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800758a:	f7f9 f987 	bl	800089c <__aeabi_ddiv>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	ec43 2b17 	vmov	d7, r2, r3
 8007596:	eeb0 0a47 	vmov.f32	s0, s14
 800759a:	eef0 0a67 	vmov.f32	s1, s15
 800759e:	f01d fb23 	bl	8024be8 <ceil>
 80075a2:	ec53 2b10 	vmov	r2, r3, d0
 80075a6:	4610      	mov	r0, r2
 80075a8:	4619      	mov	r1, r3
 80075aa:	f7f9 fafd 	bl	8000ba8 <__aeabi_d2iz>
 80075ae:	4603      	mov	r3, r0
 80075b0:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b0a      	cmp	r3, #10
 80075b6:	dd01      	ble.n	80075bc <interrupt_WallCut+0x54>
 80075b8:	230b      	movs	r3, #11
 80075ba:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b04      	cmp	r3, #4
 80075c0:	dc01      	bgt.n	80075c6 <interrupt_WallCut+0x5e>
 80075c2:	2304      	movs	r3, #4
 80075c4:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	e019      	b.n	8007600 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 80075cc:	498b      	ldr	r1, [pc, #556]	; (80077fc <interrupt_WallCut+0x294>)
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	440b      	add	r3, r1
 80075da:	6819      	ldr	r1, [r3, #0]
 80075dc:	4887      	ldr	r0, [pc, #540]	; (80077fc <interrupt_WallCut+0x294>)
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4413      	add	r3, r2
 80075ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80075f0:	1aca      	subs	r2, r1, r3
 80075f2:	4983      	ldr	r1, [pc, #524]	; (8007800 <interrupt_WallCut+0x298>)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b04      	cmp	r3, #4
 8007604:	dde2      	ble.n	80075cc <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8007606:	4b7f      	ldr	r3, [pc, #508]	; (8007804 <interrupt_WallCut+0x29c>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b01      	cmp	r3, #1
 800760c:	f040 8555 	bne.w	80080ba <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8007610:	4b7a      	ldr	r3, [pc, #488]	; (80077fc <interrupt_WallCut+0x294>)
 8007612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800761a:	dd03      	ble.n	8007624 <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 800761c:	4b7a      	ldr	r3, [pc, #488]	; (8007808 <interrupt_WallCut+0x2a0>)
 800761e:	2201      	movs	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e002      	b.n	800762a <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 8007624:	4b78      	ldr	r3, [pc, #480]	; (8007808 <interrupt_WallCut+0x2a0>)
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 800762a:	4b74      	ldr	r3, [pc, #464]	; (80077fc <interrupt_WallCut+0x294>)
 800762c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007630:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007634:	dd03      	ble.n	800763e <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 8007636:	4b75      	ldr	r3, [pc, #468]	; (800780c <interrupt_WallCut+0x2a4>)
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e002      	b.n	8007644 <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 800763e:	4b73      	ldr	r3, [pc, #460]	; (800780c <interrupt_WallCut+0x2a4>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8007644:	4b6d      	ldr	r3, [pc, #436]	; (80077fc <interrupt_WallCut+0x294>)
 8007646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800764a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800764e:	dd03      	ble.n	8007658 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8007650:	4b6f      	ldr	r3, [pc, #444]	; (8007810 <interrupt_WallCut+0x2a8>)
 8007652:	2201      	movs	r2, #1
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	e002      	b.n	800765e <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8007658:	4b6d      	ldr	r3, [pc, #436]	; (8007810 <interrupt_WallCut+0x2a8>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 800765e:	4b67      	ldr	r3, [pc, #412]	; (80077fc <interrupt_WallCut+0x294>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007666:	da30      	bge.n	80076ca <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8007668:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <interrupt_WallCut+0x2ac>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	4a69      	ldr	r2, [pc, #420]	; (8007814 <interrupt_WallCut+0x2ac>)
 8007670:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8007672:	4b69      	ldr	r3, [pc, #420]	; (8007818 <interrupt_WallCut+0x2b0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f7f8 ff8e 	bl	8000598 <__aeabi_f2d>
 800767c:	4604      	mov	r4, r0
 800767e:	460d      	mov	r5, r1
 8007680:	4b66      	ldr	r3, [pc, #408]	; (800781c <interrupt_WallCut+0x2b4>)
 8007682:	ed93 7a00 	vldr	s14, [r3]
 8007686:	4b66      	ldr	r3, [pc, #408]	; (8007820 <interrupt_WallCut+0x2b8>)
 8007688:	edd3 7a00 	vldr	s15, [r3]
 800768c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007690:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007694:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007698:	ee16 0a90 	vmov	r0, s13
 800769c:	f7f8 ff7c 	bl	8000598 <__aeabi_f2d>
 80076a0:	a353      	add	r3, pc, #332	; (adr r3, 80077f0 <interrupt_WallCut+0x288>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 ffcf 	bl	8000648 <__aeabi_dmul>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f8 fe13 	bl	80002dc <__adddf3>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4610      	mov	r0, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	f7f9 fa9b 	bl	8000bf8 <__aeabi_d2f>
 80076c2:	4603      	mov	r3, r0
 80076c4:	4a54      	ldr	r2, [pc, #336]	; (8007818 <interrupt_WallCut+0x2b0>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	e006      	b.n	80076d8 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80076ca:	4b52      	ldr	r3, [pc, #328]	; (8007814 <interrupt_WallCut+0x2ac>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80076d0:	4b51      	ldr	r3, [pc, #324]	; (8007818 <interrupt_WallCut+0x2b0>)
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80076d8:	4b48      	ldr	r3, [pc, #288]	; (80077fc <interrupt_WallCut+0x294>)
 80076da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80076de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80076e2:	da30      	bge.n	8007746 <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 80076e4:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <interrupt_WallCut+0x2bc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a4e      	ldr	r2, [pc, #312]	; (8007824 <interrupt_WallCut+0x2bc>)
 80076ec:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80076ee:	4b4e      	ldr	r3, [pc, #312]	; (8007828 <interrupt_WallCut+0x2c0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f8 ff50 	bl	8000598 <__aeabi_f2d>
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4b47      	ldr	r3, [pc, #284]	; (800781c <interrupt_WallCut+0x2b4>)
 80076fe:	ed93 7a00 	vldr	s14, [r3]
 8007702:	4b47      	ldr	r3, [pc, #284]	; (8007820 <interrupt_WallCut+0x2b8>)
 8007704:	edd3 7a00 	vldr	s15, [r3]
 8007708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800770c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007710:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007714:	ee16 0a90 	vmov	r0, s13
 8007718:	f7f8 ff3e 	bl	8000598 <__aeabi_f2d>
 800771c:	a334      	add	r3, pc, #208	; (adr r3, 80077f0 <interrupt_WallCut+0x288>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 ff91 	bl	8000648 <__aeabi_dmul>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 fdd5 	bl	80002dc <__adddf3>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4610      	mov	r0, r2
 8007738:	4619      	mov	r1, r3
 800773a:	f7f9 fa5d 	bl	8000bf8 <__aeabi_d2f>
 800773e:	4603      	mov	r3, r0
 8007740:	4a39      	ldr	r2, [pc, #228]	; (8007828 <interrupt_WallCut+0x2c0>)
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	e006      	b.n	8007754 <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 8007746:	4b37      	ldr	r3, [pc, #220]	; (8007824 <interrupt_WallCut+0x2bc>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 800774c:	4b36      	ldr	r3, [pc, #216]	; (8007828 <interrupt_WallCut+0x2c0>)
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8007754:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <interrupt_WallCut+0x298>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f113 0f59 	cmn.w	r3, #89	; 0x59
 800775c:	da03      	bge.n	8007766 <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 800775e:	4b27      	ldr	r3, [pc, #156]	; (80077fc <interrupt_WallCut+0x294>)
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	2bc8      	cmp	r3, #200	; 0xc8
 8007764:	dd37      	ble.n	80077d6 <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8007766:	4b31      	ldr	r3, [pc, #196]	; (800782c <interrupt_WallCut+0x2c4>)
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 800776e:	4b30      	ldr	r3, [pc, #192]	; (8007830 <interrupt_WallCut+0x2c8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	4a2e      	ldr	r2, [pc, #184]	; (8007830 <interrupt_WallCut+0x2c8>)
 8007776:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8007778:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <interrupt_WallCut+0x2cc>)
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800777e:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <interrupt_WallCut+0x2d0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f7f8 ff08 	bl	8000598 <__aeabi_f2d>
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <interrupt_WallCut+0x2b4>)
 800778e:	ed93 7a00 	vldr	s14, [r3]
 8007792:	4b23      	ldr	r3, [pc, #140]	; (8007820 <interrupt_WallCut+0x2b8>)
 8007794:	edd3 7a00 	vldr	s15, [r3]
 8007798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80077a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077a4:	ee16 0a90 	vmov	r0, s13
 80077a8:	f7f8 fef6 	bl	8000598 <__aeabi_f2d>
 80077ac:	a310      	add	r3, pc, #64	; (adr r3, 80077f0 <interrupt_WallCut+0x288>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f7f8 ff49 	bl	8000648 <__aeabi_dmul>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f8 fd8d 	bl	80002dc <__adddf3>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4610      	mov	r0, r2
 80077c8:	4619      	mov	r1, r3
 80077ca:	f7f9 fa15 	bl	8000bf8 <__aeabi_d2f>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4a19      	ldr	r2, [pc, #100]	; (8007838 <interrupt_WallCut+0x2d0>)
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	e09f      	b.n	8007916 <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <interrupt_WallCut+0x2cc>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d16b      	bne.n	80078b6 <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e04b      	b.n	800787c <interrupt_WallCut+0x314>
 80077e4:	f3af 8000 	nop.w
 80077e8:	00000000 	.word	0x00000000
 80077ec:	40ab5800 	.word	0x40ab5800
 80077f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80077f4:	3f50624d 	.word	0x3f50624d
 80077f8:	200004dc 	.word	0x200004dc
 80077fc:	200002bc 	.word	0x200002bc
 8007800:	20000460 	.word	0x20000460
 8007804:	2000059e 	.word	0x2000059e
 8007808:	200005fe 	.word	0x200005fe
 800780c:	200005ff 	.word	0x200005ff
 8007810:	20000600 	.word	0x20000600
 8007814:	200005c4 	.word	0x200005c4
 8007818:	200005dc 	.word	0x200005dc
 800781c:	20000258 	.word	0x20000258
 8007820:	2000025c 	.word	0x2000025c
 8007824:	200005c0 	.word	0x200005c0
 8007828:	200005d8 	.word	0x200005d8
 800782c:	20000604 	.word	0x20000604
 8007830:	200005cc 	.word	0x200005cc
 8007834:	200005f8 	.word	0x200005f8
 8007838:	200005e4 	.word	0x200005e4
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800783c:	4a7c      	ldr	r2, [pc, #496]	; (8007a30 <interrupt_WallCut+0x4c8>)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3314      	adds	r3, #20
 8007842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800784e:	4b79      	ldr	r3, [pc, #484]	; (8007a34 <interrupt_WallCut+0x4cc>)
 8007850:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8007854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	dd0b      	ble.n	8007876 <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800785e:	4a74      	ldr	r2, [pc, #464]	; (8007a30 <interrupt_WallCut+0x4c8>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3314      	adds	r3, #20
 8007864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8007870:	4b70      	ldr	r3, [pc, #448]	; (8007a34 <interrupt_WallCut+0x4cc>)
 8007872:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b13      	cmp	r3, #19
 8007880:	dddc      	ble.n	800783c <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 8007882:	4b6d      	ldr	r3, [pc, #436]	; (8007a38 <interrupt_WallCut+0x4d0>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8007888:	4b6c      	ldr	r3, [pc, #432]	; (8007a3c <interrupt_WallCut+0x4d4>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800788e:	4b69      	ldr	r3, [pc, #420]	; (8007a34 <interrupt_WallCut+0x4cc>)
 8007890:	edd3 7a00 	vldr	s15, [r3]
 8007894:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007a40 <interrupt_WallCut+0x4d8>
 8007898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800789c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007a44 <interrupt_WallCut+0x4dc>
 80078a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80078a4:	4b63      	ldr	r3, [pc, #396]	; (8007a34 <interrupt_WallCut+0x4cc>)
 80078a6:	ed93 7a00 	vldr	s14, [r3]
 80078aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80078ae:	4b66      	ldr	r3, [pc, #408]	; (8007a48 <interrupt_WallCut+0x4e0>)
 80078b0:	edc3 7a00 	vstr	s15, [r3]
 80078b4:	e02f      	b.n	8007916 <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 80078b6:	4b60      	ldr	r3, [pc, #384]	; (8007a38 <interrupt_WallCut+0x4d0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a5e      	ldr	r2, [pc, #376]	; (8007a38 <interrupt_WallCut+0x4d0>)
 80078be:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80078c0:	4b61      	ldr	r3, [pc, #388]	; (8007a48 <interrupt_WallCut+0x4e0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7f8 fe67 	bl	8000598 <__aeabi_f2d>
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <interrupt_WallCut+0x4e4>)
 80078d0:	ed93 7a00 	vldr	s14, [r3]
 80078d4:	4b5e      	ldr	r3, [pc, #376]	; (8007a50 <interrupt_WallCut+0x4e8>)
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80078de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80078e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078e6:	ee16 0a90 	vmov	r0, s13
 80078ea:	f7f8 fe55 	bl	8000598 <__aeabi_f2d>
 80078ee:	a34e      	add	r3, pc, #312	; (adr r3, 8007a28 <interrupt_WallCut+0x4c0>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 fea8 	bl	8000648 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fcec 	bl	80002dc <__adddf3>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4610      	mov	r0, r2
 800790a:	4619      	mov	r1, r3
 800790c:	f7f9 f974 	bl	8000bf8 <__aeabi_d2f>
 8007910:	4603      	mov	r3, r0
 8007912:	4a4d      	ldr	r2, [pc, #308]	; (8007a48 <interrupt_WallCut+0x4e0>)
 8007914:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8007916:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <interrupt_WallCut+0x4ec>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800791e:	da05      	bge.n	800792c <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8007920:	4b43      	ldr	r3, [pc, #268]	; (8007a30 <interrupt_WallCut+0x4c8>)
 8007922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007926:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800792a:	dd37      	ble.n	800799c <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800792c:	4b4a      	ldr	r3, [pc, #296]	; (8007a58 <interrupt_WallCut+0x4f0>)
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8007934:	4b49      	ldr	r3, [pc, #292]	; (8007a5c <interrupt_WallCut+0x4f4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a48      	ldr	r2, [pc, #288]	; (8007a5c <interrupt_WallCut+0x4f4>)
 800793c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800793e:	4b48      	ldr	r3, [pc, #288]	; (8007a60 <interrupt_WallCut+0x4f8>)
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8007944:	4b47      	ldr	r3, [pc, #284]	; (8007a64 <interrupt_WallCut+0x4fc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f7f8 fe25 	bl	8000598 <__aeabi_f2d>
 800794e:	4604      	mov	r4, r0
 8007950:	460d      	mov	r5, r1
 8007952:	4b3e      	ldr	r3, [pc, #248]	; (8007a4c <interrupt_WallCut+0x4e4>)
 8007954:	ed93 7a00 	vldr	s14, [r3]
 8007958:	4b3d      	ldr	r3, [pc, #244]	; (8007a50 <interrupt_WallCut+0x4e8>)
 800795a:	edd3 7a00 	vldr	s15, [r3]
 800795e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007962:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007966:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800796a:	ee16 0a90 	vmov	r0, s13
 800796e:	f7f8 fe13 	bl	8000598 <__aeabi_f2d>
 8007972:	a32d      	add	r3, pc, #180	; (adr r3, 8007a28 <interrupt_WallCut+0x4c0>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f7f8 fe66 	bl	8000648 <__aeabi_dmul>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4620      	mov	r0, r4
 8007982:	4629      	mov	r1, r5
 8007984:	f7f8 fcaa 	bl	80002dc <__adddf3>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4610      	mov	r0, r2
 800798e:	4619      	mov	r1, r3
 8007990:	f7f9 f932 	bl	8000bf8 <__aeabi_d2f>
 8007994:	4603      	mov	r3, r0
 8007996:	4a33      	ldr	r2, [pc, #204]	; (8007a64 <interrupt_WallCut+0x4fc>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e097      	b.n	8007acc <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800799c:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <interrupt_WallCut+0x4f8>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d163      	bne.n	8007a6c <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 80079a4:	2300      	movs	r3, #0
 80079a6:	60bb      	str	r3, [r7, #8]
 80079a8:	e01f      	b.n	80079ea <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <interrupt_WallCut+0x4c8>)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	333c      	adds	r3, #60	; 0x3c
 80079b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079bc:	4b26      	ldr	r3, [pc, #152]	; (8007a58 <interrupt_WallCut+0x4f0>)
 80079be:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80079c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	dd0b      	ble.n	80079e4 <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80079cc:	4a18      	ldr	r2, [pc, #96]	; (8007a30 <interrupt_WallCut+0x4c8>)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	333c      	adds	r3, #60	; 0x3c
 80079d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80079de:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <interrupt_WallCut+0x4f0>)
 80079e0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b13      	cmp	r3, #19
 80079ee:	dddc      	ble.n	80079aa <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <interrupt_WallCut+0x4f4>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80079f6:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <interrupt_WallCut+0x4f8>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80079fc:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <interrupt_WallCut+0x4f0>)
 80079fe:	edd3 7a00 	vldr	s15, [r3]
 8007a02:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007a68 <interrupt_WallCut+0x500>
 8007a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a0a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007a44 <interrupt_WallCut+0x4dc>
 8007a0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007a12:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <interrupt_WallCut+0x4f0>)
 8007a14:	ed93 7a00 	vldr	s14, [r3]
 8007a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8007a1c:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <interrupt_WallCut+0x4fc>)
 8007a1e:	edc3 7a00 	vstr	s15, [r3]
 8007a22:	e053      	b.n	8007acc <interrupt_WallCut+0x564>
 8007a24:	f3af 8000 	nop.w
 8007a28:	d2f1a9fc 	.word	0xd2f1a9fc
 8007a2c:	3f50624d 	.word	0x3f50624d
 8007a30:	200002bc 	.word	0x200002bc
 8007a34:	20000604 	.word	0x20000604
 8007a38:	200005cc 	.word	0x200005cc
 8007a3c:	200005f8 	.word	0x200005f8
 8007a40:	43f68000 	.word	0x43f68000
 8007a44:	00000000 	.word	0x00000000
 8007a48:	200005e4 	.word	0x200005e4
 8007a4c:	20000258 	.word	0x20000258
 8007a50:	2000025c 	.word	0x2000025c
 8007a54:	20000460 	.word	0x20000460
 8007a58:	20000608 	.word	0x20000608
 8007a5c:	200005c8 	.word	0x200005c8
 8007a60:	200005f9 	.word	0x200005f9
 8007a64:	200005e0 	.word	0x200005e0
 8007a68:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 8007a6c:	4b94      	ldr	r3, [pc, #592]	; (8007cc0 <interrupt_WallCut+0x758>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a93      	ldr	r2, [pc, #588]	; (8007cc0 <interrupt_WallCut+0x758>)
 8007a74:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8007a76:	4b93      	ldr	r3, [pc, #588]	; (8007cc4 <interrupt_WallCut+0x75c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f8 fd8c 	bl	8000598 <__aeabi_f2d>
 8007a80:	4604      	mov	r4, r0
 8007a82:	460d      	mov	r5, r1
 8007a84:	4b90      	ldr	r3, [pc, #576]	; (8007cc8 <interrupt_WallCut+0x760>)
 8007a86:	ed93 7a00 	vldr	s14, [r3]
 8007a8a:	4b90      	ldr	r3, [pc, #576]	; (8007ccc <interrupt_WallCut+0x764>)
 8007a8c:	edd3 7a00 	vldr	s15, [r3]
 8007a90:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8007a94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007a98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a9c:	ee16 0a90 	vmov	r0, s13
 8007aa0:	f7f8 fd7a 	bl	8000598 <__aeabi_f2d>
 8007aa4:	a384      	add	r3, pc, #528	; (adr r3, 8007cb8 <interrupt_WallCut+0x750>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f7f8 fdcd 	bl	8000648 <__aeabi_dmul>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f8 fc11 	bl	80002dc <__adddf3>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4610      	mov	r0, r2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7f9 f899 	bl	8000bf8 <__aeabi_d2f>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4a7e      	ldr	r2, [pc, #504]	; (8007cc4 <interrupt_WallCut+0x75c>)
 8007aca:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8007acc:	4b80      	ldr	r3, [pc, #512]	; (8007cd0 <interrupt_WallCut+0x768>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8007ad4:	db5f      	blt.n	8007b96 <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8007ad6:	4b7f      	ldr	r3, [pc, #508]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8007ade:	4b7e      	ldr	r3, [pc, #504]	; (8007cd8 <interrupt_WallCut+0x770>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a7c      	ldr	r2, [pc, #496]	; (8007cd8 <interrupt_WallCut+0x770>)
 8007ae6:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f000 fccf 	bl	800848c <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8007aee:	4b7b      	ldr	r3, [pc, #492]	; (8007cdc <interrupt_WallCut+0x774>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007af4:	4b7a      	ldr	r3, [pc, #488]	; (8007ce0 <interrupt_WallCut+0x778>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f8 fd4d 	bl	8000598 <__aeabi_f2d>
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	4b71      	ldr	r3, [pc, #452]	; (8007cc8 <interrupt_WallCut+0x760>)
 8007b04:	ed93 7a00 	vldr	s14, [r3]
 8007b08:	4b70      	ldr	r3, [pc, #448]	; (8007ccc <interrupt_WallCut+0x764>)
 8007b0a:	edd3 7a00 	vldr	s15, [r3]
 8007b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007b12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b1a:	ee16 0a90 	vmov	r0, s13
 8007b1e:	f7f8 fd3b 	bl	8000598 <__aeabi_f2d>
 8007b22:	a365      	add	r3, pc, #404	; (adr r3, 8007cb8 <interrupt_WallCut+0x750>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fd8e 	bl	8000648 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 fbd2 	bl	80002dc <__adddf3>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7f9 f85a 	bl	8000bf8 <__aeabi_d2f>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4a66      	ldr	r2, [pc, #408]	; (8007ce0 <interrupt_WallCut+0x778>)
 8007b48:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8007b4a:	4b66      	ldr	r3, [pc, #408]	; (8007ce4 <interrupt_WallCut+0x77c>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	f040 812b 	bne.w	8007daa <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007b54:	4b64      	ldr	r3, [pc, #400]	; (8007ce8 <interrupt_WallCut+0x780>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7f8 fd1d 	bl	8000598 <__aeabi_f2d>
 8007b5e:	4604      	mov	r4, r0
 8007b60:	460d      	mov	r5, r1
 8007b62:	4b62      	ldr	r3, [pc, #392]	; (8007cec <interrupt_WallCut+0x784>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7f8 fd16 	bl	8000598 <__aeabi_f2d>
 8007b6c:	a352      	add	r3, pc, #328	; (adr r3, 8007cb8 <interrupt_WallCut+0x750>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fd69 	bl	8000648 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7f8 fbad 	bl	80002dc <__adddf3>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7f9 f835 	bl	8000bf8 <__aeabi_d2f>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4a55      	ldr	r2, [pc, #340]	; (8007ce8 <interrupt_WallCut+0x780>)
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e109      	b.n	8007daa <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8007b96:	4b51      	ldr	r3, [pc, #324]	; (8007cdc <interrupt_WallCut+0x774>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 80ae 	bne.w	8007cfc <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	607b      	str	r3, [r7, #4]
 8007ba4:	e01f      	b.n	8007be6 <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8007ba6:	4a52      	ldr	r2, [pc, #328]	; (8007cf0 <interrupt_WallCut+0x788>)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3314      	adds	r3, #20
 8007bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bb8:	4b46      	ldr	r3, [pc, #280]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007bba:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8007bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc6:	dd0b      	ble.n	8007be0 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8007bc8:	4a49      	ldr	r2, [pc, #292]	; (8007cf0 <interrupt_WallCut+0x788>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3314      	adds	r3, #20
 8007bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8007bda:	4b3e      	ldr	r3, [pc, #248]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007bdc:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3301      	adds	r3, #1
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b13      	cmp	r3, #19
 8007bea:	dddc      	ble.n	8007ba6 <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 8007bec:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <interrupt_WallCut+0x770>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8007bf2:	4b3a      	ldr	r3, [pc, #232]	; (8007cdc <interrupt_WallCut+0x774>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f000 fc47 	bl	800848c <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8007bfe:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c00:	edd3 7a00 	vldr	s15, [r3]
 8007c04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007cf4 <interrupt_WallCut+0x78c>
 8007c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c14:	db26      	blt.n	8007c64 <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007c16:	4b2f      	ldr	r3, [pc, #188]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c18:	edd3 7a00 	vldr	s15, [r3]
 8007c1c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007cf4 <interrupt_WallCut+0x78c>
 8007c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007cf8 <interrupt_WallCut+0x790>
 8007c28:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007c2c:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c2e:	ed93 7a00 	vldr	s14, [r3]
 8007c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8007c36:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <interrupt_WallCut+0x780>)
 8007c38:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c3e:	edd3 7a00 	vldr	s15, [r3]
 8007c42:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007cf4 <interrupt_WallCut+0x78c>
 8007c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c4a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007cf8 <interrupt_WallCut+0x790>
 8007c4e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007c52:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c54:	ed93 7a00 	vldr	s14, [r3]
 8007c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8007c5c:	4b20      	ldr	r3, [pc, #128]	; (8007ce0 <interrupt_WallCut+0x778>)
 8007c5e:	edc3 7a00 	vstr	s15, [r3]
 8007c62:	e09f      	b.n	8007da4 <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007c64:	4b1b      	ldr	r3, [pc, #108]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c66:	edd3 7a00 	vldr	s15, [r3]
 8007c6a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007cf4 <interrupt_WallCut+0x78c>
 8007c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c72:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007cf8 <interrupt_WallCut+0x790>
 8007c76:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007c7a:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c7c:	ed93 7a00 	vldr	s14, [r3]
 8007c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <interrupt_WallCut+0x780>)
 8007c86:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007c8c:	edd3 7a00 	vldr	s15, [r3]
 8007c90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007cf4 <interrupt_WallCut+0x78c>
 8007c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c98:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007cf8 <interrupt_WallCut+0x790>
 8007c9c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <interrupt_WallCut+0x76c>)
 8007ca2:	ed93 7a00 	vldr	s14, [r3]
 8007ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <interrupt_WallCut+0x778>)
 8007cac:	edc3 7a00 	vstr	s15, [r3]
 8007cb0:	e078      	b.n	8007da4 <interrupt_WallCut+0x83c>
 8007cb2:	bf00      	nop
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007cbc:	3f50624d 	.word	0x3f50624d
 8007cc0:	200005c8 	.word	0x200005c8
 8007cc4:	200005e0 	.word	0x200005e0
 8007cc8:	20000258 	.word	0x20000258
 8007ccc:	2000025c 	.word	0x2000025c
 8007cd0:	20000460 	.word	0x20000460
 8007cd4:	2000060c 	.word	0x2000060c
 8007cd8:	200005d4 	.word	0x200005d4
 8007cdc:	200005fa 	.word	0x200005fa
 8007ce0:	200005f4 	.word	0x200005f4
 8007ce4:	200005fc 	.word	0x200005fc
 8007ce8:	200005ec 	.word	0x200005ec
 8007cec:	200004dc 	.word	0x200004dc
 8007cf0:	200002bc 	.word	0x200002bc
 8007cf4:	455ac000 	.word	0x455ac000
 8007cf8:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8007cfc:	4bac      	ldr	r3, [pc, #688]	; (8007fb0 <interrupt_WallCut+0xa48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	4aab      	ldr	r2, [pc, #684]	; (8007fb0 <interrupt_WallCut+0xa48>)
 8007d04:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007d06:	4bab      	ldr	r3, [pc, #684]	; (8007fb4 <interrupt_WallCut+0xa4c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7f8 fc44 	bl	8000598 <__aeabi_f2d>
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	4ba8      	ldr	r3, [pc, #672]	; (8007fb8 <interrupt_WallCut+0xa50>)
 8007d16:	ed93 7a00 	vldr	s14, [r3]
 8007d1a:	4ba8      	ldr	r3, [pc, #672]	; (8007fbc <interrupt_WallCut+0xa54>)
 8007d1c:	edd3 7a00 	vldr	s15, [r3]
 8007d20:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007d24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007d2c:	ee16 0a90 	vmov	r0, s13
 8007d30:	f7f8 fc32 	bl	8000598 <__aeabi_f2d>
 8007d34:	a39c      	add	r3, pc, #624	; (adr r3, 8007fa8 <interrupt_WallCut+0xa40>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fc85 	bl	8000648 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fac9 	bl	80002dc <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	f7f8 ff51 	bl	8000bf8 <__aeabi_d2f>
 8007d56:	4603      	mov	r3, r0
 8007d58:	4a96      	ldr	r2, [pc, #600]	; (8007fb4 <interrupt_WallCut+0xa4c>)
 8007d5a:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8007d5c:	4b98      	ldr	r3, [pc, #608]	; (8007fc0 <interrupt_WallCut+0xa58>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d11f      	bne.n	8007da4 <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8007d64:	4b97      	ldr	r3, [pc, #604]	; (8007fc4 <interrupt_WallCut+0xa5c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7f8 fc15 	bl	8000598 <__aeabi_f2d>
 8007d6e:	4604      	mov	r4, r0
 8007d70:	460d      	mov	r5, r1
 8007d72:	4b95      	ldr	r3, [pc, #596]	; (8007fc8 <interrupt_WallCut+0xa60>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f8 fc0e 	bl	8000598 <__aeabi_f2d>
 8007d7c:	a38a      	add	r3, pc, #552	; (adr r3, 8007fa8 <interrupt_WallCut+0xa40>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fc61 	bl	8000648 <__aeabi_dmul>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 faa5 	bl	80002dc <__adddf3>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7f8 ff2d 	bl	8000bf8 <__aeabi_d2f>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4a88      	ldr	r2, [pc, #544]	; (8007fc4 <interrupt_WallCut+0xa5c>)
 8007da2:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8007da4:	4b86      	ldr	r3, [pc, #536]	; (8007fc0 <interrupt_WallCut+0xa58>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8007daa:	4b88      	ldr	r3, [pc, #544]	; (8007fcc <interrupt_WallCut+0xa64>)
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8007db2:	db6a      	blt.n	8007e8a <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8007db4:	4b86      	ldr	r3, [pc, #536]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8007dbc:	4b85      	ldr	r3, [pc, #532]	; (8007fd4 <interrupt_WallCut+0xa6c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	4a84      	ldr	r2, [pc, #528]	; (8007fd4 <interrupt_WallCut+0xa6c>)
 8007dc4:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f000 fb4e 	bl	8008468 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8007dcc:	4b82      	ldr	r3, [pc, #520]	; (8007fd8 <interrupt_WallCut+0xa70>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007dd2:	4b82      	ldr	r3, [pc, #520]	; (8007fdc <interrupt_WallCut+0xa74>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7f8 fbde 	bl	8000598 <__aeabi_f2d>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	460d      	mov	r5, r1
 8007de0:	4b75      	ldr	r3, [pc, #468]	; (8007fb8 <interrupt_WallCut+0xa50>)
 8007de2:	ed93 7a00 	vldr	s14, [r3]
 8007de6:	4b75      	ldr	r3, [pc, #468]	; (8007fbc <interrupt_WallCut+0xa54>)
 8007de8:	edd3 7a00 	vldr	s15, [r3]
 8007dec:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007df0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007df4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007df8:	ee16 0a90 	vmov	r0, s13
 8007dfc:	f7f8 fbcc 	bl	8000598 <__aeabi_f2d>
 8007e00:	a369      	add	r3, pc, #420	; (adr r3, 8007fa8 <interrupt_WallCut+0xa40>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fc1f 	bl	8000648 <__aeabi_dmul>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fa63 	bl	80002dc <__adddf3>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f7f8 feeb 	bl	8000bf8 <__aeabi_d2f>
 8007e22:	4603      	mov	r3, r0
 8007e24:	4a6d      	ldr	r2, [pc, #436]	; (8007fdc <interrupt_WallCut+0xa74>)
 8007e26:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8007e28:	4b6d      	ldr	r3, [pc, #436]	; (8007fe0 <interrupt_WallCut+0xa78>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f040 81a4 	bne.w	800817a <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007e32:	4b6c      	ldr	r3, [pc, #432]	; (8007fe4 <interrupt_WallCut+0xa7c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fbae 	bl	8000598 <__aeabi_f2d>
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	4b5d      	ldr	r3, [pc, #372]	; (8007fb8 <interrupt_WallCut+0xa50>)
 8007e42:	ed93 7a00 	vldr	s14, [r3]
 8007e46:	4b5d      	ldr	r3, [pc, #372]	; (8007fbc <interrupt_WallCut+0xa54>)
 8007e48:	edd3 7a00 	vldr	s15, [r3]
 8007e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007e50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007e54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007e58:	ee16 0a90 	vmov	r0, s13
 8007e5c:	f7f8 fb9c 	bl	8000598 <__aeabi_f2d>
 8007e60:	a351      	add	r3, pc, #324	; (adr r3, 8007fa8 <interrupt_WallCut+0xa40>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f7f8 fbef 	bl	8000648 <__aeabi_dmul>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 fa33 	bl	80002dc <__adddf3>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f7f8 febb 	bl	8000bf8 <__aeabi_d2f>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4a57      	ldr	r2, [pc, #348]	; (8007fe4 <interrupt_WallCut+0xa7c>)
 8007e86:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8007e88:	e177      	b.n	800817a <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 8007e8a:	4b53      	ldr	r3, [pc, #332]	; (8007fd8 <interrupt_WallCut+0xa70>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f040 80b0 	bne.w	8007ff4 <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 8007e94:	2300      	movs	r3, #0
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	e01f      	b.n	8007eda <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8007e9a:	4a53      	ldr	r2, [pc, #332]	; (8007fe8 <interrupt_WallCut+0xa80>)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	333c      	adds	r3, #60	; 0x3c
 8007ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eac:	4b48      	ldr	r3, [pc, #288]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007eae:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8007eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	dd0b      	ble.n	8007ed4 <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8007ebc:	4a4a      	ldr	r2, [pc, #296]	; (8007fe8 <interrupt_WallCut+0xa80>)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	333c      	adds	r3, #60	; 0x3c
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8007ece:	4b40      	ldr	r3, [pc, #256]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007ed0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b13      	cmp	r3, #19
 8007ede:	dddc      	ble.n	8007e9a <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <interrupt_WallCut+0xa6c>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8007ee6:	4b3c      	ldr	r3, [pc, #240]	; (8007fd8 <interrupt_WallCut+0xa70>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8007eec:	2001      	movs	r0, #1
 8007eee:	f000 fabb 	bl	8008468 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8007ef2:	4b37      	ldr	r3, [pc, #220]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007ef4:	edd3 7a00 	vldr	s15, [r3]
 8007ef8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007fec <interrupt_WallCut+0xa84>
 8007efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f08:	db26      	blt.n	8007f58 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007f0a:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f0c:	edd3 7a00 	vldr	s15, [r3]
 8007f10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007fec <interrupt_WallCut+0xa84>
 8007f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f18:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007ff0 <interrupt_WallCut+0xa88>
 8007f1c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007f20:	4b2b      	ldr	r3, [pc, #172]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f22:	ed93 7a00 	vldr	s14, [r3]
 8007f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8007f2a:	4b2e      	ldr	r3, [pc, #184]	; (8007fe4 <interrupt_WallCut+0xa7c>)
 8007f2c:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f32:	edd3 7a00 	vldr	s15, [r3]
 8007f36:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007fec <interrupt_WallCut+0xa84>
 8007f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f3e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007ff0 <interrupt_WallCut+0xa88>
 8007f42:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007f46:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f48:	ed93 7a00 	vldr	s14, [r3]
 8007f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8007f50:	4b22      	ldr	r3, [pc, #136]	; (8007fdc <interrupt_WallCut+0xa74>)
 8007f52:	edc3 7a00 	vstr	s15, [r3]
 8007f56:	e0ac      	b.n	80080b2 <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f5a:	edd3 7a00 	vldr	s15, [r3]
 8007f5e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007fec <interrupt_WallCut+0xa84>
 8007f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f66:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007ff0 <interrupt_WallCut+0xa88>
 8007f6a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f70:	ed93 7a00 	vldr	s14, [r3]
 8007f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8007f78:	4b1a      	ldr	r3, [pc, #104]	; (8007fe4 <interrupt_WallCut+0xa7c>)
 8007f7a:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007f7e:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f80:	edd3 7a00 	vldr	s15, [r3]
 8007f84:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007fec <interrupt_WallCut+0xa84>
 8007f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f8c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007ff0 <interrupt_WallCut+0xa88>
 8007f90:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <interrupt_WallCut+0xa68>)
 8007f96:	ed93 7a00 	vldr	s14, [r3]
 8007f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <interrupt_WallCut+0xa74>)
 8007fa0:	edc3 7a00 	vstr	s15, [r3]
 8007fa4:	e085      	b.n	80080b2 <interrupt_WallCut+0xb4a>
 8007fa6:	bf00      	nop
 8007fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fac:	3f50624d 	.word	0x3f50624d
 8007fb0:	200005d4 	.word	0x200005d4
 8007fb4:	200005f4 	.word	0x200005f4
 8007fb8:	20000258 	.word	0x20000258
 8007fbc:	2000025c 	.word	0x2000025c
 8007fc0:	200005fc 	.word	0x200005fc
 8007fc4:	200005ec 	.word	0x200005ec
 8007fc8:	200004dc 	.word	0x200004dc
 8007fcc:	20000460 	.word	0x20000460
 8007fd0:	20000610 	.word	0x20000610
 8007fd4:	200005d0 	.word	0x200005d0
 8007fd8:	200005fb 	.word	0x200005fb
 8007fdc:	200005f0 	.word	0x200005f0
 8007fe0:	200005fd 	.word	0x200005fd
 8007fe4:	200005e8 	.word	0x200005e8
 8007fe8:	200002bc 	.word	0x200002bc
 8007fec:	455ac000 	.word	0x455ac000
 8007ff0:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8007ff4:	4b66      	ldr	r3, [pc, #408]	; (8008190 <interrupt_WallCut+0xc28>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a65      	ldr	r2, [pc, #404]	; (8008190 <interrupt_WallCut+0xc28>)
 8007ffc:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007ffe:	4b65      	ldr	r3, [pc, #404]	; (8008194 <interrupt_WallCut+0xc2c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 fac8 	bl	8000598 <__aeabi_f2d>
 8008008:	4604      	mov	r4, r0
 800800a:	460d      	mov	r5, r1
 800800c:	4b62      	ldr	r3, [pc, #392]	; (8008198 <interrupt_WallCut+0xc30>)
 800800e:	ed93 7a00 	vldr	s14, [r3]
 8008012:	4b62      	ldr	r3, [pc, #392]	; (800819c <interrupt_WallCut+0xc34>)
 8008014:	edd3 7a00 	vldr	s15, [r3]
 8008018:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800801c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008020:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008024:	ee16 0a90 	vmov	r0, s13
 8008028:	f7f8 fab6 	bl	8000598 <__aeabi_f2d>
 800802c:	a356      	add	r3, pc, #344	; (adr r3, 8008188 <interrupt_WallCut+0xc20>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 fb09 	bl	8000648 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 f94d 	bl	80002dc <__adddf3>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4610      	mov	r0, r2
 8008048:	4619      	mov	r1, r3
 800804a:	f7f8 fdd5 	bl	8000bf8 <__aeabi_d2f>
 800804e:	4603      	mov	r3, r0
 8008050:	4a50      	ldr	r2, [pc, #320]	; (8008194 <interrupt_WallCut+0xc2c>)
 8008052:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8008054:	4b52      	ldr	r3, [pc, #328]	; (80081a0 <interrupt_WallCut+0xc38>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d12a      	bne.n	80080b2 <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800805c:	4b51      	ldr	r3, [pc, #324]	; (80081a4 <interrupt_WallCut+0xc3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa99 	bl	8000598 <__aeabi_f2d>
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <interrupt_WallCut+0xc30>)
 800806c:	ed93 7a00 	vldr	s14, [r3]
 8008070:	4b4a      	ldr	r3, [pc, #296]	; (800819c <interrupt_WallCut+0xc34>)
 8008072:	edd3 7a00 	vldr	s15, [r3]
 8008076:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 800807a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800807e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008082:	ee16 0a90 	vmov	r0, s13
 8008086:	f7f8 fa87 	bl	8000598 <__aeabi_f2d>
 800808a:	a33f      	add	r3, pc, #252	; (adr r3, 8008188 <interrupt_WallCut+0xc20>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 fada 	bl	8000648 <__aeabi_dmul>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f91e 	bl	80002dc <__adddf3>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4610      	mov	r0, r2
 80080a6:	4619      	mov	r1, r3
 80080a8:	f7f8 fda6 	bl	8000bf8 <__aeabi_d2f>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <interrupt_WallCut+0xc3c>)
 80080b0:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 80080b2:	4b3b      	ldr	r3, [pc, #236]	; (80081a0 <interrupt_WallCut+0xc38>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	701a      	strb	r2, [r3, #0]
}
 80080b8:	e05f      	b.n	800817a <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 80080ba:	4b3b      	ldr	r3, [pc, #236]	; (80081a8 <interrupt_WallCut+0xc40>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 80080c0:	4b3a      	ldr	r3, [pc, #232]	; (80081ac <interrupt_WallCut+0xc44>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 80080c6:	4b3a      	ldr	r3, [pc, #232]	; (80081b0 <interrupt_WallCut+0xc48>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 80080cc:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <interrupt_WallCut+0xc4c>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 80080d2:	4b39      	ldr	r3, [pc, #228]	; (80081b8 <interrupt_WallCut+0xc50>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 80080d8:	4b2d      	ldr	r3, [pc, #180]	; (8008190 <interrupt_WallCut+0xc28>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 80080de:	4b37      	ldr	r3, [pc, #220]	; (80081bc <interrupt_WallCut+0xc54>)
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 80080e6:	4b36      	ldr	r3, [pc, #216]	; (80081c0 <interrupt_WallCut+0xc58>)
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80080ee:	4b35      	ldr	r3, [pc, #212]	; (80081c4 <interrupt_WallCut+0xc5c>)
 80080f0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80080f4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80080f6:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <interrupt_WallCut+0xc60>)
 80080f8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80080fc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 80080fe:	4b33      	ldr	r3, [pc, #204]	; (80081cc <interrupt_WallCut+0xc64>)
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <interrupt_WallCut+0xc3c>)
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 800810e:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <interrupt_WallCut+0xc68>)
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8008116:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <interrupt_WallCut+0xc2c>)
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 800811e:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <interrupt_WallCut+0xc6c>)
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8008124:	4b2c      	ldr	r3, [pc, #176]	; (80081d8 <interrupt_WallCut+0xc70>)
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 800812a:	4b2c      	ldr	r3, [pc, #176]	; (80081dc <interrupt_WallCut+0xc74>)
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8008130:	4b2b      	ldr	r3, [pc, #172]	; (80081e0 <interrupt_WallCut+0xc78>)
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8008136:	4b2b      	ldr	r3, [pc, #172]	; (80081e4 <interrupt_WallCut+0xc7c>)
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <interrupt_WallCut+0xc38>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <interrupt_WallCut+0xc80>)
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8008148:	4b28      	ldr	r3, [pc, #160]	; (80081ec <interrupt_WallCut+0xc84>)
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 800814e:	4b28      	ldr	r3, [pc, #160]	; (80081f0 <interrupt_WallCut+0xc88>)
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8008154:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <interrupt_WallCut+0xc88>)
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 800815a:	4b26      	ldr	r3, [pc, #152]	; (80081f4 <interrupt_WallCut+0xc8c>)
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8008162:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <interrupt_WallCut+0xc90>)
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 800816a:	4b24      	ldr	r3, [pc, #144]	; (80081fc <interrupt_WallCut+0xc94>)
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8008172:	4b23      	ldr	r3, [pc, #140]	; (8008200 <interrupt_WallCut+0xc98>)
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
}
 800817a:	bf00      	nop
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bdb0      	pop	{r4, r5, r7, pc}
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	d2f1a9fc 	.word	0xd2f1a9fc
 800818c:	3f50624d 	.word	0x3f50624d
 8008190:	200005d0 	.word	0x200005d0
 8008194:	200005f0 	.word	0x200005f0
 8008198:	20000258 	.word	0x20000258
 800819c:	2000025c 	.word	0x2000025c
 80081a0:	200005fd 	.word	0x200005fd
 80081a4:	200005e8 	.word	0x200005e8
 80081a8:	200005c4 	.word	0x200005c4
 80081ac:	200005c0 	.word	0x200005c0
 80081b0:	200005cc 	.word	0x200005cc
 80081b4:	200005c8 	.word	0x200005c8
 80081b8:	200005d4 	.word	0x200005d4
 80081bc:	200005dc 	.word	0x200005dc
 80081c0:	200005d8 	.word	0x200005d8
 80081c4:	200005e4 	.word	0x200005e4
 80081c8:	200005e0 	.word	0x200005e0
 80081cc:	200005ec 	.word	0x200005ec
 80081d0:	200005f4 	.word	0x200005f4
 80081d4:	200005f8 	.word	0x200005f8
 80081d8:	200005f9 	.word	0x200005f9
 80081dc:	200005fa 	.word	0x200005fa
 80081e0:	200005fb 	.word	0x200005fb
 80081e4:	200005fc 	.word	0x200005fc
 80081e8:	200005fe 	.word	0x200005fe
 80081ec:	200005ff 	.word	0x200005ff
 80081f0:	20000600 	.word	0x20000600
 80081f4:	20000604 	.word	0x20000604
 80081f8:	20000608 	.word	0x20000608
 80081fc:	2000060c 	.word	0x2000060c
 8008200:	20000610 	.word	0x20000610

08008204 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800821a:	f015 fdc7 	bl	801ddac <HAL_GPIO_WritePin>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	2140      	movs	r1, #64	; 0x40
 8008238:	4803      	ldr	r0, [pc, #12]	; (8008248 <pl_yellow_LED_3+0x20>)
 800823a:	f015 fdb7 	bl	801ddac <HAL_GPIO_WritePin>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	48000800 	.word	0x48000800

0800824c <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800825e:	4803      	ldr	r0, [pc, #12]	; (800826c <pl_yellow_LED_6+0x20>)
 8008260:	f015 fda4 	bl	801ddac <HAL_GPIO_WritePin>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	48000400 	.word	0x48000400

08008270 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008282:	4803      	ldr	r0, [pc, #12]	; (8008290 <pl_yellow_LED_8+0x20>)
 8008284:	f015 fd92 	bl	801ddac <HAL_GPIO_WritePin>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	48000400 	.word	0x48000400

08008294 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800829e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082a2:	f015 fd83 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80082a6:	2200      	movs	r2, #0
 80082a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082b0:	f015 fd7c 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80082b4:	2200      	movs	r2, #0
 80082b6:	2140      	movs	r1, #64	; 0x40
 80082b8:	4811      	ldr	r0, [pc, #68]	; (8008300 <pl_yellow_LED_off+0x6c>)
 80082ba:	f015 fd77 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80082be:	2200      	movs	r2, #0
 80082c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80082c4:	480f      	ldr	r0, [pc, #60]	; (8008304 <pl_yellow_LED_off+0x70>)
 80082c6:	f015 fd71 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 80082ca:	2200      	movs	r2, #0
 80082cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80082d0:	480c      	ldr	r0, [pc, #48]	; (8008304 <pl_yellow_LED_off+0x70>)
 80082d2:	f015 fd6b 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 80082d6:	2200      	movs	r2, #0
 80082d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082dc:	4809      	ldr	r0, [pc, #36]	; (8008304 <pl_yellow_LED_off+0x70>)
 80082de:	f015 fd65 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80082e2:	2200      	movs	r2, #0
 80082e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082e8:	4806      	ldr	r0, [pc, #24]	; (8008304 <pl_yellow_LED_off+0x70>)
 80082ea:	f015 fd5f 	bl	801ddac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 80082ee:	2200      	movs	r2, #0
 80082f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082f4:	4803      	ldr	r0, [pc, #12]	; (8008304 <pl_yellow_LED_off+0x70>)
 80082f6:	f015 fd59 	bl	801ddac <HAL_GPIO_WritePin>
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	48000800 	.word	0x48000800
 8008304:	48000400 	.word	0x48000400

08008308 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008350:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d007      	beq.n	8008368 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8008358:	2201      	movs	r2, #1
 800835a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800835e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008362:	f015 fd23 	bl	801ddac <HAL_GPIO_WritePin>
 8008366:	e006      	b.n	8008376 <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8008368:	2200      	movs	r2, #0
 800836a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800836e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008372:	f015 fd1b 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 800837c:	2201      	movs	r2, #1
 800837e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008386:	f015 fd11 	bl	801ddac <HAL_GPIO_WritePin>
 800838a:	e006      	b.n	800839a <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800838c:	2200      	movs	r2, #0
 800838e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008396:	f015 fd09 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 800839a:	7b7b      	ldrb	r3, [r7, #13]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80083a0:	2201      	movs	r2, #1
 80083a2:	2140      	movs	r1, #64	; 0x40
 80083a4:	482e      	ldr	r0, [pc, #184]	; (8008460 <pl_yellow_LED_count+0x158>)
 80083a6:	f015 fd01 	bl	801ddac <HAL_GPIO_WritePin>
 80083aa:	e004      	b.n	80083b6 <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80083ac:	2200      	movs	r2, #0
 80083ae:	2140      	movs	r1, #64	; 0x40
 80083b0:	482b      	ldr	r0, [pc, #172]	; (8008460 <pl_yellow_LED_count+0x158>)
 80083b2:	f015 fcfb 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 80083b6:	7b3b      	ldrb	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d006      	beq.n	80083ca <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80083bc:	2201      	movs	r2, #1
 80083be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083c2:	4828      	ldr	r0, [pc, #160]	; (8008464 <pl_yellow_LED_count+0x15c>)
 80083c4:	f015 fcf2 	bl	801ddac <HAL_GPIO_WritePin>
 80083c8:	e005      	b.n	80083d6 <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80083ca:	2200      	movs	r2, #0
 80083cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083d0:	4824      	ldr	r0, [pc, #144]	; (8008464 <pl_yellow_LED_count+0x15c>)
 80083d2:	f015 fceb 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d006      	beq.n	80083ea <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80083dc:	2201      	movs	r2, #1
 80083de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80083e2:	4820      	ldr	r0, [pc, #128]	; (8008464 <pl_yellow_LED_count+0x15c>)
 80083e4:	f015 fce2 	bl	801ddac <HAL_GPIO_WritePin>
 80083e8:	e005      	b.n	80083f6 <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 80083ea:	2200      	movs	r2, #0
 80083ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80083f0:	481c      	ldr	r0, [pc, #112]	; (8008464 <pl_yellow_LED_count+0x15c>)
 80083f2:	f015 fcdb 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 80083f6:	7abb      	ldrb	r3, [r7, #10]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 80083fc:	2201      	movs	r2, #1
 80083fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008402:	4818      	ldr	r0, [pc, #96]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008404:	f015 fcd2 	bl	801ddac <HAL_GPIO_WritePin>
 8008408:	e005      	b.n	8008416 <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800840a:	2200      	movs	r2, #0
 800840c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008410:	4814      	ldr	r0, [pc, #80]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008412:	f015 fccb 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8008416:	7a7b      	ldrb	r3, [r7, #9]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d006      	beq.n	800842a <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 800841c:	2201      	movs	r2, #1
 800841e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008422:	4810      	ldr	r0, [pc, #64]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008424:	f015 fcc2 	bl	801ddac <HAL_GPIO_WritePin>
 8008428:	e005      	b.n	8008436 <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 800842a:	2200      	movs	r2, #0
 800842c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008430:	480c      	ldr	r0, [pc, #48]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008432:	f015 fcbb 	bl	801ddac <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8008436:	7a3b      	ldrb	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d006      	beq.n	800844a <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 800843c:	2201      	movs	r2, #1
 800843e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008442:	4808      	ldr	r0, [pc, #32]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008444:	f015 fcb2 	bl	801ddac <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8008448:	e005      	b.n	8008456 <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 800844a:	2200      	movs	r2, #0
 800844c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008450:	4804      	ldr	r0, [pc, #16]	; (8008464 <pl_yellow_LED_count+0x15c>)
 8008452:	f015 fcab 	bl	801ddac <HAL_GPIO_WritePin>
}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	48000800 	.word	0x48000800
 8008464:	48000400 	.word	0x48000400

08008468 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800847a:	4803      	ldr	r0, [pc, #12]	; (8008488 <pl_r_blue_LED+0x20>)
 800847c:	f015 fc96 	bl	801ddac <HAL_GPIO_WritePin>
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	48000800 	.word	0x48000800

0800848c <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	2104      	movs	r1, #4
 800849c:	4803      	ldr	r0, [pc, #12]	; (80084ac <pl_l_blue_LED+0x20>)
 800849e:	f015 fc85 	bl	801ddac <HAL_GPIO_WritePin>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	48000400 	.word	0x48000400

080084b0 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	460a      	mov	r2, r1
 80084ba:	80fb      	strh	r3, [r7, #6]
 80084bc:	4613      	mov	r3, r2
 80084be:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80084c0:	2200      	movs	r2, #0
 80084c2:	2110      	movs	r1, #16
 80084c4:	4833      	ldr	r0, [pc, #204]	; (8008594 <encoder_read_byte_R+0xe4>)
 80084c6:	f015 fc71 	bl	801ddac <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084d0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	e00d      	b.n	80084f8 <encoder_read_byte_R+0x48>
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	fa42 f303 	asr.w	r3, r2, r3
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	8bfb      	ldrh	r3, [r7, #30]
 80084ee:	4413      	add	r3, r2
 80084f0:	83fb      	strh	r3, [r7, #30]
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	3301      	adds	r3, #1
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b0e      	cmp	r3, #14
 80084fc:	ddee      	ble.n	80084dc <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 80084fe:	8bfb      	ldrh	r3, [r7, #30]
 8008500:	03db      	lsls	r3, r3, #15
 8008502:	b21a      	sxth	r2, r3
 8008504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008508:	4313      	orrs	r3, r2
 800850a:	b21b      	sxth	r3, r3
 800850c:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	b29b      	uxth	r3, r3
 8008514:	b2db      	uxtb	r3, r3
 8008516:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 800851e:	f107 0110 	add.w	r1, r7, #16
 8008522:	2332      	movs	r3, #50	; 0x32
 8008524:	2202      	movs	r2, #2
 8008526:	481c      	ldr	r0, [pc, #112]	; (8008598 <encoder_read_byte_R+0xe8>)
 8008528:	f016 fd23 	bl	801ef72 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800852c:	2201      	movs	r2, #1
 800852e:	2110      	movs	r1, #16
 8008530:	4818      	ldr	r0, [pc, #96]	; (8008594 <encoder_read_byte_R+0xe4>)
 8008532:	f015 fc3b 	bl	801ddac <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	e002      	b.n	8008542 <encoder_read_byte_R+0x92>
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	3301      	adds	r3, #1
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b31      	cmp	r3, #49	; 0x31
 8008546:	ddf9      	ble.n	800853c <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8008548:	2200      	movs	r2, #0
 800854a:	2110      	movs	r1, #16
 800854c:	4811      	ldr	r0, [pc, #68]	; (8008594 <encoder_read_byte_R+0xe4>)
 800854e:	f015 fc2d 	bl	801ddac <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8008552:	88bb      	ldrh	r3, [r7, #4]
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	b29b      	uxth	r3, r3
 8008558:	b2db      	uxtb	r3, r3
 800855a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800855c:	88bb      	ldrh	r3, [r7, #4]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8008562:	f107 010c 	add.w	r1, r7, #12
 8008566:	2332      	movs	r3, #50	; 0x32
 8008568:	2202      	movs	r2, #2
 800856a:	480b      	ldr	r0, [pc, #44]	; (8008598 <encoder_read_byte_R+0xe8>)
 800856c:	f016 fe6f 	bl	801f24e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8008570:	7b3b      	ldrb	r3, [r7, #12]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	b21a      	sxth	r2, r3
 8008576:	7b7b      	ldrb	r3, [r7, #13]
 8008578:	b21b      	sxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b21b      	sxth	r3, r3
 800857e:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8008580:	2201      	movs	r2, #1
 8008582:	2110      	movs	r1, #16
 8008584:	4803      	ldr	r0, [pc, #12]	; (8008594 <encoder_read_byte_R+0xe4>)
 8008586:	f015 fc11 	bl	801ddac <HAL_GPIO_WritePin>

	return data;
 800858a:	88bb      	ldrh	r3, [r7, #4]

}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	48000400 	.word	0x48000400
 8008598:	2000f2f8 	.word	0x2000f2f8

0800859c <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	460a      	mov	r2, r1
 80085a6:	80fb      	strh	r3, [r7, #6]
 80085a8:	4613      	mov	r3, r2
 80085aa:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80085ac:	2200      	movs	r2, #0
 80085ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085b6:	f015 fbf9 	bl	801ddac <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085c0:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	e00d      	b.n	80085e8 <encoder_read_byte_L+0x4c>
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	fa42 f303 	asr.w	r3, r2, r3
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	8bfb      	ldrh	r3, [r7, #30]
 80085de:	4413      	add	r3, r2
 80085e0:	83fb      	strh	r3, [r7, #30]
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	3301      	adds	r3, #1
 80085e6:	61bb      	str	r3, [r7, #24]
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b0e      	cmp	r3, #14
 80085ec:	ddee      	ble.n	80085cc <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80085ee:	8bfb      	ldrh	r3, [r7, #30]
 80085f0:	03db      	lsls	r3, r3, #15
 80085f2:	b21a      	sxth	r2, r3
 80085f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	b29b      	uxth	r3, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 800860e:	f107 0110 	add.w	r1, r7, #16
 8008612:	2332      	movs	r3, #50	; 0x32
 8008614:	2202      	movs	r2, #2
 8008616:	481e      	ldr	r0, [pc, #120]	; (8008690 <encoder_read_byte_L+0xf4>)
 8008618:	f016 fcab 	bl	801ef72 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800861c:	2201      	movs	r2, #1
 800861e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008626:	f015 fbc1 	bl	801ddac <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e002      	b.n	8008636 <encoder_read_byte_L+0x9a>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3301      	adds	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b31      	cmp	r3, #49	; 0x31
 800863a:	ddf9      	ble.n	8008630 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800863c:	2200      	movs	r2, #0
 800863e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008646:	f015 fbb1 	bl	801ddac <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 800864a:	88bb      	ldrh	r3, [r7, #4]
 800864c:	0a1b      	lsrs	r3, r3, #8
 800864e:	b29b      	uxth	r3, r3
 8008650:	b2db      	uxtb	r3, r3
 8008652:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8008654:	88bb      	ldrh	r3, [r7, #4]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 800865a:	f107 010c 	add.w	r1, r7, #12
 800865e:	2332      	movs	r3, #50	; 0x32
 8008660:	2202      	movs	r2, #2
 8008662:	480b      	ldr	r0, [pc, #44]	; (8008690 <encoder_read_byte_L+0xf4>)
 8008664:	f016 fdf3 	bl	801f24e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8008668:	7b3b      	ldrb	r3, [r7, #12]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b21a      	sxth	r2, r3
 800866e:	7b7b      	ldrb	r3, [r7, #13]
 8008670:	b21b      	sxth	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b21b      	sxth	r3, r3
 8008676:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8008678:	2201      	movs	r2, #1
 800867a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800867e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008682:	f015 fb93 	bl	801ddac <HAL_GPIO_WritePin>

	return data;
 8008686:	88bb      	ldrh	r3, [r7, #4]

}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	2000f2f8 	.word	0x2000f2f8

08008694 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8008698:	2100      	movs	r1, #0
 800869a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800869e:	f7ff ff07 	bl	80084b0 <encoder_read_byte_R>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80086a8:	ee07 3a90 	vmov	s15, r3
 80086ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80086f8 <AS5047_DataUpdate+0x64>
 80086b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80086b8:	eddf 6a10 	vldr	s13, [pc, #64]	; 80086fc <AS5047_DataUpdate+0x68>
 80086bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <AS5047_DataUpdate+0x6c>)
 80086c2:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80086c6:	2100      	movs	r1, #0
 80086c8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80086cc:	f7ff ff66 	bl	800859c <encoder_read_byte_L>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80086f8 <AS5047_DataUpdate+0x64>
 80086e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80086e6:	eddf 6a05 	vldr	s13, [pc, #20]	; 80086fc <AS5047_DataUpdate+0x68>
 80086ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <AS5047_DataUpdate+0x70>)
 80086f0:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80086f4:	bf00      	nop
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	43b40000 	.word	0x43b40000
 80086fc:	46800000 	.word	0x46800000
 8008700:	200006e4 	.word	0x200006e4
 8008704:	200006e8 	.word	0x200006e8

08008708 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
		  record_out();
 800870c:	f000 f914 	bl	8008938 <record_out>
		  maze_display();
 8008710:	f00e f8ce 	bl	80168b0 <maze_display>
		  flash_record_init();
 8008714:	f000 f9b6 	bl	8008a84 <flash_record_init>
		  record_in();
 8008718:	f000 f858 	bl	80087cc <record_in>
}
 800871c:	bf00      	nop
 800871e:	bd80      	pop	{r7, pc}

08008720 <eraseFlash>:


void eraseFlash( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 800872a:	2301      	movs	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 800872e:	23fe      	movs	r3, #254	; 0xfe
 8008730:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8008732:	2301      	movs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800873a:	1d3a      	adds	r2, r7, #4
 800873c:	f107 0308 	add.w	r3, r7, #8
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f015 f88a 	bl	801d85c <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8008748:	bf00      	nop
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 800875e:	f014 ff91 	bl	801d684 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <writeFlash+0x1c>
 8008768:	f7ff ffda 	bl	8008720 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e00f      	b.n	8008792 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	17da      	asrs	r2, r3, #31
 8008776:	461c      	mov	r4, r3
 8008778:	4615      	mov	r5, r2
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	2000      	movs	r0, #0
 8008782:	f014 ff29 	bl	801d5d8 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	3320      	adds	r3, #32
 800878a:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	3308      	adds	r3, #8
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4413      	add	r3, r2
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	429a      	cmp	r2, r3
 800879c:	d3e9      	bcc.n	8008772 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 800879e:	f014 ff93 	bl	801d6c8 <HAL_FLASH_Lock>

}
 80087a2:	bf00      	nop
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bdb0      	pop	{r4, r5, r7, pc}

080087aa <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4619      	mov	r1, r3
 80087bc:	68b8      	ldr	r0, [r7, #8]
 80087be:	f019 fc0b 	bl	8021fd8 <memcpy>

}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <record_in>:


void record_in(void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
	int t = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80087d6:	4b55      	ldr	r3, [pc, #340]	; (800892c <record_in+0x160>)
 80087d8:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80087da:	e016      	b.n	800880a <record_in+0x3e>
		record.row[t] = wall.row[t];
 80087dc:	4a54      	ldr	r2, [pc, #336]	; (8008930 <record_in+0x164>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087e4:	4953      	ldr	r1, [pc, #332]	; (8008934 <record_in+0x168>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[t] = wall.column[t];
 80087ec:	4a50      	ldr	r2, [pc, #320]	; (8008930 <record_in+0x164>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	330e      	adds	r3, #14
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	494e      	ldr	r1, [pc, #312]	; (8008934 <record_in+0x168>)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	330e      	adds	r3, #14
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	605a      	str	r2, [r3, #4]
		t++;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b0e      	cmp	r3, #14
 800880e:	dde5      	ble.n	80087dc <record_in+0x10>
	}
	t = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008814:	e018      	b.n	8008848 <record_in+0x7c>
		record.row_look[t] = wall.row_look[t];
 8008816:	4a46      	ldr	r2, [pc, #280]	; (8008930 <record_in+0x164>)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	331e      	adds	r3, #30
 800881c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008820:	4944      	ldr	r1, [pc, #272]	; (8008934 <record_in+0x168>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	331e      	adds	r3, #30
 8008826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[t] = wall.column_look[t];
 800882a:	4a41      	ldr	r2, [pc, #260]	; (8008930 <record_in+0x164>)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	332c      	adds	r3, #44	; 0x2c
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	493f      	ldr	r1, [pc, #252]	; (8008934 <record_in+0x168>)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	332c      	adds	r3, #44	; 0x2c
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	605a      	str	r2, [r3, #4]
		t++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3301      	adds	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b0e      	cmp	r3, #14
 800884c:	dde3      	ble.n	8008816 <record_in+0x4a>
	}
	t = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8008852:	4b38      	ldr	r3, [pc, #224]	; (8008934 <record_in+0x168>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	2301      	movs	r3, #1
 800885a:	2201      	movs	r2, #1
 800885c:	6838      	ldr	r0, [r7, #0]
 800885e:	f7ff ff77 	bl	8008750 <writeFlash>
	address+=16;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	3310      	adds	r3, #16
 8008866:	603b      	str	r3, [r7, #0]
	t=1;
 8008868:	2301      	movs	r3, #1
 800886a:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800886c:	e00f      	b.n	800888e <record_in+0xc2>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 800886e:	4a31      	ldr	r2, [pc, #196]	; (8008934 <record_in+0x168>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008876:	4619      	mov	r1, r3
 8008878:	2300      	movs	r3, #0
 800887a:	2201      	movs	r2, #1
 800887c:	6838      	ldr	r0, [r7, #0]
 800887e:	f7ff ff67 	bl	8008750 <writeFlash>
	address+=16;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	3310      	adds	r3, #16
 8008886:	603b      	str	r3, [r7, #0]
	t++;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3301      	adds	r3, #1
 800888c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b0e      	cmp	r3, #14
 8008892:	ddec      	ble.n	800886e <record_in+0xa2>
	}

	t=0;
 8008894:	2300      	movs	r3, #0
 8008896:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008898:	e011      	b.n	80088be <record_in+0xf2>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 800889a:	4a26      	ldr	r2, [pc, #152]	; (8008934 <record_in+0x168>)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	330e      	adds	r3, #14
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	4619      	mov	r1, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	2201      	movs	r2, #1
 80088ac:	6838      	ldr	r0, [r7, #0]
 80088ae:	f7ff ff4f 	bl	8008750 <writeFlash>
	address+=16;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	3310      	adds	r3, #16
 80088b6:	603b      	str	r3, [r7, #0]
	t++;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3301      	adds	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b0e      	cmp	r3, #14
 80088c2:	ddea      	ble.n	800889a <record_in+0xce>
	}

	t=0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80088c8:	e010      	b.n	80088ec <record_in+0x120>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80088ca:	4a1a      	ldr	r2, [pc, #104]	; (8008934 <record_in+0x168>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	331e      	adds	r3, #30
 80088d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d4:	4619      	mov	r1, r3
 80088d6:	2300      	movs	r3, #0
 80088d8:	2201      	movs	r2, #1
 80088da:	6838      	ldr	r0, [r7, #0]
 80088dc:	f7ff ff38 	bl	8008750 <writeFlash>
	address+=16;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	3310      	adds	r3, #16
 80088e4:	603b      	str	r3, [r7, #0]
	t++;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3301      	adds	r3, #1
 80088ea:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b0e      	cmp	r3, #14
 80088f0:	ddeb      	ble.n	80088ca <record_in+0xfe>
	}

	t=0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80088f6:	e011      	b.n	800891c <record_in+0x150>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 80088f8:	4a0e      	ldr	r2, [pc, #56]	; (8008934 <record_in+0x168>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	332c      	adds	r3, #44	; 0x2c
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	4619      	mov	r1, r3
 8008906:	2300      	movs	r3, #0
 8008908:	2201      	movs	r2, #1
 800890a:	6838      	ldr	r0, [r7, #0]
 800890c:	f7ff ff20 	bl	8008750 <writeFlash>
	address+=16;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	3310      	adds	r3, #16
 8008914:	603b      	str	r3, [r7, #0]
	t++;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3301      	adds	r3, #1
 800891a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b0e      	cmp	r3, #14
 8008920:	ddea      	ble.n	80088f8 <record_in+0x12c>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	0807f000 	.word	0x0807f000
 8008930:	20001010 	.word	0x20001010
 8008934:	20001100 	.word	0x20001100

08008938 <record_out>:


void record_out(void) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800893e:	2300      	movs	r3, #0
 8008940:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8008942:	4b4d      	ldr	r3, [pc, #308]	; (8008a78 <record_out+0x140>)
 8008944:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8008946:	e00e      	b.n	8008966 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4a4b      	ldr	r2, [pc, #300]	; (8008a7c <record_out+0x144>)
 800894e:	4413      	add	r3, r2
 8008950:	2202      	movs	r2, #2
 8008952:	4619      	mov	r1, r3
 8008954:	6838      	ldr	r0, [r7, #0]
 8008956:	f7ff ff28 	bl	80087aa <loadFlash>
	address+=16;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	3310      	adds	r3, #16
 800895e:	603b      	str	r3, [r7, #0]
	t++;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3301      	adds	r3, #1
 8008964:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b0e      	cmp	r3, #14
 800896a:	dded      	ble.n	8008948 <record_out+0x10>
	}

	t=0;
 800896c:	2300      	movs	r3, #0
 800896e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008970:	e010      	b.n	8008994 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	330e      	adds	r3, #14
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4a40      	ldr	r2, [pc, #256]	; (8008a7c <record_out+0x144>)
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	2202      	movs	r2, #2
 8008980:	4619      	mov	r1, r3
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f7ff ff11 	bl	80087aa <loadFlash>
	address+=16;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	3310      	adds	r3, #16
 800898c:	603b      	str	r3, [r7, #0]
	t++;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3301      	adds	r3, #1
 8008992:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b0e      	cmp	r3, #14
 8008998:	ddeb      	ble.n	8008972 <record_out+0x3a>
	}

	t=0;
 800899a:	2300      	movs	r3, #0
 800899c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800899e:	e00f      	b.n	80089c0 <record_out+0x88>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	331e      	adds	r3, #30
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <record_out+0x144>)
 80089a8:	4413      	add	r3, r2
 80089aa:	2202      	movs	r2, #2
 80089ac:	4619      	mov	r1, r3
 80089ae:	6838      	ldr	r0, [r7, #0]
 80089b0:	f7ff fefb 	bl	80087aa <loadFlash>
		address+=16;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	3310      	adds	r3, #16
 80089b8:	603b      	str	r3, [r7, #0]
		t++;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3301      	adds	r3, #1
 80089be:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b0e      	cmp	r3, #14
 80089c4:	ddec      	ble.n	80089a0 <record_out+0x68>
	}

	t=0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80089ca:	e010      	b.n	80089ee <record_out+0xb6>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	332c      	adds	r3, #44	; 0x2c
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <record_out+0x144>)
 80089d4:	4413      	add	r3, r2
 80089d6:	3304      	adds	r3, #4
 80089d8:	2202      	movs	r2, #2
 80089da:	4619      	mov	r1, r3
 80089dc:	6838      	ldr	r0, [r7, #0]
 80089de:	f7ff fee4 	bl	80087aa <loadFlash>
		address+=16;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	3310      	adds	r3, #16
 80089e6:	603b      	str	r3, [r7, #0]
		t++;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3301      	adds	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b0e      	cmp	r3, #14
 80089f2:	ddeb      	ble.n	80089cc <record_out+0x94>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80089f8:	e016      	b.n	8008a28 <record_out+0xf0>
		wall.row[t] = record.row[t];
 80089fa:	4a20      	ldr	r2, [pc, #128]	; (8008a7c <record_out+0x144>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a02:	491f      	ldr	r1, [pc, #124]	; (8008a80 <record_out+0x148>)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <record_out+0x144>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	330e      	adds	r3, #14
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	491a      	ldr	r1, [pc, #104]	; (8008a80 <record_out+0x148>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	330e      	adds	r3, #14
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	605a      	str	r2, [r3, #4]
		t++;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3301      	adds	r3, #1
 8008a26:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b0e      	cmp	r3, #14
 8008a2c:	dde5      	ble.n	80089fa <record_out+0xc2>
	}
	t = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008a32:	e018      	b.n	8008a66 <record_out+0x12e>
		wall.row_look[t] = record.row_look[t];
 8008a34:	4a11      	ldr	r2, [pc, #68]	; (8008a7c <record_out+0x144>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	331e      	adds	r3, #30
 8008a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a3e:	4910      	ldr	r1, [pc, #64]	; (8008a80 <record_out+0x148>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	331e      	adds	r3, #30
 8008a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = record.column_look[t];
 8008a48:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <record_out+0x144>)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	332c      	adds	r3, #44	; 0x2c
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	490a      	ldr	r1, [pc, #40]	; (8008a80 <record_out+0x148>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	332c      	adds	r3, #44	; 0x2c
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	605a      	str	r2, [r3, #4]
		t++;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3301      	adds	r3, #1
 8008a64:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b0e      	cmp	r3, #14
 8008a6a:	dde3      	ble.n	8008a34 <record_out+0xfc>
	}

	t = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	607b      	str	r3, [r7, #4]

}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0807f000 	.word	0x0807f000
 8008a7c:	20001100 	.word	0x20001100
 8008a80:	20001010 	.word	0x20001010

08008a84 <flash_record_init>:

void flash_record_init(void){
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	int t = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008a8e:	e011      	b.n	8008ab4 <flash_record_init+0x30>
		wall.row[t] = 0b111100011;
 8008a90:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <flash_record_init+0x78>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008a98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[t] = t*2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4a16      	ldr	r2, [pc, #88]	; (8008afc <flash_record_init+0x78>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	330e      	adds	r3, #14
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	6059      	str	r1, [r3, #4]
		t++;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b0e      	cmp	r3, #14
 8008ab8:	ddea      	ble.n	8008a90 <flash_record_init+0xc>
	}
	t = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008abe:	e013      	b.n	8008ae8 <flash_record_init+0x64>
		wall.row_look[t] = t*4;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4a0d      	ldr	r2, [pc, #52]	; (8008afc <flash_record_init+0x78>)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	331e      	adds	r3, #30
 8008acc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[t] = t*8;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <flash_record_init+0x78>)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	332c      	adds	r3, #44	; 0x2c
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	6059      	str	r1, [r3, #4]
		t++;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b0e      	cmp	r3, #14
 8008aec:	dde8      	ble.n	8008ac0 <flash_record_init+0x3c>
	}

}
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20001010 	.word	0x20001010

08008b00 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2110      	movs	r1, #16
 8008b0e:	4810      	ldr	r0, [pc, #64]	; (8008b50 <gyro_read_byte+0x50>)
 8008b10:	f015 f94c 	bl	801ddac <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8008b1e:	f107 010f 	add.w	r1, r7, #15
 8008b22:	2364      	movs	r3, #100	; 0x64
 8008b24:	2201      	movs	r2, #1
 8008b26:	480b      	ldr	r0, [pc, #44]	; (8008b54 <gyro_read_byte+0x54>)
 8008b28:	f016 fa23 	bl	801ef72 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8008b2c:	f107 010e 	add.w	r1, r7, #14
 8008b30:	2364      	movs	r3, #100	; 0x64
 8008b32:	2201      	movs	r2, #1
 8008b34:	4807      	ldr	r0, [pc, #28]	; (8008b54 <gyro_read_byte+0x54>)
 8008b36:	f016 fb8a 	bl	801f24e <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	2110      	movs	r1, #16
 8008b3e:	4804      	ldr	r0, [pc, #16]	; (8008b50 <gyro_read_byte+0x50>)
 8008b40:	f015 f934 	bl	801ddac <HAL_GPIO_WritePin>

	return val;
 8008b44:	7bbb      	ldrb	r3, [r7, #14]

}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	48000800 	.word	0x48000800
 8008b54:	2000f294 	.word	0x2000f294

08008b58 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	460a      	mov	r2, r1
 8008b62:	71fb      	strb	r3, [r7, #7]
 8008b64:	4613      	mov	r3, r2
 8008b66:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8008b72:	2200      	movs	r2, #0
 8008b74:	2110      	movs	r1, #16
 8008b76:	480c      	ldr	r0, [pc, #48]	; (8008ba8 <gyro_write_byte+0x50>)
 8008b78:	f015 f918 	bl	801ddac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8008b7c:	f107 010f 	add.w	r1, r7, #15
 8008b80:	2364      	movs	r3, #100	; 0x64
 8008b82:	2201      	movs	r2, #1
 8008b84:	4809      	ldr	r0, [pc, #36]	; (8008bac <gyro_write_byte+0x54>)
 8008b86:	f016 f9f4 	bl	801ef72 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8008b8a:	1db9      	adds	r1, r7, #6
 8008b8c:	2364      	movs	r3, #100	; 0x64
 8008b8e:	2201      	movs	r2, #1
 8008b90:	4806      	ldr	r0, [pc, #24]	; (8008bac <gyro_write_byte+0x54>)
 8008b92:	f016 f9ee 	bl	801ef72 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8008b96:	2201      	movs	r2, #1
 8008b98:	2110      	movs	r1, #16
 8008b9a:	4803      	ldr	r0, [pc, #12]	; (8008ba8 <gyro_write_byte+0x50>)
 8008b9c:	f015 f906 	bl	801ddac <HAL_GPIO_WritePin>

}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	48000800 	.word	0x48000800
 8008bac:	2000f294 	.word	0x2000f294

08008bb0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8008bba:	2075      	movs	r0, #117	; 0x75
 8008bbc:	f7ff ffa0 	bl	8008b00 <gyro_read_byte>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	481b      	ldr	r0, [pc, #108]	; (8008c38 <pl_gyro_init+0x88>)
 8008bca:	f019 fe85 	bl	80228d8 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	2b98      	cmp	r3, #152	; 0x98
 8008bd2:	d00e      	beq.n	8008bf2 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8008bd4:	2064      	movs	r0, #100	; 0x64
 8008bd6:	f011 ff2d 	bl	801aa34 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8008bda:	2075      	movs	r0, #117	; 0x75
 8008bdc:	f7ff ff90 	bl	8008b00 <gyro_read_byte>
 8008be0:	4603      	mov	r3, r0
 8008be2:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b98      	cmp	r3, #152	; 0x98
 8008be8:	d003      	beq.n	8008bf2 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8008bea:	4814      	ldr	r0, [pc, #80]	; (8008c3c <pl_gyro_init+0x8c>)
 8008bec:	f019 fe74 	bl	80228d8 <iprintf>
 8008bf0:	e7fb      	b.n	8008bea <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	206b      	movs	r0, #107	; 0x6b
 8008bf6:	f7ff ffaf 	bl	8008b58 <gyro_write_byte>

	HAL_Delay(50);
 8008bfa:	2032      	movs	r0, #50	; 0x32
 8008bfc:	f011 ff1a 	bl	801aa34 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8008c00:	2100      	movs	r1, #0
 8008c02:	206c      	movs	r0, #108	; 0x6c
 8008c04:	f7ff ffa8 	bl	8008b58 <gyro_write_byte>

	HAL_Delay(50);
 8008c08:	2032      	movs	r0, #50	; 0x32
 8008c0a:	f011 ff13 	bl	801aa34 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8008c0e:	2118      	movs	r1, #24
 8008c10:	201b      	movs	r0, #27
 8008c12:	f7ff ffa1 	bl	8008b58 <gyro_write_byte>

	HAL_Delay(50);
 8008c16:	2032      	movs	r0, #50	; 0x32
 8008c18:	f011 ff0c 	bl	801aa34 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8008c1c:	2118      	movs	r1, #24
 8008c1e:	201c      	movs	r0, #28
 8008c20:	f7ff ff9a 	bl	8008b58 <gyro_write_byte>

	HAL_Delay(50);
 8008c24:	2032      	movs	r0, #50	; 0x32
 8008c26:	f011 ff05 	bl	801aa34 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <pl_gyro_init+0x90>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]

}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	080262b8 	.word	0x080262b8
 8008c3c:	080262cc 	.word	0x080262cc
 8008c40:	200006ec 	.word	0x200006ec

08008c44 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff ff55 	bl	8008b00 <gyro_read_byte>
 8008c56:	4603      	mov	r3, r0
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff ff4c 	bl	8008b00 <gyro_read_byte>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8008c6c:	4323      	orrs	r3, r4
 8008c6e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8008c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c7c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008c98 <ICM20602_GYRO_READ+0x54>
 8008c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c84:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	ee07 3a90 	vmov	s15, r3

}
 8008c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd90      	pop	{r4, r7, pc}
 8008c98:	41833333 	.word	0x41833333

08008c9c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff ff29 	bl	8008b00 <gyro_read_byte>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff ff20 	bl	8008b00 <gyro_read_byte>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8008cc4:	4323      	orrs	r3, r4
 8008cc6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8008cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ccc:	ee07 3a90 	vmov	s15, r3
 8008cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cd4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008cf0 <ICM20602_ACCEL_READ+0x54>
 8008cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cdc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	ee07 3a90 	vmov	s15, r3

}
 8008ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd90      	pop	{r4, r7, pc}
 8008cf0:	45000000 	.word	0x45000000

08008cf4 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <ICM20602_DataUpdate+0x40>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d117      	bne.n	8008d30 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8008d00:	2045      	movs	r0, #69	; 0x45
 8008d02:	f7ff ff9f 	bl	8008c44 <ICM20602_GYRO_READ>
 8008d06:	eef0 7a40 	vmov.f32	s15, s0
 8008d0a:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <ICM20602_DataUpdate+0x44>)
 8008d0c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8008d10:	2047      	movs	r0, #71	; 0x47
 8008d12:	f7ff ff97 	bl	8008c44 <ICM20602_GYRO_READ>
 8008d16:	eef0 7a40 	vmov.f32	s15, s0
 8008d1a:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <ICM20602_DataUpdate+0x44>)
 8008d1c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8008d20:	203b      	movs	r0, #59	; 0x3b
 8008d22:	f7ff ffbb 	bl	8008c9c <ICM20602_ACCEL_READ>
 8008d26:	eef0 7a40 	vmov.f32	s15, s0
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <ICM20602_DataUpdate+0x44>)
 8008d2c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8008d30:	bf00      	nop
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200006ec 	.word	0x200006ec
 8008d38:	200006f0 	.word	0x200006f0

08008d3c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8008d40:	480f      	ldr	r0, [pc, #60]	; (8008d80 <pl_motor_init+0x44>)
 8008d42:	f016 ffdb 	bl	801fcfc <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8008d46:	480e      	ldr	r0, [pc, #56]	; (8008d80 <pl_motor_init+0x44>)
 8008d48:	f010 fcee 	bl	8019728 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8008d4c:	480d      	ldr	r0, [pc, #52]	; (8008d84 <pl_motor_init+0x48>)
 8008d4e:	f016 ffd5 	bl	801fcfc <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8008d52:	480c      	ldr	r0, [pc, #48]	; (8008d84 <pl_motor_init+0x48>)
 8008d54:	f010 fce8 	bl	8019728 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8008d58:	2001      	movs	r0, #1
 8008d5a:	f000 f81f 	bl	8008d9c <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8008d5e:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <pl_motor_init+0x44>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	225a      	movs	r2, #90	; 0x5a
 8008d64:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8008d66:	2001      	movs	r0, #1
 8008d68:	f000 f840 	bl	8008dec <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8008d6c:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <pl_motor_init+0x44>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	225a      	movs	r2, #90	; 0x5a
 8008d72:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8008d74:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <pl_motor_init+0x48>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	221e      	movs	r2, #30
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008d7c:	bf00      	nop
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	2000f3ac 	.word	0x2000f3ac
 8008d84:	2000f3f8 	.word	0x2000f3f8

08008d88 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d819      	bhi.n	8008dde <pl_L_DriveMotor_mode+0x42>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <pl_L_DriveMotor_mode+0x14>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008ddd 	.word	0x08008ddd
 8008db4:	08008dc1 	.word	0x08008dc1
 8008db8:	08008dcf 	.word	0x08008dcf
 8008dbc:	08008ddd 	.word	0x08008ddd
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dc6:	4808      	ldr	r0, [pc, #32]	; (8008de8 <pl_L_DriveMotor_mode+0x4c>)
 8008dc8:	f014 fff0 	bl	801ddac <HAL_GPIO_WritePin>
break;
 8008dcc:	e007      	b.n	8008dde <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dd4:	4804      	ldr	r0, [pc, #16]	; (8008de8 <pl_L_DriveMotor_mode+0x4c>)
 8008dd6:	f014 ffe9 	bl	801ddac <HAL_GPIO_WritePin>
break;
 8008dda:	e000      	b.n	8008dde <pl_L_DriveMotor_mode+0x42>
break;
 8008ddc:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	48000800 	.word	0x48000800

08008dec <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d817      	bhi.n	8008e2a <pl_R_DriveMotor_mode+0x3e>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <pl_R_DriveMotor_mode+0x14>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e11 	.word	0x08008e11
 8008e08:	08008e1d 	.word	0x08008e1d
 8008e0c:	08008e29 	.word	0x08008e29
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8008e10:	2201      	movs	r2, #1
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	4807      	ldr	r0, [pc, #28]	; (8008e34 <pl_R_DriveMotor_mode+0x48>)
 8008e16:	f014 ffc9 	bl	801ddac <HAL_GPIO_WritePin>
break;
 8008e1a:	e006      	b.n	8008e2a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	4804      	ldr	r0, [pc, #16]	; (8008e34 <pl_R_DriveMotor_mode+0x48>)
 8008e22:	f014 ffc3 	bl	801ddac <HAL_GPIO_WritePin>
break;
 8008e26:	e000      	b.n	8008e2a <pl_R_DriveMotor_mode+0x3e>
break;
 8008e28:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	48000400 	.word	0x48000400

08008e38 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8008e3c:	2108      	movs	r1, #8
 8008e3e:	4804      	ldr	r0, [pc, #16]	; (8008e50 <pl_DriveMotor_start+0x18>)
 8008e40:	f017 f824 	bl	801fe8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8008e44:	2100      	movs	r1, #0
 8008e46:	4802      	ldr	r0, [pc, #8]	; (8008e50 <pl_DriveMotor_start+0x18>)
 8008e48:	f017 f820 	bl	801fe8c <HAL_TIM_PWM_Start>
}
 8008e4c:	bf00      	nop
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	2000f3ac 	.word	0x2000f3ac

08008e54 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8008e58:	2108      	movs	r1, #8
 8008e5a:	4804      	ldr	r0, [pc, #16]	; (8008e6c <pl_DriveMotor_stop+0x18>)
 8008e5c:	f017 f922 	bl	80200a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8008e60:	2100      	movs	r1, #0
 8008e62:	4802      	ldr	r0, [pc, #8]	; (8008e6c <pl_DriveMotor_stop+0x18>)
 8008e64:	f017 f91e 	bl	80200a4 <HAL_TIM_PWM_Stop>
}
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	2000f3ac 	.word	0x2000f3ac

08008e70 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8008e7a:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <pl_DriveMotor_duty+0x28>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <pl_DriveMotor_duty+0x28>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	2000f3ac 	.word	0x2000f3ac

08008e9c <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4802      	ldr	r0, [pc, #8]	; (8008eac <pl_FunMotor_start+0x10>)
 8008ea4:	f016 fff2 	bl	801fe8c <HAL_TIM_PWM_Start>
}
 8008ea8:	bf00      	nop
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	2000f3f8 	.word	0x2000f3f8

08008eb0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <pl_FunMotor_stop+0x10>)
 8008eb8:	f017 f8f4 	bl	80200a4 <HAL_TIM_PWM_Stop>
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	2000f3f8 	.word	0x2000f3f8

08008ec4 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8008ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ed2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008f08 <pl_FunMotor_duty+0x44>
 8008ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ede:	ee17 3a90 	vmov	r3, s15
 8008ee2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <pl_FunMotor_duty+0x48>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2264      	movs	r2, #100	; 0x64
 8008eea:	62da      	str	r2, [r3, #44]	; 0x2c
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <pl_FunMotor_duty+0x48>)
 8008eee:	2264      	movs	r2, #100	; 0x64
 8008ef0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8008ef2:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <pl_FunMotor_duty+0x48>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	635a      	str	r2, [r3, #52]	; 0x34

}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	42c80000 	.word	0x42c80000
 8008f0c:	2000f3f8 	.word	0x2000f3f8

08008f10 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
	AD_step=0;
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <pl_sensor_init+0x18>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8008f1a:	217f      	movs	r1, #127	; 0x7f
 8008f1c:	4803      	ldr	r0, [pc, #12]	; (8008f2c <pl_sensor_init+0x1c>)
 8008f1e:	f013 fe03 	bl	801cb28 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8008f22:	bf00      	nop
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000714 	.word	0x20000714
 8008f2c:	20000740 	.word	0x20000740

08008f30 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8008f36:	483c      	ldr	r0, [pc, #240]	; (8009028 <pl_getbatt+0xf8>)
 8008f38:	f012 f9e4 	bl	801b304 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8008f3c:	2132      	movs	r1, #50	; 0x32
 8008f3e:	483a      	ldr	r0, [pc, #232]	; (8009028 <pl_getbatt+0xf8>)
 8008f40:	f012 fade 	bl	801b500 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8008f44:	4838      	ldr	r0, [pc, #224]	; (8009028 <pl_getbatt+0xf8>)
 8008f46:	f012 fcfa 	bl	801b93e <HAL_ADC_GetValue>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8008f4e:	4836      	ldr	r0, [pc, #216]	; (8009028 <pl_getbatt+0xf8>)
 8008f50:	f012 faa2 	bl	801b498 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8008f54:	88fb      	ldrh	r3, [r7, #6]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5e:	ee17 0a90 	vmov	r0, s15
 8008f62:	f7f7 fb19 	bl	8000598 <__aeabi_f2d>
 8008f66:	a326      	add	r3, pc, #152	; (adr r3, 8009000 <pl_getbatt+0xd0>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f7f7 fb6c 	bl	8000648 <__aeabi_dmul>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	a323      	add	r3, pc, #140	; (adr r3, 8009008 <pl_getbatt+0xd8>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f7f7 fc8d 	bl	800089c <__aeabi_ddiv>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4610      	mov	r0, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	4b27      	ldr	r3, [pc, #156]	; (800902c <pl_getbatt+0xfc>)
 8008f90:	f7f7 fb5a 	bl	8000648 <__aeabi_dmul>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	4b23      	ldr	r3, [pc, #140]	; (8009030 <pl_getbatt+0x100>)
 8008fa2:	f7f7 fc7b 	bl	800089c <__aeabi_ddiv>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4610      	mov	r0, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	a318      	add	r3, pc, #96	; (adr r3, 8009010 <pl_getbatt+0xe0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fb48 	bl	8000648 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	a315      	add	r3, pc, #84	; (adr r3, 8009018 <pl_getbatt+0xe8>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 fb3f 	bl	8000648 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	a313      	add	r3, pc, #76	; (adr r3, 8009020 <pl_getbatt+0xf0>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 fc60 	bl	800089c <__aeabi_ddiv>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f7f7 fe08 	bl	8000bf8 <__aeabi_d2f>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	603b      	str	r3, [r7, #0]
return batt;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	ee07 3a90 	vmov	s15, r3
}
 8008ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	f3af 8000 	nop.w
 8009000:	66666666 	.word	0x66666666
 8009004:	400a6666 	.word	0x400a6666
 8009008:	00000000 	.word	0x00000000
 800900c:	40affe00 	.word	0x40affe00
 8009010:	66666666 	.word	0x66666666
 8009014:	3ff26666 	.word	0x3ff26666
 8009018:	9999999a 	.word	0x9999999a
 800901c:	400d9999 	.word	0x400d9999
 8009020:	ae147ae1 	.word	0xae147ae1
 8009024:	400ee147 	.word	0x400ee147
 8009028:	20000740 	.word	0x20000740
 800902c:	40340000 	.word	0x40340000
 8009030:	40240000 	.word	0x40240000
 8009034:	00000000 	.word	0x00000000

08009038 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800903e:	4882      	ldr	r0, [pc, #520]	; (8009248 <pl_callback_getSensor+0x210>)
 8009040:	f012 fc1c 	bl	801b87c <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8009044:	4b81      	ldr	r3, [pc, #516]	; (800924c <pl_callback_getSensor+0x214>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b04      	cmp	r3, #4
 800904a:	f200 80d9 	bhi.w	8009200 <pl_callback_getSensor+0x1c8>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <pl_callback_getSensor+0x1c>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	08009069 	.word	0x08009069
 8009058:	080090a1 	.word	0x080090a1
 800905c:	08009101 	.word	0x08009101
 8009060:	08009141 	.word	0x08009141
 8009064:	08009201 	.word	0x08009201
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8009068:	2201      	movs	r2, #1
 800906a:	2102      	movs	r1, #2
 800906c:	4878      	ldr	r0, [pc, #480]	; (8009250 <pl_callback_getSensor+0x218>)
 800906e:	f014 fe9d 	bl	801ddac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8009072:	2200      	movs	r2, #0
 8009074:	2110      	movs	r1, #16
 8009076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800907a:	f014 fe97 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800907e:	2200      	movs	r2, #0
 8009080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009084:	4873      	ldr	r0, [pc, #460]	; (8009254 <pl_callback_getSensor+0x21c>)
 8009086:	f014 fe91 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800908e:	e002      	b.n	8009096 <pl_callback_getSensor+0x5e>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3301      	adds	r3, #1
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800909c:	ddf8      	ble.n	8009090 <pl_callback_getSensor+0x58>
		break;
 800909e:	e0af      	b.n	8009200 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 80090a0:	4b6d      	ldr	r3, [pc, #436]	; (8009258 <pl_callback_getSensor+0x220>)
 80090a2:	885a      	ldrh	r2, [r3, #2]
 80090a4:	4b6d      	ldr	r3, [pc, #436]	; (800925c <pl_callback_getSensor+0x224>)
 80090a6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80090a8:	4b6b      	ldr	r3, [pc, #428]	; (8009258 <pl_callback_getSensor+0x220>)
 80090aa:	889a      	ldrh	r2, [r3, #4]
 80090ac:	4b6b      	ldr	r3, [pc, #428]	; (800925c <pl_callback_getSensor+0x224>)
 80090ae:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80090b0:	4b69      	ldr	r3, [pc, #420]	; (8009258 <pl_callback_getSensor+0x220>)
 80090b2:	88da      	ldrh	r2, [r3, #6]
 80090b4:	4b6a      	ldr	r3, [pc, #424]	; (8009260 <pl_callback_getSensor+0x228>)
 80090b6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80090b8:	4b67      	ldr	r3, [pc, #412]	; (8009258 <pl_callback_getSensor+0x220>)
 80090ba:	891a      	ldrh	r2, [r3, #8]
 80090bc:	4b68      	ldr	r3, [pc, #416]	; (8009260 <pl_callback_getSensor+0x228>)
 80090be:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 80090c0:	4b65      	ldr	r3, [pc, #404]	; (8009258 <pl_callback_getSensor+0x220>)
 80090c2:	895a      	ldrh	r2, [r3, #10]
 80090c4:	4b66      	ldr	r3, [pc, #408]	; (8009260 <pl_callback_getSensor+0x228>)
 80090c6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80090c8:	2200      	movs	r2, #0
 80090ca:	2102      	movs	r1, #2
 80090cc:	4860      	ldr	r0, [pc, #384]	; (8009250 <pl_callback_getSensor+0x218>)
 80090ce:	f014 fe6d 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 80090d2:	2201      	movs	r2, #1
 80090d4:	2110      	movs	r1, #16
 80090d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090da:	f014 fe67 	bl	801ddac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090e4:	485b      	ldr	r0, [pc, #364]	; (8009254 <pl_callback_getSensor+0x21c>)
 80090e6:	f014 fe61 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80090ee:	e002      	b.n	80090f6 <pl_callback_getSensor+0xbe>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3301      	adds	r3, #1
 80090f4:	607b      	str	r3, [r7, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090fc:	ddf8      	ble.n	80090f0 <pl_callback_getSensor+0xb8>
		break;
 80090fe:	e07f      	b.n	8009200 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8009100:	4b55      	ldr	r3, [pc, #340]	; (8009258 <pl_callback_getSensor+0x220>)
 8009102:	88da      	ldrh	r2, [r3, #6]
 8009104:	4b55      	ldr	r3, [pc, #340]	; (800925c <pl_callback_getSensor+0x224>)
 8009106:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8009108:	2200      	movs	r2, #0
 800910a:	2102      	movs	r1, #2
 800910c:	4850      	ldr	r0, [pc, #320]	; (8009250 <pl_callback_getSensor+0x218>)
 800910e:	f014 fe4d 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8009112:	2200      	movs	r2, #0
 8009114:	2110      	movs	r1, #16
 8009116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800911a:	f014 fe47 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 800911e:	2201      	movs	r2, #1
 8009120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009124:	484b      	ldr	r0, [pc, #300]	; (8009254 <pl_callback_getSensor+0x21c>)
 8009126:	f014 fe41 	bl	801ddac <HAL_GPIO_WritePin>
		j=0;
 800912a:	2300      	movs	r3, #0
 800912c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800912e:	e002      	b.n	8009136 <pl_callback_getSensor+0xfe>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3301      	adds	r3, #1
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800913c:	ddf8      	ble.n	8009130 <pl_callback_getSensor+0xf8>
		break;
 800913e:	e05f      	b.n	8009200 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8009140:	4b45      	ldr	r3, [pc, #276]	; (8009258 <pl_callback_getSensor+0x220>)
 8009142:	885a      	ldrh	r2, [r3, #2]
 8009144:	4b46      	ldr	r3, [pc, #280]	; (8009260 <pl_callback_getSensor+0x228>)
 8009146:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8009148:	4b43      	ldr	r3, [pc, #268]	; (8009258 <pl_callback_getSensor+0x220>)
 800914a:	889a      	ldrh	r2, [r3, #4]
 800914c:	4b44      	ldr	r3, [pc, #272]	; (8009260 <pl_callback_getSensor+0x228>)
 800914e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8009150:	4b41      	ldr	r3, [pc, #260]	; (8009258 <pl_callback_getSensor+0x220>)
 8009152:	891a      	ldrh	r2, [r3, #8]
 8009154:	4b41      	ldr	r3, [pc, #260]	; (800925c <pl_callback_getSensor+0x224>)
 8009156:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8009158:	4b3f      	ldr	r3, [pc, #252]	; (8009258 <pl_callback_getSensor+0x220>)
 800915a:	895a      	ldrh	r2, [r3, #10]
 800915c:	4b3f      	ldr	r3, [pc, #252]	; (800925c <pl_callback_getSensor+0x224>)
 800915e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8009160:	2200      	movs	r2, #0
 8009162:	2102      	movs	r1, #2
 8009164:	483a      	ldr	r0, [pc, #232]	; (8009250 <pl_callback_getSensor+0x218>)
 8009166:	f014 fe21 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800916a:	2200      	movs	r2, #0
 800916c:	2110      	movs	r1, #16
 800916e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009172:	f014 fe1b 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8009176:	2200      	movs	r2, #0
 8009178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800917c:	4835      	ldr	r0, [pc, #212]	; (8009254 <pl_callback_getSensor+0x21c>)
 800917e:	f014 fe15 	bl	801ddac <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8009182:	2300      	movs	r3, #0
 8009184:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8009186:	e002      	b.n	800918e <pl_callback_getSensor+0x156>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3301      	adds	r3, #1
 800918c:	607b      	str	r3, [r7, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b32      	cmp	r3, #50	; 0x32
 8009192:	ddf9      	ble.n	8009188 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8009194:	4b30      	ldr	r3, [pc, #192]	; (8009258 <pl_callback_getSensor+0x220>)
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 800919a:	887b      	ldrh	r3, [r7, #2]
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a4:	ee17 0a90 	vmov	r0, s15
 80091a8:	f7f7 f9f6 	bl	8000598 <__aeabi_f2d>
 80091ac:	a320      	add	r3, pc, #128	; (adr r3, 8009230 <pl_callback_getSensor+0x1f8>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 fa49 	bl	8000648 <__aeabi_dmul>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4610      	mov	r0, r2
 80091bc:	4619      	mov	r1, r3
 80091be:	a31e      	add	r3, pc, #120	; (adr r3, 8009238 <pl_callback_getSensor+0x200>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fb6a 	bl	800089c <__aeabi_ddiv>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4610      	mov	r0, r2
 80091ce:	4619      	mov	r1, r3
 80091d0:	a31b      	add	r3, pc, #108	; (adr r3, 8009240 <pl_callback_getSensor+0x208>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 fa37 	bl	8000648 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4610      	mov	r0, r2
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <pl_callback_getSensor+0x22c>)
 80091e8:	f7f7 fb58 	bl	800089c <__aeabi_ddiv>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	f7f7 fd00 	bl	8000bf8 <__aeabi_d2f>
 80091f8:	4603      	mov	r3, r0
 80091fa:	4a1b      	ldr	r2, [pc, #108]	; (8009268 <pl_callback_getSensor+0x230>)
 80091fc:	6013      	str	r3, [r2, #0]
		break;
 80091fe:	bf00      	nop

		break;
	}


	AD_step++;
 8009200:	4b12      	ldr	r3, [pc, #72]	; (800924c <pl_callback_getSensor+0x214>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	4b10      	ldr	r3, [pc, #64]	; (800924c <pl_callback_getSensor+0x214>)
 800920a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 800920c:	4b0f      	ldr	r3, [pc, #60]	; (800924c <pl_callback_getSensor+0x214>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b04      	cmp	r3, #4
 8009212:	d005      	beq.n	8009220 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8009214:	2206      	movs	r2, #6
 8009216:	4910      	ldr	r1, [pc, #64]	; (8009258 <pl_callback_getSensor+0x220>)
 8009218:	480b      	ldr	r0, [pc, #44]	; (8009248 <pl_callback_getSensor+0x210>)
 800921a:	f012 fa65 	bl	801b6e8 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 800921e:	e002      	b.n	8009226 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <pl_callback_getSensor+0x214>)
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	66666666 	.word	0x66666666
 8009234:	400a6666 	.word	0x400a6666
 8009238:	00000000 	.word	0x00000000
 800923c:	40affe00 	.word	0x40affe00
 8009240:	00000000 	.word	0x00000000
 8009244:	4062c000 	.word	0x4062c000
 8009248:	20000740 	.word	0x20000740
 800924c:	20000714 	.word	0x20000714
 8009250:	48000400 	.word	0x48000400
 8009254:	48000800 	.word	0x48000800
 8009258:	20000708 	.word	0x20000708
 800925c:	20000718 	.word	0x20000718
 8009260:	20000724 	.word	0x20000724
 8009264:	40490000 	.word	0x40490000
 8009268:	20000730 	.word	0x20000730

0800926c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8009270:	2206      	movs	r2, #6
 8009272:	4903      	ldr	r1, [pc, #12]	; (8009280 <pl_interupt_getSensor+0x14>)
 8009274:	4803      	ldr	r0, [pc, #12]	; (8009284 <pl_interupt_getSensor+0x18>)
 8009276:	f012 fa37 	bl	801b6e8 <HAL_ADC_Start_DMA>

}
 800927a:	bf00      	nop
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000708 	.word	0x20000708
 8009284:	20000740 	.word	0x20000740

08009288 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
	count_mode=0;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <pl_timer_init+0x1c>)
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8009292:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <pl_timer_init+0x20>)
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 800929a:	4804      	ldr	r0, [pc, #16]	; (80092ac <pl_timer_init+0x24>)
 800929c:	f016 fd2e 	bl	801fcfc <HAL_TIM_Base_Start_IT>
}
 80092a0:	bf00      	nop
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	2000073c 	.word	0x2000073c
 80092a8:	20000738 	.word	0x20000738
 80092ac:	2000f360 	.word	0x2000f360

080092b0 <interrupt_timer>:

void interrupt_timer(void){
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
	g_timCount++;
 80092b4:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <interrupt_timer+0x48>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3301      	adds	r3, #1
 80092ba:	4a0f      	ldr	r2, [pc, #60]	; (80092f8 <interrupt_timer+0x48>)
 80092bc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <interrupt_timer+0x4c>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d112      	bne.n	80092ec <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 80092c6:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <interrupt_timer+0x50>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 f964 	bl	8000598 <__aeabi_f2d>
 80092d0:	a307      	add	r3, pc, #28	; (adr r3, 80092f0 <interrupt_timer+0x40>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f7 f801 	bl	80002dc <__adddf3>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7f7 fc89 	bl	8000bf8 <__aeabi_d2f>
 80092e6:	4603      	mov	r3, r0
 80092e8:	4a05      	ldr	r2, [pc, #20]	; (8009300 <interrupt_timer+0x50>)
 80092ea:	6013      	str	r3, [r2, #0]
	}

}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80092f4:	3f50624d 	.word	0x3f50624d
 80092f8:	20000734 	.word	0x20000734
 80092fc:	2000073c 	.word	0x2000073c
 8009300:	20000738 	.word	0x20000738

08009304 <tic_timer>:

void tic_timer(void){
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
	count_mode=1;
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <tic_timer+0x1c>)
 800930a:	2201      	movs	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <tic_timer+0x20>)
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
}
 8009316:	bf00      	nop
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	2000073c 	.word	0x2000073c
 8009324:	20000738 	.word	0x20000738

08009328 <toc_timer>:

float toc_timer(void){
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 800932e:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <toc_timer+0x30>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8009334:	4b09      	ldr	r3, [pc, #36]	; (800935c <toc_timer+0x34>)
 8009336:	2200      	movs	r2, #0
 8009338:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 800933a:	4b07      	ldr	r3, [pc, #28]	; (8009358 <toc_timer+0x30>)
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
	return timer;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	ee07 3a90 	vmov	s15, r3
}
 8009348:	eeb0 0a67 	vmov.f32	s0, s15
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	20000738 	.word	0x20000738
 800935c:	2000073c 	.word	0x2000073c

08009360 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8009360:	b5b0      	push	{r4, r5, r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <wait_ms+0x80>)
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 800936e:	4b1d      	ldr	r3, [pc, #116]	; (80093e4 <wait_ms+0x84>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8009376:	bf00      	nop
 8009378:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <wait_ms+0x80>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009384:	ee17 0a90 	vmov	r0, s15
 8009388:	f7f7 f906 	bl	8000598 <__aeabi_f2d>
 800938c:	a312      	add	r3, pc, #72	; (adr r3, 80093d8 <wait_ms+0x78>)
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	f7f7 f959 	bl	8000648 <__aeabi_dmul>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4610      	mov	r0, r2
 800939c:	4619      	mov	r1, r3
 800939e:	a30e      	add	r3, pc, #56	; (adr r3, 80093d8 <wait_ms+0x78>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 fa7a 	bl	800089c <__aeabi_ddiv>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4614      	mov	r4, r2
 80093ae:	461d      	mov	r5, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f7 f8cf 	bl	8000554 <__aeabi_ui2d>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f7 fbb5 	bl	8000b2c <__aeabi_dcmplt>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1d7      	bne.n	8009378 <wait_ms+0x18>
        }

}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bdb0      	pop	{r4, r5, r7, pc}
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80093dc:	3f50624d 	.word	0x3f50624d
 80093e0:	20000734 	.word	0x20000734
 80093e4:	2000f360 	.word	0x2000f360

080093e8 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 80093e8:	b5b0      	push	{r4, r5, r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80093f0:	4b1b      	ldr	r3, [pc, #108]	; (8009460 <wait_ms_NoReset+0x78>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80093f6:	bf00      	nop
 80093f8:	4b19      	ldr	r3, [pc, #100]	; (8009460 <wait_ms_NoReset+0x78>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009404:	ee17 0a90 	vmov	r0, s15
 8009408:	f7f7 f8c6 	bl	8000598 <__aeabi_f2d>
 800940c:	a312      	add	r3, pc, #72	; (adr r3, 8009458 <wait_ms_NoReset+0x70>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f7 f919 	bl	8000648 <__aeabi_dmul>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4610      	mov	r0, r2
 800941c:	4619      	mov	r1, r3
 800941e:	a30e      	add	r3, pc, #56	; (adr r3, 8009458 <wait_ms_NoReset+0x70>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	f7f7 fa3a 	bl	800089c <__aeabi_ddiv>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4614      	mov	r4, r2
 800942e:	461d      	mov	r5, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7f7 f88f 	bl	8000554 <__aeabi_ui2d>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4620      	mov	r0, r4
 800943c:	4629      	mov	r1, r5
 800943e:	f7f7 fb75 	bl	8000b2c <__aeabi_dcmplt>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1d7      	bne.n	80093f8 <wait_ms_NoReset+0x10>
        }

}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bdb0      	pop	{r4, r5, r7, pc}
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	d2f1a9fc 	.word	0xd2f1a9fc
 800945c:	3f50624d 	.word	0x3f50624d
 8009460:	20000734 	.word	0x20000734

08009464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08c      	sub	sp, #48	; 0x30
 8009468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800946a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	2220      	movs	r2, #32
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f018 fdb9 	bl	8021ff4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009482:	4b56      	ldr	r3, [pc, #344]	; (80095dc <MX_ADC1_Init+0x178>)
 8009484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800948a:	4b54      	ldr	r3, [pc, #336]	; (80095dc <MX_ADC1_Init+0x178>)
 800948c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009490:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009492:	4b52      	ldr	r3, [pc, #328]	; (80095dc <MX_ADC1_Init+0x178>)
 8009494:	2200      	movs	r2, #0
 8009496:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009498:	4b50      	ldr	r3, [pc, #320]	; (80095dc <MX_ADC1_Init+0x178>)
 800949a:	2200      	movs	r2, #0
 800949c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800949e:	4b4f      	ldr	r3, [pc, #316]	; (80095dc <MX_ADC1_Init+0x178>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80094a4:	4b4d      	ldr	r3, [pc, #308]	; (80095dc <MX_ADC1_Init+0x178>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80094aa:	4b4c      	ldr	r3, [pc, #304]	; (80095dc <MX_ADC1_Init+0x178>)
 80094ac:	2208      	movs	r2, #8
 80094ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80094b0:	4b4a      	ldr	r3, [pc, #296]	; (80095dc <MX_ADC1_Init+0x178>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80094b6:	4b49      	ldr	r3, [pc, #292]	; (80095dc <MX_ADC1_Init+0x178>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80094bc:	4b47      	ldr	r3, [pc, #284]	; (80095dc <MX_ADC1_Init+0x178>)
 80094be:	2206      	movs	r2, #6
 80094c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80094c2:	4b46      	ldr	r3, [pc, #280]	; (80095dc <MX_ADC1_Init+0x178>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80094ca:	4b44      	ldr	r3, [pc, #272]	; (80095dc <MX_ADC1_Init+0x178>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80094d0:	4b42      	ldr	r3, [pc, #264]	; (80095dc <MX_ADC1_Init+0x178>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80094d6:	4b41      	ldr	r3, [pc, #260]	; (80095dc <MX_ADC1_Init+0x178>)
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80094de:	4b3f      	ldr	r3, [pc, #252]	; (80095dc <MX_ADC1_Init+0x178>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80094e4:	4b3d      	ldr	r3, [pc, #244]	; (80095dc <MX_ADC1_Init+0x178>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80094ec:	483b      	ldr	r0, [pc, #236]	; (80095dc <MX_ADC1_Init+0x178>)
 80094ee:	f011 fd55 	bl	801af9c <HAL_ADC_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80094f8:	f002 fa97 	bl	800ba2a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80094fc:	2300      	movs	r3, #0
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009504:	4619      	mov	r1, r3
 8009506:	4835      	ldr	r0, [pc, #212]	; (80095dc <MX_ADC1_Init+0x178>)
 8009508:	f013 fba2 	bl	801cc50 <HAL_ADCEx_MultiModeConfigChannel>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8009512:	f002 fa8a 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009516:	4b32      	ldr	r3, [pc, #200]	; (80095e0 <MX_ADC1_Init+0x17c>)
 8009518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800951a:	2306      	movs	r3, #6
 800951c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800951e:	2301      	movs	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009522:	237f      	movs	r3, #127	; 0x7f
 8009524:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009526:	2304      	movs	r3, #4
 8009528:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	4619      	mov	r1, r3
 8009532:	482a      	ldr	r0, [pc, #168]	; (80095dc <MX_ADC1_Init+0x178>)
 8009534:	f012 fc68 	bl	801be08 <HAL_ADC_ConfigChannel>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800953e:	f002 fa74 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009542:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <MX_ADC1_Init+0x180>)
 8009544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009546:	230c      	movs	r3, #12
 8009548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4823      	ldr	r0, [pc, #140]	; (80095dc <MX_ADC1_Init+0x178>)
 8009550:	f012 fc5a 	bl	801be08 <HAL_ADC_ConfigChannel>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800955a:	f002 fa66 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800955e:	4b22      	ldr	r3, [pc, #136]	; (80095e8 <MX_ADC1_Init+0x184>)
 8009560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009562:	2312      	movs	r3, #18
 8009564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009566:	1d3b      	adds	r3, r7, #4
 8009568:	4619      	mov	r1, r3
 800956a:	481c      	ldr	r0, [pc, #112]	; (80095dc <MX_ADC1_Init+0x178>)
 800956c:	f012 fc4c 	bl	801be08 <HAL_ADC_ConfigChannel>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8009576:	f002 fa58 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800957a:	4b1c      	ldr	r3, [pc, #112]	; (80095ec <MX_ADC1_Init+0x188>)
 800957c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800957e:	2318      	movs	r3, #24
 8009580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4815      	ldr	r0, [pc, #84]	; (80095dc <MX_ADC1_Init+0x178>)
 8009588:	f012 fc3e 	bl	801be08 <HAL_ADC_ConfigChannel>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8009592:	f002 fa4a 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009596:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <MX_ADC1_Init+0x18c>)
 8009598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800959a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800959e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80095a0:	1d3b      	adds	r3, r7, #4
 80095a2:	4619      	mov	r1, r3
 80095a4:	480d      	ldr	r0, [pc, #52]	; (80095dc <MX_ADC1_Init+0x178>)
 80095a6:	f012 fc2f 	bl	801be08 <HAL_ADC_ConfigChannel>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80095b0:	f002 fa3b 	bl	800ba2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80095b4:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <MX_ADC1_Init+0x190>)
 80095b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80095b8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80095bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4806      	ldr	r0, [pc, #24]	; (80095dc <MX_ADC1_Init+0x178>)
 80095c4:	f012 fc20 	bl	801be08 <HAL_ADC_ConfigChannel>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80095ce:	f002 fa2c 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80095d2:	bf00      	nop
 80095d4:	3730      	adds	r7, #48	; 0x30
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20000740 	.word	0x20000740
 80095e0:	2e300800 	.word	0x2e300800
 80095e4:	3ef08000 	.word	0x3ef08000
 80095e8:	10c00010 	.word	0x10c00010
 80095ec:	0c900008 	.word	0x0c900008
 80095f0:	08600004 	.word	0x08600004
 80095f4:	04300002 	.word	0x04300002

080095f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b09e      	sub	sp, #120	; 0x78
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009600:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	609a      	str	r2, [r3, #8]
 800960c:	60da      	str	r2, [r3, #12]
 800960e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009610:	f107 0314 	add.w	r3, r7, #20
 8009614:	2250      	movs	r2, #80	; 0x50
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f018 fceb 	bl	8021ff4 <memset>
  if(adcHandle->Instance==ADC1)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009626:	f040 8082 	bne.w	800972e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800962a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8009630:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009634:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009636:	f107 0314 	add.w	r3, r7, #20
 800963a:	4618      	mov	r0, r3
 800963c:	f015 f9b2 	bl	801e9a4 <HAL_RCCEx_PeriphCLKConfig>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8009646:	f002 f9f0 	bl	800ba2a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800964a:	4b3b      	ldr	r3, [pc, #236]	; (8009738 <HAL_ADC_MspInit+0x140>)
 800964c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964e:	4a3a      	ldr	r2, [pc, #232]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009656:	4b38      	ldr	r3, [pc, #224]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800965e:	613b      	str	r3, [r7, #16]
 8009660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009662:	4b35      	ldr	r3, [pc, #212]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	4a34      	ldr	r2, [pc, #208]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800966e:	4b32      	ldr	r3, [pc, #200]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <HAL_ADC_MspInit+0x140>)
 800967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967e:	4a2e      	ldr	r2, [pc, #184]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009680:	f043 0302 	orr.w	r3, r3, #2
 8009684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009686:	4b2c      	ldr	r3, [pc, #176]	; (8009738 <HAL_ADC_MspInit+0x140>)
 8009688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8009692:	230f      	movs	r3, #15
 8009694:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009696:	2303      	movs	r3, #3
 8009698:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800969e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80096a2:	4619      	mov	r1, r3
 80096a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096a8:	f014 f9fe 	bl	801daa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80096ac:	f241 0301 	movw	r3, #4097	; 0x1001
 80096b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80096b2:	2303      	movs	r3, #3
 80096b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80096be:	4619      	mov	r1, r3
 80096c0:	481e      	ldr	r0, [pc, #120]	; (800973c <HAL_ADC_MspInit+0x144>)
 80096c2:	f014 f9f1 	bl	801daa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80096c6:	4b1e      	ldr	r3, [pc, #120]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096c8:	4a1e      	ldr	r2, [pc, #120]	; (8009744 <HAL_ADC_MspInit+0x14c>)
 80096ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80096cc:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096ce:	2205      	movs	r2, #5
 80096d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80096d2:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80096d8:	4b19      	ldr	r3, [pc, #100]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096da:	2200      	movs	r2, #0
 80096dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80096de:	4b18      	ldr	r3, [pc, #96]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096e0:	2280      	movs	r2, #128	; 0x80
 80096e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80096e4:	4b16      	ldr	r3, [pc, #88]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80096ec:	4b14      	ldr	r3, [pc, #80]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096f6:	2220      	movs	r2, #32
 80096f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80096fa:	4b11      	ldr	r3, [pc, #68]	; (8009740 <HAL_ADC_MspInit+0x148>)
 80096fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009700:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009702:	480f      	ldr	r0, [pc, #60]	; (8009740 <HAL_ADC_MspInit+0x148>)
 8009704:	f013 fc9c 	bl	801d040 <HAL_DMA_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800970e:	f002 f98c 	bl	800ba2a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <HAL_ADC_MspInit+0x148>)
 8009716:	655a      	str	r2, [r3, #84]	; 0x54
 8009718:	4a09      	ldr	r2, [pc, #36]	; (8009740 <HAL_ADC_MspInit+0x148>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800971e:	2200      	movs	r2, #0
 8009720:	2100      	movs	r1, #0
 8009722:	2012      	movs	r0, #18
 8009724:	f013 fc57 	bl	801cfd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8009728:	2012      	movs	r0, #18
 800972a:	f013 fc6e 	bl	801d00a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800972e:	bf00      	nop
 8009730:	3778      	adds	r7, #120	; 0x78
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40021000 	.word	0x40021000
 800973c:	48000400 	.word	0x48000400
 8009740:	200007ac 	.word	0x200007ac
 8009744:	40020008 	.word	0x40020008

08009748 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8009750:	f7ff fc72 	bl	8009038 <pl_callback_getSensor>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 800975c:	b084      	sub	sp, #16
 800975e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	f107 0420 	add.w	r4, r7, #32
 800976a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800976e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	f2c0 819d 	blt.w	8009ab8 <cal_table+0x35c>
	switch (g_acc_flag) {
 800977e:	4bcd      	ldr	r3, [pc, #820]	; (8009ab4 <cal_table+0x358>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b06      	cmp	r3, #6
 8009786:	f200 833a 	bhi.w	8009dfe <cal_table+0x6a2>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <cal_table+0x34>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	08009df1 	.word	0x08009df1
 8009794:	080097ad 	.word	0x080097ad
 8009798:	0800991f 	.word	0x0800991f
 800979c:	08009a3d 	.word	0x08009a3d
 80097a0:	08009df1 	.word	0x08009df1
 80097a4:	08009a69 	.word	0x08009a69
 80097a8:	08009a8f 	.word	0x08009a8f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	ed93 7a00 	vldr	s14, [r3]
 80097b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80097b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097be:	db0a      	blt.n	80097d6 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80097c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80097ce:	4bb9      	ldr	r3, [pc, #740]	; (8009ab4 <cal_table+0x358>)
 80097d0:	2202      	movs	r2, #2
 80097d2:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80097d4:	e313      	b.n	8009dfe <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80097d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	edd3 7a00 	vldr	s15, [r3]
 80097ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80097ee:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80097f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80097f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80097fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80097fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009806:	ee66 7a27 	vmul.f32	s15, s12, s15
 800980a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800980e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009812:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009816:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800981a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800981e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009826:	d900      	bls.n	800982a <cal_table+0xce>
		break;
 8009828:	e2e9      	b.n	8009dfe <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	edd3 7a00 	vldr	s15, [r3]
 8009830:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	edd3 7a00 	vldr	s15, [r3]
 800983a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800983e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009842:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800984a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800984e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009852:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800985a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800985e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009862:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009866:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800986a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009872:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800987c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009880:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	4618      	mov	r0, r3
 800988a:	f7f6 fe85 	bl	8000598 <__aeabi_f2d>
 800988e:	4604      	mov	r4, r0
 8009890:	460d      	mov	r5, r1
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	4618      	mov	r0, r3
 8009896:	f7f6 fe7f 	bl	8000598 <__aeabi_f2d>
 800989a:	f04f 0200 	mov.w	r2, #0
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	f7f6 fed1 	bl	8000648 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4690      	mov	r8, r2
 80098ac:	4699      	mov	r9, r3
 80098ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80098b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098b6:	ee17 0a90 	vmov	r0, s15
 80098ba:	f7f6 fe6d 	bl	8000598 <__aeabi_f2d>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 febf 	bl	8000648 <__aeabi_dmul>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f6 fd01 	bl	80002d8 <__aeabi_dsub>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4610      	mov	r0, r2
 80098dc:	4619      	mov	r1, r3
 80098de:	f7f7 f98b 	bl	8000bf8 <__aeabi_d2f>
 80098e2:	4602      	mov	r2, r0
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	ed93 7a00 	vldr	s14, [r3]
 80098ee:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80098f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80098f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8009908:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800990c:	eef1 7a67 	vneg.f32	s15, s15
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009916:	4b67      	ldr	r3, [pc, #412]	; (8009ab4 <cal_table+0x358>)
 8009918:	2203      	movs	r2, #3
 800991a:	701a      	strb	r2, [r3, #0]
		break;
 800991c:	e26f      	b.n	8009dfe <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800991e:	ed97 7a08 	vldr	s14, [r7, #32]
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	edd3 7a02 	vldr	s15, [r3, #8]
 8009928:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800992c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009930:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009934:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009938:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800993c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009940:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009944:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009948:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800994c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009950:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009954:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8009958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	d900      	bls.n	8009964 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8009962:	e24c      	b.n	8009dfe <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	ed93 7a02 	vldr	s14, [r3, #8]
 800996a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800996e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009972:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8009976:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800997a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800997e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009982:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009986:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800998a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800998e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009992:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009996:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800999a:	edd7 7a08 	vldr	s15, [r7, #32]
 800999e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80099a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ac:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7f6 fdef 	bl	8000598 <__aeabi_f2d>
 80099ba:	4604      	mov	r4, r0
 80099bc:	460d      	mov	r5, r1
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f6 fde9 	bl	8000598 <__aeabi_f2d>
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	f7f6 fe3b 	bl	8000648 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4690      	mov	r8, r2
 80099d8:	4699      	mov	r9, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f6 fddc 	bl	8000598 <__aeabi_f2d>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f6 fe2e 	bl	8000648 <__aeabi_dmul>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7f6 fc70 	bl	80002d8 <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4610      	mov	r0, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	f7f7 f8fa 	bl	8000bf8 <__aeabi_d2f>
 8009a04:	4602      	mov	r2, r0
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	ed93 7a00 	vldr	s14, [r3]
 8009a10:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8009a26:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a2a:	eef1 7a67 	vneg.f32	s15, s15
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8009a34:	4b1f      	ldr	r3, [pc, #124]	; (8009ab4 <cal_table+0x358>)
 8009a36:	2203      	movs	r2, #3
 8009a38:	701a      	strb	r2, [r3, #0]
		break;
 8009a3a:	e1e0      	b.n	8009dfe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	ed93 7a00 	vldr	s14, [r3]
 8009a42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4e:	d900      	bls.n	8009a52 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009a50:	e1d5      	b.n	8009dfe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8009a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009a60:	4b14      	ldr	r3, [pc, #80]	; (8009ab4 <cal_table+0x358>)
 8009a62:	2204      	movs	r2, #4
 8009a64:	701a      	strb	r2, [r3, #0]
		break;
 8009a66:	e1ca      	b.n	8009dfe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7a:	da00      	bge.n	8009a7e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009a7c:	e1bf      	b.n	8009dfe <cal_table+0x6a2>
			target->acceleration = 0;
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <cal_table+0x358>)
 8009a88:	2204      	movs	r2, #4
 8009a8a:	701a      	strb	r2, [r3, #0]
		break;
 8009a8c:	e1b7      	b.n	8009dfe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a94:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa0:	da00      	bge.n	8009aa4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009aa2:	e1ac      	b.n	8009dfe <cal_table+0x6a2>
			target->acceleration = 0;
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009aac:	4b01      	ldr	r3, [pc, #4]	; (8009ab4 <cal_table+0x358>)
 8009aae:	2204      	movs	r2, #4
 8009ab0:	701a      	strb	r2, [r3, #0]
		break;
 8009ab2:	e1a4      	b.n	8009dfe <cal_table+0x6a2>
 8009ab4:	20000810 	.word	0x20000810
	}
}else{
	switch (g_acc_flag) {
 8009ab8:	4bce      	ldr	r3, [pc, #824]	; (8009df4 <cal_table+0x698>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	f200 819d 	bhi.w	8009dfe <cal_table+0x6a2>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <cal_table+0x370>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009dfd 	.word	0x08009dfd
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009c5b 	.word	0x08009c5b
 8009ad8:	08009d71 	.word	0x08009d71
 8009adc:	08009d9d 	.word	0x08009d9d
 8009ae0:	08009da5 	.word	0x08009da5
 8009ae4:	08009dcb 	.word	0x08009dcb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	ed93 7a00 	vldr	s14, [r3]
 8009aee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afa:	d80a      	bhi.n	8009b12 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8009afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8009b0a:	4bba      	ldr	r3, [pc, #744]	; (8009df4 <cal_table+0x698>)
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8009b10:	e175      	b.n	8009dfe <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8009b12:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b16:	eeb1 7a67 	vneg.f32	s14, s15
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	edd3 7a00 	vldr	s15, [r3]
 8009b20:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	edd3 7a00 	vldr	s15, [r3]
 8009b2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8009b2e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8009b32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009b3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8009b3e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009b42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b46:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009b4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8009b4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009b52:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009b56:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009b5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8009b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b66:	d900      	bls.n	8009b6a <cal_table+0x40e>
		break;
 8009b68:	e149      	b.n	8009dfe <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	edd3 7a00 	vldr	s15, [r3]
 8009b70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	edd3 7a00 	vldr	s15, [r3]
 8009b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8009b7e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009b82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8009b8e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009b92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8009b9e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8009ba2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009baa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009bb6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8009bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7f6 fce3 	bl	8000598 <__aeabi_f2d>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7f6 fcdd 	bl	8000598 <__aeabi_f2d>
 8009bde:	f04f 0200 	mov.w	r2, #0
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	f7f6 fd2f 	bl	8000648 <__aeabi_dmul>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4690      	mov	r8, r2
 8009bf0:	4699      	mov	r9, r3
 8009bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009bf6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009bfa:	ee17 0a90 	vmov	r0, s15
 8009bfe:	f7f6 fccb 	bl	8000598 <__aeabi_f2d>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 fd1d 	bl	8000648 <__aeabi_dmul>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 fb61 	bl	80002dc <__adddf3>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	f7f6 ffe9 	bl	8000bf8 <__aeabi_d2f>
 8009c26:	4602      	mov	r2, r0
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2e:	ed93 7a00 	vldr	s14, [r3]
 8009c32:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8009c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8009c52:	4b68      	ldr	r3, [pc, #416]	; (8009df4 <cal_table+0x698>)
 8009c54:	2203      	movs	r2, #3
 8009c56:	701a      	strb	r2, [r3, #0]
		break;
 8009c58:	e0d1      	b.n	8009dfe <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c60:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c64:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8009c68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009c6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009c70:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8009c74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009c78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009c7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009c80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009c88:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8009c8c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c90:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8009c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9c:	d900      	bls.n	8009ca0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8009c9e:	e0ae      	b.n	8009dfe <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	ed93 7a02 	vldr	s14, [r3, #8]
 8009ca6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009caa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8009cb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009cb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009cbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009cc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009cc6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8009cca:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009cce:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8009cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8009cd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8009cda:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8009ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ce8:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f6 fc51 	bl	8000598 <__aeabi_f2d>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7f6 fc4b 	bl	8000598 <__aeabi_f2d>
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	f7f6 fc9d 	bl	8000648 <__aeabi_dmul>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4690      	mov	r8, r2
 8009d14:	4699      	mov	r9, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7f6 fc3e 	bl	8000598 <__aeabi_f2d>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7f6 fc90 	bl	8000648 <__aeabi_dmul>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 fad4 	bl	80002dc <__adddf3>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f7f6 ff5c 	bl	8000bf8 <__aeabi_d2f>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	ed93 7a00 	vldr	s14, [r3]
 8009d4c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8009d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009d68:	4b22      	ldr	r3, [pc, #136]	; (8009df4 <cal_table+0x698>)
 8009d6a:	2203      	movs	r2, #3
 8009d6c:	701a      	strb	r2, [r3, #0]
		break;
 8009d6e:	e046      	b.n	8009dfe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	ed93 7a00 	vldr	s14, [r3]
 8009d76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d82:	da00      	bge.n	8009d86 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009d84:	e03b      	b.n	8009dfe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8009d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	f04f 0200 	mov.w	r2, #0
 8009d92:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009d94:	4b17      	ldr	r3, [pc, #92]	; (8009df4 <cal_table+0x698>)
 8009d96:	2204      	movs	r2, #4
 8009d98:	701a      	strb	r2, [r3, #0]
		break;
 8009d9a:	e030      	b.n	8009dfe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8009d9c:	4b16      	ldr	r3, [pc, #88]	; (8009df8 <cal_table+0x69c>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
		break;
 8009da2:	e02c      	b.n	8009dfe <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009daa:	edd7 7a08 	vldr	s15, [r7, #32]
 8009dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db6:	d900      	bls.n	8009dba <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009db8:	e021      	b.n	8009dfe <cal_table+0x6a2>
			target->acceleration = 0;
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <cal_table+0x698>)
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	701a      	strb	r2, [r3, #0]
		break;
 8009dc8:	e019      	b.n	8009dfe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8009dd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8009dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ddc:	d900      	bls.n	8009de0 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009dde:	e00e      	b.n	8009dfe <cal_table+0x6a2>
			target->acceleration = 0;
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	f04f 0200 	mov.w	r2, #0
 8009de6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <cal_table+0x698>)
 8009dea:	2204      	movs	r2, #4
 8009dec:	701a      	strb	r2, [r3, #0]
		break;
 8009dee:	e006      	b.n	8009dfe <cal_table+0x6a2>
		break;
 8009df0:	bf00      	nop
 8009df2:	e004      	b.n	8009dfe <cal_table+0x6a2>
 8009df4:	20000810 	.word	0x20000810
 8009df8:	20000811 	.word	0x20000811
		break;
 8009dfc:	bf00      	nop
	}

}

}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009e08:	b004      	add	sp, #16
 8009e0a:	4770      	bx	lr

08009e0c <cal_table_dis>:



// 減速をより速くした機能を追加
void cal_table_dis(TRAPEZOID input,TARGET *target){
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
float acc_distance;//初速度から現在の速度に達するまでに使った距離
float dec_distance;//現在の速度から終端速度になるのに必要なた距離
float velocity=(fusion_speedL+fusion_speedR)/2;
 8009e1e:	4bd7      	ldr	r3, [pc, #860]	; (800a17c <cal_table_dis+0x370>)
 8009e20:	ed93 7a00 	vldr	s14, [r3]
 8009e24:	4bd6      	ldr	r3, [pc, #856]	; (800a180 <cal_table_dis+0x374>)
 8009e26:	edd3 7a00 	vldr	s15, [r3]
 8009e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e36:	edc7 7a05 	vstr	s15, [r7, #20]
float distance=(fusion_distanceL+fusion_distanceL)/2;
 8009e3a:	4bd2      	ldr	r3, [pc, #840]	; (800a184 <cal_table_dis+0x378>)
 8009e3c:	edd3 7a00 	vldr	s15, [r3]
 8009e40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009e44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e4c:	edc7 7a04 	vstr	s15, [r7, #16]
if (input.displacement>=0){
 8009e50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	f2c0 81a9 	blt.w	800a1b2 <cal_table_dis+0x3a6>
	switch (g_acc_flag) {
 8009e60:	4bc9      	ldr	r3, [pc, #804]	; (800a188 <cal_table_dis+0x37c>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	f200 8349 	bhi.w	800a4fe <cal_table_dis+0x6f2>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <cal_table_dis+0x68>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	0800a4f9 	.word	0x0800a4f9
 8009e78:	08009e91 	.word	0x08009e91
 8009e7c:	08009ffb 	.word	0x08009ffb
 8009e80:	0800a129 	.word	0x0800a129
 8009e84:	0800a4f9 	.word	0x0800a4f9
 8009e88:	0800a155 	.word	0x0800a155
 8009e8c:	0800a18d 	.word	0x0800a18d
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
        acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e92:	ed93 7a00 	vldr	s14, [r3]
 8009e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e98:	edd3 7a00 	vldr	s15, [r3]
 8009e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ea0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009ea4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009eb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009eb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec0:	edc7 7a03 	vstr	s15, [r7, #12]
        dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec6:	ed93 7a00 	vldr	s14, [r3]
 8009eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ecc:	edd3 7a00 	vldr	s15, [r3]
 8009ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ed4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009ed8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ee4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ee8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009eec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef4:	edc7 7a02 	vstr	s15, [r7, #8]
        if (target->velocity >= input.count_velocity){
 8009ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009efa:	ed93 7a00 	vldr	s14, [r3]
 8009efe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0a:	db0a      	blt.n	8009f22 <cal_table_dis+0x116>
            target->velocity = input.count_velocity;
 8009f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f10:	601a      	str	r2, [r3, #0]
            target->acceleration = 0;
 8009f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	605a      	str	r2, [r3, #4]
            g_acc_flag=2;
 8009f1a:	4b9b      	ldr	r3, [pc, #620]	; (800a188 <cal_table_dis+0x37c>)
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	701a      	strb	r2, [r3, #0]
            target->velocity -= input.acceleration*(2*time_over);

            target->acceleration = -input.deceleration;
            g_acc_flag=3;
        }
		break;
 8009f20:	e2ed      	b.n	800a4fe <cal_table_dis+0x6f2>
        else if(input.displacement <= (acc_distance + dec_distance)){
 8009f22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009f26:	edd7 6a03 	vldr	s13, [r7, #12]
 8009f2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3a:	d900      	bls.n	8009f3e <cal_table_dis+0x132>
		break;
 8009f3c:	e2df      	b.n	800a4fe <cal_table_dis+0x6f2>
            time_over=(acc_distance + dec_distance - input.displacement)/target->velocity;
 8009f3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f54:	ed93 7a00 	vldr	s14, [r3]
 8009f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f5c:	edc7 7a01 	vstr	s15, [r7, #4]
            target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7f6 fb17 	bl	8000598 <__aeabi_f2d>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7f6 fb11 	bl	8000598 <__aeabi_f2d>
 8009f76:	f04f 0200 	mov.w	r2, #0
 8009f7a:	f04f 0300 	mov.w	r3, #0
 8009f7e:	f7f6 fb63 	bl	8000648 <__aeabi_dmul>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4690      	mov	r8, r2
 8009f88:	4699      	mov	r9, r3
 8009f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f92:	ee17 0a90 	vmov	r0, s15
 8009f96:	f7f6 faff 	bl	8000598 <__aeabi_f2d>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fb51 	bl	8000648 <__aeabi_dmul>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f993 	bl	80002d8 <__aeabi_dsub>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f7f6 fe1d 	bl	8000bf8 <__aeabi_d2f>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc2:	609a      	str	r2, [r3, #8]
            target->velocity -= input.acceleration*(2*time_over);
 8009fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc6:	ed93 7a00 	vldr	s14, [r3]
 8009fca:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8009fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe0:	edc3 7a00 	vstr	s15, [r3]
            target->acceleration = -input.deceleration;
 8009fe4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009fe8:	eef1 7a67 	vneg.f32	s15, s15
 8009fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fee:	edc3 7a01 	vstr	s15, [r3, #4]
            g_acc_flag=3;
 8009ff2:	4b65      	ldr	r3, [pc, #404]	; (800a188 <cal_table_dis+0x37c>)
 8009ff4:	2203      	movs	r2, #3
 8009ff6:	701a      	strb	r2, [r3, #0]
		break;
 8009ff8:	e281      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009ffa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009ffe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a002:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a006:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a00a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a00e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a012:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a016:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a01a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a01e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a026:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a02a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a02e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a032:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a036:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a03a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a03e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a042:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a046:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a04a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a04e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a056:	edc7 7a02 	vstr	s15, [r7, #8]
		if (input.displacement-target->displacement <= dec_distance) {
 800a05a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a060:	edd3 7a02 	vldr	s15, [r3, #8]
 800a064:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a068:	ed97 7a02 	vldr	s14, [r7, #8]
 800a06c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a074:	da00      	bge.n	800a078 <cal_table_dis+0x26c>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.deceleration;
			g_acc_flag=3;
		}
		break;
 800a076:	e242      	b.n	800a4fe <cal_table_dis+0x6f2>
			time_over=(target->displacement+dec_distance-input.displacement)/target->velocity;
 800a078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a07a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a07e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a082:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a08a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a08e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a090:	ed93 7a00 	vldr	s14, [r3]
 800a094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a098:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800a09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f6 fa79 	bl	8000598 <__aeabi_f2d>
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f6 fa73 	bl	8000598 <__aeabi_f2d>
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	f04f 0300 	mov.w	r3, #0
 800a0ba:	f7f6 fac5 	bl	8000648 <__aeabi_dmul>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4690      	mov	r8, r2
 800a0c4:	4699      	mov	r9, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f6 fa66 	bl	8000598 <__aeabi_f2d>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	f7f6 fab8 	bl	8000648 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 f8fa 	bl	80002d8 <__aeabi_dsub>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f7f6 fd84 	bl	8000bf8 <__aeabi_d2f>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f4:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800a0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f8:	ed93 7a00 	vldr	s14, [r3]
 800a0fc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a100:	edd7 7a01 	vldr	s15, [r7, #4]
 800a104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a10e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.deceleration;
 800a112:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a116:	eef1 7a67 	vneg.f32	s15, s15
 800a11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11c:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800a120:	4b19      	ldr	r3, [pc, #100]	; (800a188 <cal_table_dis+0x37c>)
 800a122:	2203      	movs	r2, #3
 800a124:	701a      	strb	r2, [r3, #0]
		break;
 800a126:	e1ea      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12a:	ed93 7a00 	vldr	s14, [r3]
 800a12e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13a:	d900      	bls.n	800a13e <cal_table_dis+0x332>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a13c:	e1df      	b.n	800a4fe <cal_table_dis+0x6f2>
			target->velocity = input.end_velocity;
 800a13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a142:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800a144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a14c:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <cal_table_dis+0x37c>)
 800a14e:	2204      	movs	r2, #4
 800a150:	701a      	strb	r2, [r3, #0]
		break;
 800a152:	e1d4      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 800a154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a156:	ed93 7a02 	vldr	s14, [r3, #8]
 800a15a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a15e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a166:	da00      	bge.n	800a16a <cal_table_dis+0x35e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a168:	e1c9      	b.n	800a4fe <cal_table_dis+0x6f2>
			target->acceleration = 0;
 800a16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <cal_table_dis+0x37c>)
 800a174:	2204      	movs	r2, #4
 800a176:	701a      	strb	r2, [r3, #0]
		break;
 800a178:	e1c1      	b.n	800a4fe <cal_table_dis+0x6f2>
 800a17a:	bf00      	nop
 800a17c:	20000258 	.word	0x20000258
 800a180:	2000025c 	.word	0x2000025c
 800a184:	20000250 	.word	0x20000250
 800a188:	20000810 	.word	0x20000810
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800a18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a18e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a192:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	da00      	bge.n	800a1a2 <cal_table_dis+0x396>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a1a0:	e1ad      	b.n	800a4fe <cal_table_dis+0x6f2>
			target->acceleration = 0;
 800a1a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1a4:	f04f 0200 	mov.w	r2, #0
 800a1a8:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a1aa:	4bcd      	ldr	r3, [pc, #820]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	701a      	strb	r2, [r3, #0]
		break;
 800a1b0:	e1a5      	b.n	800a4fe <cal_table_dis+0x6f2>
	}
}else{
	switch (g_acc_flag) {
 800a1b2:	4bcb      	ldr	r3, [pc, #812]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b06      	cmp	r3, #6
 800a1ba:	f200 81a0 	bhi.w	800a4fe <cal_table_dis+0x6f2>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <cal_table_dis+0x3b8>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a4fd 	.word	0x0800a4fd
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a34b 	.word	0x0800a34b
 800a1d0:	0800a471 	.word	0x0800a471
 800a1d4:	0800a49d 	.word	0x0800a49d
 800a1d8:	0800a4a5 	.word	0x0800a4a5
 800a1dc:	0800a4cb 	.word	0x0800a4cb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800a1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e2:	ed93 7a00 	vldr	s14, [r3]
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e8:	edd3 7a00 	vldr	s15, [r3]
 800a1ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1f0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a1f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a1f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a200:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a204:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a208:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a210:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a216:	ed93 7a00 	vldr	s14, [r3]
 800a21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a21c:	edd3 7a00 	vldr	s15, [r3]
 800a220:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a224:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a228:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a22c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a234:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a238:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a23c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a244:	edc7 7a02 	vstr	s15, [r7, #8]
			if (target->velocity <= input.count_velocity){
 800a248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a24a:	ed93 7a00 	vldr	s14, [r3]
 800a24e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	d80a      	bhi.n	800a272 <cal_table_dis+0x466>
				target->velocity = input.count_velocity;
 800a25c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a260:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800a262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800a26a:	4b9d      	ldr	r3, [pc, #628]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a26c:	2202      	movs	r2, #2
 800a26e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.deceleration;
				g_acc_flag=3;
			}
		break;
 800a270:	e145      	b.n	800a4fe <cal_table_dis+0x6f2>
			else if(-input.displacement <= (acc_distance + dec_distance)){
 800a272:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a276:	eeb1 7a67 	vneg.f32	s14, s15
 800a27a:	edd7 6a03 	vldr	s13, [r7, #12]
 800a27e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28e:	d900      	bls.n	800a292 <cal_table_dis+0x486>
		break;
 800a290:	e135      	b.n	800a4fe <cal_table_dis+0x6f2>
				time_over=( -acc_distance - dec_distance - input.displacement)/target->velocity;
 800a292:	edd7 7a03 	vldr	s15, [r7, #12]
 800a296:	eeb1 7a67 	vneg.f32	s14, s15
 800a29a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a29e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ac:	ed93 7a00 	vldr	s14, [r3]
 800a2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800a2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7f6 f96b 	bl	8000598 <__aeabi_f2d>
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	460d      	mov	r5, r1
 800a2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7f6 f965 	bl	8000598 <__aeabi_f2d>
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	f04f 0300 	mov.w	r3, #0
 800a2d6:	f7f6 f9b7 	bl	8000648 <__aeabi_dmul>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4690      	mov	r8, r2
 800a2e0:	4699      	mov	r9, r3
 800a2e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2ea:	ee17 0a90 	vmov	r0, s15
 800a2ee:	f7f6 f953 	bl	8000598 <__aeabi_f2d>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	f7f6 f9a5 	bl	8000648 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4620      	mov	r0, r4
 800a304:	4629      	mov	r1, r5
 800a306:	f7f5 ffe9 	bl	80002dc <__adddf3>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4610      	mov	r0, r2
 800a310:	4619      	mov	r1, r3
 800a312:	f7f6 fc71 	bl	8000bf8 <__aeabi_d2f>
 800a316:	4602      	mov	r2, r0
 800a318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800a31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31e:	ed93 7a00 	vldr	s14, [r3]
 800a322:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a326:	edd7 7a01 	vldr	s15, [r7, #4]
 800a32a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a32e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a338:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.deceleration;
 800a33c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a340:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800a342:	4b67      	ldr	r3, [pc, #412]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a344:	2203      	movs	r2, #3
 800a346:	701a      	strb	r2, [r3, #0]
		break;
 800a348:	e0d9      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800a34a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a34e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a352:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a356:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a35a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a35e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a362:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a366:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a36a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a36e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a376:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a37a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a37e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a382:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a386:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a38a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a38e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a392:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a396:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a39a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a39e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a3a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a6:	edc7 7a02 	vstr	s15, [r7, #8]
		if (-input.displacement+target->displacement <= dec_distance) {
 800a3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ac:	ed93 7a02 	vldr	s14, [r3, #8]
 800a3b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b8:	ed97 7a02 	vldr	s14, [r7, #8]
 800a3bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c4:	da00      	bge.n	800a3c8 <cal_table_dis+0x5bc>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.deceleration;
			g_acc_flag=3;
		}
		break;
 800a3c6:	e09a      	b.n	800a4fe <cal_table_dis+0x6f2>
			time_over=(target->displacement-dec_distance-input.displacement)/target->velocity;
 800a3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800a3ce:	edd7 7a02 	vldr	s15, [r7, #8]
 800a3d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a3da:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a3de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e0:	ed93 7a00 	vldr	s14, [r3]
 800a3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e8:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800a3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f6 f8d1 	bl	8000598 <__aeabi_f2d>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f6 f8cb 	bl	8000598 <__aeabi_f2d>
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	f7f6 f91d 	bl	8000648 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4690      	mov	r8, r2
 800a414:	4699      	mov	r9, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7f6 f8be 	bl	8000598 <__aeabi_f2d>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 f910 	bl	8000648 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff54 	bl	80002dc <__adddf3>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4610      	mov	r0, r2
 800a43a:	4619      	mov	r1, r3
 800a43c:	f7f6 fbdc 	bl	8000bf8 <__aeabi_d2f>
 800a440:	4602      	mov	r2, r0
 800a442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a444:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800a446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a448:	ed93 7a00 	vldr	s14, [r3]
 800a44c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a450:	edd7 7a01 	vldr	s15, [r7, #4]
 800a454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.deceleration;
 800a462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a466:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 800a468:	4b1d      	ldr	r3, [pc, #116]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a46a:	2203      	movs	r2, #3
 800a46c:	701a      	strb	r2, [r3, #0]
		break;
 800a46e:	e046      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 800a470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a472:	ed93 7a00 	vldr	s14, [r3]
 800a476:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a47a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a482:	da00      	bge.n	800a486 <cal_table_dis+0x67a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a484:	e03b      	b.n	800a4fe <cal_table_dis+0x6f2>
			target->velocity = input.end_velocity;
 800a486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800a48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a494:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a496:	2204      	movs	r2, #4
 800a498:	701a      	strb	r2, [r3, #0]
		break;
 800a49a:	e030      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 800a49c:	4b11      	ldr	r3, [pc, #68]	; (800a4e4 <cal_table_dis+0x6d8>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	701a      	strb	r2, [r3, #0]
		break;
 800a4a2:	e02c      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800a4a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a4aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b6:	d900      	bls.n	800a4ba <cal_table_dis+0x6ae>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a4b8:	e021      	b.n	800a4fe <cal_table_dis+0x6f2>
			target->acceleration = 0;
 800a4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a4c2:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <cal_table_dis+0x6d4>)
 800a4c4:	2204      	movs	r2, #4
 800a4c6:	701a      	strb	r2, [r3, #0]
		break;
 800a4c8:	e019      	b.n	800a4fe <cal_table_dis+0x6f2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 800a4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4cc:	ed93 7a02 	vldr	s14, [r3, #8]
 800a4d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4dc:	d904      	bls.n	800a4e8 <cal_table_dis+0x6dc>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a4de:	e00e      	b.n	800a4fe <cal_table_dis+0x6f2>
 800a4e0:	20000810 	.word	0x20000810
 800a4e4:	20000811 	.word	0x20000811
			target->acceleration = 0;
 800a4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ea:	f04f 0200 	mov.w	r2, #0
 800a4ee:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <cal_table_dis+0x700>)
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	701a      	strb	r2, [r3, #0]
		break;
 800a4f6:	e002      	b.n	800a4fe <cal_table_dis+0x6f2>
		break;
 800a4f8:	bf00      	nop
 800a4fa:	e000      	b.n	800a4fe <cal_table_dis+0x6f2>
		break;
 800a4fc:	bf00      	nop
	}

}

}
 800a4fe:	bf00      	nop
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 800a508:	b004      	add	sp, #16
 800a50a:	4770      	bx	lr
 800a50c:	20000810 	.word	0x20000810

0800a510 <cal_table_max>:



// 加速は常にMAX DUTYモード
void cal_table_max(TRAPEZOID input,TARGET *target){
 800a510:	b084      	sub	sp, #16
 800a512:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a51e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
float acc_distance;//初速度から現在の速度に達するまでに使った距離
float dec_distance;//現在の速度から終端速度になるのに必要なた距離
float velocity=(fusion_speedL+fusion_speedR)/2;
 800a522:	4bcc      	ldr	r3, [pc, #816]	; (800a854 <cal_table_max+0x344>)
 800a524:	ed93 7a00 	vldr	s14, [r3]
 800a528:	4bcb      	ldr	r3, [pc, #812]	; (800a858 <cal_table_max+0x348>)
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a532:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a53a:	edc7 7a05 	vstr	s15, [r7, #20]
float distance=(fusion_distanceL+fusion_distanceL)/2;
 800a53e:	4bc7      	ldr	r3, [pc, #796]	; (800a85c <cal_table_max+0x34c>)
 800a540:	edd3 7a00 	vldr	s15, [r3]
 800a544:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a548:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a54c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a550:	edc7 7a04 	vstr	s15, [r7, #16]
if (input.displacement>=0){
 800a554:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a560:	f2c0 8257 	blt.w	800aa12 <cal_table_max+0x502>
	switch (g_acc_flag) {
 800a564:	4bbe      	ldr	r3, [pc, #760]	; (800a860 <cal_table_max+0x350>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b06      	cmp	r3, #6
 800a56c:	f200 83f5 	bhi.w	800ad5a <cal_table_max+0x84a>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <cal_table_max+0x68>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800ad55 	.word	0x0800ad55
 800a57c:	0800a595 	.word	0x0800a595
 800a580:	0800a86d 	.word	0x0800a86d
 800a584:	0800a99b 	.word	0x0800a99b
 800a588:	0800ad55 	.word	0x0800ad55
 800a58c:	0800a9c7 	.word	0x0800a9c7
 800a590:	0800a9ed 	.word	0x0800a9ed
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		if(target->velocity <=3000){
 800a594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a596:	edd3 7a00 	vldr	s15, [r3]
 800a59a:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800a864 <cal_table_max+0x354>
 800a59e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	f200 80b5 	bhi.w	800a714 <cal_table_max+0x204>
        acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800a5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ac:	ed93 7a00 	vldr	s14, [r3]
 800a5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b2:	edd3 7a00 	vldr	s15, [r3]
 800a5b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5ba:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a5be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a5c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a5d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a5d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5da:	edc7 7a03 	vstr	s15, [r7, #12]
        dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e0:	ed93 7a00 	vldr	s14, [r3]
 800a5e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e6:	edd3 7a00 	vldr	s15, [r3]
 800a5ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a5f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a5f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a606:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a60a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60e:	edc7 7a02 	vstr	s15, [r7, #8]
        if (target->velocity >= input.count_velocity){
 800a612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a614:	ed93 7a00 	vldr	s14, [r3]
 800a618:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a61c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a624:	db0a      	blt.n	800a63c <cal_table_max+0x12c>
            target->velocity = input.count_velocity;
 800a626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62a:	601a      	str	r2, [r3, #0]
            target->acceleration = 0;
 800a62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	605a      	str	r2, [r3, #4]
            g_acc_flag=2;
 800a634:	4b8a      	ldr	r3, [pc, #552]	; (800a860 <cal_table_max+0x350>)
 800a636:	2202      	movs	r2, #2
 800a638:	701a      	strb	r2, [r3, #0]

				target->acceleration = -input.deceleration;
				g_acc_flag=3;
			}
		}
		break;
 800a63a:	e38e      	b.n	800ad5a <cal_table_max+0x84a>
        else if(input.displacement <= (acc_distance + dec_distance)){
 800a63c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a640:	edd7 6a03 	vldr	s13, [r7, #12]
 800a644:	edd7 7a02 	vldr	s15, [r7, #8]
 800a648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a654:	d900      	bls.n	800a658 <cal_table_max+0x148>
		break;
 800a656:	e380      	b.n	800ad5a <cal_table_max+0x84a>
            time_over=(acc_distance + dec_distance - input.displacement)/target->velocity;
 800a658:	ed97 7a03 	vldr	s14, [r7, #12]
 800a65c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a660:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a664:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a668:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a66e:	ed93 7a00 	vldr	s14, [r3]
 800a672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a676:	edc7 7a01 	vstr	s15, [r7, #4]
            target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800a67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f5 ff8a 	bl	8000598 <__aeabi_f2d>
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f5 ff84 	bl	8000598 <__aeabi_f2d>
 800a690:	f04f 0200 	mov.w	r2, #0
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	f7f5 ffd6 	bl	8000648 <__aeabi_dmul>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4690      	mov	r8, r2
 800a6a2:	4699      	mov	r9, r3
 800a6a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6ac:	ee17 0a90 	vmov	r0, s15
 800a6b0:	f7f5 ff72 	bl	8000598 <__aeabi_f2d>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f5 ffc4 	bl	8000648 <__aeabi_dmul>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 fe06 	bl	80002d8 <__aeabi_dsub>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f7f6 fa90 	bl	8000bf8 <__aeabi_d2f>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6dc:	609a      	str	r2, [r3, #8]
            target->velocity -= input.acceleration*(2*time_over);
 800a6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e0:	ed93 7a00 	vldr	s14, [r3]
 800a6e4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a6e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6fa:	edc3 7a00 	vstr	s15, [r3]
            target->acceleration = -input.deceleration;
 800a6fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a702:	eef1 7a67 	vneg.f32	s15, s15
 800a706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a708:	edc3 7a01 	vstr	s15, [r3, #4]
            g_acc_flag=3;
 800a70c:	4b54      	ldr	r3, [pc, #336]	; (800a860 <cal_table_max+0x350>)
 800a70e:	2203      	movs	r2, #3
 800a710:	701a      	strb	r2, [r3, #0]
		break;
 800a712:	e322      	b.n	800ad5a <cal_table_max+0x84a>
			acc_distance = distance;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	60fb      	str	r3, [r7, #12]
			dec_distance = (velocity*velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a718:	edd7 7a05 	vldr	s15, [r7, #20]
 800a71c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a720:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a724:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a72c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a730:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a734:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a738:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a73c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a740:	edc7 7a02 	vstr	s15, [r7, #8]
			target->displacement = distance;
 800a744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	609a      	str	r2, [r3, #8]
			target->velocity = velocity;
 800a74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	601a      	str	r2, [r3, #0]
			target->acceleration = 10000000;
 800a750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a752:	4a45      	ldr	r2, [pc, #276]	; (800a868 <cal_table_max+0x358>)
 800a754:	605a      	str	r2, [r3, #4]
			if (velocity >= input.count_velocity){
 800a756:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a75a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a75e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a766:	db0a      	blt.n	800a77e <cal_table_max+0x26e>
	            target->velocity = input.count_velocity;
 800a768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a76c:	601a      	str	r2, [r3, #0]
	            target->acceleration = 0;
 800a76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a770:	f04f 0200 	mov.w	r2, #0
 800a774:	605a      	str	r2, [r3, #4]
	            g_acc_flag=2;
 800a776:	4b3a      	ldr	r3, [pc, #232]	; (800a860 <cal_table_max+0x350>)
 800a778:	2202      	movs	r2, #2
 800a77a:	701a      	strb	r2, [r3, #0]
		break;
 800a77c:	e2ed      	b.n	800ad5a <cal_table_max+0x84a>
			else if(input.displacement <= (acc_distance + dec_distance)){
 800a77e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a782:	edd7 6a03 	vldr	s13, [r7, #12]
 800a786:	edd7 7a02 	vldr	s15, [r7, #8]
 800a78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a78e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a796:	d900      	bls.n	800a79a <cal_table_max+0x28a>
		break;
 800a798:	e2df      	b.n	800ad5a <cal_table_max+0x84a>
				time_over=(acc_distance + dec_distance - input.displacement)/velocity;
 800a79a:	ed97 7a03 	vldr	s14, [r7, #12]
 800a79e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a7a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a7aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a7ae:	ed97 7a05 	vldr	s14, [r7, #20]
 800a7b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7b6:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.deceleration*(2*time_over);
 800a7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f5 feea 	bl	8000598 <__aeabi_f2d>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f5 fee4 	bl	8000598 <__aeabi_f2d>
 800a7d0:	f04f 0200 	mov.w	r2, #0
 800a7d4:	f04f 0300 	mov.w	r3, #0
 800a7d8:	f7f5 ff36 	bl	8000648 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4690      	mov	r8, r2
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a7ec:	ee17 0a90 	vmov	r0, s15
 800a7f0:	f7f5 fed2 	bl	8000598 <__aeabi_f2d>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f5 ff24 	bl	8000648 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f5 fd66 	bl	80002d8 <__aeabi_dsub>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4610      	mov	r0, r2
 800a812:	4619      	mov	r1, r3
 800a814:	f7f6 f9f0 	bl	8000bf8 <__aeabi_d2f>
 800a818:	4602      	mov	r2, r0
 800a81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a81c:	609a      	str	r2, [r3, #8]
				target->velocity -= input.deceleration*(2*time_over);
 800a81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a820:	ed93 7a00 	vldr	s14, [r3]
 800a824:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a828:	edd7 7a01 	vldr	s15, [r7, #4]
 800a82c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a834:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a83a:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.deceleration;
 800a83e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a842:	eef1 7a67 	vneg.f32	s15, s15
 800a846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a848:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800a84c:	4b04      	ldr	r3, [pc, #16]	; (800a860 <cal_table_max+0x350>)
 800a84e:	2203      	movs	r2, #3
 800a850:	701a      	strb	r2, [r3, #0]
		break;
 800a852:	e282      	b.n	800ad5a <cal_table_max+0x84a>
 800a854:	20000258 	.word	0x20000258
 800a858:	2000025c 	.word	0x2000025c
 800a85c:	20000250 	.word	0x20000250
 800a860:	20000810 	.word	0x20000810
 800a864:	453b8000 	.word	0x453b8000
 800a868:	4b189680 	.word	0x4b189680
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800a86c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a870:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a878:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800a87c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a884:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a888:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a88c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a890:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a898:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800a89c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a8a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8a8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a8b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c8:	edc7 7a02 	vstr	s15, [r7, #8]
		if (input.displacement-target->displacement <= dec_distance) {
 800a8cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a8d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8da:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e6:	da00      	bge.n	800a8ea <cal_table_max+0x3da>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.deceleration;
			g_acc_flag=3;
		}
		break;
 800a8e8:	e237      	b.n	800ad5a <cal_table_max+0x84a>
			time_over=(target->displacement+dec_distance-input.displacement)/target->velocity;
 800a8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ec:	ed93 7a02 	vldr	s14, [r3, #8]
 800a8f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a8fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a902:	ed93 7a00 	vldr	s14, [r3]
 800a906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a90a:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	4618      	mov	r0, r3
 800a914:	f7f5 fe40 	bl	8000598 <__aeabi_f2d>
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91e:	4618      	mov	r0, r3
 800a920:	f7f5 fe3a 	bl	8000598 <__aeabi_f2d>
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	f7f5 fe8c 	bl	8000648 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4690      	mov	r8, r2
 800a936:	4699      	mov	r9, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7f5 fe2d 	bl	8000598 <__aeabi_f2d>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4640      	mov	r0, r8
 800a944:	4649      	mov	r1, r9
 800a946:	f7f5 fe7f 	bl	8000648 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f5 fcc1 	bl	80002d8 <__aeabi_dsub>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4610      	mov	r0, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	f7f6 f94b 	bl	8000bf8 <__aeabi_d2f>
 800a962:	4602      	mov	r2, r0
 800a964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a966:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800a968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a96a:	ed93 7a00 	vldr	s14, [r3]
 800a96e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a972:	edd7 7a01 	vldr	s15, [r7, #4]
 800a976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a97a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a980:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.deceleration;
 800a984:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a988:	eef1 7a67 	vneg.f32	s15, s15
 800a98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98e:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800a992:	4bcf      	ldr	r3, [pc, #828]	; (800acd0 <cal_table_max+0x7c0>)
 800a994:	2203      	movs	r2, #3
 800a996:	701a      	strb	r2, [r3, #0]
		break;
 800a998:	e1df      	b.n	800ad5a <cal_table_max+0x84a>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800a99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99c:	ed93 7a00 	vldr	s14, [r3]
 800a9a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a9a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ac:	d900      	bls.n	800a9b0 <cal_table_max+0x4a0>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a9ae:	e1d4      	b.n	800ad5a <cal_table_max+0x84a>
			target->velocity = input.end_velocity;
 800a9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b4:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800a9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a9be:	4bc4      	ldr	r3, [pc, #784]	; (800acd0 <cal_table_max+0x7c0>)
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	701a      	strb	r2, [r3, #0]
		break;
 800a9c4:	e1c9      	b.n	800ad5a <cal_table_max+0x84a>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 800a9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c8:	ed93 7a02 	vldr	s14, [r3, #8]
 800a9cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a9d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d8:	da00      	bge.n	800a9dc <cal_table_max+0x4cc>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800a9da:	e1be      	b.n	800ad5a <cal_table_max+0x84a>
			target->acceleration = 0;
 800a9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800a9e4:	4bba      	ldr	r3, [pc, #744]	; (800acd0 <cal_table_max+0x7c0>)
 800a9e6:	2204      	movs	r2, #4
 800a9e8:	701a      	strb	r2, [r3, #0]
		break;
 800a9ea:	e1b6      	b.n	800ad5a <cal_table_max+0x84a>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800a9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ee:	ed93 7a02 	vldr	s14, [r3, #8]
 800a9f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a9f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fe:	da00      	bge.n	800aa02 <cal_table_max+0x4f2>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800aa00:	e1ab      	b.n	800ad5a <cal_table_max+0x84a>
			target->acceleration = 0;
 800aa02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa04:	f04f 0200 	mov.w	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800aa0a:	4bb1      	ldr	r3, [pc, #708]	; (800acd0 <cal_table_max+0x7c0>)
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	701a      	strb	r2, [r3, #0]
		break;
 800aa10:	e1a3      	b.n	800ad5a <cal_table_max+0x84a>
	}
}else{
	switch (g_acc_flag) {
 800aa12:	4baf      	ldr	r3, [pc, #700]	; (800acd0 <cal_table_max+0x7c0>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	f200 819e 	bhi.w	800ad5a <cal_table_max+0x84a>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <cal_table_max+0x514>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800ad59 	.word	0x0800ad59
 800aa28:	0800aa41 	.word	0x0800aa41
 800aa2c:	0800abab 	.word	0x0800abab
 800aa30:	0800acd5 	.word	0x0800acd5
 800aa34:	0800ad01 	.word	0x0800ad01
 800aa38:	0800ad09 	.word	0x0800ad09
 800aa3c:	0800ad2f 	.word	0x0800ad2f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800aa40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa42:	ed93 7a00 	vldr	s14, [r3]
 800aa46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa48:	edd3 7a00 	vldr	s15, [r3]
 800aa4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa50:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800aa54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aa58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800aa6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa70:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800aa74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa76:	ed93 7a00 	vldr	s14, [r3]
 800aa7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aa88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800aa8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa9c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800aaa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa4:	edc7 7a02 	vstr	s15, [r7, #8]
			if (target->velocity <= input.count_velocity){
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaaa:	ed93 7a00 	vldr	s14, [r3]
 800aaae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800aab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaba:	d80a      	bhi.n	800aad2 <cal_table_max+0x5c2>
				target->velocity = input.count_velocity;
 800aabc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac0:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800aac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac4:	f04f 0200 	mov.w	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800aaca:	4b81      	ldr	r3, [pc, #516]	; (800acd0 <cal_table_max+0x7c0>)
 800aacc:	2202      	movs	r2, #2
 800aace:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.deceleration;
				g_acc_flag=3;
			}
		break;
 800aad0:	e143      	b.n	800ad5a <cal_table_max+0x84a>
			else if(-input.displacement <= (acc_distance + dec_distance)){
 800aad2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aad6:	eeb1 7a67 	vneg.f32	s14, s15
 800aada:	edd7 6a03 	vldr	s13, [r7, #12]
 800aade:	edd7 7a02 	vldr	s15, [r7, #8]
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaee:	d900      	bls.n	800aaf2 <cal_table_max+0x5e2>
		break;
 800aaf0:	e133      	b.n	800ad5a <cal_table_max+0x84a>
				time_over=( -acc_distance - dec_distance - input.displacement)/target->velocity;
 800aaf2:	edd7 7a03 	vldr	s15, [r7, #12]
 800aaf6:	eeb1 7a67 	vneg.f32	s14, s15
 800aafa:	edd7 7a02 	vldr	s15, [r7, #8]
 800aafe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab06:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ab0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab0c:	ed93 7a00 	vldr	s14, [r3]
 800ab10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab14:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800ab18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7f5 fd3b 	bl	8000598 <__aeabi_f2d>
 800ab22:	4604      	mov	r4, r0
 800ab24:	460d      	mov	r5, r1
 800ab26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7f5 fd35 	bl	8000598 <__aeabi_f2d>
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	f7f5 fd87 	bl	8000648 <__aeabi_dmul>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4690      	mov	r8, r2
 800ab40:	4699      	mov	r9, r3
 800ab42:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab4a:	ee17 0a90 	vmov	r0, s15
 800ab4e:	f7f5 fd23 	bl	8000598 <__aeabi_f2d>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4640      	mov	r0, r8
 800ab58:	4649      	mov	r1, r9
 800ab5a:	f7f5 fd75 	bl	8000648 <__aeabi_dmul>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4620      	mov	r0, r4
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7f5 fbb9 	bl	80002dc <__adddf3>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	f7f6 f841 	bl	8000bf8 <__aeabi_d2f>
 800ab76:	4602      	mov	r2, r0
 800ab78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800ab7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7e:	ed93 7a00 	vldr	s14, [r3]
 800ab82:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800ab86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab98:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.deceleration;
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aba0:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 800aba2:	4b4b      	ldr	r3, [pc, #300]	; (800acd0 <cal_table_max+0x7c0>)
 800aba4:	2203      	movs	r2, #3
 800aba6:	701a      	strb	r2, [r3, #0]
		break;
 800aba8:	e0d7      	b.n	800ad5a <cal_table_max+0x84a>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800abaa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800abae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800abb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800abba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800abbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800abd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd6:	edc7 7a03 	vstr	s15, [r7, #12]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800abda:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800abde:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800abe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800abee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abf6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ac02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac06:	edc7 7a02 	vstr	s15, [r7, #8]
		if (-input.displacement+target->displacement <= dec_distance) {
 800ac0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ac14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac18:	ed97 7a02 	vldr	s14, [r7, #8]
 800ac1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac24:	da00      	bge.n	800ac28 <cal_table_max+0x718>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.deceleration;
			g_acc_flag=3;
		}
		break;
 800ac26:	e098      	b.n	800ad5a <cal_table_max+0x84a>
			time_over=(target->displacement-dec_distance-input.displacement)/target->velocity;
 800ac28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac2a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ac32:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ac3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ac3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac40:	ed93 7a00 	vldr	s14, [r3]
 800ac44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac48:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800ac4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7f5 fca1 	bl	8000598 <__aeabi_f2d>
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7f5 fc9b 	bl	8000598 <__aeabi_f2d>
 800ac62:	f04f 0200 	mov.w	r2, #0
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	f7f5 fced 	bl	8000648 <__aeabi_dmul>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4690      	mov	r8, r2
 800ac74:	4699      	mov	r9, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7f5 fc8e 	bl	8000598 <__aeabi_f2d>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4640      	mov	r0, r8
 800ac82:	4649      	mov	r1, r9
 800ac84:	f7f5 fce0 	bl	8000648 <__aeabi_dmul>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7f5 fb24 	bl	80002dc <__adddf3>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f7f5 ffac 	bl	8000bf8 <__aeabi_d2f>
 800aca0:	4602      	mov	r2, r0
 800aca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca4:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 800aca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca8:	ed93 7a00 	vldr	s14, [r3]
 800acac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800acb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800acb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acbe:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.deceleration;
 800acc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 800acc8:	4b01      	ldr	r3, [pc, #4]	; (800acd0 <cal_table_max+0x7c0>)
 800acca:	2203      	movs	r2, #3
 800accc:	701a      	strb	r2, [r3, #0]
		break;
 800acce:	e044      	b.n	800ad5a <cal_table_max+0x84a>
 800acd0:	20000810 	.word	0x20000810
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 800acd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd6:	ed93 7a00 	vldr	s14, [r3]
 800acda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800acde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	da00      	bge.n	800acea <cal_table_max+0x7da>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800ace8:	e037      	b.n	800ad5a <cal_table_max+0x84a>
			target->velocity = input.end_velocity;
 800acea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acee:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800acf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800acf8:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <cal_table_max+0x858>)
 800acfa:	2204      	movs	r2, #4
 800acfc:	701a      	strb	r2, [r3, #0]
		break;
 800acfe:	e02c      	b.n	800ad5a <cal_table_max+0x84a>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 800ad00:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <cal_table_max+0x85c>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
		break;
 800ad06:	e028      	b.n	800ad5a <cal_table_max+0x84a>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800ad08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1a:	d900      	bls.n	800ad1e <cal_table_max+0x80e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800ad1c:	e01d      	b.n	800ad5a <cal_table_max+0x84a>
			target->acceleration = 0;
 800ad1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad20:	f04f 0200 	mov.w	r2, #0
 800ad24:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800ad26:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <cal_table_max+0x858>)
 800ad28:	2204      	movs	r2, #4
 800ad2a:	701a      	strb	r2, [r3, #0]
		break;
 800ad2c:	e015      	b.n	800ad5a <cal_table_max+0x84a>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 800ad2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad30:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad40:	d900      	bls.n	800ad44 <cal_table_max+0x834>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800ad42:	e00a      	b.n	800ad5a <cal_table_max+0x84a>
			target->acceleration = 0;
 800ad44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800ad4c:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <cal_table_max+0x858>)
 800ad4e:	2204      	movs	r2, #4
 800ad50:	701a      	strb	r2, [r3, #0]
		break;
 800ad52:	e002      	b.n	800ad5a <cal_table_max+0x84a>
		break;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <cal_table_max+0x84a>
		break;
 800ad58:	bf00      	nop
	}

}

}
 800ad5a:	bf00      	nop
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 800ad64:	b004      	add	sp, #16
 800ad66:	4770      	bx	lr
 800ad68:	20000810 	.word	0x20000810
 800ad6c:	20000811 	.word	0x20000811

0800ad70 <cal_mollifier_table>:




void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 800ad70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ad74:	b088      	sub	sp, #32
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	eef0 6a40 	vmov.f32	s13, s0
 800ad7c:	eeb0 7a60 	vmov.f32	s14, s1
 800ad80:	eef0 7a41 	vmov.f32	s15, s2
 800ad84:	6038      	str	r0, [r7, #0]
 800ad86:	edc7 6a01 	vstr	s13, [r7, #4]
 800ad8a:	ed87 7a02 	vstr	s14, [r7, #8]
 800ad8e:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 800ad92:	4bcb      	ldr	r3, [pc, #812]	; (800b0c0 <cal_mollifier_table+0x350>)
 800ad94:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 800ad96:	4bcb      	ldr	r3, [pc, #812]	; (800b0c4 <cal_mollifier_table+0x354>)
 800ad98:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 800ad9a:	4bcb      	ldr	r3, [pc, #812]	; (800b0c8 <cal_mollifier_table+0x358>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f5 fbfa 	bl	8000598 <__aeabi_f2d>
 800ada4:	a3be      	add	r3, pc, #760	; (adr r3, 800b0a0 <cal_mollifier_table+0x330>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa97 	bl	80002dc <__adddf3>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4610      	mov	r0, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	f7f5 ff1f 	bl	8000bf8 <__aeabi_d2f>
 800adba:	4603      	mov	r3, r0
 800adbc:	4ac2      	ldr	r2, [pc, #776]	; (800b0c8 <cal_mollifier_table+0x358>)
 800adbe:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 800adc0:	edd7 7a01 	vldr	s15, [r7, #4]
 800adc4:	eef0 7ae7 	vabs.f32	s15, s15
 800adc8:	ee17 0a90 	vmov	r0, s15
 800adcc:	f7f5 fbe4 	bl	8000598 <__aeabi_f2d>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	f7f5 fa82 	bl	80002dc <__adddf3>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4610      	mov	r0, r2
 800adde:	4619      	mov	r1, r3
 800ade0:	a3b1      	add	r3, pc, #708	; (adr r3, 800b0a8 <cal_mollifier_table+0x338>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7f5 fd59 	bl	800089c <__aeabi_ddiv>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4610      	mov	r0, r2
 800adf0:	4619      	mov	r1, r3
 800adf2:	a3af      	add	r3, pc, #700	; (adr r3, 800b0b0 <cal_mollifier_table+0x340>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f7f5 fc26 	bl	8000648 <__aeabi_dmul>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4614      	mov	r4, r2
 800ae02:	461d      	mov	r5, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f5 fbc6 	bl	8000598 <__aeabi_f2d>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fd42 	bl	800089c <__aeabi_ddiv>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f7f5 feea 	bl	8000bf8 <__aeabi_d2f>
 800ae24:	4603      	mov	r3, r0
 800ae26:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 800ae28:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae2c:	eef1 7a67 	vneg.f32	s15, s15
 800ae30:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ae38:	4ba3      	ldr	r3, [pc, #652]	; (800b0c8 <cal_mollifier_table+0x358>)
 800ae3a:	edd3 7a00 	vldr	s15, [r3]
 800ae3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae46:	f140 81c2 	bpl.w	800b1ce <cal_mollifier_table+0x45e>
 800ae4a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ae56:	4b9c      	ldr	r3, [pc, #624]	; (800b0c8 <cal_mollifier_table+0x358>)
 800ae58:	edd3 7a00 	vldr	s15, [r3]
 800ae5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae64:	f340 81b3 	ble.w	800b1ce <cal_mollifier_table+0x45e>
			old_velocity=target->velocity;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 800ae6e:	4b96      	ldr	r3, [pc, #600]	; (800b0c8 <cal_mollifier_table+0x358>)
 800ae70:	edd3 7a00 	vldr	s15, [r3]
 800ae74:	ed97 7a01 	vldr	s14, [r7, #4]
 800ae78:	eeb0 1a47 	vmov.f32	s2, s14
 800ae7c:	edd7 0a05 	vldr	s1, [r7, #20]
 800ae80:	eeb0 0a67 	vmov.f32	s0, s15
 800ae84:	f000 f9cc 	bl	800b220 <cal_mollifier_velocity>
 800ae88:	eef0 7a40 	vmov.f32	s15, s0
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	edc3 7a00 	vstr	s15, [r3]
			if(target->velocity >=1950){
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	edd3 7a00 	vldr	s15, [r3]
 800ae98:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800b0cc <cal_mollifier_table+0x35c>
 800ae9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea4:	db02      	blt.n	800aeac <cal_mollifier_table+0x13c>
				target->velocity=1950;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	4a89      	ldr	r2, [pc, #548]	; (800b0d0 <cal_mollifier_table+0x360>)
 800aeaa:	601a      	str	r2, [r3, #0]
			}
			if(target->velocity <=-1950){
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	edd3 7a00 	vldr	s15, [r3]
 800aeb2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b0d4 <cal_mollifier_table+0x364>
 800aeb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aebe:	d802      	bhi.n	800aec6 <cal_mollifier_table+0x156>
				target->velocity=-1950;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	4a85      	ldr	r2, [pc, #532]	; (800b0d8 <cal_mollifier_table+0x368>)
 800aec4:	601a      	str	r2, [r3, #0]
			}

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800aec6:	4b80      	ldr	r3, [pc, #512]	; (800b0c8 <cal_mollifier_table+0x358>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f5 fb64 	bl	8000598 <__aeabi_f2d>
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	edd7 7a05 	vldr	s15, [r7, #20]
 800aed8:	eef1 7a67 	vneg.f32	s15, s15
 800aedc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aee0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aee4:	ee16 0a90 	vmov	r0, s13
 800aee8:	f7f5 fb56 	bl	8000598 <__aeabi_f2d>
 800aeec:	a372      	add	r3, pc, #456	; (adr r3, 800b0b8 <cal_mollifier_table+0x348>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 fcd3 	bl	800089c <__aeabi_ddiv>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4690      	mov	r8, r2
 800aefc:	4699      	mov	r9, r3
 800aefe:	69f8      	ldr	r0, [r7, #28]
 800af00:	f7f5 fb4a 	bl	8000598 <__aeabi_f2d>
 800af04:	a366      	add	r3, pc, #408	; (adr r3, 800b0a0 <cal_mollifier_table+0x330>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 fb9d 	bl	8000648 <__aeabi_dmul>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4640      	mov	r0, r8
 800af14:	4649      	mov	r1, r9
 800af16:	f7f5 f9e1 	bl	80002dc <__adddf3>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	f7f5 fe03 	bl	8000b2c <__aeabi_dcmplt>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d027      	beq.n	800af7c <cal_mollifier_table+0x20c>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 800af2c:	edd7 7a05 	vldr	s15, [r7, #20]
 800af30:	eef1 7a67 	vneg.f32	s15, s15
 800af34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800af3c:	ee16 0a90 	vmov	r0, s13
 800af40:	f7f5 fb2a 	bl	8000598 <__aeabi_f2d>
 800af44:	a35c      	add	r3, pc, #368	; (adr r3, 800b0b8 <cal_mollifier_table+0x348>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f7f5 fca7 	bl	800089c <__aeabi_ddiv>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4610      	mov	r0, r2
 800af54:	4619      	mov	r1, r3
 800af56:	f7f5 fe4f 	bl	8000bf8 <__aeabi_d2f>
 800af5a:	4603      	mov	r3, r0
 800af5c:	edd7 7a01 	vldr	s15, [r7, #4]
 800af60:	eeb0 1a67 	vmov.f32	s2, s15
 800af64:	edd7 0a05 	vldr	s1, [r7, #20]
 800af68:	ee00 3a10 	vmov	s0, r3
 800af6c:	f000 f9b8 	bl	800b2e0 <cal_mollifier_acceleration>
 800af70:	eef0 7a40 	vmov.f32	s15, s0
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800af7a:	e13d      	b.n	800b1f8 <cal_mollifier_table+0x488>
			}else if(mollifier_timer<0){
 800af7c:	4b52      	ldr	r3, [pc, #328]	; (800b0c8 <cal_mollifier_table+0x358>)
 800af7e:	edd3 7a00 	vldr	s15, [r3]
 800af82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8a:	d52b      	bpl.n	800afe4 <cal_mollifier_table+0x274>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 800af8c:	4b4e      	ldr	r3, [pc, #312]	; (800b0c8 <cal_mollifier_table+0x358>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f7f5 fb01 	bl	8000598 <__aeabi_f2d>
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	69f8      	ldr	r0, [r7, #28]
 800af9c:	f7f5 fafc 	bl	8000598 <__aeabi_f2d>
 800afa0:	a33f      	add	r3, pc, #252	; (adr r3, 800b0a0 <cal_mollifier_table+0x330>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 fb4f 	bl	8000648 <__aeabi_dmul>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 f991 	bl	80002d8 <__aeabi_dsub>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4610      	mov	r0, r2
 800afbc:	4619      	mov	r1, r3
 800afbe:	f7f5 fe1b 	bl	8000bf8 <__aeabi_d2f>
 800afc2:	4603      	mov	r3, r0
 800afc4:	edd7 7a01 	vldr	s15, [r7, #4]
 800afc8:	eeb0 1a67 	vmov.f32	s2, s15
 800afcc:	edd7 0a05 	vldr	s1, [r7, #20]
 800afd0:	ee00 3a10 	vmov	s0, r3
 800afd4:	f000 f984 	bl	800b2e0 <cal_mollifier_acceleration>
 800afd8:	eef0 7a40 	vmov.f32	s15, s0
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800afe2:	e109      	b.n	800b1f8 <cal_mollifier_table+0x488>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 800afe4:	4b38      	ldr	r3, [pc, #224]	; (800b0c8 <cal_mollifier_table+0x358>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f5 fad5 	bl	8000598 <__aeabi_f2d>
 800afee:	4604      	mov	r4, r0
 800aff0:	460d      	mov	r5, r1
 800aff2:	edd7 7a05 	vldr	s15, [r7, #20]
 800aff6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800affa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800affe:	ee16 0a90 	vmov	r0, s13
 800b002:	f7f5 fac9 	bl	8000598 <__aeabi_f2d>
 800b006:	a32c      	add	r3, pc, #176	; (adr r3, 800b0b8 <cal_mollifier_table+0x348>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 fc46 	bl	800089c <__aeabi_ddiv>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4690      	mov	r8, r2
 800b016:	4699      	mov	r9, r3
 800b018:	69b8      	ldr	r0, [r7, #24]
 800b01a:	f7f5 fabd 	bl	8000598 <__aeabi_f2d>
 800b01e:	a320      	add	r3, pc, #128	; (adr r3, 800b0a0 <cal_mollifier_table+0x330>)
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f7f5 fb10 	bl	8000648 <__aeabi_dmul>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4640      	mov	r0, r8
 800b02e:	4649      	mov	r1, r9
 800b030:	f7f5 f954 	bl	80002dc <__adddf3>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4620      	mov	r0, r4
 800b03a:	4629      	mov	r1, r5
 800b03c:	f7f5 fd76 	bl	8000b2c <__aeabi_dcmplt>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d04a      	beq.n	800b0dc <cal_mollifier_table+0x36c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 800b046:	4b20      	ldr	r3, [pc, #128]	; (800b0c8 <cal_mollifier_table+0x358>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7f5 faa4 	bl	8000598 <__aeabi_f2d>
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	69f8      	ldr	r0, [r7, #28]
 800b056:	f7f5 fa9f 	bl	8000598 <__aeabi_f2d>
 800b05a:	a311      	add	r3, pc, #68	; (adr r3, 800b0a0 <cal_mollifier_table+0x330>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 faf2 	bl	8000648 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4620      	mov	r0, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7f5 f934 	bl	80002d8 <__aeabi_dsub>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4610      	mov	r0, r2
 800b076:	4619      	mov	r1, r3
 800b078:	f7f5 fdbe 	bl	8000bf8 <__aeabi_d2f>
 800b07c:	4603      	mov	r3, r0
 800b07e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b082:	eeb0 1a67 	vmov.f32	s2, s15
 800b086:	edd7 0a05 	vldr	s1, [r7, #20]
 800b08a:	ee00 3a10 	vmov	s0, r3
 800b08e:	f000 f927 	bl	800b2e0 <cal_mollifier_acceleration>
 800b092:	eef0 7a40 	vmov.f32	s15, s0
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800b09c:	e0ac      	b.n	800b1f8 <cal_mollifier_table+0x488>
 800b09e:	bf00      	nop
 800b0a0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b0a4:	3f50624d 	.word	0x3f50624d
 800b0a8:	f9db22d1 	.word	0xf9db22d1
 800b0ac:	3fdc6a7e 	.word	0x3fdc6a7e
 800b0b0:	362cef38 	.word	0x362cef38
 800b0b4:	3fd78b56 	.word	0x3fd78b56
 800b0b8:	04189375 	.word	0x04189375
 800b0bc:	3ff50e56 	.word	0x3ff50e56
 800b0c0:	41400000 	.word	0x41400000
 800b0c4:	c1200000 	.word	0xc1200000
 800b0c8:	2000080c 	.word	0x2000080c
 800b0cc:	44f3c000 	.word	0x44f3c000
 800b0d0:	44f3c000 	.word	0x44f3c000
 800b0d4:	c4f3c000 	.word	0xc4f3c000
 800b0d8:	c4f3c000 	.word	0xc4f3c000
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 800b0dc:	4b4e      	ldr	r3, [pc, #312]	; (800b218 <cal_mollifier_table+0x4a8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fa59 	bl	8000598 <__aeabi_f2d>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800b0ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b0f6:	ee16 0a90 	vmov	r0, s13
 800b0fa:	f7f5 fa4d 	bl	8000598 <__aeabi_f2d>
 800b0fe:	4680      	mov	r8, r0
 800b100:	4689      	mov	r9, r1
 800b102:	69b8      	ldr	r0, [r7, #24]
 800b104:	f7f5 fa48 	bl	8000598 <__aeabi_f2d>
 800b108:	a33f      	add	r3, pc, #252	; (adr r3, 800b208 <cal_mollifier_table+0x498>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 fa9b 	bl	8000648 <__aeabi_dmul>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4640      	mov	r0, r8
 800b118:	4649      	mov	r1, r9
 800b11a:	f7f5 f8df 	bl	80002dc <__adddf3>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4620      	mov	r0, r4
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 fd01 	bl	8000b2c <__aeabi_dcmplt>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d028      	beq.n	800b182 <cal_mollifier_table+0x412>
				time_delay=0;
 800b130:	f04f 0300 	mov.w	r3, #0
 800b134:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 800b136:	edd7 7a05 	vldr	s15, [r7, #20]
 800b13a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b13e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b142:	ee16 0a90 	vmov	r0, s13
 800b146:	f7f5 fa27 	bl	8000598 <__aeabi_f2d>
 800b14a:	a331      	add	r3, pc, #196	; (adr r3, 800b210 <cal_mollifier_table+0x4a0>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f7f5 fba4 	bl	800089c <__aeabi_ddiv>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4610      	mov	r0, r2
 800b15a:	4619      	mov	r1, r3
 800b15c:	f7f5 fd4c 	bl	8000bf8 <__aeabi_d2f>
 800b160:	4603      	mov	r3, r0
 800b162:	edd7 7a01 	vldr	s15, [r7, #4]
 800b166:	eeb0 1a67 	vmov.f32	s2, s15
 800b16a:	edd7 0a05 	vldr	s1, [r7, #20]
 800b16e:	ee00 3a10 	vmov	s0, r3
 800b172:	f000 f8b5 	bl	800b2e0 <cal_mollifier_acceleration>
 800b176:	eef0 7a40 	vmov.f32	s15, s0
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800b180:	e03a      	b.n	800b1f8 <cal_mollifier_table+0x488>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 800b182:	edd7 7a05 	vldr	s15, [r7, #20]
 800b186:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b18a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b18e:	ee16 0a90 	vmov	r0, s13
 800b192:	f7f5 fa01 	bl	8000598 <__aeabi_f2d>
 800b196:	a31c      	add	r3, pc, #112	; (adr r3, 800b208 <cal_mollifier_table+0x498>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 f89c 	bl	80002d8 <__aeabi_dsub>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f7f5 fd26 	bl	8000bf8 <__aeabi_d2f>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1b2:	eeb0 1a67 	vmov.f32	s2, s15
 800b1b6:	edd7 0a05 	vldr	s1, [r7, #20]
 800b1ba:	ee00 3a10 	vmov	s0, r3
 800b1be:	f000 f88f 	bl	800b2e0 <cal_mollifier_acceleration>
 800b1c2:	eef0 7a40 	vmov.f32	s15, s0
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800b1cc:	e014      	b.n	800b1f8 <cal_mollifier_table+0x488>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	f04f 0200 	mov.w	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	edd3 7a00 	vldr	s15, [r3]
 800b1e2:	ed97 7a04 	vldr	s14, [r7, #16]
 800b1e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <cal_mollifier_table+0x4ac>)
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	701a      	strb	r2, [r3, #0]

		}

}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	3720      	adds	r7, #32
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	d2f1a9fc 	.word	0xd2f1a9fc
 800b20c:	3f50624d 	.word	0x3f50624d
 800b210:	04189375 	.word	0x04189375
 800b214:	3ff50e56 	.word	0x3ff50e56
 800b218:	2000080c 	.word	0x2000080c
 800b21c:	20000810 	.word	0x20000810

0800b220 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 800b220:	b5b0      	push	{r4, r5, r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	ed87 0a03 	vstr	s0, [r7, #12]
 800b22a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b22e:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800b232:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b236:	edd7 7a02 	vldr	s15, [r7, #8]
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b246:	ee17 0a90 	vmov	r0, s15
 800b24a:	f7f5 f9a5 	bl	8000598 <__aeabi_f2d>
 800b24e:	a322      	add	r3, pc, #136	; (adr r3, 800b2d8 <cal_mollifier_velocity+0xb8>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f5 fb22 	bl	800089c <__aeabi_ddiv>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4614      	mov	r4, r2
 800b25e:	461d      	mov	r5, r3
 800b260:	edd7 7a02 	vldr	s15, [r7, #8]
 800b264:	eeb1 7a67 	vneg.f32	s14, s15
 800b268:	edd7 7a02 	vldr	s15, [r7, #8]
 800b26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b270:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b278:	edd7 7a02 	vldr	s15, [r7, #8]
 800b27c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b280:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800b284:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800b288:	edd7 7a03 	vldr	s15, [r7, #12]
 800b28c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b290:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b294:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b298:	ee16 0a90 	vmov	r0, s13
 800b29c:	f7f5 f97c 	bl	8000598 <__aeabi_f2d>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	ec43 2b10 	vmov	d0, r2, r3
 800b2a8:	f019 fdce 	bl	8024e48 <exp>
 800b2ac:	ec53 2b10 	vmov	r2, r3, d0
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	f7f5 f9c8 	bl	8000648 <__aeabi_dmul>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	f7f5 fc9a 	bl	8000bf8 <__aeabi_d2f>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	617b      	str	r3, [r7, #20]
	return velocity;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
}
 800b2ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bdb0      	pop	{r4, r5, r7, pc}
 800b2d8:	f9db22d1 	.word	0xf9db22d1
 800b2dc:	3fdc6a7e 	.word	0x3fdc6a7e

0800b2e0 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 800b2e0:	b5b0      	push	{r4, r5, r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b2ea:	edc7 0a02 	vstr	s1, [r7, #8]
 800b2ee:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7f5 f950 	bl	8000598 <__aeabi_f2d>
 800b2f8:	a33d      	add	r3, pc, #244	; (adr r3, 800b3f0 <cal_mollifier_acceleration+0x110>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 facd 	bl	800089c <__aeabi_ddiv>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4614      	mov	r4, r2
 800b308:	461d      	mov	r5, r3
 800b30a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b30e:	eeb1 7a67 	vneg.f32	s14, s15
 800b312:	edd7 7a03 	vldr	s15, [r7, #12]
 800b316:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b31a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b31e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b322:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800b326:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800b32a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b32e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b33e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b342:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800b346:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800b34a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b34e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b352:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b35a:	ee16 0a90 	vmov	r0, s13
 800b35e:	f7f5 f91b 	bl	8000598 <__aeabi_f2d>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f5 f96d 	bl	8000648 <__aeabi_dmul>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4614      	mov	r4, r2
 800b374:	461d      	mov	r5, r3
 800b376:	edd7 7a02 	vldr	s15, [r7, #8]
 800b37a:	eeb1 7a67 	vneg.f32	s14, s15
 800b37e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b386:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800b38a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b38e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b392:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b396:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800b39a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800b39e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b3a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b3aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b3ae:	ee16 0a90 	vmov	r0, s13
 800b3b2:	f7f5 f8f1 	bl	8000598 <__aeabi_f2d>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	ec43 2b10 	vmov	d0, r2, r3
 800b3be:	f019 fd43 	bl	8024e48 <exp>
 800b3c2:	ec53 2b10 	vmov	r2, r3, d0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f5 f93d 	bl	8000648 <__aeabi_dmul>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	f7f5 fc0f 	bl	8000bf8 <__aeabi_d2f>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	617b      	str	r3, [r7, #20]
	return acceleration;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	ee07 3a90 	vmov	s15, r3
}
 800b3e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	f9db22d1 	.word	0xf9db22d1
 800b3f4:	3fdc6a7e 	.word	0x3fdc6a7e

0800b3f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <MX_DMA_Init+0x50>)
 800b400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b402:	4a11      	ldr	r2, [pc, #68]	; (800b448 <MX_DMA_Init+0x50>)
 800b404:	f043 0304 	orr.w	r3, r3, #4
 800b408:	6493      	str	r3, [r2, #72]	; 0x48
 800b40a:	4b0f      	ldr	r3, [pc, #60]	; (800b448 <MX_DMA_Init+0x50>)
 800b40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40e:	f003 0304 	and.w	r3, r3, #4
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <MX_DMA_Init+0x50>)
 800b418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b41a:	4a0b      	ldr	r2, [pc, #44]	; (800b448 <MX_DMA_Init+0x50>)
 800b41c:	f043 0301 	orr.w	r3, r3, #1
 800b420:	6493      	str	r3, [r2, #72]	; 0x48
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <MX_DMA_Init+0x50>)
 800b424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800b42e:	2200      	movs	r2, #0
 800b430:	2100      	movs	r1, #0
 800b432:	200b      	movs	r0, #11
 800b434:	f011 fdcf 	bl	801cfd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b438:	200b      	movs	r0, #11
 800b43a:	f011 fde6 	bl	801d00a <HAL_NVIC_EnableIRQ>

}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	40021000 	.word	0x40021000

0800b44c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
	error_mode=0;
 800b450:	4b11      	ldr	r3, [pc, #68]	; (800b498 <init_FailSafe+0x4c>)
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <init_FailSafe+0x50>)
 800b458:	2200      	movs	r2, #0
 800b45a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800b45c:	4b10      	ldr	r3, [pc, #64]	; (800b4a0 <init_FailSafe+0x54>)
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800b462:	4b10      	ldr	r3, [pc, #64]	; (800b4a4 <init_FailSafe+0x58>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 800b468:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <init_FailSafe+0x5c>)
 800b46a:	4a10      	ldr	r2, [pc, #64]	; (800b4ac <init_FailSafe+0x60>)
 800b46c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800b46e:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <init_FailSafe+0x64>)
 800b470:	4a10      	ldr	r2, [pc, #64]	; (800b4b4 <init_FailSafe+0x68>)
 800b472:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800b474:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <init_FailSafe+0x6c>)
 800b476:	4a0d      	ldr	r2, [pc, #52]	; (800b4ac <init_FailSafe+0x60>)
 800b478:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800b47a:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <init_FailSafe+0x70>)
 800b47c:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <init_FailSafe+0x74>)
 800b47e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 800b480:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <init_FailSafe+0x78>)
 800b482:	4a11      	ldr	r2, [pc, #68]	; (800b4c8 <init_FailSafe+0x7c>)
 800b484:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800b486:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <init_FailSafe+0x80>)
 800b488:	4a0f      	ldr	r2, [pc, #60]	; (800b4c8 <init_FailSafe+0x7c>)
 800b48a:	601a      	str	r2, [r3, #0]
}
 800b48c:	bf00      	nop
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	20000813 	.word	0x20000813
 800b49c:	20000812 	.word	0x20000812
 800b4a0:	20000814 	.word	0x20000814
 800b4a4:	20000830 	.word	0x20000830
 800b4a8:	20000818 	.word	0x20000818
 800b4ac:	44bb8000 	.word	0x44bb8000
 800b4b0:	2000081c 	.word	0x2000081c
 800b4b4:	44480000 	.word	0x44480000
 800b4b8:	20000820 	.word	0x20000820
 800b4bc:	20000824 	.word	0x20000824
 800b4c0:	455ac000 	.word	0x455ac000
 800b4c4:	20000828 	.word	0x20000828
 800b4c8:	44ed8000 	.word	0x44ed8000
 800b4cc:	2000082c 	.word	0x2000082c

0800b4d0 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800b4d6:	4b6e      	ldr	r3, [pc, #440]	; (800b690 <interrupt_FailSafe+0x1c0>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800b4de:	4b6d      	ldr	r3, [pc, #436]	; (800b694 <interrupt_FailSafe+0x1c4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800b4e4:	4b6c      	ldr	r3, [pc, #432]	; (800b698 <interrupt_FailSafe+0x1c8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800b4ea:	4b6c      	ldr	r3, [pc, #432]	; (800b69c <interrupt_FailSafe+0x1cc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	607b      	str	r3, [r7, #4]
 800b4f0:	e008      	b.n	800b504 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800b4f2:	4b6b      	ldr	r3, [pc, #428]	; (800b6a0 <interrupt_FailSafe+0x1d0>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800b4f8:	4b6a      	ldr	r3, [pc, #424]	; (800b6a4 <interrupt_FailSafe+0x1d4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800b4fe:	4b6a      	ldr	r3, [pc, #424]	; (800b6a8 <interrupt_FailSafe+0x1d8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800b504:	4b69      	ldr	r3, [pc, #420]	; (800b6ac <interrupt_FailSafe+0x1dc>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d062      	beq.n	800b5d2 <interrupt_FailSafe+0x102>
 800b50c:	4b67      	ldr	r3, [pc, #412]	; (800b6ac <interrupt_FailSafe+0x1dc>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b03      	cmp	r3, #3
 800b512:	d05e      	beq.n	800b5d2 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800b514:	4b66      	ldr	r3, [pc, #408]	; (800b6b0 <interrupt_FailSafe+0x1e0>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d15a      	bne.n	800b5d2 <interrupt_FailSafe+0x102>
 800b51c:	4b65      	ldr	r3, [pc, #404]	; (800b6b4 <interrupt_FailSafe+0x1e4>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d156      	bne.n	800b5d2 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800b524:	4b64      	ldr	r3, [pc, #400]	; (800b6b8 <interrupt_FailSafe+0x1e8>)
 800b526:	ed93 7a00 	vldr	s14, [r3]
 800b52a:	4b64      	ldr	r3, [pc, #400]	; (800b6bc <interrupt_FailSafe+0x1ec>)
 800b52c:	edd3 7a00 	vldr	s15, [r3]
 800b530:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b534:	eef0 7ae7 	vabs.f32	s15, s15
 800b538:	ed97 7a02 	vldr	s14, [r7, #8]
 800b53c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	d809      	bhi.n	800b55a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800b546:	f7fd fcb3 	bl	8008eb0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800b54a:	2001      	movs	r0, #1
 800b54c:	f7fc fedc 	bl	8008308 <pl_yellow_LED_count>
						error_mode = 1;
 800b550:	4b58      	ldr	r3, [pc, #352]	; (800b6b4 <interrupt_FailSafe+0x1e4>)
 800b552:	2201      	movs	r2, #1
 800b554:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800b556:	f7fa fa83 	bl	8005a60 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800b55a:	4b59      	ldr	r3, [pc, #356]	; (800b6c0 <interrupt_FailSafe+0x1f0>)
 800b55c:	edd3 7a00 	vldr	s15, [r3]
 800b560:	ed97 7a01 	vldr	s14, [r7, #4]
 800b564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56c:	d809      	bhi.n	800b582 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800b56e:	f7fd fc9f 	bl	8008eb0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800b572:	2002      	movs	r0, #2
 800b574:	f7fc fec8 	bl	8008308 <pl_yellow_LED_count>
						error_mode = 1;
 800b578:	4b4e      	ldr	r3, [pc, #312]	; (800b6b4 <interrupt_FailSafe+0x1e4>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800b57e:	f7fa fa6f 	bl	8005a60 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800b582:	4b50      	ldr	r3, [pc, #320]	; (800b6c4 <interrupt_FailSafe+0x1f4>)
 800b584:	ed93 7a00 	vldr	s14, [r3]
 800b588:	4b4f      	ldr	r3, [pc, #316]	; (800b6c8 <interrupt_FailSafe+0x1f8>)
 800b58a:	edd3 6a00 	vldr	s13, [r3]
 800b58e:	4b4f      	ldr	r3, [pc, #316]	; (800b6cc <interrupt_FailSafe+0x1fc>)
 800b590:	edd3 7a00 	vldr	s15, [r3]
 800b594:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b598:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b59c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b5a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5a4:	eef0 7ae7 	vabs.f32	s15, s15
 800b5a8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b5ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b4:	d80d      	bhi.n	800b5d2 <interrupt_FailSafe+0x102>
 800b5b6:	4b3d      	ldr	r3, [pc, #244]	; (800b6ac <interrupt_FailSafe+0x1dc>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d109      	bne.n	800b5d2 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800b5be:	f7fd fc77 	bl	8008eb0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800b5c2:	2004      	movs	r0, #4
 800b5c4:	f7fc fea0 	bl	8008308 <pl_yellow_LED_count>
						error_mode = 1;
 800b5c8:	4b3a      	ldr	r3, [pc, #232]	; (800b6b4 <interrupt_FailSafe+0x1e4>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800b5ce:	f7fa fa47 	bl	8005a60 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800b5d2:	4b38      	ldr	r3, [pc, #224]	; (800b6b4 <interrupt_FailSafe+0x1e4>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d153      	bne.n	800b682 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800b5da:	4b3d      	ldr	r3, [pc, #244]	; (800b6d0 <interrupt_FailSafe+0x200>)
 800b5dc:	2200      	movs	r2, #0
 800b5de:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 800b5e0:	4b3c      	ldr	r3, [pc, #240]	; (800b6d4 <interrupt_FailSafe+0x204>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	4a3b      	ldr	r2, [pc, #236]	; (800b6d4 <interrupt_FailSafe+0x204>)
 800b5e8:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800b5ea:	4b3a      	ldr	r3, [pc, #232]	; (800b6d4 <interrupt_FailSafe+0x204>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5f2:	dc05      	bgt.n	800b600 <interrupt_FailSafe+0x130>
			init_WallControl();
 800b5f4:	f7fa fba0 	bl	8005d38 <init_WallControl>
			modeacc=100;//エラー用
 800b5f8:	4b2c      	ldr	r3, [pc, #176]	; (800b6ac <interrupt_FailSafe+0x1dc>)
 800b5fa:	2264      	movs	r2, #100	; 0x64
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	e009      	b.n	800b614 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 800b600:	2000      	movs	r0, #0
 800b602:	f7fd fbc1 	bl	8008d88 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800b606:	f7fd fc25 	bl	8008e54 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800b60a:	f7fd fc51 	bl	8008eb0 <pl_FunMotor_stop>
			modeacc=0;
 800b60e:	4b27      	ldr	r3, [pc, #156]	; (800b6ac <interrupt_FailSafe+0x1dc>)
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800b614:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <interrupt_FailSafe+0x208>)
 800b616:	f04f 32ff 	mov.w	r2, #4294967295
 800b61a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 800b61c:	4b2f      	ldr	r3, [pc, #188]	; (800b6dc <interrupt_FailSafe+0x20c>)
 800b61e:	f04f 32ff 	mov.w	r2, #4294967295
 800b622:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800b624:	4b2e      	ldr	r3, [pc, #184]	; (800b6e0 <interrupt_FailSafe+0x210>)
 800b626:	f04f 32ff 	mov.w	r2, #4294967295
 800b62a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 800b62c:	4b2d      	ldr	r3, [pc, #180]	; (800b6e4 <interrupt_FailSafe+0x214>)
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800b634:	4b2c      	ldr	r3, [pc, #176]	; (800b6e8 <interrupt_FailSafe+0x218>)
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 800b63c:	4b2b      	ldr	r3, [pc, #172]	; (800b6ec <interrupt_FailSafe+0x21c>)
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800b644:	4b2a      	ldr	r3, [pc, #168]	; (800b6f0 <interrupt_FailSafe+0x220>)
 800b646:	4a2b      	ldr	r2, [pc, #172]	; (800b6f4 <interrupt_FailSafe+0x224>)
 800b648:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 800b64a:	4b2b      	ldr	r3, [pc, #172]	; (800b6f8 <interrupt_FailSafe+0x228>)
 800b64c:	4a29      	ldr	r2, [pc, #164]	; (800b6f4 <interrupt_FailSafe+0x224>)
 800b64e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 800b650:	4b2a      	ldr	r3, [pc, #168]	; (800b6fc <interrupt_FailSafe+0x22c>)
 800b652:	4a2b      	ldr	r2, [pc, #172]	; (800b700 <interrupt_FailSafe+0x230>)
 800b654:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800b656:	4b2b      	ldr	r3, [pc, #172]	; (800b704 <interrupt_FailSafe+0x234>)
 800b658:	4a29      	ldr	r2, [pc, #164]	; (800b700 <interrupt_FailSafe+0x230>)
 800b65a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 800b65c:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <interrupt_FailSafe+0x238>)
 800b65e:	4a2b      	ldr	r2, [pc, #172]	; (800b70c <interrupt_FailSafe+0x23c>)
 800b660:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800b662:	4b2b      	ldr	r3, [pc, #172]	; (800b710 <interrupt_FailSafe+0x240>)
 800b664:	4a29      	ldr	r2, [pc, #164]	; (800b70c <interrupt_FailSafe+0x23c>)
 800b666:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 800b668:	4b2a      	ldr	r3, [pc, #168]	; (800b714 <interrupt_FailSafe+0x244>)
 800b66a:	4a28      	ldr	r2, [pc, #160]	; (800b70c <interrupt_FailSafe+0x23c>)
 800b66c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 800b66e:	4b2a      	ldr	r3, [pc, #168]	; (800b718 <interrupt_FailSafe+0x248>)
 800b670:	4a26      	ldr	r2, [pc, #152]	; (800b70c <interrupt_FailSafe+0x23c>)
 800b672:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800b674:	4b29      	ldr	r3, [pc, #164]	; (800b71c <interrupt_FailSafe+0x24c>)
 800b676:	2204      	movs	r2, #4
 800b678:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 800b67a:	4b29      	ldr	r3, [pc, #164]	; (800b720 <interrupt_FailSafe+0x250>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 800b680:	e002      	b.n	800b688 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 800b682:	4b14      	ldr	r3, [pc, #80]	; (800b6d4 <interrupt_FailSafe+0x204>)
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
}
 800b688:	bf00      	nop
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000814 	.word	0x20000814
 800b694:	20000818 	.word	0x20000818
 800b698:	2000081c 	.word	0x2000081c
 800b69c:	20000820 	.word	0x20000820
 800b6a0:	20000824 	.word	0x20000824
 800b6a4:	20000828 	.word	0x20000828
 800b6a8:	2000082c 	.word	0x2000082c
 800b6ac:	20000534 	.word	0x20000534
 800b6b0:	20000812 	.word	0x20000812
 800b6b4:	20000813 	.word	0x20000813
 800b6b8:	200004e8 	.word	0x200004e8
 800b6bc:	2000026c 	.word	0x2000026c
 800b6c0:	20000278 	.word	0x20000278
 800b6c4:	200004dc 	.word	0x200004dc
 800b6c8:	2000025c 	.word	0x2000025c
 800b6cc:	20000258 	.word	0x20000258
 800b6d0:	2000f284 	.word	0x2000f284
 800b6d4:	20000830 	.word	0x20000830
 800b6d8:	200005c4 	.word	0x200005c4
 800b6dc:	200005c0 	.word	0x200005c0
 800b6e0:	200005cc 	.word	0x200005cc
 800b6e4:	200005c8 	.word	0x200005c8
 800b6e8:	200005d4 	.word	0x200005d4
 800b6ec:	200005d0 	.word	0x200005d0
 800b6f0:	200005dc 	.word	0x200005dc
 800b6f4:	42480000 	.word	0x42480000
 800b6f8:	200005d8 	.word	0x200005d8
 800b6fc:	200005e4 	.word	0x200005e4
 800b700:	41a00000 	.word	0x41a00000
 800b704:	200005e0 	.word	0x200005e0
 800b708:	200005ec 	.word	0x200005ec
 800b70c:	420c0000 	.word	0x420c0000
 800b710:	200005e8 	.word	0x200005e8
 800b714:	200005f4 	.word	0x200005f4
 800b718:	200005f0 	.word	0x200005f0
 800b71c:	20000810 	.word	0x20000810
 800b720:	2000059e 	.word	0x2000059e

0800b724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08a      	sub	sp, #40	; 0x28
 800b728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b72a:	f107 0314 	add.w	r3, r7, #20
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	605a      	str	r2, [r3, #4]
 800b734:	609a      	str	r2, [r3, #8]
 800b736:	60da      	str	r2, [r3, #12]
 800b738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b73a:	4b3a      	ldr	r3, [pc, #232]	; (800b824 <MX_GPIO_Init+0x100>)
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	4a39      	ldr	r2, [pc, #228]	; (800b824 <MX_GPIO_Init+0x100>)
 800b740:	f043 0304 	orr.w	r3, r3, #4
 800b744:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b746:	4b37      	ldr	r3, [pc, #220]	; (800b824 <MX_GPIO_Init+0x100>)
 800b748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b752:	4b34      	ldr	r3, [pc, #208]	; (800b824 <MX_GPIO_Init+0x100>)
 800b754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b756:	4a33      	ldr	r2, [pc, #204]	; (800b824 <MX_GPIO_Init+0x100>)
 800b758:	f043 0320 	orr.w	r3, r3, #32
 800b75c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b75e:	4b31      	ldr	r3, [pc, #196]	; (800b824 <MX_GPIO_Init+0x100>)
 800b760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b76a:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <MX_GPIO_Init+0x100>)
 800b76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b76e:	4a2d      	ldr	r2, [pc, #180]	; (800b824 <MX_GPIO_Init+0x100>)
 800b770:	f043 0301 	orr.w	r3, r3, #1
 800b774:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b776:	4b2b      	ldr	r3, [pc, #172]	; (800b824 <MX_GPIO_Init+0x100>)
 800b778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	60bb      	str	r3, [r7, #8]
 800b780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b782:	4b28      	ldr	r3, [pc, #160]	; (800b824 <MX_GPIO_Init+0x100>)
 800b784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b786:	4a27      	ldr	r2, [pc, #156]	; (800b824 <MX_GPIO_Init+0x100>)
 800b788:	f043 0302 	orr.w	r3, r3, #2
 800b78c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b78e:	4b25      	ldr	r3, [pc, #148]	; (800b824 <MX_GPIO_Init+0x100>)
 800b790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	607b      	str	r3, [r7, #4]
 800b798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800b79a:	2200      	movs	r2, #0
 800b79c:	f24e 0150 	movw	r1, #57424	; 0xe050
 800b7a0:	4821      	ldr	r0, [pc, #132]	; (800b828 <MX_GPIO_Init+0x104>)
 800b7a2:	f012 fb03 	bl	801ddac <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f648 1110 	movw	r1, #35088	; 0x8910
 800b7ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7b0:	f012 fafc 	bl	801ddac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f64e 4196 	movw	r1, #60566	; 0xec96
 800b7ba:	481c      	ldr	r0, [pc, #112]	; (800b82c <MX_GPIO_Init+0x108>)
 800b7bc:	f012 faf6 	bl	801ddac <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800b7c0:	f24e 0350 	movw	r3, #57424	; 0xe050
 800b7c4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7d2:	f107 0314 	add.w	r3, r7, #20
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4813      	ldr	r0, [pc, #76]	; (800b828 <MX_GPIO_Init+0x104>)
 800b7da:	f012 f965 	bl	801daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 800b7de:	f648 1310 	movw	r3, #35088	; 0x8910
 800b7e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f0:	f107 0314 	add.w	r3, r7, #20
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7fa:	f012 f955 	bl	801daa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800b7fe:	f64e 4396 	movw	r3, #60566	; 0xec96
 800b802:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b804:	2301      	movs	r3, #1
 800b806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b808:	2300      	movs	r3, #0
 800b80a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b80c:	2300      	movs	r3, #0
 800b80e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b810:	f107 0314 	add.w	r3, r7, #20
 800b814:	4619      	mov	r1, r3
 800b816:	4805      	ldr	r0, [pc, #20]	; (800b82c <MX_GPIO_Init+0x108>)
 800b818:	f012 f946 	bl	801daa8 <HAL_GPIO_Init>

}
 800b81c:	bf00      	nop
 800b81e:	3728      	adds	r7, #40	; 0x28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	40021000 	.word	0x40021000
 800b828:	48000800 	.word	0x48000800
 800b82c:	48000400 	.word	0x48000400

0800b830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b089      	sub	sp, #36	; 0x24
 800b834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b836:	f00f f885 	bl	801a944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b83a:	f000 f8ab 	bl	800b994 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800b83e:	f7ff fddb 	bl	800b3f8 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b842:	f7ff ff6f 	bl	800b724 <MX_GPIO_Init>
  MX_ADC1_Init();
 800b846:	f7fd fe0d 	bl	8009464 <MX_ADC1_Init>
  MX_SPI1_Init();
 800b84a:	f00d fb77 	bl	8018f3c <MX_SPI1_Init>
  MX_TIM6_Init();
 800b84e:	f00d fde3 	bl	8019418 <MX_TIM6_Init>
  MX_TIM8_Init();
 800b852:	f00d fe17 	bl	8019484 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800b856:	f00e ffa7 	bl	801a7a8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800b85a:	f7ff fdcd 	bl	800b3f8 <MX_DMA_Init>
  MX_SPI3_Init();
 800b85e:	f00d fbab 	bl	8018fb8 <MX_SPI3_Init>
  MX_TIM16_Init();
 800b862:	f00d feaf 	bl	80195c4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800b866:	f7fd fd0f 	bl	8009288 <pl_timer_init>
  pl_gyro_init();
 800b86a:	f7fd f9a1 	bl	8008bb0 <pl_gyro_init>
  pl_sensor_init();
 800b86e:	f7fd fb4f 	bl	8008f10 <pl_sensor_init>
  reset_distance();
 800b872:	f7f5 fb93 	bl	8000f9c <reset_distance>
  reset_gyro();
 800b876:	f7f6 f9c7 	bl	8001c08 <reset_gyro>
  reset_speed();
 800b87a:	f7f5 fbd3 	bl	8001024 <reset_speed>
  record_reset();
 800b87e:	f00d f8af 	bl	80189e0 <record_reset>
  pl_motor_init();
 800b882:	f7fd fa5b 	bl	8008d3c <pl_motor_init>
  PID_Init();
 800b886:	f7fa f8af 	bl	80059e8 <PID_Init>
  init_WallControl();
 800b88a:	f7fa fa55 	bl	8005d38 <init_WallControl>
  Control_mode_Init();
 800b88e:	f7f6 fd1d 	bl	80022cc <Control_mode_Init>
  init_FailSafe();
 800b892:	f7ff fddb 	bl	800b44c <init_FailSafe>
  input_parameter();
 800b896:	f00e f875 	bl	8019984 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	617b      	str	r3, [r7, #20]
  int a=0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	607b      	str	r3, [r7, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800b8a2:	4b38      	ldr	r3, [pc, #224]	; (800b984 <main+0x154>)
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800b8a8:	4b36      	ldr	r3, [pc, #216]	; (800b984 <main+0x154>)
 800b8aa:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800b8ac:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800b8ae:	4b35      	ldr	r3, [pc, #212]	; (800b984 <main+0x154>)
 800b8b0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800b8b2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800b8b4:	4b33      	ldr	r3, [pc, #204]	; (800b984 <main+0x154>)
 800b8b6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800b8b8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800b8ba:	4b32      	ldr	r3, [pc, #200]	; (800b984 <main+0x154>)
 800b8bc:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	9200      	str	r2, [sp, #0]
 800b8c2:	4623      	mov	r3, r4
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	4830      	ldr	r0, [pc, #192]	; (800b988 <main+0x158>)
 800b8c8:	f017 f806 	bl	80228d8 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800b8cc:	4b2f      	ldr	r3, [pc, #188]	; (800b98c <main+0x15c>)
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800b8d2:	4b2e      	ldr	r3, [pc, #184]	; (800b98c <main+0x15c>)
 800b8d4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800b8d6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800b8d8:	4b2c      	ldr	r3, [pc, #176]	; (800b98c <main+0x15c>)
 800b8da:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800b8dc:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800b8de:	4b2b      	ldr	r3, [pc, #172]	; (800b98c <main+0x15c>)
 800b8e0:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800b8e2:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800b8e4:	4b29      	ldr	r3, [pc, #164]	; (800b98c <main+0x15c>)
 800b8e6:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	9200      	str	r2, [sp, #0]
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	4827      	ldr	r0, [pc, #156]	; (800b990 <main+0x160>)
 800b8f2:	f016 fff1 	bl	80228d8 <iprintf>


//起動cheak
	int yellow_count=1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
 800b8fe:	e00d      	b.n	800b91c <main+0xec>
		pl_yellow_LED_count(yellow_count);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	4618      	mov	r0, r3
 800b906:	f7fc fcff 	bl	8008308 <pl_yellow_LED_count>
		HAL_Delay(50);
 800b90a:	2032      	movs	r0, #50	; 0x32
 800b90c:	f00f f892 	bl	801aa34 <HAL_Delay>
		yellow_count=yellow_count*2;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b07      	cmp	r3, #7
 800b920:	ddee      	ble.n	800b900 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
 800b926:	e00f      	b.n	800b948 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fc fceb 	bl	8008308 <pl_yellow_LED_count>
			HAL_Delay(50);
 800b932:	2032      	movs	r0, #50	; 0x32
 800b934:	f00f f87e 	bl	801aa34 <HAL_Delay>
			yellow_count=yellow_count/2;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	0fda      	lsrs	r2, r3, #31
 800b93c:	4413      	add	r3, r2
 800b93e:	105b      	asrs	r3, r3, #1
 800b940:	613b      	str	r3, [r7, #16]
	for(int i=0;i<9;i++){
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3301      	adds	r3, #1
 800b946:	60bb      	str	r3, [r7, #8]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b08      	cmp	r3, #8
 800b94c:	ddec      	ble.n	800b928 <main+0xf8>
	}
	battcheak();
 800b94e:	f7f6 fb7f 	bl	8002050 <battcheak>
//		tim1 = toc_timer();
//		maze_display();
//		maze_display_Dijkstra();
//		printf("tim1=%f,tim2=%f\n", tim1, tim2);

	  		mode=mode_decision(mode);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	4618      	mov	r0, r3
 800b958:	f00b f9a2 	bl	8016ca0 <mode_decision>
 800b95c:	4603      	mov	r3, r0
 800b95e:	617b      	str	r3, [r7, #20]
//	  		clear_Ierror();
	  		reset_distance();
 800b960:	f7f5 fb1c 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800b964:	f7f6 f950 	bl	8001c08 <reset_gyro>
	  		reset_speed();
 800b968:	f7f5 fb5c 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	4618      	mov	r0, r3
 800b972:	f00b fa8f 	bl	8016e94 <mode_execution>

// failsafe後の修理
	  		Control_mode_Init();
 800b976:	f7f6 fca9 	bl	80022cc <Control_mode_Init>
	  		init_WallControl();
 800b97a:	f7fa f9dd 	bl	8005d38 <init_WallControl>
	  		init_FailSafe();
 800b97e:	f7ff fd65 	bl	800b44c <init_FailSafe>
	  		mode=mode_decision(mode);
 800b982:	e7e6      	b.n	800b952 <main+0x122>
 800b984:	20000718 	.word	0x20000718
 800b988:	080262d8 	.word	0x080262d8
 800b98c:	20000724 	.word	0x20000724
 800b990:	08026304 	.word	0x08026304

0800b994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b094      	sub	sp, #80	; 0x50
 800b998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b99a:	f107 0318 	add.w	r3, r7, #24
 800b99e:	2238      	movs	r2, #56	; 0x38
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f016 fb26 	bl	8021ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b9a8:	1d3b      	adds	r3, r7, #4
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	605a      	str	r2, [r3, #4]
 800b9b0:	609a      	str	r2, [r3, #8]
 800b9b2:	60da      	str	r2, [r3, #12]
 800b9b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f012 fa10 	bl	801dddc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b9c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800b9ce:	2304      	movs	r3, #4
 800b9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800b9d2:	2355      	movs	r3, #85	; 0x55
 800b9d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b9da:	2302      	movs	r3, #2
 800b9dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b9e2:	f107 0318 	add.w	r3, r7, #24
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f012 faac 	bl	801df44 <HAL_RCC_OscConfig>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800b9f2:	f000 f81a 	bl	800ba2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b9f6:	230f      	movs	r3, #15
 800b9f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ba02:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800ba06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ba08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ba0e:	1d3b      	adds	r3, r7, #4
 800ba10:	2104      	movs	r1, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f012 fdae 	bl	801e574 <HAL_RCC_ClockConfig>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800ba1e:	f000 f804 	bl	800ba2a <Error_Handler>
  }
}
 800ba22:	bf00      	nop
 800ba24:	3750      	adds	r7, #80	; 0x50
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ba2e:	b672      	cpsid	i
}
 800ba30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ba32:	e7fe      	b.n	800ba32 <Error_Handler+0x8>

0800ba34 <backTurn_controlWall>:
	}
	wait_ms_NoReset(150);

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	ed87 0a03 	vstr	s0, [r7, #12]
 800ba3e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
 800ba46:	460b      	mov	r3, r1
 800ba48:	71bb      	strb	r3, [r7, #6]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	717b      	strb	r3, [r7, #5]
	no_safty = 1;
 800ba4e:	4b5e      	ldr	r3, [pc, #376]	; (800bbc8 <backTurn_controlWall+0x194>)
 800ba50:	2201      	movs	r2, #1
 800ba52:	701a      	strb	r2, [r3, #0]
	if(front_wall){
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <backTurn_controlWall+0x3c>
		no_frontwall_straight();
 800ba5a:	f7f9 fd0d 	bl	8005478 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ba5e:	2003      	movs	r0, #3
 800ba60:	f7fd f9c4 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ba64:	2003      	movs	r0, #3
 800ba66:	f7fd f999 	bl	8008d9c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800ba6a:	2032      	movs	r0, #50	; 0x32
 800ba6c:	f7fd fcbc 	bl	80093e8 <wait_ms_NoReset>
	}
	if(left_wall){
 800ba70:	79bb      	ldrb	r3, [r7, #6]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d02c      	beq.n	800bad0 <backTurn_controlWall+0x9c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800ba76:	ed97 2a02 	vldr	s4, [r7, #8]
 800ba7a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ba7e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800bbcc <backTurn_controlWall+0x198>
 800ba82:	eddf 0a52 	vldr	s1, [pc, #328]	; 800bbcc <backTurn_controlWall+0x198>
 800ba86:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800bbd0 <backTurn_controlWall+0x19c>
 800ba8a:	f7f9 f9ef 	bl	8004e6c <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ba8e:	2003      	movs	r0, #3
 800ba90:	f7fd f9ac 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ba94:	2003      	movs	r0, #3
 800ba96:	f7fd f981 	bl	8008d9c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800ba9a:	2032      	movs	r0, #50	; 0x32
 800ba9c:	f7fd fca4 	bl	80093e8 <wait_ms_NoReset>
		no_frontwall_straight();
 800baa0:	f7f9 fcea 	bl	8005478 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800baa4:	2003      	movs	r0, #3
 800baa6:	f7fd f9a1 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800baaa:	2003      	movs	r0, #3
 800baac:	f7fd f976 	bl	8008d9c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800bab0:	2032      	movs	r0, #50	; 0x32
 800bab2:	f7fd fc99 	bl	80093e8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800bab6:	ed97 2a02 	vldr	s4, [r7, #8]
 800baba:	edd7 1a03 	vldr	s3, [r7, #12]
 800babe:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800bbcc <backTurn_controlWall+0x198>
 800bac2:	eddf 0a42 	vldr	s1, [pc, #264]	; 800bbcc <backTurn_controlWall+0x198>
 800bac6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800bbd0 <backTurn_controlWall+0x19c>
 800baca:	f7f9 f9cf 	bl	8004e6c <turning_table2>
 800bace:	e06a      	b.n	800bba6 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall){
 800bad0:	79bb      	ldrb	r3, [r7, #6]
 800bad2:	f083 0301 	eor.w	r3, r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d037      	beq.n	800bb4c <backTurn_controlWall+0x118>
 800badc:	797b      	ldrb	r3, [r7, #5]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d034      	beq.n	800bb4c <backTurn_controlWall+0x118>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800bae2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bae6:	eef1 7a67 	vneg.f32	s15, s15
 800baea:	ed97 2a02 	vldr	s4, [r7, #8]
 800baee:	eef0 1a67 	vmov.f32	s3, s15
 800baf2:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800bbcc <backTurn_controlWall+0x198>
 800baf6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800bbcc <backTurn_controlWall+0x198>
 800bafa:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800bbd4 <backTurn_controlWall+0x1a0>
 800bafe:	f7f9 f9b5 	bl	8004e6c <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800bb02:	2003      	movs	r0, #3
 800bb04:	f7fd f972 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800bb08:	2003      	movs	r0, #3
 800bb0a:	f7fd f947 	bl	8008d9c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800bb0e:	2032      	movs	r0, #50	; 0x32
 800bb10:	f7fd fc6a 	bl	80093e8 <wait_ms_NoReset>
		no_frontwall_straight();
 800bb14:	f7f9 fcb0 	bl	8005478 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800bb18:	2003      	movs	r0, #3
 800bb1a:	f7fd f967 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800bb1e:	2003      	movs	r0, #3
 800bb20:	f7fd f93c 	bl	8008d9c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800bb24:	2032      	movs	r0, #50	; 0x32
 800bb26:	f7fd fc5f 	bl	80093e8 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800bb2a:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb2e:	eef1 7a67 	vneg.f32	s15, s15
 800bb32:	ed97 2a02 	vldr	s4, [r7, #8]
 800bb36:	eef0 1a67 	vmov.f32	s3, s15
 800bb3a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800bbcc <backTurn_controlWall+0x198>
 800bb3e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800bbcc <backTurn_controlWall+0x198>
 800bb42:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800bbd4 <backTurn_controlWall+0x1a0>
 800bb46:	f7f9 f991 	bl	8004e6c <turning_table2>
 800bb4a:	e02c      	b.n	800bba6 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall==0){
 800bb4c:	79bb      	ldrb	r3, [r7, #6]
 800bb4e:	f083 0301 	eor.w	r3, r3, #1
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d026      	beq.n	800bba6 <backTurn_controlWall+0x172>
 800bb58:	797b      	ldrb	r3, [r7, #5]
 800bb5a:	f083 0301 	eor.w	r3, r3, #1
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d020      	beq.n	800bba6 <backTurn_controlWall+0x172>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800bb64:	ed97 2a02 	vldr	s4, [r7, #8]
 800bb68:	edd7 1a03 	vldr	s3, [r7, #12]
 800bb6c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800bbcc <backTurn_controlWall+0x198>
 800bb70:	eddf 0a16 	vldr	s1, [pc, #88]	; 800bbcc <backTurn_controlWall+0x198>
 800bb74:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800bbd0 <backTurn_controlWall+0x19c>
 800bb78:	f7f9 f978 	bl	8004e6c <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800bb7c:	2003      	movs	r0, #3
 800bb7e:	f7fd f935 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800bb82:	2003      	movs	r0, #3
 800bb84:	f7fd f90a 	bl	8008d9c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800bb88:	2032      	movs	r0, #50	; 0x32
 800bb8a:	f7fd fc2d 	bl	80093e8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800bb8e:	ed97 2a02 	vldr	s4, [r7, #8]
 800bb92:	edd7 1a03 	vldr	s3, [r7, #12]
 800bb96:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800bbcc <backTurn_controlWall+0x198>
 800bb9a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800bbcc <backTurn_controlWall+0x198>
 800bb9e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bbd0 <backTurn_controlWall+0x19c>
 800bba2:	f7f9 f963 	bl	8004e6c <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800bba6:	2003      	movs	r0, #3
 800bba8:	f7fd f920 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800bbac:	2003      	movs	r0, #3
 800bbae:	f7fd f8f5 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(150);
 800bbb2:	2096      	movs	r0, #150	; 0x96
 800bbb4:	f7fd fc18 	bl	80093e8 <wait_ms_NoReset>
	no_safty = 0;
 800bbb8:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <backTurn_controlWall+0x194>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	701a      	strb	r2, [r3, #0]
}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000812 	.word	0x20000812
 800bbcc:	00000000 	.word	0x00000000
 800bbd0:	42b40000 	.word	0x42b40000
 800bbd4:	c2b40000 	.word	0xc2b40000

0800bbd8 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800bbd8:	b084      	sub	sp, #16
 800bbda:	b5b0      	push	{r4, r5, r7, lr}
 800bbdc:	ed2d 8b02 	vpush	{d8}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bbe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bbec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800bbf0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	f040 80f5 	bne.w	800bde4 <slalomR+0x20c>
		highspeed_mode = 0;
 800bbfa:	4be3      	ldr	r3, [pc, #908]	; (800bf88 <slalomR+0x3b0>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bc00:	2301      	movs	r3, #1
 800bc02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800bc10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d11f      	bne.n	800bc58 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800bc18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc2c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc30:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800bc34:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800bf8c <slalomR+0x3b4>
 800bc38:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	eeb0 2a47 	vmov.f32	s4, s14
 800bc42:	eef0 1a46 	vmov.f32	s3, s12
 800bc46:	eeb0 1a66 	vmov.f32	s2, s13
 800bc4a:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800bf90 <slalomR+0x3b8>
 800bc4e:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800bf94 <slalomR+0x3bc>
 800bc52:	f7f8 fbe1 	bl	8004418 <straight_table2>
 800bc56:	e01e      	b.n	800bc96 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800bc58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc6c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bc70:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800bc74:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800bf8c <slalomR+0x3b4>
 800bc78:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	eeb0 2a47 	vmov.f32	s4, s14
 800bc82:	eef0 1a46 	vmov.f32	s3, s12
 800bc86:	eeb0 1a66 	vmov.f32	s2, s13
 800bc8a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800bf90 <slalomR+0x3b8>
 800bc8e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800bf98 <slalomR+0x3c0>
 800bc92:	f7f8 fbc1 	bl	8004418 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800bc96:	2301      	movs	r3, #1
 800bc98:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800bc9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d127      	bne.n	800bcf6 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bca6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bcaa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800bcae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bcb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcb6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bcba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bcce:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcd2:	eddf 4aae 	vldr	s9, [pc, #696]	; 800bf8c <slalomR+0x3b4>
 800bcd6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	eeb0 2a47 	vmov.f32	s4, s14
 800bce0:	eef0 1a45 	vmov.f32	s3, s10
 800bce4:	eeb0 1a65 	vmov.f32	s2, s11
 800bce8:	eef0 0a46 	vmov.f32	s1, s12
 800bcec:	eeb0 0a66 	vmov.f32	s0, s13
 800bcf0:	f7f8 fb92 	bl	8004418 <straight_table2>
 800bcf4:	e022      	b.n	800bd3c <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcf6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcfa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcfe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd02:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd16:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd1a:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800bf8c <slalomR+0x3b4>
 800bd1e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	eeb0 2a47 	vmov.f32	s4, s14
 800bd28:	eef0 1a45 	vmov.f32	s3, s10
 800bd2c:	eeb0 1a65 	vmov.f32	s2, s11
 800bd30:	eef0 0a46 	vmov.f32	s1, s12
 800bd34:	eeb0 0a66 	vmov.f32	s0, s13
 800bd38:	f7f8 fb6e 	bl	8004418 <straight_table2>
		}
		if(mollifier_mode == ON){
 800bd3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d10c      	bne.n	800bd5e <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800bd44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd4c:	eeb0 1a47 	vmov.f32	s2, s14
 800bd50:	eddf 0a92 	vldr	s1, [pc, #584]	; 800bf9c <slalomR+0x3c4>
 800bd54:	eeb0 0a67 	vmov.f32	s0, s15
 800bd58:	f7f9 fafa 	bl	8005350 <mollifier_slalom_table>
 800bd5c:	e015      	b.n	800bd8a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd66:	eef1 7a67 	vneg.f32	s15, s15
 800bd6a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd6e:	eef0 2a66 	vmov.f32	s5, s13
 800bd72:	eeb0 2a67 	vmov.f32	s4, s15
 800bd76:	eddf 1a86 	vldr	s3, [pc, #536]	; 800bf90 <slalomR+0x3b8>
 800bd7a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800bf90 <slalomR+0x3b8>
 800bd7e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800bf9c <slalomR+0x3c4>
 800bd82:	eeb0 0a47 	vmov.f32	s0, s14
 800bd86:	f7f9 f993 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bd92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd96:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bf8c <slalomR+0x3b4>
 800bd9a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bd9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bda2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bda6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdb2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bdb6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bdba:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800bf8c <slalomR+0x3b4>
 800bdbe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	eeb0 2a47 	vmov.f32	s4, s14
 800bdc8:	eef0 1a65 	vmov.f32	s3, s11
 800bdcc:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800bf90 <slalomR+0x3b8>
 800bdd0:	eef0 0a46 	vmov.f32	s1, s12
 800bdd4:	eeb0 0a66 	vmov.f32	s0, s13
 800bdd8:	f7f8 fb1e 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800bddc:	4b6a      	ldr	r3, [pc, #424]	; (800bf88 <slalomR+0x3b0>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800bde2:	e0c8      	b.n	800bf76 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800bde4:	2300      	movs	r3, #0
 800bde6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800bdec:	2301      	movs	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800bdf4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d127      	bne.n	800be4c <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bdfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800be00:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800be04:	ee77 6a87 	vadd.f32	s13, s15, s14
 800be08:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be0c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be10:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be20:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be24:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be28:	eddf 4a58 	vldr	s9, [pc, #352]	; 800bf8c <slalomR+0x3b4>
 800be2c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	eeb0 2a47 	vmov.f32	s4, s14
 800be36:	eef0 1a45 	vmov.f32	s3, s10
 800be3a:	eeb0 1a65 	vmov.f32	s2, s11
 800be3e:	eef0 0a46 	vmov.f32	s1, s12
 800be42:	eeb0 0a66 	vmov.f32	s0, s13
 800be46:	f7f8 fae7 	bl	8004418 <straight_table2>
 800be4a:	e022      	b.n	800be92 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be58:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be68:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be6c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be70:	eddf 4a46 	vldr	s9, [pc, #280]	; 800bf8c <slalomR+0x3b4>
 800be74:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	eeb0 2a47 	vmov.f32	s4, s14
 800be7e:	eef0 1a45 	vmov.f32	s3, s10
 800be82:	eeb0 1a65 	vmov.f32	s2, s11
 800be86:	eef0 0a46 	vmov.f32	s1, s12
 800be8a:	eeb0 0a66 	vmov.f32	s0, s13
 800be8e:	f7f8 fac3 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800be92:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800be96:	2b01      	cmp	r3, #1
 800be98:	d10c      	bne.n	800beb4 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800be9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bea2:	eeb0 1a47 	vmov.f32	s2, s14
 800bea6:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800bf9c <slalomR+0x3c4>
 800beaa:	eeb0 0a67 	vmov.f32	s0, s15
 800beae:	f7f9 fa4f 	bl	8005350 <mollifier_slalom_table>
 800beb2:	e015      	b.n	800bee0 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800beb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beb8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bebc:	eef1 7a67 	vneg.f32	s15, s15
 800bec0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bec4:	eef0 2a66 	vmov.f32	s5, s13
 800bec8:	eeb0 2a67 	vmov.f32	s4, s15
 800becc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800bf90 <slalomR+0x3b8>
 800bed0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800bf90 <slalomR+0x3b8>
 800bed4:	eddf 0a31 	vldr	s1, [pc, #196]	; 800bf9c <slalomR+0x3c4>
 800bed8:	eeb0 0a47 	vmov.f32	s0, s14
 800bedc:	f7f9 f8e8 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800bee0:	2300      	movs	r3, #0
 800bee2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bee8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800beec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bef0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800befc:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf08:	eef0 7ae7 	vabs.f32	s15, s15
 800bf0c:	ee17 0a90 	vmov	r0, s15
 800bf10:	f7f4 fb42 	bl	8000598 <__aeabi_f2d>
 800bf14:	f04f 0200 	mov.w	r2, #0
 800bf18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf1c:	f7f4 fcbe 	bl	800089c <__aeabi_ddiv>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	461d      	mov	r5, r3
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f4 fb34 	bl	8000598 <__aeabi_f2d>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4620      	mov	r0, r4
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7f4 fcb0 	bl	800089c <__aeabi_ddiv>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4610      	mov	r0, r2
 800bf42:	4619      	mov	r1, r3
 800bf44:	f04f 0200 	mov.w	r2, #0
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <slalomR+0x3c8>)
 800bf4a:	f7f4 f9c7 	bl	80002dc <__adddf3>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	f7f4 fe4f 	bl	8000bf8 <__aeabi_d2f>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	ee02 3a10 	vmov	s4, r3
 800bf62:	edd7 1a01 	vldr	s3, [r7, #4]
 800bf66:	ed97 1a01 	vldr	s2, [r7, #4]
 800bf6a:	eef0 0a68 	vmov.f32	s1, s17
 800bf6e:	eeb0 0a48 	vmov.f32	s0, s16
 800bf72:	f7f8 fa51 	bl	8004418 <straight_table2>
}
 800bf76:	bf00      	nop
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	ecbd 8b02 	vpop	{d8}
 800bf80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bf84:	b004      	add	sp, #16
 800bf86:	4770      	bx	lr
 800bf88:	20000814 	.word	0x20000814
 800bf8c:	42340000 	.word	0x42340000
 800bf90:	00000000 	.word	0x00000000
 800bf94:	431b8000 	.word	0x431b8000
 800bf98:	43138000 	.word	0x43138000
 800bf9c:	c2b40000 	.word	0xc2b40000
 800bfa0:	408f4000 	.word	0x408f4000

0800bfa4 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	b5b0      	push	{r4, r5, r7, lr}
 800bfa8:	ed2d 8b02 	vpush	{d8}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bfb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bfb8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800bfbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	f040 80f3 	bne.w	800c1ac <slalomL+0x208>
		highspeed_mode = 0;
 800bfc6:	4be1      	ldr	r3, [pc, #900]	; (800c34c <slalomL+0x3a8>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800bfdc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d11f      	bne.n	800c024 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800bfe4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bfe8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bfec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bff0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bff8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bffc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800c000:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800c350 <slalomL+0x3ac>
 800c004:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	eeb0 2a47 	vmov.f32	s4, s14
 800c00e:	eef0 1a46 	vmov.f32	s3, s12
 800c012:	eeb0 1a66 	vmov.f32	s2, s13
 800c016:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c354 <slalomL+0x3b0>
 800c01a:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800c358 <slalomL+0x3b4>
 800c01e:	f7f8 f9fb 	bl	8004418 <straight_table2>
 800c022:	e01e      	b.n	800c062 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800c024:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c028:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c02c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c030:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c034:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c038:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c03c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800c040:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800c350 <slalomL+0x3ac>
 800c044:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	eeb0 2a47 	vmov.f32	s4, s14
 800c04e:	eef0 1a46 	vmov.f32	s3, s12
 800c052:	eeb0 1a66 	vmov.f32	s2, s13
 800c056:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c354 <slalomL+0x3b0>
 800c05a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800c35c <slalomL+0x3b8>
 800c05e:	f7f8 f9db 	bl	8004418 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800c062:	2300      	movs	r3, #0
 800c064:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800c066:	2301      	movs	r3, #1
 800c068:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800c06a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d127      	bne.n	800c0c2 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c076:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800c07a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c07e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c082:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c086:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c08a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c08e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c092:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c096:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c09a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c09e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800c350 <slalomL+0x3ac>
 800c0a2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c0ac:	eef0 1a45 	vmov.f32	s3, s10
 800c0b0:	eeb0 1a65 	vmov.f32	s2, s11
 800c0b4:	eef0 0a46 	vmov.f32	s1, s12
 800c0b8:	eeb0 0a66 	vmov.f32	s0, s13
 800c0bc:	f7f8 f9ac 	bl	8004418 <straight_table2>
 800c0c0:	e022      	b.n	800c108 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0c2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c0c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c0ca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c0ce:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c0e2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0e6:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800c350 <slalomL+0x3ac>
 800c0ea:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	eeb0 2a47 	vmov.f32	s4, s14
 800c0f4:	eef0 1a45 	vmov.f32	s3, s10
 800c0f8:	eeb0 1a65 	vmov.f32	s2, s11
 800c0fc:	eef0 0a46 	vmov.f32	s1, s12
 800c100:	eeb0 0a66 	vmov.f32	s0, s13
 800c104:	f7f8 f988 	bl	8004418 <straight_table2>
		}
		if(mollifier_mode == ON){
 800c108:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d10c      	bne.n	800c12a <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800c110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c114:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c118:	eeb0 1a47 	vmov.f32	s2, s14
 800c11c:	eddf 0a90 	vldr	s1, [pc, #576]	; 800c360 <slalomL+0x3bc>
 800c120:	eeb0 0a67 	vmov.f32	s0, s15
 800c124:	f7f9 f914 	bl	8005350 <mollifier_slalom_table>
 800c128:	e013      	b.n	800c152 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c12a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c12e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c132:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c136:	eef0 2a66 	vmov.f32	s5, s13
 800c13a:	eeb0 2a47 	vmov.f32	s4, s14
 800c13e:	eddf 1a85 	vldr	s3, [pc, #532]	; 800c354 <slalomL+0x3b0>
 800c142:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800c354 <slalomL+0x3b0>
 800c146:	eddf 0a86 	vldr	s1, [pc, #536]	; 800c360 <slalomL+0x3bc>
 800c14a:	eeb0 0a67 	vmov.f32	s0, s15
 800c14e:	f7f8 ffaf 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800c152:	2300      	movs	r3, #0
 800c154:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c156:	2300      	movs	r3, #0
 800c158:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c15a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c15e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800c350 <slalomL+0x3ac>
 800c162:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c166:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c16a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c16e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c172:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c17a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c17e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c182:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800c350 <slalomL+0x3ac>
 800c186:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	eeb0 2a47 	vmov.f32	s4, s14
 800c190:	eef0 1a65 	vmov.f32	s3, s11
 800c194:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c354 <slalomL+0x3b0>
 800c198:	eef0 0a46 	vmov.f32	s1, s12
 800c19c:	eeb0 0a66 	vmov.f32	s0, s13
 800c1a0:	f7f8 f93a 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800c1a4:	4b69      	ldr	r3, [pc, #420]	; (800c34c <slalomL+0x3a8>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800c1aa:	e0c6      	b.n	800c33a <slalomL+0x396>
		wallmode.WallControlMode=0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800c1bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d127      	bne.n	800c214 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c1c8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800c1cc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c1d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c1d8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1e8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1ec:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1f0:	eddf 4a57 	vldr	s9, [pc, #348]	; 800c350 <slalomL+0x3ac>
 800c1f4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	eeb0 2a47 	vmov.f32	s4, s14
 800c1fe:	eef0 1a45 	vmov.f32	s3, s10
 800c202:	eeb0 1a65 	vmov.f32	s2, s11
 800c206:	eef0 0a46 	vmov.f32	s1, s12
 800c20a:	eeb0 0a66 	vmov.f32	s0, s13
 800c20e:	f7f8 f903 	bl	8004418 <straight_table2>
 800c212:	e022      	b.n	800c25a <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c214:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c218:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c21c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c220:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c224:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c22c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c230:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c234:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c238:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c350 <slalomL+0x3ac>
 800c23c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	eeb0 2a47 	vmov.f32	s4, s14
 800c246:	eef0 1a45 	vmov.f32	s3, s10
 800c24a:	eeb0 1a65 	vmov.f32	s2, s11
 800c24e:	eef0 0a46 	vmov.f32	s1, s12
 800c252:	eeb0 0a66 	vmov.f32	s0, s13
 800c256:	f7f8 f8df 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c25a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d10c      	bne.n	800c27c <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800c262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c266:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c26a:	eeb0 1a47 	vmov.f32	s2, s14
 800c26e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c360 <slalomL+0x3bc>
 800c272:	eeb0 0a67 	vmov.f32	s0, s15
 800c276:	f7f9 f86b 	bl	8005350 <mollifier_slalom_table>
 800c27a:	e013      	b.n	800c2a4 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c27c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c280:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c284:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c288:	eef0 2a66 	vmov.f32	s5, s13
 800c28c:	eeb0 2a47 	vmov.f32	s4, s14
 800c290:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c354 <slalomL+0x3b0>
 800c294:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c354 <slalomL+0x3b0>
 800c298:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c360 <slalomL+0x3bc>
 800c29c:	eeb0 0a67 	vmov.f32	s0, s15
 800c2a0:	f7f8 ff06 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c2ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c2b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c2b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2cc:	eef0 7ae7 	vabs.f32	s15, s15
 800c2d0:	ee17 0a90 	vmov	r0, s15
 800c2d4:	f7f4 f960 	bl	8000598 <__aeabi_f2d>
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2e0:	f7f4 fadc 	bl	800089c <__aeabi_ddiv>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f4 f952 	bl	8000598 <__aeabi_f2d>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f4 face 	bl	800089c <__aeabi_ddiv>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	f04f 0200 	mov.w	r2, #0
 800c30c:	4b15      	ldr	r3, [pc, #84]	; (800c364 <slalomL+0x3c0>)
 800c30e:	f7f3 ffe5 	bl	80002dc <__adddf3>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c316:	4610      	mov	r0, r2
 800c318:	4619      	mov	r1, r3
 800c31a:	f7f4 fc6d 	bl	8000bf8 <__aeabi_d2f>
 800c31e:	4603      	mov	r3, r0
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	ee02 3a10 	vmov	s4, r3
 800c326:	edd7 1a01 	vldr	s3, [r7, #4]
 800c32a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c32e:	eef0 0a68 	vmov.f32	s1, s17
 800c332:	eeb0 0a48 	vmov.f32	s0, s16
 800c336:	f7f8 f86f 	bl	8004418 <straight_table2>
}
 800c33a:	bf00      	nop
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	ecbd 8b02 	vpop	{d8}
 800c344:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c348:	b004      	add	sp, #16
 800c34a:	4770      	bx	lr
 800c34c:	20000814 	.word	0x20000814
 800c350:	42340000 	.word	0x42340000
 800c354:	00000000 	.word	0x00000000
 800c358:	431b8000 	.word	0x431b8000
 800c35c:	43138000 	.word	0x43138000
 800c360:	42b40000 	.word	0x42b40000
 800c364:	408f4000 	.word	0x408f4000

0800c368 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c368:	b084      	sub	sp, #16
 800c36a:	b5b0      	push	{r4, r5, r7, lr}
 800c36c:	ed2d 8b02 	vpush	{d8}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c37c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c380:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c384:	2b01      	cmp	r3, #1
 800c386:	f040 80a5 	bne.w	800c4d4 <turn90R+0x16c>
		highspeed_mode = 1;
 800c38a:	4ba5      	ldr	r3, [pc, #660]	; (800c620 <turn90R+0x2b8>)
 800c38c:	2201      	movs	r2, #1
 800c38e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c390:	2301      	movs	r3, #1
 800c392:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c394:	2300      	movs	r3, #0
 800c396:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c3a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c3a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c3b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c3bc:	eddf 5a99 	vldr	s11, [pc, #612]	; 800c624 <turn90R+0x2bc>
 800c3c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	eeb0 2a47 	vmov.f32	s4, s14
 800c3ca:	eef0 1a46 	vmov.f32	s3, s12
 800c3ce:	eeb0 1a66 	vmov.f32	s2, s13
 800c3d2:	eddf 0a95 	vldr	s1, [pc, #596]	; 800c628 <turn90R+0x2c0>
 800c3d6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800c62c <turn90R+0x2c4>
 800c3da:	f7f8 f81d 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c3e2:	2302      	movs	r3, #2
 800c3e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c3ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c3f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c402:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c406:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c40a:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c624 <turn90R+0x2bc>
 800c40e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	eeb0 2a47 	vmov.f32	s4, s14
 800c418:	eef0 1a45 	vmov.f32	s3, s10
 800c41c:	eeb0 1a65 	vmov.f32	s2, s11
 800c420:	eef0 0a46 	vmov.f32	s1, s12
 800c424:	eeb0 0a66 	vmov.f32	s0, s13
 800c428:	f7f7 fff6 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c42c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c430:	2b01      	cmp	r3, #1
 800c432:	d10c      	bne.n	800c44e <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800c434:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c438:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c43c:	eeb0 1a47 	vmov.f32	s2, s14
 800c440:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800c630 <turn90R+0x2c8>
 800c444:	eeb0 0a67 	vmov.f32	s0, s15
 800c448:	f7f8 ff82 	bl	8005350 <mollifier_slalom_table>
 800c44c:	e015      	b.n	800c47a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c44e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c452:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c456:	eef1 7a67 	vneg.f32	s15, s15
 800c45a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c45e:	eef0 2a66 	vmov.f32	s5, s13
 800c462:	eeb0 2a67 	vmov.f32	s4, s15
 800c466:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c628 <turn90R+0x2c0>
 800c46a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c628 <turn90R+0x2c0>
 800c46e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c630 <turn90R+0x2c8>
 800c472:	eeb0 0a47 	vmov.f32	s0, s14
 800c476:	f7f8 fe1b 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c482:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c486:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c634 <turn90R+0x2cc>
 800c48a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c48e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c492:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c496:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c49a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c49e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c4a6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c4aa:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c624 <turn90R+0x2bc>
 800c4ae:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	eeb0 2a47 	vmov.f32	s4, s14
 800c4b8:	eef0 1a65 	vmov.f32	s3, s11
 800c4bc:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800c628 <turn90R+0x2c0>
 800c4c0:	eef0 0a46 	vmov.f32	s1, s12
 800c4c4:	eeb0 0a66 	vmov.f32	s0, s13
 800c4c8:	f7f7 ffa6 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800c4cc:	4b54      	ldr	r3, [pc, #336]	; (800c620 <turn90R+0x2b8>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c4d2:	e09c      	b.n	800c60e <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4f0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c500:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c504:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c508:	eddf 4a46 	vldr	s9, [pc, #280]	; 800c624 <turn90R+0x2bc>
 800c50c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	eeb0 2a47 	vmov.f32	s4, s14
 800c516:	eef0 1a45 	vmov.f32	s3, s10
 800c51a:	eeb0 1a65 	vmov.f32	s2, s11
 800c51e:	eef0 0a46 	vmov.f32	s1, s12
 800c522:	eeb0 0a66 	vmov.f32	s0, s13
 800c526:	f7f7 ff77 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c52a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d10c      	bne.n	800c54c <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800c532:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c536:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c53a:	eeb0 1a47 	vmov.f32	s2, s14
 800c53e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c630 <turn90R+0x2c8>
 800c542:	eeb0 0a67 	vmov.f32	s0, s15
 800c546:	f7f8 ff03 	bl	8005350 <mollifier_slalom_table>
 800c54a:	e015      	b.n	800c578 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c54c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c550:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c554:	eef1 7a67 	vneg.f32	s15, s15
 800c558:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c55c:	eef0 2a66 	vmov.f32	s5, s13
 800c560:	eeb0 2a67 	vmov.f32	s4, s15
 800c564:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c628 <turn90R+0x2c0>
 800c568:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c628 <turn90R+0x2c0>
 800c56c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800c630 <turn90R+0x2c8>
 800c570:	eeb0 0a47 	vmov.f32	s0, s14
 800c574:	f7f8 fd9c 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c578:	2301      	movs	r3, #1
 800c57a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c580:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c584:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c594:	edd7 7a01 	vldr	s15, [r7, #4]
 800c598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c59c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5a0:	eef0 7ae7 	vabs.f32	s15, s15
 800c5a4:	ee17 0a90 	vmov	r0, s15
 800c5a8:	f7f3 fff6 	bl	8000598 <__aeabi_f2d>
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5b4:	f7f4 f972 	bl	800089c <__aeabi_ddiv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	461d      	mov	r5, r3
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f3 ffe8 	bl	8000598 <__aeabi_f2d>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f4 f964 	bl	800089c <__aeabi_ddiv>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4619      	mov	r1, r3
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	4b15      	ldr	r3, [pc, #84]	; (800c638 <turn90R+0x2d0>)
 800c5e2:	f7f3 fe7b 	bl	80002dc <__adddf3>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7f4 fb03 	bl	8000bf8 <__aeabi_d2f>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	ee02 3a10 	vmov	s4, r3
 800c5fa:	edd7 1a01 	vldr	s3, [r7, #4]
 800c5fe:	ed97 1a01 	vldr	s2, [r7, #4]
 800c602:	eef0 0a68 	vmov.f32	s1, s17
 800c606:	eeb0 0a48 	vmov.f32	s0, s16
 800c60a:	f7f7 ff05 	bl	8004418 <straight_table2>
}
 800c60e:	bf00      	nop
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	ecbd 8b02 	vpop	{d8}
 800c618:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c61c:	b004      	add	sp, #16
 800c61e:	4770      	bx	lr
 800c620:	20000814 	.word	0x20000814
 800c624:	42340000 	.word	0x42340000
 800c628:	00000000 	.word	0x00000000
 800c62c:	42cd0000 	.word	0x42cd0000
 800c630:	c2b40000 	.word	0xc2b40000
 800c634:	42b40000 	.word	0x42b40000
 800c638:	408f4000 	.word	0x408f4000

0800c63c <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c63c:	b084      	sub	sp, #16
 800c63e:	b5b0      	push	{r4, r5, r7, lr}
 800c640:	ed2d 8b02 	vpush	{d8}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c64c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c650:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c654:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c658:	2b01      	cmp	r3, #1
 800c65a:	f040 80a3 	bne.w	800c7a4 <turn90L+0x168>
		highspeed_mode = 1;
 800c65e:	4ba3      	ldr	r3, [pc, #652]	; (800c8ec <turn90L+0x2b0>)
 800c660:	2201      	movs	r2, #1
 800c662:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c664:	2301      	movs	r3, #1
 800c666:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c668:	2300      	movs	r3, #0
 800c66a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c670:	2300      	movs	r3, #0
 800c672:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c674:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c678:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c67c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c680:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c688:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c68c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c690:	eddf 5a97 	vldr	s11, [pc, #604]	; 800c8f0 <turn90L+0x2b4>
 800c694:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	eeb0 2a47 	vmov.f32	s4, s14
 800c69e:	eef0 1a46 	vmov.f32	s3, s12
 800c6a2:	eeb0 1a66 	vmov.f32	s2, s13
 800c6a6:	eddf 0a93 	vldr	s1, [pc, #588]	; 800c8f4 <turn90L+0x2b8>
 800c6aa:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800c8f8 <turn90L+0x2bc>
 800c6ae:	f7f7 feb3 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6c2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6c6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6da:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6de:	eddf 4a84 	vldr	s9, [pc, #528]	; 800c8f0 <turn90L+0x2b4>
 800c6e2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	eeb0 2a47 	vmov.f32	s4, s14
 800c6ec:	eef0 1a45 	vmov.f32	s3, s10
 800c6f0:	eeb0 1a65 	vmov.f32	s2, s11
 800c6f4:	eef0 0a46 	vmov.f32	s1, s12
 800c6f8:	eeb0 0a66 	vmov.f32	s0, s13
 800c6fc:	f7f7 fe8c 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c700:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c704:	2b01      	cmp	r3, #1
 800c706:	d10c      	bne.n	800c722 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800c708:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c70c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c710:	eeb0 1a47 	vmov.f32	s2, s14
 800c714:	eddf 0a79 	vldr	s1, [pc, #484]	; 800c8fc <turn90L+0x2c0>
 800c718:	eeb0 0a67 	vmov.f32	s0, s15
 800c71c:	f7f8 fe18 	bl	8005350 <mollifier_slalom_table>
 800c720:	e013      	b.n	800c74a <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c722:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c726:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c72a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c72e:	eef0 2a66 	vmov.f32	s5, s13
 800c732:	eeb0 2a47 	vmov.f32	s4, s14
 800c736:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c8f4 <turn90L+0x2b8>
 800c73a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c8f4 <turn90L+0x2b8>
 800c73e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800c8fc <turn90L+0x2c0>
 800c742:	eeb0 0a67 	vmov.f32	s0, s15
 800c746:	f7f8 fcb3 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c752:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c756:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c8fc <turn90L+0x2c0>
 800c75a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c75e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c762:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c766:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c76a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c772:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c776:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c77a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800c8f0 <turn90L+0x2b4>
 800c77e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	eeb0 2a47 	vmov.f32	s4, s14
 800c788:	eef0 1a65 	vmov.f32	s3, s11
 800c78c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800c8f4 <turn90L+0x2b8>
 800c790:	eef0 0a46 	vmov.f32	s1, s12
 800c794:	eeb0 0a66 	vmov.f32	s0, s13
 800c798:	f7f7 fe3e 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800c79c:	4b53      	ldr	r3, [pc, #332]	; (800c8ec <turn90L+0x2b0>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c7a2:	e09a      	b.n	800c8da <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c7bc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c7c0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7d0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c7d4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7d8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c8f0 <turn90L+0x2b4>
 800c7dc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	eeb0 2a47 	vmov.f32	s4, s14
 800c7e6:	eef0 1a45 	vmov.f32	s3, s10
 800c7ea:	eeb0 1a65 	vmov.f32	s2, s11
 800c7ee:	eef0 0a46 	vmov.f32	s1, s12
 800c7f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c7f6:	f7f7 fe0f 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c7fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d10c      	bne.n	800c81c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800c802:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c806:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c80a:	eeb0 1a47 	vmov.f32	s2, s14
 800c80e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800c8fc <turn90L+0x2c0>
 800c812:	eeb0 0a67 	vmov.f32	s0, s15
 800c816:	f7f8 fd9b 	bl	8005350 <mollifier_slalom_table>
 800c81a:	e013      	b.n	800c844 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c81c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c820:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c824:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c828:	eef0 2a66 	vmov.f32	s5, s13
 800c82c:	eeb0 2a47 	vmov.f32	s4, s14
 800c830:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c8f4 <turn90L+0x2b8>
 800c834:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c8f4 <turn90L+0x2b8>
 800c838:	eddf 0a30 	vldr	s1, [pc, #192]	; 800c8fc <turn90L+0x2c0>
 800c83c:	eeb0 0a67 	vmov.f32	s0, s15
 800c840:	f7f8 fc36 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c844:	2301      	movs	r3, #1
 800c846:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c84c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c850:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c854:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c85c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c860:	edd7 7a01 	vldr	s15, [r7, #4]
 800c864:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c86c:	eef0 7ae7 	vabs.f32	s15, s15
 800c870:	ee17 0a90 	vmov	r0, s15
 800c874:	f7f3 fe90 	bl	8000598 <__aeabi_f2d>
 800c878:	f04f 0200 	mov.w	r2, #0
 800c87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c880:	f7f4 f80c 	bl	800089c <__aeabi_ddiv>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4614      	mov	r4, r2
 800c88a:	461d      	mov	r5, r3
 800c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88e:	4618      	mov	r0, r3
 800c890:	f7f3 fe82 	bl	8000598 <__aeabi_f2d>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fffe 	bl	800089c <__aeabi_ddiv>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	f04f 0200 	mov.w	r2, #0
 800c8ac:	4b14      	ldr	r3, [pc, #80]	; (800c900 <turn90L+0x2c4>)
 800c8ae:	f7f3 fd15 	bl	80002dc <__adddf3>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f7f4 f99d 	bl	8000bf8 <__aeabi_d2f>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	ee02 3a10 	vmov	s4, r3
 800c8c6:	edd7 1a01 	vldr	s3, [r7, #4]
 800c8ca:	ed97 1a01 	vldr	s2, [r7, #4]
 800c8ce:	eef0 0a68 	vmov.f32	s1, s17
 800c8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c8d6:	f7f7 fd9f 	bl	8004418 <straight_table2>
}
 800c8da:	bf00      	nop
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	ecbd 8b02 	vpop	{d8}
 800c8e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c8e8:	b004      	add	sp, #16
 800c8ea:	4770      	bx	lr
 800c8ec:	20000814 	.word	0x20000814
 800c8f0:	42340000 	.word	0x42340000
 800c8f4:	00000000 	.word	0x00000000
 800c8f8:	42cd0000 	.word	0x42cd0000
 800c8fc:	42b40000 	.word	0x42b40000
 800c900:	408f4000 	.word	0x408f4000

0800c904 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c904:	b084      	sub	sp, #16
 800c906:	b5b0      	push	{r4, r5, r7, lr}
 800c908:	ed2d 8b02 	vpush	{d8}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c918:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c91c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c920:	2b01      	cmp	r3, #1
 800c922:	f040 80a5 	bne.w	800ca70 <turn180R+0x16c>
		highspeed_mode = 1;
 800c926:	4ba5      	ldr	r3, [pc, #660]	; (800cbbc <turn180R+0x2b8>)
 800c928:	2201      	movs	r2, #1
 800c92a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c92c:	2301      	movs	r3, #1
 800c92e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c930:	2300      	movs	r3, #0
 800c932:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c938:	2300      	movs	r3, #0
 800c93a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c93c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c940:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c944:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c948:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c94c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c950:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c954:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c958:	eddf 5a99 	vldr	s11, [pc, #612]	; 800cbc0 <turn180R+0x2bc>
 800c95c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	eeb0 2a47 	vmov.f32	s4, s14
 800c966:	eef0 1a46 	vmov.f32	s3, s12
 800c96a:	eeb0 1a66 	vmov.f32	s2, s13
 800c96e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800cbc4 <turn180R+0x2c0>
 800c972:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800cbc8 <turn180R+0x2c4>
 800c976:	f7f7 fd4f 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c97e:	2302      	movs	r3, #2
 800c980:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c982:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c986:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c98a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c98e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c992:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c996:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c99a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c99e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9a2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9a6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cbc0 <turn180R+0x2bc>
 800c9aa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	eeb0 2a47 	vmov.f32	s4, s14
 800c9b4:	eef0 1a45 	vmov.f32	s3, s10
 800c9b8:	eeb0 1a65 	vmov.f32	s2, s11
 800c9bc:	eef0 0a46 	vmov.f32	s1, s12
 800c9c0:	eeb0 0a66 	vmov.f32	s0, s13
 800c9c4:	f7f7 fd28 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800c9c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10c      	bne.n	800c9ea <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800c9d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9d8:	eeb0 1a47 	vmov.f32	s2, s14
 800c9dc:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800cbcc <turn180R+0x2c8>
 800c9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c9e4:	f7f8 fcb4 	bl	8005350 <mollifier_slalom_table>
 800c9e8:	e015      	b.n	800ca16 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c9ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c9f2:	eef1 7a67 	vneg.f32	s15, s15
 800c9f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c9fa:	eef0 2a66 	vmov.f32	s5, s13
 800c9fe:	eeb0 2a67 	vmov.f32	s4, s15
 800ca02:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cbc4 <turn180R+0x2c0>
 800ca06:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cbc4 <turn180R+0x2c0>
 800ca0a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cbcc <turn180R+0x2c8>
 800ca0e:	eeb0 0a47 	vmov.f32	s0, s14
 800ca12:	f7f8 fb4d 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca22:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cbd0 <turn180R+0x2cc>
 800ca26:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca3e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca42:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca46:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cbc0 <turn180R+0x2bc>
 800ca4a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	eeb0 2a47 	vmov.f32	s4, s14
 800ca54:	eef0 1a65 	vmov.f32	s3, s11
 800ca58:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800cbc4 <turn180R+0x2c0>
 800ca5c:	eef0 0a46 	vmov.f32	s1, s12
 800ca60:	eeb0 0a66 	vmov.f32	s0, s13
 800ca64:	f7f7 fcd8 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800ca68:	4b54      	ldr	r3, [pc, #336]	; (800cbbc <turn180R+0x2b8>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ca6e:	e09c      	b.n	800cbaa <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ca70:	2300      	movs	r3, #0
 800ca72:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca80:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca88:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca8c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca9c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caa0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800caa4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800cbc0 <turn180R+0x2bc>
 800caa8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	eeb0 2a47 	vmov.f32	s4, s14
 800cab2:	eef0 1a45 	vmov.f32	s3, s10
 800cab6:	eeb0 1a65 	vmov.f32	s2, s11
 800caba:	eef0 0a46 	vmov.f32	s1, s12
 800cabe:	eeb0 0a66 	vmov.f32	s0, s13
 800cac2:	f7f7 fca9 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800cac6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d10c      	bne.n	800cae8 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800cace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cad2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cad6:	eeb0 1a47 	vmov.f32	s2, s14
 800cada:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cbcc <turn180R+0x2c8>
 800cade:	eeb0 0a67 	vmov.f32	s0, s15
 800cae2:	f7f8 fc35 	bl	8005350 <mollifier_slalom_table>
 800cae6:	e015      	b.n	800cb14 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cae8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800caf0:	eef1 7a67 	vneg.f32	s15, s15
 800caf4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800caf8:	eef0 2a66 	vmov.f32	s5, s13
 800cafc:	eeb0 2a67 	vmov.f32	s4, s15
 800cb00:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cbc4 <turn180R+0x2c0>
 800cb04:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cbc4 <turn180R+0x2c0>
 800cb08:	eddf 0a30 	vldr	s1, [pc, #192]	; 800cbcc <turn180R+0x2c8>
 800cb0c:	eeb0 0a47 	vmov.f32	s0, s14
 800cb10:	f7f8 face 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb14:	2301      	movs	r3, #1
 800cb16:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb1c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb20:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb30:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb3c:	eef0 7ae7 	vabs.f32	s15, s15
 800cb40:	ee17 0a90 	vmov	r0, s15
 800cb44:	f7f3 fd28 	bl	8000598 <__aeabi_f2d>
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb50:	f7f3 fea4 	bl	800089c <__aeabi_ddiv>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4614      	mov	r4, r2
 800cb5a:	461d      	mov	r5, r3
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f3 fd1a 	bl	8000598 <__aeabi_f2d>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4620      	mov	r0, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7f3 fe96 	bl	800089c <__aeabi_ddiv>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4610      	mov	r0, r2
 800cb76:	4619      	mov	r1, r3
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <turn180R+0x2d0>)
 800cb7e:	f7f3 fbad 	bl	80002dc <__adddf3>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb86:	4610      	mov	r0, r2
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7f4 f835 	bl	8000bf8 <__aeabi_d2f>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	ee02 3a10 	vmov	s4, r3
 800cb96:	edd7 1a01 	vldr	s3, [r7, #4]
 800cb9a:	ed97 1a01 	vldr	s2, [r7, #4]
 800cb9e:	eef0 0a68 	vmov.f32	s1, s17
 800cba2:	eeb0 0a48 	vmov.f32	s0, s16
 800cba6:	f7f7 fc37 	bl	8004418 <straight_table2>
}
 800cbaa:	bf00      	nop
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	ecbd 8b02 	vpop	{d8}
 800cbb4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cbb8:	b004      	add	sp, #16
 800cbba:	4770      	bx	lr
 800cbbc:	20000814 	.word	0x20000814
 800cbc0:	42340000 	.word	0x42340000
 800cbc4:	00000000 	.word	0x00000000
 800cbc8:	42cd0000 	.word	0x42cd0000
 800cbcc:	c3340000 	.word	0xc3340000
 800cbd0:	42b40000 	.word	0x42b40000
 800cbd4:	408f4000 	.word	0x408f4000

0800cbd8 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800cbd8:	b084      	sub	sp, #16
 800cbda:	b5b0      	push	{r4, r5, r7, lr}
 800cbdc:	ed2d 8b02 	vpush	{d8}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cbe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cbec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cbf0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	f040 80a3 	bne.w	800cd40 <turn180L+0x168>
		highspeed_mode = 1;
 800cbfa:	4ba3      	ldr	r3, [pc, #652]	; (800ce88 <turn180L+0x2b0>)
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800cc00:	2301      	movs	r3, #1
 800cc02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cc10:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc14:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc24:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc28:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cc2c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ce8c <turn180L+0x2b4>
 800cc30:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	eeb0 2a47 	vmov.f32	s4, s14
 800cc3a:	eef0 1a46 	vmov.f32	s3, s12
 800cc3e:	eeb0 1a66 	vmov.f32	s2, s13
 800cc42:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ce90 <turn180L+0x2b8>
 800cc46:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ce94 <turn180L+0x2bc>
 800cc4a:	f7f7 fbe5 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cc52:	2302      	movs	r3, #2
 800cc54:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc56:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cc5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cc62:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc72:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cc76:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc7a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ce8c <turn180L+0x2b4>
 800cc7e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	eeb0 2a47 	vmov.f32	s4, s14
 800cc88:	eef0 1a45 	vmov.f32	s3, s10
 800cc8c:	eeb0 1a65 	vmov.f32	s2, s11
 800cc90:	eef0 0a46 	vmov.f32	s1, s12
 800cc94:	eeb0 0a66 	vmov.f32	s0, s13
 800cc98:	f7f7 fbbe 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800cc9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d10c      	bne.n	800ccbe <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800cca4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cca8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccac:	eeb0 1a47 	vmov.f32	s2, s14
 800ccb0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ce98 <turn180L+0x2c0>
 800ccb4:	eeb0 0a67 	vmov.f32	s0, s15
 800ccb8:	f7f8 fb4a 	bl	8005350 <mollifier_slalom_table>
 800ccbc:	e013      	b.n	800cce6 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ccbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccc6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ccca:	eef0 2a66 	vmov.f32	s5, s13
 800ccce:	eeb0 2a47 	vmov.f32	s4, s14
 800ccd2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ce90 <turn180L+0x2b8>
 800ccd6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ce90 <turn180L+0x2b8>
 800ccda:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ce98 <turn180L+0x2c0>
 800ccde:	eeb0 0a67 	vmov.f32	s0, s15
 800cce2:	f7f8 f9e5 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ccee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ccf2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ce9c <turn180L+0x2c4>
 800ccf6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ccfa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccfe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd0e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd12:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd16:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ce8c <turn180L+0x2b4>
 800cd1a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	eeb0 2a47 	vmov.f32	s4, s14
 800cd24:	eef0 1a65 	vmov.f32	s3, s11
 800cd28:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ce90 <turn180L+0x2b8>
 800cd2c:	eef0 0a46 	vmov.f32	s1, s12
 800cd30:	eeb0 0a66 	vmov.f32	s0, s13
 800cd34:	f7f7 fb70 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800cd38:	4b53      	ldr	r3, [pc, #332]	; (800ce88 <turn180L+0x2b0>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd3e:	e09a      	b.n	800ce76 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800cd40:	2300      	movs	r3, #0
 800cd42:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd50:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd58:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd5c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd6c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd70:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd74:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ce8c <turn180L+0x2b4>
 800cd78:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	eeb0 2a47 	vmov.f32	s4, s14
 800cd82:	eef0 1a45 	vmov.f32	s3, s10
 800cd86:	eeb0 1a65 	vmov.f32	s2, s11
 800cd8a:	eef0 0a46 	vmov.f32	s1, s12
 800cd8e:	eeb0 0a66 	vmov.f32	s0, s13
 800cd92:	f7f7 fb41 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800cd96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d10c      	bne.n	800cdb8 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800cd9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cda2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cda6:	eeb0 1a47 	vmov.f32	s2, s14
 800cdaa:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ce98 <turn180L+0x2c0>
 800cdae:	eeb0 0a67 	vmov.f32	s0, s15
 800cdb2:	f7f8 facd 	bl	8005350 <mollifier_slalom_table>
 800cdb6:	e013      	b.n	800cde0 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cdb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdbc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdc0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cdc4:	eef0 2a66 	vmov.f32	s5, s13
 800cdc8:	eeb0 2a47 	vmov.f32	s4, s14
 800cdcc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ce90 <turn180L+0x2b8>
 800cdd0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ce90 <turn180L+0x2b8>
 800cdd4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ce98 <turn180L+0x2c0>
 800cdd8:	eeb0 0a67 	vmov.f32	s0, s15
 800cddc:	f7f8 f968 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cde0:	2301      	movs	r3, #1
 800cde2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cde8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cdec:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cdf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce08:	eef0 7ae7 	vabs.f32	s15, s15
 800ce0c:	ee17 0a90 	vmov	r0, s15
 800ce10:	f7f3 fbc2 	bl	8000598 <__aeabi_f2d>
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce1c:	f7f3 fd3e 	bl	800089c <__aeabi_ddiv>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	461d      	mov	r5, r3
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7f3 fbb4 	bl	8000598 <__aeabi_f2d>
 800ce30:	4602      	mov	r2, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7f3 fd30 	bl	800089c <__aeabi_ddiv>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4610      	mov	r0, r2
 800ce42:	4619      	mov	r1, r3
 800ce44:	f04f 0200 	mov.w	r2, #0
 800ce48:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <turn180L+0x2c8>)
 800ce4a:	f7f3 fa47 	bl	80002dc <__adddf3>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ce52:	4610      	mov	r0, r2
 800ce54:	4619      	mov	r1, r3
 800ce56:	f7f3 fecf 	bl	8000bf8 <__aeabi_d2f>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	ee02 3a10 	vmov	s4, r3
 800ce62:	edd7 1a01 	vldr	s3, [r7, #4]
 800ce66:	ed97 1a01 	vldr	s2, [r7, #4]
 800ce6a:	eef0 0a68 	vmov.f32	s1, s17
 800ce6e:	eeb0 0a48 	vmov.f32	s0, s16
 800ce72:	f7f7 fad1 	bl	8004418 <straight_table2>
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	ecbd 8b02 	vpop	{d8}
 800ce80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ce84:	b004      	add	sp, #16
 800ce86:	4770      	bx	lr
 800ce88:	20000814 	.word	0x20000814
 800ce8c:	42340000 	.word	0x42340000
 800ce90:	00000000 	.word	0x00000000
 800ce94:	42cd0000 	.word	0x42cd0000
 800ce98:	43340000 	.word	0x43340000
 800ce9c:	42b40000 	.word	0x42b40000
 800cea0:	408f4000 	.word	0x408f4000
 800cea4:	00000000 	.word	0x00000000

0800cea8 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800cea8:	b084      	sub	sp, #16
 800ceaa:	b5b0      	push	{r4, r5, r7, lr}
 800ceac:	ed2d 8b02 	vpush	{d8}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ceb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cebc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cec0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	f040 80ae 	bne.w	800d026 <turn45inR+0x17e>
		highspeed_mode = 1;
 800ceca:	4bdd      	ldr	r3, [pc, #884]	; (800d240 <turn45inR+0x398>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ced0:	2301      	movs	r3, #1
 800ced2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cedc:	2300      	movs	r3, #0
 800cede:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cee0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cee4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cee8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cef4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cef8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cefc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800d244 <turn45inR+0x39c>
 800cf00:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	eeb0 2a47 	vmov.f32	s4, s14
 800cf0a:	eef0 1a46 	vmov.f32	s3, s12
 800cf0e:	eeb0 1a66 	vmov.f32	s2, s13
 800cf12:	eddf 0acf 	vldr	s1, [pc, #828]	; 800d250 <turn45inR+0x3a8>
 800cf16:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800d248 <turn45inR+0x3a0>
 800cf1a:	f7f7 fa7d 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cf22:	2302      	movs	r3, #2
 800cf24:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf2a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf2e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf32:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf42:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf46:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf4a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800d244 <turn45inR+0x39c>
 800cf4e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	eeb0 2a47 	vmov.f32	s4, s14
 800cf58:	eef0 1a45 	vmov.f32	s3, s10
 800cf5c:	eeb0 1a65 	vmov.f32	s2, s11
 800cf60:	eef0 0a46 	vmov.f32	s1, s12
 800cf64:	eeb0 0a66 	vmov.f32	s0, s13
 800cf68:	f7f7 fa56 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800cf6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d10c      	bne.n	800cf8e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800cf74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf7c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf80:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d254 <turn45inR+0x3ac>
 800cf84:	eeb0 0a67 	vmov.f32	s0, s15
 800cf88:	f7f8 f9e2 	bl	8005350 <mollifier_slalom_table>
 800cf8c:	e015      	b.n	800cfba <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf96:	eef1 7a67 	vneg.f32	s15, s15
 800cf9a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf9e:	eef0 2a66 	vmov.f32	s5, s13
 800cfa2:	eeb0 2a67 	vmov.f32	s4, s15
 800cfa6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800d250 <turn45inR+0x3a8>
 800cfaa:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800d250 <turn45inR+0x3a8>
 800cfae:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800d254 <turn45inR+0x3ac>
 800cfb2:	eeb0 0a47 	vmov.f32	s0, s14
 800cfb6:	f7f8 f87b 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7f3 fae7 	bl	8000598 <__aeabi_f2d>
 800cfca:	a39b      	add	r3, pc, #620	; (adr r3, 800d238 <turn45inR+0x390>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f984 	bl	80002dc <__adddf3>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4610      	mov	r0, r2
 800cfda:	4619      	mov	r1, r3
 800cfdc:	f7f3 fe0c 	bl	8000bf8 <__aeabi_d2f>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cfe6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cff6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cffa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cffe:	eddf 5a91 	vldr	s11, [pc, #580]	; 800d244 <turn45inR+0x39c>
 800d002:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	eeb0 2a47 	vmov.f32	s4, s14
 800d00c:	eef0 1a46 	vmov.f32	s3, s12
 800d010:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800d250 <turn45inR+0x3a8>
 800d014:	eef0 0a66 	vmov.f32	s1, s13
 800d018:	ee00 3a10 	vmov	s0, r3
 800d01c:	f7f7 f9fc 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800d020:	4b87      	ldr	r3, [pc, #540]	; (800d240 <turn45inR+0x398>)
 800d022:	2200      	movs	r2, #0
 800d024:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800d026:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f040 809d 	bne.w	800d16a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800d030:	2300      	movs	r3, #0
 800d032:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d034:	2300      	movs	r3, #0
 800d036:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800d038:	2302      	movs	r3, #2
 800d03a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d040:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d044:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d048:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d04c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d060:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d064:	eddf 4a77 	vldr	s9, [pc, #476]	; 800d244 <turn45inR+0x39c>
 800d068:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	eeb0 2a47 	vmov.f32	s4, s14
 800d072:	eef0 1a45 	vmov.f32	s3, s10
 800d076:	eeb0 1a65 	vmov.f32	s2, s11
 800d07a:	eef0 0a46 	vmov.f32	s1, s12
 800d07e:	eeb0 0a66 	vmov.f32	s0, s13
 800d082:	f7f7 f9c9 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d086:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d10c      	bne.n	800d0a8 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d08e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d092:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d096:	eeb0 1a47 	vmov.f32	s2, s14
 800d09a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800d254 <turn45inR+0x3ac>
 800d09e:	eeb0 0a67 	vmov.f32	s0, s15
 800d0a2:	f7f8 f955 	bl	8005350 <mollifier_slalom_table>
 800d0a6:	e015      	b.n	800d0d4 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d0a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0b0:	eef1 7a67 	vneg.f32	s15, s15
 800d0b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0b8:	eef0 2a66 	vmov.f32	s5, s13
 800d0bc:	eeb0 2a67 	vmov.f32	s4, s15
 800d0c0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800d250 <turn45inR+0x3a8>
 800d0c4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800d250 <turn45inR+0x3a8>
 800d0c8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800d254 <turn45inR+0x3ac>
 800d0cc:	eeb0 0a47 	vmov.f32	s0, s14
 800d0d0:	f7f7 ffee 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d0dc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d0e0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d0e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d0f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0fc:	eef0 7ae7 	vabs.f32	s15, s15
 800d100:	ee17 0a90 	vmov	r0, s15
 800d104:	f7f3 fa48 	bl	8000598 <__aeabi_f2d>
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d110:	f7f3 fbc4 	bl	800089c <__aeabi_ddiv>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	461d      	mov	r5, r3
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f3 fa3a 	bl	8000598 <__aeabi_f2d>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4620      	mov	r0, r4
 800d12a:	4629      	mov	r1, r5
 800d12c:	f7f3 fbb6 	bl	800089c <__aeabi_ddiv>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4610      	mov	r0, r2
 800d136:	4619      	mov	r1, r3
 800d138:	f04f 0200 	mov.w	r2, #0
 800d13c:	4b43      	ldr	r3, [pc, #268]	; (800d24c <turn45inR+0x3a4>)
 800d13e:	f7f3 f8cd 	bl	80002dc <__adddf3>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d146:	4610      	mov	r0, r2
 800d148:	4619      	mov	r1, r3
 800d14a:	f7f3 fd55 	bl	8000bf8 <__aeabi_d2f>
 800d14e:	4603      	mov	r3, r0
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	ee02 3a10 	vmov	s4, r3
 800d156:	edd7 1a01 	vldr	s3, [r7, #4]
 800d15a:	ed97 1a01 	vldr	s2, [r7, #4]
 800d15e:	eef0 0a68 	vmov.f32	s1, s17
 800d162:	eeb0 0a48 	vmov.f32	s0, s16
 800d166:	f7f7 f957 	bl	8004418 <straight_table2>

	}
	if (test_mode >= 2) {
 800d16a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d16e:	2b01      	cmp	r3, #1
 800d170:	f240 80d0 	bls.w	800d314 <turn45inR+0x46c>

		highspeed_mode = 1;
 800d174:	4b32      	ldr	r3, [pc, #200]	; (800d240 <turn45inR+0x398>)
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800d17a:	2301      	movs	r3, #1
 800d17c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d17e:	2300      	movs	r3, #0
 800d180:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d186:	2300      	movs	r3, #0
 800d188:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d18a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d18e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d192:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d196:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d19e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d1a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d1a6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800d244 <turn45inR+0x39c>
 800d1aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	eeb0 2a47 	vmov.f32	s4, s14
 800d1b4:	eef0 1a46 	vmov.f32	s3, s12
 800d1b8:	eeb0 1a66 	vmov.f32	s2, s13
 800d1bc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d250 <turn45inR+0x3a8>
 800d1c0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800d248 <turn45inR+0x3a0>
 800d1c4:	f7f7 f928 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d1d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d1d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1f4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800d244 <turn45inR+0x39c>
 800d1f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d202:	eef0 1a45 	vmov.f32	s3, s10
 800d206:	eeb0 1a65 	vmov.f32	s2, s11
 800d20a:	eef0 0a46 	vmov.f32	s1, s12
 800d20e:	eeb0 0a66 	vmov.f32	s0, s13
 800d212:	f7f7 f901 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d216:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d11c      	bne.n	800d258 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d21e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d222:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d226:	eeb0 1a47 	vmov.f32	s2, s14
 800d22a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d254 <turn45inR+0x3ac>
 800d22e:	eeb0 0a67 	vmov.f32	s0, s15
 800d232:	f7f8 f88d 	bl	8005350 <mollifier_slalom_table>
 800d236:	e025      	b.n	800d284 <turn45inR+0x3dc>
 800d238:	c022ec18 	.word	0xc022ec18
 800d23c:	405fd1de 	.word	0x405fd1de
 800d240:	20000814 	.word	0x20000814
 800d244:	42340000 	.word	0x42340000
 800d248:	42cd0000 	.word	0x42cd0000
 800d24c:	408f4000 	.word	0x408f4000
 800d250:	00000000 	.word	0x00000000
 800d254:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d258:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d25c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d260:	eef1 7a67 	vneg.f32	s15, s15
 800d264:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d268:	eef0 2a66 	vmov.f32	s5, s13
 800d26c:	eeb0 2a67 	vmov.f32	s4, s15
 800d270:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d250 <turn45inR+0x3a8>
 800d274:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d250 <turn45inR+0x3a8>
 800d278:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d254 <turn45inR+0x3ac>
 800d27c:	eeb0 0a47 	vmov.f32	s0, s14
 800d280:	f7f7 ff16 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d284:	2300      	movs	r3, #0
 800d286:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d28c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d290:	3b02      	subs	r3, #2
 800d292:	4618      	mov	r0, r3
 800d294:	f7f3 f96e 	bl	8000574 <__aeabi_i2d>
 800d298:	a325      	add	r3, pc, #148	; (adr r3, 800d330 <turn45inR+0x488>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f3 f9d3 	bl	8000648 <__aeabi_dmul>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4614      	mov	r4, r2
 800d2a8:	461d      	mov	r5, r3
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f3 f973 	bl	8000598 <__aeabi_f2d>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	f7f3 f80f 	bl	80002dc <__adddf3>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	f7f3 fc97 	bl	8000bf8 <__aeabi_d2f>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d2d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2e4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d2e8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2ec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800d328 <turn45inR+0x480>
 800d2f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	eeb0 2a47 	vmov.f32	s4, s14
 800d2fa:	eef0 1a65 	vmov.f32	s3, s11
 800d2fe:	eeb0 1a46 	vmov.f32	s2, s12
 800d302:	eef0 0a66 	vmov.f32	s1, s13
 800d306:	ee00 3a10 	vmov	s0, r3
 800d30a:	f7f7 f885 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800d30e:	4b07      	ldr	r3, [pc, #28]	; (800d32c <turn45inR+0x484>)
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
	}

}
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	ecbd 8b02 	vpop	{d8}
 800d31e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d322:	b004      	add	sp, #16
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	42340000 	.word	0x42340000
 800d32c:	20000814 	.word	0x20000814
 800d330:	c022ec18 	.word	0xc022ec18
 800d334:	404fd1de 	.word	0x404fd1de

0800d338 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800d338:	b084      	sub	sp, #16
 800d33a:	b5b0      	push	{r4, r5, r7, lr}
 800d33c:	ed2d 8b02 	vpush	{d8}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d34c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d354:	2b01      	cmp	r3, #1
 800d356:	f040 80ac 	bne.w	800d4b2 <turn45inL+0x17a>
		highspeed_mode = 1;
 800d35a:	4bdb      	ldr	r3, [pc, #876]	; (800d6c8 <turn45inL+0x390>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800d360:	2301      	movs	r3, #1
 800d362:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d364:	2300      	movs	r3, #0
 800d366:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d370:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d378:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d37c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d380:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d384:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d388:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d38c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800d6d8 <turn45inL+0x3a0>
 800d390:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	eeb0 2a47 	vmov.f32	s4, s14
 800d39a:	eef0 1a46 	vmov.f32	s3, s12
 800d39e:	eeb0 1a66 	vmov.f32	s2, s13
 800d3a2:	eddf 0acc 	vldr	s1, [pc, #816]	; 800d6d4 <turn45inL+0x39c>
 800d3a6:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800d6cc <turn45inL+0x394>
 800d3aa:	f7f7 f835 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d3ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3be:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d3c2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3d2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d3d6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d3da:	eddf 4abf 	vldr	s9, [pc, #764]	; 800d6d8 <turn45inL+0x3a0>
 800d3de:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	eeb0 2a47 	vmov.f32	s4, s14
 800d3e8:	eef0 1a45 	vmov.f32	s3, s10
 800d3ec:	eeb0 1a65 	vmov.f32	s2, s11
 800d3f0:	eef0 0a46 	vmov.f32	s1, s12
 800d3f4:	eeb0 0a66 	vmov.f32	s0, s13
 800d3f8:	f7f7 f80e 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d3fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d400:	2b01      	cmp	r3, #1
 800d402:	d10c      	bne.n	800d41e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d408:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d40c:	eeb0 1a47 	vmov.f32	s2, s14
 800d410:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d6d8 <turn45inL+0x3a0>
 800d414:	eeb0 0a67 	vmov.f32	s0, s15
 800d418:	f7f7 ff9a 	bl	8005350 <mollifier_slalom_table>
 800d41c:	e013      	b.n	800d446 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d41e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d422:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d426:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d42a:	eef0 2a66 	vmov.f32	s5, s13
 800d42e:	eeb0 2a47 	vmov.f32	s4, s14
 800d432:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800d6d4 <turn45inL+0x39c>
 800d436:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800d6d4 <turn45inL+0x39c>
 800d43a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800d6d8 <turn45inL+0x3a0>
 800d43e:	eeb0 0a67 	vmov.f32	s0, s15
 800d442:	f7f7 fe35 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d446:	2300      	movs	r3, #0
 800d448:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	4618      	mov	r0, r3
 800d452:	f7f3 f8a1 	bl	8000598 <__aeabi_f2d>
 800d456:	a39a      	add	r3, pc, #616	; (adr r3, 800d6c0 <turn45inL+0x388>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	f7f2 ff3e 	bl	80002dc <__adddf3>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4610      	mov	r0, r2
 800d466:	4619      	mov	r1, r3
 800d468:	f7f3 fbc6 	bl	8000bf8 <__aeabi_d2f>
 800d46c:	4603      	mov	r3, r0
 800d46e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d472:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d476:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d47a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d47e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d482:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d486:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d48a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800d6d8 <turn45inL+0x3a0>
 800d48e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	eeb0 2a47 	vmov.f32	s4, s14
 800d498:	eef0 1a46 	vmov.f32	s3, s12
 800d49c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800d6d4 <turn45inL+0x39c>
 800d4a0:	eef0 0a66 	vmov.f32	s1, s13
 800d4a4:	ee00 3a10 	vmov	s0, r3
 800d4a8:	f7f6 ffb6 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800d4ac:	4b86      	ldr	r3, [pc, #536]	; (800d6c8 <turn45inL+0x390>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800d4b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f040 809b 	bne.w	800d5f2 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800d4c4:	2302      	movs	r3, #2
 800d4c6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d4d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d4d8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4e8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d4ec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d4f0:	eddf 4a79 	vldr	s9, [pc, #484]	; 800d6d8 <turn45inL+0x3a0>
 800d4f4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	eeb0 2a47 	vmov.f32	s4, s14
 800d4fe:	eef0 1a45 	vmov.f32	s3, s10
 800d502:	eeb0 1a65 	vmov.f32	s2, s11
 800d506:	eef0 0a46 	vmov.f32	s1, s12
 800d50a:	eeb0 0a66 	vmov.f32	s0, s13
 800d50e:	f7f6 ff83 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d512:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d516:	2b01      	cmp	r3, #1
 800d518:	d10c      	bne.n	800d534 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d51e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d522:	eeb0 1a47 	vmov.f32	s2, s14
 800d526:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800d6d8 <turn45inL+0x3a0>
 800d52a:	eeb0 0a67 	vmov.f32	s0, s15
 800d52e:	f7f7 ff0f 	bl	8005350 <mollifier_slalom_table>
 800d532:	e013      	b.n	800d55c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d534:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d538:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d53c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d540:	eef0 2a66 	vmov.f32	s5, s13
 800d544:	eeb0 2a47 	vmov.f32	s4, s14
 800d548:	eddf 1a62 	vldr	s3, [pc, #392]	; 800d6d4 <turn45inL+0x39c>
 800d54c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800d6d4 <turn45inL+0x39c>
 800d550:	eddf 0a61 	vldr	s1, [pc, #388]	; 800d6d8 <turn45inL+0x3a0>
 800d554:	eeb0 0a67 	vmov.f32	s0, s15
 800d558:	f7f7 fdaa 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d564:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d568:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d56c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d570:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d578:	edd7 7a01 	vldr	s15, [r7, #4]
 800d57c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d584:	eef0 7ae7 	vabs.f32	s15, s15
 800d588:	ee17 0a90 	vmov	r0, s15
 800d58c:	f7f3 f804 	bl	8000598 <__aeabi_f2d>
 800d590:	f04f 0200 	mov.w	r2, #0
 800d594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d598:	f7f3 f980 	bl	800089c <__aeabi_ddiv>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4614      	mov	r4, r2
 800d5a2:	461d      	mov	r5, r3
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7f2 fff6 	bl	8000598 <__aeabi_f2d>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	f7f3 f972 	bl	800089c <__aeabi_ddiv>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4610      	mov	r0, r2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	4b42      	ldr	r3, [pc, #264]	; (800d6d0 <turn45inL+0x398>)
 800d5c6:	f7f2 fe89 	bl	80002dc <__adddf3>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f7f3 fb11 	bl	8000bf8 <__aeabi_d2f>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	ee02 3a10 	vmov	s4, r3
 800d5de:	edd7 1a01 	vldr	s3, [r7, #4]
 800d5e2:	ed97 1a01 	vldr	s2, [r7, #4]
 800d5e6:	eef0 0a68 	vmov.f32	s1, s17
 800d5ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d5ee:	f7f6 ff13 	bl	8004418 <straight_table2>

	}
	if (test_mode >= 2) {
 800d5f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	f240 80cc 	bls.w	800d794 <turn45inL+0x45c>

		highspeed_mode = 1;
 800d5fc:	4b32      	ldr	r3, [pc, #200]	; (800d6c8 <turn45inL+0x390>)
 800d5fe:	2201      	movs	r2, #1
 800d600:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800d602:	2301      	movs	r3, #1
 800d604:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d606:	2300      	movs	r3, #0
 800d608:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d60e:	2300      	movs	r3, #0
 800d610:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d612:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d616:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d61a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d61e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d622:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d626:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d62a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d62e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800d6d8 <turn45inL+0x3a0>
 800d632:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	eeb0 2a47 	vmov.f32	s4, s14
 800d63c:	eef0 1a46 	vmov.f32	s3, s12
 800d640:	eeb0 1a66 	vmov.f32	s2, s13
 800d644:	eddf 0a23 	vldr	s1, [pc, #140]	; 800d6d4 <turn45inL+0x39c>
 800d648:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800d6cc <turn45inL+0x394>
 800d64c:	f7f6 fee4 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800d650:	2300      	movs	r3, #0
 800d652:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800d654:	2302      	movs	r3, #2
 800d656:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d658:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d65c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d660:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d664:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d668:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d66c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d670:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d674:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d678:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d67c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800d6d8 <turn45inL+0x3a0>
 800d680:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	eeb0 2a47 	vmov.f32	s4, s14
 800d68a:	eef0 1a45 	vmov.f32	s3, s10
 800d68e:	eeb0 1a65 	vmov.f32	s2, s11
 800d692:	eef0 0a46 	vmov.f32	s1, s12
 800d696:	eeb0 0a66 	vmov.f32	s0, s13
 800d69a:	f7f6 febd 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d69e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d11a      	bne.n	800d6dc <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d6a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6ae:	eeb0 1a47 	vmov.f32	s2, s14
 800d6b2:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d6d8 <turn45inL+0x3a0>
 800d6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ba:	f7f7 fe49 	bl	8005350 <mollifier_slalom_table>
 800d6be:	e021      	b.n	800d704 <turn45inL+0x3cc>
 800d6c0:	c022ec18 	.word	0xc022ec18
 800d6c4:	405fd1de 	.word	0x405fd1de
 800d6c8:	20000814 	.word	0x20000814
 800d6cc:	42cd0000 	.word	0x42cd0000
 800d6d0:	408f4000 	.word	0x408f4000
 800d6d4:	00000000 	.word	0x00000000
 800d6d8:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d6dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d6e8:	eef0 2a66 	vmov.f32	s5, s13
 800d6ec:	eeb0 2a47 	vmov.f32	s4, s14
 800d6f0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d6d4 <turn45inL+0x39c>
 800d6f4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d6d4 <turn45inL+0x39c>
 800d6f8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d6d8 <turn45inL+0x3a0>
 800d6fc:	eeb0 0a67 	vmov.f32	s0, s15
 800d700:	f7f7 fcd6 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d704:	2300      	movs	r3, #0
 800d706:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d70c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d710:	3b02      	subs	r3, #2
 800d712:	4618      	mov	r0, r3
 800d714:	f7f2 ff2e 	bl	8000574 <__aeabi_i2d>
 800d718:	a325      	add	r3, pc, #148	; (adr r3, 800d7b0 <turn45inL+0x478>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 ff93 	bl	8000648 <__aeabi_dmul>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	4614      	mov	r4, r2
 800d728:	461d      	mov	r5, r3
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f2 ff33 	bl	8000598 <__aeabi_f2d>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	4620      	mov	r0, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	f7f2 fdcf 	bl	80002dc <__adddf3>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	4610      	mov	r0, r2
 800d744:	4619      	mov	r1, r3
 800d746:	f7f3 fa57 	bl	8000bf8 <__aeabi_d2f>
 800d74a:	4603      	mov	r3, r0
 800d74c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d750:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d754:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d758:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d75c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d760:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d764:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d768:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d76c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800d7a8 <turn45inL+0x470>
 800d770:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	eeb0 2a47 	vmov.f32	s4, s14
 800d77a:	eef0 1a65 	vmov.f32	s3, s11
 800d77e:	eeb0 1a46 	vmov.f32	s2, s12
 800d782:	eef0 0a66 	vmov.f32	s1, s13
 800d786:	ee00 3a10 	vmov	s0, r3
 800d78a:	f7f6 fe45 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800d78e:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <turn45inL+0x474>)
 800d790:	2200      	movs	r2, #0
 800d792:	701a      	strb	r2, [r3, #0]
	}

}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	ecbd 8b02 	vpop	{d8}
 800d79e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7a2:	b004      	add	sp, #16
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	42340000 	.word	0x42340000
 800d7ac:	20000814 	.word	0x20000814
 800d7b0:	c022ec18 	.word	0xc022ec18
 800d7b4:	404fd1de 	.word	0x404fd1de

0800d7b8 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	b5b0      	push	{r4, r5, r7, lr}
 800d7bc:	ed2d 8b02 	vpush	{d8}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d7c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d7cc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d7d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	f040 80ae 	bne.w	800d936 <turn135inR+0x17e>
		highspeed_mode = 1;
 800d7da:	4bdd      	ldr	r3, [pc, #884]	; (800db50 <turn135inR+0x398>)
 800d7dc:	2201      	movs	r2, #1
 800d7de:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d7f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d7f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d800:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d804:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d808:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800d80c:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800db54 <turn135inR+0x39c>
 800d810:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	eeb0 2a47 	vmov.f32	s4, s14
 800d81a:	eef0 1a46 	vmov.f32	s3, s12
 800d81e:	eeb0 1a66 	vmov.f32	s2, s13
 800d822:	eddf 0acf 	vldr	s1, [pc, #828]	; 800db60 <turn135inR+0x3a8>
 800d826:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800db58 <turn135inR+0x3a0>
 800d82a:	f7f6 fdf5 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800d82e:	2300      	movs	r3, #0
 800d830:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800d832:	2302      	movs	r3, #2
 800d834:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d836:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d83a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d83e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d842:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d846:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d84a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d852:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d856:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d85a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800db54 <turn135inR+0x39c>
 800d85e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	eeb0 2a47 	vmov.f32	s4, s14
 800d868:	eef0 1a45 	vmov.f32	s3, s10
 800d86c:	eeb0 1a65 	vmov.f32	s2, s11
 800d870:	eef0 0a46 	vmov.f32	s1, s12
 800d874:	eeb0 0a66 	vmov.f32	s0, s13
 800d878:	f7f6 fdce 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d87c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d880:	2b01      	cmp	r3, #1
 800d882:	d10c      	bne.n	800d89e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d888:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d88c:	eeb0 1a47 	vmov.f32	s2, s14
 800d890:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800db64 <turn135inR+0x3ac>
 800d894:	eeb0 0a67 	vmov.f32	s0, s15
 800d898:	f7f7 fd5a 	bl	8005350 <mollifier_slalom_table>
 800d89c:	e015      	b.n	800d8ca <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d89e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d8a6:	eef1 7a67 	vneg.f32	s15, s15
 800d8aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8ae:	eef0 2a66 	vmov.f32	s5, s13
 800d8b2:	eeb0 2a67 	vmov.f32	s4, s15
 800d8b6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800db60 <turn135inR+0x3a8>
 800d8ba:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800db60 <turn135inR+0x3a8>
 800d8be:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800db64 <turn135inR+0x3ac>
 800d8c2:	eeb0 0a47 	vmov.f32	s0, s14
 800d8c6:	f7f7 fbf3 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f2 fe5f 	bl	8000598 <__aeabi_f2d>
 800d8da:	a39b      	add	r3, pc, #620	; (adr r3, 800db48 <turn135inR+0x390>)
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	f7f2 fcfc 	bl	80002dc <__adddf3>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	f7f3 f984 	bl	8000bf8 <__aeabi_d2f>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d8f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d902:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d906:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d90a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d90e:	eddf 5a91 	vldr	s11, [pc, #580]	; 800db54 <turn135inR+0x39c>
 800d912:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	eeb0 2a47 	vmov.f32	s4, s14
 800d91c:	eef0 1a46 	vmov.f32	s3, s12
 800d920:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800db60 <turn135inR+0x3a8>
 800d924:	eef0 0a66 	vmov.f32	s1, s13
 800d928:	ee00 3a10 	vmov	s0, r3
 800d92c:	f7f6 fd74 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800d930:	4b87      	ldr	r3, [pc, #540]	; (800db50 <turn135inR+0x398>)
 800d932:	2200      	movs	r2, #0
 800d934:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800d936:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f040 809d 	bne.w	800da7a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800d940:	2300      	movs	r3, #0
 800d942:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d944:	2300      	movs	r3, #0
 800d946:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800d948:	2302      	movs	r3, #2
 800d94a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d94c:	2300      	movs	r3, #0
 800d94e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d950:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d954:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d958:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d95c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d960:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d964:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d96c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d970:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d974:	eddf 4a77 	vldr	s9, [pc, #476]	; 800db54 <turn135inR+0x39c>
 800d978:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	eeb0 2a47 	vmov.f32	s4, s14
 800d982:	eef0 1a45 	vmov.f32	s3, s10
 800d986:	eeb0 1a65 	vmov.f32	s2, s11
 800d98a:	eef0 0a46 	vmov.f32	s1, s12
 800d98e:	eeb0 0a66 	vmov.f32	s0, s13
 800d992:	f7f6 fd41 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800d996:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d10c      	bne.n	800d9b8 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d99e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9a6:	eeb0 1a47 	vmov.f32	s2, s14
 800d9aa:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800db64 <turn135inR+0x3ac>
 800d9ae:	eeb0 0a67 	vmov.f32	s0, s15
 800d9b2:	f7f7 fccd 	bl	8005350 <mollifier_slalom_table>
 800d9b6:	e015      	b.n	800d9e4 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d9b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d9c0:	eef1 7a67 	vneg.f32	s15, s15
 800d9c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d9c8:	eef0 2a66 	vmov.f32	s5, s13
 800d9cc:	eeb0 2a67 	vmov.f32	s4, s15
 800d9d0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800db60 <turn135inR+0x3a8>
 800d9d4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800db60 <turn135inR+0x3a8>
 800d9d8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800db64 <turn135inR+0x3ac>
 800d9dc:	eeb0 0a47 	vmov.f32	s0, s14
 800d9e0:	f7f7 fb66 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d9ec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d9f0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d9f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da00:	edd7 7a01 	vldr	s15, [r7, #4]
 800da04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da0c:	eef0 7ae7 	vabs.f32	s15, s15
 800da10:	ee17 0a90 	vmov	r0, s15
 800da14:	f7f2 fdc0 	bl	8000598 <__aeabi_f2d>
 800da18:	f04f 0200 	mov.w	r2, #0
 800da1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da20:	f7f2 ff3c 	bl	800089c <__aeabi_ddiv>
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	4614      	mov	r4, r2
 800da2a:	461d      	mov	r5, r3
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f2 fdb2 	bl	8000598 <__aeabi_f2d>
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4620      	mov	r0, r4
 800da3a:	4629      	mov	r1, r5
 800da3c:	f7f2 ff2e 	bl	800089c <__aeabi_ddiv>
 800da40:	4602      	mov	r2, r0
 800da42:	460b      	mov	r3, r1
 800da44:	4610      	mov	r0, r2
 800da46:	4619      	mov	r1, r3
 800da48:	f04f 0200 	mov.w	r2, #0
 800da4c:	4b43      	ldr	r3, [pc, #268]	; (800db5c <turn135inR+0x3a4>)
 800da4e:	f7f2 fc45 	bl	80002dc <__adddf3>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da56:	4610      	mov	r0, r2
 800da58:	4619      	mov	r1, r3
 800da5a:	f7f3 f8cd 	bl	8000bf8 <__aeabi_d2f>
 800da5e:	4603      	mov	r3, r0
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	ee02 3a10 	vmov	s4, r3
 800da66:	edd7 1a01 	vldr	s3, [r7, #4]
 800da6a:	ed97 1a01 	vldr	s2, [r7, #4]
 800da6e:	eef0 0a68 	vmov.f32	s1, s17
 800da72:	eeb0 0a48 	vmov.f32	s0, s16
 800da76:	f7f6 fccf 	bl	8004418 <straight_table2>

	}
	if (test_mode >= 2) {
 800da7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800da7e:	2b01      	cmp	r3, #1
 800da80:	f240 80d0 	bls.w	800dc24 <turn135inR+0x46c>

		highspeed_mode = 1;
 800da84:	4b32      	ldr	r3, [pc, #200]	; (800db50 <turn135inR+0x398>)
 800da86:	2201      	movs	r2, #1
 800da88:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da8e:	2300      	movs	r3, #0
 800da90:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800da92:	2300      	movs	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da96:	2300      	movs	r3, #0
 800da98:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800da9a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800daa2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800daa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dab2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800dab6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800db54 <turn135inR+0x39c>
 800daba:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	eeb0 2a47 	vmov.f32	s4, s14
 800dac4:	eef0 1a46 	vmov.f32	s3, s12
 800dac8:	eeb0 1a66 	vmov.f32	s2, s13
 800dacc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800db60 <turn135inR+0x3a8>
 800dad0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800db58 <turn135inR+0x3a0>
 800dad4:	f7f6 fca0 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800dad8:	2300      	movs	r3, #0
 800dada:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800dadc:	2302      	movs	r3, #2
 800dade:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dae0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dae4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dae8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800daec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800daf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800daf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dafc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800db00:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db04:	eddf 4a13 	vldr	s9, [pc, #76]	; 800db54 <turn135inR+0x39c>
 800db08:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	eeb0 2a47 	vmov.f32	s4, s14
 800db12:	eef0 1a45 	vmov.f32	s3, s10
 800db16:	eeb0 1a65 	vmov.f32	s2, s11
 800db1a:	eef0 0a46 	vmov.f32	s1, s12
 800db1e:	eeb0 0a66 	vmov.f32	s0, s13
 800db22:	f7f6 fc79 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800db26:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d11c      	bne.n	800db68 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800db2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db36:	eeb0 1a47 	vmov.f32	s2, s14
 800db3a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db64 <turn135inR+0x3ac>
 800db3e:	eeb0 0a67 	vmov.f32	s0, s15
 800db42:	f7f7 fc05 	bl	8005350 <mollifier_slalom_table>
 800db46:	e025      	b.n	800db94 <turn135inR+0x3dc>
 800db48:	c022ec18 	.word	0xc022ec18
 800db4c:	405fd1de 	.word	0x405fd1de
 800db50:	20000814 	.word	0x20000814
 800db54:	42340000 	.word	0x42340000
 800db58:	42cd0000 	.word	0x42cd0000
 800db5c:	408f4000 	.word	0x408f4000
 800db60:	00000000 	.word	0x00000000
 800db64:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800db68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db70:	eef1 7a67 	vneg.f32	s15, s15
 800db74:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db78:	eef0 2a66 	vmov.f32	s5, s13
 800db7c:	eeb0 2a67 	vmov.f32	s4, s15
 800db80:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800db60 <turn135inR+0x3a8>
 800db84:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800db60 <turn135inR+0x3a8>
 800db88:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800db64 <turn135inR+0x3ac>
 800db8c:	eeb0 0a47 	vmov.f32	s0, s14
 800db90:	f7f7 fa8e 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800db94:	2300      	movs	r3, #0
 800db96:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800db9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dba0:	3b02      	subs	r3, #2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f2 fce6 	bl	8000574 <__aeabi_i2d>
 800dba8:	a325      	add	r3, pc, #148	; (adr r3, 800dc40 <turn135inR+0x488>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fd4b 	bl	8000648 <__aeabi_dmul>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4614      	mov	r4, r2
 800dbb8:	461d      	mov	r5, r3
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f2 fceb 	bl	8000598 <__aeabi_f2d>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7f2 fb87 	bl	80002dc <__adddf3>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	f7f3 f80f 	bl	8000bf8 <__aeabi_d2f>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dbe0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dbe4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dbe8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dbec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbf4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dbf8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dbfc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800dc38 <turn135inR+0x480>
 800dc00:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	eeb0 2a47 	vmov.f32	s4, s14
 800dc0a:	eef0 1a65 	vmov.f32	s3, s11
 800dc0e:	eeb0 1a46 	vmov.f32	s2, s12
 800dc12:	eef0 0a66 	vmov.f32	s1, s13
 800dc16:	ee00 3a10 	vmov	s0, r3
 800dc1a:	f7f6 fbfd 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800dc1e:	4b07      	ldr	r3, [pc, #28]	; (800dc3c <turn135inR+0x484>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	701a      	strb	r2, [r3, #0]
	}

}
 800dc24:	bf00      	nop
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	ecbd 8b02 	vpop	{d8}
 800dc2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dc32:	b004      	add	sp, #16
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	42340000 	.word	0x42340000
 800dc3c:	20000814 	.word	0x20000814
 800dc40:	c022ec18 	.word	0xc022ec18
 800dc44:	404fd1de 	.word	0x404fd1de

0800dc48 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800dc48:	b084      	sub	sp, #16
 800dc4a:	b5b0      	push	{r4, r5, r7, lr}
 800dc4c:	ed2d 8b02 	vpush	{d8}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800dc58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc5c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800dc60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	f040 80ac 	bne.w	800ddc2 <turn135inL+0x17a>
		highspeed_mode = 1;
 800dc6a:	4bdb      	ldr	r3, [pc, #876]	; (800dfd8 <turn135inL+0x390>)
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800dc70:	2301      	movs	r3, #1
 800dc72:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800dc80:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dc84:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc94:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dc98:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800dc9c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800dfdc <turn135inL+0x394>
 800dca0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	eeb0 2a47 	vmov.f32	s4, s14
 800dcaa:	eef0 1a46 	vmov.f32	s3, s12
 800dcae:	eeb0 1a66 	vmov.f32	s2, s13
 800dcb2:	eddf 0acd 	vldr	s1, [pc, #820]	; 800dfe8 <turn135inL+0x3a0>
 800dcb6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800dfe0 <turn135inL+0x398>
 800dcba:	f7f6 fbad 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dcc6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dcca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dcce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dcd2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dcd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dcda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcde:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dce2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dce6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dcea:	eddf 4abc 	vldr	s9, [pc, #752]	; 800dfdc <turn135inL+0x394>
 800dcee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	eeb0 2a47 	vmov.f32	s4, s14
 800dcf8:	eef0 1a45 	vmov.f32	s3, s10
 800dcfc:	eeb0 1a65 	vmov.f32	s2, s11
 800dd00:	eef0 0a46 	vmov.f32	s1, s12
 800dd04:	eeb0 0a66 	vmov.f32	s0, s13
 800dd08:	f7f6 fb86 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800dd0c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d10c      	bne.n	800dd2e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dd14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd18:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd1c:	eeb0 1a47 	vmov.f32	s2, s14
 800dd20:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800dfec <turn135inL+0x3a4>
 800dd24:	eeb0 0a67 	vmov.f32	s0, s15
 800dd28:	f7f7 fb12 	bl	8005350 <mollifier_slalom_table>
 800dd2c:	e013      	b.n	800dd56 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dd2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd36:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dd3a:	eef0 2a66 	vmov.f32	s5, s13
 800dd3e:	eeb0 2a47 	vmov.f32	s4, s14
 800dd42:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800dfe8 <turn135inL+0x3a0>
 800dd46:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800dfe8 <turn135inL+0x3a0>
 800dd4a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800dfec <turn135inL+0x3a4>
 800dd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd52:	f7f7 f9ad 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f2 fc19 	bl	8000598 <__aeabi_f2d>
 800dd66:	a39a      	add	r3, pc, #616	; (adr r3, 800dfd0 <turn135inL+0x388>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	f7f2 fab6 	bl	80002dc <__adddf3>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4610      	mov	r0, r2
 800dd76:	4619      	mov	r1, r3
 800dd78:	f7f2 ff3e 	bl	8000bf8 <__aeabi_d2f>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800dd82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dd86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd92:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dd96:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dd9a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800dfdc <turn135inL+0x394>
 800dd9e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	eeb0 2a47 	vmov.f32	s4, s14
 800dda8:	eef0 1a46 	vmov.f32	s3, s12
 800ddac:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800dfe8 <turn135inL+0x3a0>
 800ddb0:	eef0 0a66 	vmov.f32	s1, s13
 800ddb4:	ee00 3a10 	vmov	s0, r3
 800ddb8:	f7f6 fb2e 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800ddbc:	4b86      	ldr	r3, [pc, #536]	; (800dfd8 <turn135inL+0x390>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800ddc2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f040 809b 	bne.w	800df02 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dddc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dde0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dde4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dde8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ddec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ddf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddf8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ddfc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800de00:	eddf 4a76 	vldr	s9, [pc, #472]	; 800dfdc <turn135inL+0x394>
 800de04:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	eeb0 2a47 	vmov.f32	s4, s14
 800de0e:	eef0 1a45 	vmov.f32	s3, s10
 800de12:	eeb0 1a65 	vmov.f32	s2, s11
 800de16:	eef0 0a46 	vmov.f32	s1, s12
 800de1a:	eeb0 0a66 	vmov.f32	s0, s13
 800de1e:	f7f6 fafb 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800de22:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800de26:	2b01      	cmp	r3, #1
 800de28:	d10c      	bne.n	800de44 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800de2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de2e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800de32:	eeb0 1a47 	vmov.f32	s2, s14
 800de36:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800dfec <turn135inL+0x3a4>
 800de3a:	eeb0 0a67 	vmov.f32	s0, s15
 800de3e:	f7f7 fa87 	bl	8005350 <mollifier_slalom_table>
 800de42:	e013      	b.n	800de6c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800de44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800de4c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800de50:	eef0 2a66 	vmov.f32	s5, s13
 800de54:	eeb0 2a47 	vmov.f32	s4, s14
 800de58:	eddf 1a63 	vldr	s3, [pc, #396]	; 800dfe8 <turn135inL+0x3a0>
 800de5c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800dfe8 <turn135inL+0x3a0>
 800de60:	eddf 0a62 	vldr	s1, [pc, #392]	; 800dfec <turn135inL+0x3a4>
 800de64:	eeb0 0a67 	vmov.f32	s0, s15
 800de68:	f7f7 f922 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800de6c:	2303      	movs	r3, #3
 800de6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800de70:	2300      	movs	r3, #0
 800de72:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800de74:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800de78:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800de7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800de80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de88:	edd7 7a01 	vldr	s15, [r7, #4]
 800de8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800de90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de94:	eef0 7ae7 	vabs.f32	s15, s15
 800de98:	ee17 0a90 	vmov	r0, s15
 800de9c:	f7f2 fb7c 	bl	8000598 <__aeabi_f2d>
 800dea0:	f04f 0200 	mov.w	r2, #0
 800dea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dea8:	f7f2 fcf8 	bl	800089c <__aeabi_ddiv>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4614      	mov	r4, r2
 800deb2:	461d      	mov	r5, r3
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f2 fb6e 	bl	8000598 <__aeabi_f2d>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4620      	mov	r0, r4
 800dec2:	4629      	mov	r1, r5
 800dec4:	f7f2 fcea 	bl	800089c <__aeabi_ddiv>
 800dec8:	4602      	mov	r2, r0
 800deca:	460b      	mov	r3, r1
 800decc:	4610      	mov	r0, r2
 800dece:	4619      	mov	r1, r3
 800ded0:	f04f 0200 	mov.w	r2, #0
 800ded4:	4b43      	ldr	r3, [pc, #268]	; (800dfe4 <turn135inL+0x39c>)
 800ded6:	f7f2 fa01 	bl	80002dc <__adddf3>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dede:	4610      	mov	r0, r2
 800dee0:	4619      	mov	r1, r3
 800dee2:	f7f2 fe89 	bl	8000bf8 <__aeabi_d2f>
 800dee6:	4603      	mov	r3, r0
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	ee02 3a10 	vmov	s4, r3
 800deee:	edd7 1a01 	vldr	s3, [r7, #4]
 800def2:	ed97 1a01 	vldr	s2, [r7, #4]
 800def6:	eef0 0a68 	vmov.f32	s1, s17
 800defa:	eeb0 0a48 	vmov.f32	s0, s16
 800defe:	f7f6 fa8b 	bl	8004418 <straight_table2>

	}
	if (test_mode >= 2) {
 800df02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df06:	2b01      	cmp	r3, #1
 800df08:	f240 80ce 	bls.w	800e0a8 <turn135inL+0x460>

		highspeed_mode = 1;
 800df0c:	4b32      	ldr	r3, [pc, #200]	; (800dfd8 <turn135inL+0x390>)
 800df0e:	2201      	movs	r2, #1
 800df10:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800df12:	2301      	movs	r3, #1
 800df14:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800df16:	2300      	movs	r3, #0
 800df18:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800df1e:	2300      	movs	r3, #0
 800df20:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800df22:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800df26:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df36:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800df3a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800df3e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800dfdc <turn135inL+0x394>
 800df42:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	eeb0 2a47 	vmov.f32	s4, s14
 800df4c:	eef0 1a46 	vmov.f32	s3, s12
 800df50:	eeb0 1a66 	vmov.f32	s2, s13
 800df54:	eddf 0a24 	vldr	s1, [pc, #144]	; 800dfe8 <turn135inL+0x3a0>
 800df58:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800dfe0 <turn135inL+0x398>
 800df5c:	f7f6 fa5c 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800df60:	2300      	movs	r3, #0
 800df62:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800df64:	2302      	movs	r3, #2
 800df66:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800df6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800df70:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800df74:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df84:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800df88:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800df8c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800dfdc <turn135inL+0x394>
 800df90:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	eeb0 2a47 	vmov.f32	s4, s14
 800df9a:	eef0 1a45 	vmov.f32	s3, s10
 800df9e:	eeb0 1a65 	vmov.f32	s2, s11
 800dfa2:	eef0 0a46 	vmov.f32	s1, s12
 800dfa6:	eeb0 0a66 	vmov.f32	s0, s13
 800dfaa:	f7f6 fa35 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800dfae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d11c      	bne.n	800dff0 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dfb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dfba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dfbe:	eeb0 1a47 	vmov.f32	s2, s14
 800dfc2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800dfec <turn135inL+0x3a4>
 800dfc6:	eeb0 0a67 	vmov.f32	s0, s15
 800dfca:	f7f7 f9c1 	bl	8005350 <mollifier_slalom_table>
 800dfce:	e023      	b.n	800e018 <turn135inL+0x3d0>
 800dfd0:	c022ec18 	.word	0xc022ec18
 800dfd4:	405fd1de 	.word	0x405fd1de
 800dfd8:	20000814 	.word	0x20000814
 800dfdc:	42340000 	.word	0x42340000
 800dfe0:	42cd0000 	.word	0x42cd0000
 800dfe4:	408f4000 	.word	0x408f4000
 800dfe8:	00000000 	.word	0x00000000
 800dfec:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dff0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dff4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dff8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dffc:	eef0 2a66 	vmov.f32	s5, s13
 800e000:	eeb0 2a47 	vmov.f32	s4, s14
 800e004:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800dfe8 <turn135inL+0x3a0>
 800e008:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800dfe8 <turn135inL+0x3a0>
 800e00c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800dfec <turn135inL+0x3a4>
 800e010:	eeb0 0a67 	vmov.f32	s0, s15
 800e014:	f7f7 f84c 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800e018:	2300      	movs	r3, #0
 800e01a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e020:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e024:	3b02      	subs	r3, #2
 800e026:	4618      	mov	r0, r3
 800e028:	f7f2 faa4 	bl	8000574 <__aeabi_i2d>
 800e02c:	a326      	add	r3, pc, #152	; (adr r3, 800e0c8 <turn135inL+0x480>)
 800e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e032:	f7f2 fb09 	bl	8000648 <__aeabi_dmul>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4614      	mov	r4, r2
 800e03c:	461d      	mov	r5, r3
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	4618      	mov	r0, r3
 800e042:	f7f2 faa9 	bl	8000598 <__aeabi_f2d>
 800e046:	4602      	mov	r2, r0
 800e048:	460b      	mov	r3, r1
 800e04a:	4620      	mov	r0, r4
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7f2 f945 	bl	80002dc <__adddf3>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fdcd 	bl	8000bf8 <__aeabi_d2f>
 800e05e:	4603      	mov	r3, r0
 800e060:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e064:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e068:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e06c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e070:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e074:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e078:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e07c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e080:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800e0c0 <turn135inL+0x478>
 800e084:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	eeb0 2a47 	vmov.f32	s4, s14
 800e08e:	eef0 1a65 	vmov.f32	s3, s11
 800e092:	eeb0 1a46 	vmov.f32	s2, s12
 800e096:	eef0 0a66 	vmov.f32	s1, s13
 800e09a:	ee00 3a10 	vmov	s0, r3
 800e09e:	f7f6 f9bb 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800e0a2:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <turn135inL+0x47c>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	701a      	strb	r2, [r3, #0]
	}

}
 800e0a8:	bf00      	nop
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	ecbd 8b02 	vpop	{d8}
 800e0b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e0b6:	b004      	add	sp, #16
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	42340000 	.word	0x42340000
 800e0c4:	20000814 	.word	0x20000814
 800e0c8:	c022ec18 	.word	0xc022ec18
 800e0cc:	404fd1de 	.word	0x404fd1de

0800e0d0 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	b5b0      	push	{r4, r5, r7, lr}
 800e0d4:	ed2d 8b02 	vpush	{d8}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e0e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800e0e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	f040 80a5 	bne.w	800e23c <turn45outR+0x16c>
		highspeed_mode = 1;
 800e0f2:	4be9      	ldr	r3, [pc, #932]	; (800e498 <turn45outR+0x3c8>)
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800e100:	2300      	movs	r3, #0
 800e102:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e104:	2300      	movs	r3, #0
 800e106:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e108:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e10c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e110:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e11c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e120:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e124:	eddf 5add 	vldr	s11, [pc, #884]	; 800e49c <turn45outR+0x3cc>
 800e128:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	eeb0 2a47 	vmov.f32	s4, s14
 800e132:	eef0 1a46 	vmov.f32	s3, s12
 800e136:	eeb0 1a66 	vmov.f32	s2, s13
 800e13a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800e4a0 <turn45outR+0x3d0>
 800e13e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800e4a4 <turn45outR+0x3d4>
 800e142:	f7f6 f969 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800e146:	2300      	movs	r3, #0
 800e148:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800e14a:	2303      	movs	r3, #3
 800e14c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e14e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e152:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e156:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e15a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e15e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e162:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e16a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e16e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e172:	eddf 4aca 	vldr	s9, [pc, #808]	; 800e49c <turn45outR+0x3cc>
 800e176:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	eeb0 2a47 	vmov.f32	s4, s14
 800e180:	eef0 1a45 	vmov.f32	s3, s10
 800e184:	eeb0 1a65 	vmov.f32	s2, s11
 800e188:	eef0 0a46 	vmov.f32	s1, s12
 800e18c:	eeb0 0a66 	vmov.f32	s0, s13
 800e190:	f7f6 f942 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800e194:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d10c      	bne.n	800e1b6 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800e19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e1a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e1a4:	eeb0 1a47 	vmov.f32	s2, s14
 800e1a8:	eddf 0abf 	vldr	s1, [pc, #764]	; 800e4a8 <turn45outR+0x3d8>
 800e1ac:	eeb0 0a67 	vmov.f32	s0, s15
 800e1b0:	f7f7 f8ce 	bl	8005350 <mollifier_slalom_table>
 800e1b4:	e015      	b.n	800e1e2 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e1b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e1ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e1be:	eef1 7a67 	vneg.f32	s15, s15
 800e1c2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e1c6:	eef0 2a66 	vmov.f32	s5, s13
 800e1ca:	eeb0 2a67 	vmov.f32	s4, s15
 800e1ce:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800e4a0 <turn45outR+0x3d0>
 800e1d2:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800e4a0 <turn45outR+0x3d0>
 800e1d6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e4a8 <turn45outR+0x3d8>
 800e1da:	eeb0 0a47 	vmov.f32	s0, s14
 800e1de:	f7f6 ff67 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e1ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e1ee:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800e4ac <turn45outR+0x3dc>
 800e1f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e1f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e1fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e1fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e20a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e20e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e212:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800e49c <turn45outR+0x3cc>
 800e216:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	eeb0 2a47 	vmov.f32	s4, s14
 800e220:	eef0 1a65 	vmov.f32	s3, s11
 800e224:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800e4a0 <turn45outR+0x3d0>
 800e228:	eef0 0a46 	vmov.f32	s1, s12
 800e22c:	eeb0 0a66 	vmov.f32	s0, s13
 800e230:	f7f6 f8f2 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800e234:	4b98      	ldr	r3, [pc, #608]	; (800e498 <turn45outR+0x3c8>)
 800e236:	2200      	movs	r2, #0
 800e238:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e23a:	e123      	b.n	800e484 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800e23c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e240:	2b01      	cmp	r3, #1
 800e242:	f240 8082 	bls.w	800e34a <turn45outR+0x27a>
		highspeed_mode = 1;
 800e246:	4b94      	ldr	r3, [pc, #592]	; (800e498 <turn45outR+0x3c8>)
 800e248:	2201      	movs	r2, #1
 800e24a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e250:	2300      	movs	r3, #0
 800e252:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e254:	2303      	movs	r3, #3
 800e256:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e258:	2300      	movs	r3, #0
 800e25a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e25c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e260:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e264:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e268:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e26c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e270:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e274:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e278:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e27c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e280:	eddf 4a86 	vldr	s9, [pc, #536]	; 800e49c <turn45outR+0x3cc>
 800e284:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	eeb0 2a47 	vmov.f32	s4, s14
 800e28e:	eef0 1a45 	vmov.f32	s3, s10
 800e292:	eeb0 1a65 	vmov.f32	s2, s11
 800e296:	eef0 0a46 	vmov.f32	s1, s12
 800e29a:	eeb0 0a66 	vmov.f32	s0, s13
 800e29e:	f7f6 f8bb 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800e2a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d10c      	bne.n	800e2c4 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800e2aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e2ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e2b2:	eeb0 1a47 	vmov.f32	s2, s14
 800e2b6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800e4a8 <turn45outR+0x3d8>
 800e2ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e2be:	f7f7 f847 	bl	8005350 <mollifier_slalom_table>
 800e2c2:	e015      	b.n	800e2f0 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e2c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e2c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e2cc:	eef1 7a67 	vneg.f32	s15, s15
 800e2d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e2d4:	eef0 2a66 	vmov.f32	s5, s13
 800e2d8:	eeb0 2a67 	vmov.f32	s4, s15
 800e2dc:	eddf 1a70 	vldr	s3, [pc, #448]	; 800e4a0 <turn45outR+0x3d0>
 800e2e0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800e4a0 <turn45outR+0x3d0>
 800e2e4:	eddf 0a70 	vldr	s1, [pc, #448]	; 800e4a8 <turn45outR+0x3d8>
 800e2e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e2ec:	f7f6 fee0 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e2f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e2fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800e4ac <turn45outR+0x3dc>
 800e300:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e304:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e308:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e30c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e314:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e318:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e31c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e320:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800e49c <turn45outR+0x3cc>
 800e324:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	eeb0 2a47 	vmov.f32	s4, s14
 800e32e:	eef0 1a65 	vmov.f32	s3, s11
 800e332:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800e4a0 <turn45outR+0x3d0>
 800e336:	eef0 0a46 	vmov.f32	s1, s12
 800e33a:	eeb0 0a66 	vmov.f32	s0, s13
 800e33e:	f7f6 f86b 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800e342:	4b55      	ldr	r3, [pc, #340]	; (800e498 <turn45outR+0x3c8>)
 800e344:	2200      	movs	r2, #0
 800e346:	701a      	strb	r2, [r3, #0]
}
 800e348:	e09c      	b.n	800e484 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e34a:	2300      	movs	r3, #0
 800e34c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e34e:	2300      	movs	r3, #0
 800e350:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e352:	2303      	movs	r3, #3
 800e354:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e356:	2300      	movs	r3, #0
 800e358:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e35a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e35e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e362:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e366:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e36a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e36e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e372:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e376:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e37a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e37e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800e49c <turn45outR+0x3cc>
 800e382:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	eeb0 2a47 	vmov.f32	s4, s14
 800e38c:	eef0 1a45 	vmov.f32	s3, s10
 800e390:	eeb0 1a65 	vmov.f32	s2, s11
 800e394:	eef0 0a46 	vmov.f32	s1, s12
 800e398:	eeb0 0a66 	vmov.f32	s0, s13
 800e39c:	f7f6 f83c 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800e3a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d10c      	bne.n	800e3c2 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800e3a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e3b0:	eeb0 1a47 	vmov.f32	s2, s14
 800e3b4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800e4a8 <turn45outR+0x3d8>
 800e3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e3bc:	f7f6 ffc8 	bl	8005350 <mollifier_slalom_table>
 800e3c0:	e015      	b.n	800e3ee <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e3c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e3c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e3ca:	eef1 7a67 	vneg.f32	s15, s15
 800e3ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e3d2:	eef0 2a66 	vmov.f32	s5, s13
 800e3d6:	eeb0 2a67 	vmov.f32	s4, s15
 800e3da:	eddf 1a31 	vldr	s3, [pc, #196]	; 800e4a0 <turn45outR+0x3d0>
 800e3de:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e4a0 <turn45outR+0x3d0>
 800e3e2:	eddf 0a31 	vldr	s1, [pc, #196]	; 800e4a8 <turn45outR+0x3d8>
 800e3e6:	eeb0 0a47 	vmov.f32	s0, s14
 800e3ea:	f7f6 fe61 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e3f6:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e3fa:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e3fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e402:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e40a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e40e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e412:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e416:	eef0 7ae7 	vabs.f32	s15, s15
 800e41a:	ee17 0a90 	vmov	r0, s15
 800e41e:	f7f2 f8bb 	bl	8000598 <__aeabi_f2d>
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e42a:	f7f2 fa37 	bl	800089c <__aeabi_ddiv>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4614      	mov	r4, r2
 800e434:	461d      	mov	r5, r3
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f2 f8ad 	bl	8000598 <__aeabi_f2d>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	4620      	mov	r0, r4
 800e444:	4629      	mov	r1, r5
 800e446:	f7f2 fa29 	bl	800089c <__aeabi_ddiv>
 800e44a:	4602      	mov	r2, r0
 800e44c:	460b      	mov	r3, r1
 800e44e:	4610      	mov	r0, r2
 800e450:	4619      	mov	r1, r3
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	4b16      	ldr	r3, [pc, #88]	; (800e4b0 <turn45outR+0x3e0>)
 800e458:	f7f1 ff40 	bl	80002dc <__adddf3>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e460:	4610      	mov	r0, r2
 800e462:	4619      	mov	r1, r3
 800e464:	f7f2 fbc8 	bl	8000bf8 <__aeabi_d2f>
 800e468:	4603      	mov	r3, r0
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	ee02 3a10 	vmov	s4, r3
 800e470:	edd7 1a01 	vldr	s3, [r7, #4]
 800e474:	ed97 1a01 	vldr	s2, [r7, #4]
 800e478:	eef0 0a68 	vmov.f32	s1, s17
 800e47c:	eeb0 0a48 	vmov.f32	s0, s16
 800e480:	f7f5 ffca 	bl	8004418 <straight_table2>
}
 800e484:	bf00      	nop
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	ecbd 8b02 	vpop	{d8}
 800e48e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e492:	b004      	add	sp, #16
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	20000814 	.word	0x20000814
 800e49c:	42340000 	.word	0x42340000
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	42c4477b 	.word	0x42c4477b
 800e4a8:	c2340000 	.word	0xc2340000
 800e4ac:	42b40000 	.word	0x42b40000
 800e4b0:	408f4000 	.word	0x408f4000

0800e4b4 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	b5b0      	push	{r4, r5, r7, lr}
 800e4b8:	ed2d 8b02 	vpush	{d8}
 800e4bc:	b084      	sub	sp, #16
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e4c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e4c8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800e4cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	f040 80a3 	bne.w	800e61c <turn45outL+0x168>
			highspeed_mode = 1;
 800e4d6:	4be5      	ldr	r3, [pc, #916]	; (800e86c <turn45outL+0x3b8>)
 800e4d8:	2201      	movs	r2, #1
 800e4da:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e4ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e4f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e4f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e4f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e500:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e504:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e508:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800e870 <turn45outL+0x3bc>
 800e50c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	eeb0 2a47 	vmov.f32	s4, s14
 800e516:	eef0 1a46 	vmov.f32	s3, s12
 800e51a:	eeb0 1a66 	vmov.f32	s2, s13
 800e51e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800e874 <turn45outL+0x3c0>
 800e522:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800e878 <turn45outL+0x3c4>
 800e526:	f7f5 ff77 	bl	8004418 <straight_table2>
			wallmode.WallControlMode=0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800e52e:	2304      	movs	r3, #4
 800e530:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e532:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e536:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e53a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e53e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e542:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e546:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e54e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e552:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e556:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800e870 <turn45outL+0x3bc>
 800e55a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	eeb0 2a47 	vmov.f32	s4, s14
 800e564:	eef0 1a45 	vmov.f32	s3, s10
 800e568:	eeb0 1a65 	vmov.f32	s2, s11
 800e56c:	eef0 0a46 	vmov.f32	s1, s12
 800e570:	eeb0 0a66 	vmov.f32	s0, s13
 800e574:	f7f5 ff50 	bl	8004418 <straight_table2>
			if(mollifier_mode == ON){
 800e578:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d10c      	bne.n	800e59a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800e580:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e584:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e588:	eeb0 1a47 	vmov.f32	s2, s14
 800e58c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800e870 <turn45outL+0x3bc>
 800e590:	eeb0 0a67 	vmov.f32	s0, s15
 800e594:	f7f6 fedc 	bl	8005350 <mollifier_slalom_table>
 800e598:	e013      	b.n	800e5c2 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e59a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e59e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e5a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e5a6:	eef0 2a66 	vmov.f32	s5, s13
 800e5aa:	eeb0 2a47 	vmov.f32	s4, s14
 800e5ae:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800e874 <turn45outL+0x3c0>
 800e5b2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800e874 <turn45outL+0x3c0>
 800e5b6:	eddf 0aae 	vldr	s1, [pc, #696]	; 800e870 <turn45outL+0x3bc>
 800e5ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e5be:	f7f6 fd77 	bl	80050b0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e5ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e5ce:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800e87c <turn45outL+0x3c8>
 800e5d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e5d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e5da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e5de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5ea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e5ee:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e5f2:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800e870 <turn45outL+0x3bc>
 800e5f6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	eeb0 2a47 	vmov.f32	s4, s14
 800e600:	eef0 1a65 	vmov.f32	s3, s11
 800e604:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800e874 <turn45outL+0x3c0>
 800e608:	eef0 0a46 	vmov.f32	s1, s12
 800e60c:	eeb0 0a66 	vmov.f32	s0, s13
 800e610:	f7f5 ff02 	bl	8004418 <straight_table2>
			highspeed_mode = 0;
 800e614:	4b95      	ldr	r3, [pc, #596]	; (800e86c <turn45outL+0x3b8>)
 800e616:	2200      	movs	r2, #0
 800e618:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e61a:	e11e      	b.n	800e85a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800e61c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e620:	2b01      	cmp	r3, #1
 800e622:	d97f      	bls.n	800e724 <turn45outL+0x270>
		highspeed_mode = 1;
 800e624:	4b91      	ldr	r3, [pc, #580]	; (800e86c <turn45outL+0x3b8>)
 800e626:	2201      	movs	r2, #1
 800e628:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e62e:	2300      	movs	r3, #0
 800e630:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e632:	2304      	movs	r3, #4
 800e634:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e636:	2300      	movs	r3, #0
 800e638:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e63a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e63e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e642:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e646:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e64a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e64e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e652:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e656:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e65a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e65e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800e870 <turn45outL+0x3bc>
 800e662:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	eeb0 2a47 	vmov.f32	s4, s14
 800e66c:	eef0 1a45 	vmov.f32	s3, s10
 800e670:	eeb0 1a65 	vmov.f32	s2, s11
 800e674:	eef0 0a46 	vmov.f32	s1, s12
 800e678:	eeb0 0a66 	vmov.f32	s0, s13
 800e67c:	f7f5 fecc 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800e680:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e684:	2b01      	cmp	r3, #1
 800e686:	d10c      	bne.n	800e6a2 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800e688:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e68c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e690:	eeb0 1a47 	vmov.f32	s2, s14
 800e694:	eddf 0a76 	vldr	s1, [pc, #472]	; 800e870 <turn45outL+0x3bc>
 800e698:	eeb0 0a67 	vmov.f32	s0, s15
 800e69c:	f7f6 fe58 	bl	8005350 <mollifier_slalom_table>
 800e6a0:	e013      	b.n	800e6ca <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e6a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e6a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e6aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e6ae:	eef0 2a66 	vmov.f32	s5, s13
 800e6b2:	eeb0 2a47 	vmov.f32	s4, s14
 800e6b6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800e874 <turn45outL+0x3c0>
 800e6ba:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800e874 <turn45outL+0x3c0>
 800e6be:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800e870 <turn45outL+0x3bc>
 800e6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e6c6:	f7f6 fcf3 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e6d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e6d6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800e87c <turn45outL+0x3c8>
 800e6da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e6de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e6e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e6e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e6ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e6ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6f2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e6f6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e6fa:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800e870 <turn45outL+0x3bc>
 800e6fe:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	eeb0 2a47 	vmov.f32	s4, s14
 800e708:	eef0 1a65 	vmov.f32	s3, s11
 800e70c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800e874 <turn45outL+0x3c0>
 800e710:	eef0 0a46 	vmov.f32	s1, s12
 800e714:	eeb0 0a66 	vmov.f32	s0, s13
 800e718:	f7f5 fe7e 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800e71c:	4b53      	ldr	r3, [pc, #332]	; (800e86c <turn45outL+0x3b8>)
 800e71e:	2200      	movs	r2, #0
 800e720:	701a      	strb	r2, [r3, #0]
}
 800e722:	e09a      	b.n	800e85a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e724:	2300      	movs	r3, #0
 800e726:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e728:	2300      	movs	r3, #0
 800e72a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e72c:	2304      	movs	r3, #4
 800e72e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e730:	2300      	movs	r3, #0
 800e732:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e734:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e738:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e73c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e740:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e744:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e748:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e750:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e754:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e758:	eddf 4a45 	vldr	s9, [pc, #276]	; 800e870 <turn45outL+0x3bc>
 800e75c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	eeb0 2a47 	vmov.f32	s4, s14
 800e766:	eef0 1a45 	vmov.f32	s3, s10
 800e76a:	eeb0 1a65 	vmov.f32	s2, s11
 800e76e:	eef0 0a46 	vmov.f32	s1, s12
 800e772:	eeb0 0a66 	vmov.f32	s0, s13
 800e776:	f7f5 fe4f 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800e77a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d10c      	bne.n	800e79c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800e782:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e786:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e78a:	eeb0 1a47 	vmov.f32	s2, s14
 800e78e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800e870 <turn45outL+0x3bc>
 800e792:	eeb0 0a67 	vmov.f32	s0, s15
 800e796:	f7f6 fddb 	bl	8005350 <mollifier_slalom_table>
 800e79a:	e013      	b.n	800e7c4 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e79c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e7a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e7a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e7a8:	eef0 2a66 	vmov.f32	s5, s13
 800e7ac:	eeb0 2a47 	vmov.f32	s4, s14
 800e7b0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800e874 <turn45outL+0x3c0>
 800e7b4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800e874 <turn45outL+0x3c0>
 800e7b8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800e870 <turn45outL+0x3bc>
 800e7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e7c0:	f7f6 fc76 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e7cc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e7d0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e7d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e7d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e7dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e7e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e7e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7ec:	eef0 7ae7 	vabs.f32	s15, s15
 800e7f0:	ee17 0a90 	vmov	r0, s15
 800e7f4:	f7f1 fed0 	bl	8000598 <__aeabi_f2d>
 800e7f8:	f04f 0200 	mov.w	r2, #0
 800e7fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e800:	f7f2 f84c 	bl	800089c <__aeabi_ddiv>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4614      	mov	r4, r2
 800e80a:	461d      	mov	r5, r3
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f1 fec2 	bl	8000598 <__aeabi_f2d>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4620      	mov	r0, r4
 800e81a:	4629      	mov	r1, r5
 800e81c:	f7f2 f83e 	bl	800089c <__aeabi_ddiv>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4610      	mov	r0, r2
 800e826:	4619      	mov	r1, r3
 800e828:	f04f 0200 	mov.w	r2, #0
 800e82c:	4b14      	ldr	r3, [pc, #80]	; (800e880 <turn45outL+0x3cc>)
 800e82e:	f7f1 fd55 	bl	80002dc <__adddf3>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e836:	4610      	mov	r0, r2
 800e838:	4619      	mov	r1, r3
 800e83a:	f7f2 f9dd 	bl	8000bf8 <__aeabi_d2f>
 800e83e:	4603      	mov	r3, r0
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	ee02 3a10 	vmov	s4, r3
 800e846:	edd7 1a01 	vldr	s3, [r7, #4]
 800e84a:	ed97 1a01 	vldr	s2, [r7, #4]
 800e84e:	eef0 0a68 	vmov.f32	s1, s17
 800e852:	eeb0 0a48 	vmov.f32	s0, s16
 800e856:	f7f5 fddf 	bl	8004418 <straight_table2>
}
 800e85a:	bf00      	nop
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	ecbd 8b02 	vpop	{d8}
 800e864:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e868:	b004      	add	sp, #16
 800e86a:	4770      	bx	lr
 800e86c:	20000814 	.word	0x20000814
 800e870:	42340000 	.word	0x42340000
 800e874:	00000000 	.word	0x00000000
 800e878:	42c4477b 	.word	0x42c4477b
 800e87c:	42b40000 	.word	0x42b40000
 800e880:	408f4000 	.word	0x408f4000

0800e884 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e884:	b084      	sub	sp, #16
 800e886:	b5b0      	push	{r4, r5, r7, lr}
 800e888:	ed2d 8b02 	vpush	{d8}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e898:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800e89c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	f040 80a5 	bne.w	800e9f0 <turn135outR+0x16c>
			highspeed_mode = 1;
 800e8a6:	4be9      	ldr	r3, [pc, #932]	; (800ec4c <turn135outR+0x3c8>)
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e8bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e8c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e8c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e8c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e8d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e8d8:	eddf 5add 	vldr	s11, [pc, #884]	; 800ec50 <turn135outR+0x3cc>
 800e8dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	eeb0 2a47 	vmov.f32	s4, s14
 800e8e6:	eef0 1a46 	vmov.f32	s3, s12
 800e8ea:	eeb0 1a66 	vmov.f32	s2, s13
 800e8ee:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800ec54 <turn135outR+0x3d0>
 800e8f2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800ec58 <turn135outR+0x3d4>
 800e8f6:	f7f5 fd8f 	bl	8004418 <straight_table2>
			wallmode.WallControlMode=0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800e8fe:	2303      	movs	r3, #3
 800e900:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e902:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e906:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e90a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e90e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e912:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e916:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e91a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e91e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e922:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e926:	eddf 4aca 	vldr	s9, [pc, #808]	; 800ec50 <turn135outR+0x3cc>
 800e92a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	eeb0 2a47 	vmov.f32	s4, s14
 800e934:	eef0 1a45 	vmov.f32	s3, s10
 800e938:	eeb0 1a65 	vmov.f32	s2, s11
 800e93c:	eef0 0a46 	vmov.f32	s1, s12
 800e940:	eeb0 0a66 	vmov.f32	s0, s13
 800e944:	f7f5 fd68 	bl	8004418 <straight_table2>
			if(mollifier_mode == ON){
 800e948:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10c      	bne.n	800e96a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800e950:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e954:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e958:	eeb0 1a47 	vmov.f32	s2, s14
 800e95c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800ec5c <turn135outR+0x3d8>
 800e960:	eeb0 0a67 	vmov.f32	s0, s15
 800e964:	f7f6 fcf4 	bl	8005350 <mollifier_slalom_table>
 800e968:	e015      	b.n	800e996 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e96a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e96e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e972:	eef1 7a67 	vneg.f32	s15, s15
 800e976:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e97a:	eef0 2a66 	vmov.f32	s5, s13
 800e97e:	eeb0 2a67 	vmov.f32	s4, s15
 800e982:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800ec54 <turn135outR+0x3d0>
 800e986:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800ec54 <turn135outR+0x3d0>
 800e98a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800ec5c <turn135outR+0x3d8>
 800e98e:	eeb0 0a47 	vmov.f32	s0, s14
 800e992:	f7f6 fb8d 	bl	80050b0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800e996:	2300      	movs	r3, #0
 800e998:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e99e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e9a2:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800ec60 <turn135outR+0x3dc>
 800e9a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e9aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e9ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e9b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e9b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9be:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800e9c2:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e9c6:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800ec50 <turn135outR+0x3cc>
 800e9ca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	eeb0 2a47 	vmov.f32	s4, s14
 800e9d4:	eef0 1a65 	vmov.f32	s3, s11
 800e9d8:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800ec54 <turn135outR+0x3d0>
 800e9dc:	eef0 0a46 	vmov.f32	s1, s12
 800e9e0:	eeb0 0a66 	vmov.f32	s0, s13
 800e9e4:	f7f5 fd18 	bl	8004418 <straight_table2>
			highspeed_mode = 0;
 800e9e8:	4b98      	ldr	r3, [pc, #608]	; (800ec4c <turn135outR+0x3c8>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e9ee:	e123      	b.n	800ec38 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800e9f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	f240 8082 	bls.w	800eafe <turn135outR+0x27a>
		highspeed_mode = 1;
 800e9fa:	4b94      	ldr	r3, [pc, #592]	; (800ec4c <turn135outR+0x3c8>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ea04:	2300      	movs	r3, #0
 800ea06:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ea10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ea14:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ea18:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ea1c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ea20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ea24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ea28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea2c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ea30:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ea34:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ec50 <turn135outR+0x3cc>
 800ea38:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	eeb0 2a47 	vmov.f32	s4, s14
 800ea42:	eef0 1a45 	vmov.f32	s3, s10
 800ea46:	eeb0 1a65 	vmov.f32	s2, s11
 800ea4a:	eef0 0a46 	vmov.f32	s1, s12
 800ea4e:	eeb0 0a66 	vmov.f32	s0, s13
 800ea52:	f7f5 fce1 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800ea56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d10c      	bne.n	800ea78 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ea5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ea62:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ea66:	eeb0 1a47 	vmov.f32	s2, s14
 800ea6a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800ec5c <turn135outR+0x3d8>
 800ea6e:	eeb0 0a67 	vmov.f32	s0, s15
 800ea72:	f7f6 fc6d 	bl	8005350 <mollifier_slalom_table>
 800ea76:	e015      	b.n	800eaa4 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ea78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ea7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ea80:	eef1 7a67 	vneg.f32	s15, s15
 800ea84:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ea88:	eef0 2a66 	vmov.f32	s5, s13
 800ea8c:	eeb0 2a67 	vmov.f32	s4, s15
 800ea90:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ec54 <turn135outR+0x3d0>
 800ea94:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ec54 <turn135outR+0x3d0>
 800ea98:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ec5c <turn135outR+0x3d8>
 800ea9c:	eeb0 0a47 	vmov.f32	s0, s14
 800eaa0:	f7f6 fb06 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800eaac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800eab0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ec60 <turn135outR+0x3dc>
 800eab4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800eab8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800eabc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800eac0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800eac4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800eac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eacc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ead0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ead4:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ec50 <turn135outR+0x3cc>
 800ead8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	eeb0 2a47 	vmov.f32	s4, s14
 800eae2:	eef0 1a65 	vmov.f32	s3, s11
 800eae6:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800ec54 <turn135outR+0x3d0>
 800eaea:	eef0 0a46 	vmov.f32	s1, s12
 800eaee:	eeb0 0a66 	vmov.f32	s0, s13
 800eaf2:	f7f5 fc91 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800eaf6:	4b55      	ldr	r3, [pc, #340]	; (800ec4c <turn135outR+0x3c8>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	701a      	strb	r2, [r3, #0]
}
 800eafc:	e09c      	b.n	800ec38 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800eafe:	2300      	movs	r3, #0
 800eb00:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800eb02:	2300      	movs	r3, #0
 800eb04:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800eb06:	2303      	movs	r3, #3
 800eb08:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800eb0e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800eb12:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800eb16:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800eb1a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800eb1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800eb22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800eb26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb2a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800eb2e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800eb32:	eddf 4a47 	vldr	s9, [pc, #284]	; 800ec50 <turn135outR+0x3cc>
 800eb36:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	eeb0 2a47 	vmov.f32	s4, s14
 800eb40:	eef0 1a45 	vmov.f32	s3, s10
 800eb44:	eeb0 1a65 	vmov.f32	s2, s11
 800eb48:	eef0 0a46 	vmov.f32	s1, s12
 800eb4c:	eeb0 0a66 	vmov.f32	s0, s13
 800eb50:	f7f5 fc62 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800eb54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d10c      	bne.n	800eb76 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800eb5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800eb60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800eb64:	eeb0 1a47 	vmov.f32	s2, s14
 800eb68:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ec5c <turn135outR+0x3d8>
 800eb6c:	eeb0 0a67 	vmov.f32	s0, s15
 800eb70:	f7f6 fbee 	bl	8005350 <mollifier_slalom_table>
 800eb74:	e015      	b.n	800eba2 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800eb76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800eb7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800eb7e:	eef1 7a67 	vneg.f32	s15, s15
 800eb82:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800eb86:	eef0 2a66 	vmov.f32	s5, s13
 800eb8a:	eeb0 2a67 	vmov.f32	s4, s15
 800eb8e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800ec54 <turn135outR+0x3d0>
 800eb92:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800ec54 <turn135outR+0x3d0>
 800eb96:	eddf 0a31 	vldr	s1, [pc, #196]	; 800ec5c <turn135outR+0x3d8>
 800eb9a:	eeb0 0a47 	vmov.f32	s0, s14
 800eb9e:	f7f6 fa87 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800eba2:	2301      	movs	r3, #1
 800eba4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ebaa:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ebae:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ebb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ebb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ebba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ebc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebca:	eef0 7ae7 	vabs.f32	s15, s15
 800ebce:	ee17 0a90 	vmov	r0, s15
 800ebd2:	f7f1 fce1 	bl	8000598 <__aeabi_f2d>
 800ebd6:	f04f 0200 	mov.w	r2, #0
 800ebda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebde:	f7f1 fe5d 	bl	800089c <__aeabi_ddiv>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	4614      	mov	r4, r2
 800ebe8:	461d      	mov	r5, r3
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7f1 fcd3 	bl	8000598 <__aeabi_f2d>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	f7f1 fe4f 	bl	800089c <__aeabi_ddiv>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4610      	mov	r0, r2
 800ec04:	4619      	mov	r1, r3
 800ec06:	f04f 0200 	mov.w	r2, #0
 800ec0a:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <turn135outR+0x3e0>)
 800ec0c:	f7f1 fb66 	bl	80002dc <__adddf3>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ec14:	4610      	mov	r0, r2
 800ec16:	4619      	mov	r1, r3
 800ec18:	f7f1 ffee 	bl	8000bf8 <__aeabi_d2f>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	ee02 3a10 	vmov	s4, r3
 800ec24:	edd7 1a01 	vldr	s3, [r7, #4]
 800ec28:	ed97 1a01 	vldr	s2, [r7, #4]
 800ec2c:	eef0 0a68 	vmov.f32	s1, s17
 800ec30:	eeb0 0a48 	vmov.f32	s0, s16
 800ec34:	f7f5 fbf0 	bl	8004418 <straight_table2>
}
 800ec38:	bf00      	nop
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	ecbd 8b02 	vpop	{d8}
 800ec42:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ec46:	b004      	add	sp, #16
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	20000814 	.word	0x20000814
 800ec50:	42340000 	.word	0x42340000
 800ec54:	00000000 	.word	0x00000000
 800ec58:	42c4477b 	.word	0x42c4477b
 800ec5c:	c3070000 	.word	0xc3070000
 800ec60:	42b40000 	.word	0x42b40000
 800ec64:	408f4000 	.word	0x408f4000

0800ec68 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800ec68:	b084      	sub	sp, #16
 800ec6a:	b5b0      	push	{r4, r5, r7, lr}
 800ec6c:	ed2d 8b02 	vpush	{d8}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ec78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ec7c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ec80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	f040 80a3 	bne.w	800edd0 <turn135outL+0x168>
		highspeed_mode = 1;
 800ec8a:	4be5      	ldr	r3, [pc, #916]	; (800f020 <turn135outL+0x3b8>)
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800eca0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800eca4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800eca8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ecac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ecb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecb4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ecb8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800ecbc:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800f024 <turn135outL+0x3bc>
 800ecc0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	eeb0 2a47 	vmov.f32	s4, s14
 800ecca:	eef0 1a46 	vmov.f32	s3, s12
 800ecce:	eeb0 1a66 	vmov.f32	s2, s13
 800ecd2:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800f028 <turn135outL+0x3c0>
 800ecd6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800f02c <turn135outL+0x3c4>
 800ecda:	f7f5 fb9d 	bl	8004418 <straight_table2>
		wallmode.WallControlMode=0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800ece2:	2304      	movs	r3, #4
 800ece4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ece6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ecea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ecee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ecf2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ecf6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ecfa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ecfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed02:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ed06:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ed0a:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800f024 <turn135outL+0x3bc>
 800ed0e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	eeb0 2a47 	vmov.f32	s4, s14
 800ed18:	eef0 1a45 	vmov.f32	s3, s10
 800ed1c:	eeb0 1a65 	vmov.f32	s2, s11
 800ed20:	eef0 0a46 	vmov.f32	s1, s12
 800ed24:	eeb0 0a66 	vmov.f32	s0, s13
 800ed28:	f7f5 fb76 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800ed2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d10c      	bne.n	800ed4e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ed34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ed38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ed3c:	eeb0 1a47 	vmov.f32	s2, s14
 800ed40:	eddf 0abb 	vldr	s1, [pc, #748]	; 800f030 <turn135outL+0x3c8>
 800ed44:	eeb0 0a67 	vmov.f32	s0, s15
 800ed48:	f7f6 fb02 	bl	8005350 <mollifier_slalom_table>
 800ed4c:	e013      	b.n	800ed76 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ed4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ed52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ed56:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ed5a:	eef0 2a66 	vmov.f32	s5, s13
 800ed5e:	eeb0 2a47 	vmov.f32	s4, s14
 800ed62:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800f028 <turn135outL+0x3c0>
 800ed66:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800f028 <turn135outL+0x3c0>
 800ed6a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800f030 <turn135outL+0x3c8>
 800ed6e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed72:	f7f6 f99d 	bl	80050b0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ed7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ed82:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800f034 <turn135outL+0x3cc>
 800ed86:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ed8a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ed8e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ed92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ed96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ed9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed9e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800eda2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800eda6:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800f024 <turn135outL+0x3bc>
 800edaa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	eeb0 2a47 	vmov.f32	s4, s14
 800edb4:	eef0 1a65 	vmov.f32	s3, s11
 800edb8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800f028 <turn135outL+0x3c0>
 800edbc:	eef0 0a46 	vmov.f32	s1, s12
 800edc0:	eeb0 0a66 	vmov.f32	s0, s13
 800edc4:	f7f5 fb28 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800edc8:	4b95      	ldr	r3, [pc, #596]	; (800f020 <turn135outL+0x3b8>)
 800edca:	2200      	movs	r2, #0
 800edcc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800edce:	e11e      	b.n	800f00e <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800edd0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d97f      	bls.n	800eed8 <turn135outL+0x270>
		highspeed_mode = 1;
 800edd8:	4b91      	ldr	r3, [pc, #580]	; (800f020 <turn135outL+0x3b8>)
 800edda:	2201      	movs	r2, #1
 800eddc:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800edde:	2300      	movs	r3, #0
 800ede0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800ede6:	2304      	movs	r3, #4
 800ede8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800edea:	2300      	movs	r3, #0
 800edec:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800edee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800edf2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800edf6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800edfa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800edfe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ee02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee0a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ee0e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ee12:	eddf 4a84 	vldr	s9, [pc, #528]	; 800f024 <turn135outL+0x3bc>
 800ee16:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	eeb0 2a47 	vmov.f32	s4, s14
 800ee20:	eef0 1a45 	vmov.f32	s3, s10
 800ee24:	eeb0 1a65 	vmov.f32	s2, s11
 800ee28:	eef0 0a46 	vmov.f32	s1, s12
 800ee2c:	eeb0 0a66 	vmov.f32	s0, s13
 800ee30:	f7f5 faf2 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800ee34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d10c      	bne.n	800ee56 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ee3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee40:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ee44:	eeb0 1a47 	vmov.f32	s2, s14
 800ee48:	eddf 0a79 	vldr	s1, [pc, #484]	; 800f030 <turn135outL+0x3c8>
 800ee4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee50:	f7f6 fa7e 	bl	8005350 <mollifier_slalom_table>
 800ee54:	e013      	b.n	800ee7e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ee56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ee5e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ee62:	eef0 2a66 	vmov.f32	s5, s13
 800ee66:	eeb0 2a47 	vmov.f32	s4, s14
 800ee6a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800f028 <turn135outL+0x3c0>
 800ee6e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800f028 <turn135outL+0x3c0>
 800ee72:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800f030 <turn135outL+0x3c8>
 800ee76:	eeb0 0a67 	vmov.f32	s0, s15
 800ee7a:	f7f6 f919 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ee86:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ee8a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800f034 <turn135outL+0x3cc>
 800ee8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ee92:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ee96:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ee9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ee9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800eea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eea6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800eeaa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800eeae:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800f024 <turn135outL+0x3bc>
 800eeb2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	eeb0 2a47 	vmov.f32	s4, s14
 800eebc:	eef0 1a65 	vmov.f32	s3, s11
 800eec0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800f028 <turn135outL+0x3c0>
 800eec4:	eef0 0a46 	vmov.f32	s1, s12
 800eec8:	eeb0 0a66 	vmov.f32	s0, s13
 800eecc:	f7f5 faa4 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800eed0:	4b53      	ldr	r3, [pc, #332]	; (800f020 <turn135outL+0x3b8>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	701a      	strb	r2, [r3, #0]
}
 800eed6:	e09a      	b.n	800f00e <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800eed8:	2300      	movs	r3, #0
 800eeda:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800eedc:	2300      	movs	r3, #0
 800eede:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800eee0:	2304      	movs	r3, #4
 800eee2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800eee8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800eeec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800eef0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800eef4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800eef8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800eefc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ef00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef04:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ef08:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ef0c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800f024 <turn135outL+0x3bc>
 800ef10:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	eeb0 2a47 	vmov.f32	s4, s14
 800ef1a:	eef0 1a45 	vmov.f32	s3, s10
 800ef1e:	eeb0 1a65 	vmov.f32	s2, s11
 800ef22:	eef0 0a46 	vmov.f32	s1, s12
 800ef26:	eeb0 0a66 	vmov.f32	s0, s13
 800ef2a:	f7f5 fa75 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800ef2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d10c      	bne.n	800ef50 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ef36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ef3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ef3e:	eeb0 1a47 	vmov.f32	s2, s14
 800ef42:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800f030 <turn135outL+0x3c8>
 800ef46:	eeb0 0a67 	vmov.f32	s0, s15
 800ef4a:	f7f6 fa01 	bl	8005350 <mollifier_slalom_table>
 800ef4e:	e013      	b.n	800ef78 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ef50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ef54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ef58:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ef5c:	eef0 2a66 	vmov.f32	s5, s13
 800ef60:	eeb0 2a47 	vmov.f32	s4, s14
 800ef64:	eddf 1a30 	vldr	s3, [pc, #192]	; 800f028 <turn135outL+0x3c0>
 800ef68:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800f028 <turn135outL+0x3c0>
 800ef6c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800f030 <turn135outL+0x3c8>
 800ef70:	eeb0 0a67 	vmov.f32	s0, s15
 800ef74:	f7f6 f89c 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ef80:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ef84:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ef88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ef8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ef90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef94:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ef9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efa0:	eef0 7ae7 	vabs.f32	s15, s15
 800efa4:	ee17 0a90 	vmov	r0, s15
 800efa8:	f7f1 faf6 	bl	8000598 <__aeabi_f2d>
 800efac:	f04f 0200 	mov.w	r2, #0
 800efb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efb4:	f7f1 fc72 	bl	800089c <__aeabi_ddiv>
 800efb8:	4602      	mov	r2, r0
 800efba:	460b      	mov	r3, r1
 800efbc:	4614      	mov	r4, r2
 800efbe:	461d      	mov	r5, r3
 800efc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7f1 fae8 	bl	8000598 <__aeabi_f2d>
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	4620      	mov	r0, r4
 800efce:	4629      	mov	r1, r5
 800efd0:	f7f1 fc64 	bl	800089c <__aeabi_ddiv>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	4610      	mov	r0, r2
 800efda:	4619      	mov	r1, r3
 800efdc:	f04f 0200 	mov.w	r2, #0
 800efe0:	4b15      	ldr	r3, [pc, #84]	; (800f038 <turn135outL+0x3d0>)
 800efe2:	f7f1 f97b 	bl	80002dc <__adddf3>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800efea:	4610      	mov	r0, r2
 800efec:	4619      	mov	r1, r3
 800efee:	f7f1 fe03 	bl	8000bf8 <__aeabi_d2f>
 800eff2:	4603      	mov	r3, r0
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	ee02 3a10 	vmov	s4, r3
 800effa:	edd7 1a01 	vldr	s3, [r7, #4]
 800effe:	ed97 1a01 	vldr	s2, [r7, #4]
 800f002:	eef0 0a68 	vmov.f32	s1, s17
 800f006:	eeb0 0a48 	vmov.f32	s0, s16
 800f00a:	f7f5 fa05 	bl	8004418 <straight_table2>
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	ecbd 8b02 	vpop	{d8}
 800f018:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f01c:	b004      	add	sp, #16
 800f01e:	4770      	bx	lr
 800f020:	20000814 	.word	0x20000814
 800f024:	42340000 	.word	0x42340000
 800f028:	00000000 	.word	0x00000000
 800f02c:	42c4477b 	.word	0x42c4477b
 800f030:	43070000 	.word	0x43070000
 800f034:	42b40000 	.word	0x42b40000
 800f038:	408f4000 	.word	0x408f4000
 800f03c:	00000000 	.word	0x00000000

0800f040 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800f040:	b084      	sub	sp, #16
 800f042:	b5b0      	push	{r4, r5, r7, lr}
 800f044:	ed2d 8b02 	vpush	{d8}
 800f048:	b084      	sub	sp, #16
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f054:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800f058:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	f040 80af 	bne.w	800f1c0 <V90R+0x180>
			highspeed_mode = 1;
 800f062:	4bc1      	ldr	r3, [pc, #772]	; (800f368 <V90R+0x328>)
 800f064:	2201      	movs	r2, #1
 800f066:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800f068:	2300      	movs	r3, #0
 800f06a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800f06c:	2300      	movs	r3, #0
 800f06e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800f070:	2300      	movs	r3, #0
 800f072:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800f074:	2300      	movs	r3, #0
 800f076:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800f078:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f07c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f080:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f08c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f090:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800f094:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800f36c <V90R+0x32c>
 800f098:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	eeb0 2a47 	vmov.f32	s4, s14
 800f0a2:	eef0 1a46 	vmov.f32	s3, s12
 800f0a6:	eeb0 1a66 	vmov.f32	s2, s13
 800f0aa:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800f374 <V90R+0x334>
 800f0ae:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800f370 <V90R+0x330>
 800f0b2:	f7f5 f9b1 	bl	8004418 <straight_table2>
			wallmode.WallControlMode=0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f0be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f0c2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f0c6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f0ca:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f0ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f0d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0da:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f0de:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f0e2:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800f36c <V90R+0x32c>
 800f0e6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	eeb0 2a47 	vmov.f32	s4, s14
 800f0f0:	eef0 1a45 	vmov.f32	s3, s10
 800f0f4:	eeb0 1a65 	vmov.f32	s2, s11
 800f0f8:	eef0 0a46 	vmov.f32	s1, s12
 800f0fc:	eeb0 0a66 	vmov.f32	s0, s13
 800f100:	f7f5 f98a 	bl	8004418 <straight_table2>
			if(mollifier_mode == ON){
 800f104:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d10c      	bne.n	800f126 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800f10c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f110:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f114:	eeb0 1a47 	vmov.f32	s2, s14
 800f118:	eddf 0a97 	vldr	s1, [pc, #604]	; 800f378 <V90R+0x338>
 800f11c:	eeb0 0a67 	vmov.f32	s0, s15
 800f120:	f7f6 f916 	bl	8005350 <mollifier_slalom_table>
 800f124:	e015      	b.n	800f152 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800f126:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f12a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f12e:	eef1 7a67 	vneg.f32	s15, s15
 800f132:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f136:	eef0 2a66 	vmov.f32	s5, s13
 800f13a:	eeb0 2a67 	vmov.f32	s4, s15
 800f13e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800f374 <V90R+0x334>
 800f142:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800f374 <V90R+0x334>
 800f146:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800f378 <V90R+0x338>
 800f14a:	eeb0 0a47 	vmov.f32	s0, s14
 800f14e:	f7f5 ffaf 	bl	80050b0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800f152:	2300      	movs	r3, #0
 800f154:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7f1 fa1b 	bl	8000598 <__aeabi_f2d>
 800f162:	a37f      	add	r3, pc, #508	; (adr r3, 800f360 <V90R+0x320>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f7f1 f8b8 	bl	80002dc <__adddf3>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	4610      	mov	r0, r2
 800f172:	4619      	mov	r1, r3
 800f174:	f7f1 fd40 	bl	8000bf8 <__aeabi_d2f>
 800f178:	4603      	mov	r3, r0
 800f17a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f17e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f182:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f18a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f18e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f192:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f196:	eddf 5a75 	vldr	s11, [pc, #468]	; 800f36c <V90R+0x32c>
 800f19a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	eeb0 2a47 	vmov.f32	s4, s14
 800f1a4:	eef0 1a46 	vmov.f32	s3, s12
 800f1a8:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800f374 <V90R+0x334>
 800f1ac:	eef0 0a66 	vmov.f32	s1, s13
 800f1b0:	ee00 3a10 	vmov	s0, r3
 800f1b4:	f7f5 f930 	bl	8004418 <straight_table2>
			highspeed_mode = 0;
 800f1b8:	4b6b      	ldr	r3, [pc, #428]	; (800f368 <V90R+0x328>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800f1be:	e13e      	b.n	800f43e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800f1c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	f240 808c 	bls.w	800f2e2 <V90R+0x2a2>
		highspeed_mode = 1;
 800f1ca:	4b67      	ldr	r3, [pc, #412]	; (800f368 <V90R+0x328>)
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f1e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f1e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f1e8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f1ec:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f1f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f1f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f1f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1fc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f200:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f204:	eddf 4a59 	vldr	s9, [pc, #356]	; 800f36c <V90R+0x32c>
 800f208:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	eeb0 2a47 	vmov.f32	s4, s14
 800f212:	eef0 1a45 	vmov.f32	s3, s10
 800f216:	eeb0 1a65 	vmov.f32	s2, s11
 800f21a:	eef0 0a46 	vmov.f32	s1, s12
 800f21e:	eeb0 0a66 	vmov.f32	s0, s13
 800f222:	f7f5 f8f9 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800f226:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d10c      	bne.n	800f248 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800f22e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f232:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f236:	eeb0 1a47 	vmov.f32	s2, s14
 800f23a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800f378 <V90R+0x338>
 800f23e:	eeb0 0a67 	vmov.f32	s0, s15
 800f242:	f7f6 f885 	bl	8005350 <mollifier_slalom_table>
 800f246:	e015      	b.n	800f274 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800f248:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f24c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f250:	eef1 7a67 	vneg.f32	s15, s15
 800f254:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f258:	eef0 2a66 	vmov.f32	s5, s13
 800f25c:	eeb0 2a67 	vmov.f32	s4, s15
 800f260:	eddf 1a44 	vldr	s3, [pc, #272]	; 800f374 <V90R+0x334>
 800f264:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800f374 <V90R+0x334>
 800f268:	eddf 0a43 	vldr	s1, [pc, #268]	; 800f378 <V90R+0x338>
 800f26c:	eeb0 0a47 	vmov.f32	s0, s14
 800f270:	f7f5 ff1e 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800f274:	2300      	movs	r3, #0
 800f276:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800f278:	2300      	movs	r3, #0
 800f27a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27e:	4618      	mov	r0, r3
 800f280:	f7f1 f98a 	bl	8000598 <__aeabi_f2d>
 800f284:	a336      	add	r3, pc, #216	; (adr r3, 800f360 <V90R+0x320>)
 800f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28a:	f7f1 f827 	bl	80002dc <__adddf3>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4610      	mov	r0, r2
 800f294:	4619      	mov	r1, r3
 800f296:	f7f1 fcaf 	bl	8000bf8 <__aeabi_d2f>
 800f29a:	4603      	mov	r3, r0
 800f29c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f2a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f2a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f2a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f2ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f2b4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f2b8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f36c <V90R+0x32c>
 800f2bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	eeb0 2a47 	vmov.f32	s4, s14
 800f2c6:	eef0 1a46 	vmov.f32	s3, s12
 800f2ca:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800f374 <V90R+0x334>
 800f2ce:	eef0 0a66 	vmov.f32	s1, s13
 800f2d2:	ee00 3a10 	vmov	s0, r3
 800f2d6:	f7f5 f89f 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800f2da:	4b23      	ldr	r3, [pc, #140]	; (800f368 <V90R+0x328>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	701a      	strb	r2, [r3, #0]
}
 800f2e0:	e0ad      	b.n	800f43e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f2f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f2f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f2fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f2fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f302:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f306:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f30e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f312:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f316:	eddf 4a15 	vldr	s9, [pc, #84]	; 800f36c <V90R+0x32c>
 800f31a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	eeb0 2a47 	vmov.f32	s4, s14
 800f324:	eef0 1a45 	vmov.f32	s3, s10
 800f328:	eeb0 1a65 	vmov.f32	s2, s11
 800f32c:	eef0 0a46 	vmov.f32	s1, s12
 800f330:	eeb0 0a66 	vmov.f32	s0, s13
 800f334:	f7f5 f870 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800f338:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d11d      	bne.n	800f37c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800f340:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f344:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f348:	eeb0 1a47 	vmov.f32	s2, s14
 800f34c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800f378 <V90R+0x338>
 800f350:	eeb0 0a67 	vmov.f32	s0, s15
 800f354:	f7f5 fffc 	bl	8005350 <mollifier_slalom_table>
 800f358:	e026      	b.n	800f3a8 <V90R+0x368>
 800f35a:	bf00      	nop
 800f35c:	f3af 8000 	nop.w
 800f360:	c022ec18 	.word	0xc022ec18
 800f364:	405fd1de 	.word	0x405fd1de
 800f368:	20000814 	.word	0x20000814
 800f36c:	42340000 	.word	0x42340000
 800f370:	42c4477b 	.word	0x42c4477b
 800f374:	00000000 	.word	0x00000000
 800f378:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800f37c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f380:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f384:	eef1 7a67 	vneg.f32	s15, s15
 800f388:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f38c:	eef0 2a66 	vmov.f32	s5, s13
 800f390:	eeb0 2a67 	vmov.f32	s4, s15
 800f394:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800f374 <V90R+0x334>
 800f398:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800f374 <V90R+0x334>
 800f39c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800f378 <V90R+0x338>
 800f3a0:	eeb0 0a47 	vmov.f32	s0, s14
 800f3a4:	f7f5 fe84 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800f3a8:	2303      	movs	r3, #3
 800f3aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800f3b0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800f3b4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800f3b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f3bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f3c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f3c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f3cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3d0:	eef0 7ae7 	vabs.f32	s15, s15
 800f3d4:	ee17 0a90 	vmov	r0, s15
 800f3d8:	f7f1 f8de 	bl	8000598 <__aeabi_f2d>
 800f3dc:	f04f 0200 	mov.w	r2, #0
 800f3e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f3e4:	f7f1 fa5a 	bl	800089c <__aeabi_ddiv>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4614      	mov	r4, r2
 800f3ee:	461d      	mov	r5, r3
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f1 f8d0 	bl	8000598 <__aeabi_f2d>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f1 fa4c 	bl	800089c <__aeabi_ddiv>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	4610      	mov	r0, r2
 800f40a:	4619      	mov	r1, r3
 800f40c:	f04f 0200 	mov.w	r2, #0
 800f410:	4b0f      	ldr	r3, [pc, #60]	; (800f450 <V90R+0x410>)
 800f412:	f7f0 ff63 	bl	80002dc <__adddf3>
 800f416:	4602      	mov	r2, r0
 800f418:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800f41a:	4610      	mov	r0, r2
 800f41c:	4619      	mov	r1, r3
 800f41e:	f7f1 fbeb 	bl	8000bf8 <__aeabi_d2f>
 800f422:	4603      	mov	r3, r0
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	ee02 3a10 	vmov	s4, r3
 800f42a:	edd7 1a01 	vldr	s3, [r7, #4]
 800f42e:	ed97 1a01 	vldr	s2, [r7, #4]
 800f432:	eef0 0a68 	vmov.f32	s1, s17
 800f436:	eeb0 0a48 	vmov.f32	s0, s16
 800f43a:	f7f4 ffed 	bl	8004418 <straight_table2>
}
 800f43e:	bf00      	nop
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	ecbd 8b02 	vpop	{d8}
 800f448:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f44c:	b004      	add	sp, #16
 800f44e:	4770      	bx	lr
 800f450:	408f4000 	.word	0x408f4000
 800f454:	00000000 	.word	0x00000000

0800f458 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800f458:	b084      	sub	sp, #16
 800f45a:	b5b0      	push	{r4, r5, r7, lr}
 800f45c:	ed2d 8b02 	vpush	{d8}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f46c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800f470:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f474:	2b01      	cmp	r3, #1
 800f476:	f040 80ad 	bne.w	800f5d4 <V90L+0x17c>
				highspeed_mode = 1;
 800f47a:	4bbf      	ldr	r3, [pc, #764]	; (800f778 <V90L+0x320>)
 800f47c:	2201      	movs	r2, #1
 800f47e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800f480:	2300      	movs	r3, #0
 800f482:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800f484:	2300      	movs	r3, #0
 800f486:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800f488:	2300      	movs	r3, #0
 800f48a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800f490:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f494:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f498:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f49c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f4a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800f4ac:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800f77c <V90L+0x324>
 800f4b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	eeb0 2a47 	vmov.f32	s4, s14
 800f4ba:	eef0 1a46 	vmov.f32	s3, s12
 800f4be:	eeb0 1a66 	vmov.f32	s2, s13
 800f4c2:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800f784 <V90L+0x32c>
 800f4c6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800f780 <V90L+0x328>
 800f4ca:	f7f4 ffa5 	bl	8004418 <straight_table2>
				wallmode.WallControlMode=0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800f4d2:	2304      	movs	r3, #4
 800f4d4:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f4d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f4da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f4de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f4e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f4e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f4ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f4ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f4f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f4fa:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800f77c <V90L+0x324>
 800f4fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	eeb0 2a47 	vmov.f32	s4, s14
 800f508:	eef0 1a45 	vmov.f32	s3, s10
 800f50c:	eeb0 1a65 	vmov.f32	s2, s11
 800f510:	eef0 0a46 	vmov.f32	s1, s12
 800f514:	eeb0 0a66 	vmov.f32	s0, s13
 800f518:	f7f4 ff7e 	bl	8004418 <straight_table2>
				if(mollifier_mode == ON){
 800f51c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f520:	2b01      	cmp	r3, #1
 800f522:	d10c      	bne.n	800f53e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800f524:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f528:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f52c:	eeb0 1a47 	vmov.f32	s2, s14
 800f530:	eddf 0a95 	vldr	s1, [pc, #596]	; 800f788 <V90L+0x330>
 800f534:	eeb0 0a67 	vmov.f32	s0, s15
 800f538:	f7f5 ff0a 	bl	8005350 <mollifier_slalom_table>
 800f53c:	e013      	b.n	800f566 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800f53e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f542:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f546:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f54a:	eef0 2a66 	vmov.f32	s5, s13
 800f54e:	eeb0 2a47 	vmov.f32	s4, s14
 800f552:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800f784 <V90L+0x32c>
 800f556:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800f784 <V90L+0x32c>
 800f55a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800f788 <V90L+0x330>
 800f55e:	eeb0 0a67 	vmov.f32	s0, s15
 800f562:	f7f5 fda5 	bl	80050b0 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800f566:	2300      	movs	r3, #0
 800f568:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	4618      	mov	r0, r3
 800f572:	f7f1 f811 	bl	8000598 <__aeabi_f2d>
 800f576:	a37e      	add	r3, pc, #504	; (adr r3, 800f770 <V90L+0x318>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f0 feae 	bl	80002dc <__adddf3>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4610      	mov	r0, r2
 800f586:	4619      	mov	r1, r3
 800f588:	f7f1 fb36 	bl	8000bf8 <__aeabi_d2f>
 800f58c:	4603      	mov	r3, r0
 800f58e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f592:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f596:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f59a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f59e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5a2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f5a6:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f5aa:	eddf 5a74 	vldr	s11, [pc, #464]	; 800f77c <V90L+0x324>
 800f5ae:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	eeb0 2a47 	vmov.f32	s4, s14
 800f5b8:	eef0 1a46 	vmov.f32	s3, s12
 800f5bc:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800f784 <V90L+0x32c>
 800f5c0:	eef0 0a66 	vmov.f32	s1, s13
 800f5c4:	ee00 3a10 	vmov	s0, r3
 800f5c8:	f7f4 ff26 	bl	8004418 <straight_table2>
				highspeed_mode = 0;
 800f5cc:	4b6a      	ldr	r3, [pc, #424]	; (800f778 <V90L+0x320>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800f5d2:	e13a      	b.n	800f84a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800f5d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	f240 808a 	bls.w	800f6f2 <V90L+0x29a>
		highspeed_mode = 1;
 800f5de:	4b66      	ldr	r3, [pc, #408]	; (800f778 <V90L+0x320>)
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f5f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f5f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f5fc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f600:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f604:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f60c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f610:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f614:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f618:	eddf 4a58 	vldr	s9, [pc, #352]	; 800f77c <V90L+0x324>
 800f61c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	eeb0 2a47 	vmov.f32	s4, s14
 800f626:	eef0 1a45 	vmov.f32	s3, s10
 800f62a:	eeb0 1a65 	vmov.f32	s2, s11
 800f62e:	eef0 0a46 	vmov.f32	s1, s12
 800f632:	eeb0 0a66 	vmov.f32	s0, s13
 800f636:	f7f4 feef 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800f63a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d10c      	bne.n	800f65c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800f642:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f646:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f64a:	eeb0 1a47 	vmov.f32	s2, s14
 800f64e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800f788 <V90L+0x330>
 800f652:	eeb0 0a67 	vmov.f32	s0, s15
 800f656:	f7f5 fe7b 	bl	8005350 <mollifier_slalom_table>
 800f65a:	e013      	b.n	800f684 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800f65c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f660:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f664:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f668:	eef0 2a66 	vmov.f32	s5, s13
 800f66c:	eeb0 2a47 	vmov.f32	s4, s14
 800f670:	eddf 1a44 	vldr	s3, [pc, #272]	; 800f784 <V90L+0x32c>
 800f674:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800f784 <V90L+0x32c>
 800f678:	eddf 0a43 	vldr	s1, [pc, #268]	; 800f788 <V90L+0x330>
 800f67c:	eeb0 0a67 	vmov.f32	s0, s15
 800f680:	f7f5 fd16 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=0;
 800f684:	2300      	movs	r3, #0
 800f686:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800f688:	2300      	movs	r3, #0
 800f68a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f0 ff82 	bl	8000598 <__aeabi_f2d>
 800f694:	a336      	add	r3, pc, #216	; (adr r3, 800f770 <V90L+0x318>)
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	f7f0 fe1f 	bl	80002dc <__adddf3>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	f7f1 faa7 	bl	8000bf8 <__aeabi_d2f>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800f6b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f6c4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800f6c8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f77c <V90L+0x324>
 800f6cc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800f6d6:	eef0 1a46 	vmov.f32	s3, s12
 800f6da:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800f784 <V90L+0x32c>
 800f6de:	eef0 0a66 	vmov.f32	s1, s13
 800f6e2:	ee00 3a10 	vmov	s0, r3
 800f6e6:	f7f4 fe97 	bl	8004418 <straight_table2>
		highspeed_mode = 0;
 800f6ea:	4b23      	ldr	r3, [pc, #140]	; (800f778 <V90L+0x320>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	701a      	strb	r2, [r3, #0]
}
 800f6f0:	e0ab      	b.n	800f84a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f702:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f706:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f70a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800f70e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800f712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f71e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f722:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800f726:	eddf 4a15 	vldr	s9, [pc, #84]	; 800f77c <V90L+0x324>
 800f72a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	eeb0 2a47 	vmov.f32	s4, s14
 800f734:	eef0 1a45 	vmov.f32	s3, s10
 800f738:	eeb0 1a65 	vmov.f32	s2, s11
 800f73c:	eef0 0a46 	vmov.f32	s1, s12
 800f740:	eeb0 0a66 	vmov.f32	s0, s13
 800f744:	f7f4 fe68 	bl	8004418 <straight_table2>
		if(mollifier_mode == ON){
 800f748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d11d      	bne.n	800f78c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800f750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f754:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f758:	eeb0 1a47 	vmov.f32	s2, s14
 800f75c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800f788 <V90L+0x330>
 800f760:	eeb0 0a67 	vmov.f32	s0, s15
 800f764:	f7f5 fdf4 	bl	8005350 <mollifier_slalom_table>
 800f768:	e024      	b.n	800f7b4 <V90L+0x35c>
 800f76a:	bf00      	nop
 800f76c:	f3af 8000 	nop.w
 800f770:	c022ec18 	.word	0xc022ec18
 800f774:	405fd1de 	.word	0x405fd1de
 800f778:	20000814 	.word	0x20000814
 800f77c:	42340000 	.word	0x42340000
 800f780:	42d4477b 	.word	0x42d4477b
 800f784:	00000000 	.word	0x00000000
 800f788:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800f78c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f790:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f794:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f798:	eef0 2a66 	vmov.f32	s5, s13
 800f79c:	eeb0 2a47 	vmov.f32	s4, s14
 800f7a0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800f784 <V90L+0x32c>
 800f7a4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800f784 <V90L+0x32c>
 800f7a8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800f788 <V90L+0x330>
 800f7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800f7b0:	f7f5 fc7e 	bl	80050b0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800f7bc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800f7c0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800f7c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f7c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800f7d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7dc:	eef0 7ae7 	vabs.f32	s15, s15
 800f7e0:	ee17 0a90 	vmov	r0, s15
 800f7e4:	f7f0 fed8 	bl	8000598 <__aeabi_f2d>
 800f7e8:	f04f 0200 	mov.w	r2, #0
 800f7ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f7f0:	f7f1 f854 	bl	800089c <__aeabi_ddiv>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4614      	mov	r4, r2
 800f7fa:	461d      	mov	r5, r3
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f0 feca 	bl	8000598 <__aeabi_f2d>
 800f804:	4602      	mov	r2, r0
 800f806:	460b      	mov	r3, r1
 800f808:	4620      	mov	r0, r4
 800f80a:	4629      	mov	r1, r5
 800f80c:	f7f1 f846 	bl	800089c <__aeabi_ddiv>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	4610      	mov	r0, r2
 800f816:	4619      	mov	r1, r3
 800f818:	f04f 0200 	mov.w	r2, #0
 800f81c:	4b0f      	ldr	r3, [pc, #60]	; (800f85c <V90L+0x404>)
 800f81e:	f7f0 fd5d 	bl	80002dc <__adddf3>
 800f822:	4602      	mov	r2, r0
 800f824:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800f826:	4610      	mov	r0, r2
 800f828:	4619      	mov	r1, r3
 800f82a:	f7f1 f9e5 	bl	8000bf8 <__aeabi_d2f>
 800f82e:	4603      	mov	r3, r0
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	ee02 3a10 	vmov	s4, r3
 800f836:	edd7 1a01 	vldr	s3, [r7, #4]
 800f83a:	ed97 1a01 	vldr	s2, [r7, #4]
 800f83e:	eef0 0a68 	vmov.f32	s1, s17
 800f842:	eeb0 0a48 	vmov.f32	s0, s16
 800f846:	f7f4 fde7 	bl	8004418 <straight_table2>
}
 800f84a:	bf00      	nop
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	ecbd 8b02 	vpop	{d8}
 800f854:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f858:	b004      	add	sp, #16
 800f85a:	4770      	bx	lr
 800f85c:	408f4000 	.word	0x408f4000

0800f860 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800f860:	b084      	sub	sp, #16
 800f862:	b580      	push	{r7, lr}
 800f864:	b086      	sub	sp, #24
 800f866:	af04      	add	r7, sp, #16
 800f868:	f107 0c10 	add.w	ip, r7, #16
 800f86c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800f870:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800f874:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d116      	bne.n	800f8aa <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800f87c:	2001      	movs	r0, #1
 800f87e:	f7f9 fa83 	bl	8008d88 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800f882:	2003      	movs	r0, #3
 800f884:	f7f9 fa8a 	bl	8008d9c <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800f888:	ed97 0a01 	vldr	s0, [r7, #4]
 800f88c:	f7f9 fb1a 	bl	8008ec4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800f890:	f7f9 fb04 	bl	8008e9c <pl_FunMotor_start>
		HAL_Delay(600);
 800f894:	f44f 7016 	mov.w	r0, #600	; 0x258
 800f898:	f00b f8cc 	bl	801aa34 <HAL_Delay>
		reset_gyro();
 800f89c:	f7f2 f9b4 	bl	8001c08 <reset_gyro>
		reset_speed();
 800f8a0:	f7f1 fbc0 	bl	8001024 <reset_speed>
		clear_Ierror();
 800f8a4:	f7f6 f8dc 	bl	8005a60 <clear_Ierror>
 800f8a8:	e00b      	b.n	800f8c2 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	f7f9 fa6c 	bl	8008d88 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800f8b0:	2003      	movs	r0, #3
 800f8b2:	f7f9 fa73 	bl	8008d9c <pl_L_DriveMotor_mode>
		reset_gyro();
 800f8b6:	f7f2 f9a7 	bl	8001c08 <reset_gyro>
		reset_speed();
 800f8ba:	f7f1 fbb3 	bl	8001024 <reset_speed>
		clear_Ierror();
 800f8be:	f7f6 f8cf 	bl	8005a60 <clear_Ierror>

	}
	record_mode=2;
 800f8c2:	4ba8      	ldr	r3, [pc, #672]	; (800fb64 <testturning+0x304>)
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800f8c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d110      	bne.n	800f8f2 <testturning+0x92>
 800f8d0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f8d4:	9303      	str	r3, [sp, #12]
 800f8d6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800f8da:	9302      	str	r3, [sp, #8]
 800f8dc:	2301      	movs	r3, #1
 800f8de:	9301      	str	r3, [sp, #4]
 800f8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e2:	9300      	str	r3, [sp, #0]
 800f8e4:	f107 0318 	add.w	r3, r7, #24
 800f8e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f8ea:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800fb68 <testturning+0x308>
 800f8ee:	f7fc f973 	bl	800bbd8 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800f8f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d110      	bne.n	800f91c <testturning+0xbc>
 800f8fa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f8fe:	9303      	str	r3, [sp, #12]
 800f900:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800f904:	9302      	str	r3, [sp, #8]
 800f906:	2301      	movs	r3, #1
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f914:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800fb68 <testturning+0x308>
 800f918:	f7fc fb44 	bl	800bfa4 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800f91c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f920:	2b02      	cmp	r3, #2
 800f922:	d10d      	bne.n	800f940 <testturning+0xe0>
 800f924:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f928:	9302      	str	r3, [sp, #8]
 800f92a:	2301      	movs	r3, #1
 800f92c:	9301      	str	r3, [sp, #4]
 800f92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f938:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800fb68 <testturning+0x308>
 800f93c:	f7fc fd14 	bl	800c368 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800f940:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f944:	2b03      	cmp	r3, #3
 800f946:	d10d      	bne.n	800f964 <testturning+0x104>
 800f948:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f94c:	9302      	str	r3, [sp, #8]
 800f94e:	2301      	movs	r3, #1
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f95a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f95c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800fb68 <testturning+0x308>
 800f960:	f7fc fe6c 	bl	800c63c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800f964:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f968:	2b04      	cmp	r3, #4
 800f96a:	d10d      	bne.n	800f988 <testturning+0x128>
 800f96c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f970:	9302      	str	r3, [sp, #8]
 800f972:	2301      	movs	r3, #1
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f97e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f980:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800fb68 <testturning+0x308>
 800f984:	f7fc ffbe 	bl	800c904 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800f988:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f98c:	2b05      	cmp	r3, #5
 800f98e:	d10e      	bne.n	800f9ae <testturning+0x14e>
 800f990:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f994:	9302      	str	r3, [sp, #8]
 800f996:	2301      	movs	r3, #1
 800f998:	9301      	str	r3, [sp, #4]
 800f99a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f9a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9a6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800fb68 <testturning+0x308>
 800f9aa:	f7fd f915 	bl	800cbd8 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800f9ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f9b2:	2b06      	cmp	r3, #6
 800f9b4:	d10e      	bne.n	800f9d4 <testturning+0x174>
 800f9b6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f9ba:	9302      	str	r3, [sp, #8]
 800f9bc:	2301      	movs	r3, #1
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f9ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9cc:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800fb68 <testturning+0x308>
 800f9d0:	f7fd fa6a 	bl	800cea8 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800f9d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f9d8:	2b07      	cmp	r3, #7
 800f9da:	d10e      	bne.n	800f9fa <testturning+0x19a>
 800f9dc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800f9e0:	9302      	str	r3, [sp, #8]
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f9ea:	9300      	str	r3, [sp, #0]
 800f9ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f9f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9f2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800fb68 <testturning+0x308>
 800f9f6:	f7fd fc9f 	bl	800d338 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800f9fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f9fe:	2b08      	cmp	r3, #8
 800fa00:	d10e      	bne.n	800fa20 <testturning+0x1c0>
 800fa02:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fa06:	9302      	str	r3, [sp, #8]
 800fa08:	2301      	movs	r3, #1
 800fa0a:	9301      	str	r3, [sp, #4]
 800fa0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fa16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa18:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800fb68 <testturning+0x308>
 800fa1c:	f7fd fecc 	bl	800d7b8 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800fa20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fa24:	2b09      	cmp	r3, #9
 800fa26:	d10e      	bne.n	800fa46 <testturning+0x1e6>
 800fa28:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fa2c:	9302      	str	r3, [sp, #8]
 800fa2e:	2301      	movs	r3, #1
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fa3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa3e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800fb68 <testturning+0x308>
 800fa42:	f7fe f901 	bl	800dc48 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800fa46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fa4a:	2b0a      	cmp	r3, #10
 800fa4c:	d10e      	bne.n	800fa6c <testturning+0x20c>
 800fa4e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fa52:	9302      	str	r3, [sp, #8]
 800fa54:	2301      	movs	r3, #1
 800fa56:	9301      	str	r3, [sp, #4]
 800fa58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800fa62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa64:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fb68 <testturning+0x308>
 800fa68:	f7fe fb32 	bl	800e0d0 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800fa6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fa70:	2b0b      	cmp	r3, #11
 800fa72:	d10e      	bne.n	800fa92 <testturning+0x232>
 800fa74:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fa78:	9302      	str	r3, [sp, #8]
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800fa88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa8a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800fb68 <testturning+0x308>
 800fa8e:	f7fe fd11 	bl	800e4b4 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800fa92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fa96:	2b0c      	cmp	r3, #12
 800fa98:	d10e      	bne.n	800fab8 <testturning+0x258>
 800fa9a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fa9e:	9302      	str	r3, [sp, #8]
 800faa0:	2301      	movs	r3, #1
 800faa2:	9301      	str	r3, [sp, #4]
 800faa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fab0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800fb68 <testturning+0x308>
 800fab4:	f7fe fee6 	bl	800e884 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800fab8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fabc:	2b0d      	cmp	r3, #13
 800fabe:	d10e      	bne.n	800fade <testturning+0x27e>
 800fac0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fac4:	9302      	str	r3, [sp, #8]
 800fac6:	2301      	movs	r3, #1
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800fad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fad6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800fb68 <testturning+0x308>
 800fada:	f7ff f8c5 	bl	800ec68 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800fade:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fae2:	2b0e      	cmp	r3, #14
 800fae4:	d10e      	bne.n	800fb04 <testturning+0x2a4>
 800fae6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800faea:	9302      	str	r3, [sp, #8]
 800faec:	2301      	movs	r3, #1
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fafa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fafc:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800fb68 <testturning+0x308>
 800fb00:	f7ff fa9e 	bl	800f040 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800fb04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fb08:	2b0f      	cmp	r3, #15
 800fb0a:	d10e      	bne.n	800fb2a <testturning+0x2ca>
 800fb0c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800fb10:	9302      	str	r3, [sp, #8]
 800fb12:	2301      	movs	r3, #1
 800fb14:	9301      	str	r3, [sp, #4]
 800fb16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800fb20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb22:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800fb68 <testturning+0x308>
 800fb26:	f7ff fc97 	bl	800f458 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800fb2a:	4b0e      	ldr	r3, [pc, #56]	; (800fb64 <testturning+0x304>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fb30:	2003      	movs	r0, #3
 800fb32:	f7f9 f95b 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fb36:	2003      	movs	r0, #3
 800fb38:	f7f9 f930 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fb3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb40:	f7f9 fc52 	bl	80093e8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800fb44:	f7f9 f9b4 	bl	8008eb0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800fb48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb4c:	f7f9 fc4c 	bl	80093e8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800fb50:	2000      	movs	r0, #0
 800fb52:	f7f9 f919 	bl	8008d88 <pl_DriveMotor_standby>

}
 800fb56:	bf00      	nop
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb60:	b004      	add	sp, #16
 800fb62:	4770      	bx	lr
 800fb64:	2000f284 	.word	0x2000f284
 800fb68:	c2c80000 	.word	0xc2c80000

0800fb6c <get_wallData_sensor>:





void get_wallData_sensor(_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]

	*front_wall = (g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800fb78:	4b12      	ldr	r3, [pc, #72]	; (800fbc4 <get_wallData_sensor+0x58>)
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	2b86      	cmp	r3, #134	; 0x86
 800fb7e:	bfcc      	ite	gt
 800fb80:	2301      	movgt	r3, #1
 800fb82:	2300      	movle	r3, #0
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	701a      	strb	r2, [r3, #0]
	*right_wall = (g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800fb8a:	4b0e      	ldr	r3, [pc, #56]	; (800fbc4 <get_wallData_sensor+0x58>)
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fb92:	4293      	cmp	r3, r2
 800fb94:	bfcc      	ite	gt
 800fb96:	2301      	movgt	r3, #1
 800fb98:	2300      	movle	r3, #0
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	701a      	strb	r2, [r3, #0]
	*left_wall  = (g_sensor_mean[SENSOR_LEFT]  >= L_PRESENCE);
 800fba0:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <get_wallData_sensor+0x58>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	bfcc      	ite	gt
 800fbac:	2301      	movgt	r3, #1
 800fbae:	2300      	movle	r3, #0
 800fbb0:	b2da      	uxtb	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	701a      	strb	r2, [r3, #0]

}
 800fbb6:	bf00      	nop
 800fbb8:	3714      	adds	r7, #20
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop
 800fbc4:	20000474 	.word	0x20000474

0800fbc8 <update_coordinate>:


void update_coordinate(int *x,int *y,int direction){
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	3b01      	subs	r3, #1
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	d823      	bhi.n	800fc24 <update_coordinate+0x5c>
 800fbdc:	a201      	add	r2, pc, #4	; (adr r2, 800fbe4 <update_coordinate+0x1c>)
 800fbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe2:	bf00      	nop
 800fbe4:	0800fbf5 	.word	0x0800fbf5
 800fbe8:	0800fc01 	.word	0x0800fc01
 800fbec:	0800fc0d 	.word	0x0800fc0d
 800fbf0:	0800fc19 	.word	0x0800fc19
	case 1://北
		*y += 1;
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	1c5a      	adds	r2, r3, #1
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	601a      	str	r2, [r3, #0]
		break;
 800fbfe:	e011      	b.n	800fc24 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	601a      	str	r2, [r3, #0]
		break;
 800fc0a:	e00b      	b.n	800fc24 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	1e5a      	subs	r2, r3, #1
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	601a      	str	r2, [r3, #0]
		break;
 800fc16:	e005      	b.n	800fc24 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	1e5a      	subs	r2, r3, #1
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	601a      	str	r2, [r3, #0]
		break;
 800fc22:	bf00      	nop
	}



}
 800fc24:	bf00      	nop
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <run_movement_continuity>:

void run_movement_continuity(int *direction,unsigned short front_count,unsigned short right_count,
		unsigned short back_count,unsigned short left_count,float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08e      	sub	sp, #56	; 0x38
 800fc34:	af04      	add	r7, sp, #16
 800fc36:	61f8      	str	r0, [r7, #28]
 800fc38:	4608      	mov	r0, r1
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	ed87 0a04 	vstr	s0, [r7, #16]
 800fc42:	edc7 0a03 	vstr	s1, [r7, #12]
 800fc46:	ed87 1a02 	vstr	s2, [r7, #8]
 800fc4a:	edc7 1a01 	vstr	s3, [r7, #4]
 800fc4e:	4603      	mov	r3, r0
 800fc50:	837b      	strh	r3, [r7, #26]
 800fc52:	460b      	mov	r3, r1
 800fc54:	833b      	strh	r3, [r7, #24]
 800fc56:	4613      	mov	r3, r2
 800fc58:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800fc5a:	8b7a      	ldrh	r2, [r7, #26]
 800fc5c:	8b3b      	ldrh	r3, [r7, #24]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d81d      	bhi.n	800fc9e <run_movement_continuity+0x6e>
 800fc62:	8b7a      	ldrh	r2, [r7, #26]
 800fc64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d819      	bhi.n	800fc9e <run_movement_continuity+0x6e>
 800fc6a:	8b7a      	ldrh	r2, [r7, #26]
 800fc6c:	8afb      	ldrh	r3, [r7, #22]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d815      	bhi.n	800fc9e <run_movement_continuity+0x6e>
		// 直進
		mode.WallControlMode=1;
 800fc72:	2301      	movs	r3, #1
 800fc74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800fc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc86:	ed97 2a02 	vldr	s4, [r7, #8]
 800fc8a:	edd7 1a04 	vldr	s3, [r7, #16]
 800fc8e:	ed97 1a04 	vldr	s2, [r7, #16]
 800fc92:	edd7 0a04 	vldr	s1, [r7, #16]
 800fc96:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800fe14 <run_movement_continuity+0x1e4>
 800fc9a:	f7f4 fbbd 	bl	8004418 <straight_table2>
	}
	if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800fc9e:	8b3a      	ldrh	r2, [r7, #24]
 800fca0:	8b7b      	ldrh	r3, [r7, #26]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d21b      	bcs.n	800fcde <run_movement_continuity+0xae>
 800fca6:	8b3a      	ldrh	r2, [r7, #24]
 800fca8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d817      	bhi.n	800fcde <run_movement_continuity+0xae>
 800fcae:	8b3a      	ldrh	r2, [r7, #24]
 800fcb0:	8afb      	ldrh	r3, [r7, #22]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d813      	bhi.n	800fcde <run_movement_continuity+0xae>
		// 右旋回
		slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	9303      	str	r3, [sp, #12]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	9302      	str	r3, [sp, #8]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fcca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fccc:	ed97 0a04 	vldr	s0, [r7, #16]
 800fcd0:	f7fb ff82 	bl	800bbd8 <slalomR>
		*direction += 1;
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	1c5a      	adds	r2, r3, #1
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	601a      	str	r2, [r3, #0]
	}
	if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800fcde:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fce0:	8b7b      	ldrh	r3, [r7, #26]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d21b      	bcs.n	800fd1e <run_movement_continuity+0xee>
 800fce6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fce8:	8b3b      	ldrh	r3, [r7, #24]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d217      	bcs.n	800fd1e <run_movement_continuity+0xee>
 800fcee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fcf0:	8afb      	ldrh	r3, [r7, #22]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d813      	bhi.n	800fd1e <run_movement_continuity+0xee>
		// 左旋回
		slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9303      	str	r3, [sp, #12]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9302      	str	r3, [sp, #8]
 800fcfe:	2300      	movs	r3, #0
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd0c:	ed97 0a04 	vldr	s0, [r7, #16]
 800fd10:	f7fc f948 	bl	800bfa4 <slalomL>
		*direction -= 1;
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	1e5a      	subs	r2, r3, #1
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800fd1e:	8afa      	ldrh	r2, [r7, #22]
 800fd20:	8b7b      	ldrh	r3, [r7, #26]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d272      	bcs.n	800fe0c <run_movement_continuity+0x1dc>
 800fd26:	8afa      	ldrh	r2, [r7, #22]
 800fd28:	8b3b      	ldrh	r3, [r7, #24]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d26e      	bcs.n	800fe0c <run_movement_continuity+0x1dc>
			&& back_count < left_count){
 800fd2e:	8afa      	ldrh	r2, [r7, #22]
 800fd30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d26a      	bcs.n	800fe0c <run_movement_continuity+0x1dc>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		mode.WallControlMode=1;
 800fd36:	2301      	movs	r3, #1
 800fd38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800fd48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd4a:	ed97 2a02 	vldr	s4, [r7, #8]
 800fd4e:	edd7 1a04 	vldr	s3, [r7, #16]
 800fd52:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800fe18 <run_movement_continuity+0x1e8>
 800fd56:	edd7 0a04 	vldr	s1, [r7, #16]
 800fd5a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800fe1c <run_movement_continuity+0x1ec>
 800fd5e:	f7f4 fb5b 	bl	8004418 <straight_table2>
		create_DijkstraMap();
 800fd62:	f003 fa67 	bl	8013234 <create_DijkstraMap>
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800fd66:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800fd6a:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800fd6e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800fd72:	4618      	mov	r0, r3
 800fd74:	edd7 0a01 	vldr	s1, [r7, #4]
 800fd78:	ed97 0a03 	vldr	s0, [r7, #12]
 800fd7c:	f7fb fe5a 	bl	800ba34 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800fd80:	2064      	movs	r0, #100	; 0x64
 800fd82:	f7f9 fb31 	bl	80093e8 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800fd8c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d024      	beq.n	800fdde <run_movement_continuity+0x1ae>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800fd94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd96:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800fe20 <run_movement_continuity+0x1f0>
 800fd9a:	eddf 1a22 	vldr	s3, [pc, #136]	; 800fe24 <run_movement_continuity+0x1f4>
 800fd9e:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800fe18 <run_movement_continuity+0x1e8>
 800fda2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800fe18 <run_movement_continuity+0x1e8>
 800fda6:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800fdaa:	f7f4 fb35 	bl	8004418 <straight_table2>
		wait_ms_NoReset(100);
 800fdae:	2064      	movs	r0, #100	; 0x64
 800fdb0:	f7f9 fb1a 	bl	80093e8 <wait_ms_NoReset>
		clear_Ierror();
 800fdb4:	f7f5 fe54 	bl	8005a60 <clear_Ierror>
		reset_speed();
 800fdb8:	f7f1 f934 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800fdc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdc4:	ed97 2a02 	vldr	s4, [r7, #8]
 800fdc8:	edd7 1a04 	vldr	s3, [r7, #16]
 800fdcc:	ed97 1a04 	vldr	s2, [r7, #16]
 800fdd0:	eddf 0a11 	vldr	s1, [pc, #68]	; 800fe18 <run_movement_continuity+0x1e8>
 800fdd4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800fe28 <run_movement_continuity+0x1f8>
 800fdd8:	f7f4 fb1e 	bl	8004418 <straight_table2>
 800fddc:	e011      	b.n	800fe02 <run_movement_continuity+0x1d2>
		}else{
			clear_Ierror();
 800fdde:	f7f5 fe3f 	bl	8005a60 <clear_Ierror>
			mode.WallControlMode=0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800fde8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdea:	ed97 2a02 	vldr	s4, [r7, #8]
 800fdee:	edd7 1a04 	vldr	s3, [r7, #16]
 800fdf2:	ed97 1a04 	vldr	s2, [r7, #16]
 800fdf6:	eddf 0a08 	vldr	s1, [pc, #32]	; 800fe18 <run_movement_continuity+0x1e8>
 800fdfa:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fe2c <run_movement_continuity+0x1fc>
 800fdfe:	f7f4 fb0b 	bl	8004418 <straight_table2>
		}
		*direction = *direction + 2;
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	1c9a      	adds	r2, r3, #2
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	601a      	str	r2, [r3, #0]
	}

}
 800fe0c:	bf00      	nop
 800fe0e:	3728      	adds	r7, #40	; 0x28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	42a40000 	.word	0x42a40000
 800fe18:	00000000 	.word	0x00000000
 800fe1c:	42140000 	.word	0x42140000
 800fe20:	447a0000 	.word	0x447a0000
 800fe24:	c3160000 	.word	0xc3160000
 800fe28:	42830000 	.word	0x42830000
 800fe2c:	42540000 	.word	0x42540000

0800fe30 <run_movement_suspension>:
void run_movement_suspension(int *direction, unsigned short front_count,
		unsigned short right_count, unsigned short back_count,
		unsigned short left_count, float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,
		_Bool front_wall, _Bool right_wall, _Bool left_wall,int x,int y,uint8_t MazeRecord_mode,uint8_t Dijkstra_mode) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08e      	sub	sp, #56	; 0x38
 800fe34:	af04      	add	r7, sp, #16
 800fe36:	61f8      	str	r0, [r7, #28]
 800fe38:	4608      	mov	r0, r1
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	ed87 0a04 	vstr	s0, [r7, #16]
 800fe42:	edc7 0a03 	vstr	s1, [r7, #12]
 800fe46:	ed87 1a02 	vstr	s2, [r7, #8]
 800fe4a:	edc7 1a01 	vstr	s3, [r7, #4]
 800fe4e:	4603      	mov	r3, r0
 800fe50:	837b      	strh	r3, [r7, #26]
 800fe52:	460b      	mov	r3, r1
 800fe54:	833b      	strh	r3, [r7, #24]
 800fe56:	4613      	mov	r3, r2
 800fe58:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	mode.WallControlMode = 1;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.calMazeMode = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mode.WallCutMode = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	straight_table2(MAZE_SECTION / 2 - MAZE_OFFSET - (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), input_StraightVelocity, 0, input_StraightVelocity, input_StraightAcceleration, mode);
 800fe6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe6e:	ed97 2a02 	vldr	s4, [r7, #8]
 800fe72:	edd7 1a04 	vldr	s3, [r7, #16]
 800fe76:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 80100fc <run_movement_suspension+0x2cc>
 800fe7a:	edd7 0a04 	vldr	s1, [r7, #16]
 800fe7e:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800fe82:	f7f4 fac9 	bl	8004418 <straight_table2>

	if(MazeRecord_mode==1){
 800fe86:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d10a      	bne.n	800fea4 <run_movement_suspension+0x74>
		if(error_mode==0){
 800fe8e:	4b9c      	ldr	r3, [pc, #624]	; (8010100 <run_movement_suspension+0x2d0>)
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <run_movement_suspension+0x6a>
		record_in();
 800fe96:	f7f8 fc99 	bl	80087cc <record_in>
		}
		//clear_Ierror();
		//reset_gyro();
		reset_speed();
 800fe9a:	f7f1 f8c3 	bl	8001024 <reset_speed>
		maze_mode = 1;
 800fe9e:	4b99      	ldr	r3, [pc, #612]	; (8010104 <run_movement_suspension+0x2d4>)
 800fea0:	2201      	movs	r2, #1
 800fea2:	701a      	strb	r2, [r3, #0]
	}

	if(Dijkstra_mode==1){
 800fea4:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d144      	bne.n	800ff36 <run_movement_suspension+0x106>
		create_DijkstraMap();
 800feac:	f003 f9c2 	bl	8013234 <create_DijkstraMap>
		route_Dijkstra(); //ダイクストラ法の結果から最短ルートをスタックに入れる
 800feb0:	f004 fef8 	bl	8014ca4 <route_Dijkstra>
		create_StepCountMap_unknown();
 800feb4:	f005 fbac 	bl	8015610 <create_StepCountMap_unknown>
		search_AroundWalkCount(&front_count, &right_count, &back_count, &left_count, x, y, *direction);
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f107 0216 	add.w	r2, r7, #22
 800fec0:	f107 0118 	add.w	r1, r7, #24
 800fec4:	f107 001a 	add.w	r0, r7, #26
 800fec8:	9302      	str	r3, [sp, #8]
 800feca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800feda:	f003 f883 	bl	8012fe4 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800fede:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d001      	beq.n	800feea <run_movement_suspension+0xba>
 800fee6:	23ff      	movs	r3, #255	; 0xff
 800fee8:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800feea:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <run_movement_suspension+0xc6>
 800fef2:	23ff      	movs	r3, #255	; 0xff
 800fef4:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800fef6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d001      	beq.n	800ff02 <run_movement_suspension+0xd2>
 800fefe:	23ff      	movs	r3, #255	; 0xff
 800ff00:	863b      	strh	r3, [r7, #48]	; 0x30
		if (front_count == MAX_WALKCOUNT && right_count == MAX_WALKCOUNT && left_count == MAX_WALKCOUNT && back_count == MAX_WALKCOUNT) {
 800ff02:	8b7b      	ldrh	r3, [r7, #26]
 800ff04:	2bff      	cmp	r3, #255	; 0xff
 800ff06:	d116      	bne.n	800ff36 <run_movement_suspension+0x106>
 800ff08:	8b3b      	ldrh	r3, [r7, #24]
 800ff0a:	2bff      	cmp	r3, #255	; 0xff
 800ff0c:	d113      	bne.n	800ff36 <run_movement_suspension+0x106>
 800ff0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff10:	2bff      	cmp	r3, #255	; 0xff
 800ff12:	d110      	bne.n	800ff36 <run_movement_suspension+0x106>
 800ff14:	8afb      	ldrh	r3, [r7, #22]
 800ff16:	2bff      	cmp	r3, #255	; 0xff
 800ff18:	d10d      	bne.n	800ff36 <run_movement_suspension+0x106>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode = 1;
 800ff1a:	4b79      	ldr	r3, [pc, #484]	; (8010100 <run_movement_suspension+0x2d0>)
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode = 0;
 800ff20:	4b79      	ldr	r3, [pc, #484]	; (8010108 <run_movement_suspension+0x2d8>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2 * 2 * 2 * 2 * 2);
 800ff26:	2020      	movs	r0, #32
 800ff28:	f7f8 f9ee 	bl	8008308 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800ff2c:	f7f8 ff92 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800ff30:	2000      	movs	r0, #0
 800ff32:	f7f8 ff29 	bl	8008d88 <pl_DriveMotor_standby>
			//break;
		}
	}

if(error_mode==0){
 800ff36:	4b72      	ldr	r3, [pc, #456]	; (8010100 <run_movement_suspension+0x2d0>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f040 80d9 	bne.w	80100f2 <run_movement_suspension+0x2c2>
	mode.WallControlMode = 0;
 800ff40:	2300      	movs	r3, #0
 800ff42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.WallCutMode = 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	mode.calMazeMode = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count) {
 800ff52:	8b7a      	ldrh	r2, [r7, #26]
 800ff54:	8b3b      	ldrh	r3, [r7, #24]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d814      	bhi.n	800ff84 <run_movement_suspension+0x154>
 800ff5a:	8b7a      	ldrh	r2, [r7, #26]
 800ff5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d810      	bhi.n	800ff84 <run_movement_suspension+0x154>
 800ff62:	8b7a      	ldrh	r2, [r7, #26]
 800ff64:	8afb      	ldrh	r3, [r7, #22]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d80c      	bhi.n	800ff84 <run_movement_suspension+0x154>
		// 直進
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ff6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff6c:	ed97 2a02 	vldr	s4, [r7, #8]
 800ff70:	edd7 1a04 	vldr	s3, [r7, #16]
 800ff74:	ed97 1a04 	vldr	s2, [r7, #16]
 800ff78:	eddf 0a60 	vldr	s1, [pc, #384]	; 80100fc <run_movement_suspension+0x2cc>
 800ff7c:	ed9f 0a63 	vldr	s0, [pc, #396]	; 801010c <run_movement_suspension+0x2dc>
 800ff80:	f7f4 fa4a 	bl	8004418 <straight_table2>
	}
	if (right_count < front_count && right_count <= left_count && right_count <= back_count) {
 800ff84:	8b3a      	ldrh	r2, [r7, #24]
 800ff86:	8b7b      	ldrh	r3, [r7, #26]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d229      	bcs.n	800ffe0 <run_movement_suspension+0x1b0>
 800ff8c:	8b3a      	ldrh	r2, [r7, #24]
 800ff8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d825      	bhi.n	800ffe0 <run_movement_suspension+0x1b0>
 800ff94:	8b3a      	ldrh	r2, [r7, #24]
 800ff96:	8afb      	ldrh	r3, [r7, #22]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d821      	bhi.n	800ffe0 <run_movement_suspension+0x1b0>
		// 右旋回
		turning_table2(-90, 0, 0, -input_TurningVelocity, input_TurningAcceleration);
 800ff9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ffa0:	eef1 7a67 	vneg.f32	s15, s15
 800ffa4:	ed97 2a01 	vldr	s4, [r7, #4]
 800ffa8:	eef0 1a67 	vmov.f32	s3, s15
 800ffac:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80100fc <run_movement_suspension+0x2cc>
 800ffb0:	eddf 0a52 	vldr	s1, [pc, #328]	; 80100fc <run_movement_suspension+0x2cc>
 800ffb4:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8010110 <run_movement_suspension+0x2e0>
 800ffb8:	f7f4 ff58 	bl	8004e6c <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ffbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffbe:	ed97 2a02 	vldr	s4, [r7, #8]
 800ffc2:	edd7 1a04 	vldr	s3, [r7, #16]
 800ffc6:	ed97 1a04 	vldr	s2, [r7, #16]
 800ffca:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80100fc <run_movement_suspension+0x2cc>
 800ffce:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 801010c <run_movement_suspension+0x2dc>
 800ffd2:	f7f4 fa21 	bl	8004418 <straight_table2>
		*direction += 1;
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	1c5a      	adds	r2, r3, #1
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	601a      	str	r2, [r3, #0]
	}
	if (left_count < front_count && left_count < right_count && left_count <= back_count) {
 800ffe0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ffe2:	8b7b      	ldrh	r3, [r7, #26]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d225      	bcs.n	8010034 <run_movement_suspension+0x204>
 800ffe8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ffea:	8b3b      	ldrh	r3, [r7, #24]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d221      	bcs.n	8010034 <run_movement_suspension+0x204>
 800fff0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800fff2:	8afb      	ldrh	r3, [r7, #22]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d81d      	bhi.n	8010034 <run_movement_suspension+0x204>
		// 左旋回
		turning_table2(90, 0, 0, input_TurningVelocity, input_TurningAcceleration);
 800fff8:	ed97 2a01 	vldr	s4, [r7, #4]
 800fffc:	edd7 1a03 	vldr	s3, [r7, #12]
 8010000:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 80100fc <run_movement_suspension+0x2cc>
 8010004:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80100fc <run_movement_suspension+0x2cc>
 8010008:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8010114 <run_movement_suspension+0x2e4>
 801000c:	f7f4 ff2e 	bl	8004e6c <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 8010010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010012:	ed97 2a02 	vldr	s4, [r7, #8]
 8010016:	edd7 1a04 	vldr	s3, [r7, #16]
 801001a:	ed97 1a04 	vldr	s2, [r7, #16]
 801001e:	eddf 0a37 	vldr	s1, [pc, #220]	; 80100fc <run_movement_suspension+0x2cc>
 8010022:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801010c <run_movement_suspension+0x2dc>
 8010026:	f7f4 f9f7 	bl	8004418 <straight_table2>
		*direction -= 1;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	1e5a      	subs	r2, r3, #1
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 8010034:	8afa      	ldrh	r2, [r7, #22]
 8010036:	8b7b      	ldrh	r3, [r7, #26]
 8010038:	429a      	cmp	r2, r3
 801003a:	d25a      	bcs.n	80100f2 <run_movement_suspension+0x2c2>
 801003c:	8afa      	ldrh	r2, [r7, #22]
 801003e:	8b3b      	ldrh	r3, [r7, #24]
 8010040:	429a      	cmp	r2, r3
 8010042:	d256      	bcs.n	80100f2 <run_movement_suspension+0x2c2>
			&& back_count < left_count){
 8010044:	8afa      	ldrh	r2, [r7, #22]
 8010046:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010048:	429a      	cmp	r2, r3
 801004a:	d252      	bcs.n	80100f2 <run_movement_suspension+0x2c2>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 801004c:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 8010050:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 8010054:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8010058:	4618      	mov	r0, r3
 801005a:	edd7 0a01 	vldr	s1, [r7, #4]
 801005e:	ed97 0a03 	vldr	s0, [r7, #12]
 8010062:	f7fb fce7 	bl	800ba34 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 8010066:	2064      	movs	r0, #100	; 0x64
 8010068:	f7f9 f9be 	bl	80093e8 <wait_ms_NoReset>
		mode.WallControlMode=0;
 801006c:	2300      	movs	r3, #0
 801006e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 8010072:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8010076:	2b00      	cmp	r3, #0
 8010078:	d024      	beq.n	80100c4 <run_movement_suspension+0x294>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 801007a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801007c:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8010118 <run_movement_suspension+0x2e8>
 8010080:	eddf 1a26 	vldr	s3, [pc, #152]	; 801011c <run_movement_suspension+0x2ec>
 8010084:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80100fc <run_movement_suspension+0x2cc>
 8010088:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80100fc <run_movement_suspension+0x2cc>
 801008c:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8010090:	f7f4 f9c2 	bl	8004418 <straight_table2>
		wait_ms_NoReset(100);
 8010094:	2064      	movs	r0, #100	; 0x64
 8010096:	f7f9 f9a7 	bl	80093e8 <wait_ms_NoReset>
		clear_Ierror();
 801009a:	f7f5 fce1 	bl	8005a60 <clear_Ierror>
		reset_speed();
 801009e:	f7f0 ffc1 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 80100a2:	2301      	movs	r3, #1
 80100a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80100a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100aa:	ed97 2a02 	vldr	s4, [r7, #8]
 80100ae:	edd7 1a04 	vldr	s3, [r7, #16]
 80100b2:	ed97 1a04 	vldr	s2, [r7, #16]
 80100b6:	eddf 0a11 	vldr	s1, [pc, #68]	; 80100fc <run_movement_suspension+0x2cc>
 80100ba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010120 <run_movement_suspension+0x2f0>
 80100be:	f7f4 f9ab 	bl	8004418 <straight_table2>
 80100c2:	e011      	b.n	80100e8 <run_movement_suspension+0x2b8>
		}else{
			clear_Ierror();
 80100c4:	f7f5 fccc 	bl	8005a60 <clear_Ierror>
			mode.WallControlMode=0;
 80100c8:	2300      	movs	r3, #0
 80100ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80100ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100d0:	ed97 2a02 	vldr	s4, [r7, #8]
 80100d4:	edd7 1a04 	vldr	s3, [r7, #16]
 80100d8:	ed97 1a04 	vldr	s2, [r7, #16]
 80100dc:	eddf 0a07 	vldr	s1, [pc, #28]	; 80100fc <run_movement_suspension+0x2cc>
 80100e0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801010c <run_movement_suspension+0x2dc>
 80100e4:	f7f4 f998 	bl	8004418 <straight_table2>
		}
		*direction = *direction + 2;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	1c9a      	adds	r2, r3, #2
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	601a      	str	r2, [r3, #0]
	}
}

}
 80100f2:	bf00      	nop
 80100f4:	3728      	adds	r7, #40	; 0x28
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	00000000 	.word	0x00000000
 8010100:	20000813 	.word	0x20000813
 8010104:	20000836 	.word	0x20000836
 8010108:	2000059c 	.word	0x2000059c
 801010c:	42540000 	.word	0x42540000
 8010110:	c2b40000 	.word	0xc2b40000
 8010114:	42b40000 	.word	0x42b40000
 8010118:	447a0000 	.word	0x447a0000
 801011c:	c3160000 	.word	0xc3160000
 8010120:	42830000 	.word	0x42830000

08010124 <AdatiWayReturn>:



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 8010124:	b084      	sub	sp, #16
 8010126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801012a:	b0ea      	sub	sp, #424	; 0x1a8
 801012c:	af5a      	add	r7, sp, #360	; 0x168
 801012e:	ed87 0a05 	vstr	s0, [r7, #20]
 8010132:	edc7 0a04 	vstr	s1, [r7, #16]
 8010136:	ed87 1a03 	vstr	s2, [r7, #12]
 801013a:	edc7 1a02 	vstr	s3, [r7, #8]
 801013e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8010142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	//初期化
	maze_mode = 1; //迷路探索開始フラグ
 8010146:	4bb7      	ldr	r3, [pc, #732]	; (8010424 <AdatiWayReturn+0x300>)
 8010148:	2201      	movs	r2, #1
 801014a:	701a      	strb	r2, [r3, #0]
	unsigned short front_count, right_count, back_count, left_count;
	int x=0;//構造体にしたい
 801014c:	2300      	movs	r3, #0
 801014e:	633b      	str	r3, [r7, #48]	; 0x30
	int y=0;
 8010150:	2300      	movs	r3, #0
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
	int direction=1;
 8010154:	2301      	movs	r3, #1
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
	_Bool front_wall,right_wall,left_wall;
	char timer_end_mode=0;
 8010158:	2300      	movs	r3, #0
 801015a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int kitiku_distance;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 801015e:	2301      	movs	r3, #1
 8010160:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 8010162:	2300      	movs	r3, #0
 8010164:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 8010166:	2300      	movs	r3, #0
 8010168:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 801016a:	2300      	movs	r3, #0
 801016c:	77bb      	strb	r3, [r7, #30]

	//モータenable
	pl_DriveMotor_standby(ON);
 801016e:	2001      	movs	r0, #1
 8010170:	f7f8 fe0a 	bl	8008d88 <pl_DriveMotor_standby>
	wait_ms_NoReset(500);
 8010174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010178:	f7f9 f936 	bl	80093e8 <wait_ms_NoReset>
	//初期位置のセンサー確認
	get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 801017c:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8010180:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8010184:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff fcef 	bl	800fb6c <get_wallData_sensor>
	//初期位置での壁更新
	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 801018e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010192:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8010194:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8010198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801019c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80101a0:	9201      	str	r2, [sp, #4]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	462b      	mov	r3, r5
 80101a6:	4622      	mov	r2, r4
 80101a8:	f002 fa4a 	bl	8012640 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 80101ac:	f005 fd62 	bl	8015c74 <create_StepCountMap_queue>
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80101b0:	69f8      	ldr	r0, [r7, #28]
 80101b2:	ed97 2a03 	vldr	s4, [r7, #12]
 80101b6:	edd7 1a05 	vldr	s3, [r7, #20]
 80101ba:	ed97 1a05 	vldr	s2, [r7, #20]
 80101be:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8010428 <AdatiWayReturn+0x304>
 80101c2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 801042c <AdatiWayReturn+0x308>
 80101c6:	f7f4 f927 	bl	8004418 <straight_table2>

	while (1) {

		update_coordinate(&x,&y,direction);
 80101ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101cc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80101d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff fcf7 	bl	800fbc8 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 80101da:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80101de:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80101e2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff fcc0 	bl	800fb6c <get_wallData_sensor>

		mode.WallControlMode=1;
 80101ec:	2301      	movs	r3, #1
 80101ee:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 80101f0:	2301      	movs	r3, #1
 80101f2:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 80101f4:	2300      	movs	r3, #0
 80101f6:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80101f8:	69f8      	ldr	r0, [r7, #28]
 80101fa:	ed97 2a03 	vldr	s4, [r7, #12]
 80101fe:	edd7 1a05 	vldr	s3, [r7, #20]
 8010202:	ed97 1a05 	vldr	s2, [r7, #20]
 8010206:	edd7 0a05 	vldr	s1, [r7, #20]
 801020a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801020e:	f7f4 f903 	bl	8004418 <straight_table2>
		//走行中計算
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 8010212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010216:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8010218:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 801021c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010220:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8010224:	9201      	str	r2, [sp, #4]
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	462b      	mov	r3, r5
 801022a:	4622      	mov	r2, r4
 801022c:	f002 fa08 	bl	8012640 <update_wall>
		create_StepCountMap_queue();
 8010230:	f005 fd20 	bl	8015c74 <create_StepCountMap_queue>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8010234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801023a:	f107 0636 	add.w	r6, r7, #54	; 0x36
 801023e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8010242:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 8010246:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801024a:	9102      	str	r1, [sp, #8]
 801024c:	9201      	str	r2, [sp, #4]
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	4633      	mov	r3, r6
 8010252:	462a      	mov	r2, r5
 8010254:	4621      	mov	r1, r4
 8010256:	f002 fec5 	bl	8012fe4 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 801025a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <AdatiWayReturn+0x142>
 8010262:	23ff      	movs	r3, #255	; 0xff
 8010264:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <AdatiWayReturn+0x14e>
 801026e:	23ff      	movs	r3, #255	; 0xff
 8010270:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010272:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <AdatiWayReturn+0x15a>
 801027a:	23ff      	movs	r3, #255	; 0xff
 801027c:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 801027e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010280:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010282:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8010284:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 8010286:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010288:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801028a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 801028c:	9102      	str	r1, [sp, #8]
 801028e:	9201      	str	r2, [sp, #4]
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	4633      	mov	r3, r6
 8010294:	462a      	mov	r2, r5
 8010296:	4621      	mov	r1, r4
 8010298:	f001 fe7e 	bl	8011f98 <decision_kitiku>

		mode.WallCutMode=1;
 801029c:	2301      	movs	r3, #1
 801029e:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 80102a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102a4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80102a8:	4619      	mov	r1, r3
 80102aa:	69f8      	ldr	r0, [r7, #28]
 80102ac:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80102b0:	f7f4 fd70 	bl	8004d94 <End_straight>


		//異常終了
		if (x == 0 && y == 0) {
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10b      	bne.n	80102d2 <AdatiWayReturn+0x1ae>
 80102ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d108      	bne.n	80102d2 <AdatiWayReturn+0x1ae>
			error_mode=1;
 80102c0:	4b5b      	ldr	r3, [pc, #364]	; (8010430 <AdatiWayReturn+0x30c>)
 80102c2:	2201      	movs	r2, #1
 80102c4:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 80102c6:	f7f8 fdc5 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 80102ca:	2000      	movs	r0, #0
 80102cc:	f7f8 fd5c 	bl	8008d88 <pl_DriveMotor_standby>
			break;
 80102d0:	e10b      	b.n	80104ea <AdatiWayReturn+0x3c6>
		}
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80102d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102d4:	2bff      	cmp	r3, #255	; 0xff
 80102d6:	d111      	bne.n	80102fc <AdatiWayReturn+0x1d8>
 80102d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102da:	2bff      	cmp	r3, #255	; 0xff
 80102dc:	d10e      	bne.n	80102fc <AdatiWayReturn+0x1d8>
 80102de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80102e0:	2bff      	cmp	r3, #255	; 0xff
 80102e2:	d10b      	bne.n	80102fc <AdatiWayReturn+0x1d8>
 80102e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80102e6:	2bff      	cmp	r3, #255	; 0xff
 80102e8:	d108      	bne.n	80102fc <AdatiWayReturn+0x1d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80102ea:	4b51      	ldr	r3, [pc, #324]	; (8010430 <AdatiWayReturn+0x30c>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 80102f0:	f7f8 fdb0 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 80102f4:	2000      	movs	r0, #0
 80102f6:	f7f8 fd47 	bl	8008d88 <pl_DriveMotor_standby>
			break;
 80102fa:	e0f6      	b.n	80104ea <AdatiWayReturn+0x3c6>
		}
		//　時間制限
		if (g_timCount_sec>240){
 80102fc:	4b4d      	ldr	r3, [pc, #308]	; (8010434 <AdatiWayReturn+0x310>)
 80102fe:	edd3 7a00 	vldr	s15, [r3]
 8010302:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010438 <AdatiWayReturn+0x314>
 8010306:	eef4 7ac7 	vcmpe.f32	s15, s14
 801030a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030e:	dd08      	ble.n	8010322 <AdatiWayReturn+0x1fe>
			timer_end_mode=1;
 8010310:	2301      	movs	r3, #1
 8010312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 8010316:	f7f8 fd9d 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 801031a:	2000      	movs	r0, #0
 801031c:	f7f8 fd34 	bl	8008d88 <pl_DriveMotor_standby>
			break;
 8010320:	e0e3      	b.n	80104ea <AdatiWayReturn+0x3c6>
		}
		//正常終了
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	2b02      	cmp	r3, #2
 8010326:	d002      	beq.n	801032e <AdatiWayReturn+0x20a>
 8010328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032a:	2b03      	cmp	r3, #3
 801032c:	d146      	bne.n	80103bc <AdatiWayReturn+0x298>
 801032e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <AdatiWayReturn+0x216>
 8010334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010336:	2b01      	cmp	r3, #1
 8010338:	d140      	bne.n	80103bc <AdatiWayReturn+0x298>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 801033a:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 801033e:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 8010342:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 8010346:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8010348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034c:	607b      	str	r3, [r7, #4]
 801034e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010352:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8010356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010358:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801035a:	f107 0628 	add.w	r6, r7, #40	; 0x28
 801035e:	2301      	movs	r3, #1
 8010360:	9359      	str	r3, [sp, #356]	; 0x164
 8010362:	2301      	movs	r3, #1
 8010364:	9358      	str	r3, [sp, #352]	; 0x160
 8010366:	9557      	str	r5, [sp, #348]	; 0x15c
 8010368:	9056      	str	r0, [sp, #344]	; 0x158
 801036a:	9155      	str	r1, [sp, #340]	; 0x154
 801036c:	9254      	str	r2, [sp, #336]	; 0x150
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	9353      	str	r3, [sp, #332]	; 0x14c
 8010372:	ab01      	add	r3, sp, #4
 8010374:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010378:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801037c:	4618      	mov	r0, r3
 801037e:	f011 fe2b 	bl	8021fd8 <memcpy>
 8010382:	9400      	str	r4, [sp, #0]
 8010384:	edd7 1a02 	vldr	s3, [r7, #8]
 8010388:	ed97 1a03 	vldr	s2, [r7, #12]
 801038c:	edd7 0a04 	vldr	s1, [r7, #16]
 8010390:	ed97 0a05 	vldr	s0, [r7, #20]
 8010394:	4653      	mov	r3, sl
 8010396:	464a      	mov	r2, r9
 8010398:	4641      	mov	r1, r8
 801039a:	4630      	mov	r0, r6
 801039c:	f7ff fd48 	bl	800fe30 <run_movement_suspension>
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 1, 1);
			if (direction >= 5) {direction = direction-4;}
 80103a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a2:	2b04      	cmp	r3, #4
 80103a4:	dd02      	ble.n	80103ac <AdatiWayReturn+0x288>
 80103a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a8:	3b04      	subs	r3, #4
 80103aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (direction <= 0) {direction = direction+4;}
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f300 8098 	bgt.w	80104e4 <AdatiWayReturn+0x3c0>
 80103b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b6:	3304      	adds	r3, #4
 80103b8:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80103ba:	e093      	b.n	80104e4 <AdatiWayReturn+0x3c0>
		}

		if(know_mode==0){kitikukan = 0;}
 80103bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <AdatiWayReturn+0x2a6>
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <AdatiWayReturn+0x318>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]
		if (kitikukan == OFF) {
 80103ca:	4b1c      	ldr	r3, [pc, #112]	; (801043c <AdatiWayReturn+0x318>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d13a      	bne.n	8010448 <AdatiWayReturn+0x324>

			run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 80103d2:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 80103d4:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 80103d8:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 80103dc:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 80103de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80103e6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80103ea:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80103ee:	9155      	str	r1, [sp, #340]	; 0x154
 80103f0:	9254      	str	r2, [sp, #336]	; 0x150
 80103f2:	9353      	str	r3, [sp, #332]	; 0x14c
 80103f4:	ab01      	add	r3, sp, #4
 80103f6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80103fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80103fe:	4618      	mov	r0, r3
 8010400:	f011 fdea 	bl	8021fd8 <memcpy>
 8010404:	9400      	str	r4, [sp, #0]
 8010406:	edd7 1a02 	vldr	s3, [r7, #8]
 801040a:	ed97 1a03 	vldr	s2, [r7, #12]
 801040e:	edd7 0a04 	vldr	s1, [r7, #16]
 8010412:	ed97 0a05 	vldr	s0, [r7, #20]
 8010416:	464b      	mov	r3, r9
 8010418:	4642      	mov	r2, r8
 801041a:	4631      	mov	r1, r6
 801041c:	4628      	mov	r0, r5
 801041e:	f7ff fc07 	bl	800fc30 <run_movement_continuity>
 8010422:	e04e      	b.n	80104c2 <AdatiWayReturn+0x39e>
 8010424:	20000836 	.word	0x20000836
 8010428:	00000000 	.word	0x00000000
 801042c:	42830000 	.word	0x42830000
 8010430:	20000813 	.word	0x20000813
 8010434:	20000738 	.word	0x20000738
 8010438:	43700000 	.word	0x43700000
 801043c:	20000838 	.word	0x20000838
 8010440:	42140000 	.word	0x42140000
 8010444:	44610000 	.word	0x44610000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall);

		} else {
			mode.WallControlMode=1;
 8010448:	2301      	movs	r3, #1
 801044a:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=1;
 801044c:	2301      	movs	r3, #1
 801044e:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 8010450:	2300      	movs	r3, #0
 8010452:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 8010454:	69f8      	ldr	r0, [r7, #28]
 8010456:	ed97 2a03 	vldr	s4, [r7, #12]
 801045a:	edd7 1a05 	vldr	s3, [r7, #20]
 801045e:	ed97 1a05 	vldr	s2, [r7, #20]
 8010462:	edd7 0a05 	vldr	s1, [r7, #20]
 8010466:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 8010440 <AdatiWayReturn+0x31c>
 801046a:	f7f3 ffd5 	bl	8004418 <straight_table2>
			compress_kitiku(&x,&y,&direction,&kitiku_distance);
 801046e:	f107 0320 	add.w	r3, r7, #32
 8010472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010476:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801047a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801047e:	f001 fdfd 	bl	801207c <compress_kitiku>
			End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 8010482:	2201      	movs	r2, #1
 8010484:	2101      	movs	r1, #1
 8010486:	69f8      	ldr	r0, [r7, #28]
 8010488:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8010440 <AdatiWayReturn+0x31c>
 801048c:	f7f4 fc82 	bl	8004d94 <End_straight>
			mode.calMazeMode=0;
 8010490:	2300      	movs	r3, #0
 8010492:	77bb      	strb	r3, [r7, #30]
			straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 8010494:	6a3a      	ldr	r2, [r7, #32]
 8010496:	4613      	mov	r3, r2
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	4413      	add	r3, r2
 801049c:	011a      	lsls	r2, r3, #4
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	ee07 3a90 	vmov	s15, r3
 80104a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104a8:	69f8      	ldr	r0, [r7, #28]
 80104aa:	ed97 2a03 	vldr	s4, [r7, #12]
 80104ae:	ed5f 1a1b 	vldr	s3, [pc, #-108]	; 8010444 <AdatiWayReturn+0x320>
 80104b2:	ed97 1a05 	vldr	s2, [r7, #20]
 80104b6:	edd7 0a05 	vldr	s1, [r7, #20]
 80104ba:	eeb0 0a67 	vmov.f32	s0, s15
 80104be:	f7f3 ffab 	bl	8004418 <straight_table2>
		}

		if (direction >= 5) {direction = direction-4;}
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	2b04      	cmp	r3, #4
 80104c6:	dd02      	ble.n	80104ce <AdatiWayReturn+0x3aa>
 80104c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ca:	3b04      	subs	r3, #4
 80104cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dc02      	bgt.n	80104da <AdatiWayReturn+0x3b6>
 80104d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d6:	3304      	adds	r3, #4
 80104d8:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 80104da:	4ba1      	ldr	r3, [pc, #644]	; (8010760 <AdatiWayReturn+0x63c>)
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d002      	beq.n	80104e8 <AdatiWayReturn+0x3c4>
		update_coordinate(&x,&y,direction);
 80104e2:	e672      	b.n	80101ca <AdatiWayReturn+0xa6>
			break;
 80104e4:	bf00      	nop
 80104e6:	e000      	b.n	80104ea <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 80104e8:	bf00      	nop




	while (1) {
		update_coordinate(&x,&y,direction);
 80104ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80104f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fb67 	bl	800fbc8 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 80104fa:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80104fe:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8010502:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff fb30 	bl	800fb6c <get_wallData_sensor>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 801050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050e:	2b02      	cmp	r3, #2
 8010510:	d002      	beq.n	8010518 <AdatiWayReturn+0x3f4>
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	2b03      	cmp	r3, #3
 8010516:	d109      	bne.n	801052c <AdatiWayReturn+0x408>
 8010518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051a:	2b00      	cmp	r3, #0
 801051c:	d002      	beq.n	8010524 <AdatiWayReturn+0x400>
 801051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010520:	2b01      	cmp	r3, #1
 8010522:	d103      	bne.n	801052c <AdatiWayReturn+0x408>
			noGoalPillarMode=1;
 8010524:	4b8f      	ldr	r3, [pc, #572]	; (8010764 <AdatiWayReturn+0x640>)
 8010526:	2201      	movs	r2, #1
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	e002      	b.n	8010532 <AdatiWayReturn+0x40e>
		}else{
			noGoalPillarMode=0;
 801052c:	4b8d      	ldr	r3, [pc, #564]	; (8010764 <AdatiWayReturn+0x640>)
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
		}

		mode.WallControlMode=1;
 8010532:	2301      	movs	r3, #1
 8010534:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 8010536:	2301      	movs	r3, #1
 8010538:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 801053a:	2300      	movs	r3, #0
 801053c:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 801053e:	69f8      	ldr	r0, [r7, #28]
 8010540:	ed97 2a03 	vldr	s4, [r7, #12]
 8010544:	edd7 1a05 	vldr	s3, [r7, #20]
 8010548:	ed97 1a05 	vldr	s2, [r7, #20]
 801054c:	edd7 0a05 	vldr	s1, [r7, #20]
 8010550:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8010554:	f7f3 ff60 	bl	8004418 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 8010558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801055a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801055c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801055e:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8010562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010566:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801056a:	9201      	str	r2, [sp, #4]
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	462b      	mov	r3, r5
 8010570:	4622      	mov	r2, r4
 8010572:	f002 f865 	bl	8012640 <update_wall>
		if(Dijkstra_mode==1){
 8010576:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 801057a:	2b01      	cmp	r3, #1
 801057c:	d104      	bne.n	8010588 <AdatiWayReturn+0x464>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 801057e:	f004 fb91 	bl	8014ca4 <route_Dijkstra>
			create_StepCountMap_unknown();
 8010582:	f005 f845 	bl	8015610 <create_StepCountMap_unknown>
 8010586:	e001      	b.n	801058c <AdatiWayReturn+0x468>
		}else{
			create_StepCountMapBack_queue();
 8010588:	f005 fe5a 	bl	8016240 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 801058c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010592:	f107 0636 	add.w	r6, r7, #54	; 0x36
 8010596:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801059a:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 801059e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80105a2:	9102      	str	r1, [sp, #8]
 80105a4:	9201      	str	r2, [sp, #4]
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	4633      	mov	r3, r6
 80105aa:	462a      	mov	r2, r5
 80105ac:	4621      	mov	r1, r4
 80105ae:	f002 fd19 	bl	8012fe4 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 80105b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <AdatiWayReturn+0x49a>
 80105ba:	23ff      	movs	r3, #255	; 0xff
 80105bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 80105be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d001      	beq.n	80105ca <AdatiWayReturn+0x4a6>
 80105c6:	23ff      	movs	r3, #255	; 0xff
 80105c8:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80105ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <AdatiWayReturn+0x4b2>
 80105d2:	23ff      	movs	r3, #255	; 0xff
 80105d4:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 80105d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105d8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80105da:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80105dc:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 80105de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80105e2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80105e4:	9102      	str	r1, [sp, #8]
 80105e6:	9201      	str	r2, [sp, #4]
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	4633      	mov	r3, r6
 80105ec:	462a      	mov	r2, r5
 80105ee:	4621      	mov	r1, r4
 80105f0:	f001 fcd2 	bl	8011f98 <decision_kitiku>
		mode.WallCutMode=1;
 80105f4:	2301      	movs	r3, #1
 80105f6:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 80105f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80105fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8010600:	4619      	mov	r1, r3
 8010602:	69f8      	ldr	r0, [r7, #28]
 8010604:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8010608:	f7f4 fbc4 	bl	8004d94 <End_straight>

		//異常終了
        if(back_count < front_count && back_count < right_count && back_count < left_count){
 801060c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801060e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010610:	429a      	cmp	r2, r3
 8010612:	d20a      	bcs.n	801062a <AdatiWayReturn+0x506>
 8010614:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010616:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010618:	429a      	cmp	r2, r3
 801061a:	d206      	bcs.n	801062a <AdatiWayReturn+0x506>
 801061c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801061e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010620:	429a      	cmp	r2, r3
 8010622:	d202      	bcs.n	801062a <AdatiWayReturn+0x506>
            Dijkstra_maker_flag=1;
 8010624:	4b50      	ldr	r3, [pc, #320]	; (8010768 <AdatiWayReturn+0x644>)
 8010626:	2201      	movs	r2, #1
 8010628:	701a      	strb	r2, [r3, #0]
        }
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 801062a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801062c:	2bff      	cmp	r3, #255	; 0xff
 801062e:	d10b      	bne.n	8010648 <AdatiWayReturn+0x524>
 8010630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010632:	2bff      	cmp	r3, #255	; 0xff
 8010634:	d108      	bne.n	8010648 <AdatiWayReturn+0x524>
 8010636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010638:	2bff      	cmp	r3, #255	; 0xff
 801063a:	d105      	bne.n	8010648 <AdatiWayReturn+0x524>
 801063c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801063e:	2bff      	cmp	r3, #255	; 0xff
 8010640:	d102      	bne.n	8010648 <AdatiWayReturn+0x524>
			// 迷路破損のため、ダイクストラ法更新
			Dijkstra_maker_flag=1;
 8010642:	4b49      	ldr	r3, [pc, #292]	; (8010768 <AdatiWayReturn+0x644>)
 8010644:	2201      	movs	r2, #1
 8010646:	701a      	strb	r2, [r3, #0]
		}
		if (x<0 || y<0 || x>15 || y>15){
 8010648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064a:	2b00      	cmp	r3, #0
 801064c:	db08      	blt.n	8010660 <AdatiWayReturn+0x53c>
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	2b00      	cmp	r3, #0
 8010652:	db05      	blt.n	8010660 <AdatiWayReturn+0x53c>
 8010654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010656:	2b0f      	cmp	r3, #15
 8010658:	dc02      	bgt.n	8010660 <AdatiWayReturn+0x53c>
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	2b0f      	cmp	r3, #15
 801065e:	dd0e      	ble.n	801067e <AdatiWayReturn+0x55a>
			// 自己位置の破損
			error_mode=1;
 8010660:	4b3f      	ldr	r3, [pc, #252]	; (8010760 <AdatiWayReturn+0x63c>)
 8010662:	2201      	movs	r2, #1
 8010664:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode=0;
 8010666:	4b41      	ldr	r3, [pc, #260]	; (801076c <AdatiWayReturn+0x648>)
 8010668:	2200      	movs	r2, #0
 801066a:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2*2*2*2);
 801066c:	2010      	movs	r0, #16
 801066e:	f7f7 fe4b 	bl	8008308 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 8010672:	f7f8 fbef 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 8010676:	2000      	movs	r0, #0
 8010678:	f7f8 fb86 	bl	8008d88 <pl_DriveMotor_standby>
			break;
 801067c:	e105      	b.n	801088a <AdatiWayReturn+0x766>
		}
		if (g_timCount_sec>240){
 801067e:	4b3c      	ldr	r3, [pc, #240]	; (8010770 <AdatiWayReturn+0x64c>)
 8010680:	edd3 7a00 	vldr	s15, [r3]
 8010684:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8010774 <AdatiWayReturn+0x650>
 8010688:	eef4 7ac7 	vcmpe.f32	s15, s14
 801068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010690:	dd08      	ble.n	80106a4 <AdatiWayReturn+0x580>
			// 秒数エンド
			timer_end_mode=1;
 8010692:	2301      	movs	r3, #1
 8010694:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 8010698:	f7f8 fbdc 	bl	8008e54 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 801069c:	2000      	movs	r0, #0
 801069e:	f7f8 fb73 	bl	8008d88 <pl_DriveMotor_standby>
			break;
 80106a2:	e0f2      	b.n	801088a <AdatiWayReturn+0x766>
		}
		//正常終了
		if(x == 0 && y == 0) {
 80106a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d122      	bne.n	80106f0 <AdatiWayReturn+0x5cc>
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d11f      	bne.n	80106f0 <AdatiWayReturn+0x5cc>
			mode.WallControlMode=0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 80106bc:	69f8      	ldr	r0, [r7, #28]
 80106be:	ed97 2a03 	vldr	s4, [r7, #12]
 80106c2:	edd7 1a05 	vldr	s3, [r7, #20]
 80106c6:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8010778 <AdatiWayReturn+0x654>
 80106ca:	edd7 0a05 	vldr	s1, [r7, #20]
 80106ce:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801077c <AdatiWayReturn+0x658>
 80106d2:	f7f3 fea1 	bl	8004418 <straight_table2>
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 80106d6:	ed97 2a02 	vldr	s4, [r7, #8]
 80106da:	edd7 1a04 	vldr	s3, [r7, #16]
 80106de:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8010778 <AdatiWayReturn+0x654>
 80106e2:	eddf 0a25 	vldr	s1, [pc, #148]	; 8010778 <AdatiWayReturn+0x654>
 80106e6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8010780 <AdatiWayReturn+0x65c>
 80106ea:	f7f4 fbbf 	bl	8004e6c <turning_table2>
			break;
 80106ee:	e0cc      	b.n	801088a <AdatiWayReturn+0x766>
		}


		if(Dijkstra_maker_flag==1){
 80106f0:	4b1d      	ldr	r3, [pc, #116]	; (8010768 <AdatiWayReturn+0x644>)
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d145      	bne.n	8010784 <AdatiWayReturn+0x660>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 80106f8:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 80106fc:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 8010700:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 8010704:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 8010706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801070a:	607b      	str	r3, [r7, #4]
 801070c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010710:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8010714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010716:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010718:	f107 0628 	add.w	r6, r7, #40	; 0x28
 801071c:	2301      	movs	r3, #1
 801071e:	9359      	str	r3, [sp, #356]	; 0x164
 8010720:	2300      	movs	r3, #0
 8010722:	9358      	str	r3, [sp, #352]	; 0x160
 8010724:	9557      	str	r5, [sp, #348]	; 0x15c
 8010726:	9056      	str	r0, [sp, #344]	; 0x158
 8010728:	9155      	str	r1, [sp, #340]	; 0x154
 801072a:	9254      	str	r2, [sp, #336]	; 0x150
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	9353      	str	r3, [sp, #332]	; 0x14c
 8010730:	ab01      	add	r3, sp, #4
 8010732:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010736:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801073a:	4618      	mov	r0, r3
 801073c:	f011 fc4c 	bl	8021fd8 <memcpy>
 8010740:	9400      	str	r4, [sp, #0]
 8010742:	edd7 1a02 	vldr	s3, [r7, #8]
 8010746:	ed97 1a03 	vldr	s2, [r7, #12]
 801074a:	edd7 0a04 	vldr	s1, [r7, #16]
 801074e:	ed97 0a05 	vldr	s0, [r7, #20]
 8010752:	4653      	mov	r3, sl
 8010754:	464a      	mov	r2, r9
 8010756:	4641      	mov	r1, r8
 8010758:	4630      	mov	r0, r6
 801075a:	f7ff fb69 	bl	800fe30 <run_movement_suspension>
 801075e:	e082      	b.n	8010866 <AdatiWayReturn+0x742>
 8010760:	20000813 	.word	0x20000813
 8010764:	20000535 	.word	0x20000535
 8010768:	200011f0 	.word	0x200011f0
 801076c:	2000059c 	.word	0x2000059c
 8010770:	20000738 	.word	0x20000738
 8010774:	43700000 	.word	0x43700000
 8010778:	00000000 	.word	0x00000000
 801077c:	42140000 	.word	0x42140000
 8010780:	43340000 	.word	0x43340000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 0, 1);
		}else{

			if(know_mode==0){kitikukan = 0;}
 8010784:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8010788:	2b00      	cmp	r3, #0
 801078a:	d102      	bne.n	8010792 <AdatiWayReturn+0x66e>
 801078c:	4b54      	ldr	r3, [pc, #336]	; (80108e0 <AdatiWayReturn+0x7bc>)
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]
			if (kitikukan == OFF) {
 8010792:	4b53      	ldr	r3, [pc, #332]	; (80108e0 <AdatiWayReturn+0x7bc>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d128      	bne.n	80107ec <AdatiWayReturn+0x6c8>
				run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 801079a:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 801079c:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 80107a0:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 80107a4:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 80107a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80107ae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80107b2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80107b6:	9155      	str	r1, [sp, #340]	; 0x154
 80107b8:	9254      	str	r2, [sp, #336]	; 0x150
 80107ba:	9353      	str	r3, [sp, #332]	; 0x14c
 80107bc:	ab01      	add	r3, sp, #4
 80107be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80107c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80107c6:	4618      	mov	r0, r3
 80107c8:	f011 fc06 	bl	8021fd8 <memcpy>
 80107cc:	9400      	str	r4, [sp, #0]
 80107ce:	edd7 1a02 	vldr	s3, [r7, #8]
 80107d2:	ed97 1a03 	vldr	s2, [r7, #12]
 80107d6:	edd7 0a04 	vldr	s1, [r7, #16]
 80107da:	ed97 0a05 	vldr	s0, [r7, #20]
 80107de:	464b      	mov	r3, r9
 80107e0:	4642      	mov	r2, r8
 80107e2:	4631      	mov	r1, r6
 80107e4:	4628      	mov	r0, r5
 80107e6:	f7ff fa23 	bl	800fc30 <run_movement_continuity>
 80107ea:	e03c      	b.n	8010866 <AdatiWayReturn+0x742>
						input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
						front_wall, right_wall, left_wall);
			} else {
				mode.WallControlMode=1;
 80107ec:	2301      	movs	r3, #1
 80107ee:	773b      	strb	r3, [r7, #28]
				mode.calMazeMode=1;
 80107f0:	2301      	movs	r3, #1
 80107f2:	77bb      	strb	r3, [r7, #30]
				mode.WallCutMode=0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	77fb      	strb	r3, [r7, #31]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 80107f8:	69f8      	ldr	r0, [r7, #28]
 80107fa:	ed97 2a03 	vldr	s4, [r7, #12]
 80107fe:	edd7 1a05 	vldr	s3, [r7, #20]
 8010802:	ed97 1a05 	vldr	s2, [r7, #20]
 8010806:	edd7 0a05 	vldr	s1, [r7, #20]
 801080a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80108e4 <AdatiWayReturn+0x7c0>
 801080e:	f7f3 fe03 	bl	8004418 <straight_table2>
				compress_kitiku(&x,&y,&direction,&kitiku_distance);
 8010812:	f107 0320 	add.w	r3, r7, #32
 8010816:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801081a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801081e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010822:	f001 fc2b 	bl	801207c <compress_kitiku>
				End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 8010826:	2201      	movs	r2, #1
 8010828:	2101      	movs	r1, #1
 801082a:	69f8      	ldr	r0, [r7, #28]
 801082c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80108e4 <AdatiWayReturn+0x7c0>
 8010830:	f7f4 fab0 	bl	8004d94 <End_straight>
				mode.calMazeMode=0;
 8010834:	2300      	movs	r3, #0
 8010836:	77bb      	strb	r3, [r7, #30]
				straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 8010838:	6a3a      	ldr	r2, [r7, #32]
 801083a:	4613      	mov	r3, r2
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	4413      	add	r3, r2
 8010840:	011a      	lsls	r2, r3, #4
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	ee07 3a90 	vmov	s15, r3
 8010848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801084c:	69f8      	ldr	r0, [r7, #28]
 801084e:	ed97 2a03 	vldr	s4, [r7, #12]
 8010852:	eddf 1a25 	vldr	s3, [pc, #148]	; 80108e8 <AdatiWayReturn+0x7c4>
 8010856:	ed97 1a05 	vldr	s2, [r7, #20]
 801085a:	edd7 0a05 	vldr	s1, [r7, #20]
 801085e:	eeb0 0a67 	vmov.f32	s0, s15
 8010862:	f7f3 fdd9 	bl	8004418 <straight_table2>
			}

		}

		if (direction >= 5) {direction = direction-4;}
 8010866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010868:	2b04      	cmp	r3, #4
 801086a:	dd02      	ble.n	8010872 <AdatiWayReturn+0x74e>
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	3b04      	subs	r3, #4
 8010870:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 8010872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010874:	2b00      	cmp	r3, #0
 8010876:	dc02      	bgt.n	801087e <AdatiWayReturn+0x75a>
 8010878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087a:	3304      	adds	r3, #4
 801087c:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 801087e:	4b1b      	ldr	r3, [pc, #108]	; (80108ec <AdatiWayReturn+0x7c8>)
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d000      	beq.n	8010888 <AdatiWayReturn+0x764>
		update_coordinate(&x,&y,direction);
 8010886:	e630      	b.n	80104ea <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 8010888:	bf00      	nop

		}



	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 801088a:	2000      	movs	r0, #0
 801088c:	f7f8 fa7c 	bl	8008d88 <pl_DriveMotor_standby>
	maze_mode = 0;
 8010890:	4b17      	ldr	r3, [pc, #92]	; (80108f0 <AdatiWayReturn+0x7cc>)
 8010892:	2200      	movs	r2, #0
 8010894:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(100);
 8010896:	2064      	movs	r0, #100	; 0x64
 8010898:	f7f8 fda6 	bl	80093e8 <wait_ms_NoReset>
	maze_display();
 801089c:	f006 f808 	bl	80168b0 <maze_display>
	create_StepCountMap_queue();
 80108a0:	f005 f9e8 	bl	8015c74 <create_StepCountMap_queue>
	if(walk_count[0][0] == MAX_WALKCOUNT){
 80108a4:	4b13      	ldr	r3, [pc, #76]	; (80108f4 <AdatiWayReturn+0x7d0>)
 80108a6:	881b      	ldrh	r3, [r3, #0]
 80108a8:	2bff      	cmp	r3, #255	; 0xff
 80108aa:	d102      	bne.n	80108b2 <AdatiWayReturn+0x78e>
		error_mode = 1;
 80108ac:	4b0f      	ldr	r3, [pc, #60]	; (80108ec <AdatiWayReturn+0x7c8>)
 80108ae:	2201      	movs	r2, #1
 80108b0:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 80108b2:	4b0e      	ldr	r3, [pc, #56]	; (80108ec <AdatiWayReturn+0x7c8>)
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d102      	bne.n	80108c0 <AdatiWayReturn+0x79c>
		record_in();
 80108ba:	f7f7 ff87 	bl	80087cc <record_in>
		record_out();
	}else{
		record_in();
	}

}
 80108be:	e008      	b.n	80108d2 <AdatiWayReturn+0x7ae>
	} else if(timer_end_mode==0) {
 80108c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d102      	bne.n	80108ce <AdatiWayReturn+0x7aa>
		record_out();
 80108c8:	f7f8 f836 	bl	8008938 <record_out>
}
 80108cc:	e001      	b.n	80108d2 <AdatiWayReturn+0x7ae>
		record_in();
 80108ce:	f7f7 ff7d 	bl	80087cc <record_in>
}
 80108d2:	bf00      	nop
 80108d4:	3740      	adds	r7, #64	; 0x40
 80108d6:	46bd      	mov	sp, r7
 80108d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108dc:	b004      	add	sp, #16
 80108de:	4770      	bx	lr
 80108e0:	20000838 	.word	0x20000838
 80108e4:	42140000 	.word	0x42140000
 80108e8:	447a0000 	.word	0x447a0000
 80108ec:	20000813 	.word	0x20000813
 80108f0:	20000836 	.word	0x20000836
 80108f4:	200011f4 	.word	0x200011f4

080108f8 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 80108f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108fa:	b08b      	sub	sp, #44	; 0x2c
 80108fc:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	607b      	str	r3, [r7, #4]
	int y = 0;
 8010902:	2300      	movs	r3, #0
 8010904:	603b      	str	r3, [r7, #0]
	int direction = 1;
 8010906:	2301      	movs	r3, #1
 8010908:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 801090a:	4b8b      	ldr	r3, [pc, #556]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 801090c:	2200      	movs	r2, #0
 801090e:	801a      	strh	r2, [r3, #0]
	create_DijkstraMap();
 8010910:	f002 fc90 	bl	8013234 <create_DijkstraMap>
	maze_display_Dijkstra();
 8010914:	f006 f8e0 	bl	8016ad8 <maze_display_Dijkstra>
	pass[0] = 1;
 8010918:	4b88      	ldr	r3, [pc, #544]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 801091a:	2201      	movs	r2, #1
 801091c:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 801091e:	4639      	mov	r1, r7
 8010920:	1d3b      	adds	r3, r7, #4
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	4618      	mov	r0, r3
 8010926:	f7ff f94f 	bl	800fbc8 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2b02      	cmp	r3, #2
 801092e:	d002      	beq.n	8010936 <pass_maker_Dijkstra+0x3e>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b03      	cmp	r3, #3
 8010934:	d13a      	bne.n	80109ac <pass_maker_Dijkstra+0xb4>
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <pass_maker_Dijkstra+0x4a>
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d134      	bne.n	80109ac <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 8010942:	4b7d      	ldr	r3, [pc, #500]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	4b7c      	ldr	r3, [pc, #496]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 801094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094e:	2b00      	cmp	r3, #0
 8010950:	da05      	bge.n	801095e <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 8010952:	4b79      	ldr	r3, [pc, #484]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	3301      	adds	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	4b77      	ldr	r3, [pc, #476]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 801095c:	801a      	strh	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 801095e:	4b76      	ldr	r3, [pc, #472]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	4b75      	ldr	r3, [pc, #468]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801096a:	4a73      	ldr	r2, [pc, #460]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 801096c:	8812      	ldrh	r2, [r2, #0]
 801096e:	4611      	mov	r1, r2
 8010970:	3301      	adds	r3, #1
 8010972:	4a72      	ldr	r2, [pc, #456]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010974:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	3302      	adds	r3, #2
 801097c:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	2b05      	cmp	r3, #5
 8010982:	d101      	bne.n	8010988 <pass_maker_Dijkstra+0x90>
						direction = 1;
 8010984:	2301      	movs	r3, #1
 8010986:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	2b06      	cmp	r3, #6
 801098c:	d101      	bne.n	8010992 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 801098e:	2302      	movs	r3, #2
 8010990:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d101      	bne.n	801099c <pass_maker_Dijkstra+0xa4>
						direction = 4;
 8010998:	2304      	movs	r3, #4
 801099a:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	f040 80c2 	bne.w	8010b2a <pass_maker_Dijkstra+0x232>
						direction = 3;
 80109a6:	2303      	movs	r3, #3
 80109a8:	617b      	str	r3, [r7, #20]
					}
					break;
 80109aa:	e0be      	b.n	8010b2a <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	6839      	ldr	r1, [r7, #0]
 80109b0:	f107 020b 	add.w	r2, r7, #11
 80109b4:	f107 0309 	add.w	r3, r7, #9
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	f107 030a 	add.w	r3, r7, #10
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	4613      	mov	r3, r2
 80109c2:	697a      	ldr	r2, [r7, #20]
 80109c4:	f002 f850 	bl	8012a68 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	683a      	ldr	r2, [r7, #0]
 80109cc:	f107 060c 	add.w	r6, r7, #12
 80109d0:	f107 050e 	add.w	r5, r7, #14
 80109d4:	f107 0410 	add.w	r4, r7, #16
 80109d8:	f107 0012 	add.w	r0, r7, #18
 80109dc:	6979      	ldr	r1, [r7, #20]
 80109de:	9102      	str	r1, [sp, #8]
 80109e0:	9201      	str	r2, [sp, #4]
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	4633      	mov	r3, r6
 80109e6:	462a      	mov	r2, r5
 80109e8:	4621      	mov	r1, r4
 80109ea:	f002 fb89 	bl	8013100 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 80109ee:	7afb      	ldrb	r3, [r7, #11]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <pass_maker_Dijkstra+0x102>
 80109f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109f8:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 80109fa:	7abb      	ldrb	r3, [r7, #10]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d002      	beq.n	8010a06 <pass_maker_Dijkstra+0x10e>
 8010a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a04:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 8010a06:	7a7b      	ldrb	r3, [r7, #9]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d002      	beq.n	8010a12 <pass_maker_Dijkstra+0x11a>
 8010a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a10:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8010a12:	8a7b      	ldrh	r3, [r7, #18]
 8010a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d10e      	bne.n	8010a3a <pass_maker_Dijkstra+0x142>
 8010a1c:	8a3b      	ldrh	r3, [r7, #16]
 8010a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d109      	bne.n	8010a3a <pass_maker_Dijkstra+0x142>
 8010a26:	89bb      	ldrh	r3, [r7, #12]
 8010a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d104      	bne.n	8010a3a <pass_maker_Dijkstra+0x142>
 8010a30:	89fb      	ldrh	r3, [r7, #14]
 8010a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d079      	beq.n	8010b2e <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010a3a:	8a7a      	ldrh	r2, [r7, #18]
 8010a3c:	8a3b      	ldrh	r3, [r7, #16]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d822      	bhi.n	8010a88 <pass_maker_Dijkstra+0x190>
 8010a42:	8a7a      	ldrh	r2, [r7, #18]
 8010a44:	89bb      	ldrh	r3, [r7, #12]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d81e      	bhi.n	8010a88 <pass_maker_Dijkstra+0x190>
 8010a4a:	8a7a      	ldrh	r2, [r7, #18]
 8010a4c:	89fb      	ldrh	r3, [r7, #14]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d81a      	bhi.n	8010a88 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 8010a52:	4b39      	ldr	r3, [pc, #228]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010a54:	881b      	ldrh	r3, [r3, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	4b38      	ldr	r3, [pc, #224]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	da05      	bge.n	8010a6e <pass_maker_Dijkstra+0x176>
 8010a62:	4b35      	ldr	r3, [pc, #212]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	4b33      	ldr	r3, [pc, #204]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010a6c:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 8010a6e:	4b32      	ldr	r3, [pc, #200]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010a70:	881b      	ldrh	r3, [r3, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	4b31      	ldr	r3, [pc, #196]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a7a:	4a2f      	ldr	r2, [pc, #188]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010a7c:	8812      	ldrh	r2, [r2, #0]
 8010a7e:	4611      	mov	r1, r2
 8010a80:	3302      	adds	r3, #2
 8010a82:	4a2e      	ldr	r2, [pc, #184]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010a84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010a88:	8a3a      	ldrh	r2, [r7, #16]
 8010a8a:	8a7b      	ldrh	r3, [r7, #18]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d218      	bcs.n	8010ac2 <pass_maker_Dijkstra+0x1ca>
 8010a90:	8a3a      	ldrh	r2, [r7, #16]
 8010a92:	89bb      	ldrh	r3, [r7, #12]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d814      	bhi.n	8010ac2 <pass_maker_Dijkstra+0x1ca>
 8010a98:	8a3a      	ldrh	r2, [r7, #16]
 8010a9a:	89fb      	ldrh	r3, [r7, #14]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d810      	bhi.n	8010ac2 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 8010aa0:	4b25      	ldr	r3, [pc, #148]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	4b23      	ldr	r3, [pc, #140]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010aaa:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -2;
 8010aac:	4b22      	ldr	r3, [pc, #136]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010aae:	881b      	ldrh	r3, [r3, #0]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4b22      	ldr	r3, [pc, #136]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010ab4:	f06f 0201 	mvn.w	r2, #1
 8010ab8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8010ac2:	89ba      	ldrh	r2, [r7, #12]
 8010ac4:	8a7b      	ldrh	r3, [r7, #18]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d218      	bcs.n	8010afc <pass_maker_Dijkstra+0x204>
 8010aca:	89ba      	ldrh	r2, [r7, #12]
 8010acc:	8a3b      	ldrh	r3, [r7, #16]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d214      	bcs.n	8010afc <pass_maker_Dijkstra+0x204>
 8010ad2:	89ba      	ldrh	r2, [r7, #12]
 8010ad4:	89fb      	ldrh	r3, [r7, #14]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d810      	bhi.n	8010afc <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 8010ada:	4b17      	ldr	r3, [pc, #92]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	4b15      	ldr	r3, [pc, #84]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010ae4:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -3;
 8010ae6:	4b14      	ldr	r3, [pc, #80]	; (8010b38 <pass_maker_Dijkstra+0x240>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	4619      	mov	r1, r3
 8010aec:	4b13      	ldr	r3, [pc, #76]	; (8010b3c <pass_maker_Dijkstra+0x244>)
 8010aee:	f06f 0202 	mvn.w	r2, #2
 8010af2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	2b05      	cmp	r3, #5
 8010b00:	d101      	bne.n	8010b06 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 8010b02:	2301      	movs	r3, #1
 8010b04:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	2b06      	cmp	r3, #6
 8010b0a:	d101      	bne.n	8010b10 <pass_maker_Dijkstra+0x218>
			direction = 2;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d101      	bne.n	8010b1a <pass_maker_Dijkstra+0x222>
			direction = 4;
 8010b16:	2304      	movs	r3, #4
 8010b18:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b20:	f47f aefd 	bne.w	801091e <pass_maker_Dijkstra+0x26>
			direction = 3;
 8010b24:	2303      	movs	r3, #3
 8010b26:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 8010b28:	e6f9      	b.n	801091e <pass_maker_Dijkstra+0x26>
					break;
 8010b2a:	bf00      	nop
 8010b2c:	e000      	b.n	8010b30 <pass_maker_Dijkstra+0x238>
			break;
 8010b2e:	bf00      	nop
		}

	}
}
 8010b30:	bf00      	nop
 8010b32:	371c      	adds	r7, #28
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b38:	20000834 	.word	0x20000834
 8010b3c:	2000083c 	.word	0x2000083c

08010b40 <run_shortest>:


void run_shortest(float inspeed, float inacc, float indec, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode,char max_mode) {
 8010b40:	b082      	sub	sp, #8
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b0e2      	sub	sp, #392	; 0x188
 8010b46:	af50      	add	r7, sp, #320	; 0x140
 8010b48:	ed87 0a05 	vstr	s0, [r7, #20]
 8010b4c:	edc7 0a04 	vstr	s1, [r7, #16]
 8010b50:	ed87 1a03 	vstr	s2, [r7, #12]
 8010b54:	657b      	str	r3, [r7, #84]	; 0x54
 8010b56:	edc7 1a01 	vstr	s3, [r7, #4]
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	72fb      	strb	r3, [r7, #11]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	72bb      	strb	r3, [r7, #10]
 8010b62:	4613      	mov	r3, r2
 8010b64:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 8010b66:	f06f 0301 	mvn.w	r3, #1
 8010b6a:	643b      	str	r3, [r7, #64]	; 0x40

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	77bb      	strb	r3, [r7, #30]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b80:	e007      	b.n	8010b92 <run_shortest+0x52>
 8010b82:	4a07      	ldr	r2, [pc, #28]	; (8010ba0 <run_shortest+0x60>)
 8010b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b86:	2100      	movs	r1, #0
 8010b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8010b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8e:	3301      	adds	r3, #1
 8010b90:	637b      	str	r3, [r7, #52]	; 0x34
 8010b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b94:	2bfe      	cmp	r3, #254	; 0xfe
 8010b96:	ddf4      	ble.n	8010b82 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 8010b98:	2300      	movs	r3, #0
 8010b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8010b9c:	e068      	b.n	8010c70 <run_shortest+0x130>
 8010b9e:	bf00      	nop
 8010ba0:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 8010ba4:	4aa8      	ldr	r2, [pc, #672]	; (8010e48 <run_shortest+0x308>)
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010bac:	49a7      	ldr	r1, [pc, #668]	; (8010e4c <run_shortest+0x30c>)
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[i] = wall.column[i];
 8010bb4:	4aa4      	ldr	r2, [pc, #656]	; (8010e48 <run_shortest+0x308>)
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	330e      	adds	r3, #14
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	4413      	add	r3, r2
 8010bbe:	685a      	ldr	r2, [r3, #4]
 8010bc0:	49a2      	ldr	r1, [pc, #648]	; (8010e4c <run_shortest+0x30c>)
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	330e      	adds	r3, #14
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	440b      	add	r3, r1
 8010bca:	605a      	str	r2, [r3, #4]
		record.row_look[i] = wall.row_look[i];
 8010bcc:	4a9e      	ldr	r2, [pc, #632]	; (8010e48 <run_shortest+0x308>)
 8010bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd0:	331e      	adds	r3, #30
 8010bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010bd6:	499d      	ldr	r1, [pc, #628]	; (8010e4c <run_shortest+0x30c>)
 8010bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bda:	331e      	adds	r3, #30
 8010bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[i] = wall.column_look[i];
 8010be0:	4a99      	ldr	r2, [pc, #612]	; (8010e48 <run_shortest+0x308>)
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	332c      	adds	r3, #44	; 0x2c
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	4997      	ldr	r1, [pc, #604]	; (8010e4c <run_shortest+0x30c>)
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	332c      	adds	r3, #44	; 0x2c
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	440b      	add	r3, r1
 8010bf6:	605a      	str	r2, [r3, #4]
		wall.row_look[i] = ~wall.row_look[i];
 8010bf8:	4a93      	ldr	r2, [pc, #588]	; (8010e48 <run_shortest+0x308>)
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	331e      	adds	r3, #30
 8010bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c02:	43da      	mvns	r2, r3
 8010c04:	4990      	ldr	r1, [pc, #576]	; (8010e48 <run_shortest+0x308>)
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	331e      	adds	r3, #30
 8010c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[i] = ~wall.column_look[i];
 8010c0e:	4a8e      	ldr	r2, [pc, #568]	; (8010e48 <run_shortest+0x308>)
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	332c      	adds	r3, #44	; 0x2c
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4413      	add	r3, r2
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	43da      	mvns	r2, r3
 8010c1c:	498a      	ldr	r1, [pc, #552]	; (8010e48 <run_shortest+0x308>)
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	332c      	adds	r3, #44	; 0x2c
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	440b      	add	r3, r1
 8010c26:	605a      	str	r2, [r3, #4]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 8010c28:	4a87      	ldr	r2, [pc, #540]	; (8010e48 <run_shortest+0x308>)
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010c30:	4985      	ldr	r1, [pc, #532]	; (8010e48 <run_shortest+0x308>)
 8010c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c34:	331e      	adds	r3, #30
 8010c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010c3a:	431a      	orrs	r2, r3
 8010c3c:	4982      	ldr	r1, [pc, #520]	; (8010e48 <run_shortest+0x308>)
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 8010c44:	4a80      	ldr	r2, [pc, #512]	; (8010e48 <run_shortest+0x308>)
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	330e      	adds	r3, #14
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4413      	add	r3, r2
 8010c4e:	685a      	ldr	r2, [r3, #4]
 8010c50:	497d      	ldr	r1, [pc, #500]	; (8010e48 <run_shortest+0x308>)
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	332c      	adds	r3, #44	; 0x2c
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	440b      	add	r3, r1
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	431a      	orrs	r2, r3
 8010c5e:	497a      	ldr	r1, [pc, #488]	; (8010e48 <run_shortest+0x308>)
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	330e      	adds	r3, #14
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	440b      	add	r3, r1
 8010c68:	605a      	str	r2, [r3, #4]
	for(int i = 0; i <= 14; i++){
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8010c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c72:	2b0e      	cmp	r3, #14
 8010c74:	dd96      	ble.n	8010ba4 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 8010c76:	f7ff fe3f 	bl	80108f8 <pass_maker_Dijkstra>

	pass_count = 1;
 8010c7a:	4b75      	ldr	r3, [pc, #468]	; (8010e50 <run_shortest+0x310>)
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	801a      	strh	r2, [r3, #0]
if(pass_mode==1){
 8010c80:	7afb      	ldrb	r3, [r7, #11]
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	f040 84b6 	bne.w	80115f4 <run_shortest+0xab4>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 8010c88:	4b71      	ldr	r3, [pc, #452]	; (8010e50 <run_shortest+0x310>)
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4b71      	ldr	r3, [pc, #452]	; (8010e54 <run_shortest+0x314>)
 8010c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 813b 	beq.w	8010f10 <run_shortest+0x3d0>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 8010c9a:	4b6d      	ldr	r3, [pc, #436]	; (8010e50 <run_shortest+0x310>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4b6c      	ldr	r3, [pc, #432]	; (8010e54 <run_shortest+0x314>)
 8010ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ca6:	f113 0f02 	cmn.w	r3, #2
 8010caa:	d131      	bne.n	8010d10 <run_shortest+0x1d0>
 8010cac:	4b68      	ldr	r3, [pc, #416]	; (8010e50 <run_shortest+0x310>)
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	3b01      	subs	r3, #1
 8010cb2:	4a68      	ldr	r2, [pc, #416]	; (8010e54 <run_shortest+0x314>)
 8010cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	dd29      	ble.n	8010d10 <run_shortest+0x1d0>
		&& pass[pass_count + 1] >= 1) {
 8010cbc:	4b64      	ldr	r3, [pc, #400]	; (8010e50 <run_shortest+0x310>)
 8010cbe:	881b      	ldrh	r3, [r3, #0]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	4a64      	ldr	r2, [pc, #400]	; (8010e54 <run_shortest+0x314>)
 8010cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	dd21      	ble.n	8010d10 <run_shortest+0x1d0>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 8010ccc:	4b60      	ldr	r3, [pc, #384]	; (8010e50 <run_shortest+0x310>)
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	3b01      	subs	r3, #1
 8010cd2:	4a60      	ldr	r2, [pc, #384]	; (8010e54 <run_shortest+0x314>)
 8010cd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010cd8:	4b5d      	ldr	r3, [pc, #372]	; (8010e50 <run_shortest+0x310>)
 8010cda:	881b      	ldrh	r3, [r3, #0]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	3a01      	subs	r2, #1
 8010ce0:	495c      	ldr	r1, [pc, #368]	; (8010e54 <run_shortest+0x314>)
 8010ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8010ce6:	4b5a      	ldr	r3, [pc, #360]	; (8010e50 <run_shortest+0x310>)
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	3301      	adds	r3, #1
 8010cec:	4a59      	ldr	r2, [pc, #356]	; (8010e54 <run_shortest+0x314>)
 8010cee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010cf2:	4b57      	ldr	r3, [pc, #348]	; (8010e50 <run_shortest+0x310>)
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	3a01      	subs	r2, #1
 8010cfa:	4956      	ldr	r1, [pc, #344]	; (8010e54 <run_shortest+0x314>)
 8010cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 8010d00:	4b53      	ldr	r3, [pc, #332]	; (8010e50 <run_shortest+0x310>)
 8010d02:	881b      	ldrh	r3, [r3, #0]
 8010d04:	4619      	mov	r1, r3
 8010d06:	4b53      	ldr	r3, [pc, #332]	; (8010e54 <run_shortest+0x314>)
 8010d08:	f06f 0203 	mvn.w	r2, #3
 8010d0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 8010d10:	4b4f      	ldr	r3, [pc, #316]	; (8010e50 <run_shortest+0x310>)
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	4b4f      	ldr	r3, [pc, #316]	; (8010e54 <run_shortest+0x314>)
 8010d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d1c:	f113 0f03 	cmn.w	r3, #3
 8010d20:	d131      	bne.n	8010d86 <run_shortest+0x246>
 8010d22:	4b4b      	ldr	r3, [pc, #300]	; (8010e50 <run_shortest+0x310>)
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	4a4a      	ldr	r2, [pc, #296]	; (8010e54 <run_shortest+0x314>)
 8010d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	dd29      	ble.n	8010d86 <run_shortest+0x246>
		&& pass[pass_count + 1] >= 1) {
 8010d32:	4b47      	ldr	r3, [pc, #284]	; (8010e50 <run_shortest+0x310>)
 8010d34:	881b      	ldrh	r3, [r3, #0]
 8010d36:	3301      	adds	r3, #1
 8010d38:	4a46      	ldr	r2, [pc, #280]	; (8010e54 <run_shortest+0x314>)
 8010d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dd21      	ble.n	8010d86 <run_shortest+0x246>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 8010d42:	4b43      	ldr	r3, [pc, #268]	; (8010e50 <run_shortest+0x310>)
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	4a42      	ldr	r2, [pc, #264]	; (8010e54 <run_shortest+0x314>)
 8010d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010d4e:	4b40      	ldr	r3, [pc, #256]	; (8010e50 <run_shortest+0x310>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	3b01      	subs	r3, #1
 8010d54:	3a01      	subs	r2, #1
 8010d56:	493f      	ldr	r1, [pc, #252]	; (8010e54 <run_shortest+0x314>)
 8010d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 8010d5c:	4b3c      	ldr	r3, [pc, #240]	; (8010e50 <run_shortest+0x310>)
 8010d5e:	881b      	ldrh	r3, [r3, #0]
 8010d60:	3301      	adds	r3, #1
 8010d62:	4a3c      	ldr	r2, [pc, #240]	; (8010e54 <run_shortest+0x314>)
 8010d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010d68:	4b39      	ldr	r3, [pc, #228]	; (8010e50 <run_shortest+0x310>)
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	3a01      	subs	r2, #1
 8010d70:	4938      	ldr	r1, [pc, #224]	; (8010e54 <run_shortest+0x314>)
 8010d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 8010d76:	4b36      	ldr	r3, [pc, #216]	; (8010e50 <run_shortest+0x310>)
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	4b35      	ldr	r3, [pc, #212]	; (8010e54 <run_shortest+0x314>)
 8010d7e:	f06f 0204 	mvn.w	r2, #4
 8010d82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 8010d86:	4b32      	ldr	r3, [pc, #200]	; (8010e50 <run_shortest+0x310>)
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	4a31      	ldr	r2, [pc, #196]	; (8010e54 <run_shortest+0x314>)
 8010d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	dd43      	ble.n	8010e1e <run_shortest+0x2de>
 8010d96:	4b2e      	ldr	r3, [pc, #184]	; (8010e50 <run_shortest+0x310>)
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	4b2d      	ldr	r3, [pc, #180]	; (8010e54 <run_shortest+0x314>)
 8010d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010da2:	f113 0f02 	cmn.w	r3, #2
 8010da6:	d13a      	bne.n	8010e1e <run_shortest+0x2de>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 8010da8:	4b29      	ldr	r3, [pc, #164]	; (8010e50 <run_shortest+0x310>)
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	3301      	adds	r3, #1
 8010dae:	4a29      	ldr	r2, [pc, #164]	; (8010e54 <run_shortest+0x314>)
 8010db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010db4:	f113 0f02 	cmn.w	r3, #2
 8010db8:	d131      	bne.n	8010e1e <run_shortest+0x2de>
 8010dba:	4b25      	ldr	r3, [pc, #148]	; (8010e50 <run_shortest+0x310>)
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	3302      	adds	r3, #2
 8010dc0:	4a24      	ldr	r2, [pc, #144]	; (8010e54 <run_shortest+0x314>)
 8010dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	dd29      	ble.n	8010e1e <run_shortest+0x2de>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8010dca:	4b21      	ldr	r3, [pc, #132]	; (8010e50 <run_shortest+0x310>)
 8010dcc:	881b      	ldrh	r3, [r3, #0]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	4a20      	ldr	r2, [pc, #128]	; (8010e54 <run_shortest+0x314>)
 8010dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010dd6:	4b1e      	ldr	r3, [pc, #120]	; (8010e50 <run_shortest+0x310>)
 8010dd8:	881b      	ldrh	r3, [r3, #0]
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	3a01      	subs	r2, #1
 8010dde:	491d      	ldr	r1, [pc, #116]	; (8010e54 <run_shortest+0x314>)
 8010de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 8010de4:	4b1a      	ldr	r3, [pc, #104]	; (8010e50 <run_shortest+0x310>)
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	4619      	mov	r1, r3
 8010dea:	4b1a      	ldr	r3, [pc, #104]	; (8010e54 <run_shortest+0x314>)
 8010dec:	f06f 0205 	mvn.w	r2, #5
 8010df0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 8010df4:	4b16      	ldr	r3, [pc, #88]	; (8010e50 <run_shortest+0x310>)
 8010df6:	881b      	ldrh	r3, [r3, #0]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	4a16      	ldr	r2, [pc, #88]	; (8010e54 <run_shortest+0x314>)
 8010dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8010e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 8010e04:	4b12      	ldr	r3, [pc, #72]	; (8010e50 <run_shortest+0x310>)
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	3302      	adds	r3, #2
 8010e0a:	4a12      	ldr	r2, [pc, #72]	; (8010e54 <run_shortest+0x314>)
 8010e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010e10:	4b0f      	ldr	r3, [pc, #60]	; (8010e50 <run_shortest+0x310>)
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	3302      	adds	r3, #2
 8010e16:	3a01      	subs	r2, #1
 8010e18:	490e      	ldr	r1, [pc, #56]	; (8010e54 <run_shortest+0x314>)
 8010e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 8010e1e:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <run_shortest+0x310>)
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	3b01      	subs	r3, #1
 8010e24:	4a0b      	ldr	r2, [pc, #44]	; (8010e54 <run_shortest+0x314>)
 8010e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	dd4c      	ble.n	8010ec8 <run_shortest+0x388>
 8010e2e:	4b08      	ldr	r3, [pc, #32]	; (8010e50 <run_shortest+0x310>)
 8010e30:	881b      	ldrh	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <run_shortest+0x314>)
 8010e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e3a:	f113 0f03 	cmn.w	r3, #3
 8010e3e:	d143      	bne.n	8010ec8 <run_shortest+0x388>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 8010e40:	4b03      	ldr	r3, [pc, #12]	; (8010e50 <run_shortest+0x310>)
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	3301      	adds	r3, #1
 8010e46:	e007      	b.n	8010e58 <run_shortest+0x318>
 8010e48:	20001010 	.word	0x20001010
 8010e4c:	20001100 	.word	0x20001100
 8010e50:	20000834 	.word	0x20000834
 8010e54:	2000083c 	.word	0x2000083c
 8010e58:	4a2b      	ldr	r2, [pc, #172]	; (8010f08 <run_shortest+0x3c8>)
 8010e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e5e:	f113 0f03 	cmn.w	r3, #3
 8010e62:	d131      	bne.n	8010ec8 <run_shortest+0x388>
 8010e64:	4b29      	ldr	r3, [pc, #164]	; (8010f0c <run_shortest+0x3cc>)
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	3302      	adds	r3, #2
 8010e6a:	4a27      	ldr	r2, [pc, #156]	; (8010f08 <run_shortest+0x3c8>)
 8010e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	dd29      	ble.n	8010ec8 <run_shortest+0x388>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8010e74:	4b25      	ldr	r3, [pc, #148]	; (8010f0c <run_shortest+0x3cc>)
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	3b01      	subs	r3, #1
 8010e7a:	4a23      	ldr	r2, [pc, #140]	; (8010f08 <run_shortest+0x3c8>)
 8010e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010e80:	4b22      	ldr	r3, [pc, #136]	; (8010f0c <run_shortest+0x3cc>)
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	3a01      	subs	r2, #1
 8010e88:	491f      	ldr	r1, [pc, #124]	; (8010f08 <run_shortest+0x3c8>)
 8010e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 8010e8e:	4b1f      	ldr	r3, [pc, #124]	; (8010f0c <run_shortest+0x3cc>)
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	4619      	mov	r1, r3
 8010e94:	4b1c      	ldr	r3, [pc, #112]	; (8010f08 <run_shortest+0x3c8>)
 8010e96:	f06f 0206 	mvn.w	r2, #6
 8010e9a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 8010e9e:	4b1b      	ldr	r3, [pc, #108]	; (8010f0c <run_shortest+0x3cc>)
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	4a18      	ldr	r2, [pc, #96]	; (8010f08 <run_shortest+0x3c8>)
 8010ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8010eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 8010eae:	4b17      	ldr	r3, [pc, #92]	; (8010f0c <run_shortest+0x3cc>)
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	3302      	adds	r3, #2
 8010eb4:	4a14      	ldr	r2, [pc, #80]	; (8010f08 <run_shortest+0x3c8>)
 8010eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010eba:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <run_shortest+0x3cc>)
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	3302      	adds	r3, #2
 8010ec0:	3a01      	subs	r2, #1
 8010ec2:	4911      	ldr	r1, [pc, #68]	; (8010f08 <run_shortest+0x3c8>)
 8010ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 8010ec8:	4b10      	ldr	r3, [pc, #64]	; (8010f0c <run_shortest+0x3cc>)
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	4b0e      	ldr	r3, [pc, #56]	; (8010f08 <run_shortest+0x3c8>)
 8010ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed4:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 8010ed8:	4b0c      	ldr	r3, [pc, #48]	; (8010f0c <run_shortest+0x3cc>)
 8010eda:	881b      	ldrh	r3, [r3, #0]
 8010edc:	3b01      	subs	r3, #1
 8010ede:	4a0a      	ldr	r2, [pc, #40]	; (8010f08 <run_shortest+0x3c8>)
 8010ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d107      	bne.n	8010ef8 <run_shortest+0x3b8>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 8010ee8:	4b08      	ldr	r3, [pc, #32]	; (8010f0c <run_shortest+0x3cc>)
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	3b01      	subs	r3, #1
 8010eee:	4a06      	ldr	r2, [pc, #24]	; (8010f08 <run_shortest+0x3c8>)
 8010ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8010ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 8010ef8:	4b04      	ldr	r3, [pc, #16]	; (8010f0c <run_shortest+0x3cc>)
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	3301      	adds	r3, #1
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	4b02      	ldr	r3, [pc, #8]	; (8010f0c <run_shortest+0x3cc>)
 8010f02:	801a      	strh	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 8010f04:	e6c0      	b.n	8010c88 <run_shortest+0x148>
 8010f06:	bf00      	nop
 8010f08:	2000083c 	.word	0x2000083c
 8010f0c:	20000834 	.word	0x20000834
			break;
 8010f10:	bf00      	nop
	}

	pass_count = 1;
 8010f12:	4b8c      	ldr	r3, [pc, #560]	; (8011144 <run_shortest+0x604>)
 8010f14:	2201      	movs	r2, #1
 8010f16:	801a      	strh	r2, [r3, #0]
	if (slant_mode == 1) {
 8010f18:	7a7b      	ldrb	r3, [r7, #9]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	f040 836a 	bne.w	80115f4 <run_shortest+0xab4>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 8010f20:	4b88      	ldr	r3, [pc, #544]	; (8011144 <run_shortest+0x604>)
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	461a      	mov	r2, r3
 8010f26:	4b88      	ldr	r3, [pc, #544]	; (8011148 <run_shortest+0x608>)
 8010f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 81f1 	beq.w	8011314 <run_shortest+0x7d4>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 8010f32:	4b84      	ldr	r3, [pc, #528]	; (8011144 <run_shortest+0x604>)
 8010f34:	881b      	ldrh	r3, [r3, #0]
 8010f36:	3b01      	subs	r3, #1
 8010f38:	4a83      	ldr	r2, [pc, #524]	; (8011148 <run_shortest+0x608>)
 8010f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	f340 81dc 	ble.w	80112fc <run_shortest+0x7bc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 8010f44:	4b7f      	ldr	r3, [pc, #508]	; (8011144 <run_shortest+0x604>)
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	461a      	mov	r2, r3
 8010f4a:	4b7f      	ldr	r3, [pc, #508]	; (8011148 <run_shortest+0x608>)
 8010f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f50:	f113 0f02 	cmn.w	r3, #2
 8010f54:	d009      	beq.n	8010f6a <run_shortest+0x42a>
 8010f56:	4b7b      	ldr	r3, [pc, #492]	; (8011144 <run_shortest+0x604>)
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	4b7a      	ldr	r3, [pc, #488]	; (8011148 <run_shortest+0x608>)
 8010f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f62:	f113 0f03 	cmn.w	r3, #3
 8010f66:	f040 81c9 	bne.w	80112fc <run_shortest+0x7bc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 8010f6a:	4b76      	ldr	r3, [pc, #472]	; (8011144 <run_shortest+0x604>)
 8010f6c:	881b      	ldrh	r3, [r3, #0]
 8010f6e:	461a      	mov	r2, r3
 8010f70:	4b75      	ldr	r3, [pc, #468]	; (8011148 <run_shortest+0x608>)
 8010f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f76:	f113 0f02 	cmn.w	r3, #2
 8010f7a:	d12d      	bne.n	8010fd8 <run_shortest+0x498>
 8010f7c:	4b71      	ldr	r3, [pc, #452]	; (8011144 <run_shortest+0x604>)
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	3301      	adds	r3, #1
 8010f82:	4a71      	ldr	r2, [pc, #452]	; (8011148 <run_shortest+0x608>)
 8010f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f88:	f113 0f03 	cmn.w	r3, #3
 8010f8c:	d124      	bne.n	8010fd8 <run_shortest+0x498>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8010f8e:	4b6d      	ldr	r3, [pc, #436]	; (8011144 <run_shortest+0x604>)
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	3b01      	subs	r3, #1
 8010f94:	4a6c      	ldr	r2, [pc, #432]	; (8011148 <run_shortest+0x608>)
 8010f96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010f9a:	4b6a      	ldr	r3, [pc, #424]	; (8011144 <run_shortest+0x604>)
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	3a01      	subs	r2, #1
 8010fa2:	4969      	ldr	r1, [pc, #420]	; (8011148 <run_shortest+0x608>)
 8010fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8010fa8:	4b66      	ldr	r3, [pc, #408]	; (8011144 <run_shortest+0x604>)
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	4a66      	ldr	r2, [pc, #408]	; (8011148 <run_shortest+0x608>)
 8010fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d107      	bne.n	8010fc8 <run_shortest+0x488>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8010fb8:	4b62      	ldr	r3, [pc, #392]	; (8011144 <run_shortest+0x604>)
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	4a62      	ldr	r2, [pc, #392]	; (8011148 <run_shortest+0x608>)
 8010fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8010fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 8010fc8:	4b5e      	ldr	r3, [pc, #376]	; (8011144 <run_shortest+0x604>)
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4b5e      	ldr	r3, [pc, #376]	; (8011148 <run_shortest+0x608>)
 8010fd0:	f06f 0207 	mvn.w	r2, #7
 8010fd4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 8010fd8:	4b5a      	ldr	r3, [pc, #360]	; (8011144 <run_shortest+0x604>)
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b5a      	ldr	r3, [pc, #360]	; (8011148 <run_shortest+0x608>)
 8010fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fe4:	f113 0f03 	cmn.w	r3, #3
 8010fe8:	d12d      	bne.n	8011046 <run_shortest+0x506>
 8010fea:	4b56      	ldr	r3, [pc, #344]	; (8011144 <run_shortest+0x604>)
 8010fec:	881b      	ldrh	r3, [r3, #0]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	4a55      	ldr	r2, [pc, #340]	; (8011148 <run_shortest+0x608>)
 8010ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ff6:	f113 0f02 	cmn.w	r3, #2
 8010ffa:	d124      	bne.n	8011046 <run_shortest+0x506>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 8010ffc:	4b51      	ldr	r3, [pc, #324]	; (8011144 <run_shortest+0x604>)
 8010ffe:	881b      	ldrh	r3, [r3, #0]
 8011000:	3b01      	subs	r3, #1
 8011002:	4a51      	ldr	r2, [pc, #324]	; (8011148 <run_shortest+0x608>)
 8011004:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011008:	4b4e      	ldr	r3, [pc, #312]	; (8011144 <run_shortest+0x604>)
 801100a:	881b      	ldrh	r3, [r3, #0]
 801100c:	3b01      	subs	r3, #1
 801100e:	3a01      	subs	r2, #1
 8011010:	494d      	ldr	r1, [pc, #308]	; (8011148 <run_shortest+0x608>)
 8011012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8011016:	4b4b      	ldr	r3, [pc, #300]	; (8011144 <run_shortest+0x604>)
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	3b01      	subs	r3, #1
 801101c:	4a4a      	ldr	r2, [pc, #296]	; (8011148 <run_shortest+0x608>)
 801101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d107      	bne.n	8011036 <run_shortest+0x4f6>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8011026:	4b47      	ldr	r3, [pc, #284]	; (8011144 <run_shortest+0x604>)
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	3b01      	subs	r3, #1
 801102c:	4a46      	ldr	r2, [pc, #280]	; (8011148 <run_shortest+0x608>)
 801102e:	f04f 31ff 	mov.w	r1, #4294967295
 8011032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 8011036:	4b43      	ldr	r3, [pc, #268]	; (8011144 <run_shortest+0x604>)
 8011038:	881b      	ldrh	r3, [r3, #0]
 801103a:	4619      	mov	r1, r3
 801103c:	4b42      	ldr	r3, [pc, #264]	; (8011148 <run_shortest+0x608>)
 801103e:	f06f 0208 	mvn.w	r2, #8
 8011042:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 8011046:	4b3f      	ldr	r3, [pc, #252]	; (8011144 <run_shortest+0x604>)
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	461a      	mov	r2, r3
 801104c:	4b3e      	ldr	r3, [pc, #248]	; (8011148 <run_shortest+0x608>)
 801104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011052:	f113 0f02 	cmn.w	r3, #2
 8011056:	d135      	bne.n	80110c4 <run_shortest+0x584>
 8011058:	4b3a      	ldr	r3, [pc, #232]	; (8011144 <run_shortest+0x604>)
 801105a:	881b      	ldrh	r3, [r3, #0]
 801105c:	3301      	adds	r3, #1
 801105e:	4a3a      	ldr	r2, [pc, #232]	; (8011148 <run_shortest+0x608>)
 8011060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011064:	f113 0f02 	cmn.w	r3, #2
 8011068:	d12c      	bne.n	80110c4 <run_shortest+0x584>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 801106a:	4b36      	ldr	r3, [pc, #216]	; (8011144 <run_shortest+0x604>)
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	3b01      	subs	r3, #1
 8011070:	4a35      	ldr	r2, [pc, #212]	; (8011148 <run_shortest+0x608>)
 8011072:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011076:	4b33      	ldr	r3, [pc, #204]	; (8011144 <run_shortest+0x604>)
 8011078:	881b      	ldrh	r3, [r3, #0]
 801107a:	3b01      	subs	r3, #1
 801107c:	3a01      	subs	r2, #1
 801107e:	4932      	ldr	r1, [pc, #200]	; (8011148 <run_shortest+0x608>)
 8011080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8011084:	4b2f      	ldr	r3, [pc, #188]	; (8011144 <run_shortest+0x604>)
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	3b01      	subs	r3, #1
 801108a:	4a2f      	ldr	r2, [pc, #188]	; (8011148 <run_shortest+0x608>)
 801108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d107      	bne.n	80110a4 <run_shortest+0x564>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8011094:	4b2b      	ldr	r3, [pc, #172]	; (8011144 <run_shortest+0x604>)
 8011096:	881b      	ldrh	r3, [r3, #0]
 8011098:	3b01      	subs	r3, #1
 801109a:	4a2b      	ldr	r2, [pc, #172]	; (8011148 <run_shortest+0x608>)
 801109c:	f04f 31ff 	mov.w	r1, #4294967295
 80110a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 80110a4:	4b27      	ldr	r3, [pc, #156]	; (8011144 <run_shortest+0x604>)
 80110a6:	881b      	ldrh	r3, [r3, #0]
 80110a8:	4619      	mov	r1, r3
 80110aa:	4b27      	ldr	r3, [pc, #156]	; (8011148 <run_shortest+0x608>)
 80110ac:	f06f 0209 	mvn.w	r2, #9
 80110b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 80110b4:	4b23      	ldr	r3, [pc, #140]	; (8011144 <run_shortest+0x604>)
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	3301      	adds	r3, #1
 80110ba:	4a23      	ldr	r2, [pc, #140]	; (8011148 <run_shortest+0x608>)
 80110bc:	f04f 31ff 	mov.w	r1, #4294967295
 80110c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 80110c4:	4b1f      	ldr	r3, [pc, #124]	; (8011144 <run_shortest+0x604>)
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b1f      	ldr	r3, [pc, #124]	; (8011148 <run_shortest+0x608>)
 80110cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110d0:	f113 0f03 	cmn.w	r3, #3
 80110d4:	d140      	bne.n	8011158 <run_shortest+0x618>
 80110d6:	4b1b      	ldr	r3, [pc, #108]	; (8011144 <run_shortest+0x604>)
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	3301      	adds	r3, #1
 80110dc:	4a1a      	ldr	r2, [pc, #104]	; (8011148 <run_shortest+0x608>)
 80110de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110e2:	f113 0f03 	cmn.w	r3, #3
 80110e6:	d137      	bne.n	8011158 <run_shortest+0x618>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 80110e8:	4b16      	ldr	r3, [pc, #88]	; (8011144 <run_shortest+0x604>)
 80110ea:	881b      	ldrh	r3, [r3, #0]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	4a16      	ldr	r2, [pc, #88]	; (8011148 <run_shortest+0x608>)
 80110f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80110f4:	4b13      	ldr	r3, [pc, #76]	; (8011144 <run_shortest+0x604>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	3a01      	subs	r2, #1
 80110fc:	4912      	ldr	r1, [pc, #72]	; (8011148 <run_shortest+0x608>)
 80110fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 8011102:	4b10      	ldr	r3, [pc, #64]	; (8011144 <run_shortest+0x604>)
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	3b01      	subs	r3, #1
 8011108:	4a0f      	ldr	r2, [pc, #60]	; (8011148 <run_shortest+0x608>)
 801110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d107      	bne.n	8011122 <run_shortest+0x5e2>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 8011112:	4b0c      	ldr	r3, [pc, #48]	; (8011144 <run_shortest+0x604>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	3b01      	subs	r3, #1
 8011118:	4a0b      	ldr	r2, [pc, #44]	; (8011148 <run_shortest+0x608>)
 801111a:	f04f 31ff 	mov.w	r1, #4294967295
 801111e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 8011122:	4b08      	ldr	r3, [pc, #32]	; (8011144 <run_shortest+0x604>)
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	4619      	mov	r1, r3
 8011128:	4b07      	ldr	r3, [pc, #28]	; (8011148 <run_shortest+0x608>)
 801112a:	f06f 020a 	mvn.w	r2, #10
 801112e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 8011132:	4b04      	ldr	r3, [pc, #16]	; (8011144 <run_shortest+0x604>)
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	3301      	adds	r3, #1
 8011138:	4a03      	ldr	r2, [pc, #12]	; (8011148 <run_shortest+0x608>)
 801113a:	f04f 31ff 	mov.w	r1, #4294967295
 801113e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 8011142:	e009      	b.n	8011158 <run_shortest+0x618>
 8011144:	20000834 	.word	0x20000834
 8011148:	2000083c 	.word	0x2000083c
						pass_count++;
 801114c:	4b6f      	ldr	r3, [pc, #444]	; (801130c <run_shortest+0x7cc>)
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	3301      	adds	r3, #1
 8011152:	b29a      	uxth	r2, r3
 8011154:	4b6d      	ldr	r3, [pc, #436]	; (801130c <run_shortest+0x7cc>)
 8011156:	801a      	strh	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 8011158:	4b6c      	ldr	r3, [pc, #432]	; (801130c <run_shortest+0x7cc>)
 801115a:	881b      	ldrh	r3, [r3, #0]
 801115c:	461a      	mov	r2, r3
 801115e:	4b6c      	ldr	r3, [pc, #432]	; (8011310 <run_shortest+0x7d0>)
 8011160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011164:	2b00      	cmp	r3, #0
 8011166:	dbf1      	blt.n	801114c <run_shortest+0x60c>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 8011168:	4b68      	ldr	r3, [pc, #416]	; (801130c <run_shortest+0x7cc>)
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	3b01      	subs	r3, #1
 801116e:	4a68      	ldr	r2, [pc, #416]	; (8011310 <run_shortest+0x7d0>)
 8011170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011174:	f113 0f02 	cmn.w	r3, #2
 8011178:	d15b      	bne.n	8011232 <run_shortest+0x6f2>
						if (pass[pass_count - 2] == -2) {
 801117a:	4b64      	ldr	r3, [pc, #400]	; (801130c <run_shortest+0x7cc>)
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	3b02      	subs	r3, #2
 8011180:	4a63      	ldr	r2, [pc, #396]	; (8011310 <run_shortest+0x7d0>)
 8011182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011186:	f113 0f02 	cmn.w	r3, #2
 801118a:	d12d      	bne.n	80111e8 <run_shortest+0x6a8>
							pass[pass_count] = pass[pass_count] - 1;
 801118c:	4b5f      	ldr	r3, [pc, #380]	; (801130c <run_shortest+0x7cc>)
 801118e:	881b      	ldrh	r3, [r3, #0]
 8011190:	461a      	mov	r2, r3
 8011192:	4b5f      	ldr	r3, [pc, #380]	; (8011310 <run_shortest+0x7d0>)
 8011194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011198:	4a5c      	ldr	r2, [pc, #368]	; (801130c <run_shortest+0x7cc>)
 801119a:	8812      	ldrh	r2, [r2, #0]
 801119c:	4611      	mov	r1, r2
 801119e:	3b01      	subs	r3, #1
 80111a0:	4a5b      	ldr	r2, [pc, #364]	; (8011310 <run_shortest+0x7d0>)
 80111a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 80111a6:	4b59      	ldr	r3, [pc, #356]	; (801130c <run_shortest+0x7cc>)
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	4b58      	ldr	r3, [pc, #352]	; (8011310 <run_shortest+0x7d0>)
 80111ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d107      	bne.n	80111c6 <run_shortest+0x686>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80111b6:	4b55      	ldr	r3, [pc, #340]	; (801130c <run_shortest+0x7cc>)
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	4619      	mov	r1, r3
 80111bc:	4b54      	ldr	r3, [pc, #336]	; (8011310 <run_shortest+0x7d0>)
 80111be:	f04f 32ff 	mov.w	r2, #4294967295
 80111c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 80111c6:	4b51      	ldr	r3, [pc, #324]	; (801130c <run_shortest+0x7cc>)
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	3b01      	subs	r3, #1
 80111cc:	4a50      	ldr	r2, [pc, #320]	; (8011310 <run_shortest+0x7d0>)
 80111ce:	f06f 010d 	mvn.w	r1, #13
 80111d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 80111d6:	4b4d      	ldr	r3, [pc, #308]	; (801130c <run_shortest+0x7cc>)
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	3b02      	subs	r3, #2
 80111dc:	4a4c      	ldr	r2, [pc, #304]	; (8011310 <run_shortest+0x7d0>)
 80111de:	f04f 31ff 	mov.w	r1, #4294967295
 80111e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80111e6:	e024      	b.n	8011232 <run_shortest+0x6f2>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 80111e8:	4b48      	ldr	r3, [pc, #288]	; (801130c <run_shortest+0x7cc>)
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b48      	ldr	r3, [pc, #288]	; (8011310 <run_shortest+0x7d0>)
 80111f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f4:	4a45      	ldr	r2, [pc, #276]	; (801130c <run_shortest+0x7cc>)
 80111f6:	8812      	ldrh	r2, [r2, #0]
 80111f8:	4611      	mov	r1, r2
 80111fa:	3b01      	subs	r3, #1
 80111fc:	4a44      	ldr	r2, [pc, #272]	; (8011310 <run_shortest+0x7d0>)
 80111fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8011202:	4b42      	ldr	r3, [pc, #264]	; (801130c <run_shortest+0x7cc>)
 8011204:	881b      	ldrh	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	4b41      	ldr	r3, [pc, #260]	; (8011310 <run_shortest+0x7d0>)
 801120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d107      	bne.n	8011222 <run_shortest+0x6e2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8011212:	4b3e      	ldr	r3, [pc, #248]	; (801130c <run_shortest+0x7cc>)
 8011214:	881b      	ldrh	r3, [r3, #0]
 8011216:	4619      	mov	r1, r3
 8011218:	4b3d      	ldr	r3, [pc, #244]	; (8011310 <run_shortest+0x7d0>)
 801121a:	f04f 32ff 	mov.w	r2, #4294967295
 801121e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 8011222:	4b3a      	ldr	r3, [pc, #232]	; (801130c <run_shortest+0x7cc>)
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	3b01      	subs	r3, #1
 8011228:	4a39      	ldr	r2, [pc, #228]	; (8011310 <run_shortest+0x7d0>)
 801122a:	f06f 010b 	mvn.w	r1, #11
 801122e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 8011232:	4b36      	ldr	r3, [pc, #216]	; (801130c <run_shortest+0x7cc>)
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	3b01      	subs	r3, #1
 8011238:	4a35      	ldr	r2, [pc, #212]	; (8011310 <run_shortest+0x7d0>)
 801123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801123e:	f113 0f03 	cmn.w	r3, #3
 8011242:	d15b      	bne.n	80112fc <run_shortest+0x7bc>
						if (pass[pass_count - 2] == -3) {
 8011244:	4b31      	ldr	r3, [pc, #196]	; (801130c <run_shortest+0x7cc>)
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	3b02      	subs	r3, #2
 801124a:	4a31      	ldr	r2, [pc, #196]	; (8011310 <run_shortest+0x7d0>)
 801124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011250:	f113 0f03 	cmn.w	r3, #3
 8011254:	d12d      	bne.n	80112b2 <run_shortest+0x772>
							pass[pass_count] = pass[pass_count] - 1;
 8011256:	4b2d      	ldr	r3, [pc, #180]	; (801130c <run_shortest+0x7cc>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	4b2c      	ldr	r3, [pc, #176]	; (8011310 <run_shortest+0x7d0>)
 801125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011262:	4a2a      	ldr	r2, [pc, #168]	; (801130c <run_shortest+0x7cc>)
 8011264:	8812      	ldrh	r2, [r2, #0]
 8011266:	4611      	mov	r1, r2
 8011268:	3b01      	subs	r3, #1
 801126a:	4a29      	ldr	r2, [pc, #164]	; (8011310 <run_shortest+0x7d0>)
 801126c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8011270:	4b26      	ldr	r3, [pc, #152]	; (801130c <run_shortest+0x7cc>)
 8011272:	881b      	ldrh	r3, [r3, #0]
 8011274:	461a      	mov	r2, r3
 8011276:	4b26      	ldr	r3, [pc, #152]	; (8011310 <run_shortest+0x7d0>)
 8011278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d107      	bne.n	8011290 <run_shortest+0x750>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8011280:	4b22      	ldr	r3, [pc, #136]	; (801130c <run_shortest+0x7cc>)
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	4619      	mov	r1, r3
 8011286:	4b22      	ldr	r3, [pc, #136]	; (8011310 <run_shortest+0x7d0>)
 8011288:	f04f 32ff 	mov.w	r2, #4294967295
 801128c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8011290:	4b1e      	ldr	r3, [pc, #120]	; (801130c <run_shortest+0x7cc>)
 8011292:	881b      	ldrh	r3, [r3, #0]
 8011294:	3b01      	subs	r3, #1
 8011296:	4a1e      	ldr	r2, [pc, #120]	; (8011310 <run_shortest+0x7d0>)
 8011298:	f06f 010e 	mvn.w	r1, #14
 801129c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 80112a0:	4b1a      	ldr	r3, [pc, #104]	; (801130c <run_shortest+0x7cc>)
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	3b02      	subs	r3, #2
 80112a6:	4a1a      	ldr	r2, [pc, #104]	; (8011310 <run_shortest+0x7d0>)
 80112a8:	f04f 31ff 	mov.w	r1, #4294967295
 80112ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80112b0:	e024      	b.n	80112fc <run_shortest+0x7bc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 80112b2:	4b16      	ldr	r3, [pc, #88]	; (801130c <run_shortest+0x7cc>)
 80112b4:	881b      	ldrh	r3, [r3, #0]
 80112b6:	461a      	mov	r2, r3
 80112b8:	4b15      	ldr	r3, [pc, #84]	; (8011310 <run_shortest+0x7d0>)
 80112ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112be:	4a13      	ldr	r2, [pc, #76]	; (801130c <run_shortest+0x7cc>)
 80112c0:	8812      	ldrh	r2, [r2, #0]
 80112c2:	4611      	mov	r1, r2
 80112c4:	3b01      	subs	r3, #1
 80112c6:	4a12      	ldr	r2, [pc, #72]	; (8011310 <run_shortest+0x7d0>)
 80112c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 80112cc:	4b0f      	ldr	r3, [pc, #60]	; (801130c <run_shortest+0x7cc>)
 80112ce:	881b      	ldrh	r3, [r3, #0]
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b0f      	ldr	r3, [pc, #60]	; (8011310 <run_shortest+0x7d0>)
 80112d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d107      	bne.n	80112ec <run_shortest+0x7ac>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80112dc:	4b0b      	ldr	r3, [pc, #44]	; (801130c <run_shortest+0x7cc>)
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	4619      	mov	r1, r3
 80112e2:	4b0b      	ldr	r3, [pc, #44]	; (8011310 <run_shortest+0x7d0>)
 80112e4:	f04f 32ff 	mov.w	r2, #4294967295
 80112e8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 80112ec:	4b07      	ldr	r3, [pc, #28]	; (801130c <run_shortest+0x7cc>)
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	3b01      	subs	r3, #1
 80112f2:	4a07      	ldr	r2, [pc, #28]	; (8011310 <run_shortest+0x7d0>)
 80112f4:	f06f 010c 	mvn.w	r1, #12
 80112f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 80112fc:	4b03      	ldr	r3, [pc, #12]	; (801130c <run_shortest+0x7cc>)
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	3301      	adds	r3, #1
 8011302:	b29a      	uxth	r2, r3
 8011304:	4b01      	ldr	r3, [pc, #4]	; (801130c <run_shortest+0x7cc>)
 8011306:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 8011308:	e60a      	b.n	8010f20 <run_shortest+0x3e0>
 801130a:	bf00      	nop
 801130c:	20000834 	.word	0x20000834
 8011310:	2000083c 	.word	0x2000083c
				break;
 8011314:	bf00      	nop
		}

		pass_count = 1;
 8011316:	4ba3      	ldr	r3, [pc, #652]	; (80115a4 <run_shortest+0xa64>)
 8011318:	2201      	movs	r2, #1
 801131a:	801a      	strh	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 801131c:	4ba1      	ldr	r3, [pc, #644]	; (80115a4 <run_shortest+0xa64>)
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	461a      	mov	r2, r3
 8011322:	4ba1      	ldr	r3, [pc, #644]	; (80115a8 <run_shortest+0xa68>)
 8011324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 813f 	beq.w	80115ac <run_shortest+0xa6c>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 801132e:	4b9d      	ldr	r3, [pc, #628]	; (80115a4 <run_shortest+0xa64>)
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	461a      	mov	r2, r3
 8011334:	4b9c      	ldr	r3, [pc, #624]	; (80115a8 <run_shortest+0xa68>)
 8011336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801133a:	f113 0f08 	cmn.w	r3, #8
 801133e:	d01b      	beq.n	8011378 <run_shortest+0x838>
 8011340:	4b98      	ldr	r3, [pc, #608]	; (80115a4 <run_shortest+0xa64>)
 8011342:	881b      	ldrh	r3, [r3, #0]
 8011344:	461a      	mov	r2, r3
 8011346:	4b98      	ldr	r3, [pc, #608]	; (80115a8 <run_shortest+0xa68>)
 8011348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801134c:	f113 0f09 	cmn.w	r3, #9
 8011350:	d012      	beq.n	8011378 <run_shortest+0x838>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 8011352:	4b94      	ldr	r3, [pc, #592]	; (80115a4 <run_shortest+0xa64>)
 8011354:	881b      	ldrh	r3, [r3, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	4b93      	ldr	r3, [pc, #588]	; (80115a8 <run_shortest+0xa68>)
 801135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801135e:	f113 0f0a 	cmn.w	r3, #10
 8011362:	d009      	beq.n	8011378 <run_shortest+0x838>
 8011364:	4b8f      	ldr	r3, [pc, #572]	; (80115a4 <run_shortest+0xa64>)
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	461a      	mov	r2, r3
 801136a:	4b8f      	ldr	r3, [pc, #572]	; (80115a8 <run_shortest+0xa68>)
 801136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011370:	f113 0f0b 	cmn.w	r3, #11
 8011374:	f040 810f 	bne.w	8011596 <run_shortest+0xa56>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8011378:	4b8a      	ldr	r3, [pc, #552]	; (80115a4 <run_shortest+0xa64>)
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	461a      	mov	r2, r3
 801137e:	4b8a      	ldr	r3, [pc, #552]	; (80115a8 <run_shortest+0xa68>)
 8011380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011384:	f113 0f08 	cmn.w	r3, #8
 8011388:	d008      	beq.n	801139c <run_shortest+0x85c>
 801138a:	4b86      	ldr	r3, [pc, #536]	; (80115a4 <run_shortest+0xa64>)
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	4b85      	ldr	r3, [pc, #532]	; (80115a8 <run_shortest+0xa68>)
 8011392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011396:	f113 0f0a 	cmn.w	r3, #10
 801139a:	d102      	bne.n	80113a2 <run_shortest+0x862>
					slant_direction = -3;
 801139c:	f06f 0302 	mvn.w	r3, #2
 80113a0:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 80113a2:	4b80      	ldr	r3, [pc, #512]	; (80115a4 <run_shortest+0xa64>)
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	4b7f      	ldr	r3, [pc, #508]	; (80115a8 <run_shortest+0xa68>)
 80113aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ae:	f113 0f09 	cmn.w	r3, #9
 80113b2:	d008      	beq.n	80113c6 <run_shortest+0x886>
 80113b4:	4b7b      	ldr	r3, [pc, #492]	; (80115a4 <run_shortest+0xa64>)
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	461a      	mov	r2, r3
 80113ba:	4b7b      	ldr	r3, [pc, #492]	; (80115a8 <run_shortest+0xa68>)
 80113bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c0:	f113 0f0b 	cmn.w	r3, #11
 80113c4:	d102      	bne.n	80113cc <run_shortest+0x88c>
					slant_direction = -2;
 80113c6:	f06f 0301 	mvn.w	r3, #1
 80113ca:	643b      	str	r3, [r7, #64]	; 0x40
				}
				pass_count++;
 80113cc:	4b75      	ldr	r3, [pc, #468]	; (80115a4 <run_shortest+0xa64>)
 80113ce:	881b      	ldrh	r3, [r3, #0]
 80113d0:	3301      	adds	r3, #1
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	4b73      	ldr	r3, [pc, #460]	; (80115a4 <run_shortest+0xa64>)
 80113d6:	801a      	strh	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80113d8:	4b72      	ldr	r3, [pc, #456]	; (80115a4 <run_shortest+0xa64>)
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
 80113de:	4b72      	ldr	r3, [pc, #456]	; (80115a8 <run_shortest+0xa68>)
 80113e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e8:	d105      	bne.n	80113f6 <run_shortest+0x8b6>
					pass_count++;
 80113ea:	4b6e      	ldr	r3, [pc, #440]	; (80115a4 <run_shortest+0xa64>)
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	3301      	adds	r3, #1
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	4b6c      	ldr	r3, [pc, #432]	; (80115a4 <run_shortest+0xa64>)
 80113f4:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80113f6:	4b6b      	ldr	r3, [pc, #428]	; (80115a4 <run_shortest+0xa64>)
 80113f8:	881b      	ldrh	r3, [r3, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	4b6a      	ldr	r3, [pc, #424]	; (80115a8 <run_shortest+0xa68>)
 80113fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011406:	d105      	bne.n	8011414 <run_shortest+0x8d4>
					pass_count++;
 8011408:	4b66      	ldr	r3, [pc, #408]	; (80115a4 <run_shortest+0xa64>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	3301      	adds	r3, #1
 801140e:	b29a      	uxth	r2, r3
 8011410:	4b64      	ldr	r3, [pc, #400]	; (80115a4 <run_shortest+0xa64>)
 8011412:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 8011414:	4b63      	ldr	r3, [pc, #396]	; (80115a4 <run_shortest+0xa64>)
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	461a      	mov	r2, r3
 801141a:	4b63      	ldr	r3, [pc, #396]	; (80115a8 <run_shortest+0xa68>)
 801141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011420:	f113 0f03 	cmn.w	r3, #3
 8011424:	f2c0 80ad 	blt.w	8011582 <run_shortest+0xa42>
					slant_count = pass_count;
 8011428:	4b5e      	ldr	r3, [pc, #376]	; (80115a4 <run_shortest+0xa64>)
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pass[slant_count] = 51;
 8011430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011434:	4a5c      	ldr	r2, [pc, #368]	; (80115a8 <run_shortest+0xa68>)
 8011436:	2133      	movs	r1, #51	; 0x33
 8011438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 801143c:	4b59      	ldr	r3, [pc, #356]	; (80115a4 <run_shortest+0xa64>)
 801143e:	881b      	ldrh	r3, [r3, #0]
 8011440:	3301      	adds	r3, #1
 8011442:	b29a      	uxth	r2, r3
 8011444:	4b57      	ldr	r3, [pc, #348]	; (80115a4 <run_shortest+0xa64>)
 8011446:	801a      	strh	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 8011448:	e09b      	b.n	8011582 <run_shortest+0xa42>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 801144a:	4b56      	ldr	r3, [pc, #344]	; (80115a4 <run_shortest+0xa64>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	4b55      	ldr	r3, [pc, #340]	; (80115a8 <run_shortest+0xa68>)
 8011452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145a:	d105      	bne.n	8011468 <run_shortest+0x928>
						pass_count++;
 801145c:	4b51      	ldr	r3, [pc, #324]	; (80115a4 <run_shortest+0xa64>)
 801145e:	881b      	ldrh	r3, [r3, #0]
 8011460:	3301      	adds	r3, #1
 8011462:	b29a      	uxth	r2, r3
 8011464:	4b4f      	ldr	r3, [pc, #316]	; (80115a4 <run_shortest+0xa64>)
 8011466:	801a      	strh	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 8011468:	4b4e      	ldr	r3, [pc, #312]	; (80115a4 <run_shortest+0xa64>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	461a      	mov	r2, r3
 801146e:	4b4e      	ldr	r3, [pc, #312]	; (80115a8 <run_shortest+0xa68>)
 8011470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011474:	f113 0f0c 	cmn.w	r3, #12
 8011478:	f000 808d 	beq.w	8011596 <run_shortest+0xa56>
 801147c:	4b49      	ldr	r3, [pc, #292]	; (80115a4 <run_shortest+0xa64>)
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	461a      	mov	r2, r3
 8011482:	4b49      	ldr	r3, [pc, #292]	; (80115a8 <run_shortest+0xa68>)
 8011484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011488:	f113 0f0d 	cmn.w	r3, #13
 801148c:	f000 8083 	beq.w	8011596 <run_shortest+0xa56>
							|| pass[pass_count] == -14
 8011490:	4b44      	ldr	r3, [pc, #272]	; (80115a4 <run_shortest+0xa64>)
 8011492:	881b      	ldrh	r3, [r3, #0]
 8011494:	461a      	mov	r2, r3
 8011496:	4b44      	ldr	r3, [pc, #272]	; (80115a8 <run_shortest+0xa68>)
 8011498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801149c:	f113 0f0e 	cmn.w	r3, #14
 80114a0:	d079      	beq.n	8011596 <run_shortest+0xa56>
							|| pass[pass_count] == -15) {
 80114a2:	4b40      	ldr	r3, [pc, #256]	; (80115a4 <run_shortest+0xa64>)
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	461a      	mov	r2, r3
 80114a8:	4b3f      	ldr	r3, [pc, #252]	; (80115a8 <run_shortest+0xa68>)
 80114aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ae:	f113 0f0f 	cmn.w	r3, #15
 80114b2:	d070      	beq.n	8011596 <run_shortest+0xa56>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 80114b4:	4b3b      	ldr	r3, [pc, #236]	; (80115a4 <run_shortest+0xa64>)
 80114b6:	881b      	ldrh	r3, [r3, #0]
 80114b8:	461a      	mov	r2, r3
 80114ba:	4b3b      	ldr	r3, [pc, #236]	; (80115a8 <run_shortest+0xa68>)
 80114bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d127      	bne.n	8011516 <run_shortest+0x9d6>
						pass[slant_count] = pass[slant_count] - 1;
 80114c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114ca:	4a37      	ldr	r2, [pc, #220]	; (80115a8 <run_shortest+0xa68>)
 80114cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80114d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80114d4:	3a01      	subs	r2, #1
 80114d6:	4934      	ldr	r1, [pc, #208]	; (80115a8 <run_shortest+0xa68>)
 80114d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 80114dc:	4b31      	ldr	r3, [pc, #196]	; (80115a4 <run_shortest+0xa64>)
 80114de:	881b      	ldrh	r3, [r3, #0]
 80114e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (slant_direction == -2) {
 80114e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114e6:	f113 0f02 	cmn.w	r3, #2
 80114ea:	d107      	bne.n	80114fc <run_shortest+0x9bc>
							pass[pass_count] = -16;
 80114ec:	4b2d      	ldr	r3, [pc, #180]	; (80115a4 <run_shortest+0xa64>)
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	4619      	mov	r1, r3
 80114f2:	4b2d      	ldr	r3, [pc, #180]	; (80115a8 <run_shortest+0xa68>)
 80114f4:	f06f 020f 	mvn.w	r2, #15
 80114f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 80114fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114fe:	f113 0f03 	cmn.w	r3, #3
 8011502:	d138      	bne.n	8011576 <run_shortest+0xa36>
							pass[pass_count] = -17;
 8011504:	4b27      	ldr	r3, [pc, #156]	; (80115a4 <run_shortest+0xa64>)
 8011506:	881b      	ldrh	r3, [r3, #0]
 8011508:	4619      	mov	r1, r3
 801150a:	4b27      	ldr	r3, [pc, #156]	; (80115a8 <run_shortest+0xa68>)
 801150c:	f06f 0210 	mvn.w	r2, #16
 8011510:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8011514:	e02f      	b.n	8011576 <run_shortest+0xa36>
						}

					} else {
						if (pass[slant_count] >= 50) {
 8011516:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801151a:	4a23      	ldr	r2, [pc, #140]	; (80115a8 <run_shortest+0xa68>)
 801151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011520:	2b31      	cmp	r3, #49	; 0x31
 8011522:	dd08      	ble.n	8011536 <run_shortest+0x9f6>
							pass[pass_count] = -1;
 8011524:	4b1f      	ldr	r3, [pc, #124]	; (80115a4 <run_shortest+0xa64>)
 8011526:	881b      	ldrh	r3, [r3, #0]
 8011528:	4619      	mov	r1, r3
 801152a:	4b1f      	ldr	r3, [pc, #124]	; (80115a8 <run_shortest+0xa68>)
 801152c:	f04f 32ff 	mov.w	r2, #4294967295
 8011530:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8011534:	e009      	b.n	801154a <run_shortest+0xa0a>
						} else {
							slant_count = pass_count;
 8011536:	4b1b      	ldr	r3, [pc, #108]	; (80115a4 <run_shortest+0xa64>)
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							pass[slant_count] = 50;
 801153e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011542:	4a19      	ldr	r2, [pc, #100]	; (80115a8 <run_shortest+0xa68>)
 8011544:	2132      	movs	r1, #50	; 0x32
 8011546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 801154a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801154e:	4a16      	ldr	r2, [pc, #88]	; (80115a8 <run_shortest+0xa68>)
 8011550:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011558:	3201      	adds	r2, #1
 801155a:	4913      	ldr	r1, [pc, #76]	; (80115a8 <run_shortest+0xa68>)
 801155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 8011560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011562:	f113 0f02 	cmn.w	r3, #2
 8011566:	d103      	bne.n	8011570 <run_shortest+0xa30>
							slant_direction = -3;
 8011568:	f06f 0302 	mvn.w	r3, #2
 801156c:	643b      	str	r3, [r7, #64]	; 0x40
 801156e:	e002      	b.n	8011576 <run_shortest+0xa36>
						} else {
							slant_direction = -2;
 8011570:	f06f 0301 	mvn.w	r3, #1
 8011574:	643b      	str	r3, [r7, #64]	; 0x40
						}

					}

					pass_count++;
 8011576:	4b0b      	ldr	r3, [pc, #44]	; (80115a4 <run_shortest+0xa64>)
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	b29a      	uxth	r2, r3
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <run_shortest+0xa64>)
 8011580:	801a      	strh	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 8011582:	4b08      	ldr	r3, [pc, #32]	; (80115a4 <run_shortest+0xa64>)
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	461a      	mov	r2, r3
 8011588:	4b07      	ldr	r3, [pc, #28]	; (80115a8 <run_shortest+0xa68>)
 801158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801158e:	f113 0f03 	cmn.w	r3, #3
 8011592:	f6bf af5a 	bge.w	801144a <run_shortest+0x90a>

			}

			//		if(){}

			pass_count++;
 8011596:	4b03      	ldr	r3, [pc, #12]	; (80115a4 <run_shortest+0xa64>)
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	3301      	adds	r3, #1
 801159c:	b29a      	uxth	r2, r3
 801159e:	4b01      	ldr	r3, [pc, #4]	; (80115a4 <run_shortest+0xa64>)
 80115a0:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 80115a2:	e6bb      	b.n	801131c <run_shortest+0x7dc>
 80115a4:	20000834 	.word	0x20000834
 80115a8:	2000083c 	.word	0x2000083c
				break;
 80115ac:	bf00      	nop
		}
		pass_count=0;
 80115ae:	4bb1      	ldr	r3, [pc, #708]	; (8011874 <run_shortest+0xd34>)
 80115b0:	2200      	movs	r2, #0
 80115b2:	801a      	strh	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 80115b4:	4baf      	ldr	r3, [pc, #700]	; (8011874 <run_shortest+0xd34>)
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	461a      	mov	r2, r3
 80115ba:	4baf      	ldr	r3, [pc, #700]	; (8011878 <run_shortest+0xd38>)
 80115bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c0:	2b32      	cmp	r3, #50	; 0x32
 80115c2:	d107      	bne.n	80115d4 <run_shortest+0xa94>
				pass[pass_count] =-1;
 80115c4:	4bab      	ldr	r3, [pc, #684]	; (8011874 <run_shortest+0xd34>)
 80115c6:	881b      	ldrh	r3, [r3, #0]
 80115c8:	4619      	mov	r1, r3
 80115ca:	4bab      	ldr	r3, [pc, #684]	; (8011878 <run_shortest+0xd38>)
 80115cc:	f04f 32ff 	mov.w	r2, #4294967295
 80115d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 80115d4:	4ba7      	ldr	r3, [pc, #668]	; (8011874 <run_shortest+0xd34>)
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	461a      	mov	r2, r3
 80115da:	4ba7      	ldr	r3, [pc, #668]	; (8011878 <run_shortest+0xd38>)
 80115dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d006      	beq.n	80115f2 <run_shortest+0xab2>
				break;
			}
			pass_count++;
 80115e4:	4ba3      	ldr	r3, [pc, #652]	; (8011874 <run_shortest+0xd34>)
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	3301      	adds	r3, #1
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	4ba1      	ldr	r3, [pc, #644]	; (8011874 <run_shortest+0xd34>)
 80115ee:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 80115f0:	e7e0      	b.n	80115b4 <run_shortest+0xa74>
				break;
 80115f2:	bf00      	nop
		}

	}
}
	int j = 0;
 80115f4:	2300      	movs	r3, #0
 80115f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 80115f8:	e00b      	b.n	8011612 <run_shortest+0xad2>
		printf("pass_count %d pass %d\n", j, pass[j]);
 80115fa:	4a9f      	ldr	r2, [pc, #636]	; (8011878 <run_shortest+0xd38>)
 80115fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011602:	461a      	mov	r2, r3
 8011604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011606:	489d      	ldr	r0, [pc, #628]	; (801187c <run_shortest+0xd3c>)
 8011608:	f011 f966 	bl	80228d8 <iprintf>
		j++;
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	3301      	adds	r3, #1
 8011610:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 8011612:	4a99      	ldr	r2, [pc, #612]	; (8011878 <run_shortest+0xd38>)
 8011614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d1ed      	bne.n	80115fa <run_shortest+0xaba>
	}
	int pass_count2;
	pass_count2=0;
 801161e:	2300      	movs	r3, #0
 8011620:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 8011622:	e002      	b.n	801162a <run_shortest+0xaea>
		pass_count2++;
 8011624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011626:	3301      	adds	r3, #1
 8011628:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 801162a:	4a93      	ldr	r2, [pc, #588]	; (8011878 <run_shortest+0xd38>)
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011636:	d0f5      	beq.n	8011624 <run_shortest+0xae4>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8011638:	4a8f      	ldr	r2, [pc, #572]	; (8011878 <run_shortest+0xd38>)
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011640:	934e      	str	r3, [sp, #312]	; 0x138
 8011642:	4668      	mov	r0, sp
 8011644:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011648:	f44f 729c 	mov.w	r2, #312	; 0x138
 801164c:	4619      	mov	r1, r3
 801164e:	f010 fcc3 	bl	8021fd8 <memcpy>
 8011652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011658:	f008 f8f4 	bl	8019844 <get_center_velocity>
 801165c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	printf("%d,%f\n",pass_count2, end_velocity);
 8011660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011662:	f7ee ff99 	bl	8000598 <__aeabi_f2d>
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801166c:	4884      	ldr	r0, [pc, #528]	; (8011880 <run_shortest+0xd40>)
 801166e:	f011 f933 	bl	80228d8 <iprintf>

	wait_ms_NoReset(500);
 8011672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011676:	f7f7 feb7 	bl	80093e8 <wait_ms_NoReset>
	pl_DriveMotor_standby(ON);
 801167a:	2001      	movs	r0, #1
 801167c:	f7f7 fb84 	bl	8008d88 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8011680:	2003      	movs	r0, #3
 8011682:	f7f7 fbb3 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8011686:	2003      	movs	r0, #3
 8011688:	f7f7 fb88 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801168c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011690:	f7f7 feaa 	bl	80093e8 <wait_ms_NoReset>
	no_safty = 1;
 8011694:	4b7b      	ldr	r3, [pc, #492]	; (8011884 <run_shortest+0xd44>)
 8011696:	2201      	movs	r2, #1
 8011698:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 801169a:	4b7a      	ldr	r3, [pc, #488]	; (8011884 <run_shortest+0xd44>)
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 80116a0:	f7f4 f9de 	bl	8005a60 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 80116a4:	7abb      	ldrb	r3, [r7, #10]
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d10f      	bne.n	80116ca <run_shortest+0xb8a>
		pl_FunMotor_duty(fun_ratio);
 80116aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80116ae:	f7f7 fc09 	bl	8008ec4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 80116b2:	f7f7 fbf3 	bl	8008e9c <pl_FunMotor_start>
		wait_ms_NoReset(600);
 80116b6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80116ba:	f7f7 fe95 	bl	80093e8 <wait_ms_NoReset>
		reset_gyro();
 80116be:	f7f0 faa3 	bl	8001c08 <reset_gyro>
		reset_speed();
 80116c2:	f7ef fcaf 	bl	8001024 <reset_speed>
		clear_Ierror();
 80116c6:	f7f4 f9cb 	bl	8005a60 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						wait_ms_NoReset(2000);	//候補1

	}
	maze_mode = 1;
 80116ca:	4b6f      	ldr	r3, [pc, #444]	; (8011888 <run_shortest+0xd48>)
 80116cc:	2201      	movs	r2, #1
 80116ce:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 80116d0:	4b6e      	ldr	r3, [pc, #440]	; (801188c <run_shortest+0xd4c>)
 80116d2:	2201      	movs	r2, #1
 80116d4:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=2;
 80116d6:	4b6e      	ldr	r3, [pc, #440]	; (8011890 <run_shortest+0xd50>)
 80116d8:	2202      	movs	r2, #2
 80116da:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	pass_count = 0;
 80116dc:	4b65      	ldr	r3, [pc, #404]	; (8011874 <run_shortest+0xd34>)
 80116de:	2200      	movs	r2, #0
 80116e0:	801a      	strh	r2, [r3, #0]


	mode.WallControlMode=1;
 80116e2:	2301      	movs	r3, #1
 80116e4:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 80116e6:	2300      	movs	r3, #0
 80116e8:	777b      	strb	r3, [r7, #29]
	mode.calMazeMode=0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	77bb      	strb	r3, [r7, #30]
	mode.WallCutMode=0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	77fb      	strb	r3, [r7, #31]
	pass_count2=0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80116f6:	e002      	b.n	80116fe <run_shortest+0xbbe>
		pass_count2++;
 80116f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fa:	3301      	adds	r3, #1
 80116fc:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 80116fe:	4a5e      	ldr	r2, [pc, #376]	; (8011878 <run_shortest+0xd38>)
 8011700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170a:	d0f5      	beq.n	80116f8 <run_shortest+0xbb8>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 801170c:	4a5a      	ldr	r2, [pc, #360]	; (8011878 <run_shortest+0xd38>)
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011714:	934e      	str	r3, [sp, #312]	; 0x138
 8011716:	4668      	mov	r0, sp
 8011718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801171c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8011720:	4619      	mov	r1, r3
 8011722:	f010 fc59 	bl	8021fd8 <memcpy>
 8011726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801172a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801172c:	f008 f88a 	bl	8019844 <get_center_velocity>
 8011730:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 8011734:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011738:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801173c:	ee17 0a90 	vmov	r0, s15
 8011740:	f7ee ff2a 	bl	8000598 <__aeabi_f2d>
 8011744:	f04f 0200 	mov.w	r2, #0
 8011748:	4b52      	ldr	r3, [pc, #328]	; (8011894 <run_shortest+0xd54>)
 801174a:	f7ef f8a7 	bl	800089c <__aeabi_ddiv>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4610      	mov	r0, r2
 8011754:	4619      	mov	r1, r3
 8011756:	f04f 0200 	mov.w	r2, #0
 801175a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801175e:	f7ef f89d 	bl	800089c <__aeabi_ddiv>
 8011762:	4602      	mov	r2, r0
 8011764:	460b      	mov	r3, r1
 8011766:	4610      	mov	r0, r2
 8011768:	4619      	mov	r1, r3
 801176a:	f7ef fa45 	bl	8000bf8 <__aeabi_d2f>
 801176e:	4603      	mov	r3, r0
 8011770:	69f8      	ldr	r0, [r7, #28]
 8011772:	ee02 3a10 	vmov	s4, r3
 8011776:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 801177a:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 801177e:	eddf 0a46 	vldr	s1, [pc, #280]	; 8011898 <run_shortest+0xd58>
 8011782:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 8011786:	f7f2 fe47 	bl	8004418 <straight_table2>


	while (pass_count <= 500) {
 801178a:	e381      	b.n	8011e90 <run_shortest+0x1350>
		pass_count2=pass_count+1;
 801178c:	4b39      	ldr	r3, [pc, #228]	; (8011874 <run_shortest+0xd34>)
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	3301      	adds	r3, #1
 8011792:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 8011794:	e002      	b.n	801179c <run_shortest+0xc5c>
			pass_count2++;
 8011796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011798:	3301      	adds	r3, #1
 801179a:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 801179c:	4a36      	ldr	r2, [pc, #216]	; (8011878 <run_shortest+0xd38>)
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a8:	d0f5      	beq.n	8011796 <run_shortest+0xc56>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 80117aa:	4a33      	ldr	r2, [pc, #204]	; (8011878 <run_shortest+0xd38>)
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117b2:	934e      	str	r3, [sp, #312]	; 0x138
 80117b4:	4668      	mov	r0, sp
 80117b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80117ba:	f44f 729c 	mov.w	r2, #312	; 0x138
 80117be:	4619      	mov	r1, r3
 80117c0:	f010 fc0a 	bl	8021fd8 <memcpy>
 80117c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80117c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80117ca:	f008 f83b 	bl	8019844 <get_center_velocity>
 80117ce:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (pass[pass_count] == -1) {
 80117d2:	4b28      	ldr	r3, [pc, #160]	; (8011874 <run_shortest+0xd34>)
 80117d4:	881b      	ldrh	r3, [r3, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	4b27      	ldr	r3, [pc, #156]	; (8011878 <run_shortest+0xd38>)
 80117da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e2:	d106      	bne.n	80117f2 <run_shortest+0xcb2>
			pass_count++;
 80117e4:	4b23      	ldr	r3, [pc, #140]	; (8011874 <run_shortest+0xd34>)
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	3301      	adds	r3, #1
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	4b21      	ldr	r3, [pc, #132]	; (8011874 <run_shortest+0xd34>)
 80117ee:	801a      	strh	r2, [r3, #0]
 80117f0:	e346      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -2) {
 80117f2:	4b20      	ldr	r3, [pc, #128]	; (8011874 <run_shortest+0xd34>)
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	461a      	mov	r2, r3
 80117f8:	4b1f      	ldr	r3, [pc, #124]	; (8011878 <run_shortest+0xd38>)
 80117fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117fe:	f113 0f02 	cmn.w	r3, #2
 8011802:	d116      	bne.n	8011832 <run_shortest+0xcf2>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 8011804:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011808:	9303      	str	r3, [sp, #12]
 801180a:	2301      	movs	r3, #1
 801180c:	9302      	str	r3, [sp, #8]
 801180e:	2300      	movs	r3, #0
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801181a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801181c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011820:	f7fa f9da 	bl	800bbd8 <slalomR>

			pass_count++;
 8011824:	4b13      	ldr	r3, [pc, #76]	; (8011874 <run_shortest+0xd34>)
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	3301      	adds	r3, #1
 801182a:	b29a      	uxth	r2, r3
 801182c:	4b11      	ldr	r3, [pc, #68]	; (8011874 <run_shortest+0xd34>)
 801182e:	801a      	strh	r2, [r3, #0]
 8011830:	e326      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -3) {
 8011832:	4b10      	ldr	r3, [pc, #64]	; (8011874 <run_shortest+0xd34>)
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	4b0f      	ldr	r3, [pc, #60]	; (8011878 <run_shortest+0xd38>)
 801183a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801183e:	f113 0f03 	cmn.w	r3, #3
 8011842:	d12b      	bne.n	801189c <run_shortest+0xd5c>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 8011844:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011848:	9303      	str	r3, [sp, #12]
 801184a:	2301      	movs	r3, #1
 801184c:	9302      	str	r3, [sp, #8]
 801184e:	2300      	movs	r3, #0
 8011850:	9301      	str	r3, [sp, #4]
 8011852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801185c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801185e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011862:	f7fa fb9f 	bl	800bfa4 <slalomL>

			pass_count++;
 8011866:	4b03      	ldr	r3, [pc, #12]	; (8011874 <run_shortest+0xd34>)
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	3301      	adds	r3, #1
 801186c:	b29a      	uxth	r2, r3
 801186e:	4b01      	ldr	r3, [pc, #4]	; (8011874 <run_shortest+0xd34>)
 8011870:	801a      	strh	r2, [r3, #0]
 8011872:	e305      	b.n	8011e80 <run_shortest+0x1340>
 8011874:	20000834 	.word	0x20000834
 8011878:	2000083c 	.word	0x2000083c
 801187c:	08026334 	.word	0x08026334
 8011880:	0802634c 	.word	0x0802634c
 8011884:	20000812 	.word	0x20000812
 8011888:	20000836 	.word	0x20000836
 801188c:	20000814 	.word	0x20000814
 8011890:	2000f284 	.word	0x2000f284
 8011894:	40290000 	.word	0x40290000
 8011898:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -4) {
 801189c:	4baa      	ldr	r3, [pc, #680]	; (8011b48 <run_shortest+0x1008>)
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	461a      	mov	r2, r3
 80118a2:	4baa      	ldr	r3, [pc, #680]	; (8011b4c <run_shortest+0x100c>)
 80118a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118a8:	f113 0f04 	cmn.w	r3, #4
 80118ac:	d115      	bne.n	80118da <run_shortest+0xd9a>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 80118ae:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80118b2:	9302      	str	r3, [sp, #8]
 80118b4:	2300      	movs	r3, #0
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80118c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118c4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80118c8:	f7fa fd4e 	bl	800c368 <turn90R>
			pass_count++;
 80118cc:	4b9e      	ldr	r3, [pc, #632]	; (8011b48 <run_shortest+0x1008>)
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	3301      	adds	r3, #1
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	4b9c      	ldr	r3, [pc, #624]	; (8011b48 <run_shortest+0x1008>)
 80118d6:	801a      	strh	r2, [r3, #0]
 80118d8:	e2d2      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -5) {
 80118da:	4b9b      	ldr	r3, [pc, #620]	; (8011b48 <run_shortest+0x1008>)
 80118dc:	881b      	ldrh	r3, [r3, #0]
 80118de:	461a      	mov	r2, r3
 80118e0:	4b9a      	ldr	r3, [pc, #616]	; (8011b4c <run_shortest+0x100c>)
 80118e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118e6:	f113 0f05 	cmn.w	r3, #5
 80118ea:	d115      	bne.n	8011918 <run_shortest+0xdd8>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 80118ec:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80118f0:	9302      	str	r3, [sp, #8]
 80118f2:	2300      	movs	r3, #0
 80118f4:	9301      	str	r3, [sp, #4]
 80118f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011902:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011906:	f7fa fe99 	bl	800c63c <turn90L>
			pass_count++;
 801190a:	4b8f      	ldr	r3, [pc, #572]	; (8011b48 <run_shortest+0x1008>)
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	3301      	adds	r3, #1
 8011910:	b29a      	uxth	r2, r3
 8011912:	4b8d      	ldr	r3, [pc, #564]	; (8011b48 <run_shortest+0x1008>)
 8011914:	801a      	strh	r2, [r3, #0]
 8011916:	e2b3      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -6) {
 8011918:	4b8b      	ldr	r3, [pc, #556]	; (8011b48 <run_shortest+0x1008>)
 801191a:	881b      	ldrh	r3, [r3, #0]
 801191c:	461a      	mov	r2, r3
 801191e:	4b8b      	ldr	r3, [pc, #556]	; (8011b4c <run_shortest+0x100c>)
 8011920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011924:	f113 0f06 	cmn.w	r3, #6
 8011928:	d115      	bne.n	8011956 <run_shortest+0xe16>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 801192a:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	2300      	movs	r3, #0
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801193e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011940:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011944:	f7fa ffde 	bl	800c904 <turn180R>
			pass_count++;
 8011948:	4b7f      	ldr	r3, [pc, #508]	; (8011b48 <run_shortest+0x1008>)
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	3301      	adds	r3, #1
 801194e:	b29a      	uxth	r2, r3
 8011950:	4b7d      	ldr	r3, [pc, #500]	; (8011b48 <run_shortest+0x1008>)
 8011952:	801a      	strh	r2, [r3, #0]
 8011954:	e294      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -7) {
 8011956:	4b7c      	ldr	r3, [pc, #496]	; (8011b48 <run_shortest+0x1008>)
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	4b7b      	ldr	r3, [pc, #492]	; (8011b4c <run_shortest+0x100c>)
 801195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011962:	f113 0f07 	cmn.w	r3, #7
 8011966:	d115      	bne.n	8011994 <run_shortest+0xe54>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 8011968:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 801196c:	9302      	str	r3, [sp, #8]
 801196e:	2300      	movs	r3, #0
 8011970:	9301      	str	r3, [sp, #4]
 8011972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801197c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801197e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011982:	f7fb f929 	bl	800cbd8 <turn180L>
			pass_count++;
 8011986:	4b70      	ldr	r3, [pc, #448]	; (8011b48 <run_shortest+0x1008>)
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	3301      	adds	r3, #1
 801198c:	b29a      	uxth	r2, r3
 801198e:	4b6e      	ldr	r3, [pc, #440]	; (8011b48 <run_shortest+0x1008>)
 8011990:	801a      	strh	r2, [r3, #0]
 8011992:	e275      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -8) { //入り45R
 8011994:	4b6c      	ldr	r3, [pc, #432]	; (8011b48 <run_shortest+0x1008>)
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	461a      	mov	r2, r3
 801199a:	4b6c      	ldr	r3, [pc, #432]	; (8011b4c <run_shortest+0x100c>)
 801199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119a0:	f113 0f08 	cmn.w	r3, #8
 80119a4:	d115      	bne.n	80119d2 <run_shortest+0xe92>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 80119a6:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80119aa:	9302      	str	r3, [sp, #8]
 80119ac:	2300      	movs	r3, #0
 80119ae:	9301      	str	r3, [sp, #4]
 80119b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80119ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119bc:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80119c0:	f7fb fa72 	bl	800cea8 <turn45inR>
			pass_count++;
 80119c4:	4b60      	ldr	r3, [pc, #384]	; (8011b48 <run_shortest+0x1008>)
 80119c6:	881b      	ldrh	r3, [r3, #0]
 80119c8:	3301      	adds	r3, #1
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	4b5e      	ldr	r3, [pc, #376]	; (8011b48 <run_shortest+0x1008>)
 80119ce:	801a      	strh	r2, [r3, #0]
 80119d0:	e256      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -9) { //入り45L
 80119d2:	4b5d      	ldr	r3, [pc, #372]	; (8011b48 <run_shortest+0x1008>)
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	4b5c      	ldr	r3, [pc, #368]	; (8011b4c <run_shortest+0x100c>)
 80119da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119de:	f113 0f09 	cmn.w	r3, #9
 80119e2:	d115      	bne.n	8011a10 <run_shortest+0xed0>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 80119e4:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80119e8:	9302      	str	r3, [sp, #8]
 80119ea:	2300      	movs	r3, #0
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80119f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119fa:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80119fe:	f7fb fc9b 	bl	800d338 <turn45inL>
			pass_count++;
 8011a02:	4b51      	ldr	r3, [pc, #324]	; (8011b48 <run_shortest+0x1008>)
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	3301      	adds	r3, #1
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	4b4f      	ldr	r3, [pc, #316]	; (8011b48 <run_shortest+0x1008>)
 8011a0c:	801a      	strh	r2, [r3, #0]
 8011a0e:	e237      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -10) { //入り135R
 8011a10:	4b4d      	ldr	r3, [pc, #308]	; (8011b48 <run_shortest+0x1008>)
 8011a12:	881b      	ldrh	r3, [r3, #0]
 8011a14:	461a      	mov	r2, r3
 8011a16:	4b4d      	ldr	r3, [pc, #308]	; (8011b4c <run_shortest+0x100c>)
 8011a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1c:	f113 0f0a 	cmn.w	r3, #10
 8011a20:	d115      	bne.n	8011a4e <run_shortest+0xf0e>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 8011a22:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011a26:	9302      	str	r3, [sp, #8]
 8011a28:	2300      	movs	r3, #0
 8011a2a:	9301      	str	r3, [sp, #4]
 8011a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a38:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011a3c:	f7fb febc 	bl	800d7b8 <turn135inR>
			pass_count++;
 8011a40:	4b41      	ldr	r3, [pc, #260]	; (8011b48 <run_shortest+0x1008>)
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	4b3f      	ldr	r3, [pc, #252]	; (8011b48 <run_shortest+0x1008>)
 8011a4a:	801a      	strh	r2, [r3, #0]
 8011a4c:	e218      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -11) { //入り135L
 8011a4e:	4b3e      	ldr	r3, [pc, #248]	; (8011b48 <run_shortest+0x1008>)
 8011a50:	881b      	ldrh	r3, [r3, #0]
 8011a52:	461a      	mov	r2, r3
 8011a54:	4b3d      	ldr	r3, [pc, #244]	; (8011b4c <run_shortest+0x100c>)
 8011a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5a:	f113 0f0b 	cmn.w	r3, #11
 8011a5e:	d115      	bne.n	8011a8c <run_shortest+0xf4c>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 8011a60:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011a64:	9302      	str	r3, [sp, #8]
 8011a66:	2300      	movs	r3, #0
 8011a68:	9301      	str	r3, [sp, #4]
 8011a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011a76:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011a7a:	f7fc f8e5 	bl	800dc48 <turn135inL>
			pass_count++;
 8011a7e:	4b32      	ldr	r3, [pc, #200]	; (8011b48 <run_shortest+0x1008>)
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	3301      	adds	r3, #1
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	4b30      	ldr	r3, [pc, #192]	; (8011b48 <run_shortest+0x1008>)
 8011a88:	801a      	strh	r2, [r3, #0]
 8011a8a:	e1f9      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8011a8c:	4b2e      	ldr	r3, [pc, #184]	; (8011b48 <run_shortest+0x1008>)
 8011a8e:	881b      	ldrh	r3, [r3, #0]
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b2e      	ldr	r3, [pc, #184]	; (8011b4c <run_shortest+0x100c>)
 8011a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a98:	f113 0f0c 	cmn.w	r3, #12
 8011a9c:	d115      	bne.n	8011aca <run_shortest+0xf8a>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 8011a9e:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011aa2:	9302      	str	r3, [sp, #8]
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8011ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ab4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011ab8:	f7fc fb0a 	bl	800e0d0 <turn45outR>
			pass_count++;
 8011abc:	4b22      	ldr	r3, [pc, #136]	; (8011b48 <run_shortest+0x1008>)
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	4b20      	ldr	r3, [pc, #128]	; (8011b48 <run_shortest+0x1008>)
 8011ac6:	801a      	strh	r2, [r3, #0]
 8011ac8:	e1da      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8011aca:	4b1f      	ldr	r3, [pc, #124]	; (8011b48 <run_shortest+0x1008>)
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4b1e      	ldr	r3, [pc, #120]	; (8011b4c <run_shortest+0x100c>)
 8011ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad6:	f113 0f0d 	cmn.w	r3, #13
 8011ada:	d115      	bne.n	8011b08 <run_shortest+0xfc8>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8011adc:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011ae0:	9302      	str	r3, [sp, #8]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011af2:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011af6:	f7fc fcdd 	bl	800e4b4 <turn45outL>
			pass_count++;
 8011afa:	4b13      	ldr	r3, [pc, #76]	; (8011b48 <run_shortest+0x1008>)
 8011afc:	881b      	ldrh	r3, [r3, #0]
 8011afe:	3301      	adds	r3, #1
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <run_shortest+0x1008>)
 8011b04:	801a      	strh	r2, [r3, #0]
 8011b06:	e1bb      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -14) { //出り135R
 8011b08:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <run_shortest+0x1008>)
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <run_shortest+0x100c>)
 8011b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b14:	f113 0f0e 	cmn.w	r3, #14
 8011b18:	d11a      	bne.n	8011b50 <run_shortest+0x1010>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 8011b1a:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011b1e:	9302      	str	r3, [sp, #8]
 8011b20:	2300      	movs	r3, #0
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8011b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011b30:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011b34:	f7fc fea6 	bl	800e884 <turn135outR>
			pass_count++;
 8011b38:	4b03      	ldr	r3, [pc, #12]	; (8011b48 <run_shortest+0x1008>)
 8011b3a:	881b      	ldrh	r3, [r3, #0]
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	4b01      	ldr	r3, [pc, #4]	; (8011b48 <run_shortest+0x1008>)
 8011b42:	801a      	strh	r2, [r3, #0]
 8011b44:	e19c      	b.n	8011e80 <run_shortest+0x1340>
 8011b46:	bf00      	nop
 8011b48:	20000834 	.word	0x20000834
 8011b4c:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -15) { //出り135L
 8011b50:	4bb5      	ldr	r3, [pc, #724]	; (8011e28 <run_shortest+0x12e8>)
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	4bb5      	ldr	r3, [pc, #724]	; (8011e2c <run_shortest+0x12ec>)
 8011b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b5c:	f113 0f0f 	cmn.w	r3, #15
 8011b60:	d115      	bne.n	8011b8e <run_shortest+0x104e>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 8011b62:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011b66:	9302      	str	r3, [sp, #8]
 8011b68:	2300      	movs	r3, #0
 8011b6a:	9301      	str	r3, [sp, #4]
 8011b6c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011b78:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011b7c:	f7fd f874 	bl	800ec68 <turn135outL>
			pass_count++;
 8011b80:	4ba9      	ldr	r3, [pc, #676]	; (8011e28 <run_shortest+0x12e8>)
 8011b82:	881b      	ldrh	r3, [r3, #0]
 8011b84:	3301      	adds	r3, #1
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	4ba7      	ldr	r3, [pc, #668]	; (8011e28 <run_shortest+0x12e8>)
 8011b8a:	801a      	strh	r2, [r3, #0]
 8011b8c:	e178      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -16) { //V90R
 8011b8e:	4ba6      	ldr	r3, [pc, #664]	; (8011e28 <run_shortest+0x12e8>)
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	461a      	mov	r2, r3
 8011b94:	4ba5      	ldr	r3, [pc, #660]	; (8011e2c <run_shortest+0x12ec>)
 8011b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b9a:	f113 0f10 	cmn.w	r3, #16
 8011b9e:	d115      	bne.n	8011bcc <run_shortest+0x108c>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 8011ba0:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011ba4:	9302      	str	r3, [sp, #8]
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9301      	str	r3, [sp, #4]
 8011baa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8011bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011bb6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011bba:	f7fd fa41 	bl	800f040 <V90R>
			pass_count++;
 8011bbe:	4b9a      	ldr	r3, [pc, #616]	; (8011e28 <run_shortest+0x12e8>)
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	4b98      	ldr	r3, [pc, #608]	; (8011e28 <run_shortest+0x12e8>)
 8011bc8:	801a      	strh	r2, [r3, #0]
 8011bca:	e159      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] == -17) { //V90L
 8011bcc:	4b96      	ldr	r3, [pc, #600]	; (8011e28 <run_shortest+0x12e8>)
 8011bce:	881b      	ldrh	r3, [r3, #0]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	4b96      	ldr	r3, [pc, #600]	; (8011e2c <run_shortest+0x12ec>)
 8011bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd8:	f113 0f11 	cmn.w	r3, #17
 8011bdc:	d115      	bne.n	8011c0a <run_shortest+0x10ca>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8011bde:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8011be2:	9302      	str	r3, [sp, #8]
 8011be4:	2300      	movs	r3, #0
 8011be6:	9301      	str	r3, [sp, #4]
 8011be8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8011bec:	9300      	str	r3, [sp, #0]
 8011bee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8011bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011bf4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8011bf8:	f7fd fc2e 	bl	800f458 <V90L>
			pass_count++;
 8011bfc:	4b8a      	ldr	r3, [pc, #552]	; (8011e28 <run_shortest+0x12e8>)
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	3301      	adds	r3, #1
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	4b88      	ldr	r3, [pc, #544]	; (8011e28 <run_shortest+0x12e8>)
 8011c06:	801a      	strh	r2, [r3, #0]
 8011c08:	e13a      	b.n	8011e80 <run_shortest+0x1340>
		}
		else if (pass[pass_count] >= 1) {
 8011c0a:	4b87      	ldr	r3, [pc, #540]	; (8011e28 <run_shortest+0x12e8>)
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	461a      	mov	r2, r3
 8011c10:	4b86      	ldr	r3, [pc, #536]	; (8011e2c <run_shortest+0x12ec>)
 8011c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f340 8132 	ble.w	8011e80 <run_shortest+0x1340>
			first_v = howspeed.TurnCentervelocity;
 8011c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
			last_v = howspeed.TurnCentervelocity;
 8011c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c22:	623b      	str	r3, [r7, #32]
			if (pass_count >= 1) {
 8011c24:	4b80      	ldr	r3, [pc, #512]	; (8011e28 <run_shortest+0x12e8>)
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d013      	beq.n	8011c54 <run_shortest+0x1114>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8011c2c:	4b7e      	ldr	r3, [pc, #504]	; (8011e28 <run_shortest+0x12e8>)
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	3b01      	subs	r3, #1
 8011c32:	4a7e      	ldr	r2, [pc, #504]	; (8011e2c <run_shortest+0x12ec>)
 8011c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c38:	f113 0f02 	cmn.w	r3, #2
 8011c3c:	d008      	beq.n	8011c50 <run_shortest+0x1110>
 8011c3e:	4b7a      	ldr	r3, [pc, #488]	; (8011e28 <run_shortest+0x12e8>)
 8011c40:	881b      	ldrh	r3, [r3, #0]
 8011c42:	3b01      	subs	r3, #1
 8011c44:	4a79      	ldr	r2, [pc, #484]	; (8011e2c <run_shortest+0x12ec>)
 8011c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c4a:	f113 0f03 	cmn.w	r3, #3
 8011c4e:	d101      	bne.n	8011c54 <run_shortest+0x1114>
					first_v = howspeed.SlalomCentervelocity;
 8011c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c52:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8011c54:	4b74      	ldr	r3, [pc, #464]	; (8011e28 <run_shortest+0x12e8>)
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	4a74      	ldr	r2, [pc, #464]	; (8011e2c <run_shortest+0x12ec>)
 8011c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c60:	f113 0f02 	cmn.w	r3, #2
 8011c64:	d008      	beq.n	8011c78 <run_shortest+0x1138>
 8011c66:	4b70      	ldr	r3, [pc, #448]	; (8011e28 <run_shortest+0x12e8>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	4a6f      	ldr	r2, [pc, #444]	; (8011e2c <run_shortest+0x12ec>)
 8011c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c72:	f113 0f03 	cmn.w	r3, #3
 8011c76:	d101      	bne.n	8011c7c <run_shortest+0x113c>
				last_v = howspeed.SlalomCentervelocity;
 8011c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c7a:	623b      	str	r3, [r7, #32]
			}
			if (pass[pass_count] >= 50) {
 8011c7c:	4b6a      	ldr	r3, [pc, #424]	; (8011e28 <run_shortest+0x12e8>)
 8011c7e:	881b      	ldrh	r3, [r3, #0]
 8011c80:	461a      	mov	r2, r3
 8011c82:	4b6a      	ldr	r3, [pc, #424]	; (8011e2c <run_shortest+0x12ec>)
 8011c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c88:	2b31      	cmp	r3, #49	; 0x31
 8011c8a:	f340 8081 	ble.w	8011d90 <run_shortest+0x1250>
				mode.WallControlMode=3;
 8011c8e:	2303      	movs	r3, #3
 8011c90:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	777b      	strb	r3, [r7, #29]
				if(max_mode==0){
 8011c96:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d123      	bne.n	8011ce6 <run_shortest+0x11a6>
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8011c9e:	4b62      	ldr	r3, [pc, #392]	; (8011e28 <run_shortest+0x12e8>)
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4b61      	ldr	r3, [pc, #388]	; (8011e2c <run_shortest+0x12ec>)
 8011ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011caa:	3b32      	subs	r3, #50	; 0x32
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7ee fc61 	bl	8000574 <__aeabi_i2d>
 8011cb2:	a35b      	add	r3, pc, #364	; (adr r3, 8011e20 <run_shortest+0x12e0>)
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	f7ee fcc6 	bl	8000648 <__aeabi_dmul>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	4610      	mov	r0, r2
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	f7ee ff98 	bl	8000bf8 <__aeabi_d2f>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	69f8      	ldr	r0, [r7, #28]
 8011ccc:	ed97 2a04 	vldr	s4, [r7, #16]
 8011cd0:	edd7 1a05 	vldr	s3, [r7, #20]
 8011cd4:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011cd8:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011cdc:	ee00 3a10 	vmov	s0, r3
 8011ce0:	f7f2 fb9a 	bl	8004418 <straight_table2>
 8011ce4:	e0c6      	b.n	8011e74 <run_shortest+0x1334>
				}else if(max_mode==1){
 8011ce6:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d125      	bne.n	8011d3a <run_shortest+0x11fa>
				straight_table_dis((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc,indec, mode);
 8011cee:	4b4e      	ldr	r3, [pc, #312]	; (8011e28 <run_shortest+0x12e8>)
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	4b4d      	ldr	r3, [pc, #308]	; (8011e2c <run_shortest+0x12ec>)
 8011cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cfa:	3b32      	subs	r3, #50	; 0x32
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7ee fc39 	bl	8000574 <__aeabi_i2d>
 8011d02:	a347      	add	r3, pc, #284	; (adr r3, 8011e20 <run_shortest+0x12e0>)
 8011d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d08:	f7ee fc9e 	bl	8000648 <__aeabi_dmul>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	460b      	mov	r3, r1
 8011d10:	4610      	mov	r0, r2
 8011d12:	4619      	mov	r1, r3
 8011d14:	f7ee ff70 	bl	8000bf8 <__aeabi_d2f>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	69f8      	ldr	r0, [r7, #28]
 8011d1c:	edd7 2a03 	vldr	s5, [r7, #12]
 8011d20:	ed97 2a04 	vldr	s4, [r7, #16]
 8011d24:	edd7 1a05 	vldr	s3, [r7, #20]
 8011d28:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011d2c:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011d30:	ee00 3a10 	vmov	s0, r3
 8011d34:	f7f2 f8f0 	bl	8003f18 <straight_table_dis>
 8011d38:	e09c      	b.n	8011e74 <run_shortest+0x1334>
				}else if(max_mode==2){
 8011d3a:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	f040 8098 	bne.w	8011e74 <run_shortest+0x1334>
				straight_table_max((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc,indec, mode);
 8011d44:	4b38      	ldr	r3, [pc, #224]	; (8011e28 <run_shortest+0x12e8>)
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	4b38      	ldr	r3, [pc, #224]	; (8011e2c <run_shortest+0x12ec>)
 8011d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d50:	3b32      	subs	r3, #50	; 0x32
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7ee fc0e 	bl	8000574 <__aeabi_i2d>
 8011d58:	a331      	add	r3, pc, #196	; (adr r3, 8011e20 <run_shortest+0x12e0>)
 8011d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5e:	f7ee fc73 	bl	8000648 <__aeabi_dmul>
 8011d62:	4602      	mov	r2, r0
 8011d64:	460b      	mov	r3, r1
 8011d66:	4610      	mov	r0, r2
 8011d68:	4619      	mov	r1, r3
 8011d6a:	f7ee ff45 	bl	8000bf8 <__aeabi_d2f>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	69f8      	ldr	r0, [r7, #28]
 8011d72:	edd7 2a03 	vldr	s5, [r7, #12]
 8011d76:	ed97 2a04 	vldr	s4, [r7, #16]
 8011d7a:	edd7 1a05 	vldr	s3, [r7, #20]
 8011d7e:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011d82:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011d86:	ee00 3a10 	vmov	s0, r3
 8011d8a:	f7f2 fa05 	bl	8004198 <straight_table_max>
 8011d8e:	e071      	b.n	8011e74 <run_shortest+0x1334>
				}
			} else {
				mode.WallControlMode=1;
 8011d90:	2301      	movs	r3, #1
 8011d92:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8011d94:	2300      	movs	r3, #0
 8011d96:	777b      	strb	r3, [r7, #29]
				if(max_mode==0){
 8011d98:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d11c      	bne.n	8011dda <run_shortest+0x129a>
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8011da0:	4b21      	ldr	r3, [pc, #132]	; (8011e28 <run_shortest+0x12e8>)
 8011da2:	881b      	ldrh	r3, [r3, #0]
 8011da4:	461a      	mov	r2, r3
 8011da6:	4b21      	ldr	r3, [pc, #132]	; (8011e2c <run_shortest+0x12ec>)
 8011da8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011dac:	4613      	mov	r3, r2
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	4413      	add	r3, r2
 8011db2:	011a      	lsls	r2, r3, #4
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	ee07 3a90 	vmov	s15, r3
 8011dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dbe:	69f8      	ldr	r0, [r7, #28]
 8011dc0:	ed97 2a04 	vldr	s4, [r7, #16]
 8011dc4:	edd7 1a05 	vldr	s3, [r7, #20]
 8011dc8:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011dcc:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8011dd4:	f7f2 fb20 	bl	8004418 <straight_table2>
 8011dd8:	e04c      	b.n	8011e74 <run_shortest+0x1334>
				}else if(max_mode==1){
 8011dda:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d126      	bne.n	8011e30 <run_shortest+0x12f0>
				straight_table_dis((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc,indec, mode);
 8011de2:	4b11      	ldr	r3, [pc, #68]	; (8011e28 <run_shortest+0x12e8>)
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	461a      	mov	r2, r3
 8011de8:	4b10      	ldr	r3, [pc, #64]	; (8011e2c <run_shortest+0x12ec>)
 8011dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011dee:	4613      	mov	r3, r2
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	4413      	add	r3, r2
 8011df4:	011a      	lsls	r2, r3, #4
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	ee07 3a90 	vmov	s15, r3
 8011dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e00:	69f8      	ldr	r0, [r7, #28]
 8011e02:	edd7 2a03 	vldr	s5, [r7, #12]
 8011e06:	ed97 2a04 	vldr	s4, [r7, #16]
 8011e0a:	edd7 1a05 	vldr	s3, [r7, #20]
 8011e0e:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011e12:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011e16:	eeb0 0a67 	vmov.f32	s0, s15
 8011e1a:	f7f2 f87d 	bl	8003f18 <straight_table_dis>
 8011e1e:	e029      	b.n	8011e74 <run_shortest+0x1334>
 8011e20:	c022ec18 	.word	0xc022ec18
 8011e24:	404fd1de 	.word	0x404fd1de
 8011e28:	20000834 	.word	0x20000834
 8011e2c:	2000083c 	.word	0x2000083c
				}else if(max_mode==2){
 8011e30:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	d11d      	bne.n	8011e74 <run_shortest+0x1334>
				straight_table_max((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc,indec, mode);
 8011e38:	4b4e      	ldr	r3, [pc, #312]	; (8011f74 <run_shortest+0x1434>)
 8011e3a:	881b      	ldrh	r3, [r3, #0]
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4b4e      	ldr	r3, [pc, #312]	; (8011f78 <run_shortest+0x1438>)
 8011e40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011e44:	4613      	mov	r3, r2
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	4413      	add	r3, r2
 8011e4a:	011a      	lsls	r2, r3, #4
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	ee07 3a90 	vmov	s15, r3
 8011e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e56:	69f8      	ldr	r0, [r7, #28]
 8011e58:	edd7 2a03 	vldr	s5, [r7, #12]
 8011e5c:	ed97 2a04 	vldr	s4, [r7, #16]
 8011e60:	edd7 1a05 	vldr	s3, [r7, #20]
 8011e64:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8011e68:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8011e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8011e70:	f7f2 f992 	bl	8004198 <straight_table_max>
				}
			}

			pass_count++;
 8011e74:	4b3f      	ldr	r3, [pc, #252]	; (8011f74 <run_shortest+0x1434>)
 8011e76:	881b      	ldrh	r3, [r3, #0]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	4b3d      	ldr	r3, [pc, #244]	; (8011f74 <run_shortest+0x1434>)
 8011e7e:	801a      	strh	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8011e80:	4b3c      	ldr	r3, [pc, #240]	; (8011f74 <run_shortest+0x1434>)
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	461a      	mov	r2, r3
 8011e86:	4b3c      	ldr	r3, [pc, #240]	; (8011f78 <run_shortest+0x1438>)
 8011e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d006      	beq.n	8011e9e <run_shortest+0x135e>
	while (pass_count <= 500) {
 8011e90:	4b38      	ldr	r3, [pc, #224]	; (8011f74 <run_shortest+0x1434>)
 8011e92:	881b      	ldrh	r3, [r3, #0]
 8011e94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011e98:	f67f ac78 	bls.w	801178c <run_shortest+0xc4c>
 8011e9c:	e000      	b.n	8011ea0 <run_shortest+0x1360>
			break;
 8011e9e:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	773b      	strb	r3, [r7, #28]
		mode.WallControlStatus=0;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	777b      	strb	r3, [r7, #29]
		straight_table2(MAZE_SECTION,end_velocity, 0,inspeed, inacc, mode);
 8011ea8:	69f8      	ldr	r0, [r7, #28]
 8011eaa:	ed97 2a04 	vldr	s4, [r7, #16]
 8011eae:	edd7 1a05 	vldr	s3, [r7, #20]
 8011eb2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8011f7c <run_shortest+0x143c>
 8011eb6:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8011eba:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8011f80 <run_shortest+0x1440>
 8011ebe:	f7f2 faab 	bl	8004418 <straight_table2>
		wait_ms_NoReset(700);
 8011ec2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8011ec6:	f7f7 fa8f 	bl	80093e8 <wait_ms_NoReset>
		pl_FunMotor_stop();
 8011eca:	f7f6 fff1 	bl	8008eb0 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8011ece:	4b2d      	ldr	r3, [pc, #180]	; (8011f84 <run_shortest+0x1444>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8011ed4:	4b2c      	ldr	r3, [pc, #176]	; (8011f88 <run_shortest+0x1448>)
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8011eda:	4b2c      	ldr	r3, [pc, #176]	; (8011f8c <run_shortest+0x144c>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	f7f6 ff51 	bl	8008d88 <pl_DriveMotor_standby>
	int t = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	627b      	str	r3, [r7, #36]	; 0x24

	while (t <= 14) {
 8011eea:	e016      	b.n	8011f1a <run_shortest+0x13da>
		wall.row[t] = record.row[t];
 8011eec:	4a28      	ldr	r2, [pc, #160]	; (8011f90 <run_shortest+0x1450>)
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011ef4:	4927      	ldr	r1, [pc, #156]	; (8011f94 <run_shortest+0x1454>)
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8011efc:	4a24      	ldr	r2, [pc, #144]	; (8011f90 <run_shortest+0x1450>)
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	330e      	adds	r3, #14
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	4413      	add	r3, r2
 8011f06:	685a      	ldr	r2, [r3, #4]
 8011f08:	4922      	ldr	r1, [pc, #136]	; (8011f94 <run_shortest+0x1454>)
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	330e      	adds	r3, #14
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	440b      	add	r3, r1
 8011f12:	605a      	str	r2, [r3, #4]
		t++;
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	3301      	adds	r3, #1
 8011f18:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8011f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1c:	2b0e      	cmp	r3, #14
 8011f1e:	dde5      	ble.n	8011eec <run_shortest+0x13ac>
	}
	t = 0;
 8011f20:	2300      	movs	r3, #0
 8011f22:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8011f24:	e01a      	b.n	8011f5c <run_shortest+0x141c>
		wall.row_look[t] = ~wall.row_look[t];
 8011f26:	4a1b      	ldr	r2, [pc, #108]	; (8011f94 <run_shortest+0x1454>)
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	331e      	adds	r3, #30
 8011f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f30:	43da      	mvns	r2, r3
 8011f32:	4918      	ldr	r1, [pc, #96]	; (8011f94 <run_shortest+0x1454>)
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	331e      	adds	r3, #30
 8011f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = ~wall.column_look[t];
 8011f3c:	4a15      	ldr	r2, [pc, #84]	; (8011f94 <run_shortest+0x1454>)
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	332c      	adds	r3, #44	; 0x2c
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	4413      	add	r3, r2
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	43da      	mvns	r2, r3
 8011f4a:	4912      	ldr	r1, [pc, #72]	; (8011f94 <run_shortest+0x1454>)
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	332c      	adds	r3, #44	; 0x2c
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	440b      	add	r3, r1
 8011f54:	605a      	str	r2, [r3, #4]
		t++;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	3301      	adds	r3, #1
 8011f5a:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	2b0e      	cmp	r3, #14
 8011f60:	dde1      	ble.n	8011f26 <run_shortest+0x13e6>
	}

}
 8011f62:	bf00      	nop
 8011f64:	bf00      	nop
 8011f66:	3748      	adds	r7, #72	; 0x48
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f6e:	b002      	add	sp, #8
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	20000834 	.word	0x20000834
 8011f78:	2000083c 	.word	0x2000083c
 8011f7c:	00000000 	.word	0x00000000
 8011f80:	42b40000 	.word	0x42b40000
 8011f84:	20000836 	.word	0x20000836
 8011f88:	20000814 	.word	0x20000814
 8011f8c:	2000f284 	.word	0x2000f284
 8011f90:	20001100 	.word	0x20001100
 8011f94:	20001010 	.word	0x20001010

08011f98 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b08a      	sub	sp, #40	; 0x28
 8011f9c:	af02      	add	r7, sp, #8
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8011faa:	2301      	movs	r3, #1
 8011fac:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8011fba:	f107 0114 	add.w	r1, r7, #20
 8011fbe:	f107 0318 	add.w	r3, r7, #24
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fd fdff 	bl	800fbc8 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8011fca:	69b8      	ldr	r0, [r7, #24]
 8011fcc:	6979      	ldr	r1, [r7, #20]
 8011fce:	f107 021e 	add.w	r2, r7, #30
 8011fd2:	f107 031c 	add.w	r3, r7, #28
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	f107 031d 	add.w	r3, r7, #29
 8011fdc:	9300      	str	r3, [sp, #0]
 8011fde:	4613      	mov	r3, r2
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	f000 fe9d 	bl	8012d20 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8011fe6:	7fbb      	ldrb	r3, [r7, #30]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d007      	beq.n	8011ffc <decision_kitiku+0x64>
 8011fec:	7f7b      	ldrb	r3, [r7, #29]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d004      	beq.n	8011ffc <decision_kitiku+0x64>
 8011ff2:	7f3b      	ldrb	r3, [r7, #28]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d001      	beq.n	8011ffc <decision_kitiku+0x64>
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e000      	b.n	8011ffe <decision_kitiku+0x66>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	77fb      	strb	r3, [r7, #31]
 8012000:	7ffb      	ldrb	r3, [r7, #31]
 8012002:	f003 0301 	and.w	r3, r3, #1
 8012006:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8012008:	7ffb      	ldrb	r3, [r7, #31]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d02b      	beq.n	8012066 <decision_kitiku+0xce>
 801200e:	887a      	ldrh	r2, [r7, #2]
 8012010:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012012:	429a      	cmp	r2, r3
 8012014:	d827      	bhi.n	8012066 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8012016:	887a      	ldrh	r2, [r7, #2]
 8012018:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801201a:	429a      	cmp	r2, r3
 801201c:	d823      	bhi.n	8012066 <decision_kitiku+0xce>
 801201e:	887a      	ldrh	r2, [r7, #2]
 8012020:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012022:	429a      	cmp	r2, r3
 8012024:	d81f      	bhi.n	8012066 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d102      	bne.n	8012032 <decision_kitiku+0x9a>
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	2b0d      	cmp	r3, #13
 8012030:	dc11      	bgt.n	8012056 <decision_kitiku+0xbe>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b02      	cmp	r3, #2
 8012036:	d102      	bne.n	801203e <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2b0d      	cmp	r3, #13
 801203c:	dc0b      	bgt.n	8012056 <decision_kitiku+0xbe>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2b03      	cmp	r3, #3
 8012042:	d102      	bne.n	801204a <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2b01      	cmp	r3, #1
 8012048:	dd05      	ble.n	8012056 <decision_kitiku+0xbe>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b04      	cmp	r3, #4
 801204e:	d106      	bne.n	801205e <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2b01      	cmp	r3, #1
 8012054:	dc03      	bgt.n	801205e <decision_kitiku+0xc6>
			kitikukan = 0;
 8012056:	4b08      	ldr	r3, [pc, #32]	; (8012078 <decision_kitiku+0xe0>)
 8012058:	2200      	movs	r2, #0
 801205a:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 801205c:	e007      	b.n	801206e <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 801205e:	4b06      	ldr	r3, [pc, #24]	; (8012078 <decision_kitiku+0xe0>)
 8012060:	2201      	movs	r2, #1
 8012062:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8012064:	e003      	b.n	801206e <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8012066:	4b04      	ldr	r3, [pc, #16]	; (8012078 <decision_kitiku+0xe0>)
 8012068:	2200      	movs	r2, #0
 801206a:	601a      	str	r2, [r3, #0]
	}


}
 801206c:	bf00      	nop
 801206e:	bf00      	nop
 8012070:	3720      	adds	r7, #32
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20000838 	.word	0x20000838

0801207c <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction,int *kitiku_distance) {
 801207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207e:	b09b      	sub	sp, #108	; 0x6c
 8012080:	af04      	add	r7, sp, #16
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	607a      	str	r2, [r7, #4]
 8012088:	603b      	str	r3, [r7, #0]
	*kitiku_distance = 1;
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	2201      	movs	r2, #1
 801208e:	601a      	str	r2, [r3, #0]
	int kitiku = 1;
 8012090:	2301      	movs	r3, #1
 8012092:	647b      	str	r3, [r7, #68]	; 0x44
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	63bb      	str	r3, [r7, #56]	; 0x38
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	637b      	str	r3, [r7, #52]	; 0x34
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80120a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80120aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80120ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fd fd89 	bl	800fbc8 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	633b      	str	r3, [r7, #48]	; 0x30
 80120ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	627b      	str	r3, [r7, #36]	; 0x24
 80120c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c8:	623b      	str	r3, [r7, #32]
 80120ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120cc:	61fb      	str	r3, [r7, #28]

		update_coordinate(&x_front,&y_front,direction_now);
 80120ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80120d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80120d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fd fd75 	bl	800fbc8 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 80120de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80120e6:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80120f0:	9300      	str	r3, [sp, #0]
 80120f2:	4613      	mov	r3, r2
 80120f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120f6:	f000 fe13 	bl	8012d20 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 80120fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d009      	beq.n	8012116 <compress_kitiku+0x9a>
 8012102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012106:	2b00      	cmp	r3, #0
 8012108:	d005      	beq.n	8012116 <compress_kitiku+0x9a>
 801210a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801210e:	2b00      	cmp	r3, #0
 8012110:	d001      	beq.n	8012116 <compress_kitiku+0x9a>
 8012112:	2301      	movs	r3, #1
 8012114:	e000      	b.n	8012118 <compress_kitiku+0x9c>
 8012116:	2300      	movs	r3, #0
 8012118:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801211c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012120:	f003 0301 	and.w	r3, r3, #1
 8012124:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8012128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801212a:	2b04      	cmp	r3, #4
 801212c:	d102      	bne.n	8012134 <compress_kitiku+0xb8>
 801212e:	2301      	movs	r3, #1
 8012130:	653b      	str	r3, [r7, #80]	; 0x50
 8012132:	e002      	b.n	801213a <compress_kitiku+0xbe>
 8012134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012136:	3301      	adds	r3, #1
 8012138:	653b      	str	r3, [r7, #80]	; 0x50
		update_coordinate(&x_right,&y_right,direction_right);
 801213a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801213e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012144:	4618      	mov	r0, r3
 8012146:	f7fd fd3f 	bl	800fbc8 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 801214a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801214c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801214e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012152:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8012156:	9301      	str	r3, [sp, #4]
 8012158:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	4613      	mov	r3, r2
 8012160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012162:	f000 fddd 	bl	8012d20 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8012166:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801216a:	2b00      	cmp	r3, #0
 801216c:	d009      	beq.n	8012182 <compress_kitiku+0x106>
 801216e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012172:	2b00      	cmp	r3, #0
 8012174:	d005      	beq.n	8012182 <compress_kitiku+0x106>
 8012176:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <compress_kitiku+0x106>
 801217e:	2301      	movs	r3, #1
 8012180:	e000      	b.n	8012184 <compress_kitiku+0x108>
 8012182:	2300      	movs	r3, #0
 8012184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012188:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801218c:	f003 0301 	and.w	r3, r3, #1
 8012190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8012194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012196:	2b01      	cmp	r3, #1
 8012198:	d102      	bne.n	80121a0 <compress_kitiku+0x124>
 801219a:	2304      	movs	r3, #4
 801219c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801219e:	e002      	b.n	80121a6 <compress_kitiku+0x12a>
 80121a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121a2:	3b01      	subs	r3, #1
 80121a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		update_coordinate(&x_left,&y_left,direction_left);
 80121a6:	f107 011c 	add.w	r1, r7, #28
 80121aa:	f107 0320 	add.w	r3, r7, #32
 80121ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fd fd09 	bl	800fbc8 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 80121b6:	6a38      	ldr	r0, [r7, #32]
 80121b8:	69f9      	ldr	r1, [r7, #28]
 80121ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80121be:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80121c2:	9301      	str	r3, [sp, #4]
 80121c4:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	4613      	mov	r3, r2
 80121cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121ce:	f000 fda7 	bl	8012d20 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 80121d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <compress_kitiku+0x172>
 80121da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d005      	beq.n	80121ee <compress_kitiku+0x172>
 80121e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d001      	beq.n	80121ee <compress_kitiku+0x172>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e000      	b.n	80121f0 <compress_kitiku+0x174>
 80121ee:	2300      	movs	r3, #0
 80121f0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80121f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80121f8:	f003 0301 	and.w	r3, r3, #1
 80121fc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8012200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012202:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012204:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012208:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 801220c:	9301      	str	r3, [sp, #4]
 801220e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	4613      	mov	r3, r2
 8012216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012218:	f000 fc26 	bl	8012a68 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 801221c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012220:	f107 0614 	add.w	r6, r7, #20
 8012224:	f107 0516 	add.w	r5, r7, #22
 8012228:	f107 0418 	add.w	r4, r7, #24
 801222c:	f107 001a 	add.w	r0, r7, #26
 8012230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012232:	9102      	str	r1, [sp, #8]
 8012234:	9201      	str	r2, [sp, #4]
 8012236:	9300      	str	r3, [sp, #0]
 8012238:	4633      	mov	r3, r6
 801223a:	462a      	mov	r2, r5
 801223c:	4621      	mov	r1, r4
 801223e:	f000 fed1 	bl	8012fe4 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8012242:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <compress_kitiku+0x1d2>
 801224a:	23ff      	movs	r3, #255	; 0xff
 801224c:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 801224e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012252:	2b00      	cmp	r3, #0
 8012254:	d001      	beq.n	801225a <compress_kitiku+0x1de>
 8012256:	23ff      	movs	r3, #255	; 0xff
 8012258:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 801225a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <compress_kitiku+0x1ea>
 8012262:	23ff      	movs	r3, #255	; 0xff
 8012264:	82bb      	strh	r3, [r7, #20]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 8012266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226a:	496c      	ldr	r1, [pc, #432]	; (801241c <compress_kitiku+0x3a0>)
 801226c:	0112      	lsls	r2, r2, #4
 801226e:	4413      	add	r3, r2
 8012270:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012274:	2b01      	cmp	r3, #1
 8012276:	f240 8099 	bls.w	80123ac <compress_kitiku+0x330>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 801227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801227c:	2b01      	cmp	r3, #1
 801227e:	d103      	bne.n	8012288 <compress_kitiku+0x20c>
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	2b0d      	cmp	r3, #13
 8012284:	f300 8094 	bgt.w	80123b0 <compress_kitiku+0x334>
		if (direction_now==2 && x_now>=14) {break;}
 8012288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801228a:	2b02      	cmp	r3, #2
 801228c:	d103      	bne.n	8012296 <compress_kitiku+0x21a>
 801228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012290:	2b0d      	cmp	r3, #13
 8012292:	f300 808f 	bgt.w	80123b4 <compress_kitiku+0x338>
		if (direction_now==3 && y_now<=1) {break;}
 8012296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012298:	2b03      	cmp	r3, #3
 801229a:	d103      	bne.n	80122a4 <compress_kitiku+0x228>
 801229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229e:	2b01      	cmp	r3, #1
 80122a0:	f340 808a 	ble.w	80123b8 <compress_kitiku+0x33c>
		if (direction_now==4 && x_now<=1) {break;}
 80122a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d103      	bne.n	80122b2 <compress_kitiku+0x236>
 80122aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	f340 8085 	ble.w	80123bc <compress_kitiku+0x340>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80122b2:	8b7b      	ldrh	r3, [r7, #26]
 80122b4:	2bff      	cmp	r3, #255	; 0xff
 80122b6:	d10c      	bne.n	80122d2 <compress_kitiku+0x256>
 80122b8:	8b3b      	ldrh	r3, [r7, #24]
 80122ba:	2bff      	cmp	r3, #255	; 0xff
 80122bc:	d109      	bne.n	80122d2 <compress_kitiku+0x256>
 80122be:	8abb      	ldrh	r3, [r7, #20]
 80122c0:	2bff      	cmp	r3, #255	; 0xff
 80122c2:	d106      	bne.n	80122d2 <compress_kitiku+0x256>
 80122c4:	8afb      	ldrh	r3, [r7, #22]
 80122c6:	2bff      	cmp	r3, #255	; 0xff
 80122c8:	d103      	bne.n	80122d2 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 80122ca:	4b55      	ldr	r3, [pc, #340]	; (8012420 <compress_kitiku+0x3a4>)
 80122cc:	2201      	movs	r2, #1
 80122ce:	701a      	strb	r2, [r3, #0]
		break;
 80122d0:	e077      	b.n	80123c2 <compress_kitiku+0x346>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80122d2:	8b7a      	ldrh	r2, [r7, #26]
 80122d4:	8b3b      	ldrh	r3, [r7, #24]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d814      	bhi.n	8012304 <compress_kitiku+0x288>
 80122da:	8b7a      	ldrh	r2, [r7, #26]
 80122dc:	8abb      	ldrh	r3, [r7, #20]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d810      	bhi.n	8012304 <compress_kitiku+0x288>
 80122e2:	8b7a      	ldrh	r2, [r7, #26]
 80122e4:	8afb      	ldrh	r3, [r7, #22]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d80c      	bhi.n	8012304 <compress_kitiku+0x288>
		// 直進
			if(look_f){
 80122ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d005      	beq.n	80122fe <compress_kitiku+0x282>
				*kitiku_distance += 2;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	1c9a      	adds	r2, r3, #2
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	601a      	str	r2, [r3, #0]
 80122fc:	e002      	b.n	8012304 <compress_kitiku+0x288>
			}else{
				kitiku = 0;
 80122fe:	2300      	movs	r3, #0
 8012300:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8012302:	e05e      	b.n	80123c2 <compress_kitiku+0x346>
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8012304:	8b3a      	ldrh	r2, [r7, #24]
 8012306:	8b7b      	ldrh	r3, [r7, #26]
 8012308:	429a      	cmp	r2, r3
 801230a:	d211      	bcs.n	8012330 <compress_kitiku+0x2b4>
 801230c:	8b3a      	ldrh	r2, [r7, #24]
 801230e:	8abb      	ldrh	r3, [r7, #20]
 8012310:	429a      	cmp	r2, r3
 8012312:	d80d      	bhi.n	8012330 <compress_kitiku+0x2b4>
 8012314:	8b3a      	ldrh	r2, [r7, #24]
 8012316:	8afb      	ldrh	r3, [r7, #22]
 8012318:	429a      	cmp	r2, r3
 801231a:	d809      	bhi.n	8012330 <compress_kitiku+0x2b4>
		// 右旋回
			if(look_r){
 801231c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <compress_kitiku+0x2ae>
				kitiku = 0;
 8012324:	2300      	movs	r3, #0
 8012326:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8012328:	e04b      	b.n	80123c2 <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801232e:	e048      	b.n	80123c2 <compress_kitiku+0x346>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8012330:	8aba      	ldrh	r2, [r7, #20]
 8012332:	8b7b      	ldrh	r3, [r7, #26]
 8012334:	429a      	cmp	r2, r3
 8012336:	d211      	bcs.n	801235c <compress_kitiku+0x2e0>
 8012338:	8aba      	ldrh	r2, [r7, #20]
 801233a:	8b3b      	ldrh	r3, [r7, #24]
 801233c:	429a      	cmp	r2, r3
 801233e:	d20d      	bcs.n	801235c <compress_kitiku+0x2e0>
 8012340:	8aba      	ldrh	r2, [r7, #20]
 8012342:	8afb      	ldrh	r3, [r7, #22]
 8012344:	429a      	cmp	r2, r3
 8012346:	d809      	bhi.n	801235c <compress_kitiku+0x2e0>
		// 左旋回
			if(look_l){
 8012348:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 801234c:	2b00      	cmp	r3, #0
 801234e:	d002      	beq.n	8012356 <compress_kitiku+0x2da>
				kitiku = 0;
 8012350:	2300      	movs	r3, #0
 8012352:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8012354:	e035      	b.n	80123c2 <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 8012356:	2300      	movs	r3, #0
 8012358:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801235a:	e032      	b.n	80123c2 <compress_kitiku+0x346>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 801235c:	8afa      	ldrh	r2, [r7, #22]
 801235e:	8b7b      	ldrh	r3, [r7, #26]
 8012360:	429a      	cmp	r2, r3
 8012362:	d20a      	bcs.n	801237a <compress_kitiku+0x2fe>
 8012364:	8afa      	ldrh	r2, [r7, #22]
 8012366:	8b3b      	ldrh	r3, [r7, #24]
 8012368:	429a      	cmp	r2, r3
 801236a:	d206      	bcs.n	801237a <compress_kitiku+0x2fe>
								&& back_count < left_count){
 801236c:	8afa      	ldrh	r2, [r7, #22]
 801236e:	8abb      	ldrh	r3, [r7, #20]
 8012370:	429a      	cmp	r2, r3
 8012372:	d202      	bcs.n	801237a <compress_kitiku+0x2fe>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8012378:	e023      	b.n	80123c2 <compress_kitiku+0x346>
			direction_now+=2;
		}


		if (direction_now == 5) {
 801237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801237c:	2b05      	cmp	r3, #5
 801237e:	d101      	bne.n	8012384 <compress_kitiku+0x308>
			direction_now = 1;
 8012380:	2301      	movs	r3, #1
 8012382:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 6) {
 8012384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012386:	2b06      	cmp	r3, #6
 8012388:	d101      	bne.n	801238e <compress_kitiku+0x312>
			direction_now = 2;
 801238a:	2302      	movs	r3, #2
 801238c:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 0) {
 801238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012390:	2b00      	cmp	r3, #0
 8012392:	d101      	bne.n	8012398 <compress_kitiku+0x31c>
			direction_now = 4;
 8012394:	2304      	movs	r3, #4
 8012396:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == -1) {
 8012398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801239e:	d101      	bne.n	80123a4 <compress_kitiku+0x328>
			direction_now = 3;
 80123a0:	2303      	movs	r3, #3
 80123a2:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (kitiku == 0) {
 80123a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00a      	beq.n	80123c0 <compress_kitiku+0x344>
		update_coordinate(&x_now,&y_now,direction_now);
 80123aa:	e67c      	b.n	80120a6 <compress_kitiku+0x2a>
			break;
 80123ac:	bf00      	nop
 80123ae:	e008      	b.n	80123c2 <compress_kitiku+0x346>
		if (direction_now==1 && y_now>=14) {break;}
 80123b0:	bf00      	nop
 80123b2:	e006      	b.n	80123c2 <compress_kitiku+0x346>
		if (direction_now==2 && x_now>=14) {break;}
 80123b4:	bf00      	nop
 80123b6:	e004      	b.n	80123c2 <compress_kitiku+0x346>
		if (direction_now==3 && y_now<=1) {break;}
 80123b8:	bf00      	nop
 80123ba:	e002      	b.n	80123c2 <compress_kitiku+0x346>
		if (direction_now==4 && x_now<=1) {break;}
 80123bc:	bf00      	nop
 80123be:	e000      	b.n	80123c2 <compress_kitiku+0x346>

			break;
 80123c0:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80123c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c4:	3302      	adds	r3, #2
 80123c6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (direction2 == 5) {
 80123c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ca:	2b05      	cmp	r3, #5
 80123cc:	d101      	bne.n	80123d2 <compress_kitiku+0x356>
				direction2 = 1;
 80123ce:	2301      	movs	r3, #1
 80123d0:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 6) {
 80123d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123d4:	2b06      	cmp	r3, #6
 80123d6:	d101      	bne.n	80123dc <compress_kitiku+0x360>
				direction2 = 2;
 80123d8:	2302      	movs	r3, #2
 80123da:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 0) {
 80123dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d101      	bne.n	80123e6 <compress_kitiku+0x36a>
				direction2 = 4;
 80123e2:	2304      	movs	r3, #4
 80123e4:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == -1) {
 80123e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ec:	d101      	bne.n	80123f2 <compress_kitiku+0x376>
				direction2 = 3;
 80123ee:	2303      	movs	r3, #3
 80123f0:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	update_coordinate(&x_now,&y_now,direction2);
 80123f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80123f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80123fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fd fbe3 	bl	800fbc8 <update_coordinate>

	*x=x_now;
 8012402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8012408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012412:	601a      	str	r2, [r3, #0]

}
 8012414:	bf00      	nop
 8012416:	375c      	adds	r7, #92	; 0x5c
 8012418:	46bd      	mov	sp, r7
 801241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801241c:	200011f4 	.word	0x200011f4
 8012420:	20000813 	.word	0x20000813

08012424 <maze_out_matlab>:
uint16_t walk_count[16][16]; //歩数いれる箱
DIJKSTRA Dijkstra;
STACK_T g_Goal_x;
STACK_T g_Goal_y;

void maze_out_matlab(void){
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0

	int tt=0;
 801242a:	2300      	movs	r3, #0
 801242c:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 801242e:	e018      	b.n	8012462 <maze_out_matlab+0x3e>
		printf("g_maze_row(%d) = %d;\n",tt+1,wall.row[tt]);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	1c59      	adds	r1, r3, #1
 8012434:	4a0f      	ldr	r2, [pc, #60]	; (8012474 <maze_out_matlab+0x50>)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801243c:	461a      	mov	r2, r3
 801243e:	480e      	ldr	r0, [pc, #56]	; (8012478 <maze_out_matlab+0x54>)
 8012440:	f010 fa4a 	bl	80228d8 <iprintf>
		printf("g_maze_column(%d) = %d;\n",tt+1,wall.column[tt]);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	1c59      	adds	r1, r3, #1
 8012448:	4a0a      	ldr	r2, [pc, #40]	; (8012474 <maze_out_matlab+0x50>)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	330e      	adds	r3, #14
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	4413      	add	r3, r2
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	461a      	mov	r2, r3
 8012456:	4809      	ldr	r0, [pc, #36]	; (801247c <maze_out_matlab+0x58>)
 8012458:	f010 fa3e 	bl	80228d8 <iprintf>
		tt++;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3301      	adds	r3, #1
 8012460:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b0e      	cmp	r3, #14
 8012466:	dde3      	ble.n	8012430 <maze_out_matlab+0xc>
	}
	tt = 0;
 8012468:	2300      	movs	r3, #0
 801246a:	607b      	str	r3, [r7, #4]

}
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	20001010 	.word	0x20001010
 8012478:	08026354 	.word	0x08026354
 801247c:	0802636c 	.word	0x0802636c

08012480 <maze_clear>:



void maze_clear(void) { //初期化
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0

	Dijkstra_maker_flag=0;
 8012486:	4b6b      	ldr	r3, [pc, #428]	; (8012634 <maze_clear+0x1b4>)
 8012488:	2200      	movs	r2, #0
 801248a:	701a      	strb	r2, [r3, #0]
	int tt = 0;
 801248c:	2300      	movs	r3, #0
 801248e:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 8012490:	e01b      	b.n	80124ca <maze_clear+0x4a>
		wall.row[tt] = 0;
 8012492:	4a69      	ldr	r2, [pc, #420]	; (8012638 <maze_clear+0x1b8>)
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2100      	movs	r1, #0
 8012498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[tt] = 0;
 801249c:	4a66      	ldr	r2, [pc, #408]	; (8012638 <maze_clear+0x1b8>)
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	330e      	adds	r3, #14
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	4413      	add	r3, r2
 80124a6:	2200      	movs	r2, #0
 80124a8:	605a      	str	r2, [r3, #4]
		wall.row_look[tt] = 0;
 80124aa:	4a63      	ldr	r2, [pc, #396]	; (8012638 <maze_clear+0x1b8>)
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	331e      	adds	r3, #30
 80124b0:	2100      	movs	r1, #0
 80124b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[tt] = 0;
 80124b6:	4a60      	ldr	r2, [pc, #384]	; (8012638 <maze_clear+0x1b8>)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	332c      	adds	r3, #44	; 0x2c
 80124bc:	009b      	lsls	r3, r3, #2
 80124be:	4413      	add	r3, r2
 80124c0:	2200      	movs	r2, #0
 80124c2:	605a      	str	r2, [r3, #4]
		tt++;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	3301      	adds	r3, #1
 80124c8:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2b0e      	cmp	r3, #14
 80124ce:	dde0      	ble.n	8012492 <maze_clear+0x12>
	}
	tt = 0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	60fb      	str	r3, [r7, #12]
//	wall.row[0]=0;wall.row[1]=2;wall.row[2]=32762;wall.row[3]=50;wall.row[4]=16320;wall.row[5]=423;wall.row[6]=105;wall.row[7]=32490;
//	wall.row[8]=469;wall.row[9]=533;wall.row[10]=1258;wall.row[11]=3182;wall.row[12]=7837;wall.row[13]=13818;wall.row[14]=57342;
//	wall.column[0] = 20499;wall.column[1] = 8301;wall.column[2] = 61;wall.column[3] = 50;wall.column[4] = 6261;wall.column[5] = 10130;wall.column[6] = 4117;wall.column[7] = 3149;
//	wall.column[8] = 16085;wall.column[9] = 365;wall.column[10] = 725;wall.column[11] = 9837;wall.column[12] = 2773;wall.column[13] = 23149;wall.column[14] = 16381;
	    wall.column[0] = 0b0000011000011011;
 80124d4:	4b58      	ldr	r3, [pc, #352]	; (8012638 <maze_clear+0x1b8>)
 80124d6:	f240 621b 	movw	r2, #1563	; 0x61b
 80124da:	63da      	str	r2, [r3, #60]	; 0x3c
	    wall.column[1] = 0b0000000011001000;
 80124dc:	4b56      	ldr	r3, [pc, #344]	; (8012638 <maze_clear+0x1b8>)
 80124de:	22c8      	movs	r2, #200	; 0xc8
 80124e0:	641a      	str	r2, [r3, #64]	; 0x40
	    wall.column[2] = 0b0000000110000100;
 80124e2:	4b55      	ldr	r3, [pc, #340]	; (8012638 <maze_clear+0x1b8>)
 80124e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80124e8:	645a      	str	r2, [r3, #68]	; 0x44
	    wall.column[3] = 0b0000011110110000;
 80124ea:	4b53      	ldr	r3, [pc, #332]	; (8012638 <maze_clear+0x1b8>)
 80124ec:	f44f 62f6 	mov.w	r2, #1968	; 0x7b0
 80124f0:	649a      	str	r2, [r3, #72]	; 0x48
	    wall.column[4] = 0b0000100100011000;
 80124f2:	4b51      	ldr	r3, [pc, #324]	; (8012638 <maze_clear+0x1b8>)
 80124f4:	f640 1218 	movw	r2, #2328	; 0x918
 80124f8:	64da      	str	r2, [r3, #76]	; 0x4c
	    wall.column[5] = 0b0000000000000000;
 80124fa:	4b4f      	ldr	r3, [pc, #316]	; (8012638 <maze_clear+0x1b8>)
 80124fc:	2200      	movs	r2, #0
 80124fe:	651a      	str	r2, [r3, #80]	; 0x50
	    wall.column[6] = 0b0000000101000000;
 8012500:	4b4d      	ldr	r3, [pc, #308]	; (8012638 <maze_clear+0x1b8>)
 8012502:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8012506:	655a      	str	r2, [r3, #84]	; 0x54
	    wall.column[7] = 0b0011101111111110;
 8012508:	4b4b      	ldr	r3, [pc, #300]	; (8012638 <maze_clear+0x1b8>)
 801250a:	f643 32fe 	movw	r2, #15358	; 0x3bfe
 801250e:	659a      	str	r2, [r3, #88]	; 0x58
	    wall.column[8] = 0b0011111001011100;
 8012510:	4b49      	ldr	r3, [pc, #292]	; (8012638 <maze_clear+0x1b8>)
 8012512:	f643 625c 	movw	r2, #15964	; 0x3e5c
 8012516:	65da      	str	r2, [r3, #92]	; 0x5c
	    wall.column[9] = 0b0000000000000000;
 8012518:	4b47      	ldr	r3, [pc, #284]	; (8012638 <maze_clear+0x1b8>)
 801251a:	2200      	movs	r2, #0
 801251c:	661a      	str	r2, [r3, #96]	; 0x60
	    wall.column[10] = 0b0000110110000000;
 801251e:	4b46      	ldr	r3, [pc, #280]	; (8012638 <maze_clear+0x1b8>)
 8012520:	f44f 6258 	mov.w	r2, #3456	; 0xd80
 8012524:	665a      	str	r2, [r3, #100]	; 0x64
	    wall.column[11] = 0b0000001001000100;
 8012526:	4b44      	ldr	r3, [pc, #272]	; (8012638 <maze_clear+0x1b8>)
 8012528:	f44f 7211 	mov.w	r2, #580	; 0x244
 801252c:	669a      	str	r2, [r3, #104]	; 0x68
	    wall.column[12] = 0b0110111001101010;
 801252e:	4b42      	ldr	r3, [pc, #264]	; (8012638 <maze_clear+0x1b8>)
 8012530:	f646 626a 	movw	r2, #28266	; 0x6e6a
 8012534:	66da      	str	r2, [r3, #108]	; 0x6c
	    wall.column[13] = 0b0011111111010100;
 8012536:	4b40      	ldr	r3, [pc, #256]	; (8012638 <maze_clear+0x1b8>)
 8012538:	f643 72d4 	movw	r2, #16340	; 0x3fd4
 801253c:	671a      	str	r2, [r3, #112]	; 0x70
	    wall.column[14] = 0b0111011010101000;
 801253e:	4b3e      	ldr	r3, [pc, #248]	; (8012638 <maze_clear+0x1b8>)
 8012540:	f247 62a8 	movw	r2, #30376	; 0x76a8
 8012544:	675a      	str	r2, [r3, #116]	; 0x74
	    wall.row[14] = 0b0110000000000000;
 8012546:	4b3c      	ldr	r3, [pc, #240]	; (8012638 <maze_clear+0x1b8>)
 8012548:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 801254c:	639a      	str	r2, [r3, #56]	; 0x38
	    wall.row[13] = 0b0000000100000000;
 801254e:	4b3a      	ldr	r3, [pc, #232]	; (8012638 <maze_clear+0x1b8>)
 8012550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012554:	635a      	str	r2, [r3, #52]	; 0x34
	    wall.row[12] = 0b0000000000000000;
 8012556:	4b38      	ldr	r3, [pc, #224]	; (8012638 <maze_clear+0x1b8>)
 8012558:	2200      	movs	r2, #0
 801255a:	631a      	str	r2, [r3, #48]	; 0x30
	    wall.row[11] = 0b0000100000000110;
 801255c:	4b36      	ldr	r3, [pc, #216]	; (8012638 <maze_clear+0x1b8>)
 801255e:	f640 0206 	movw	r2, #2054	; 0x806
 8012562:	62da      	str	r2, [r3, #44]	; 0x2c
	    wall.row[10] = 0b0000000011101110;
 8012564:	4b34      	ldr	r3, [pc, #208]	; (8012638 <maze_clear+0x1b8>)
 8012566:	22ee      	movs	r2, #238	; 0xee
 8012568:	629a      	str	r2, [r3, #40]	; 0x28
	    wall.row[9] = 0b0000000011110000;
 801256a:	4b33      	ldr	r3, [pc, #204]	; (8012638 <maze_clear+0x1b8>)
 801256c:	22f0      	movs	r2, #240	; 0xf0
 801256e:	625a      	str	r2, [r3, #36]	; 0x24
	    wall.row[8] = 0b0001011001100110;
 8012570:	4b31      	ldr	r3, [pc, #196]	; (8012638 <maze_clear+0x1b8>)
 8012572:	f241 6266 	movw	r2, #5734	; 0x1666
 8012576:	621a      	str	r2, [r3, #32]
	    wall.row[7] = 0b0011001100000010;
 8012578:	4b2f      	ldr	r3, [pc, #188]	; (8012638 <maze_clear+0x1b8>)
 801257a:	f243 3202 	movw	r2, #13058	; 0x3302
 801257e:	61da      	str	r2, [r3, #28]
	    wall.row[6] = 0b1011011000001000;
 8012580:	4b2d      	ldr	r3, [pc, #180]	; (8012638 <maze_clear+0x1b8>)
 8012582:	f24b 6208 	movw	r2, #46600	; 0xb608
 8012586:	619a      	str	r2, [r3, #24]
	    wall.row[5] = 0b0100111001111000;
 8012588:	4b2b      	ldr	r3, [pc, #172]	; (8012638 <maze_clear+0x1b8>)
 801258a:	f644 6278 	movw	r2, #20088	; 0x4e78
 801258e:	615a      	str	r2, [r3, #20]
	    wall.row[4] = 0b0101111001100001;
 8012590:	4b29      	ldr	r3, [pc, #164]	; (8012638 <maze_clear+0x1b8>)
 8012592:	f645 6261 	movw	r2, #24161	; 0x5e61
 8012596:	611a      	str	r2, [r3, #16]
	    wall.row[3] = 0b0010000000001100;
 8012598:	4b27      	ldr	r3, [pc, #156]	; (8012638 <maze_clear+0x1b8>)
 801259a:	f242 020c 	movw	r2, #8204	; 0x200c
 801259e:	60da      	str	r2, [r3, #12]
	    wall.row[2] = 0b0101000000011010;
 80125a0:	4b25      	ldr	r3, [pc, #148]	; (8012638 <maze_clear+0x1b8>)
 80125a2:	f245 021a 	movw	r2, #20506	; 0x501a
 80125a6:	609a      	str	r2, [r3, #8]
	    wall.row[1] = 0b0010011000000010;
 80125a8:	4b23      	ldr	r3, [pc, #140]	; (8012638 <maze_clear+0x1b8>)
 80125aa:	f242 6202 	movw	r2, #9730	; 0x2602
 80125ae:	605a      	str	r2, [r3, #4]
	    wall.row[0] = 0b0001101100000000;
 80125b0:	4b21      	ldr	r3, [pc, #132]	; (8012638 <maze_clear+0x1b8>)
 80125b2:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 80125b6:	601a      	str	r2, [r3, #0]


	for(int i=0;i<=15;i++){
 80125b8:	2300      	movs	r3, #0
 80125ba:	60bb      	str	r3, [r7, #8]
 80125bc:	e022      	b.n	8012604 <maze_clear+0x184>
		for(int j=0;j<=14;j++){
 80125be:	2300      	movs	r3, #0
 80125c0:	607b      	str	r3, [r7, #4]
 80125c2:	e019      	b.n	80125f8 <maze_clear+0x178>
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80125c4:	491d      	ldr	r1, [pc, #116]	; (801263c <maze_clear+0x1bc>)
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	4613      	mov	r3, r2
 80125ca:	011b      	lsls	r3, r3, #4
 80125cc:	1a9b      	subs	r3, r3, r2
 80125ce:	687a      	ldr	r2, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	33f0      	adds	r3, #240	; 0xf0
 80125d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80125dc:	4917      	ldr	r1, [pc, #92]	; (801263c <maze_clear+0x1bc>)
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	4613      	mov	r3, r2
 80125e2:	011b      	lsls	r3, r3, #4
 80125e4:	1a9b      	subs	r3, r3, r2
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	4413      	add	r3, r2
 80125ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3301      	adds	r3, #1
 80125f6:	607b      	str	r3, [r7, #4]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b0e      	cmp	r3, #14
 80125fc:	dde2      	ble.n	80125c4 <maze_clear+0x144>
	for(int i=0;i<=15;i++){
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	3301      	adds	r3, #1
 8012602:	60bb      	str	r3, [r7, #8]
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2b0f      	cmp	r3, #15
 8012608:	ddd9      	ble.n	80125be <maze_clear+0x13e>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 801260a:	4b0c      	ldr	r3, [pc, #48]	; (801263c <maze_clear+0x1bc>)
 801260c:	2200      	movs	r2, #0
 801260e:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 8012610:	4b0a      	ldr	r3, [pc, #40]	; (801263c <maze_clear+0x1bc>)
 8012612:	2200      	movs	r2, #0
 8012614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 8012618:	4b08      	ldr	r3, [pc, #32]	; (801263c <maze_clear+0x1bc>)
 801261a:	2200      	movs	r2, #0
 801261c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 8012620:	4b06      	ldr	r3, [pc, #24]	; (801263c <maze_clear+0x1bc>)
 8012622:	2200      	movs	r2, #0
 8012624:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202


//ここから歩数マップの初期状態を作る．
create_StepCountMap_queue();
 8012628:	f003 fb24 	bl	8015c74 <create_StepCountMap_queue>

//kokomade

}
 801262c:	bf00      	nop
 801262e:	3710      	adds	r7, #16
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	200011f0 	.word	0x200011f0
 8012638:	20001010 	.word	0x20001010
 801263c:	200013f4 	.word	0x200013f4

08012640 <update_wall>:



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	607a      	str	r2, [r7, #4]
 801264c:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3b01      	subs	r3, #1
 8012652:	2b03      	cmp	r3, #3
 8012654:	f200 81ff 	bhi.w	8012a56 <update_wall+0x416>
 8012658:	a201      	add	r2, pc, #4	; (adr r2, 8012660 <update_wall+0x20>)
 801265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801265e:	bf00      	nop
 8012660:	08012671 	.word	0x08012671
 8012664:	08012767 	.word	0x08012767
 8012668:	08012855 	.word	0x08012855
 801266c:	08012957 	.word	0x08012957
	case 1:
		if (y <= 14) {
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2b0e      	cmp	r3, #14
 8012674:	dc1e      	bgt.n	80126b4 <update_wall+0x74>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8012676:	4a76      	ldr	r2, [pc, #472]	; (8012850 <update_wall+0x210>)
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	331e      	adds	r3, #30
 801267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012680:	2101      	movs	r1, #1
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	fa01 f202 	lsl.w	r2, r1, r2
 8012688:	431a      	orrs	r2, r3
 801268a:	4971      	ldr	r1, [pc, #452]	; (8012850 <update_wall+0x210>)
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	331e      	adds	r3, #30
 8012690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8012694:	78fb      	ldrb	r3, [r7, #3]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00c      	beq.n	80126b4 <update_wall+0x74>
 801269a:	4a6d      	ldr	r2, [pc, #436]	; (8012850 <update_wall+0x210>)
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126a2:	2101      	movs	r1, #1
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	fa01 f202 	lsl.w	r2, r1, r2
 80126aa:	431a      	orrs	r2, r3
 80126ac:	4968      	ldr	r1, [pc, #416]	; (8012850 <update_wall+0x210>)
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x >= 1) {
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	dd2a      	ble.n	8012710 <update_wall+0xd0>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	3b01      	subs	r3, #1
 80126be:	4a64      	ldr	r2, [pc, #400]	; (8012850 <update_wall+0x210>)
 80126c0:	332c      	adds	r3, #44	; 0x2c
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	4413      	add	r3, r2
 80126c6:	685a      	ldr	r2, [r3, #4]
 80126c8:	2101      	movs	r1, #1
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	fa01 f303 	lsl.w	r3, r1, r3
 80126d0:	4619      	mov	r1, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	430a      	orrs	r2, r1
 80126d8:	495d      	ldr	r1, [pc, #372]	; (8012850 <update_wall+0x210>)
 80126da:	332c      	adds	r3, #44	; 0x2c
 80126dc:	009b      	lsls	r3, r3, #2
 80126de:	440b      	add	r3, r1
 80126e0:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 80126e2:	7f3b      	ldrb	r3, [r7, #28]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d013      	beq.n	8012710 <update_wall+0xd0>
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	3b01      	subs	r3, #1
 80126ec:	4a58      	ldr	r2, [pc, #352]	; (8012850 <update_wall+0x210>)
 80126ee:	330e      	adds	r3, #14
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	4413      	add	r3, r2
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	2101      	movs	r1, #1
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	fa01 f303 	lsl.w	r3, r1, r3
 80126fe:	4619      	mov	r1, r3
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	3b01      	subs	r3, #1
 8012704:	430a      	orrs	r2, r1
 8012706:	4952      	ldr	r1, [pc, #328]	; (8012850 <update_wall+0x210>)
 8012708:	330e      	adds	r3, #14
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	440b      	add	r3, r1
 801270e:	605a      	str	r2, [r3, #4]
		}

		if (x <= 14) {
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b0e      	cmp	r3, #14
 8012714:	f300 8198 	bgt.w	8012a48 <update_wall+0x408>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8012718:	4a4d      	ldr	r2, [pc, #308]	; (8012850 <update_wall+0x210>)
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	332c      	adds	r3, #44	; 0x2c
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	4413      	add	r3, r2
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	2101      	movs	r1, #1
 8012726:	68ba      	ldr	r2, [r7, #8]
 8012728:	fa01 f202 	lsl.w	r2, r1, r2
 801272c:	431a      	orrs	r2, r3
 801272e:	4948      	ldr	r1, [pc, #288]	; (8012850 <update_wall+0x210>)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	332c      	adds	r3, #44	; 0x2c
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	440b      	add	r3, r1
 8012738:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x] = wall.column[x] | (1 << y);}
 801273a:	7e3b      	ldrb	r3, [r7, #24]
 801273c:	2b00      	cmp	r3, #0
 801273e:	f000 8183 	beq.w	8012a48 <update_wall+0x408>
 8012742:	4a43      	ldr	r2, [pc, #268]	; (8012850 <update_wall+0x210>)
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	330e      	adds	r3, #14
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4413      	add	r3, r2
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	2101      	movs	r1, #1
 8012750:	68ba      	ldr	r2, [r7, #8]
 8012752:	fa01 f202 	lsl.w	r2, r1, r2
 8012756:	431a      	orrs	r2, r3
 8012758:	493d      	ldr	r1, [pc, #244]	; (8012850 <update_wall+0x210>)
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	330e      	adds	r3, #14
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	440b      	add	r3, r1
 8012762:	605a      	str	r2, [r3, #4]
		}

		break;
 8012764:	e170      	b.n	8012a48 <update_wall+0x408>
	case 2:
		if (x <= 14) {
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2b0e      	cmp	r3, #14
 801276a:	dc24      	bgt.n	80127b6 <update_wall+0x176>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 801276c:	4a38      	ldr	r2, [pc, #224]	; (8012850 <update_wall+0x210>)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	332c      	adds	r3, #44	; 0x2c
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	4413      	add	r3, r2
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	2101      	movs	r1, #1
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	fa01 f202 	lsl.w	r2, r1, r2
 8012780:	431a      	orrs	r2, r3
 8012782:	4933      	ldr	r1, [pc, #204]	; (8012850 <update_wall+0x210>)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	332c      	adds	r3, #44	; 0x2c
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	440b      	add	r3, r1
 801278c:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x] = wall.column[x] | (1 << y);}
 801278e:	78fb      	ldrb	r3, [r7, #3]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d010      	beq.n	80127b6 <update_wall+0x176>
 8012794:	4a2e      	ldr	r2, [pc, #184]	; (8012850 <update_wall+0x210>)
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	330e      	adds	r3, #14
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	4413      	add	r3, r2
 801279e:	685b      	ldr	r3, [r3, #4]
 80127a0:	2101      	movs	r1, #1
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	fa01 f202 	lsl.w	r2, r1, r2
 80127a8:	431a      	orrs	r2, r3
 80127aa:	4929      	ldr	r1, [pc, #164]	; (8012850 <update_wall+0x210>)
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	330e      	adds	r3, #14
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	440b      	add	r3, r1
 80127b4:	605a      	str	r2, [r3, #4]
		}

		if (y <= 14) {
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	2b0e      	cmp	r3, #14
 80127ba:	dc1e      	bgt.n	80127fa <update_wall+0x1ba>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 80127bc:	4a24      	ldr	r2, [pc, #144]	; (8012850 <update_wall+0x210>)
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	331e      	adds	r3, #30
 80127c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127c6:	2101      	movs	r1, #1
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	fa01 f202 	lsl.w	r2, r1, r2
 80127ce:	431a      	orrs	r2, r3
 80127d0:	491f      	ldr	r1, [pc, #124]	; (8012850 <update_wall+0x210>)
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	331e      	adds	r3, #30
 80127d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y] = wall.row[y] | (1 << x);}
 80127da:	7f3b      	ldrb	r3, [r7, #28]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d00c      	beq.n	80127fa <update_wall+0x1ba>
 80127e0:	4a1b      	ldr	r2, [pc, #108]	; (8012850 <update_wall+0x210>)
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127e8:	2101      	movs	r1, #1
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	fa01 f202 	lsl.w	r2, r1, r2
 80127f0:	431a      	orrs	r2, r3
 80127f2:	4917      	ldr	r1, [pc, #92]	; (8012850 <update_wall+0x210>)
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y >= 1) {
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f340 8125 	ble.w	8012a4c <update_wall+0x40c>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	3b01      	subs	r3, #1
 8012806:	4a12      	ldr	r2, [pc, #72]	; (8012850 <update_wall+0x210>)
 8012808:	331e      	adds	r3, #30
 801280a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801280e:	2101      	movs	r1, #1
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	fa01 f303 	lsl.w	r3, r1, r3
 8012816:	4619      	mov	r1, r3
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	3b01      	subs	r3, #1
 801281c:	430a      	orrs	r2, r1
 801281e:	490c      	ldr	r1, [pc, #48]	; (8012850 <update_wall+0x210>)
 8012820:	331e      	adds	r3, #30
 8012822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 8012826:	7e3b      	ldrb	r3, [r7, #24]
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 810f 	beq.w	8012a4c <update_wall+0x40c>
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	3b01      	subs	r3, #1
 8012832:	4a07      	ldr	r2, [pc, #28]	; (8012850 <update_wall+0x210>)
 8012834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012838:	2101      	movs	r1, #1
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	fa01 f303 	lsl.w	r3, r1, r3
 8012840:	4619      	mov	r1, r3
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	3b01      	subs	r3, #1
 8012846:	430a      	orrs	r2, r1
 8012848:	4901      	ldr	r1, [pc, #4]	; (8012850 <update_wall+0x210>)
 801284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 801284e:	e0fd      	b.n	8012a4c <update_wall+0x40c>
 8012850:	20001010 	.word	0x20001010
	case 3:
		if (y >= 1) {
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2b00      	cmp	r3, #0
 8012858:	dd24      	ble.n	80128a4 <update_wall+0x264>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	3b01      	subs	r3, #1
 801285e:	4a81      	ldr	r2, [pc, #516]	; (8012a64 <update_wall+0x424>)
 8012860:	331e      	adds	r3, #30
 8012862:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012866:	2101      	movs	r1, #1
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	fa01 f303 	lsl.w	r3, r1, r3
 801286e:	4619      	mov	r1, r3
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	3b01      	subs	r3, #1
 8012874:	430a      	orrs	r2, r1
 8012876:	497b      	ldr	r1, [pc, #492]	; (8012a64 <update_wall+0x424>)
 8012878:	331e      	adds	r3, #30
 801287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 801287e:	78fb      	ldrb	r3, [r7, #3]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00f      	beq.n	80128a4 <update_wall+0x264>
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	3b01      	subs	r3, #1
 8012888:	4a76      	ldr	r2, [pc, #472]	; (8012a64 <update_wall+0x424>)
 801288a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801288e:	2101      	movs	r1, #1
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	fa01 f303 	lsl.w	r3, r1, r3
 8012896:	4619      	mov	r1, r3
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	3b01      	subs	r3, #1
 801289c:	430a      	orrs	r2, r1
 801289e:	4971      	ldr	r1, [pc, #452]	; (8012a64 <update_wall+0x424>)
 80128a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x <= 14) {
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2b0e      	cmp	r3, #14
 80128a8:	dc24      	bgt.n	80128f4 <update_wall+0x2b4>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 80128aa:	4a6e      	ldr	r2, [pc, #440]	; (8012a64 <update_wall+0x424>)
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	332c      	adds	r3, #44	; 0x2c
 80128b0:	009b      	lsls	r3, r3, #2
 80128b2:	4413      	add	r3, r2
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	2101      	movs	r1, #1
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	fa01 f202 	lsl.w	r2, r1, r2
 80128be:	431a      	orrs	r2, r3
 80128c0:	4968      	ldr	r1, [pc, #416]	; (8012a64 <update_wall+0x424>)
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	332c      	adds	r3, #44	; 0x2c
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	440b      	add	r3, r1
 80128ca:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x] = wall.column[x] | (1 << y);}
 80128cc:	7f3b      	ldrb	r3, [r7, #28]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d010      	beq.n	80128f4 <update_wall+0x2b4>
 80128d2:	4a64      	ldr	r2, [pc, #400]	; (8012a64 <update_wall+0x424>)
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	330e      	adds	r3, #14
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	2101      	movs	r1, #1
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	fa01 f202 	lsl.w	r2, r1, r2
 80128e6:	431a      	orrs	r2, r3
 80128e8:	495e      	ldr	r1, [pc, #376]	; (8012a64 <update_wall+0x424>)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	330e      	adds	r3, #14
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	440b      	add	r3, r1
 80128f2:	605a      	str	r2, [r3, #4]
		}

		if (x >= 1) {
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f340 80aa 	ble.w	8012a50 <update_wall+0x410>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3b01      	subs	r3, #1
 8012900:	4a58      	ldr	r2, [pc, #352]	; (8012a64 <update_wall+0x424>)
 8012902:	332c      	adds	r3, #44	; 0x2c
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	4413      	add	r3, r2
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	2101      	movs	r1, #1
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	fa01 f303 	lsl.w	r3, r1, r3
 8012912:	4619      	mov	r1, r3
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	3b01      	subs	r3, #1
 8012918:	430a      	orrs	r2, r1
 801291a:	4952      	ldr	r1, [pc, #328]	; (8012a64 <update_wall+0x424>)
 801291c:	332c      	adds	r3, #44	; 0x2c
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	440b      	add	r3, r1
 8012922:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 8012924:	7e3b      	ldrb	r3, [r7, #24]
 8012926:	2b00      	cmp	r3, #0
 8012928:	f000 8092 	beq.w	8012a50 <update_wall+0x410>
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	3b01      	subs	r3, #1
 8012930:	4a4c      	ldr	r2, [pc, #304]	; (8012a64 <update_wall+0x424>)
 8012932:	330e      	adds	r3, #14
 8012934:	009b      	lsls	r3, r3, #2
 8012936:	4413      	add	r3, r2
 8012938:	685a      	ldr	r2, [r3, #4]
 801293a:	2101      	movs	r1, #1
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	fa01 f303 	lsl.w	r3, r1, r3
 8012942:	4619      	mov	r1, r3
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	3b01      	subs	r3, #1
 8012948:	430a      	orrs	r2, r1
 801294a:	4946      	ldr	r1, [pc, #280]	; (8012a64 <update_wall+0x424>)
 801294c:	330e      	adds	r3, #14
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	440b      	add	r3, r1
 8012952:	605a      	str	r2, [r3, #4]
		}

		break;
 8012954:	e07c      	b.n	8012a50 <update_wall+0x410>
	case 4:
		if (x >= 1) {
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2b00      	cmp	r3, #0
 801295a:	dd2a      	ble.n	80129b2 <update_wall+0x372>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	3b01      	subs	r3, #1
 8012960:	4a40      	ldr	r2, [pc, #256]	; (8012a64 <update_wall+0x424>)
 8012962:	332c      	adds	r3, #44	; 0x2c
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	4413      	add	r3, r2
 8012968:	685a      	ldr	r2, [r3, #4]
 801296a:	2101      	movs	r1, #1
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	fa01 f303 	lsl.w	r3, r1, r3
 8012972:	4619      	mov	r1, r3
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3b01      	subs	r3, #1
 8012978:	430a      	orrs	r2, r1
 801297a:	493a      	ldr	r1, [pc, #232]	; (8012a64 <update_wall+0x424>)
 801297c:	332c      	adds	r3, #44	; 0x2c
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	440b      	add	r3, r1
 8012982:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 8012984:	78fb      	ldrb	r3, [r7, #3]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d013      	beq.n	80129b2 <update_wall+0x372>
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3b01      	subs	r3, #1
 801298e:	4a35      	ldr	r2, [pc, #212]	; (8012a64 <update_wall+0x424>)
 8012990:	330e      	adds	r3, #14
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	2101      	movs	r1, #1
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	fa01 f303 	lsl.w	r3, r1, r3
 80129a0:	4619      	mov	r1, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	430a      	orrs	r2, r1
 80129a8:	492e      	ldr	r1, [pc, #184]	; (8012a64 <update_wall+0x424>)
 80129aa:	330e      	adds	r3, #14
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	440b      	add	r3, r1
 80129b0:	605a      	str	r2, [r3, #4]
		}

		if (y >= 1) {
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	dd24      	ble.n	8012a02 <update_wall+0x3c2>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	3b01      	subs	r3, #1
 80129bc:	4a29      	ldr	r2, [pc, #164]	; (8012a64 <update_wall+0x424>)
 80129be:	331e      	adds	r3, #30
 80129c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80129c4:	2101      	movs	r1, #1
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	fa01 f303 	lsl.w	r3, r1, r3
 80129cc:	4619      	mov	r1, r3
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	430a      	orrs	r2, r1
 80129d4:	4923      	ldr	r1, [pc, #140]	; (8012a64 <update_wall+0x424>)
 80129d6:	331e      	adds	r3, #30
 80129d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 80129dc:	7f3b      	ldrb	r3, [r7, #28]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00f      	beq.n	8012a02 <update_wall+0x3c2>
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	3b01      	subs	r3, #1
 80129e6:	4a1f      	ldr	r2, [pc, #124]	; (8012a64 <update_wall+0x424>)
 80129e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80129ec:	2101      	movs	r1, #1
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	fa01 f303 	lsl.w	r3, r1, r3
 80129f4:	4619      	mov	r1, r3
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	3b01      	subs	r3, #1
 80129fa:	430a      	orrs	r2, r1
 80129fc:	4919      	ldr	r1, [pc, #100]	; (8012a64 <update_wall+0x424>)
 80129fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y <= 14) {
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	2b0e      	cmp	r3, #14
 8012a06:	dc25      	bgt.n	8012a54 <update_wall+0x414>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8012a08:	4a16      	ldr	r2, [pc, #88]	; (8012a64 <update_wall+0x424>)
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	331e      	adds	r3, #30
 8012a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a12:	2101      	movs	r1, #1
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	fa01 f202 	lsl.w	r2, r1, r2
 8012a1a:	431a      	orrs	r2, r3
 8012a1c:	4911      	ldr	r1, [pc, #68]	; (8012a64 <update_wall+0x424>)
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	331e      	adds	r3, #30
 8012a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8012a26:	7e3b      	ldrb	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d013      	beq.n	8012a54 <update_wall+0x414>
 8012a2c:	4a0d      	ldr	r2, [pc, #52]	; (8012a64 <update_wall+0x424>)
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a34:	2101      	movs	r1, #1
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	fa01 f202 	lsl.w	r2, r1, r2
 8012a3c:	431a      	orrs	r2, r3
 8012a3e:	4909      	ldr	r1, [pc, #36]	; (8012a64 <update_wall+0x424>)
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 8012a46:	e005      	b.n	8012a54 <update_wall+0x414>
		break;
 8012a48:	bf00      	nop
 8012a4a:	e004      	b.n	8012a56 <update_wall+0x416>
		break;
 8012a4c:	bf00      	nop
 8012a4e:	e002      	b.n	8012a56 <update_wall+0x416>
		break;
 8012a50:	bf00      	nop
 8012a52:	e000      	b.n	8012a56 <update_wall+0x416>
		break;
 8012a54:	bf00      	nop

	}


}
 8012a56:	bf00      	nop
 8012a58:	3714      	adds	r7, #20
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	20001010 	.word	0x20001010

08012a68 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
 8012a74:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	2201      	movs	r2, #1
 8012a80:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	2201      	movs	r2, #1
 8012a86:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3b01      	subs	r3, #1
 8012a8c:	2b03      	cmp	r3, #3
 8012a8e:	f200 813e 	bhi.w	8012d0e <get_wall+0x2a6>
 8012a92:	a201      	add	r2, pc, #4	; (adr r2, 8012a98 <get_wall+0x30>)
 8012a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a98:	08012aa9 	.word	0x08012aa9
 8012a9c:	08012b41 	.word	0x08012b41
 8012aa0:	08012bd5 	.word	0x08012bd5
 8012aa4:	08012c6d 	.word	0x08012c6d
	case 1:
		if (y <= 14) {
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2b0e      	cmp	r3, #14
 8012aac:	dc13      	bgt.n	8012ad6 <get_wall+0x6e>
			*front_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8012aae:	4a9b      	ldr	r2, [pc, #620]	; (8012d1c <get_wall+0x2b4>)
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ab6:	2101      	movs	r1, #1
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	fa01 f202 	lsl.w	r2, r1, r2
 8012abe:	4013      	ands	r3, r2
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	68fa      	ldr	r2, [r7, #12]
 8012ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	bf0c      	ite	eq
 8012acc:	2301      	moveq	r3, #1
 8012ace:	2300      	movne	r3, #0
 8012ad0:	b2da      	uxtb	r2, r3
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	dd16      	ble.n	8012b0a <get_wall+0xa2>
			*left_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	3b01      	subs	r3, #1
 8012ae0:	4a8e      	ldr	r2, [pc, #568]	; (8012d1c <get_wall+0x2b4>)
 8012ae2:	330e      	adds	r3, #14
 8012ae4:	009b      	lsls	r3, r3, #2
 8012ae6:	4413      	add	r3, r2
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	2101      	movs	r1, #1
 8012aec:	68ba      	ldr	r2, [r7, #8]
 8012aee:	fa01 f202 	lsl.w	r2, r1, r2
 8012af2:	4013      	ands	r3, r2
 8012af4:	2101      	movs	r1, #1
 8012af6:	68ba      	ldr	r2, [r7, #8]
 8012af8:	fa01 f202 	lsl.w	r2, r1, r2
 8012afc:	4293      	cmp	r3, r2
 8012afe:	bf0c      	ite	eq
 8012b00:	2301      	moveq	r3, #1
 8012b02:	2300      	movne	r3, #0
 8012b04:	b2da      	uxtb	r2, r3
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2b0e      	cmp	r3, #14
 8012b0e:	f300 80f7 	bgt.w	8012d00 <get_wall+0x298>
			*right_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8012b12:	4a82      	ldr	r2, [pc, #520]	; (8012d1c <get_wall+0x2b4>)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	330e      	adds	r3, #14
 8012b18:	009b      	lsls	r3, r3, #2
 8012b1a:	4413      	add	r3, r2
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	2101      	movs	r1, #1
 8012b20:	68ba      	ldr	r2, [r7, #8]
 8012b22:	fa01 f202 	lsl.w	r2, r1, r2
 8012b26:	4013      	ands	r3, r2
 8012b28:	2101      	movs	r1, #1
 8012b2a:	68ba      	ldr	r2, [r7, #8]
 8012b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8012b30:	4293      	cmp	r3, r2
 8012b32:	bf0c      	ite	eq
 8012b34:	2301      	moveq	r3, #1
 8012b36:	2300      	movne	r3, #0
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012b3e:	e0df      	b.n	8012d00 <get_wall+0x298>
	case 2:
		if (x <= 14) {
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b0e      	cmp	r3, #14
 8012b44:	dc15      	bgt.n	8012b72 <get_wall+0x10a>
			*front_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8012b46:	4a75      	ldr	r2, [pc, #468]	; (8012d1c <get_wall+0x2b4>)
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	330e      	adds	r3, #14
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	2101      	movs	r1, #1
 8012b54:	68ba      	ldr	r2, [r7, #8]
 8012b56:	fa01 f202 	lsl.w	r2, r1, r2
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	68ba      	ldr	r2, [r7, #8]
 8012b60:	fa01 f202 	lsl.w	r2, r1, r2
 8012b64:	4293      	cmp	r3, r2
 8012b66:	bf0c      	ite	eq
 8012b68:	2301      	moveq	r3, #1
 8012b6a:	2300      	movne	r3, #0
 8012b6c:	b2da      	uxtb	r2, r3
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	2b0e      	cmp	r3, #14
 8012b76:	dc13      	bgt.n	8012ba0 <get_wall+0x138>
			*left_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8012b78:	4a68      	ldr	r2, [pc, #416]	; (8012d1c <get_wall+0x2b4>)
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b80:	2101      	movs	r1, #1
 8012b82:	68fa      	ldr	r2, [r7, #12]
 8012b84:	fa01 f202 	lsl.w	r2, r1, r2
 8012b88:	4013      	ands	r3, r2
 8012b8a:	2101      	movs	r1, #1
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8012b92:	4293      	cmp	r3, r2
 8012b94:	bf0c      	ite	eq
 8012b96:	2301      	moveq	r3, #1
 8012b98:	2300      	movne	r3, #0
 8012b9a:	b2da      	uxtb	r2, r3
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f340 80ae 	ble.w	8012d04 <get_wall+0x29c>
			*right_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	3b01      	subs	r3, #1
 8012bac:	4a5b      	ldr	r2, [pc, #364]	; (8012d1c <get_wall+0x2b4>)
 8012bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bb2:	2101      	movs	r1, #1
 8012bb4:	68fa      	ldr	r2, [r7, #12]
 8012bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8012bba:	4013      	ands	r3, r2
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	bf0c      	ite	eq
 8012bc8:	2301      	moveq	r3, #1
 8012bca:	2300      	movne	r3, #0
 8012bcc:	b2da      	uxtb	r2, r3
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012bd2:	e097      	b.n	8012d04 <get_wall+0x29c>
	case 3:
		if (y >= 1) {
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	dd14      	ble.n	8012c04 <get_wall+0x19c>
			*front_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	4a4f      	ldr	r2, [pc, #316]	; (8012d1c <get_wall+0x2b4>)
 8012be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012be4:	2101      	movs	r1, #1
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	fa01 f202 	lsl.w	r2, r1, r2
 8012bec:	4013      	ands	r3, r2
 8012bee:	2101      	movs	r1, #1
 8012bf0:	68fa      	ldr	r2, [r7, #12]
 8012bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	bf0c      	ite	eq
 8012bfa:	2301      	moveq	r3, #1
 8012bfc:	2300      	movne	r3, #0
 8012bfe:	b2da      	uxtb	r2, r3
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2b0e      	cmp	r3, #14
 8012c08:	dc15      	bgt.n	8012c36 <get_wall+0x1ce>
			*left_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8012c0a:	4a44      	ldr	r2, [pc, #272]	; (8012d1c <get_wall+0x2b4>)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	330e      	adds	r3, #14
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	4413      	add	r3, r2
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	2101      	movs	r1, #1
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8012c1e:	4013      	ands	r3, r2
 8012c20:	2101      	movs	r1, #1
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	fa01 f202 	lsl.w	r2, r1, r2
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	bf0c      	ite	eq
 8012c2c:	2301      	moveq	r3, #1
 8012c2e:	2300      	movne	r3, #0
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	dd65      	ble.n	8012d08 <get_wall+0x2a0>
			*right_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	3b01      	subs	r3, #1
 8012c40:	4a36      	ldr	r2, [pc, #216]	; (8012d1c <get_wall+0x2b4>)
 8012c42:	330e      	adds	r3, #14
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	4413      	add	r3, r2
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	2101      	movs	r1, #1
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8012c52:	4013      	ands	r3, r2
 8012c54:	2101      	movs	r1, #1
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	fa01 f202 	lsl.w	r2, r1, r2
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	bf0c      	ite	eq
 8012c60:	2301      	moveq	r3, #1
 8012c62:	2300      	movne	r3, #0
 8012c64:	b2da      	uxtb	r2, r3
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012c6a:	e04d      	b.n	8012d08 <get_wall+0x2a0>
	case 4:
		if (x >= 1) {
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	dd16      	ble.n	8012ca0 <get_wall+0x238>
			*front_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	3b01      	subs	r3, #1
 8012c76:	4a29      	ldr	r2, [pc, #164]	; (8012d1c <get_wall+0x2b4>)
 8012c78:	330e      	adds	r3, #14
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	2101      	movs	r1, #1
 8012c82:	68ba      	ldr	r2, [r7, #8]
 8012c84:	fa01 f202 	lsl.w	r2, r1, r2
 8012c88:	4013      	ands	r3, r2
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	68ba      	ldr	r2, [r7, #8]
 8012c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8012c92:	4293      	cmp	r3, r2
 8012c94:	bf0c      	ite	eq
 8012c96:	2301      	moveq	r3, #1
 8012c98:	2300      	movne	r3, #0
 8012c9a:	b2da      	uxtb	r2, r3
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	dd14      	ble.n	8012cd0 <get_wall+0x268>
			*left_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	4a1c      	ldr	r2, [pc, #112]	; (8012d1c <get_wall+0x2b4>)
 8012cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cb0:	2101      	movs	r1, #1
 8012cb2:	68fa      	ldr	r2, [r7, #12]
 8012cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8012cb8:	4013      	ands	r3, r2
 8012cba:	2101      	movs	r1, #1
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	bf0c      	ite	eq
 8012cc6:	2301      	moveq	r3, #1
 8012cc8:	2300      	movne	r3, #0
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	2b0e      	cmp	r3, #14
 8012cd4:	dc1a      	bgt.n	8012d0c <get_wall+0x2a4>
			*right_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8012cd6:	4a11      	ldr	r2, [pc, #68]	; (8012d1c <get_wall+0x2b4>)
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cde:	2101      	movs	r1, #1
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8012ce6:	4013      	ands	r3, r2
 8012ce8:	2101      	movs	r1, #1
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	fa01 f202 	lsl.w	r2, r1, r2
 8012cf0:	4293      	cmp	r3, r2
 8012cf2:	bf0c      	ite	eq
 8012cf4:	2301      	moveq	r3, #1
 8012cf6:	2300      	movne	r3, #0
 8012cf8:	b2da      	uxtb	r2, r3
 8012cfa:	69bb      	ldr	r3, [r7, #24]
 8012cfc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012cfe:	e005      	b.n	8012d0c <get_wall+0x2a4>
		break;
 8012d00:	bf00      	nop
 8012d02:	e004      	b.n	8012d0e <get_wall+0x2a6>
		break;
 8012d04:	bf00      	nop
 8012d06:	e002      	b.n	8012d0e <get_wall+0x2a6>
		break;
 8012d08:	bf00      	nop
 8012d0a:	e000      	b.n	8012d0e <get_wall+0x2a6>
		break;
 8012d0c:	bf00      	nop
	}

}
 8012d0e:	bf00      	nop
 8012d10:	3714      	adds	r7, #20
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	20001010 	.word	0x20001010

08012d20 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	607a      	str	r2, [r7, #4]
 8012d2c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	2201      	movs	r2, #1
 8012d32:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	2201      	movs	r2, #1
 8012d38:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	3b01      	subs	r3, #1
 8012d44:	2b03      	cmp	r3, #3
 8012d46:	f200 8144 	bhi.w	8012fd2 <get_wall_look+0x2b2>
 8012d4a:	a201      	add	r2, pc, #4	; (adr r2, 8012d50 <get_wall_look+0x30>)
 8012d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d50:	08012d61 	.word	0x08012d61
 8012d54:	08012dfb 	.word	0x08012dfb
 8012d58:	08012e93 	.word	0x08012e93
 8012d5c:	08012f2d 	.word	0x08012f2d
	case 1:
		if (y <= 14) {
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	2b0e      	cmp	r3, #14
 8012d64:	dc14      	bgt.n	8012d90 <get_wall_look+0x70>
			*front_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8012d66:	4a9e      	ldr	r2, [pc, #632]	; (8012fe0 <get_wall_look+0x2c0>)
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	331e      	adds	r3, #30
 8012d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d70:	2101      	movs	r1, #1
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	fa01 f202 	lsl.w	r2, r1, r2
 8012d78:	4013      	ands	r3, r2
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8012d82:	4293      	cmp	r3, r2
 8012d84:	bf0c      	ite	eq
 8012d86:	2301      	moveq	r3, #1
 8012d88:	2300      	movne	r3, #0
 8012d8a:	b2da      	uxtb	r2, r3
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	dd16      	ble.n	8012dc4 <get_wall_look+0xa4>
			*left_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	3b01      	subs	r3, #1
 8012d9a:	4a91      	ldr	r2, [pc, #580]	; (8012fe0 <get_wall_look+0x2c0>)
 8012d9c:	332c      	adds	r3, #44	; 0x2c
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	2101      	movs	r1, #1
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	fa01 f202 	lsl.w	r2, r1, r2
 8012dac:	4013      	ands	r3, r2
 8012dae:	2101      	movs	r1, #1
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	fa01 f202 	lsl.w	r2, r1, r2
 8012db6:	4293      	cmp	r3, r2
 8012db8:	bf0c      	ite	eq
 8012dba:	2301      	moveq	r3, #1
 8012dbc:	2300      	movne	r3, #0
 8012dbe:	b2da      	uxtb	r2, r3
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b0e      	cmp	r3, #14
 8012dc8:	f300 80fc 	bgt.w	8012fc4 <get_wall_look+0x2a4>
			*right_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8012dcc:	4a84      	ldr	r2, [pc, #528]	; (8012fe0 <get_wall_look+0x2c0>)
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	332c      	adds	r3, #44	; 0x2c
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4413      	add	r3, r2
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	2101      	movs	r1, #1
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8012de0:	4013      	ands	r3, r2
 8012de2:	2101      	movs	r1, #1
 8012de4:	68ba      	ldr	r2, [r7, #8]
 8012de6:	fa01 f202 	lsl.w	r2, r1, r2
 8012dea:	4293      	cmp	r3, r2
 8012dec:	bf0c      	ite	eq
 8012dee:	2301      	moveq	r3, #1
 8012df0:	2300      	movne	r3, #0
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012df8:	e0e4      	b.n	8012fc4 <get_wall_look+0x2a4>
	case 2:
		if (x <= 14) {
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2b0e      	cmp	r3, #14
 8012dfe:	dc15      	bgt.n	8012e2c <get_wall_look+0x10c>
			*front_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8012e00:	4a77      	ldr	r2, [pc, #476]	; (8012fe0 <get_wall_look+0x2c0>)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	332c      	adds	r3, #44	; 0x2c
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4413      	add	r3, r2
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	68ba      	ldr	r2, [r7, #8]
 8012e10:	fa01 f202 	lsl.w	r2, r1, r2
 8012e14:	4013      	ands	r3, r2
 8012e16:	2101      	movs	r1, #1
 8012e18:	68ba      	ldr	r2, [r7, #8]
 8012e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	bf0c      	ite	eq
 8012e22:	2301      	moveq	r3, #1
 8012e24:	2300      	movne	r3, #0
 8012e26:	b2da      	uxtb	r2, r3
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	2b0e      	cmp	r3, #14
 8012e30:	dc14      	bgt.n	8012e5c <get_wall_look+0x13c>
			*left_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8012e32:	4a6b      	ldr	r2, [pc, #428]	; (8012fe0 <get_wall_look+0x2c0>)
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	331e      	adds	r3, #30
 8012e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e3c:	2101      	movs	r1, #1
 8012e3e:	68fa      	ldr	r2, [r7, #12]
 8012e40:	fa01 f202 	lsl.w	r2, r1, r2
 8012e44:	4013      	ands	r3, r2
 8012e46:	2101      	movs	r1, #1
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	bf0c      	ite	eq
 8012e52:	2301      	moveq	r3, #1
 8012e54:	2300      	movne	r3, #0
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f340 80b2 	ble.w	8012fc8 <get_wall_look+0x2a8>
			*right_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	4a5d      	ldr	r2, [pc, #372]	; (8012fe0 <get_wall_look+0x2c0>)
 8012e6a:	331e      	adds	r3, #30
 8012e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e70:	2101      	movs	r1, #1
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	fa01 f202 	lsl.w	r2, r1, r2
 8012e78:	4013      	ands	r3, r2
 8012e7a:	2101      	movs	r1, #1
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8012e82:	4293      	cmp	r3, r2
 8012e84:	bf0c      	ite	eq
 8012e86:	2301      	moveq	r3, #1
 8012e88:	2300      	movne	r3, #0
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012e90:	e09a      	b.n	8012fc8 <get_wall_look+0x2a8>
	case 3:
		if (y >= 1) {
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	dd15      	ble.n	8012ec4 <get_wall_look+0x1a4>
			*front_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	3b01      	subs	r3, #1
 8012e9c:	4a50      	ldr	r2, [pc, #320]	; (8012fe0 <get_wall_look+0x2c0>)
 8012e9e:	331e      	adds	r3, #30
 8012ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ea4:	2101      	movs	r1, #1
 8012ea6:	68fa      	ldr	r2, [r7, #12]
 8012ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8012eac:	4013      	ands	r3, r2
 8012eae:	2101      	movs	r1, #1
 8012eb0:	68fa      	ldr	r2, [r7, #12]
 8012eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	bf0c      	ite	eq
 8012eba:	2301      	moveq	r3, #1
 8012ebc:	2300      	movne	r3, #0
 8012ebe:	b2da      	uxtb	r2, r3
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2b0e      	cmp	r3, #14
 8012ec8:	dc15      	bgt.n	8012ef6 <get_wall_look+0x1d6>
			*left_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8012eca:	4a45      	ldr	r2, [pc, #276]	; (8012fe0 <get_wall_look+0x2c0>)
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	332c      	adds	r3, #44	; 0x2c
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	2101      	movs	r1, #1
 8012ed8:	68ba      	ldr	r2, [r7, #8]
 8012eda:	fa01 f202 	lsl.w	r2, r1, r2
 8012ede:	4013      	ands	r3, r2
 8012ee0:	2101      	movs	r1, #1
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	bf0c      	ite	eq
 8012eec:	2301      	moveq	r3, #1
 8012eee:	2300      	movne	r3, #0
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	dd67      	ble.n	8012fcc <get_wall_look+0x2ac>
			*right_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	3b01      	subs	r3, #1
 8012f00:	4a37      	ldr	r2, [pc, #220]	; (8012fe0 <get_wall_look+0x2c0>)
 8012f02:	332c      	adds	r3, #44	; 0x2c
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	4413      	add	r3, r2
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	2101      	movs	r1, #1
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8012f12:	4013      	ands	r3, r2
 8012f14:	2101      	movs	r1, #1
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	fa01 f202 	lsl.w	r2, r1, r2
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	bf0c      	ite	eq
 8012f20:	2301      	moveq	r3, #1
 8012f22:	2300      	movne	r3, #0
 8012f24:	b2da      	uxtb	r2, r3
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012f2a:	e04f      	b.n	8012fcc <get_wall_look+0x2ac>
	case 4:
		if (x >= 1) {
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	dd16      	ble.n	8012f60 <get_wall_look+0x240>
			*front_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	4a2a      	ldr	r2, [pc, #168]	; (8012fe0 <get_wall_look+0x2c0>)
 8012f38:	332c      	adds	r3, #44	; 0x2c
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	4413      	add	r3, r2
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	2101      	movs	r1, #1
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	fa01 f202 	lsl.w	r2, r1, r2
 8012f48:	4013      	ands	r3, r2
 8012f4a:	2101      	movs	r1, #1
 8012f4c:	68ba      	ldr	r2, [r7, #8]
 8012f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8012f52:	4293      	cmp	r3, r2
 8012f54:	bf0c      	ite	eq
 8012f56:	2301      	moveq	r3, #1
 8012f58:	2300      	movne	r3, #0
 8012f5a:	b2da      	uxtb	r2, r3
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	dd15      	ble.n	8012f92 <get_wall_look+0x272>
			*left_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	4a1d      	ldr	r2, [pc, #116]	; (8012fe0 <get_wall_look+0x2c0>)
 8012f6c:	331e      	adds	r3, #30
 8012f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f72:	2101      	movs	r1, #1
 8012f74:	68fa      	ldr	r2, [r7, #12]
 8012f76:	fa01 f202 	lsl.w	r2, r1, r2
 8012f7a:	4013      	ands	r3, r2
 8012f7c:	2101      	movs	r1, #1
 8012f7e:	68fa      	ldr	r2, [r7, #12]
 8012f80:	fa01 f202 	lsl.w	r2, r1, r2
 8012f84:	4293      	cmp	r3, r2
 8012f86:	bf0c      	ite	eq
 8012f88:	2301      	moveq	r3, #1
 8012f8a:	2300      	movne	r3, #0
 8012f8c:	b2da      	uxtb	r2, r3
 8012f8e:	69fb      	ldr	r3, [r7, #28]
 8012f90:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	2b0e      	cmp	r3, #14
 8012f96:	dc1b      	bgt.n	8012fd0 <get_wall_look+0x2b0>
			*right_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8012f98:	4a11      	ldr	r2, [pc, #68]	; (8012fe0 <get_wall_look+0x2c0>)
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	331e      	adds	r3, #30
 8012f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8012faa:	4013      	ands	r3, r2
 8012fac:	2101      	movs	r1, #1
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	bf0c      	ite	eq
 8012fb8:	2301      	moveq	r3, #1
 8012fba:	2300      	movne	r3, #0
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8012fc2:	e005      	b.n	8012fd0 <get_wall_look+0x2b0>
		break;
 8012fc4:	bf00      	nop
 8012fc6:	e004      	b.n	8012fd2 <get_wall_look+0x2b2>
		break;
 8012fc8:	bf00      	nop
 8012fca:	e002      	b.n	8012fd2 <get_wall_look+0x2b2>
		break;
 8012fcc:	bf00      	nop
 8012fce:	e000      	b.n	8012fd2 <get_wall_look+0x2b2>
		break;
 8012fd0:	bf00      	nop
	}

}
 8012fd2:	bf00      	nop
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop
 8012fe0:	20001010 	.word	0x20001010

08012fe4 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8012fe4:	b480      	push	{r7}
 8012fe6:	b087      	sub	sp, #28
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
 8012ff0:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8012ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff4:	2b0e      	cmp	r3, #14
 8012ff6:	dd02      	ble.n	8012ffe <search_AroundWalkCount+0x1a>
 8012ff8:	23ff      	movs	r3, #255	; 0xff
 8012ffa:	82fb      	strh	r3, [r7, #22]
 8012ffc:	e008      	b.n	8013010 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8012ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013000:	3301      	adds	r3, #1
 8013002:	493e      	ldr	r1, [pc, #248]	; (80130fc <search_AroundWalkCount+0x118>)
 8013004:	6a3a      	ldr	r2, [r7, #32]
 8013006:	0112      	lsls	r2, r2, #4
 8013008:	4413      	add	r3, r2
 801300a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801300e:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8013010:	6a3b      	ldr	r3, [r7, #32]
 8013012:	2b0e      	cmp	r3, #14
 8013014:	dd02      	ble.n	801301c <search_AroundWalkCount+0x38>
 8013016:	23ff      	movs	r3, #255	; 0xff
 8013018:	82bb      	strh	r3, [r7, #20]
 801301a:	e008      	b.n	801302e <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 801301c:	6a3b      	ldr	r3, [r7, #32]
 801301e:	3301      	adds	r3, #1
 8013020:	4936      	ldr	r1, [pc, #216]	; (80130fc <search_AroundWalkCount+0x118>)
 8013022:	011a      	lsls	r2, r3, #4
 8013024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013026:	4413      	add	r3, r2
 8013028:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801302c:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 801302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013030:	2b00      	cmp	r3, #0
 8013032:	dc02      	bgt.n	801303a <search_AroundWalkCount+0x56>
 8013034:	23ff      	movs	r3, #255	; 0xff
 8013036:	827b      	strh	r3, [r7, #18]
 8013038:	e008      	b.n	801304c <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 801303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303c:	3b01      	subs	r3, #1
 801303e:	492f      	ldr	r1, [pc, #188]	; (80130fc <search_AroundWalkCount+0x118>)
 8013040:	6a3a      	ldr	r2, [r7, #32]
 8013042:	0112      	lsls	r2, r2, #4
 8013044:	4413      	add	r3, r2
 8013046:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801304a:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	2b00      	cmp	r3, #0
 8013050:	dc02      	bgt.n	8013058 <search_AroundWalkCount+0x74>
 8013052:	23ff      	movs	r3, #255	; 0xff
 8013054:	823b      	strh	r3, [r7, #16]
 8013056:	e008      	b.n	801306a <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	3b01      	subs	r3, #1
 801305c:	4927      	ldr	r1, [pc, #156]	; (80130fc <search_AroundWalkCount+0x118>)
 801305e:	011a      	lsls	r2, r3, #4
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	4413      	add	r3, r2
 8013064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013068:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306c:	3b01      	subs	r3, #1
 801306e:	2b03      	cmp	r3, #3
 8013070:	d83e      	bhi.n	80130f0 <search_AroundWalkCount+0x10c>
 8013072:	a201      	add	r2, pc, #4	; (adr r2, 8013078 <search_AroundWalkCount+0x94>)
 8013074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013078:	08013089 	.word	0x08013089
 801307c:	080130a3 	.word	0x080130a3
 8013080:	080130bd 	.word	0x080130bd
 8013084:	080130d7 	.word	0x080130d7
	case 1:
		*front_count = north_count;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	8afa      	ldrh	r2, [r7, #22]
 801308c:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	8aba      	ldrh	r2, [r7, #20]
 8013092:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8a7a      	ldrh	r2, [r7, #18]
 8013098:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	8a3a      	ldrh	r2, [r7, #16]
 801309e:	801a      	strh	r2, [r3, #0]
		break;
 80130a0:	e026      	b.n	80130f0 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	8aba      	ldrh	r2, [r7, #20]
 80130a6:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	8a7a      	ldrh	r2, [r7, #18]
 80130ac:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	8a3a      	ldrh	r2, [r7, #16]
 80130b2:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	8afa      	ldrh	r2, [r7, #22]
 80130b8:	801a      	strh	r2, [r3, #0]
		break;
 80130ba:	e019      	b.n	80130f0 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	8a7a      	ldrh	r2, [r7, #18]
 80130c0:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	8a3a      	ldrh	r2, [r7, #16]
 80130c6:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	8afa      	ldrh	r2, [r7, #22]
 80130cc:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	8aba      	ldrh	r2, [r7, #20]
 80130d2:	801a      	strh	r2, [r3, #0]
		break;
 80130d4:	e00c      	b.n	80130f0 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	8a3a      	ldrh	r2, [r7, #16]
 80130da:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	8afa      	ldrh	r2, [r7, #22]
 80130e0:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	8aba      	ldrh	r2, [r7, #20]
 80130e6:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	8a7a      	ldrh	r2, [r7, #18]
 80130ec:	801a      	strh	r2, [r3, #0]
		break;
 80130ee:	bf00      	nop

	}


}
 80130f0:	bf00      	nop
 80130f2:	371c      	adds	r7, #28
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr
 80130fc:	200011f4 	.word	0x200011f4

08013100 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8013100:	b480      	push	{r7}
 8013102:	b087      	sub	sp, #28
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT_DIJKSTRA;}
 801310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013110:	2b0e      	cmp	r3, #14
 8013112:	dd03      	ble.n	801311c <search_AroundDijkstraCount+0x1c>
 8013114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013118:	82fb      	strh	r3, [r7, #22]
 801311a:	e009      	b.n	8013130 <search_AroundDijkstraCount+0x30>
	else {north_count = Dijkstra.row_count[x][y];}
 801311c:	4944      	ldr	r1, [pc, #272]	; (8013230 <search_AroundDijkstraCount+0x130>)
 801311e:	6a3a      	ldr	r2, [r7, #32]
 8013120:	4613      	mov	r3, r2
 8013122:	011b      	lsls	r3, r3, #4
 8013124:	1a9b      	subs	r3, r3, r2
 8013126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013128:	4413      	add	r3, r2
 801312a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801312e:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	2b0e      	cmp	r3, #14
 8013134:	dd03      	ble.n	801313e <search_AroundDijkstraCount+0x3e>
 8013136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801313a:	82bb      	strh	r3, [r7, #20]
 801313c:	e00a      	b.n	8013154 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.column_count[y][x];}
 801313e:	493c      	ldr	r1, [pc, #240]	; (8013230 <search_AroundDijkstraCount+0x130>)
 8013140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013142:	4613      	mov	r3, r2
 8013144:	011b      	lsls	r3, r3, #4
 8013146:	1a9b      	subs	r3, r3, r2
 8013148:	6a3a      	ldr	r2, [r7, #32]
 801314a:	4413      	add	r3, r2
 801314c:	33f0      	adds	r3, #240	; 0xf0
 801314e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013152:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013156:	2b00      	cmp	r3, #0
 8013158:	dc03      	bgt.n	8013162 <search_AroundDijkstraCount+0x62>
 801315a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801315e:	827b      	strh	r3, [r7, #18]
 8013160:	e00a      	b.n	8013178 <search_AroundDijkstraCount+0x78>
	else {south_count = Dijkstra.row_count[x][y-1];}
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	1e59      	subs	r1, r3, #1
 8013166:	4832      	ldr	r0, [pc, #200]	; (8013230 <search_AroundDijkstraCount+0x130>)
 8013168:	6a3a      	ldr	r2, [r7, #32]
 801316a:	4613      	mov	r3, r2
 801316c:	011b      	lsls	r3, r3, #4
 801316e:	1a9b      	subs	r3, r3, r2
 8013170:	440b      	add	r3, r1
 8013172:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013176:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013178:	6a3b      	ldr	r3, [r7, #32]
 801317a:	2b00      	cmp	r3, #0
 801317c:	dc03      	bgt.n	8013186 <search_AroundDijkstraCount+0x86>
 801317e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013182:	823b      	strh	r3, [r7, #16]
 8013184:	e00b      	b.n	801319e <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.column_count[y][x-1];}
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	1e59      	subs	r1, r3, #1
 801318a:	4829      	ldr	r0, [pc, #164]	; (8013230 <search_AroundDijkstraCount+0x130>)
 801318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801318e:	4613      	mov	r3, r2
 8013190:	011b      	lsls	r3, r3, #4
 8013192:	1a9b      	subs	r3, r3, r2
 8013194:	440b      	add	r3, r1
 8013196:	33f0      	adds	r3, #240	; 0xf0
 8013198:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801319c:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a0:	3b01      	subs	r3, #1
 80131a2:	2b03      	cmp	r3, #3
 80131a4:	d83e      	bhi.n	8013224 <search_AroundDijkstraCount+0x124>
 80131a6:	a201      	add	r2, pc, #4	; (adr r2, 80131ac <search_AroundDijkstraCount+0xac>)
 80131a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ac:	080131bd 	.word	0x080131bd
 80131b0:	080131d7 	.word	0x080131d7
 80131b4:	080131f1 	.word	0x080131f1
 80131b8:	0801320b 	.word	0x0801320b
	case 1:
		*front_count = north_count;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	8afa      	ldrh	r2, [r7, #22]
 80131c0:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	8aba      	ldrh	r2, [r7, #20]
 80131c6:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	8a7a      	ldrh	r2, [r7, #18]
 80131cc:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	8a3a      	ldrh	r2, [r7, #16]
 80131d2:	801a      	strh	r2, [r3, #0]
		break;
 80131d4:	e026      	b.n	8013224 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	8aba      	ldrh	r2, [r7, #20]
 80131da:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	8a7a      	ldrh	r2, [r7, #18]
 80131e0:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	8a3a      	ldrh	r2, [r7, #16]
 80131e6:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	8afa      	ldrh	r2, [r7, #22]
 80131ec:	801a      	strh	r2, [r3, #0]
		break;
 80131ee:	e019      	b.n	8013224 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	8a7a      	ldrh	r2, [r7, #18]
 80131f4:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	8a3a      	ldrh	r2, [r7, #16]
 80131fa:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	8afa      	ldrh	r2, [r7, #22]
 8013200:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	8aba      	ldrh	r2, [r7, #20]
 8013206:	801a      	strh	r2, [r3, #0]
		break;
 8013208:	e00c      	b.n	8013224 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	8a3a      	ldrh	r2, [r7, #16]
 801320e:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	8afa      	ldrh	r2, [r7, #22]
 8013214:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	8aba      	ldrh	r2, [r7, #20]
 801321a:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	8a7a      	ldrh	r2, [r7, #18]
 8013220:	801a      	strh	r2, [r3, #0]
		break;
 8013222:	bf00      	nop

	}


}
 8013224:	bf00      	nop
 8013226:	371c      	adds	r7, #28
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr
 8013230:	200013f4 	.word	0x200013f4

08013234 <create_DijkstraMap>:




void create_DijkstraMap(void){
 8013234:	b590      	push	{r4, r7, lr}
 8013236:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 801323a:	b081      	sub	sp, #4
 801323c:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 801323e:	23b4      	movs	r3, #180	; 0xb4
 8013240:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013244:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8013248:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 801324a:	237f      	movs	r3, #127	; 0x7f
 801324c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013250:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013254:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8013256:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801325a:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801325e:	4a1d      	ldr	r2, [pc, #116]	; (80132d4 <create_DijkstraMap+0xa0>)
 8013260:	ca07      	ldmia	r2, {r0, r1, r2}
 8013262:	c303      	stmia	r3!, {r0, r1}
 8013264:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8013266:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801326a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801326e:	4a1a      	ldr	r2, [pc, #104]	; (80132d8 <create_DijkstraMap+0xa4>)
 8013270:	ca07      	ldmia	r2, {r0, r1, r2}
 8013272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8013276:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801327a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801327e:	4618      	mov	r0, r3
 8013280:	f003 fab2 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_y);
 8013284:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013288:	f103 0320 	add.w	r3, r3, #32
 801328c:	3b0c      	subs	r3, #12
 801328e:	4618      	mov	r0, r3
 8013290:	f003 faaa 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8013294:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013298:	3b14      	subs	r3, #20
 801329a:	4618      	mov	r0, r3
 801329c:	f003 faa4 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_direction);
 80132a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80132a4:	3b3c      	subs	r3, #60	; 0x3c
 80132a6:	4618      	mov	r0, r3
 80132a8:	f003 fa9e 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_cost);
 80132ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80132b0:	3b64      	subs	r3, #100	; 0x64
 80132b2:	4618      	mov	r0, r3
 80132b4:	f003 fa98 	bl	80167e8 <initStack_walk>
	for(int i=0;i<=15;i++){
 80132b8:	2300      	movs	r3, #0
 80132ba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132be:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80132c2:	6013      	str	r3, [r2, #0]
 80132c4:	e04e      	b.n	8013364 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 80132c6:	2300      	movs	r3, #0
 80132c8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132cc:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80132d0:	6013      	str	r3, [r2, #0]
 80132d2:	e035      	b.n	8013340 <create_DijkstraMap+0x10c>
 80132d4:	08026388 	.word	0x08026388
 80132d8:	08026394 	.word	0x08026394
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80132dc:	49c6      	ldr	r1, [pc, #792]	; (80135f8 <create_DijkstraMap+0x3c4>)
 80132de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132e2:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	4613      	mov	r3, r2
 80132ea:	011b      	lsls	r3, r3, #4
 80132ec:	1a9b      	subs	r3, r3, r2
 80132ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80132f2:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80132f6:	6812      	ldr	r2, [r2, #0]
 80132f8:	4413      	add	r3, r2
 80132fa:	33f0      	adds	r3, #240	; 0xf0
 80132fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013300:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8013304:	49bc      	ldr	r1, [pc, #752]	; (80135f8 <create_DijkstraMap+0x3c4>)
 8013306:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801330a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	4613      	mov	r3, r2
 8013312:	011b      	lsls	r3, r3, #4
 8013314:	1a9b      	subs	r3, r3, r2
 8013316:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801331a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801331e:	6812      	ldr	r2, [r2, #0]
 8013320:	4413      	add	r3, r2
 8013322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013326:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801332a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801332e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	3301      	adds	r3, #1
 8013336:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801333a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801333e:	6013      	str	r3, [r2, #0]
 8013340:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013344:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b0e      	cmp	r3, #14
 801334c:	ddc6      	ble.n	80132dc <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 801334e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013352:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	3301      	adds	r3, #1
 801335a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801335e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013368:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2b0f      	cmp	r3, #15
 8013370:	dda9      	ble.n	80132c6 <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 8013372:	4ba1      	ldr	r3, [pc, #644]	; (80135f8 <create_DijkstraMap+0x3c4>)
 8013374:	2200      	movs	r2, #0
 8013376:	879a      	strh	r2, [r3, #60]	; 0x3c
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 8013378:	4b9f      	ldr	r3, [pc, #636]	; (80135f8 <create_DijkstraMap+0x3c4>)
 801337a:	2200      	movs	r2, #0
 801337c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 8013380:	4b9d      	ldr	r3, [pc, #628]	; (80135f8 <create_DijkstraMap+0x3c4>)
 8013382:	2200      	movs	r2, #0
 8013384:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 8013388:	4b9b      	ldr	r3, [pc, #620]	; (80135f8 <create_DijkstraMap+0x3c4>)
 801338a:	2200      	movs	r2, #0
 801338c:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013390:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013394:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013398:	2102      	movs	r1, #2
 801339a:	4618      	mov	r0, r3
 801339c:	f003 fa34 	bl	8016808 <pushStack_walk>
 80133a0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80133a4:	f103 0320 	add.w	r3, r3, #32
 80133a8:	3b0c      	subs	r3, #12
 80133aa:	2100      	movs	r1, #0
 80133ac:	4618      	mov	r0, r3
 80133ae:	f003 fa2b 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80133b2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80133b6:	3b14      	subs	r3, #20
 80133b8:	2100      	movs	r1, #0
 80133ba:	4618      	mov	r0, r3
 80133bc:	f003 fa24 	bl	8016808 <pushStack_walk>
 80133c0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80133c4:	3b3c      	subs	r3, #60	; 0x3c
 80133c6:	2108      	movs	r1, #8
 80133c8:	4618      	mov	r0, r3
 80133ca:	f003 fa1d 	bl	8016808 <pushStack_walk>
 80133ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80133d2:	3b64      	subs	r3, #100	; 0x64
 80133d4:	2100      	movs	r1, #0
 80133d6:	4618      	mov	r0, r3
 80133d8:	f003 fa16 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 80133dc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80133e0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80133e4:	2103      	movs	r1, #3
 80133e6:	4618      	mov	r0, r3
 80133e8:	f003 fa0e 	bl	8016808 <pushStack_walk>
 80133ec:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80133f0:	f103 0320 	add.w	r3, r3, #32
 80133f4:	3b0c      	subs	r3, #12
 80133f6:	2100      	movs	r1, #0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f003 fa05 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80133fe:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013402:	3b14      	subs	r3, #20
 8013404:	2100      	movs	r1, #0
 8013406:	4618      	mov	r0, r3
 8013408:	f003 f9fe 	bl	8016808 <pushStack_walk>
 801340c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013410:	3b3c      	subs	r3, #60	; 0x3c
 8013412:	2108      	movs	r1, #8
 8013414:	4618      	mov	r0, r3
 8013416:	f003 f9f7 	bl	8016808 <pushStack_walk>
 801341a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801341e:	3b64      	subs	r3, #100	; 0x64
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f003 f9f0 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013428:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801342c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013430:	2102      	movs	r1, #2
 8013432:	4618      	mov	r0, r3
 8013434:	f003 f9e8 	bl	8016808 <pushStack_walk>
 8013438:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801343c:	f103 0320 	add.w	r3, r3, #32
 8013440:	3b0c      	subs	r3, #12
 8013442:	2100      	movs	r1, #0
 8013444:	4618      	mov	r0, r3
 8013446:	f003 f9df 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801344a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801344e:	3b14      	subs	r3, #20
 8013450:	2101      	movs	r1, #1
 8013452:	4618      	mov	r0, r3
 8013454:	f003 f9d8 	bl	8016808 <pushStack_walk>
 8013458:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801345c:	3b3c      	subs	r3, #60	; 0x3c
 801345e:	2108      	movs	r1, #8
 8013460:	4618      	mov	r0, r3
 8013462:	f003 f9d1 	bl	8016808 <pushStack_walk>
 8013466:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801346a:	3b64      	subs	r3, #100	; 0x64
 801346c:	2100      	movs	r1, #0
 801346e:	4618      	mov	r0, r3
 8013470:	f003 f9ca 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8013474:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013478:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801347c:	2102      	movs	r1, #2
 801347e:	4618      	mov	r0, r3
 8013480:	f003 f9c2 	bl	8016808 <pushStack_walk>
 8013484:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013488:	f103 0320 	add.w	r3, r3, #32
 801348c:	3b0c      	subs	r3, #12
 801348e:	2101      	movs	r1, #1
 8013490:	4618      	mov	r0, r3
 8013492:	f003 f9b9 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8013496:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801349a:	3b14      	subs	r3, #20
 801349c:	2101      	movs	r1, #1
 801349e:	4618      	mov	r0, r3
 80134a0:	f003 f9b2 	bl	8016808 <pushStack_walk>
 80134a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80134a8:	3b3c      	subs	r3, #60	; 0x3c
 80134aa:	2108      	movs	r1, #8
 80134ac:	4618      	mov	r0, r3
 80134ae:	f003 f9ab 	bl	8016808 <pushStack_walk>
 80134b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80134b6:	3b64      	subs	r3, #100	; 0x64
 80134b8:	2100      	movs	r1, #0
 80134ba:	4618      	mov	r0, r3
 80134bc:	f003 f9a4 	bl	8016808 <pushStack_walk>



	unsigned short count_number = 1;
 80134c0:	2301      	movs	r3, #1
 80134c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134c6:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80134ca:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80134cc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80134d0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80134d4:	4618      	mov	r0, r3
 80134d6:	f003 f9c1 	bl	801685c <popStack_walk>
 80134da:	4603      	mov	r3, r0
 80134dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134e0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80134e4:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80134e6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134ea:	f103 0320 	add.w	r3, r3, #32
 80134ee:	3b0c      	subs	r3, #12
 80134f0:	4618      	mov	r0, r3
 80134f2:	f003 f9b3 	bl	801685c <popStack_walk>
 80134f6:	4603      	mov	r3, r0
 80134f8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80134fc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013500:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8013502:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013506:	3b14      	subs	r3, #20
 8013508:	4618      	mov	r0, r3
 801350a:	f003 f9a7 	bl	801685c <popStack_walk>
 801350e:	4603      	mov	r3, r0
 8013510:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013514:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8013518:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 801351a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801351e:	3b3c      	subs	r3, #60	; 0x3c
 8013520:	4618      	mov	r0, r3
 8013522:	f003 f99b 	bl	801685c <popStack_walk>
 8013526:	4603      	mov	r3, r0
 8013528:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801352c:	f102 0266 	add.w	r2, r2, #102	; 0x66
 8013530:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8013532:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013536:	3b64      	subs	r3, #100	; 0x64
 8013538:	4618      	mov	r0, r3
 801353a:	f003 f98f 	bl	801685c <popStack_walk>
 801353e:	4603      	mov	r3, r0
 8013540:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013544:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8013548:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 801354a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801354e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013552:	881b      	ldrh	r3, [r3, #0]
 8013554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013558:	4293      	cmp	r3, r2
 801355a:	f001 8398 	beq.w	8014c8e <create_DijkstraMap+0x1a5a>
 801355e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013562:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801356c:	4293      	cmp	r3, r2
 801356e:	f001 838e 	beq.w	8014c8e <create_DijkstraMap+0x1a5a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==ROW){
 8013572:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013576:	f103 0368 	add.w	r3, r3, #104	; 0x68
 801357a:	881b      	ldrh	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	f040 85b7 	bne.w	80140f0 <create_DijkstraMap+0xebc>
			if(Ycoordinate <= 13){
 8013582:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013586:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801358a:	881b      	ldrh	r3, [r3, #0]
 801358c:	2b0d      	cmp	r3, #13
 801358e:	f200 80ea 	bhi.w	8013766 <create_DijkstraMap+0x532>
				if(Direction==SLANT_NORTH){
 8013592:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013596:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d12d      	bne.n	80135fc <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80135a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135a4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	3301      	adds	r3, #1
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80135b2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80135b6:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80135b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135bc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80135c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135c4:	2b04      	cmp	r3, #4
 80135c6:	dd05      	ble.n	80135d4 <create_DijkstraMap+0x3a0>
 80135c8:	2304      	movs	r3, #4
 80135ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80135ce:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80135d2:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80135d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135d8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80135dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80135e0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80135e4:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80135e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80135ec:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80135f0:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80135f4:	8013      	strh	r3, [r2, #0]
 80135f6:	e011      	b.n	801361c <create_DijkstraMap+0x3e8>
 80135f8:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80135fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013600:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801360a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801360e:	8013      	strh	r3, [r2, #0]
 8013610:	2300      	movs	r3, #0
 8013612:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013616:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801361a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate+1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 801361c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013620:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	3301      	adds	r3, #1
 8013628:	4a6c      	ldr	r2, [pc, #432]	; (80137dc <create_DijkstraMap+0x5a8>)
 801362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801362e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013632:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013636:	8812      	ldrh	r2, [r2, #0]
 8013638:	2101      	movs	r1, #1
 801363a:	fa01 f202 	lsl.w	r2, r1, r2
 801363e:	4013      	ands	r3, r2
 8013640:	2b00      	cmp	r3, #0
 8013642:	f040 8090 	bne.w	8013766 <create_DijkstraMap+0x532>
 8013646:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801364a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801364e:	881a      	ldrh	r2, [r3, #0]
 8013650:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013654:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013658:	881b      	ldrh	r3, [r3, #0]
 801365a:	1c59      	adds	r1, r3, #1
 801365c:	4860      	ldr	r0, [pc, #384]	; (80137e0 <create_DijkstraMap+0x5ac>)
 801365e:	4613      	mov	r3, r2
 8013660:	011b      	lsls	r3, r3, #4
 8013662:	1a9b      	subs	r3, r3, r2
 8013664:	440b      	add	r3, r1
 8013666:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801366a:	461c      	mov	r4, r3
 801366c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013670:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013674:	881a      	ldrh	r2, [r3, #0]
 8013676:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801367a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801367e:	8819      	ldrh	r1, [r3, #0]
 8013680:	4857      	ldr	r0, [pc, #348]	; (80137e0 <create_DijkstraMap+0x5ac>)
 8013682:	4613      	mov	r3, r2
 8013684:	011b      	lsls	r3, r3, #4
 8013686:	1a9b      	subs	r3, r3, r2
 8013688:	440b      	add	r3, r1
 801368a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801368e:	461a      	mov	r2, r3
 8013690:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013694:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013698:	f9b3 3000 	ldrsh.w	r3, [r3]
 801369c:	4413      	add	r3, r2
 801369e:	429c      	cmp	r4, r3
 80136a0:	dd61      	ble.n	8013766 <create_DijkstraMap+0x532>
					Dijkstra.row_count[Xcoordinate][Ycoordinate+1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80136a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136aa:	881a      	ldrh	r2, [r3, #0]
 80136ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136b4:	8819      	ldrh	r1, [r3, #0]
 80136b6:	484a      	ldr	r0, [pc, #296]	; (80137e0 <create_DijkstraMap+0x5ac>)
 80136b8:	4613      	mov	r3, r2
 80136ba:	011b      	lsls	r3, r3, #4
 80136bc:	1a9b      	subs	r3, r3, r2
 80136be:	440b      	add	r3, r1
 80136c0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80136c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136c8:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80136d2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80136d6:	8812      	ldrh	r2, [r2, #0]
 80136d8:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80136dc:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80136e0:	8809      	ldrh	r1, [r1, #0]
 80136e2:	3101      	adds	r1, #1
 80136e4:	4403      	add	r3, r0
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	483d      	ldr	r0, [pc, #244]	; (80137e0 <create_DijkstraMap+0x5ac>)
 80136ea:	4613      	mov	r3, r2
 80136ec:	011b      	lsls	r3, r3, #4
 80136ee:	1a9b      	subs	r3, r3, r2
 80136f0:	440b      	add	r3, r1
 80136f2:	4622      	mov	r2, r4
 80136f4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80136f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136fc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013700:	881a      	ldrh	r2, [r3, #0]
 8013702:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013706:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801370a:	4611      	mov	r1, r2
 801370c:	4618      	mov	r0, r3
 801370e:	f003 f87b 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8013712:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013716:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801371a:	881b      	ldrh	r3, [r3, #0]
 801371c:	3301      	adds	r3, #1
 801371e:	b29a      	uxth	r2, r3
 8013720:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013724:	f103 0320 	add.w	r3, r3, #32
 8013728:	3b0c      	subs	r3, #12
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f003 f86b 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8013732:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013736:	3b14      	subs	r3, #20
 8013738:	2100      	movs	r1, #0
 801373a:	4618      	mov	r0, r3
 801373c:	f003 f864 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8013740:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013744:	3b3c      	subs	r3, #60	; 0x3c
 8013746:	2100      	movs	r1, #0
 8013748:	4618      	mov	r0, r3
 801374a:	f003 f85d 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801374e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013752:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013756:	881a      	ldrh	r2, [r3, #0]
 8013758:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801375c:	3b64      	subs	r3, #100	; 0x64
 801375e:	4611      	mov	r1, r2
 8013760:	4618      	mov	r0, r3
 8013762:	f003 f851 	bl	8016808 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8013766:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801376a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801376e:	881b      	ldrh	r3, [r3, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 80ec 	beq.w	801394e <create_DijkstraMap+0x71a>
				if(Direction==SLANT_SOUTH){
 8013776:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801377a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801377e:	881b      	ldrh	r3, [r3, #0]
 8013780:	2b04      	cmp	r3, #4
 8013782:	d12f      	bne.n	80137e4 <create_DijkstraMap+0x5b0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8013784:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013788:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801378c:	881b      	ldrh	r3, [r3, #0]
 801378e:	3301      	adds	r3, #1
 8013790:	b29b      	uxth	r3, r3
 8013792:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013796:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801379a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801379c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137a0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137a8:	2b04      	cmp	r3, #4
 80137aa:	dd05      	ble.n	80137b8 <create_DijkstraMap+0x584>
 80137ac:	2304      	movs	r3, #4
 80137ae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137b2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80137b6:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80137b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137bc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137c4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80137c8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80137cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80137d0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137d4:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80137d8:	8013      	strh	r3, [r2, #0]
 80137da:	e013      	b.n	8013804 <create_DijkstraMap+0x5d0>
 80137dc:	20001010 	.word	0x20001010
 80137e0:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80137e4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80137e8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137f2:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80137f6:	8013      	strh	r3, [r2, #0]
 80137f8:	2300      	movs	r3, #0
 80137fa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137fe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013802:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8013804:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013808:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801380c:	881b      	ldrh	r3, [r3, #0]
 801380e:	3b01      	subs	r3, #1
 8013810:	4a6c      	ldr	r2, [pc, #432]	; (80139c4 <create_DijkstraMap+0x790>)
 8013812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013816:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801381a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801381e:	8812      	ldrh	r2, [r2, #0]
 8013820:	2101      	movs	r1, #1
 8013822:	fa01 f202 	lsl.w	r2, r1, r2
 8013826:	4013      	ands	r3, r2
 8013828:	2b00      	cmp	r3, #0
 801382a:	f040 8090 	bne.w	801394e <create_DijkstraMap+0x71a>
 801382e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013832:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013836:	881a      	ldrh	r2, [r3, #0]
 8013838:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801383c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013840:	881b      	ldrh	r3, [r3, #0]
 8013842:	1e59      	subs	r1, r3, #1
 8013844:	4860      	ldr	r0, [pc, #384]	; (80139c8 <create_DijkstraMap+0x794>)
 8013846:	4613      	mov	r3, r2
 8013848:	011b      	lsls	r3, r3, #4
 801384a:	1a9b      	subs	r3, r3, r2
 801384c:	440b      	add	r3, r1
 801384e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013852:	461c      	mov	r4, r3
 8013854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013858:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801385c:	881a      	ldrh	r2, [r3, #0]
 801385e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013862:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013866:	8819      	ldrh	r1, [r3, #0]
 8013868:	4857      	ldr	r0, [pc, #348]	; (80139c8 <create_DijkstraMap+0x794>)
 801386a:	4613      	mov	r3, r2
 801386c:	011b      	lsls	r3, r3, #4
 801386e:	1a9b      	subs	r3, r3, r2
 8013870:	440b      	add	r3, r1
 8013872:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013876:	461a      	mov	r2, r3
 8013878:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801387c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013884:	4413      	add	r3, r2
 8013886:	429c      	cmp	r4, r3
 8013888:	dd61      	ble.n	801394e <create_DijkstraMap+0x71a>
					Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 801388a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801388e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013892:	881a      	ldrh	r2, [r3, #0]
 8013894:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013898:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801389c:	8819      	ldrh	r1, [r3, #0]
 801389e:	484a      	ldr	r0, [pc, #296]	; (80139c8 <create_DijkstraMap+0x794>)
 80138a0:	4613      	mov	r3, r2
 80138a2:	011b      	lsls	r3, r3, #4
 80138a4:	1a9b      	subs	r3, r3, r2
 80138a6:	440b      	add	r3, r1
 80138a8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80138ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138b0:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80138b4:	881b      	ldrh	r3, [r3, #0]
 80138b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80138ba:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80138be:	8812      	ldrh	r2, [r2, #0]
 80138c0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80138c4:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80138c8:	8809      	ldrh	r1, [r1, #0]
 80138ca:	3901      	subs	r1, #1
 80138cc:	4403      	add	r3, r0
 80138ce:	b29c      	uxth	r4, r3
 80138d0:	483d      	ldr	r0, [pc, #244]	; (80139c8 <create_DijkstraMap+0x794>)
 80138d2:	4613      	mov	r3, r2
 80138d4:	011b      	lsls	r3, r3, #4
 80138d6:	1a9b      	subs	r3, r3, r2
 80138d8:	440b      	add	r3, r1
 80138da:	4622      	mov	r2, r4
 80138dc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80138e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138e4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138e8:	881a      	ldrh	r2, [r3, #0]
 80138ea:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80138ee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80138f2:	4611      	mov	r1, r2
 80138f4:	4618      	mov	r0, r3
 80138f6:	f002 ff87 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 80138fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138fe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	3b01      	subs	r3, #1
 8013906:	b29a      	uxth	r2, r3
 8013908:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801390c:	f103 0320 	add.w	r3, r3, #32
 8013910:	3b0c      	subs	r3, #12
 8013912:	4611      	mov	r1, r2
 8013914:	4618      	mov	r0, r3
 8013916:	f002 ff77 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801391a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801391e:	3b14      	subs	r3, #20
 8013920:	2100      	movs	r1, #0
 8013922:	4618      	mov	r0, r3
 8013924:	f002 ff70 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8013928:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801392c:	3b3c      	subs	r3, #60	; 0x3c
 801392e:	2104      	movs	r1, #4
 8013930:	4618      	mov	r0, r3
 8013932:	f002 ff69 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8013936:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801393a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801393e:	881a      	ldrh	r2, [r3, #0]
 8013940:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013944:	3b64      	subs	r3, #100	; 0x64
 8013946:	4611      	mov	r1, r2
 8013948:	4618      	mov	r0, r3
 801394a:	f002 ff5d 	bl	8016808 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 801394e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013952:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013956:	881b      	ldrh	r3, [r3, #0]
 8013958:	2b0e      	cmp	r3, #14
 801395a:	f200 81dc 	bhi.w	8013d16 <create_DijkstraMap+0xae2>
				if(Direction==SLANT_SOUTH_EAST){
 801395e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013962:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	2b03      	cmp	r3, #3
 801396a:	d12f      	bne.n	80139cc <create_DijkstraMap+0x798>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801396c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013970:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013974:	881b      	ldrh	r3, [r3, #0]
 8013976:	3301      	adds	r3, #1
 8013978:	b29b      	uxth	r3, r3
 801397a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801397e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013982:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013984:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013988:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801398c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013990:	2b05      	cmp	r3, #5
 8013992:	dd05      	ble.n	80139a0 <create_DijkstraMap+0x76c>
 8013994:	2305      	movs	r3, #5
 8013996:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801399a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801399e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80139a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139a4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80139a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80139ac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80139b0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80139b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80139b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80139bc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80139c0:	8013      	strh	r3, [r2, #0]
 80139c2:	e013      	b.n	80139ec <create_DijkstraMap+0x7b8>
 80139c4:	20001010 	.word	0x20001010
 80139c8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80139cc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80139d0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80139d4:	881b      	ldrh	r3, [r3, #0]
 80139d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80139da:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80139de:	8013      	strh	r3, [r2, #0]
 80139e0:	2300      	movs	r3, #0
 80139e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80139e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80139ea:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80139ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	4a69      	ldr	r2, [pc, #420]	; (8013b9c <create_DijkstraMap+0x968>)
 80139f8:	330e      	adds	r3, #14
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	4413      	add	r3, r2
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013a04:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013a08:	8812      	ldrh	r2, [r2, #0]
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8013a10:	4013      	ands	r3, r2
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f040 808e 	bne.w	8013b34 <create_DijkstraMap+0x900>
 8013a18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a1c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013a20:	881a      	ldrh	r2, [r3, #0]
 8013a22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a26:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013a2a:	8819      	ldrh	r1, [r3, #0]
 8013a2c:	485c      	ldr	r0, [pc, #368]	; (8013ba0 <create_DijkstraMap+0x96c>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	011b      	lsls	r3, r3, #4
 8013a32:	1a9b      	subs	r3, r3, r2
 8013a34:	440b      	add	r3, r1
 8013a36:	33f0      	adds	r3, #240	; 0xf0
 8013a38:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013a3c:	461c      	mov	r4, r3
 8013a3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a42:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013a46:	881a      	ldrh	r2, [r3, #0]
 8013a48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a4c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013a50:	8819      	ldrh	r1, [r3, #0]
 8013a52:	4853      	ldr	r0, [pc, #332]	; (8013ba0 <create_DijkstraMap+0x96c>)
 8013a54:	4613      	mov	r3, r2
 8013a56:	011b      	lsls	r3, r3, #4
 8013a58:	1a9b      	subs	r3, r3, r2
 8013a5a:	440b      	add	r3, r1
 8013a5c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013a60:	461a      	mov	r2, r3
 8013a62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a66:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013a6e:	4413      	add	r3, r2
 8013a70:	429c      	cmp	r4, r3
 8013a72:	dd5f      	ble.n	8013b34 <create_DijkstraMap+0x900>
					Dijkstra.column_count[Ycoordinate][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8013a74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a78:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013a7c:	881a      	ldrh	r2, [r3, #0]
 8013a7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a82:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013a86:	8819      	ldrh	r1, [r3, #0]
 8013a88:	4845      	ldr	r0, [pc, #276]	; (8013ba0 <create_DijkstraMap+0x96c>)
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	011b      	lsls	r3, r3, #4
 8013a8e:	1a9b      	subs	r3, r3, r2
 8013a90:	440b      	add	r3, r1
 8013a92:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013a96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013a9a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013aa4:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013aa8:	8812      	ldrh	r2, [r2, #0]
 8013aaa:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013aae:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8013ab2:	8809      	ldrh	r1, [r1, #0]
 8013ab4:	4403      	add	r3, r0
 8013ab6:	b29c      	uxth	r4, r3
 8013ab8:	4839      	ldr	r0, [pc, #228]	; (8013ba0 <create_DijkstraMap+0x96c>)
 8013aba:	4613      	mov	r3, r2
 8013abc:	011b      	lsls	r3, r3, #4
 8013abe:	1a9b      	subs	r3, r3, r2
 8013ac0:	440b      	add	r3, r1
 8013ac2:	33f0      	adds	r3, #240	; 0xf0
 8013ac4:	4622      	mov	r2, r4
 8013ac6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8013aca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ace:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013ad2:	881a      	ldrh	r2, [r3, #0]
 8013ad4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013ad8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013adc:	4611      	mov	r1, r2
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f002 fe92 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8013ae4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ae8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013aec:	881a      	ldrh	r2, [r3, #0]
 8013aee:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013af2:	f103 0320 	add.w	r3, r3, #32
 8013af6:	3b0c      	subs	r3, #12
 8013af8:	4611      	mov	r1, r2
 8013afa:	4618      	mov	r0, r3
 8013afc:	f002 fe84 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8013b00:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013b04:	3b14      	subs	r3, #20
 8013b06:	2101      	movs	r1, #1
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f002 fe7d 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8013b0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013b12:	3b3c      	subs	r3, #60	; 0x3c
 8013b14:	2103      	movs	r1, #3
 8013b16:	4618      	mov	r0, r3
 8013b18:	f002 fe76 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8013b1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013b20:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013b24:	881a      	ldrh	r2, [r3, #0]
 8013b26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013b2a:	3b64      	subs	r3, #100	; 0x64
 8013b2c:	4611      	mov	r1, r2
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f002 fe6a 	bl	8016808 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8013b34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013b38:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013b3c:	881b      	ldrh	r3, [r3, #0]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d130      	bne.n	8013ba4 <create_DijkstraMap+0x970>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013b42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013b46:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013b54:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013b58:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013b5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013b5e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b66:	2b05      	cmp	r3, #5
 8013b68:	dd05      	ble.n	8013b76 <create_DijkstraMap+0x942>
 8013b6a:	2305      	movs	r3, #5
 8013b6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013b70:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013b74:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8013b76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013b7a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013b7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013b82:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013b86:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013b8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013b8e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013b92:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013b96:	8013      	strh	r3, [r2, #0]
 8013b98:	e014      	b.n	8013bc4 <create_DijkstraMap+0x990>
 8013b9a:	bf00      	nop
 8013b9c:	20001010 	.word	0x20001010
 8013ba0:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013ba4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013ba8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013bac:	881b      	ldrh	r3, [r3, #0]
 8013bae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013bb2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013bb6:	8013      	strh	r3, [r2, #0]
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013bbe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013bc2:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8013bc4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013bc8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013bcc:	881b      	ldrh	r3, [r3, #0]
 8013bce:	4a6f      	ldr	r2, [pc, #444]	; (8013d8c <create_DijkstraMap+0xb58>)
 8013bd0:	330e      	adds	r3, #14
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	4413      	add	r3, r2
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013bdc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013be0:	8812      	ldrh	r2, [r2, #0]
 8013be2:	3201      	adds	r2, #1
 8013be4:	2101      	movs	r1, #1
 8013be6:	fa01 f202 	lsl.w	r2, r1, r2
 8013bea:	4013      	ands	r3, r2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f040 8092 	bne.w	8013d16 <create_DijkstraMap+0xae2>
 8013bf2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013bf6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013bfa:	881b      	ldrh	r3, [r3, #0]
 8013bfc:	1c5a      	adds	r2, r3, #1
 8013bfe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c02:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013c06:	8819      	ldrh	r1, [r3, #0]
 8013c08:	4861      	ldr	r0, [pc, #388]	; (8013d90 <create_DijkstraMap+0xb5c>)
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	011b      	lsls	r3, r3, #4
 8013c0e:	1a9b      	subs	r3, r3, r2
 8013c10:	440b      	add	r3, r1
 8013c12:	33f0      	adds	r3, #240	; 0xf0
 8013c14:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013c18:	461c      	mov	r4, r3
 8013c1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c1e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013c22:	881a      	ldrh	r2, [r3, #0]
 8013c24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c28:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013c2c:	8819      	ldrh	r1, [r3, #0]
 8013c2e:	4858      	ldr	r0, [pc, #352]	; (8013d90 <create_DijkstraMap+0xb5c>)
 8013c30:	4613      	mov	r3, r2
 8013c32:	011b      	lsls	r3, r3, #4
 8013c34:	1a9b      	subs	r3, r3, r2
 8013c36:	440b      	add	r3, r1
 8013c38:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c42:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	429c      	cmp	r4, r3
 8013c4e:	dd62      	ble.n	8013d16 <create_DijkstraMap+0xae2>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8013c50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c54:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013c58:	881a      	ldrh	r2, [r3, #0]
 8013c5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c5e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013c62:	8819      	ldrh	r1, [r3, #0]
 8013c64:	484a      	ldr	r0, [pc, #296]	; (8013d90 <create_DijkstraMap+0xb5c>)
 8013c66:	4613      	mov	r3, r2
 8013c68:	011b      	lsls	r3, r3, #4
 8013c6a:	1a9b      	subs	r3, r3, r2
 8013c6c:	440b      	add	r3, r1
 8013c6e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013c72:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c76:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013c80:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013c84:	8812      	ldrh	r2, [r2, #0]
 8013c86:	3201      	adds	r2, #1
 8013c88:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013c8c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8013c90:	8809      	ldrh	r1, [r1, #0]
 8013c92:	4403      	add	r3, r0
 8013c94:	b29c      	uxth	r4, r3
 8013c96:	483e      	ldr	r0, [pc, #248]	; (8013d90 <create_DijkstraMap+0xb5c>)
 8013c98:	4613      	mov	r3, r2
 8013c9a:	011b      	lsls	r3, r3, #4
 8013c9c:	1a9b      	subs	r3, r3, r2
 8013c9e:	440b      	add	r3, r1
 8013ca0:	33f0      	adds	r3, #240	; 0xf0
 8013ca2:	4622      	mov	r2, r4
 8013ca4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8013ca8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013cac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013cb0:	881a      	ldrh	r2, [r3, #0]
 8013cb2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013cb6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013cba:	4611      	mov	r1, r2
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f002 fda3 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8013cc2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013cc6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013cca:	881b      	ldrh	r3, [r3, #0]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013cd4:	f103 0320 	add.w	r3, r3, #32
 8013cd8:	3b0c      	subs	r3, #12
 8013cda:	4611      	mov	r1, r2
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f002 fd93 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8013ce2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013ce6:	3b14      	subs	r3, #20
 8013ce8:	2101      	movs	r1, #1
 8013cea:	4618      	mov	r0, r3
 8013cec:	f002 fd8c 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8013cf0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013cf4:	3b3c      	subs	r3, #60	; 0x3c
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f002 fd85 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8013cfe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d02:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013d06:	881a      	ldrh	r2, [r3, #0]
 8013d08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013d0c:	3b64      	subs	r3, #100	; 0x64
 8013d0e:	4611      	mov	r1, r2
 8013d10:	4618      	mov	r0, r3
 8013d12:	f002 fd79 	bl	8016808 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8013d16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d1a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 81e5 	beq.w	80140f0 <create_DijkstraMap+0xebc>
				if(Direction==SLANT_SOUTH_WEST){
 8013d26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d2a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	2b05      	cmp	r3, #5
 8013d32:	d12f      	bne.n	8013d94 <create_DijkstraMap+0xb60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013d34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d38:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013d3c:	881b      	ldrh	r3, [r3, #0]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013d46:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013d4a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013d4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d50:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d58:	2b05      	cmp	r3, #5
 8013d5a:	dd05      	ble.n	8013d68 <create_DijkstraMap+0xb34>
 8013d5c:	2305      	movs	r3, #5
 8013d5e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013d62:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013d66:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8013d68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d6c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013d70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013d74:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013d78:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013d7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013d80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013d84:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013d88:	8013      	strh	r3, [r2, #0]
 8013d8a:	e013      	b.n	8013db4 <create_DijkstraMap+0xb80>
 8013d8c:	20001010 	.word	0x20001010
 8013d90:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013d94:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013d98:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013d9c:	881b      	ldrh	r3, [r3, #0]
 8013d9e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013da2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013da6:	8013      	strh	r3, [r2, #0]
 8013da8:	2300      	movs	r3, #0
 8013daa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013dae:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013db2:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8013db4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013db8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	4a6a      	ldr	r2, [pc, #424]	; (8013f6c <create_DijkstraMap+0xd38>)
 8013dc2:	330e      	adds	r3, #14
 8013dc4:	009b      	lsls	r3, r3, #2
 8013dc6:	4413      	add	r3, r2
 8013dc8:	685b      	ldr	r3, [r3, #4]
 8013dca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013dce:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013dd2:	8812      	ldrh	r2, [r2, #0]
 8013dd4:	2101      	movs	r1, #1
 8013dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8013dda:	4013      	ands	r3, r2
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	f040 8092 	bne.w	8013f06 <create_DijkstraMap+0xcd2>
 8013de2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013de6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013dea:	881a      	ldrh	r2, [r3, #0]
 8013dec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013df0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013df4:	881b      	ldrh	r3, [r3, #0]
 8013df6:	1e59      	subs	r1, r3, #1
 8013df8:	485d      	ldr	r0, [pc, #372]	; (8013f70 <create_DijkstraMap+0xd3c>)
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	011b      	lsls	r3, r3, #4
 8013dfe:	1a9b      	subs	r3, r3, r2
 8013e00:	440b      	add	r3, r1
 8013e02:	33f0      	adds	r3, #240	; 0xf0
 8013e04:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013e08:	461c      	mov	r4, r3
 8013e0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e0e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013e12:	881a      	ldrh	r2, [r3, #0]
 8013e14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e18:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013e1c:	8819      	ldrh	r1, [r3, #0]
 8013e1e:	4854      	ldr	r0, [pc, #336]	; (8013f70 <create_DijkstraMap+0xd3c>)
 8013e20:	4613      	mov	r3, r2
 8013e22:	011b      	lsls	r3, r3, #4
 8013e24:	1a9b      	subs	r3, r3, r2
 8013e26:	440b      	add	r3, r1
 8013e28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e32:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	429c      	cmp	r4, r3
 8013e3e:	dd62      	ble.n	8013f06 <create_DijkstraMap+0xcd2>
					Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8013e40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e44:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013e48:	881a      	ldrh	r2, [r3, #0]
 8013e4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e4e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013e52:	8819      	ldrh	r1, [r3, #0]
 8013e54:	4846      	ldr	r0, [pc, #280]	; (8013f70 <create_DijkstraMap+0xd3c>)
 8013e56:	4613      	mov	r3, r2
 8013e58:	011b      	lsls	r3, r3, #4
 8013e5a:	1a9b      	subs	r3, r3, r2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013e62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e66:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013e70:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013e74:	8812      	ldrh	r2, [r2, #0]
 8013e76:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013e7a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8013e7e:	8809      	ldrh	r1, [r1, #0]
 8013e80:	3901      	subs	r1, #1
 8013e82:	4403      	add	r3, r0
 8013e84:	b29c      	uxth	r4, r3
 8013e86:	483a      	ldr	r0, [pc, #232]	; (8013f70 <create_DijkstraMap+0xd3c>)
 8013e88:	4613      	mov	r3, r2
 8013e8a:	011b      	lsls	r3, r3, #4
 8013e8c:	1a9b      	subs	r3, r3, r2
 8013e8e:	440b      	add	r3, r1
 8013e90:	33f0      	adds	r3, #240	; 0xf0
 8013e92:	4622      	mov	r2, r4
 8013e94:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8013e98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e9c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	3b01      	subs	r3, #1
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013eaa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013eae:	4611      	mov	r1, r2
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f002 fca9 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8013eb6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013eba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013ebe:	881a      	ldrh	r2, [r3, #0]
 8013ec0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013ec4:	f103 0320 	add.w	r3, r3, #32
 8013ec8:	3b0c      	subs	r3, #12
 8013eca:	4611      	mov	r1, r2
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f002 fc9b 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8013ed2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013ed6:	3b14      	subs	r3, #20
 8013ed8:	2101      	movs	r1, #1
 8013eda:	4618      	mov	r0, r3
 8013edc:	f002 fc94 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8013ee0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013ee4:	3b3c      	subs	r3, #60	; 0x3c
 8013ee6:	2105      	movs	r1, #5
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f002 fc8d 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8013eee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ef2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013ef6:	881a      	ldrh	r2, [r3, #0]
 8013ef8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013efc:	3b64      	subs	r3, #100	; 0x64
 8013efe:	4611      	mov	r1, r2
 8013f00:	4618      	mov	r0, r3
 8013f02:	f002 fc81 	bl	8016808 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8013f06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f0a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013f0e:	881b      	ldrh	r3, [r3, #0]
 8013f10:	2b07      	cmp	r3, #7
 8013f12:	d12f      	bne.n	8013f74 <create_DijkstraMap+0xd40>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013f14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f18:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013f1c:	881b      	ldrh	r3, [r3, #0]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013f26:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013f2a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013f2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f30:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f38:	2b05      	cmp	r3, #5
 8013f3a:	dd05      	ble.n	8013f48 <create_DijkstraMap+0xd14>
 8013f3c:	2305      	movs	r3, #5
 8013f3e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013f42:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013f46:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8013f48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f4c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013f50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f54:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013f58:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013f5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013f60:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013f64:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013f68:	8013      	strh	r3, [r2, #0]
 8013f6a:	e013      	b.n	8013f94 <create_DijkstraMap+0xd60>
 8013f6c:	20001010 	.word	0x20001010
 8013f70:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013f74:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013f78:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013f82:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013f86:	8013      	strh	r3, [r2, #0]
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013f8e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013f92:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8013f94:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f98:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013f9c:	881b      	ldrh	r3, [r3, #0]
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	4a75      	ldr	r2, [pc, #468]	; (8014178 <create_DijkstraMap+0xf44>)
 8013fa2:	330e      	adds	r3, #14
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	4413      	add	r3, r2
 8013fa8:	685b      	ldr	r3, [r3, #4]
 8013faa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013fae:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013fb2:	8812      	ldrh	r2, [r2, #0]
 8013fb4:	3201      	adds	r2, #1
 8013fb6:	2101      	movs	r1, #1
 8013fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f040 8096 	bne.w	80140f0 <create_DijkstraMap+0xebc>
 8013fc4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013fc8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013fcc:	881b      	ldrh	r3, [r3, #0]
 8013fce:	1c5a      	adds	r2, r3, #1
 8013fd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013fd4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013fd8:	881b      	ldrh	r3, [r3, #0]
 8013fda:	1e59      	subs	r1, r3, #1
 8013fdc:	4867      	ldr	r0, [pc, #412]	; (801417c <create_DijkstraMap+0xf48>)
 8013fde:	4613      	mov	r3, r2
 8013fe0:	011b      	lsls	r3, r3, #4
 8013fe2:	1a9b      	subs	r3, r3, r2
 8013fe4:	440b      	add	r3, r1
 8013fe6:	33f0      	adds	r3, #240	; 0xf0
 8013fe8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013fec:	461c      	mov	r4, r3
 8013fee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ff2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013ff6:	881a      	ldrh	r2, [r3, #0]
 8013ff8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ffc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014000:	8819      	ldrh	r1, [r3, #0]
 8014002:	485e      	ldr	r0, [pc, #376]	; (801417c <create_DijkstraMap+0xf48>)
 8014004:	4613      	mov	r3, r2
 8014006:	011b      	lsls	r3, r3, #4
 8014008:	1a9b      	subs	r3, r3, r2
 801400a:	440b      	add	r3, r1
 801400c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8014010:	461a      	mov	r2, r3
 8014012:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014016:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801401a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801401e:	4413      	add	r3, r2
 8014020:	429c      	cmp	r4, r3
 8014022:	dd65      	ble.n	80140f0 <create_DijkstraMap+0xebc>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8014024:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014028:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801402c:	881a      	ldrh	r2, [r3, #0]
 801402e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014032:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014036:	8819      	ldrh	r1, [r3, #0]
 8014038:	4850      	ldr	r0, [pc, #320]	; (801417c <create_DijkstraMap+0xf48>)
 801403a:	4613      	mov	r3, r2
 801403c:	011b      	lsls	r3, r3, #4
 801403e:	1a9b      	subs	r3, r3, r2
 8014040:	440b      	add	r3, r1
 8014042:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014046:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801404a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014054:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8014058:	8812      	ldrh	r2, [r2, #0]
 801405a:	3201      	adds	r2, #1
 801405c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8014060:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8014064:	8809      	ldrh	r1, [r1, #0]
 8014066:	3901      	subs	r1, #1
 8014068:	4403      	add	r3, r0
 801406a:	b29c      	uxth	r4, r3
 801406c:	4843      	ldr	r0, [pc, #268]	; (801417c <create_DijkstraMap+0xf48>)
 801406e:	4613      	mov	r3, r2
 8014070:	011b      	lsls	r3, r3, #4
 8014072:	1a9b      	subs	r3, r3, r2
 8014074:	440b      	add	r3, r1
 8014076:	33f0      	adds	r3, #240	; 0xf0
 8014078:	4622      	mov	r2, r4
 801407a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801407e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014082:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014086:	881b      	ldrh	r3, [r3, #0]
 8014088:	3b01      	subs	r3, #1
 801408a:	b29a      	uxth	r2, r3
 801408c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8014090:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f002 fbb6 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 801409c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80140a0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	3301      	adds	r3, #1
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80140ae:	f103 0320 	add.w	r3, r3, #32
 80140b2:	3b0c      	subs	r3, #12
 80140b4:	4611      	mov	r1, r2
 80140b6:	4618      	mov	r0, r3
 80140b8:	f002 fba6 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 80140bc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80140c0:	3b14      	subs	r3, #20
 80140c2:	2101      	movs	r1, #1
 80140c4:	4618      	mov	r0, r3
 80140c6:	f002 fb9f 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80140ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80140ce:	3b3c      	subs	r3, #60	; 0x3c
 80140d0:	2107      	movs	r1, #7
 80140d2:	4618      	mov	r0, r3
 80140d4:	f002 fb98 	bl	8016808 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80140d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80140dc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80140e0:	881a      	ldrh	r2, [r3, #0]
 80140e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140e6:	3b64      	subs	r3, #100	; 0x64
 80140e8:	4611      	mov	r1, r2
 80140ea:	4618      	mov	r0, r3
 80140ec:	f002 fb8c 	bl	8016808 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==COLUMN){
 80140f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80140f4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	f040 85ba 	bne.w	8014c74 <create_DijkstraMap+0x1a40>
					if(Xcoordinate <= 13){
 8014100:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014104:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	2b0d      	cmp	r3, #13
 801410c:	f200 80f3 	bhi.w	80142f6 <create_DijkstraMap+0x10c2>
						if(Direction==SLANT_EAST){
 8014110:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014114:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8014118:	881b      	ldrh	r3, [r3, #0]
 801411a:	2b02      	cmp	r3, #2
 801411c:	d130      	bne.n	8014180 <create_DijkstraMap+0xf4c>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801411e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014122:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	3301      	adds	r3, #1
 801412a:	b29b      	uxth	r3, r3
 801412c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014130:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014134:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8014136:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801413a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801413e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014142:	2b04      	cmp	r3, #4
 8014144:	dd05      	ble.n	8014152 <create_DijkstraMap+0xf1e>
 8014146:	2304      	movs	r3, #4
 8014148:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801414c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014150:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8014152:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014156:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801415a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801415e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014162:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8014166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801416a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801416e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8014172:	8013      	strh	r3, [r2, #0]
 8014174:	e014      	b.n	80141a0 <create_DijkstraMap+0xf6c>
 8014176:	bf00      	nop
 8014178:	20001010 	.word	0x20001010
 801417c:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8014180:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014184:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801418e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8014192:	8013      	strh	r3, [r2, #0]
 8014194:	2300      	movs	r3, #0
 8014196:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801419a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801419e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate+1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80141a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80141a4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	3301      	adds	r3, #1
 80141ac:	4a6f      	ldr	r2, [pc, #444]	; (801436c <create_DijkstraMap+0x1138>)
 80141ae:	330e      	adds	r3, #14
 80141b0:	009b      	lsls	r3, r3, #2
 80141b2:	4413      	add	r3, r2
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80141ba:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80141be:	8812      	ldrh	r2, [r2, #0]
 80141c0:	2101      	movs	r1, #1
 80141c2:	fa01 f202 	lsl.w	r2, r1, r2
 80141c6:	4013      	ands	r3, r2
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f040 8094 	bne.w	80142f6 <create_DijkstraMap+0x10c2>
 80141ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80141d2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80141d6:	881a      	ldrh	r2, [r3, #0]
 80141d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80141dc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80141e0:	881b      	ldrh	r3, [r3, #0]
 80141e2:	1c59      	adds	r1, r3, #1
 80141e4:	4862      	ldr	r0, [pc, #392]	; (8014370 <create_DijkstraMap+0x113c>)
 80141e6:	4613      	mov	r3, r2
 80141e8:	011b      	lsls	r3, r3, #4
 80141ea:	1a9b      	subs	r3, r3, r2
 80141ec:	440b      	add	r3, r1
 80141ee:	33f0      	adds	r3, #240	; 0xf0
 80141f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80141f4:	461c      	mov	r4, r3
 80141f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80141fa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80141fe:	881a      	ldrh	r2, [r3, #0]
 8014200:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014204:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014208:	8819      	ldrh	r1, [r3, #0]
 801420a:	4859      	ldr	r0, [pc, #356]	; (8014370 <create_DijkstraMap+0x113c>)
 801420c:	4613      	mov	r3, r2
 801420e:	011b      	lsls	r3, r3, #4
 8014210:	1a9b      	subs	r3, r3, r2
 8014212:	440b      	add	r3, r1
 8014214:	33f0      	adds	r3, #240	; 0xf0
 8014216:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801421a:	461a      	mov	r2, r3
 801421c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014220:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8014224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014228:	4413      	add	r3, r2
 801422a:	429c      	cmp	r4, r3
 801422c:	dd63      	ble.n	80142f6 <create_DijkstraMap+0x10c2>
							Dijkstra.column_count[Ycoordinate][Xcoordinate+1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801422e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014232:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014236:	881a      	ldrh	r2, [r3, #0]
 8014238:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801423c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014240:	8819      	ldrh	r1, [r3, #0]
 8014242:	484b      	ldr	r0, [pc, #300]	; (8014370 <create_DijkstraMap+0x113c>)
 8014244:	4613      	mov	r3, r2
 8014246:	011b      	lsls	r3, r3, #4
 8014248:	1a9b      	subs	r3, r3, r2
 801424a:	440b      	add	r3, r1
 801424c:	33f0      	adds	r3, #240	; 0xf0
 801424e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014252:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014256:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801425a:	881b      	ldrh	r3, [r3, #0]
 801425c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014260:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8014264:	8812      	ldrh	r2, [r2, #0]
 8014266:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801426a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801426e:	8809      	ldrh	r1, [r1, #0]
 8014270:	3101      	adds	r1, #1
 8014272:	4403      	add	r3, r0
 8014274:	b29c      	uxth	r4, r3
 8014276:	483e      	ldr	r0, [pc, #248]	; (8014370 <create_DijkstraMap+0x113c>)
 8014278:	4613      	mov	r3, r2
 801427a:	011b      	lsls	r3, r3, #4
 801427c:	1a9b      	subs	r3, r3, r2
 801427e:	440b      	add	r3, r1
 8014280:	33f0      	adds	r3, #240	; 0xf0
 8014282:	4622      	mov	r2, r4
 8014284:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8014288:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801428c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	3301      	adds	r3, #1
 8014294:	b29a      	uxth	r2, r3
 8014296:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801429a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801429e:	4611      	mov	r1, r2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f002 fab1 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80142a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80142aa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80142ae:	881a      	ldrh	r2, [r3, #0]
 80142b0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80142b4:	f103 0320 	add.w	r3, r3, #32
 80142b8:	3b0c      	subs	r3, #12
 80142ba:	4611      	mov	r1, r2
 80142bc:	4618      	mov	r0, r3
 80142be:	f002 faa3 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80142c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80142c6:	3b14      	subs	r3, #20
 80142c8:	2101      	movs	r1, #1
 80142ca:	4618      	mov	r0, r3
 80142cc:	f002 fa9c 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80142d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80142d4:	3b3c      	subs	r3, #60	; 0x3c
 80142d6:	2102      	movs	r1, #2
 80142d8:	4618      	mov	r0, r3
 80142da:	f002 fa95 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80142de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80142e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80142e6:	881a      	ldrh	r2, [r3, #0]
 80142e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80142ec:	3b64      	subs	r3, #100	; 0x64
 80142ee:	4611      	mov	r1, r2
 80142f0:	4618      	mov	r0, r3
 80142f2:	f002 fa89 	bl	8016808 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80142f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80142fa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80142fe:	881b      	ldrh	r3, [r3, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	f000 80f2 	beq.w	80144ea <create_DijkstraMap+0x12b6>
						if(Direction==SLANT_WEST){
 8014306:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801430a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	2b06      	cmp	r3, #6
 8014312:	d12f      	bne.n	8014374 <create_DijkstraMap+0x1140>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8014314:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014318:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801431c:	881b      	ldrh	r3, [r3, #0]
 801431e:	3301      	adds	r3, #1
 8014320:	b29b      	uxth	r3, r3
 8014322:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014326:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801432a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801432c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014330:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014338:	2b04      	cmp	r3, #4
 801433a:	dd05      	ble.n	8014348 <create_DijkstraMap+0x1114>
 801433c:	2304      	movs	r3, #4
 801433e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014342:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014346:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8014348:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801434c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014350:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014354:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014358:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801435c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014360:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014364:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8014368:	8013      	strh	r3, [r2, #0]
 801436a:	e013      	b.n	8014394 <create_DijkstraMap+0x1160>
 801436c:	20001010 	.word	0x20001010
 8014370:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8014374:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014378:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801437c:	881b      	ldrh	r3, [r3, #0]
 801437e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014382:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8014386:	8013      	strh	r3, [r2, #0]
 8014388:	2300      	movs	r3, #0
 801438a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801438e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014392:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8014394:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014398:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801439c:	881b      	ldrh	r3, [r3, #0]
 801439e:	3b01      	subs	r3, #1
 80143a0:	4a6f      	ldr	r2, [pc, #444]	; (8014560 <create_DijkstraMap+0x132c>)
 80143a2:	330e      	adds	r3, #14
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80143ae:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80143b2:	8812      	ldrh	r2, [r2, #0]
 80143b4:	2101      	movs	r1, #1
 80143b6:	fa01 f202 	lsl.w	r2, r1, r2
 80143ba:	4013      	ands	r3, r2
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f040 8094 	bne.w	80144ea <create_DijkstraMap+0x12b6>
 80143c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80143c6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80143ca:	881a      	ldrh	r2, [r3, #0]
 80143cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80143d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	1e59      	subs	r1, r3, #1
 80143d8:	4862      	ldr	r0, [pc, #392]	; (8014564 <create_DijkstraMap+0x1330>)
 80143da:	4613      	mov	r3, r2
 80143dc:	011b      	lsls	r3, r3, #4
 80143de:	1a9b      	subs	r3, r3, r2
 80143e0:	440b      	add	r3, r1
 80143e2:	33f0      	adds	r3, #240	; 0xf0
 80143e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80143e8:	461c      	mov	r4, r3
 80143ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80143ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80143f2:	881a      	ldrh	r2, [r3, #0]
 80143f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80143f8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80143fc:	8819      	ldrh	r1, [r3, #0]
 80143fe:	4859      	ldr	r0, [pc, #356]	; (8014564 <create_DijkstraMap+0x1330>)
 8014400:	4613      	mov	r3, r2
 8014402:	011b      	lsls	r3, r3, #4
 8014404:	1a9b      	subs	r3, r3, r2
 8014406:	440b      	add	r3, r1
 8014408:	33f0      	adds	r3, #240	; 0xf0
 801440a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801440e:	461a      	mov	r2, r3
 8014410:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014414:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8014418:	f9b3 3000 	ldrsh.w	r3, [r3]
 801441c:	4413      	add	r3, r2
 801441e:	429c      	cmp	r4, r3
 8014420:	dd63      	ble.n	80144ea <create_DijkstraMap+0x12b6>
							Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8014422:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014426:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801442a:	881a      	ldrh	r2, [r3, #0]
 801442c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014430:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014434:	8819      	ldrh	r1, [r3, #0]
 8014436:	484b      	ldr	r0, [pc, #300]	; (8014564 <create_DijkstraMap+0x1330>)
 8014438:	4613      	mov	r3, r2
 801443a:	011b      	lsls	r3, r3, #4
 801443c:	1a9b      	subs	r3, r3, r2
 801443e:	440b      	add	r3, r1
 8014440:	33f0      	adds	r3, #240	; 0xf0
 8014442:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014446:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801444a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801444e:	881b      	ldrh	r3, [r3, #0]
 8014450:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014454:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8014458:	8812      	ldrh	r2, [r2, #0]
 801445a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801445e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8014462:	8809      	ldrh	r1, [r1, #0]
 8014464:	3901      	subs	r1, #1
 8014466:	4403      	add	r3, r0
 8014468:	b29c      	uxth	r4, r3
 801446a:	483e      	ldr	r0, [pc, #248]	; (8014564 <create_DijkstraMap+0x1330>)
 801446c:	4613      	mov	r3, r2
 801446e:	011b      	lsls	r3, r3, #4
 8014470:	1a9b      	subs	r3, r3, r2
 8014472:	440b      	add	r3, r1
 8014474:	33f0      	adds	r3, #240	; 0xf0
 8014476:	4622      	mov	r2, r4
 8014478:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801447c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014480:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	3b01      	subs	r3, #1
 8014488:	b29a      	uxth	r2, r3
 801448a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801448e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014492:	4611      	mov	r1, r2
 8014494:	4618      	mov	r0, r3
 8014496:	f002 f9b7 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801449a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801449e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80144a2:	881a      	ldrh	r2, [r3, #0]
 80144a4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80144a8:	f103 0320 	add.w	r3, r3, #32
 80144ac:	3b0c      	subs	r3, #12
 80144ae:	4611      	mov	r1, r2
 80144b0:	4618      	mov	r0, r3
 80144b2:	f002 f9a9 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80144b6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80144ba:	3b14      	subs	r3, #20
 80144bc:	2101      	movs	r1, #1
 80144be:	4618      	mov	r0, r3
 80144c0:	f002 f9a2 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80144c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80144c8:	3b3c      	subs	r3, #60	; 0x3c
 80144ca:	2106      	movs	r1, #6
 80144cc:	4618      	mov	r0, r3
 80144ce:	f002 f99b 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80144d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80144d6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80144da:	881a      	ldrh	r2, [r3, #0]
 80144dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80144e0:	3b64      	subs	r3, #100	; 0x64
 80144e2:	4611      	mov	r1, r2
 80144e4:	4618      	mov	r0, r3
 80144e6:	f002 f98f 	bl	8016808 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80144ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80144ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80144f2:	881b      	ldrh	r3, [r3, #0]
 80144f4:	2b0e      	cmp	r3, #14
 80144f6:	f200 81d8 	bhi.w	80148aa <create_DijkstraMap+0x1676>
						if(Direction==SLANT_NORTH_WEST){
 80144fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80144fe:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8014502:	881b      	ldrh	r3, [r3, #0]
 8014504:	2b07      	cmp	r3, #7
 8014506:	d12f      	bne.n	8014568 <create_DijkstraMap+0x1334>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8014508:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801450c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	3301      	adds	r3, #1
 8014514:	b29b      	uxth	r3, r3
 8014516:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801451a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801451e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8014520:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014524:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801452c:	2b05      	cmp	r3, #5
 801452e:	dd05      	ble.n	801453c <create_DijkstraMap+0x1308>
 8014530:	2305      	movs	r3, #5
 8014532:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014536:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801453a:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801453c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014540:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014544:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014548:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801454c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014550:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014554:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014558:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801455c:	8013      	strh	r3, [r2, #0]
 801455e:	e013      	b.n	8014588 <create_DijkstraMap+0x1354>
 8014560:	20001010 	.word	0x20001010
 8014564:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8014568:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801456c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014576:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801457a:	8013      	strh	r3, [r2, #0]
 801457c:	2300      	movs	r3, #0
 801457e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014582:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014586:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8014588:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801458c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	4a68      	ldr	r2, [pc, #416]	; (8014734 <create_DijkstraMap+0x1500>)
 8014594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014598:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801459c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80145a0:	8812      	ldrh	r2, [r2, #0]
 80145a2:	2101      	movs	r1, #1
 80145a4:	fa01 f202 	lsl.w	r2, r1, r2
 80145a8:	4013      	ands	r3, r2
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	f040 808e 	bne.w	80146cc <create_DijkstraMap+0x1498>
 80145b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80145b4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80145b8:	881a      	ldrh	r2, [r3, #0]
 80145ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80145be:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80145c2:	8819      	ldrh	r1, [r3, #0]
 80145c4:	485c      	ldr	r0, [pc, #368]	; (8014738 <create_DijkstraMap+0x1504>)
 80145c6:	4613      	mov	r3, r2
 80145c8:	011b      	lsls	r3, r3, #4
 80145ca:	1a9b      	subs	r3, r3, r2
 80145cc:	440b      	add	r3, r1
 80145ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80145d2:	461c      	mov	r4, r3
 80145d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80145d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80145dc:	881a      	ldrh	r2, [r3, #0]
 80145de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80145e2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80145e6:	8819      	ldrh	r1, [r3, #0]
 80145e8:	4853      	ldr	r0, [pc, #332]	; (8014738 <create_DijkstraMap+0x1504>)
 80145ea:	4613      	mov	r3, r2
 80145ec:	011b      	lsls	r3, r3, #4
 80145ee:	1a9b      	subs	r3, r3, r2
 80145f0:	440b      	add	r3, r1
 80145f2:	33f0      	adds	r3, #240	; 0xf0
 80145f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80145f8:	461a      	mov	r2, r3
 80145fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80145fe:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8014602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014606:	4413      	add	r3, r2
 8014608:	429c      	cmp	r4, r3
 801460a:	dd5f      	ble.n	80146cc <create_DijkstraMap+0x1498>
							Dijkstra.row_count[Xcoordinate][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801460c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014610:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014614:	881a      	ldrh	r2, [r3, #0]
 8014616:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801461a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801461e:	8819      	ldrh	r1, [r3, #0]
 8014620:	4845      	ldr	r0, [pc, #276]	; (8014738 <create_DijkstraMap+0x1504>)
 8014622:	4613      	mov	r3, r2
 8014624:	011b      	lsls	r3, r3, #4
 8014626:	1a9b      	subs	r3, r3, r2
 8014628:	440b      	add	r3, r1
 801462a:	33f0      	adds	r3, #240	; 0xf0
 801462c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014630:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014634:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801463e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014642:	8812      	ldrh	r2, [r2, #0]
 8014644:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8014648:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 801464c:	8809      	ldrh	r1, [r1, #0]
 801464e:	4403      	add	r3, r0
 8014650:	b29c      	uxth	r4, r3
 8014652:	4839      	ldr	r0, [pc, #228]	; (8014738 <create_DijkstraMap+0x1504>)
 8014654:	4613      	mov	r3, r2
 8014656:	011b      	lsls	r3, r3, #4
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	440b      	add	r3, r1
 801465c:	4622      	mov	r2, r4
 801465e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8014662:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014666:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801466a:	881a      	ldrh	r2, [r3, #0]
 801466c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8014670:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014674:	4611      	mov	r1, r2
 8014676:	4618      	mov	r0, r3
 8014678:	f002 f8c6 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801467c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014680:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014684:	881a      	ldrh	r2, [r3, #0]
 8014686:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801468a:	f103 0320 	add.w	r3, r3, #32
 801468e:	3b0c      	subs	r3, #12
 8014690:	4611      	mov	r1, r2
 8014692:	4618      	mov	r0, r3
 8014694:	f002 f8b8 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8014698:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801469c:	3b14      	subs	r3, #20
 801469e:	2100      	movs	r1, #0
 80146a0:	4618      	mov	r0, r3
 80146a2:	f002 f8b1 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80146a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80146aa:	3b3c      	subs	r3, #60	; 0x3c
 80146ac:	2107      	movs	r1, #7
 80146ae:	4618      	mov	r0, r3
 80146b0:	f002 f8aa 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80146b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80146b8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80146bc:	881a      	ldrh	r2, [r3, #0]
 80146be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80146c2:	3b64      	subs	r3, #100	; 0x64
 80146c4:	4611      	mov	r1, r2
 80146c6:	4618      	mov	r0, r3
 80146c8:	f002 f89e 	bl	8016808 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 80146cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80146d0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	2b01      	cmp	r3, #1
 80146d8:	d130      	bne.n	801473c <create_DijkstraMap+0x1508>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80146da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80146de:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80146e2:	881b      	ldrh	r3, [r3, #0]
 80146e4:	3301      	adds	r3, #1
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80146ec:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80146f0:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80146f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80146f6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80146fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146fe:	2b05      	cmp	r3, #5
 8014700:	dd05      	ble.n	801470e <create_DijkstraMap+0x14da>
 8014702:	2305      	movs	r3, #5
 8014704:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014708:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801470c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801470e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014712:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014716:	f9b3 2000 	ldrsh.w	r2, [r3]
 801471a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801471e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014722:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014726:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801472a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801472e:	8013      	strh	r3, [r2, #0]
 8014730:	e014      	b.n	801475c <create_DijkstraMap+0x1528>
 8014732:	bf00      	nop
 8014734:	20001010 	.word	0x20001010
 8014738:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801473c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014740:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801474a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801474e:	8013      	strh	r3, [r2, #0]
 8014750:	2300      	movs	r3, #0
 8014752:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014756:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801475a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801475c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014760:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	4a6e      	ldr	r2, [pc, #440]	; (8014920 <create_DijkstraMap+0x16ec>)
 8014768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801476c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014770:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014774:	8812      	ldrh	r2, [r2, #0]
 8014776:	3201      	adds	r2, #1
 8014778:	2101      	movs	r1, #1
 801477a:	fa01 f202 	lsl.w	r2, r1, r2
 801477e:	4013      	ands	r3, r2
 8014780:	2b00      	cmp	r3, #0
 8014782:	f040 8092 	bne.w	80148aa <create_DijkstraMap+0x1676>
 8014786:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801478a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	1c5a      	adds	r2, r3, #1
 8014792:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014796:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801479a:	8819      	ldrh	r1, [r3, #0]
 801479c:	4861      	ldr	r0, [pc, #388]	; (8014924 <create_DijkstraMap+0x16f0>)
 801479e:	4613      	mov	r3, r2
 80147a0:	011b      	lsls	r3, r3, #4
 80147a2:	1a9b      	subs	r3, r3, r2
 80147a4:	440b      	add	r3, r1
 80147a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80147aa:	461c      	mov	r4, r3
 80147ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80147b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80147b4:	881a      	ldrh	r2, [r3, #0]
 80147b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80147ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80147be:	8819      	ldrh	r1, [r3, #0]
 80147c0:	4858      	ldr	r0, [pc, #352]	; (8014924 <create_DijkstraMap+0x16f0>)
 80147c2:	4613      	mov	r3, r2
 80147c4:	011b      	lsls	r3, r3, #4
 80147c6:	1a9b      	subs	r3, r3, r2
 80147c8:	440b      	add	r3, r1
 80147ca:	33f0      	adds	r3, #240	; 0xf0
 80147cc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80147d0:	461a      	mov	r2, r3
 80147d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80147d6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80147da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147de:	4413      	add	r3, r2
 80147e0:	429c      	cmp	r4, r3
 80147e2:	dd62      	ble.n	80148aa <create_DijkstraMap+0x1676>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80147e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80147e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80147ec:	881a      	ldrh	r2, [r3, #0]
 80147ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80147f2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80147f6:	8819      	ldrh	r1, [r3, #0]
 80147f8:	484a      	ldr	r0, [pc, #296]	; (8014924 <create_DijkstraMap+0x16f0>)
 80147fa:	4613      	mov	r3, r2
 80147fc:	011b      	lsls	r3, r3, #4
 80147fe:	1a9b      	subs	r3, r3, r2
 8014800:	440b      	add	r3, r1
 8014802:	33f0      	adds	r3, #240	; 0xf0
 8014804:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014808:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801480c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8014810:	881b      	ldrh	r3, [r3, #0]
 8014812:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014816:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801481a:	8812      	ldrh	r2, [r2, #0]
 801481c:	3201      	adds	r2, #1
 801481e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8014822:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8014826:	8809      	ldrh	r1, [r1, #0]
 8014828:	4403      	add	r3, r0
 801482a:	b29c      	uxth	r4, r3
 801482c:	483d      	ldr	r0, [pc, #244]	; (8014924 <create_DijkstraMap+0x16f0>)
 801482e:	4613      	mov	r3, r2
 8014830:	011b      	lsls	r3, r3, #4
 8014832:	1a9b      	subs	r3, r3, r2
 8014834:	440b      	add	r3, r1
 8014836:	4622      	mov	r2, r4
 8014838:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801483c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014840:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	3301      	adds	r3, #1
 8014848:	b29a      	uxth	r2, r3
 801484a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801484e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014852:	4611      	mov	r1, r2
 8014854:	4618      	mov	r0, r3
 8014856:	f001 ffd7 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801485a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801485e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014862:	881a      	ldrh	r2, [r3, #0]
 8014864:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014868:	f103 0320 	add.w	r3, r3, #32
 801486c:	3b0c      	subs	r3, #12
 801486e:	4611      	mov	r1, r2
 8014870:	4618      	mov	r0, r3
 8014872:	f001 ffc9 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8014876:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801487a:	3b14      	subs	r3, #20
 801487c:	2100      	movs	r1, #0
 801487e:	4618      	mov	r0, r3
 8014880:	f001 ffc2 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8014884:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014888:	3b3c      	subs	r3, #60	; 0x3c
 801488a:	2101      	movs	r1, #1
 801488c:	4618      	mov	r0, r3
 801488e:	f001 ffbb 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8014892:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014896:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801489a:	881a      	ldrh	r2, [r3, #0]
 801489c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80148a0:	3b64      	subs	r3, #100	; 0x64
 80148a2:	4611      	mov	r1, r2
 80148a4:	4618      	mov	r0, r3
 80148a6:	f001 ffaf 	bl	8016808 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 80148aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80148ae:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 81dd 	beq.w	8014c74 <create_DijkstraMap+0x1a40>
						if(Direction==SLANT_SOUTH_WEST){
 80148ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80148be:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80148c2:	881b      	ldrh	r3, [r3, #0]
 80148c4:	2b05      	cmp	r3, #5
 80148c6:	d12f      	bne.n	8014928 <create_DijkstraMap+0x16f4>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80148c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80148cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	3301      	adds	r3, #1
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80148da:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80148de:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80148e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80148e4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80148e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148ec:	2b05      	cmp	r3, #5
 80148ee:	dd05      	ble.n	80148fc <create_DijkstraMap+0x16c8>
 80148f0:	2305      	movs	r3, #5
 80148f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80148f6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80148fa:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80148fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014900:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014908:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801490c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014910:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014914:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014918:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801491c:	8013      	strh	r3, [r2, #0]
 801491e:	e013      	b.n	8014948 <create_DijkstraMap+0x1714>
 8014920:	20001010 	.word	0x20001010
 8014924:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8014928:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801492c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014930:	881b      	ldrh	r3, [r3, #0]
 8014932:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014936:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801493a:	8013      	strh	r3, [r2, #0]
 801493c:	2300      	movs	r3, #0
 801493e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014942:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014946:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8014948:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801494c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014950:	881b      	ldrh	r3, [r3, #0]
 8014952:	3b01      	subs	r3, #1
 8014954:	4ad1      	ldr	r2, [pc, #836]	; (8014c9c <create_DijkstraMap+0x1a68>)
 8014956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801495a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801495e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014962:	8812      	ldrh	r2, [r2, #0]
 8014964:	2101      	movs	r1, #1
 8014966:	fa01 f202 	lsl.w	r2, r1, r2
 801496a:	4013      	ands	r3, r2
 801496c:	2b00      	cmp	r3, #0
 801496e:	f040 8092 	bne.w	8014a96 <create_DijkstraMap+0x1862>
 8014972:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014976:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801497a:	881a      	ldrh	r2, [r3, #0]
 801497c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014980:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014984:	881b      	ldrh	r3, [r3, #0]
 8014986:	1e59      	subs	r1, r3, #1
 8014988:	48c5      	ldr	r0, [pc, #788]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 801498a:	4613      	mov	r3, r2
 801498c:	011b      	lsls	r3, r3, #4
 801498e:	1a9b      	subs	r3, r3, r2
 8014990:	440b      	add	r3, r1
 8014992:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8014996:	461c      	mov	r4, r3
 8014998:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801499c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80149a0:	881a      	ldrh	r2, [r3, #0]
 80149a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80149a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80149aa:	8819      	ldrh	r1, [r3, #0]
 80149ac:	48bc      	ldr	r0, [pc, #752]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 80149ae:	4613      	mov	r3, r2
 80149b0:	011b      	lsls	r3, r3, #4
 80149b2:	1a9b      	subs	r3, r3, r2
 80149b4:	440b      	add	r3, r1
 80149b6:	33f0      	adds	r3, #240	; 0xf0
 80149b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80149bc:	461a      	mov	r2, r3
 80149be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80149c2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80149c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149ca:	4413      	add	r3, r2
 80149cc:	429c      	cmp	r4, r3
 80149ce:	dd62      	ble.n	8014a96 <create_DijkstraMap+0x1862>
							Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80149d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80149d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80149d8:	881a      	ldrh	r2, [r3, #0]
 80149da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80149de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80149e2:	8819      	ldrh	r1, [r3, #0]
 80149e4:	48ae      	ldr	r0, [pc, #696]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 80149e6:	4613      	mov	r3, r2
 80149e8:	011b      	lsls	r3, r3, #4
 80149ea:	1a9b      	subs	r3, r3, r2
 80149ec:	440b      	add	r3, r1
 80149ee:	33f0      	adds	r3, #240	; 0xf0
 80149f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80149f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80149f8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80149fc:	881b      	ldrh	r3, [r3, #0]
 80149fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014a02:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014a06:	8812      	ldrh	r2, [r2, #0]
 8014a08:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8014a0c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8014a10:	8809      	ldrh	r1, [r1, #0]
 8014a12:	3901      	subs	r1, #1
 8014a14:	4403      	add	r3, r0
 8014a16:	b29c      	uxth	r4, r3
 8014a18:	48a1      	ldr	r0, [pc, #644]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 8014a1a:	4613      	mov	r3, r2
 8014a1c:	011b      	lsls	r3, r3, #4
 8014a1e:	1a9b      	subs	r3, r3, r2
 8014a20:	440b      	add	r3, r1
 8014a22:	4622      	mov	r2, r4
 8014a24:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8014a28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014a2c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014a30:	881a      	ldrh	r2, [r3, #0]
 8014a32:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8014a36:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014a3a:	4611      	mov	r1, r2
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f001 fee3 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8014a42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014a46:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014a54:	f103 0320 	add.w	r3, r3, #32
 8014a58:	3b0c      	subs	r3, #12
 8014a5a:	4611      	mov	r1, r2
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f001 fed3 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8014a62:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8014a66:	3b14      	subs	r3, #20
 8014a68:	2100      	movs	r1, #0
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f001 fecc 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8014a70:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014a74:	3b3c      	subs	r3, #60	; 0x3c
 8014a76:	2105      	movs	r1, #5
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 fec5 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8014a7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014a82:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014a86:	881a      	ldrh	r2, [r3, #0]
 8014a88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014a8c:	3b64      	subs	r3, #100	; 0x64
 8014a8e:	4611      	mov	r1, r2
 8014a90:	4618      	mov	r0, r3
 8014a92:	f001 feb9 	bl	8016808 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8014a96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014a9a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	2b03      	cmp	r3, #3
 8014aa2:	d12b      	bne.n	8014afc <create_DijkstraMap+0x18c8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8014aa4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014aa8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014ab6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014aba:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8014abc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014ac0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ac8:	2b05      	cmp	r3, #5
 8014aca:	dd05      	ble.n	8014ad8 <create_DijkstraMap+0x18a4>
 8014acc:	2305      	movs	r3, #5
 8014ace:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014ad2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014ad6:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8014ad8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014adc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014ae0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ae4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014ae8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014aec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014af0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014af4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8014af8:	8013      	strh	r3, [r2, #0]
 8014afa:	e00f      	b.n	8014b1c <create_DijkstraMap+0x18e8>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8014afc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8014b00:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8014b04:	881b      	ldrh	r3, [r3, #0]
 8014b06:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014b0a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8014b0e:	8013      	strh	r3, [r2, #0]
 8014b10:	2300      	movs	r3, #0
 8014b12:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014b16:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8014b1a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8014b1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	3b01      	subs	r3, #1
 8014b28:	4a5c      	ldr	r2, [pc, #368]	; (8014c9c <create_DijkstraMap+0x1a68>)
 8014b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b2e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014b32:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014b36:	8812      	ldrh	r2, [r2, #0]
 8014b38:	3201      	adds	r2, #1
 8014b3a:	2101      	movs	r1, #1
 8014b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8014b40:	4013      	ands	r3, r2
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	f040 8096 	bne.w	8014c74 <create_DijkstraMap+0x1a40>
 8014b48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b4c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014b50:	881b      	ldrh	r3, [r3, #0]
 8014b52:	1c5a      	adds	r2, r3, #1
 8014b54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b58:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014b5c:	881b      	ldrh	r3, [r3, #0]
 8014b5e:	1e59      	subs	r1, r3, #1
 8014b60:	484f      	ldr	r0, [pc, #316]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 8014b62:	4613      	mov	r3, r2
 8014b64:	011b      	lsls	r3, r3, #4
 8014b66:	1a9b      	subs	r3, r3, r2
 8014b68:	440b      	add	r3, r1
 8014b6a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8014b6e:	461c      	mov	r4, r3
 8014b70:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b74:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014b78:	881a      	ldrh	r2, [r3, #0]
 8014b7a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b7e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014b82:	8819      	ldrh	r1, [r3, #0]
 8014b84:	4846      	ldr	r0, [pc, #280]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 8014b86:	4613      	mov	r3, r2
 8014b88:	011b      	lsls	r3, r3, #4
 8014b8a:	1a9b      	subs	r3, r3, r2
 8014b8c:	440b      	add	r3, r1
 8014b8e:	33f0      	adds	r3, #240	; 0xf0
 8014b90:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8014b94:	461a      	mov	r2, r3
 8014b96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014b9a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8014b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	429c      	cmp	r4, r3
 8014ba6:	dd65      	ble.n	8014c74 <create_DijkstraMap+0x1a40>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8014ba8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014bac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014bb0:	881a      	ldrh	r2, [r3, #0]
 8014bb2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014bb6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014bba:	8819      	ldrh	r1, [r3, #0]
 8014bbc:	4838      	ldr	r0, [pc, #224]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	011b      	lsls	r3, r3, #4
 8014bc2:	1a9b      	subs	r3, r3, r2
 8014bc4:	440b      	add	r3, r1
 8014bc6:	33f0      	adds	r3, #240	; 0xf0
 8014bc8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8014bcc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014bd0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014bda:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8014bde:	8812      	ldrh	r2, [r2, #0]
 8014be0:	3201      	adds	r2, #1
 8014be2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8014be6:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8014bea:	8809      	ldrh	r1, [r1, #0]
 8014bec:	3901      	subs	r1, #1
 8014bee:	4403      	add	r3, r0
 8014bf0:	b29c      	uxth	r4, r3
 8014bf2:	482b      	ldr	r0, [pc, #172]	; (8014ca0 <create_DijkstraMap+0x1a6c>)
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	011b      	lsls	r3, r3, #4
 8014bf8:	1a9b      	subs	r3, r3, r2
 8014bfa:	440b      	add	r3, r1
 8014bfc:	4622      	mov	r2, r4
 8014bfe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8014c02:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014c06:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8014c0a:	881b      	ldrh	r3, [r3, #0]
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8014c14:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8014c18:	4611      	mov	r1, r2
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f001 fdf4 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8014c20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014c24:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8014c28:	881b      	ldrh	r3, [r3, #0]
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014c32:	f103 0320 	add.w	r3, r3, #32
 8014c36:	3b0c      	subs	r3, #12
 8014c38:	4611      	mov	r1, r2
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f001 fde4 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8014c40:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8014c44:	3b14      	subs	r3, #20
 8014c46:	2100      	movs	r1, #0
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f001 fddd 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8014c4e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014c52:	3b3c      	subs	r3, #60	; 0x3c
 8014c54:	2103      	movs	r1, #3
 8014c56:	4618      	mov	r0, r3
 8014c58:	f001 fdd6 	bl	8016808 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8014c5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014c60:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8014c64:	881a      	ldrh	r2, [r3, #0]
 8014c66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014c6a:	3b64      	subs	r3, #100	; 0x64
 8014c6c:	4611      	mov	r1, r2
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f001 fdca 	bl	8016808 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8014c74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014c78:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8014c7c:	881b      	ldrh	r3, [r3, #0]
 8014c7e:	3301      	adds	r3, #1
 8014c80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8014c84:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8014c88:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8014c8a:	f7fe bc1f 	b.w	80134cc <create_DijkstraMap+0x298>

		}



}
 8014c8e:	bf00      	nop
 8014c90:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8014c94:	3704      	adds	r7, #4
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd90      	pop	{r4, r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	20001010 	.word	0x20001010
 8014ca0:	200013f4 	.word	0x200013f4

08014ca4 <route_Dijkstra>:





void route_Dijkstra(void){
 8014ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca6:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8014caa:	b089      	sub	sp, #36	; 0x24
 8014cac:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8014cae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014cb2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f001 fd96 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_y);
 8014cbc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014cc0:	f103 0310 	add.w	r3, r3, #16
 8014cc4:	3b1c      	subs	r3, #28
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f001 fd8e 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8014ccc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014cd0:	f103 0310 	add.w	r3, r3, #16
 8014cd4:	3b04      	subs	r3, #4
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f001 fd86 	bl	80167e8 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8014cdc:	48be      	ldr	r0, [pc, #760]	; (8014fd8 <route_Dijkstra+0x334>)
 8014cde:	f001 fd83 	bl	80167e8 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8014ce2:	48be      	ldr	r0, [pc, #760]	; (8014fdc <route_Dijkstra+0x338>)
 8014ce4:	f001 fd80 	bl	80167e8 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8014ce8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014cec:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f001 fd88 	bl	8016808 <pushStack_walk>
 8014cf8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014cfc:	f103 0310 	add.w	r3, r3, #16
 8014d00:	3b1c      	subs	r3, #28
 8014d02:	2100      	movs	r1, #0
 8014d04:	4618      	mov	r0, r3
 8014d06:	f001 fd7f 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);
 8014d0a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014d0e:	f103 0310 	add.w	r3, r3, #16
 8014d12:	3b04      	subs	r3, #4
 8014d14:	2100      	movs	r1, #0
 8014d16:	4618      	mov	r0, r3
 8014d18:	f001 fd76 	bl	8016808 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int xd = 0;
 8014d1c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d20:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014d24:	2200      	movs	r2, #0
 8014d26:	601a      	str	r2, [r3, #0]
	int yd = 0;
 8014d28:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d2c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014d30:	2200      	movs	r2, #0
 8014d32:	601a      	str	r2, [r3, #0]
	int direction_d = 1;
 8014d34:	2301      	movs	r3, #1
 8014d36:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014d3a:	f102 020c 	add.w	r2, r2, #12
 8014d3e:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&xd,&yd,direction_d);
 8014d40:	f107 0110 	add.w	r1, r7, #16
 8014d44:	390c      	subs	r1, #12
 8014d46:	f107 0310 	add.w	r3, r7, #16
 8014d4a:	3b08      	subs	r3, #8
 8014d4c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014d50:	f102 020c 	add.w	r2, r2, #12
 8014d54:	6812      	ldr	r2, [r2, #0]
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fa ff36 	bl	800fbc8 <update_coordinate>

		if((xd == GOAL_X || xd == GOAL_X+1) && (yd == GOAL_Y || yd == GOAL_Y+1)){
 8014d5c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d60:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2b02      	cmp	r3, #2
 8014d68:	d006      	beq.n	8014d78 <route_Dijkstra+0xd4>
 8014d6a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d6e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b03      	cmp	r3, #3
 8014d76:	d10f      	bne.n	8014d98 <route_Dijkstra+0xf4>
 8014d78:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d7c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 8331 	beq.w	80153ea <route_Dijkstra+0x746>
 8014d88:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d8c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b01      	cmp	r3, #1
 8014d94:	f000 8329 	beq.w	80153ea <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,xd,yd,direction_d);
 8014d98:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014d9c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014da0:	6819      	ldr	r1, [r3, #0]
 8014da2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014da6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014daa:	681c      	ldr	r4, [r3, #0]
 8014dac:	f107 0310 	add.w	r3, r7, #16
 8014db0:	3b04      	subs	r3, #4
 8014db2:	f107 0210 	add.w	r2, r7, #16
 8014db6:	3a02      	subs	r2, #2
 8014db8:	f107 0610 	add.w	r6, r7, #16
 8014dbc:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8014dc0:	387e      	subs	r0, #126	; 0x7e
 8014dc2:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8014dc6:	f105 050c 	add.w	r5, r5, #12
 8014dca:	682d      	ldr	r5, [r5, #0]
 8014dcc:	9502      	str	r5, [sp, #8]
 8014dce:	9401      	str	r4, [sp, #4]
 8014dd0:	9100      	str	r1, [sp, #0]
 8014dd2:	4631      	mov	r1, r6
 8014dd4:	f7fe f994 	bl	8013100 <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8014dd8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014ddc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014de6:	4293      	cmp	r3, r2
 8014de8:	d11b      	bne.n	8014e22 <route_Dijkstra+0x17e>
 8014dea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014dee:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8014df2:	881b      	ldrh	r3, [r3, #0]
 8014df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	d112      	bne.n	8014e22 <route_Dijkstra+0x17e>
 8014dfc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e00:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d109      	bne.n	8014e22 <route_Dijkstra+0x17e>
 8014e0e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e12:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	f000 82e3 	beq.w	80153e8 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8014e22:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e26:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8014e2a:	881a      	ldrh	r2, [r3, #0]
 8014e2c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e30:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8014e34:	881b      	ldrh	r3, [r3, #0]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	f200 80d2 	bhi.w	8014fe0 <route_Dijkstra+0x33c>
 8014e3c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e40:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8014e44:	881a      	ldrh	r2, [r3, #0]
 8014e46:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e4a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8014e4e:	881b      	ldrh	r3, [r3, #0]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	f200 80c5 	bhi.w	8014fe0 <route_Dijkstra+0x33c>
 8014e56:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e5a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8014e5e:	881a      	ldrh	r2, [r3, #0]
 8014e60:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e64:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8014e68:	881b      	ldrh	r3, [r3, #0]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	f200 80b8 	bhi.w	8014fe0 <route_Dijkstra+0x33c>
			// 直進
			switch (direction_d) {		//
 8014e70:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014e74:	f103 030c 	add.w	r3, r3, #12
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	3b01      	subs	r3, #1
 8014e7c:	2b03      	cmp	r3, #3
 8014e7e:	f200 80b0 	bhi.w	8014fe2 <route_Dijkstra+0x33e>
 8014e82:	a201      	add	r2, pc, #4	; (adr r2, 8014e88 <route_Dijkstra+0x1e4>)
 8014e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e88:	08014e99 	.word	0x08014e99
 8014e8c:	08014ee7 	.word	0x08014ee7
 8014e90:	08014f35 	.word	0x08014f35
 8014e94:	08014f87 	.word	0x08014f87
			case 1:
				pushStack_walk(&stack_x,xd);
 8014e98:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014e9c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014ea8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014eac:	4611      	mov	r1, r2
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f001 fcaa 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8014eb4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014eb8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	b29a      	uxth	r2, r3
 8014ec0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014ec4:	f103 0310 	add.w	r3, r3, #16
 8014ec8:	3b1c      	subs	r3, #28
 8014eca:	4611      	mov	r1, r2
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f001 fc9b 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8014ed2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014ed6:	f103 0310 	add.w	r3, r3, #16
 8014eda:	3b04      	subs	r3, #4
 8014edc:	2100      	movs	r1, #0
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f001 fc92 	bl	8016808 <pushStack_walk>
				break;
 8014ee4:	e07d      	b.n	8014fe2 <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,xd);
 8014ee6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014eea:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	b29a      	uxth	r2, r3
 8014ef2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014ef6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014efa:	4611      	mov	r1, r2
 8014efc:	4618      	mov	r0, r3
 8014efe:	f001 fc83 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8014f02:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014f06:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014f12:	f103 0310 	add.w	r3, r3, #16
 8014f16:	3b1c      	subs	r3, #28
 8014f18:	4611      	mov	r1, r2
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f001 fc74 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8014f20:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014f24:	f103 0310 	add.w	r3, r3, #16
 8014f28:	3b04      	subs	r3, #4
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f001 fc6b 	bl	8016808 <pushStack_walk>
				break;
 8014f32:	e056      	b.n	8014fe2 <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,xd);
 8014f34:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014f38:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	b29a      	uxth	r2, r3
 8014f40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014f44:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014f48:	4611      	mov	r1, r2
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f001 fc5c 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8014f50:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014f54:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014f64:	f103 0310 	add.w	r3, r3, #16
 8014f68:	3b1c      	subs	r3, #28
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f001 fc4b 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8014f72:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014f76:	f103 0310 	add.w	r3, r3, #16
 8014f7a:	3b04      	subs	r3, #4
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f001 fc42 	bl	8016808 <pushStack_walk>
				break;
 8014f84:	e02d      	b.n	8014fe2 <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,xd-1);
 8014f86:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014f8a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	3b01      	subs	r3, #1
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014f9a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f001 fc31 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8014fa6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014faa:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014fb6:	f103 0310 	add.w	r3, r3, #16
 8014fba:	3b1c      	subs	r3, #28
 8014fbc:	4611      	mov	r1, r2
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f001 fc22 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8014fc4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014fc8:	f103 0310 	add.w	r3, r3, #16
 8014fcc:	3b04      	subs	r3, #4
 8014fce:	2101      	movs	r1, #1
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f001 fc19 	bl	8016808 <pushStack_walk>
				break;
 8014fd6:	e004      	b.n	8014fe2 <route_Dijkstra+0x33e>
 8014fd8:	200017b4 	.word	0x200017b4
 8014fdc:	2000275c 	.word	0x2000275c
			}

		}
 8014fe0:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8014fe2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014fe6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8014fea:	881a      	ldrh	r2, [r3, #0]
 8014fec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014ff0:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	f080 80d9 	bcs.w	80151ae <route_Dijkstra+0x50a>
 8014ffc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015000:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8015004:	881a      	ldrh	r2, [r3, #0]
 8015006:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801500a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801500e:	881b      	ldrh	r3, [r3, #0]
 8015010:	429a      	cmp	r2, r3
 8015012:	f200 80cc 	bhi.w	80151ae <route_Dijkstra+0x50a>
 8015016:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801501a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801501e:	881a      	ldrh	r2, [r3, #0]
 8015020:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015024:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8015028:	881b      	ldrh	r3, [r3, #0]
 801502a:	429a      	cmp	r2, r3
 801502c:	f200 80bf 	bhi.w	80151ae <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction_d) {		//
 8015030:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015034:	f103 030c 	add.w	r3, r3, #12
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	3b01      	subs	r3, #1
 801503c:	2b03      	cmp	r3, #3
 801503e:	f200 80ab 	bhi.w	8015198 <route_Dijkstra+0x4f4>
 8015042:	a201      	add	r2, pc, #4	; (adr r2, 8015048 <route_Dijkstra+0x3a4>)
 8015044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015048:	08015059 	.word	0x08015059
 801504c:	080150a7 	.word	0x080150a7
 8015050:	080150f9 	.word	0x080150f9
 8015054:	0801514b 	.word	0x0801514b
			case 1:
				pushStack_walk(&stack_x,xd);
 8015058:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801505c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	b29a      	uxth	r2, r3
 8015064:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8015068:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801506c:	4611      	mov	r1, r2
 801506e:	4618      	mov	r0, r3
 8015070:	f001 fbca 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8015074:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015078:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	b29a      	uxth	r2, r3
 8015080:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015084:	f103 0310 	add.w	r3, r3, #16
 8015088:	3b1c      	subs	r3, #28
 801508a:	4611      	mov	r1, r2
 801508c:	4618      	mov	r0, r3
 801508e:	f001 fbbb 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8015092:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015096:	f103 0310 	add.w	r3, r3, #16
 801509a:	3b04      	subs	r3, #4
 801509c:	2101      	movs	r1, #1
 801509e:	4618      	mov	r0, r3
 80150a0:	f001 fbb2 	bl	8016808 <pushStack_walk>
				break;
 80150a4:	e078      	b.n	8015198 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,xd);
 80150a6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80150aa:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80150b6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80150ba:	4611      	mov	r1, r2
 80150bc:	4618      	mov	r0, r3
 80150be:	f001 fba3 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 80150c2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80150c6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	3b01      	subs	r3, #1
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80150d6:	f103 0310 	add.w	r3, r3, #16
 80150da:	3b1c      	subs	r3, #28
 80150dc:	4611      	mov	r1, r2
 80150de:	4618      	mov	r0, r3
 80150e0:	f001 fb92 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80150e4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80150e8:	f103 0310 	add.w	r3, r3, #16
 80150ec:	3b04      	subs	r3, #4
 80150ee:	2100      	movs	r1, #0
 80150f0:	4618      	mov	r0, r3
 80150f2:	f001 fb89 	bl	8016808 <pushStack_walk>
				break;
 80150f6:	e04f      	b.n	8015198 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,xd-1);
 80150f8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80150fc:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	b29b      	uxth	r3, r3
 8015104:	3b01      	subs	r3, #1
 8015106:	b29a      	uxth	r2, r3
 8015108:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801510c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8015110:	4611      	mov	r1, r2
 8015112:	4618      	mov	r0, r3
 8015114:	f001 fb78 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8015118:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801511c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	b29a      	uxth	r2, r3
 8015124:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015128:	f103 0310 	add.w	r3, r3, #16
 801512c:	3b1c      	subs	r3, #28
 801512e:	4611      	mov	r1, r2
 8015130:	4618      	mov	r0, r3
 8015132:	f001 fb69 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8015136:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801513a:	f103 0310 	add.w	r3, r3, #16
 801513e:	3b04      	subs	r3, #4
 8015140:	2101      	movs	r1, #1
 8015142:	4618      	mov	r0, r3
 8015144:	f001 fb60 	bl	8016808 <pushStack_walk>
				break;
 8015148:	e026      	b.n	8015198 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,xd);
 801514a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801514e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	b29a      	uxth	r2, r3
 8015156:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801515a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801515e:	4611      	mov	r1, r2
 8015160:	4618      	mov	r0, r3
 8015162:	f001 fb51 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8015166:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801516a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	b29a      	uxth	r2, r3
 8015172:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015176:	f103 0310 	add.w	r3, r3, #16
 801517a:	3b1c      	subs	r3, #28
 801517c:	4611      	mov	r1, r2
 801517e:	4618      	mov	r0, r3
 8015180:	f001 fb42 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8015184:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015188:	f103 0310 	add.w	r3, r3, #16
 801518c:	3b04      	subs	r3, #4
 801518e:	2100      	movs	r1, #0
 8015190:	4618      	mov	r0, r3
 8015192:	f001 fb39 	bl	8016808 <pushStack_walk>
				break;
 8015196:	bf00      	nop
			}
			direction_d++;
 8015198:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801519c:	f103 030c 	add.w	r3, r3, #12
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	3301      	adds	r3, #1
 80151a4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80151a8:	f102 020c 	add.w	r2, r2, #12
 80151ac:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80151ae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151b2:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80151b6:	881a      	ldrh	r2, [r3, #0]
 80151b8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151bc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80151c0:	881b      	ldrh	r3, [r3, #0]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	f080 80d9 	bcs.w	801537a <route_Dijkstra+0x6d6>
 80151c8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151cc:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80151d0:	881a      	ldrh	r2, [r3, #0]
 80151d2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151d6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80151da:	881b      	ldrh	r3, [r3, #0]
 80151dc:	429a      	cmp	r2, r3
 80151de:	f080 80cc 	bcs.w	801537a <route_Dijkstra+0x6d6>
 80151e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151e6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80151ea:	881a      	ldrh	r2, [r3, #0]
 80151ec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80151f0:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	f200 80bf 	bhi.w	801537a <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction_d) {		//
 80151fc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015200:	f103 030c 	add.w	r3, r3, #12
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	3b01      	subs	r3, #1
 8015208:	2b03      	cmp	r3, #3
 801520a:	f200 80ab 	bhi.w	8015364 <route_Dijkstra+0x6c0>
 801520e:	a201      	add	r2, pc, #4	; (adr r2, 8015214 <route_Dijkstra+0x570>)
 8015210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015214:	08015225 	.word	0x08015225
 8015218:	08015277 	.word	0x08015277
 801521c:	080152c5 	.word	0x080152c5
 8015220:	08015313 	.word	0x08015313
			case 1:
				pushStack_walk(&stack_x,xd-1);
 8015224:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015228:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	b29b      	uxth	r3, r3
 8015230:	3b01      	subs	r3, #1
 8015232:	b29a      	uxth	r2, r3
 8015234:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8015238:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801523c:	4611      	mov	r1, r2
 801523e:	4618      	mov	r0, r3
 8015240:	f001 fae2 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8015244:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015248:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	b29a      	uxth	r2, r3
 8015250:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015254:	f103 0310 	add.w	r3, r3, #16
 8015258:	3b1c      	subs	r3, #28
 801525a:	4611      	mov	r1, r2
 801525c:	4618      	mov	r0, r3
 801525e:	f001 fad3 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8015262:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015266:	f103 0310 	add.w	r3, r3, #16
 801526a:	3b04      	subs	r3, #4
 801526c:	2101      	movs	r1, #1
 801526e:	4618      	mov	r0, r3
 8015270:	f001 faca 	bl	8016808 <pushStack_walk>
				break;
 8015274:	e076      	b.n	8015364 <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,xd);
 8015276:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801527a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	b29a      	uxth	r2, r3
 8015282:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8015286:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801528a:	4611      	mov	r1, r2
 801528c:	4618      	mov	r0, r3
 801528e:	f001 fabb 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8015292:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015296:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	b29a      	uxth	r2, r3
 801529e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80152a2:	f103 0310 	add.w	r3, r3, #16
 80152a6:	3b1c      	subs	r3, #28
 80152a8:	4611      	mov	r1, r2
 80152aa:	4618      	mov	r0, r3
 80152ac:	f001 faac 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80152b0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80152b4:	f103 0310 	add.w	r3, r3, #16
 80152b8:	3b04      	subs	r3, #4
 80152ba:	2100      	movs	r1, #0
 80152bc:	4618      	mov	r0, r3
 80152be:	f001 faa3 	bl	8016808 <pushStack_walk>
				break;
 80152c2:	e04f      	b.n	8015364 <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,xd);
 80152c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80152c8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	b29a      	uxth	r2, r3
 80152d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80152d4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80152d8:	4611      	mov	r1, r2
 80152da:	4618      	mov	r0, r3
 80152dc:	f001 fa94 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 80152e0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80152e4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80152f0:	f103 0310 	add.w	r3, r3, #16
 80152f4:	3b1c      	subs	r3, #28
 80152f6:	4611      	mov	r1, r2
 80152f8:	4618      	mov	r0, r3
 80152fa:	f001 fa85 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80152fe:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015302:	f103 0310 	add.w	r3, r3, #16
 8015306:	3b04      	subs	r3, #4
 8015308:	2101      	movs	r1, #1
 801530a:	4618      	mov	r0, r3
 801530c:	f001 fa7c 	bl	8016808 <pushStack_walk>
				break;
 8015310:	e028      	b.n	8015364 <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,xd);
 8015312:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015316:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	b29a      	uxth	r2, r3
 801531e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8015322:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8015326:	4611      	mov	r1, r2
 8015328:	4618      	mov	r0, r3
 801532a:	f001 fa6d 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 801532e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8015332:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	b29b      	uxth	r3, r3
 801533a:	3b01      	subs	r3, #1
 801533c:	b29a      	uxth	r2, r3
 801533e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015342:	f103 0310 	add.w	r3, r3, #16
 8015346:	3b1c      	subs	r3, #28
 8015348:	4611      	mov	r1, r2
 801534a:	4618      	mov	r0, r3
 801534c:	f001 fa5c 	bl	8016808 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8015350:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015354:	f103 0310 	add.w	r3, r3, #16
 8015358:	3b04      	subs	r3, #4
 801535a:	2100      	movs	r1, #0
 801535c:	4618      	mov	r0, r3
 801535e:	f001 fa53 	bl	8016808 <pushStack_walk>
				break;
 8015362:	bf00      	nop
			}
			direction_d--;
 8015364:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015368:	f103 030c 	add.w	r3, r3, #12
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	3b01      	subs	r3, #1
 8015370:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8015374:	f102 020c 	add.w	r2, r2, #12
 8015378:	6013      	str	r3, [r2, #0]
		}

		if (direction_d == 5) {
 801537a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801537e:	f103 030c 	add.w	r3, r3, #12
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	2b05      	cmp	r3, #5
 8015386:	d105      	bne.n	8015394 <route_Dijkstra+0x6f0>
			direction_d = 1;
 8015388:	2301      	movs	r3, #1
 801538a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801538e:	f102 020c 	add.w	r2, r2, #12
 8015392:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 6) {
 8015394:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015398:	f103 030c 	add.w	r3, r3, #12
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b06      	cmp	r3, #6
 80153a0:	d105      	bne.n	80153ae <route_Dijkstra+0x70a>
			direction_d = 2;
 80153a2:	2302      	movs	r3, #2
 80153a4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80153a8:	f102 020c 	add.w	r2, r2, #12
 80153ac:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 0) {
 80153ae:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80153b2:	f103 030c 	add.w	r3, r3, #12
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d105      	bne.n	80153c8 <route_Dijkstra+0x724>
			direction_d = 4;
 80153bc:	2304      	movs	r3, #4
 80153be:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80153c2:	f102 020c 	add.w	r2, r2, #12
 80153c6:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == -1) {
 80153c8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80153cc:	f103 030c 	add.w	r3, r3, #12
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d6:	f47f acb3 	bne.w	8014d40 <route_Dijkstra+0x9c>
			direction_d = 3;
 80153da:	2303      	movs	r3, #3
 80153dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80153e0:	f102 020c 	add.w	r2, r2, #12
 80153e4:	6013      	str	r3, [r2, #0]
		update_coordinate(&xd,&yd,direction_d);
 80153e6:	e4ab      	b.n	8014d40 <route_Dijkstra+0x9c>
			break;
 80153e8:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 80153ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80153ee:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80153f2:	4618      	mov	r0, r3
 80153f4:	f001 fa32 	bl	801685c <popStack_walk>
 80153f8:	4603      	mov	r3, r0
 80153fa:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80153fe:	f102 020a 	add.w	r2, r2, #10
 8015402:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8015404:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8015408:	f103 0310 	add.w	r3, r3, #16
 801540c:	3b1c      	subs	r3, #28
 801540e:	4618      	mov	r0, r3
 8015410:	f001 fa24 	bl	801685c <popStack_walk>
 8015414:	4603      	mov	r3, r0
 8015416:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801541a:	f102 0208 	add.w	r2, r2, #8
 801541e:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8015420:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8015424:	f103 0310 	add.w	r3, r3, #16
 8015428:	3b04      	subs	r3, #4
 801542a:	4618      	mov	r0, r3
 801542c:	f001 fa16 	bl	801685c <popStack_walk>
 8015430:	4603      	mov	r3, r0
 8015432:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8015436:	f102 0206 	add.w	r2, r2, #6
 801543a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 801543c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015440:	f103 030a 	add.w	r3, r3, #10
 8015444:	881b      	ldrh	r3, [r3, #0]
 8015446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801544a:	4293      	cmp	r3, r2
 801544c:	f000 80d2 	beq.w	80155f4 <route_Dijkstra+0x950>
 8015450:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015454:	f103 0308 	add.w	r3, r3, #8
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801545e:	4293      	cmp	r3, r2
 8015460:	f000 80c8 	beq.w	80155f4 <route_Dijkstra+0x950>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==ROW && ((wall.row_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8015464:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015468:	f103 0306 	add.w	r3, r3, #6
 801546c:	881b      	ldrh	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d15a      	bne.n	8015528 <route_Dijkstra+0x884>
 8015472:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015476:	f103 0308 	add.w	r3, r3, #8
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	4a60      	ldr	r2, [pc, #384]	; (8015600 <route_Dijkstra+0x95c>)
 801547e:	331e      	adds	r3, #30
 8015480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015484:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8015488:	f102 020a 	add.w	r2, r2, #10
 801548c:	8812      	ldrh	r2, [r2, #0]
 801548e:	2101      	movs	r1, #1
 8015490:	fa01 f202 	lsl.w	r2, r1, r2
 8015494:	4013      	ands	r3, r2
 8015496:	2b00      	cmp	r3, #0
 8015498:	d146      	bne.n	8015528 <route_Dijkstra+0x884>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801549a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801549e:	f103 030a 	add.w	r3, r3, #10
 80154a2:	881a      	ldrh	r2, [r3, #0]
 80154a4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80154a8:	f103 0308 	add.w	r3, r3, #8
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	4955      	ldr	r1, [pc, #340]	; (8015604 <route_Dijkstra+0x960>)
 80154b0:	0112      	lsls	r2, r2, #4
 80154b2:	4413      	add	r3, r2
 80154b4:	2200      	movs	r2, #0
 80154b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80154ba:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80154be:	f103 030a 	add.w	r3, r3, #10
 80154c2:	881a      	ldrh	r2, [r3, #0]
 80154c4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80154c8:	f103 0308 	add.w	r3, r3, #8
 80154cc:	881b      	ldrh	r3, [r3, #0]
 80154ce:	3301      	adds	r3, #1
 80154d0:	494c      	ldr	r1, [pc, #304]	; (8015604 <route_Dijkstra+0x960>)
 80154d2:	0112      	lsls	r2, r2, #4
 80154d4:	4413      	add	r3, r2
 80154d6:	2200      	movs	r2, #0
 80154d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80154dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80154e0:	f103 030a 	add.w	r3, r3, #10
 80154e4:	881b      	ldrh	r3, [r3, #0]
 80154e6:	4619      	mov	r1, r3
 80154e8:	4847      	ldr	r0, [pc, #284]	; (8015608 <route_Dijkstra+0x964>)
 80154ea:	f001 f98d 	bl	8016808 <pushStack_walk>
 80154ee:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80154f2:	f103 0308 	add.w	r3, r3, #8
 80154f6:	881b      	ldrh	r3, [r3, #0]
 80154f8:	4619      	mov	r1, r3
 80154fa:	4844      	ldr	r0, [pc, #272]	; (801560c <route_Dijkstra+0x968>)
 80154fc:	f001 f984 	bl	8016808 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8015500:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015504:	f103 030a 	add.w	r3, r3, #10
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	4619      	mov	r1, r3
 801550c:	483e      	ldr	r0, [pc, #248]	; (8015608 <route_Dijkstra+0x964>)
 801550e:	f001 f97b 	bl	8016808 <pushStack_walk>
 8015512:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015516:	f103 0308 	add.w	r3, r3, #8
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	3301      	adds	r3, #1
 801551e:	b29b      	uxth	r3, r3
 8015520:	4619      	mov	r1, r3
 8015522:	483a      	ldr	r0, [pc, #232]	; (801560c <route_Dijkstra+0x968>)
 8015524:	f001 f970 	bl	8016808 <pushStack_walk>
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8015528:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801552c:	f103 0306 	add.w	r3, r3, #6
 8015530:	881b      	ldrh	r3, [r3, #0]
 8015532:	2b01      	cmp	r3, #1
 8015534:	f47f af59 	bne.w	80153ea <route_Dijkstra+0x746>
 8015538:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801553c:	f103 030a 	add.w	r3, r3, #10
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	4a2f      	ldr	r2, [pc, #188]	; (8015600 <route_Dijkstra+0x95c>)
 8015544:	332c      	adds	r3, #44	; 0x2c
 8015546:	009b      	lsls	r3, r3, #2
 8015548:	4413      	add	r3, r2
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8015550:	f102 0208 	add.w	r2, r2, #8
 8015554:	8812      	ldrh	r2, [r2, #0]
 8015556:	2101      	movs	r1, #1
 8015558:	fa01 f202 	lsl.w	r2, r1, r2
 801555c:	4013      	ands	r3, r2
 801555e:	2b00      	cmp	r3, #0
 8015560:	f47f af43 	bne.w	80153ea <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8015564:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015568:	f103 030a 	add.w	r3, r3, #10
 801556c:	881a      	ldrh	r2, [r3, #0]
 801556e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015572:	f103 0308 	add.w	r3, r3, #8
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	4922      	ldr	r1, [pc, #136]	; (8015604 <route_Dijkstra+0x960>)
 801557a:	0112      	lsls	r2, r2, #4
 801557c:	4413      	add	r3, r2
 801557e:	2200      	movs	r2, #0
 8015580:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8015584:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015588:	f103 030a 	add.w	r3, r3, #10
 801558c:	881b      	ldrh	r3, [r3, #0]
 801558e:	1c5a      	adds	r2, r3, #1
 8015590:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8015594:	f103 0308 	add.w	r3, r3, #8
 8015598:	881b      	ldrh	r3, [r3, #0]
 801559a:	491a      	ldr	r1, [pc, #104]	; (8015604 <route_Dijkstra+0x960>)
 801559c:	0112      	lsls	r2, r2, #4
 801559e:	4413      	add	r3, r2
 80155a0:	2200      	movs	r2, #0
 80155a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80155a6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80155aa:	f103 030a 	add.w	r3, r3, #10
 80155ae:	881b      	ldrh	r3, [r3, #0]
 80155b0:	4619      	mov	r1, r3
 80155b2:	4815      	ldr	r0, [pc, #84]	; (8015608 <route_Dijkstra+0x964>)
 80155b4:	f001 f928 	bl	8016808 <pushStack_walk>
 80155b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80155bc:	f103 0308 	add.w	r3, r3, #8
 80155c0:	881b      	ldrh	r3, [r3, #0]
 80155c2:	4619      	mov	r1, r3
 80155c4:	4811      	ldr	r0, [pc, #68]	; (801560c <route_Dijkstra+0x968>)
 80155c6:	f001 f91f 	bl	8016808 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 80155ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80155ce:	f103 030a 	add.w	r3, r3, #10
 80155d2:	881b      	ldrh	r3, [r3, #0]
 80155d4:	3301      	adds	r3, #1
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	4619      	mov	r1, r3
 80155da:	480b      	ldr	r0, [pc, #44]	; (8015608 <route_Dijkstra+0x964>)
 80155dc:	f001 f914 	bl	8016808 <pushStack_walk>
 80155e0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80155e4:	f103 0308 	add.w	r3, r3, #8
 80155e8:	881b      	ldrh	r3, [r3, #0]
 80155ea:	4619      	mov	r1, r3
 80155ec:	4807      	ldr	r0, [pc, #28]	; (801560c <route_Dijkstra+0x968>)
 80155ee:	f001 f90b 	bl	8016808 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 80155f2:	e6fa      	b.n	80153ea <route_Dijkstra+0x746>
			}
	}


}
 80155f4:	bf00      	nop
 80155f6:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 80155fa:	3714      	adds	r7, #20
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015600:	20001010 	.word	0x20001010
 8015604:	200011f4 	.word	0x200011f4
 8015608:	200017b4 	.word	0x200017b4
 801560c:	2000275c 	.word	0x2000275c

08015610 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8015610:	b580      	push	{r7, lr}
 8015612:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801561a:	2300      	movs	r3, #0
 801561c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015620:	f102 0207 	add.w	r2, r2, #7
 8015624:	7013      	strb	r3, [r2, #0]
 8015626:	e033      	b.n	8015690 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8015628:	2300      	movs	r3, #0
 801562a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801562e:	f102 0206 	add.w	r2, r2, #6
 8015632:	7013      	strb	r3, [r2, #0]
 8015634:	e01a      	b.n	801566c <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8015636:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801563a:	f103 0307 	add.w	r3, r3, #7
 801563e:	781a      	ldrb	r2, [r3, #0]
 8015640:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015644:	f103 0306 	add.w	r3, r3, #6
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	4966      	ldr	r1, [pc, #408]	; (80157e4 <create_StepCountMap_unknown+0x1d4>)
 801564c:	0112      	lsls	r2, r2, #4
 801564e:	4413      	add	r3, r2
 8015650:	22ff      	movs	r2, #255	; 0xff
 8015652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8015656:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801565a:	f103 0306 	add.w	r3, r3, #6
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	3301      	adds	r3, #1
 8015662:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015666:	f102 0206 	add.w	r2, r2, #6
 801566a:	7013      	strb	r3, [r2, #0]
 801566c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015670:	f103 0306 	add.w	r3, r3, #6
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	2b0f      	cmp	r3, #15
 8015678:	d9dd      	bls.n	8015636 <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801567a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801567e:	f103 0307 	add.w	r3, r3, #7
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	3301      	adds	r3, #1
 8015686:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801568a:	f102 0207 	add.w	r2, r2, #7
 801568e:	7013      	strb	r3, [r2, #0]
 8015690:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015694:	f103 0307 	add.w	r3, r3, #7
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	2b0f      	cmp	r3, #15
 801569c:	d9c4      	bls.n	8015628 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 801569e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80156a2:	4618      	mov	r0, r3
 80156a4:	f001 f8a0 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_y);
 80156a8:	f107 0308 	add.w	r3, r7, #8
 80156ac:	3b04      	subs	r3, #4
 80156ae:	4618      	mov	r0, r3
 80156b0:	f001 f89a 	bl	80167e8 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 80156b4:	484c      	ldr	r0, [pc, #304]	; (80157e8 <create_StepCountMap_unknown+0x1d8>)
 80156b6:	f001 f8d1 	bl	801685c <popStack_walk>
 80156ba:	4603      	mov	r3, r0
 80156bc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80156c0:	f102 021a 	add.w	r2, r2, #26
 80156c4:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 80156c6:	4849      	ldr	r0, [pc, #292]	; (80157ec <create_StepCountMap_unknown+0x1dc>)
 80156c8:	f001 f8c8 	bl	801685c <popStack_walk>
 80156cc:	4603      	mov	r3, r0
 80156ce:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80156d2:	f102 0218 	add.w	r2, r2, #24
 80156d6:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == MAX_WALKCOUNT_DIJKSTRA || goalY == MAX_WALKCOUNT_DIJKSTRA) {
 80156d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80156dc:	f103 031a 	add.w	r3, r3, #26
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156e6:	4293      	cmp	r3, r2
 80156e8:	d030      	beq.n	801574c <create_StepCountMap_unknown+0x13c>
 80156ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80156ee:	f103 0318 	add.w	r3, r3, #24
 80156f2:	881b      	ldrh	r3, [r3, #0]
 80156f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156f8:	4293      	cmp	r3, r2
 80156fa:	d027      	beq.n	801574c <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 80156fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015700:	f103 031a 	add.w	r3, r3, #26
 8015704:	881a      	ldrh	r2, [r3, #0]
 8015706:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801570a:	f103 0318 	add.w	r3, r3, #24
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	4934      	ldr	r1, [pc, #208]	; (80157e4 <create_StepCountMap_unknown+0x1d4>)
 8015712:	0112      	lsls	r2, r2, #4
 8015714:	4413      	add	r3, r2
 8015716:	2200      	movs	r2, #0
 8015718:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 801571c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015720:	f103 031a 	add.w	r3, r3, #26
 8015724:	881a      	ldrh	r2, [r3, #0]
 8015726:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801572a:	4611      	mov	r1, r2
 801572c:	4618      	mov	r0, r3
 801572e:	f001 f86b 	bl	8016808 <pushStack_walk>
 8015732:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015736:	f103 0318 	add.w	r3, r3, #24
 801573a:	881a      	ldrh	r2, [r3, #0]
 801573c:	f107 0308 	add.w	r3, r7, #8
 8015740:	3b04      	subs	r3, #4
 8015742:	4611      	mov	r1, r2
 8015744:	4618      	mov	r0, r3
 8015746:	f001 f85f 	bl	8016808 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 801574a:	e7b3      	b.n	80156b4 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 801574c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015750:	f103 0308 	add.w	r3, r3, #8
 8015754:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8015758:	685a      	ldr	r2, [r3, #4]
 801575a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801575e:	f103 0308 	add.w	r3, r3, #8
 8015762:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	429a      	cmp	r2, r3
 801576a:	d11b      	bne.n	80157a4 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 801576c:	4b1d      	ldr	r3, [pc, #116]	; (80157e4 <create_StepCountMap_unknown+0x1d4>)
 801576e:	2200      	movs	r2, #0
 8015770:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8015772:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015776:	2100      	movs	r1, #0
 8015778:	4618      	mov	r0, r3
 801577a:	f001 f845 	bl	8016808 <pushStack_walk>
 801577e:	f107 0308 	add.w	r3, r7, #8
 8015782:	3b04      	subs	r3, #4
 8015784:	2100      	movs	r1, #0
 8015786:	4618      	mov	r0, r3
 8015788:	f001 f83e 	bl	8016808 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 801578c:	4b18      	ldr	r3, [pc, #96]	; (80157f0 <create_StepCountMap_unknown+0x1e0>)
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d003      	beq.n	801579c <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8015794:	4b16      	ldr	r3, [pc, #88]	; (80157f0 <create_StepCountMap_unknown+0x1e0>)
 8015796:	2202      	movs	r2, #2
 8015798:	701a      	strb	r2, [r3, #0]
 801579a:	e006      	b.n	80157aa <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 801579c:	4b14      	ldr	r3, [pc, #80]	; (80157f0 <create_StepCountMap_unknown+0x1e0>)
 801579e:	2201      	movs	r2, #1
 80157a0:	701a      	strb	r2, [r3, #0]
 80157a2:	e002      	b.n	80157aa <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 80157a4:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <create_StepCountMap_unknown+0x1e0>)
 80157a6:	2200      	movs	r2, #0
 80157a8:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80157aa:	2301      	movs	r3, #1
 80157ac:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80157b0:	f102 0204 	add.w	r2, r2, #4
 80157b4:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80157b6:	2301      	movs	r3, #1
 80157b8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80157bc:	f102 0202 	add.w	r2, r2, #2
 80157c0:	8013      	strh	r3, [r2, #0]
 80157c2:	2301      	movs	r3, #1
 80157c4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80157c8:	8013      	strh	r3, [r2, #0]
 80157ca:	2301      	movs	r3, #1
 80157cc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80157d0:	f102 021e 	add.w	r2, r2, #30
 80157d4:	8013      	strh	r3, [r2, #0]
 80157d6:	2301      	movs	r3, #1
 80157d8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80157dc:	f102 021c 	add.w	r2, r2, #28
 80157e0:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80157e2:	e237      	b.n	8015c54 <create_StepCountMap_unknown+0x644>
 80157e4:	200011f4 	.word	0x200011f4
 80157e8:	200017b4 	.word	0x200017b4
 80157ec:	2000275c 	.word	0x2000275c
 80157f0:	200011f0 	.word	0x200011f0

		Xcoordinate = popStack_walk(&stack_x);
 80157f4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80157f8:	4618      	mov	r0, r3
 80157fa:	f001 f82f 	bl	801685c <popStack_walk>
 80157fe:	4603      	mov	r3, r0
 8015800:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015804:	f102 0216 	add.w	r2, r2, #22
 8015808:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801580a:	f107 0308 	add.w	r3, r7, #8
 801580e:	3b04      	subs	r3, #4
 8015810:	4618      	mov	r0, r3
 8015812:	f001 f823 	bl	801685c <popStack_walk>
 8015816:	4603      	mov	r3, r0
 8015818:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801581c:	f102 0214 	add.w	r2, r2, #20
 8015820:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8015822:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015826:	f103 0316 	add.w	r3, r3, #22
 801582a:	881b      	ldrh	r3, [r3, #0]
 801582c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015830:	4293      	cmp	r3, r2
 8015832:	f000 8217 	beq.w	8015c64 <create_StepCountMap_unknown+0x654>
 8015836:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801583a:	f103 0314 	add.w	r3, r3, #20
 801583e:	881b      	ldrh	r3, [r3, #0]
 8015840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015844:	4293      	cmp	r3, r2
 8015846:	f000 820d 	beq.w	8015c64 <create_StepCountMap_unknown+0x654>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801584a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801584e:	f103 0314 	add.w	r3, r3, #20
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	2b0e      	cmp	r3, #14
 8015856:	d817      	bhi.n	8015888 <create_StepCountMap_unknown+0x278>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8015858:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801585c:	f103 0314 	add.w	r3, r3, #20
 8015860:	881b      	ldrh	r3, [r3, #0]
 8015862:	4acb      	ldr	r2, [pc, #812]	; (8015b90 <create_StepCountMap_unknown+0x580>)
 8015864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015868:	b29a      	uxth	r2, r3
 801586a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801586e:	f103 0316 	add.w	r3, r3, #22
 8015872:	881b      	ldrh	r3, [r3, #0]
 8015874:	2101      	movs	r1, #1
 8015876:	fa01 f303 	lsl.w	r3, r1, r3
 801587a:	b29b      	uxth	r3, r3
 801587c:	4013      	ands	r3, r2
 801587e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015882:	f102 0202 	add.w	r2, r2, #2
 8015886:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8015888:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801588c:	f103 0314 	add.w	r3, r3, #20
 8015890:	881b      	ldrh	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d016      	beq.n	80158c4 <create_StepCountMap_unknown+0x2b4>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8015896:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801589a:	f103 0314 	add.w	r3, r3, #20
 801589e:	881b      	ldrh	r3, [r3, #0]
 80158a0:	3b01      	subs	r3, #1
 80158a2:	4abb      	ldr	r2, [pc, #748]	; (8015b90 <create_StepCountMap_unknown+0x580>)
 80158a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80158ae:	f103 0316 	add.w	r3, r3, #22
 80158b2:	881b      	ldrh	r3, [r3, #0]
 80158b4:	2101      	movs	r1, #1
 80158b6:	fa01 f303 	lsl.w	r3, r1, r3
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	4013      	ands	r3, r2
 80158be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80158c2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80158c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80158c8:	f103 0316 	add.w	r3, r3, #22
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	2b0e      	cmp	r3, #14
 80158d0:	d819      	bhi.n	8015906 <create_StepCountMap_unknown+0x2f6>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 80158d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80158d6:	f103 0316 	add.w	r3, r3, #22
 80158da:	881b      	ldrh	r3, [r3, #0]
 80158dc:	4aac      	ldr	r2, [pc, #688]	; (8015b90 <create_StepCountMap_unknown+0x580>)
 80158de:	330e      	adds	r3, #14
 80158e0:	009b      	lsls	r3, r3, #2
 80158e2:	4413      	add	r3, r2
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	b29a      	uxth	r2, r3
 80158e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80158ec:	f103 0314 	add.w	r3, r3, #20
 80158f0:	881b      	ldrh	r3, [r3, #0]
 80158f2:	2101      	movs	r1, #1
 80158f4:	fa01 f303 	lsl.w	r3, r1, r3
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	4013      	ands	r3, r2
 80158fc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015900:	f102 021e 	add.w	r2, r2, #30
 8015904:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8015906:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801590a:	f103 0316 	add.w	r3, r3, #22
 801590e:	881b      	ldrh	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d01a      	beq.n	801594a <create_StepCountMap_unknown+0x33a>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8015914:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015918:	f103 0316 	add.w	r3, r3, #22
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	3b01      	subs	r3, #1
 8015920:	4a9b      	ldr	r2, [pc, #620]	; (8015b90 <create_StepCountMap_unknown+0x580>)
 8015922:	330e      	adds	r3, #14
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	4413      	add	r3, r2
 8015928:	685b      	ldr	r3, [r3, #4]
 801592a:	b29a      	uxth	r2, r3
 801592c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015930:	f103 0314 	add.w	r3, r3, #20
 8015934:	881b      	ldrh	r3, [r3, #0]
 8015936:	2101      	movs	r1, #1
 8015938:	fa01 f303 	lsl.w	r3, r1, r3
 801593c:	b29b      	uxth	r3, r3
 801593e:	4013      	ands	r3, r2
 8015940:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015944:	f102 021c 	add.w	r2, r2, #28
 8015948:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 801594a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801594e:	f103 0316 	add.w	r3, r3, #22
 8015952:	881a      	ldrh	r2, [r3, #0]
 8015954:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015958:	f103 0314 	add.w	r3, r3, #20
 801595c:	881b      	ldrh	r3, [r3, #0]
 801595e:	3301      	adds	r3, #1
 8015960:	498c      	ldr	r1, [pc, #560]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015962:	0112      	lsls	r2, r2, #4
 8015964:	4413      	add	r3, r2
 8015966:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801596a:	2bff      	cmp	r3, #255	; 0xff
 801596c:	d148      	bne.n	8015a00 <create_StepCountMap_unknown+0x3f0>
 801596e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015972:	f103 0314 	add.w	r3, r3, #20
 8015976:	881b      	ldrh	r3, [r3, #0]
 8015978:	2b0f      	cmp	r3, #15
 801597a:	d041      	beq.n	8015a00 <create_StepCountMap_unknown+0x3f0>
 801597c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015980:	f103 0302 	add.w	r3, r3, #2
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d13a      	bne.n	8015a00 <create_StepCountMap_unknown+0x3f0>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801598a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801598e:	f103 0316 	add.w	r3, r3, #22
 8015992:	881a      	ldrh	r2, [r3, #0]
 8015994:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015998:	f103 0314 	add.w	r3, r3, #20
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	497d      	ldr	r1, [pc, #500]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 80159a0:	0112      	lsls	r2, r2, #4
 80159a2:	4413      	add	r3, r2
 80159a4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80159a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80159ac:	f103 0316 	add.w	r3, r3, #22
 80159b0:	881a      	ldrh	r2, [r3, #0]
 80159b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80159b6:	f103 0314 	add.w	r3, r3, #20
 80159ba:	881b      	ldrh	r3, [r3, #0]
 80159bc:	3301      	adds	r3, #1
 80159be:	3101      	adds	r1, #1
 80159c0:	b288      	uxth	r0, r1
 80159c2:	4974      	ldr	r1, [pc, #464]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 80159c4:	0112      	lsls	r2, r2, #4
 80159c6:	4413      	add	r3, r2
 80159c8:	4602      	mov	r2, r0
 80159ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80159ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80159d2:	f103 0316 	add.w	r3, r3, #22
 80159d6:	881a      	ldrh	r2, [r3, #0]
 80159d8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f000 ff12 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 80159e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80159e8:	f103 0314 	add.w	r3, r3, #20
 80159ec:	881b      	ldrh	r3, [r3, #0]
 80159ee:	3301      	adds	r3, #1
 80159f0:	b29a      	uxth	r2, r3
 80159f2:	f107 0308 	add.w	r3, r7, #8
 80159f6:	3b04      	subs	r3, #4
 80159f8:	4611      	mov	r1, r2
 80159fa:	4618      	mov	r0, r3
 80159fc:	f000 ff04 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8015a00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a04:	f103 0316 	add.w	r3, r3, #22
 8015a08:	881a      	ldrh	r2, [r3, #0]
 8015a0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a0e:	f103 0314 	add.w	r3, r3, #20
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	3b01      	subs	r3, #1
 8015a16:	495f      	ldr	r1, [pc, #380]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015a18:	0112      	lsls	r2, r2, #4
 8015a1a:	4413      	add	r3, r2
 8015a1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015a20:	2bff      	cmp	r3, #255	; 0xff
 8015a22:	d146      	bne.n	8015ab2 <create_StepCountMap_unknown+0x4a2>
 8015a24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a28:	f103 0314 	add.w	r3, r3, #20
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d03f      	beq.n	8015ab2 <create_StepCountMap_unknown+0x4a2>
 8015a32:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015a36:	881b      	ldrh	r3, [r3, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d13a      	bne.n	8015ab2 <create_StepCountMap_unknown+0x4a2>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015a3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a40:	f103 0316 	add.w	r3, r3, #22
 8015a44:	881a      	ldrh	r2, [r3, #0]
 8015a46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a4a:	f103 0314 	add.w	r3, r3, #20
 8015a4e:	881b      	ldrh	r3, [r3, #0]
 8015a50:	4950      	ldr	r1, [pc, #320]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015a52:	0112      	lsls	r2, r2, #4
 8015a54:	4413      	add	r3, r2
 8015a56:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015a5a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a5e:	f103 0316 	add.w	r3, r3, #22
 8015a62:	881a      	ldrh	r2, [r3, #0]
 8015a64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a68:	f103 0314 	add.w	r3, r3, #20
 8015a6c:	881b      	ldrh	r3, [r3, #0]
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	3101      	adds	r1, #1
 8015a72:	b288      	uxth	r0, r1
 8015a74:	4947      	ldr	r1, [pc, #284]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015a76:	0112      	lsls	r2, r2, #4
 8015a78:	4413      	add	r3, r2
 8015a7a:	4602      	mov	r2, r0
 8015a7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8015a80:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a84:	f103 0316 	add.w	r3, r3, #22
 8015a88:	881a      	ldrh	r2, [r3, #0]
 8015a8a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015a8e:	4611      	mov	r1, r2
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 feb9 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8015a96:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015a9a:	f103 0314 	add.w	r3, r3, #20
 8015a9e:	881b      	ldrh	r3, [r3, #0]
 8015aa0:	3b01      	subs	r3, #1
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	f107 0308 	add.w	r3, r7, #8
 8015aa8:	3b04      	subs	r3, #4
 8015aaa:	4611      	mov	r1, r2
 8015aac:	4618      	mov	r0, r3
 8015aae:	f000 feab 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8015ab2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ab6:	f103 0316 	add.w	r3, r3, #22
 8015aba:	881b      	ldrh	r3, [r3, #0]
 8015abc:	1c5a      	adds	r2, r3, #1
 8015abe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ac2:	f103 0314 	add.w	r3, r3, #20
 8015ac6:	881b      	ldrh	r3, [r3, #0]
 8015ac8:	4932      	ldr	r1, [pc, #200]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015aca:	0112      	lsls	r2, r2, #4
 8015acc:	4413      	add	r3, r2
 8015ace:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015ad2:	2bff      	cmp	r3, #255	; 0xff
 8015ad4:	d148      	bne.n	8015b68 <create_StepCountMap_unknown+0x558>
 8015ad6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ada:	f103 0316 	add.w	r3, r3, #22
 8015ade:	881b      	ldrh	r3, [r3, #0]
 8015ae0:	2b0f      	cmp	r3, #15
 8015ae2:	d041      	beq.n	8015b68 <create_StepCountMap_unknown+0x558>
 8015ae4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ae8:	f103 031e 	add.w	r3, r3, #30
 8015aec:	881b      	ldrh	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d13a      	bne.n	8015b68 <create_StepCountMap_unknown+0x558>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015af2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015af6:	f103 0316 	add.w	r3, r3, #22
 8015afa:	881a      	ldrh	r2, [r3, #0]
 8015afc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b00:	f103 0314 	add.w	r3, r3, #20
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	4923      	ldr	r1, [pc, #140]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015b08:	0112      	lsls	r2, r2, #4
 8015b0a:	4413      	add	r3, r2
 8015b0c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015b10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b14:	f103 0316 	add.w	r3, r3, #22
 8015b18:	881b      	ldrh	r3, [r3, #0]
 8015b1a:	1c5a      	adds	r2, r3, #1
 8015b1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b20:	f103 0314 	add.w	r3, r3, #20
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	3101      	adds	r1, #1
 8015b28:	b288      	uxth	r0, r1
 8015b2a:	491a      	ldr	r1, [pc, #104]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015b2c:	0112      	lsls	r2, r2, #4
 8015b2e:	4413      	add	r3, r2
 8015b30:	4602      	mov	r2, r0
 8015b32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8015b36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b3a:	f103 0316 	add.w	r3, r3, #22
 8015b3e:	881b      	ldrh	r3, [r3, #0]
 8015b40:	3301      	adds	r3, #1
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015b48:	4611      	mov	r1, r2
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 fe5c 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8015b50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b54:	f103 0314 	add.w	r3, r3, #20
 8015b58:	881a      	ldrh	r2, [r3, #0]
 8015b5a:	f107 0308 	add.w	r3, r7, #8
 8015b5e:	3b04      	subs	r3, #4
 8015b60:	4611      	mov	r1, r2
 8015b62:	4618      	mov	r0, r3
 8015b64:	f000 fe50 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8015b68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b6c:	f103 0316 	add.w	r3, r3, #22
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	1e5a      	subs	r2, r3, #1
 8015b74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b78:	f103 0314 	add.w	r3, r3, #20
 8015b7c:	881b      	ldrh	r3, [r3, #0]
 8015b7e:	4905      	ldr	r1, [pc, #20]	; (8015b94 <create_StepCountMap_unknown+0x584>)
 8015b80:	0112      	lsls	r2, r2, #4
 8015b82:	4413      	add	r3, r2
 8015b84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015b88:	2bff      	cmp	r3, #255	; 0xff
 8015b8a:	d14e      	bne.n	8015c2a <create_StepCountMap_unknown+0x61a>
 8015b8c:	e004      	b.n	8015b98 <create_StepCountMap_unknown+0x588>
 8015b8e:	bf00      	nop
 8015b90:	20001010 	.word	0x20001010
 8015b94:	200011f4 	.word	0x200011f4
 8015b98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015b9c:	f103 0316 	add.w	r3, r3, #22
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d041      	beq.n	8015c2a <create_StepCountMap_unknown+0x61a>
 8015ba6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015baa:	f103 031c 	add.w	r3, r3, #28
 8015bae:	881b      	ldrh	r3, [r3, #0]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d13a      	bne.n	8015c2a <create_StepCountMap_unknown+0x61a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015bb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015bb8:	f103 0316 	add.w	r3, r3, #22
 8015bbc:	881a      	ldrh	r2, [r3, #0]
 8015bbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015bc2:	f103 0314 	add.w	r3, r3, #20
 8015bc6:	881b      	ldrh	r3, [r3, #0]
 8015bc8:	4929      	ldr	r1, [pc, #164]	; (8015c70 <create_StepCountMap_unknown+0x660>)
 8015bca:	0112      	lsls	r2, r2, #4
 8015bcc:	4413      	add	r3, r2
 8015bce:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015bd2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015bd6:	f103 0316 	add.w	r3, r3, #22
 8015bda:	881b      	ldrh	r3, [r3, #0]
 8015bdc:	1e5a      	subs	r2, r3, #1
 8015bde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015be2:	f103 0314 	add.w	r3, r3, #20
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	3101      	adds	r1, #1
 8015bea:	b288      	uxth	r0, r1
 8015bec:	4920      	ldr	r1, [pc, #128]	; (8015c70 <create_StepCountMap_unknown+0x660>)
 8015bee:	0112      	lsls	r2, r2, #4
 8015bf0:	4413      	add	r3, r2
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8015bf8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015bfc:	f103 0316 	add.w	r3, r3, #22
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	3b01      	subs	r3, #1
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015c0a:	4611      	mov	r1, r2
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f000 fdfb 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8015c12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015c16:	f103 0314 	add.w	r3, r3, #20
 8015c1a:	881a      	ldrh	r2, [r3, #0]
 8015c1c:	f107 0308 	add.w	r3, r7, #8
 8015c20:	3b04      	subs	r3, #4
 8015c22:	4611      	mov	r1, r2
 8015c24:	4618      	mov	r0, r3
 8015c26:	f000 fdef 	bl	8016808 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8015c2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015c2e:	f103 0316 	add.w	r3, r3, #22
 8015c32:	881a      	ldrh	r2, [r3, #0]
 8015c34:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015c38:	f103 0314 	add.w	r3, r3, #20
 8015c3c:	881b      	ldrh	r3, [r3, #0]
 8015c3e:	490c      	ldr	r1, [pc, #48]	; (8015c70 <create_StepCountMap_unknown+0x660>)
 8015c40:	0112      	lsls	r2, r2, #4
 8015c42:	4413      	add	r3, r2
 8015c44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015c4e:	f102 0204 	add.w	r2, r2, #4
 8015c52:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015c54:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8015c58:	f103 0304 	add.w	r3, r3, #4
 8015c5c:	881b      	ldrh	r3, [r3, #0]
 8015c5e:	2bfe      	cmp	r3, #254	; 0xfe
 8015c60:	f67f adc8 	bls.w	80157f4 <create_StepCountMap_unknown+0x1e4>

		}

}
 8015c64:	bf00      	nop
 8015c66:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	200011f4 	.word	0x200011f4

08015c74 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8015c74:	b580      	push	{r7, lr}
 8015c76:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8015c7a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015c82:	f102 021f 	add.w	r2, r2, #31
 8015c86:	7013      	strb	r3, [r2, #0]
 8015c88:	e033      	b.n	8015cf2 <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015c90:	f102 021e 	add.w	r2, r2, #30
 8015c94:	7013      	strb	r3, [r2, #0]
 8015c96:	e01a      	b.n	8015cce <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8015c98:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015c9c:	f103 031f 	add.w	r3, r3, #31
 8015ca0:	781a      	ldrb	r2, [r3, #0]
 8015ca2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ca6:	f103 031e 	add.w	r3, r3, #30
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	4946      	ldr	r1, [pc, #280]	; (8015dc8 <create_StepCountMap_queue+0x154>)
 8015cae:	0112      	lsls	r2, r2, #4
 8015cb0:	4413      	add	r3, r2
 8015cb2:	22ff      	movs	r2, #255	; 0xff
 8015cb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8015cb8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015cbc:	f103 031e 	add.w	r3, r3, #30
 8015cc0:	781b      	ldrb	r3, [r3, #0]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015cc8:	f102 021e 	add.w	r2, r2, #30
 8015ccc:	7013      	strb	r3, [r2, #0]
 8015cce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015cd2:	f103 031e 	add.w	r3, r3, #30
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	2b0f      	cmp	r3, #15
 8015cda:	d9dd      	bls.n	8015c98 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8015cdc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ce0:	f103 031f 	add.w	r3, r3, #31
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	3301      	adds	r3, #1
 8015ce8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015cec:	f102 021f 	add.w	r2, r2, #31
 8015cf0:	7013      	strb	r3, [r2, #0]
 8015cf2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015cf6:	f103 031f 	add.w	r3, r3, #31
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	2b0f      	cmp	r3, #15
 8015cfe:	d9c4      	bls.n	8015c8a <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8015d00:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015d04:	4618      	mov	r0, r3
 8015d06:	f000 fd6f 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_y);
 8015d0a:	463b      	mov	r3, r7
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f000 fd6b 	bl	80167e8 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8015d12:	4b2d      	ldr	r3, [pc, #180]	; (8015dc8 <create_StepCountMap_queue+0x154>)
 8015d14:	2200      	movs	r2, #0
 8015d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8015d1a:	4b2b      	ldr	r3, [pc, #172]	; (8015dc8 <create_StepCountMap_queue+0x154>)
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8015d22:	4b29      	ldr	r3, [pc, #164]	; (8015dc8 <create_StepCountMap_queue+0x154>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8015d2a:	4b27      	ldr	r3, [pc, #156]	; (8015dc8 <create_StepCountMap_queue+0x154>)
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8015d32:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015d36:	2102      	movs	r1, #2
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f000 fd65 	bl	8016808 <pushStack_walk>
 8015d3e:	463b      	mov	r3, r7
 8015d40:	2100      	movs	r1, #0
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 fd60 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8015d48:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015d4c:	2103      	movs	r1, #3
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f000 fd5a 	bl	8016808 <pushStack_walk>
 8015d54:	463b      	mov	r3, r7
 8015d56:	2100      	movs	r1, #0
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f000 fd55 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8015d5e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015d62:	2102      	movs	r1, #2
 8015d64:	4618      	mov	r0, r3
 8015d66:	f000 fd4f 	bl	8016808 <pushStack_walk>
 8015d6a:	463b      	mov	r3, r7
 8015d6c:	2101      	movs	r1, #1
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f000 fd4a 	bl	8016808 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8015d74:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015d78:	2103      	movs	r1, #3
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f000 fd44 	bl	8016808 <pushStack_walk>
 8015d80:	463b      	mov	r3, r7
 8015d82:	2101      	movs	r1, #1
 8015d84:	4618      	mov	r0, r3
 8015d86:	f000 fd3f 	bl	8016808 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015d90:	f102 021c 	add.w	r2, r2, #28
 8015d94:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8015d96:	2301      	movs	r3, #1
 8015d98:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015d9c:	f102 021a 	add.w	r2, r2, #26
 8015da0:	8013      	strh	r3, [r2, #0]
 8015da2:	2301      	movs	r3, #1
 8015da4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015da8:	f102 0218 	add.w	r2, r2, #24
 8015dac:	8013      	strh	r3, [r2, #0]
 8015dae:	2301      	movs	r3, #1
 8015db0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015db4:	f102 0216 	add.w	r2, r2, #22
 8015db8:	8013      	strh	r3, [r2, #0]
 8015dba:	2301      	movs	r3, #1
 8015dbc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015dc0:	f102 0214 	add.w	r2, r2, #20
 8015dc4:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8015dc6:	e22b      	b.n	8016220 <create_StepCountMap_queue+0x5ac>
 8015dc8:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8015dcc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 fd43 	bl	801685c <popStack_walk>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015ddc:	f102 0212 	add.w	r2, r2, #18
 8015de0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8015de2:	463b      	mov	r3, r7
 8015de4:	4618      	mov	r0, r3
 8015de6:	f000 fd39 	bl	801685c <popStack_walk>
 8015dea:	4603      	mov	r3, r0
 8015dec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015df0:	f102 0210 	add.w	r2, r2, #16
 8015df4:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8015df6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015dfa:	f103 0312 	add.w	r3, r3, #18
 8015dfe:	881b      	ldrh	r3, [r3, #0]
 8015e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e04:	4293      	cmp	r3, r2
 8015e06:	f000 8213 	beq.w	8016230 <create_StepCountMap_queue+0x5bc>
 8015e0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e0e:	f103 0310 	add.w	r3, r3, #16
 8015e12:	881b      	ldrh	r3, [r3, #0]
 8015e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	f000 8209 	beq.w	8016230 <create_StepCountMap_queue+0x5bc>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8015e1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e22:	f103 0310 	add.w	r3, r3, #16
 8015e26:	881b      	ldrh	r3, [r3, #0]
 8015e28:	2b0e      	cmp	r3, #14
 8015e2a:	d817      	bhi.n	8015e5c <create_StepCountMap_queue+0x1e8>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8015e2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e30:	f103 0310 	add.w	r3, r3, #16
 8015e34:	881b      	ldrh	r3, [r3, #0]
 8015e36:	4aca      	ldr	r2, [pc, #808]	; (8016160 <create_StepCountMap_queue+0x4ec>)
 8015e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e42:	f103 0312 	add.w	r3, r3, #18
 8015e46:	881b      	ldrh	r3, [r3, #0]
 8015e48:	2101      	movs	r1, #1
 8015e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	4013      	ands	r3, r2
 8015e52:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015e56:	f102 021a 	add.w	r2, r2, #26
 8015e5a:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8015e5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e60:	f103 0310 	add.w	r3, r3, #16
 8015e64:	881b      	ldrh	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d018      	beq.n	8015e9c <create_StepCountMap_queue+0x228>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8015e6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e6e:	f103 0310 	add.w	r3, r3, #16
 8015e72:	881b      	ldrh	r3, [r3, #0]
 8015e74:	3b01      	subs	r3, #1
 8015e76:	4aba      	ldr	r2, [pc, #744]	; (8016160 <create_StepCountMap_queue+0x4ec>)
 8015e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e7c:	b29a      	uxth	r2, r3
 8015e7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015e82:	f103 0312 	add.w	r3, r3, #18
 8015e86:	881b      	ldrh	r3, [r3, #0]
 8015e88:	2101      	movs	r1, #1
 8015e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	4013      	ands	r3, r2
 8015e92:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015e96:	f102 0218 	add.w	r2, r2, #24
 8015e9a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8015e9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ea0:	f103 0312 	add.w	r3, r3, #18
 8015ea4:	881b      	ldrh	r3, [r3, #0]
 8015ea6:	2b0e      	cmp	r3, #14
 8015ea8:	d819      	bhi.n	8015ede <create_StepCountMap_queue+0x26a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8015eaa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015eae:	f103 0312 	add.w	r3, r3, #18
 8015eb2:	881b      	ldrh	r3, [r3, #0]
 8015eb4:	4aaa      	ldr	r2, [pc, #680]	; (8016160 <create_StepCountMap_queue+0x4ec>)
 8015eb6:	330e      	adds	r3, #14
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	4413      	add	r3, r2
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	b29a      	uxth	r2, r3
 8015ec0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ec4:	f103 0310 	add.w	r3, r3, #16
 8015ec8:	881b      	ldrh	r3, [r3, #0]
 8015eca:	2101      	movs	r1, #1
 8015ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	4013      	ands	r3, r2
 8015ed4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015ed8:	f102 0216 	add.w	r2, r2, #22
 8015edc:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8015ede:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ee2:	f103 0312 	add.w	r3, r3, #18
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d01a      	beq.n	8015f22 <create_StepCountMap_queue+0x2ae>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8015eec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ef0:	f103 0312 	add.w	r3, r3, #18
 8015ef4:	881b      	ldrh	r3, [r3, #0]
 8015ef6:	3b01      	subs	r3, #1
 8015ef8:	4a99      	ldr	r2, [pc, #612]	; (8016160 <create_StepCountMap_queue+0x4ec>)
 8015efa:	330e      	adds	r3, #14
 8015efc:	009b      	lsls	r3, r3, #2
 8015efe:	4413      	add	r3, r2
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	b29a      	uxth	r2, r3
 8015f04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f08:	f103 0310 	add.w	r3, r3, #16
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	2101      	movs	r1, #1
 8015f10:	fa01 f303 	lsl.w	r3, r1, r3
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	4013      	ands	r3, r2
 8015f18:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015f1c:	f102 0214 	add.w	r2, r2, #20
 8015f20:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8015f22:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f26:	f103 0312 	add.w	r3, r3, #18
 8015f2a:	881a      	ldrh	r2, [r3, #0]
 8015f2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f30:	f103 0310 	add.w	r3, r3, #16
 8015f34:	881b      	ldrh	r3, [r3, #0]
 8015f36:	3301      	adds	r3, #1
 8015f38:	498a      	ldr	r1, [pc, #552]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8015f3a:	0112      	lsls	r2, r2, #4
 8015f3c:	4413      	add	r3, r2
 8015f3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015f42:	2bff      	cmp	r3, #255	; 0xff
 8015f44:	d146      	bne.n	8015fd4 <create_StepCountMap_queue+0x360>
 8015f46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f4a:	f103 0310 	add.w	r3, r3, #16
 8015f4e:	881b      	ldrh	r3, [r3, #0]
 8015f50:	2b0f      	cmp	r3, #15
 8015f52:	d03f      	beq.n	8015fd4 <create_StepCountMap_queue+0x360>
 8015f54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f58:	f103 031a 	add.w	r3, r3, #26
 8015f5c:	881b      	ldrh	r3, [r3, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d138      	bne.n	8015fd4 <create_StepCountMap_queue+0x360>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015f62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f66:	f103 0312 	add.w	r3, r3, #18
 8015f6a:	881a      	ldrh	r2, [r3, #0]
 8015f6c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f70:	f103 0310 	add.w	r3, r3, #16
 8015f74:	881b      	ldrh	r3, [r3, #0]
 8015f76:	497b      	ldr	r1, [pc, #492]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8015f78:	0112      	lsls	r2, r2, #4
 8015f7a:	4413      	add	r3, r2
 8015f7c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015f80:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f84:	f103 0312 	add.w	r3, r3, #18
 8015f88:	881a      	ldrh	r2, [r3, #0]
 8015f8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015f8e:	f103 0310 	add.w	r3, r3, #16
 8015f92:	881b      	ldrh	r3, [r3, #0]
 8015f94:	3301      	adds	r3, #1
 8015f96:	3101      	adds	r1, #1
 8015f98:	b288      	uxth	r0, r1
 8015f9a:	4972      	ldr	r1, [pc, #456]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8015f9c:	0112      	lsls	r2, r2, #4
 8015f9e:	4413      	add	r3, r2
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8015fa6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015faa:	f103 0312 	add.w	r3, r3, #18
 8015fae:	881a      	ldrh	r2, [r3, #0]
 8015fb0:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8015fb4:	4611      	mov	r1, r2
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f000 fc26 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8015fbc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015fc0:	f103 0310 	add.w	r3, r3, #16
 8015fc4:	881b      	ldrh	r3, [r3, #0]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	b29a      	uxth	r2, r3
 8015fca:	463b      	mov	r3, r7
 8015fcc:	4611      	mov	r1, r2
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f000 fc1a 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8015fd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015fd8:	f103 0312 	add.w	r3, r3, #18
 8015fdc:	881a      	ldrh	r2, [r3, #0]
 8015fde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015fe2:	f103 0310 	add.w	r3, r3, #16
 8015fe6:	881b      	ldrh	r3, [r3, #0]
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	495e      	ldr	r1, [pc, #376]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8015fec:	0112      	lsls	r2, r2, #4
 8015fee:	4413      	add	r3, r2
 8015ff0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015ff4:	2bff      	cmp	r3, #255	; 0xff
 8015ff6:	d146      	bne.n	8016086 <create_StepCountMap_queue+0x412>
 8015ff8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015ffc:	f103 0310 	add.w	r3, r3, #16
 8016000:	881b      	ldrh	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d03f      	beq.n	8016086 <create_StepCountMap_queue+0x412>
 8016006:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801600a:	f103 0318 	add.w	r3, r3, #24
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d138      	bne.n	8016086 <create_StepCountMap_queue+0x412>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8016014:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016018:	f103 0312 	add.w	r3, r3, #18
 801601c:	881a      	ldrh	r2, [r3, #0]
 801601e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016022:	f103 0310 	add.w	r3, r3, #16
 8016026:	881b      	ldrh	r3, [r3, #0]
 8016028:	494e      	ldr	r1, [pc, #312]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 801602a:	0112      	lsls	r2, r2, #4
 801602c:	4413      	add	r3, r2
 801602e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8016032:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016036:	f103 0312 	add.w	r3, r3, #18
 801603a:	881a      	ldrh	r2, [r3, #0]
 801603c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016040:	f103 0310 	add.w	r3, r3, #16
 8016044:	881b      	ldrh	r3, [r3, #0]
 8016046:	3b01      	subs	r3, #1
 8016048:	3101      	adds	r1, #1
 801604a:	b288      	uxth	r0, r1
 801604c:	4945      	ldr	r1, [pc, #276]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 801604e:	0112      	lsls	r2, r2, #4
 8016050:	4413      	add	r3, r2
 8016052:	4602      	mov	r2, r0
 8016054:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8016058:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801605c:	f103 0312 	add.w	r3, r3, #18
 8016060:	881a      	ldrh	r2, [r3, #0]
 8016062:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8016066:	4611      	mov	r1, r2
 8016068:	4618      	mov	r0, r3
 801606a:	f000 fbcd 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801606e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016072:	f103 0310 	add.w	r3, r3, #16
 8016076:	881b      	ldrh	r3, [r3, #0]
 8016078:	3b01      	subs	r3, #1
 801607a:	b29a      	uxth	r2, r3
 801607c:	463b      	mov	r3, r7
 801607e:	4611      	mov	r1, r2
 8016080:	4618      	mov	r0, r3
 8016082:	f000 fbc1 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8016086:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801608a:	f103 0312 	add.w	r3, r3, #18
 801608e:	881b      	ldrh	r3, [r3, #0]
 8016090:	1c5a      	adds	r2, r3, #1
 8016092:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016096:	f103 0310 	add.w	r3, r3, #16
 801609a:	881b      	ldrh	r3, [r3, #0]
 801609c:	4931      	ldr	r1, [pc, #196]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 801609e:	0112      	lsls	r2, r2, #4
 80160a0:	4413      	add	r3, r2
 80160a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80160a6:	2bff      	cmp	r3, #255	; 0xff
 80160a8:	d146      	bne.n	8016138 <create_StepCountMap_queue+0x4c4>
 80160aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160ae:	f103 0312 	add.w	r3, r3, #18
 80160b2:	881b      	ldrh	r3, [r3, #0]
 80160b4:	2b0f      	cmp	r3, #15
 80160b6:	d03f      	beq.n	8016138 <create_StepCountMap_queue+0x4c4>
 80160b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160bc:	f103 0316 	add.w	r3, r3, #22
 80160c0:	881b      	ldrh	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d138      	bne.n	8016138 <create_StepCountMap_queue+0x4c4>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80160c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160ca:	f103 0312 	add.w	r3, r3, #18
 80160ce:	881a      	ldrh	r2, [r3, #0]
 80160d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160d4:	f103 0310 	add.w	r3, r3, #16
 80160d8:	881b      	ldrh	r3, [r3, #0]
 80160da:	4922      	ldr	r1, [pc, #136]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 80160dc:	0112      	lsls	r2, r2, #4
 80160de:	4413      	add	r3, r2
 80160e0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80160e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160e8:	f103 0312 	add.w	r3, r3, #18
 80160ec:	881b      	ldrh	r3, [r3, #0]
 80160ee:	1c5a      	adds	r2, r3, #1
 80160f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80160f4:	f103 0310 	add.w	r3, r3, #16
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	3101      	adds	r1, #1
 80160fc:	b288      	uxth	r0, r1
 80160fe:	4919      	ldr	r1, [pc, #100]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8016100:	0112      	lsls	r2, r2, #4
 8016102:	4413      	add	r3, r2
 8016104:	4602      	mov	r2, r0
 8016106:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801610a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801610e:	f103 0312 	add.w	r3, r3, #18
 8016112:	881b      	ldrh	r3, [r3, #0]
 8016114:	3301      	adds	r3, #1
 8016116:	b29a      	uxth	r2, r3
 8016118:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801611c:	4611      	mov	r1, r2
 801611e:	4618      	mov	r0, r3
 8016120:	f000 fb72 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8016124:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016128:	f103 0310 	add.w	r3, r3, #16
 801612c:	881a      	ldrh	r2, [r3, #0]
 801612e:	463b      	mov	r3, r7
 8016130:	4611      	mov	r1, r2
 8016132:	4618      	mov	r0, r3
 8016134:	f000 fb68 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8016138:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801613c:	f103 0312 	add.w	r3, r3, #18
 8016140:	881b      	ldrh	r3, [r3, #0]
 8016142:	1e5a      	subs	r2, r3, #1
 8016144:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016148:	f103 0310 	add.w	r3, r3, #16
 801614c:	881b      	ldrh	r3, [r3, #0]
 801614e:	4905      	ldr	r1, [pc, #20]	; (8016164 <create_StepCountMap_queue+0x4f0>)
 8016150:	0112      	lsls	r2, r2, #4
 8016152:	4413      	add	r3, r2
 8016154:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016158:	2bff      	cmp	r3, #255	; 0xff
 801615a:	d14c      	bne.n	80161f6 <create_StepCountMap_queue+0x582>
 801615c:	e004      	b.n	8016168 <create_StepCountMap_queue+0x4f4>
 801615e:	bf00      	nop
 8016160:	20001010 	.word	0x20001010
 8016164:	200011f4 	.word	0x200011f4
 8016168:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801616c:	f103 0312 	add.w	r3, r3, #18
 8016170:	881b      	ldrh	r3, [r3, #0]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d03f      	beq.n	80161f6 <create_StepCountMap_queue+0x582>
 8016176:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801617a:	f103 0314 	add.w	r3, r3, #20
 801617e:	881b      	ldrh	r3, [r3, #0]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d138      	bne.n	80161f6 <create_StepCountMap_queue+0x582>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8016184:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016188:	f103 0312 	add.w	r3, r3, #18
 801618c:	881a      	ldrh	r2, [r3, #0]
 801618e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016192:	f103 0310 	add.w	r3, r3, #16
 8016196:	881b      	ldrh	r3, [r3, #0]
 8016198:	4928      	ldr	r1, [pc, #160]	; (801623c <create_StepCountMap_queue+0x5c8>)
 801619a:	0112      	lsls	r2, r2, #4
 801619c:	4413      	add	r3, r2
 801619e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80161a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80161a6:	f103 0312 	add.w	r3, r3, #18
 80161aa:	881b      	ldrh	r3, [r3, #0]
 80161ac:	1e5a      	subs	r2, r3, #1
 80161ae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80161b2:	f103 0310 	add.w	r3, r3, #16
 80161b6:	881b      	ldrh	r3, [r3, #0]
 80161b8:	3101      	adds	r1, #1
 80161ba:	b288      	uxth	r0, r1
 80161bc:	491f      	ldr	r1, [pc, #124]	; (801623c <create_StepCountMap_queue+0x5c8>)
 80161be:	0112      	lsls	r2, r2, #4
 80161c0:	4413      	add	r3, r2
 80161c2:	4602      	mov	r2, r0
 80161c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80161c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80161cc:	f103 0312 	add.w	r3, r3, #18
 80161d0:	881b      	ldrh	r3, [r3, #0]
 80161d2:	3b01      	subs	r3, #1
 80161d4:	b29a      	uxth	r2, r3
 80161d6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80161da:	4611      	mov	r1, r2
 80161dc:	4618      	mov	r0, r3
 80161de:	f000 fb13 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80161e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80161e6:	f103 0310 	add.w	r3, r3, #16
 80161ea:	881a      	ldrh	r2, [r3, #0]
 80161ec:	463b      	mov	r3, r7
 80161ee:	4611      	mov	r1, r2
 80161f0:	4618      	mov	r0, r3
 80161f2:	f000 fb09 	bl	8016808 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80161f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80161fa:	f103 0312 	add.w	r3, r3, #18
 80161fe:	881a      	ldrh	r2, [r3, #0]
 8016200:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016204:	f103 0310 	add.w	r3, r3, #16
 8016208:	881b      	ldrh	r3, [r3, #0]
 801620a:	490c      	ldr	r1, [pc, #48]	; (801623c <create_StepCountMap_queue+0x5c8>)
 801620c:	0112      	lsls	r2, r2, #4
 801620e:	4413      	add	r3, r2
 8016210:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016214:	3301      	adds	r3, #1
 8016216:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801621a:	f102 021c 	add.w	r2, r2, #28
 801621e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8016220:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016224:	f103 031c 	add.w	r3, r3, #28
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	2bfe      	cmp	r3, #254	; 0xfe
 801622c:	f67f adce 	bls.w	8015dcc <create_StepCountMap_queue+0x158>

		}

}
 8016230:	bf00      	nop
 8016232:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	200011f4 	.word	0x200011f4

08016240 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8016240:	b580      	push	{r7, lr}
 8016242:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801624a:	2300      	movs	r3, #0
 801624c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8016250:	f102 0207 	add.w	r2, r2, #7
 8016254:	7013      	strb	r3, [r2, #0]
 8016256:	e033      	b.n	80162c0 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8016258:	2300      	movs	r3, #0
 801625a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801625e:	f102 0206 	add.w	r2, r2, #6
 8016262:	7013      	strb	r3, [r2, #0]
 8016264:	e01a      	b.n	801629c <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8016266:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801626a:	f103 0307 	add.w	r3, r3, #7
 801626e:	781a      	ldrb	r2, [r3, #0]
 8016270:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8016274:	f103 0306 	add.w	r3, r3, #6
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	4931      	ldr	r1, [pc, #196]	; (8016340 <create_StepCountMapBack_queue+0x100>)
 801627c:	0112      	lsls	r2, r2, #4
 801627e:	4413      	add	r3, r2
 8016280:	22ff      	movs	r2, #255	; 0xff
 8016282:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8016286:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801628a:	f103 0306 	add.w	r3, r3, #6
 801628e:	781b      	ldrb	r3, [r3, #0]
 8016290:	3301      	adds	r3, #1
 8016292:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8016296:	f102 0206 	add.w	r2, r2, #6
 801629a:	7013      	strb	r3, [r2, #0]
 801629c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80162a0:	f103 0306 	add.w	r3, r3, #6
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2b0f      	cmp	r3, #15
 80162a8:	d9dd      	bls.n	8016266 <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80162aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80162ae:	f103 0307 	add.w	r3, r3, #7
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	3301      	adds	r3, #1
 80162b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80162ba:	f102 0207 	add.w	r2, r2, #7
 80162be:	7013      	strb	r3, [r2, #0]
 80162c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80162c4:	f103 0307 	add.w	r3, r3, #7
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	2b0f      	cmp	r3, #15
 80162cc:	d9c4      	bls.n	8016258 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 80162ce:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80162d2:	4618      	mov	r0, r3
 80162d4:	f000 fa88 	bl	80167e8 <initStack_walk>
	initStack_walk(&stack_y);
 80162d8:	f107 0308 	add.w	r3, r7, #8
 80162dc:	3b04      	subs	r3, #4
 80162de:	4618      	mov	r0, r3
 80162e0:	f000 fa82 	bl	80167e8 <initStack_walk>


	walk_count[0][0] = 0;
 80162e4:	4b16      	ldr	r3, [pc, #88]	; (8016340 <create_StepCountMapBack_queue+0x100>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80162ea:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80162ee:	2100      	movs	r1, #0
 80162f0:	4618      	mov	r0, r3
 80162f2:	f000 fa89 	bl	8016808 <pushStack_walk>
 80162f6:	f107 0308 	add.w	r3, r7, #8
 80162fa:	3b04      	subs	r3, #4
 80162fc:	2100      	movs	r1, #0
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 fa82 	bl	8016808 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8016304:	2301      	movs	r3, #1
 8016306:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801630a:	f102 0204 	add.w	r2, r2, #4
 801630e:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8016310:	2301      	movs	r3, #1
 8016312:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8016316:	f102 0202 	add.w	r2, r2, #2
 801631a:	8013      	strh	r3, [r2, #0]
 801631c:	2301      	movs	r3, #1
 801631e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8016322:	8013      	strh	r3, [r2, #0]
 8016324:	2301      	movs	r3, #1
 8016326:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801632a:	f102 021e 	add.w	r2, r2, #30
 801632e:	8013      	strh	r3, [r2, #0]
 8016330:	2301      	movs	r3, #1
 8016332:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8016336:	f102 021c 	add.w	r2, r2, #28
 801633a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801633c:	e244      	b.n	80167c8 <create_StepCountMapBack_queue+0x588>
 801633e:	bf00      	nop
 8016340:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8016344:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8016348:	4618      	mov	r0, r3
 801634a:	f000 fa87 	bl	801685c <popStack_walk>
 801634e:	4603      	mov	r3, r0
 8016350:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8016354:	f102 021a 	add.w	r2, r2, #26
 8016358:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801635a:	f107 0308 	add.w	r3, r7, #8
 801635e:	3b04      	subs	r3, #4
 8016360:	4618      	mov	r0, r3
 8016362:	f000 fa7b 	bl	801685c <popStack_walk>
 8016366:	4603      	mov	r3, r0
 8016368:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801636c:	f102 0218 	add.w	r2, r2, #24
 8016370:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8016372:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016376:	f103 031a 	add.w	r3, r3, #26
 801637a:	881b      	ldrh	r3, [r3, #0]
 801637c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016380:	4293      	cmp	r3, r2
 8016382:	f000 8229 	beq.w	80167d8 <create_StepCountMapBack_queue+0x598>
 8016386:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801638a:	f103 0318 	add.w	r3, r3, #24
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016394:	4293      	cmp	r3, r2
 8016396:	f000 821f 	beq.w	80167d8 <create_StepCountMapBack_queue+0x598>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 801639a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801639e:	f103 031a 	add.w	r3, r3, #26
 80163a2:	881b      	ldrh	r3, [r3, #0]
 80163a4:	011b      	lsls	r3, r3, #4
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80163ac:	f103 0318 	add.w	r3, r3, #24
 80163b0:	881b      	ldrh	r3, [r3, #0]
 80163b2:	4413      	add	r3, r2
 80163b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80163b8:	f102 0216 	add.w	r2, r2, #22
 80163bc:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80163be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80163c2:	f103 0318 	add.w	r3, r3, #24
 80163c6:	881b      	ldrh	r3, [r3, #0]
 80163c8:	2b0e      	cmp	r3, #14
 80163ca:	d817      	bhi.n	80163fc <create_StepCountMapBack_queue+0x1bc>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 80163cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80163d0:	f103 0318 	add.w	r3, r3, #24
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	4acb      	ldr	r2, [pc, #812]	; (8016704 <create_StepCountMapBack_queue+0x4c4>)
 80163d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163dc:	b29a      	uxth	r2, r3
 80163de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80163e2:	f103 031a 	add.w	r3, r3, #26
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	2101      	movs	r1, #1
 80163ea:	fa01 f303 	lsl.w	r3, r1, r3
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4013      	ands	r3, r2
 80163f2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80163f6:	f102 0202 	add.w	r2, r2, #2
 80163fa:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80163fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016400:	f103 0318 	add.w	r3, r3, #24
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d016      	beq.n	8016438 <create_StepCountMapBack_queue+0x1f8>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 801640a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801640e:	f103 0318 	add.w	r3, r3, #24
 8016412:	881b      	ldrh	r3, [r3, #0]
 8016414:	3b01      	subs	r3, #1
 8016416:	4abb      	ldr	r2, [pc, #748]	; (8016704 <create_StepCountMapBack_queue+0x4c4>)
 8016418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801641c:	b29a      	uxth	r2, r3
 801641e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016422:	f103 031a 	add.w	r3, r3, #26
 8016426:	881b      	ldrh	r3, [r3, #0]
 8016428:	2101      	movs	r1, #1
 801642a:	fa01 f303 	lsl.w	r3, r1, r3
 801642e:	b29b      	uxth	r3, r3
 8016430:	4013      	ands	r3, r2
 8016432:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8016436:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8016438:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801643c:	f103 031a 	add.w	r3, r3, #26
 8016440:	881b      	ldrh	r3, [r3, #0]
 8016442:	2b0e      	cmp	r3, #14
 8016444:	d819      	bhi.n	801647a <create_StepCountMapBack_queue+0x23a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8016446:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801644a:	f103 031a 	add.w	r3, r3, #26
 801644e:	881b      	ldrh	r3, [r3, #0]
 8016450:	4aac      	ldr	r2, [pc, #688]	; (8016704 <create_StepCountMapBack_queue+0x4c4>)
 8016452:	330e      	adds	r3, #14
 8016454:	009b      	lsls	r3, r3, #2
 8016456:	4413      	add	r3, r2
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	b29a      	uxth	r2, r3
 801645c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016460:	f103 0318 	add.w	r3, r3, #24
 8016464:	881b      	ldrh	r3, [r3, #0]
 8016466:	2101      	movs	r1, #1
 8016468:	fa01 f303 	lsl.w	r3, r1, r3
 801646c:	b29b      	uxth	r3, r3
 801646e:	4013      	ands	r3, r2
 8016470:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8016474:	f102 021e 	add.w	r2, r2, #30
 8016478:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801647a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801647e:	f103 031a 	add.w	r3, r3, #26
 8016482:	881b      	ldrh	r3, [r3, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d01a      	beq.n	80164be <create_StepCountMapBack_queue+0x27e>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8016488:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801648c:	f103 031a 	add.w	r3, r3, #26
 8016490:	881b      	ldrh	r3, [r3, #0]
 8016492:	3b01      	subs	r3, #1
 8016494:	4a9b      	ldr	r2, [pc, #620]	; (8016704 <create_StepCountMapBack_queue+0x4c4>)
 8016496:	330e      	adds	r3, #14
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	4413      	add	r3, r2
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	b29a      	uxth	r2, r3
 80164a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80164a4:	f103 0318 	add.w	r3, r3, #24
 80164a8:	881b      	ldrh	r3, [r3, #0]
 80164aa:	2101      	movs	r1, #1
 80164ac:	fa01 f303 	lsl.w	r3, r1, r3
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	4013      	ands	r3, r2
 80164b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80164b8:	f102 021c 	add.w	r2, r2, #28
 80164bc:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 80164be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80164c2:	f103 031a 	add.w	r3, r3, #26
 80164c6:	881a      	ldrh	r2, [r3, #0]
 80164c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80164cc:	f103 0318 	add.w	r3, r3, #24
 80164d0:	881b      	ldrh	r3, [r3, #0]
 80164d2:	3301      	adds	r3, #1
 80164d4:	498c      	ldr	r1, [pc, #560]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 80164d6:	0112      	lsls	r2, r2, #4
 80164d8:	4413      	add	r3, r2
 80164da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80164de:	2bff      	cmp	r3, #255	; 0xff
 80164e0:	d148      	bne.n	8016574 <create_StepCountMapBack_queue+0x334>
 80164e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80164e6:	f103 0318 	add.w	r3, r3, #24
 80164ea:	881b      	ldrh	r3, [r3, #0]
 80164ec:	2b0f      	cmp	r3, #15
 80164ee:	d041      	beq.n	8016574 <create_StepCountMapBack_queue+0x334>
 80164f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80164f4:	f103 0302 	add.w	r3, r3, #2
 80164f8:	881b      	ldrh	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d13a      	bne.n	8016574 <create_StepCountMapBack_queue+0x334>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80164fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016502:	f103 031a 	add.w	r3, r3, #26
 8016506:	881a      	ldrh	r2, [r3, #0]
 8016508:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801650c:	f103 0318 	add.w	r3, r3, #24
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	497d      	ldr	r1, [pc, #500]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 8016514:	0112      	lsls	r2, r2, #4
 8016516:	4413      	add	r3, r2
 8016518:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801651c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016520:	f103 031a 	add.w	r3, r3, #26
 8016524:	881a      	ldrh	r2, [r3, #0]
 8016526:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801652a:	f103 0318 	add.w	r3, r3, #24
 801652e:	881b      	ldrh	r3, [r3, #0]
 8016530:	3301      	adds	r3, #1
 8016532:	3101      	adds	r1, #1
 8016534:	b288      	uxth	r0, r1
 8016536:	4974      	ldr	r1, [pc, #464]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 8016538:	0112      	lsls	r2, r2, #4
 801653a:	4413      	add	r3, r2
 801653c:	4602      	mov	r2, r0
 801653e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8016542:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016546:	f103 031a 	add.w	r3, r3, #26
 801654a:	881a      	ldrh	r2, [r3, #0]
 801654c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8016550:	4611      	mov	r1, r2
 8016552:	4618      	mov	r0, r3
 8016554:	f000 f958 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8016558:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801655c:	f103 0318 	add.w	r3, r3, #24
 8016560:	881b      	ldrh	r3, [r3, #0]
 8016562:	3301      	adds	r3, #1
 8016564:	b29a      	uxth	r2, r3
 8016566:	f107 0308 	add.w	r3, r7, #8
 801656a:	3b04      	subs	r3, #4
 801656c:	4611      	mov	r1, r2
 801656e:	4618      	mov	r0, r3
 8016570:	f000 f94a 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8016574:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016578:	f103 031a 	add.w	r3, r3, #26
 801657c:	881a      	ldrh	r2, [r3, #0]
 801657e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016582:	f103 0318 	add.w	r3, r3, #24
 8016586:	881b      	ldrh	r3, [r3, #0]
 8016588:	3b01      	subs	r3, #1
 801658a:	495f      	ldr	r1, [pc, #380]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 801658c:	0112      	lsls	r2, r2, #4
 801658e:	4413      	add	r3, r2
 8016590:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016594:	2bff      	cmp	r3, #255	; 0xff
 8016596:	d146      	bne.n	8016626 <create_StepCountMapBack_queue+0x3e6>
 8016598:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801659c:	f103 0318 	add.w	r3, r3, #24
 80165a0:	881b      	ldrh	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d03f      	beq.n	8016626 <create_StepCountMapBack_queue+0x3e6>
 80165a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80165aa:	881b      	ldrh	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d13a      	bne.n	8016626 <create_StepCountMapBack_queue+0x3e6>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80165b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80165b4:	f103 031a 	add.w	r3, r3, #26
 80165b8:	881a      	ldrh	r2, [r3, #0]
 80165ba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80165be:	f103 0318 	add.w	r3, r3, #24
 80165c2:	881b      	ldrh	r3, [r3, #0]
 80165c4:	4950      	ldr	r1, [pc, #320]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 80165c6:	0112      	lsls	r2, r2, #4
 80165c8:	4413      	add	r3, r2
 80165ca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80165ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80165d2:	f103 031a 	add.w	r3, r3, #26
 80165d6:	881a      	ldrh	r2, [r3, #0]
 80165d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80165dc:	f103 0318 	add.w	r3, r3, #24
 80165e0:	881b      	ldrh	r3, [r3, #0]
 80165e2:	3b01      	subs	r3, #1
 80165e4:	3101      	adds	r1, #1
 80165e6:	b288      	uxth	r0, r1
 80165e8:	4947      	ldr	r1, [pc, #284]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 80165ea:	0112      	lsls	r2, r2, #4
 80165ec:	4413      	add	r3, r2
 80165ee:	4602      	mov	r2, r0
 80165f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80165f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80165f8:	f103 031a 	add.w	r3, r3, #26
 80165fc:	881a      	ldrh	r2, [r3, #0]
 80165fe:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8016602:	4611      	mov	r1, r2
 8016604:	4618      	mov	r0, r3
 8016606:	f000 f8ff 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801660a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801660e:	f103 0318 	add.w	r3, r3, #24
 8016612:	881b      	ldrh	r3, [r3, #0]
 8016614:	3b01      	subs	r3, #1
 8016616:	b29a      	uxth	r2, r3
 8016618:	f107 0308 	add.w	r3, r7, #8
 801661c:	3b04      	subs	r3, #4
 801661e:	4611      	mov	r1, r2
 8016620:	4618      	mov	r0, r3
 8016622:	f000 f8f1 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8016626:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801662a:	f103 031a 	add.w	r3, r3, #26
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	1c5a      	adds	r2, r3, #1
 8016632:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016636:	f103 0318 	add.w	r3, r3, #24
 801663a:	881b      	ldrh	r3, [r3, #0]
 801663c:	4932      	ldr	r1, [pc, #200]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 801663e:	0112      	lsls	r2, r2, #4
 8016640:	4413      	add	r3, r2
 8016642:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016646:	2bff      	cmp	r3, #255	; 0xff
 8016648:	d148      	bne.n	80166dc <create_StepCountMapBack_queue+0x49c>
 801664a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801664e:	f103 031a 	add.w	r3, r3, #26
 8016652:	881b      	ldrh	r3, [r3, #0]
 8016654:	2b0f      	cmp	r3, #15
 8016656:	d041      	beq.n	80166dc <create_StepCountMapBack_queue+0x49c>
 8016658:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801665c:	f103 031e 	add.w	r3, r3, #30
 8016660:	881b      	ldrh	r3, [r3, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d13a      	bne.n	80166dc <create_StepCountMapBack_queue+0x49c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8016666:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801666a:	f103 031a 	add.w	r3, r3, #26
 801666e:	881a      	ldrh	r2, [r3, #0]
 8016670:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016674:	f103 0318 	add.w	r3, r3, #24
 8016678:	881b      	ldrh	r3, [r3, #0]
 801667a:	4923      	ldr	r1, [pc, #140]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 801667c:	0112      	lsls	r2, r2, #4
 801667e:	4413      	add	r3, r2
 8016680:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8016684:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016688:	f103 031a 	add.w	r3, r3, #26
 801668c:	881b      	ldrh	r3, [r3, #0]
 801668e:	1c5a      	adds	r2, r3, #1
 8016690:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016694:	f103 0318 	add.w	r3, r3, #24
 8016698:	881b      	ldrh	r3, [r3, #0]
 801669a:	3101      	adds	r1, #1
 801669c:	b288      	uxth	r0, r1
 801669e:	491a      	ldr	r1, [pc, #104]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 80166a0:	0112      	lsls	r2, r2, #4
 80166a2:	4413      	add	r3, r2
 80166a4:	4602      	mov	r2, r0
 80166a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80166aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80166ae:	f103 031a 	add.w	r3, r3, #26
 80166b2:	881b      	ldrh	r3, [r3, #0]
 80166b4:	3301      	adds	r3, #1
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80166bc:	4611      	mov	r1, r2
 80166be:	4618      	mov	r0, r3
 80166c0:	f000 f8a2 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80166c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80166c8:	f103 0318 	add.w	r3, r3, #24
 80166cc:	881a      	ldrh	r2, [r3, #0]
 80166ce:	f107 0308 	add.w	r3, r7, #8
 80166d2:	3b04      	subs	r3, #4
 80166d4:	4611      	mov	r1, r2
 80166d6:	4618      	mov	r0, r3
 80166d8:	f000 f896 	bl	8016808 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 80166dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80166e0:	f103 031a 	add.w	r3, r3, #26
 80166e4:	881b      	ldrh	r3, [r3, #0]
 80166e6:	1e5a      	subs	r2, r3, #1
 80166e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80166ec:	f103 0318 	add.w	r3, r3, #24
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	4905      	ldr	r1, [pc, #20]	; (8016708 <create_StepCountMapBack_queue+0x4c8>)
 80166f4:	0112      	lsls	r2, r2, #4
 80166f6:	4413      	add	r3, r2
 80166f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80166fc:	2bff      	cmp	r3, #255	; 0xff
 80166fe:	d14e      	bne.n	801679e <create_StepCountMapBack_queue+0x55e>
 8016700:	e004      	b.n	801670c <create_StepCountMapBack_queue+0x4cc>
 8016702:	bf00      	nop
 8016704:	20001010 	.word	0x20001010
 8016708:	200011f4 	.word	0x200011f4
 801670c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016710:	f103 031a 	add.w	r3, r3, #26
 8016714:	881b      	ldrh	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d041      	beq.n	801679e <create_StepCountMapBack_queue+0x55e>
 801671a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801671e:	f103 031c 	add.w	r3, r3, #28
 8016722:	881b      	ldrh	r3, [r3, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d13a      	bne.n	801679e <create_StepCountMapBack_queue+0x55e>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8016728:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801672c:	f103 031a 	add.w	r3, r3, #26
 8016730:	881a      	ldrh	r2, [r3, #0]
 8016732:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016736:	f103 0318 	add.w	r3, r3, #24
 801673a:	881b      	ldrh	r3, [r3, #0]
 801673c:	4929      	ldr	r1, [pc, #164]	; (80167e4 <create_StepCountMapBack_queue+0x5a4>)
 801673e:	0112      	lsls	r2, r2, #4
 8016740:	4413      	add	r3, r2
 8016742:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8016746:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801674a:	f103 031a 	add.w	r3, r3, #26
 801674e:	881b      	ldrh	r3, [r3, #0]
 8016750:	1e5a      	subs	r2, r3, #1
 8016752:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016756:	f103 0318 	add.w	r3, r3, #24
 801675a:	881b      	ldrh	r3, [r3, #0]
 801675c:	3101      	adds	r1, #1
 801675e:	b288      	uxth	r0, r1
 8016760:	4920      	ldr	r1, [pc, #128]	; (80167e4 <create_StepCountMapBack_queue+0x5a4>)
 8016762:	0112      	lsls	r2, r2, #4
 8016764:	4413      	add	r3, r2
 8016766:	4602      	mov	r2, r0
 8016768:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801676c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8016770:	f103 031a 	add.w	r3, r3, #26
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	3b01      	subs	r3, #1
 8016778:	b29a      	uxth	r2, r3
 801677a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801677e:	4611      	mov	r1, r2
 8016780:	4618      	mov	r0, r3
 8016782:	f000 f841 	bl	8016808 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8016786:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801678a:	f103 0318 	add.w	r3, r3, #24
 801678e:	881a      	ldrh	r2, [r3, #0]
 8016790:	f107 0308 	add.w	r3, r7, #8
 8016794:	3b04      	subs	r3, #4
 8016796:	4611      	mov	r1, r2
 8016798:	4618      	mov	r0, r3
 801679a:	f000 f835 	bl	8016808 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801679e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80167a2:	f103 031a 	add.w	r3, r3, #26
 80167a6:	881a      	ldrh	r2, [r3, #0]
 80167a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80167ac:	f103 0318 	add.w	r3, r3, #24
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	490c      	ldr	r1, [pc, #48]	; (80167e4 <create_StepCountMapBack_queue+0x5a4>)
 80167b4:	0112      	lsls	r2, r2, #4
 80167b6:	4413      	add	r3, r2
 80167b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167bc:	3301      	adds	r3, #1
 80167be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80167c2:	f102 0204 	add.w	r2, r2, #4
 80167c6:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80167c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80167cc:	f103 0304 	add.w	r3, r3, #4
 80167d0:	881b      	ldrh	r3, [r3, #0]
 80167d2:	2bfe      	cmp	r3, #254	; 0xfe
 80167d4:	f67f adb6 	bls.w	8016344 <create_StepCountMapBack_queue+0x104>

		}

}
 80167d8:	bf00      	nop
 80167da:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	200011f4 	.word	0x200011f4

080167e8 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80167e8:	b480      	push	{r7}
 80167ea:	b083      	sub	sp, #12
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2200      	movs	r2, #0
 80167f4:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2200      	movs	r2, #0
 80167fa:	605a      	str	r2, [r3, #4]
}
 80167fc:	bf00      	nop
 80167fe:	370c      	adds	r7, #12
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr

08016808 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	460b      	mov	r3, r1
 8016812:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	685a      	ldr	r2, [r3, #4]
 8016818:	8879      	ldrh	r1, [r7, #2]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	3202      	adds	r2, #2
 801681e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	1c5a      	adds	r2, r3, #1
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016834:	d102      	bne.n	801683c <pushStack_walk+0x34>
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2200      	movs	r2, #0
 801683a:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	685a      	ldr	r2, [r3, #4]
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	429a      	cmp	r2, r3
 8016846:	d103      	bne.n	8016850 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8016848:	4803      	ldr	r0, [pc, #12]	; (8016858 <pushStack_walk+0x50>)
 801684a:	f00c f8e1 	bl	8022a10 <puts>
        return;
 801684e:	bf00      	nop
    }
}
 8016850:	3708      	adds	r7, #8
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	080263a0 	.word	0x080263a0

0801685c <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 801685c:	b480      	push	{r7}
 801685e:	b085      	sub	sp, #20
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8016864:	2300      	movs	r3, #0
 8016866:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685a      	ldr	r2, [r3, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	429a      	cmp	r2, r3
 8016872:	d102      	bne.n	801687a <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return MAX_WALKCOUNT_DIJKSTRA;
 8016874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016878:	e014      	b.n	80168a4 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	3202      	adds	r2, #2
 8016882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016886:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	1c5a      	adds	r2, r3, #1
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801689a:	d102      	bne.n	80168a2 <popStack_walk+0x46>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 80168a2:	89fb      	ldrh	r3, [r7, #14]
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3714      	adds	r7, #20
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr

080168b0 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0

	int tt = 14;
 80168b6:	230e      	movs	r3, #14
 80168b8:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80168ba:	2300      	movs	r3, #0
 80168bc:	603b      	str	r3, [r7, #0]

	printf(
 80168be:	487c      	ldr	r0, [pc, #496]	; (8016ab0 <maze_display+0x200>)
 80168c0:	f00c f8a6 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80168c4:	230e      	movs	r3, #14
 80168c6:	607b      	str	r3, [r7, #4]
 80168c8:	e06a      	b.n	80169a0 <maze_display+0xf0>

		printf("|%5d", walk_count[0][tt + 1]);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	3301      	adds	r3, #1
 80168ce:	4a79      	ldr	r2, [pc, #484]	; (8016ab4 <maze_display+0x204>)
 80168d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80168d4:	4619      	mov	r1, r3
 80168d6:	4878      	ldr	r0, [pc, #480]	; (8016ab8 <maze_display+0x208>)
 80168d8:	f00b fffe 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80168dc:	2300      	movs	r3, #0
 80168de:	603b      	str	r3, [r7, #0]
 80168e0:	e030      	b.n	8016944 <maze_display+0x94>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80168e2:	4a76      	ldr	r2, [pc, #472]	; (8016abc <maze_display+0x20c>)
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	330e      	adds	r3, #14
 80168e8:	009b      	lsls	r3, r3, #2
 80168ea:	4413      	add	r3, r2
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	3201      	adds	r2, #1
 80168f2:	2101      	movs	r1, #1
 80168f4:	fa01 f202 	lsl.w	r2, r1, r2
 80168f8:	4013      	ands	r3, r2
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	3201      	adds	r2, #1
 80168fe:	2101      	movs	r1, #1
 8016900:	fa01 f202 	lsl.w	r2, r1, r2
 8016904:	4293      	cmp	r3, r2
 8016906:	d10d      	bne.n	8016924 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	1c5a      	adds	r2, r3, #1
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3301      	adds	r3, #1
 8016910:	4968      	ldr	r1, [pc, #416]	; (8016ab4 <maze_display+0x204>)
 8016912:	0112      	lsls	r2, r2, #4
 8016914:	4413      	add	r3, r2
 8016916:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801691a:	4619      	mov	r1, r3
 801691c:	4866      	ldr	r0, [pc, #408]	; (8016ab8 <maze_display+0x208>)
 801691e:	f00b ffdb 	bl	80228d8 <iprintf>
 8016922:	e00c      	b.n	801693e <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	1c5a      	adds	r2, r3, #1
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	3301      	adds	r3, #1
 801692c:	4961      	ldr	r1, [pc, #388]	; (8016ab4 <maze_display+0x204>)
 801692e:	0112      	lsls	r2, r2, #4
 8016930:	4413      	add	r3, r2
 8016932:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016936:	4619      	mov	r1, r3
 8016938:	4861      	ldr	r0, [pc, #388]	; (8016ac0 <maze_display+0x210>)
 801693a:	f00b ffcd 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	3301      	adds	r3, #1
 8016942:	603b      	str	r3, [r7, #0]
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	2b0e      	cmp	r3, #14
 8016948:	ddcb      	ble.n	80168e2 <maze_display+0x32>
			}
		}
		printf("|\n");
 801694a:	485e      	ldr	r0, [pc, #376]	; (8016ac4 <maze_display+0x214>)
 801694c:	f00c f860 	bl	8022a10 <puts>
		if (tt <= -1) {
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2b00      	cmp	r3, #0
 8016954:	db29      	blt.n	80169aa <maze_display+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8016956:	2300      	movs	r3, #0
 8016958:	603b      	str	r3, [r7, #0]
 801695a:	e018      	b.n	801698e <maze_display+0xde>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 801695c:	4a57      	ldr	r2, [pc, #348]	; (8016abc <maze_display+0x20c>)
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016964:	2101      	movs	r1, #1
 8016966:	683a      	ldr	r2, [r7, #0]
 8016968:	fa01 f202 	lsl.w	r2, r1, r2
 801696c:	4013      	ands	r3, r2
 801696e:	2101      	movs	r1, #1
 8016970:	683a      	ldr	r2, [r7, #0]
 8016972:	fa01 f202 	lsl.w	r2, r1, r2
 8016976:	4293      	cmp	r3, r2
 8016978:	d103      	bne.n	8016982 <maze_display+0xd2>
				printf("+-----");
 801697a:	4853      	ldr	r0, [pc, #332]	; (8016ac8 <maze_display+0x218>)
 801697c:	f00b ffac 	bl	80228d8 <iprintf>
 8016980:	e002      	b.n	8016988 <maze_display+0xd8>
			}else{
				printf("+     ");
 8016982:	4852      	ldr	r0, [pc, #328]	; (8016acc <maze_display+0x21c>)
 8016984:	f00b ffa8 	bl	80228d8 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	3301      	adds	r3, #1
 801698c:	603b      	str	r3, [r7, #0]
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b0f      	cmp	r3, #15
 8016992:	dde3      	ble.n	801695c <maze_display+0xac>
			}
		}

		printf("+\n");
 8016994:	484e      	ldr	r0, [pc, #312]	; (8016ad0 <maze_display+0x220>)
 8016996:	f00c f83b 	bl	8022a10 <puts>
	for (tt = 14;tt >= -1;tt--){
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	3b01      	subs	r3, #1
 801699e:	607b      	str	r3, [r7, #4]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a6:	da90      	bge.n	80168ca <maze_display+0x1a>
 80169a8:	e000      	b.n	80169ac <maze_display+0xfc>
			break;
 80169aa:	bf00      	nop

	}

	printf(
 80169ac:	4849      	ldr	r0, [pc, #292]	; (8016ad4 <maze_display+0x224>)
 80169ae:	f00c f82f 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80169b2:	483f      	ldr	r0, [pc, #252]	; (8016ab0 <maze_display+0x200>)
 80169b4:	f00c f82c 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 80169b8:	230e      	movs	r3, #14
 80169ba:	607b      	str	r3, [r7, #4]
 80169bc:	e06b      	b.n	8016a96 <maze_display+0x1e6>
		printf("|%5d", walk_count[0][tt + 1]);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3301      	adds	r3, #1
 80169c2:	4a3c      	ldr	r2, [pc, #240]	; (8016ab4 <maze_display+0x204>)
 80169c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80169c8:	4619      	mov	r1, r3
 80169ca:	483b      	ldr	r0, [pc, #236]	; (8016ab8 <maze_display+0x208>)
 80169cc:	f00b ff84 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80169d0:	2300      	movs	r3, #0
 80169d2:	603b      	str	r3, [r7, #0]
 80169d4:	e030      	b.n	8016a38 <maze_display+0x188>
			if ((wall.column_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80169d6:	4a39      	ldr	r2, [pc, #228]	; (8016abc <maze_display+0x20c>)
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	332c      	adds	r3, #44	; 0x2c
 80169dc:	009b      	lsls	r3, r3, #2
 80169de:	4413      	add	r3, r2
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	3201      	adds	r2, #1
 80169e6:	2101      	movs	r1, #1
 80169e8:	fa01 f202 	lsl.w	r2, r1, r2
 80169ec:	4013      	ands	r3, r2
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	3201      	adds	r2, #1
 80169f2:	2101      	movs	r1, #1
 80169f4:	fa01 f202 	lsl.w	r2, r1, r2
 80169f8:	4293      	cmp	r3, r2
 80169fa:	d10d      	bne.n	8016a18 <maze_display+0x168>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	1c5a      	adds	r2, r3, #1
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3301      	adds	r3, #1
 8016a04:	492b      	ldr	r1, [pc, #172]	; (8016ab4 <maze_display+0x204>)
 8016a06:	0112      	lsls	r2, r2, #4
 8016a08:	4413      	add	r3, r2
 8016a0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016a0e:	4619      	mov	r1, r3
 8016a10:	4829      	ldr	r0, [pc, #164]	; (8016ab8 <maze_display+0x208>)
 8016a12:	f00b ff61 	bl	80228d8 <iprintf>
 8016a16:	e00c      	b.n	8016a32 <maze_display+0x182>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	1c5a      	adds	r2, r3, #1
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	3301      	adds	r3, #1
 8016a20:	4924      	ldr	r1, [pc, #144]	; (8016ab4 <maze_display+0x204>)
 8016a22:	0112      	lsls	r2, r2, #4
 8016a24:	4413      	add	r3, r2
 8016a26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	4824      	ldr	r0, [pc, #144]	; (8016ac0 <maze_display+0x210>)
 8016a2e:	f00b ff53 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	3301      	adds	r3, #1
 8016a36:	603b      	str	r3, [r7, #0]
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	2b0e      	cmp	r3, #14
 8016a3c:	ddcb      	ble.n	80169d6 <maze_display+0x126>
			}
		}
		printf("|\n");
 8016a3e:	4821      	ldr	r0, [pc, #132]	; (8016ac4 <maze_display+0x214>)
 8016a40:	f00b ffe6 	bl	8022a10 <puts>
		if (tt <= -1) {
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	db2a      	blt.n	8016aa0 <maze_display+0x1f0>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	603b      	str	r3, [r7, #0]
 8016a4e:	e019      	b.n	8016a84 <maze_display+0x1d4>
			if ((wall.row_look[tt] & (1 << ss)) == (1 << ss)){
 8016a50:	4a1a      	ldr	r2, [pc, #104]	; (8016abc <maze_display+0x20c>)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	331e      	adds	r3, #30
 8016a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016a5a:	2101      	movs	r1, #1
 8016a5c:	683a      	ldr	r2, [r7, #0]
 8016a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8016a62:	4013      	ands	r3, r2
 8016a64:	2101      	movs	r1, #1
 8016a66:	683a      	ldr	r2, [r7, #0]
 8016a68:	fa01 f202 	lsl.w	r2, r1, r2
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d103      	bne.n	8016a78 <maze_display+0x1c8>
				printf("+-----");
 8016a70:	4815      	ldr	r0, [pc, #84]	; (8016ac8 <maze_display+0x218>)
 8016a72:	f00b ff31 	bl	80228d8 <iprintf>
 8016a76:	e002      	b.n	8016a7e <maze_display+0x1ce>
			}else{
				printf("+     ");
 8016a78:	4814      	ldr	r0, [pc, #80]	; (8016acc <maze_display+0x21c>)
 8016a7a:	f00b ff2d 	bl	80228d8 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	3301      	adds	r3, #1
 8016a82:	603b      	str	r3, [r7, #0]
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	2b0f      	cmp	r3, #15
 8016a88:	dde2      	ble.n	8016a50 <maze_display+0x1a0>
			}
		}
		printf("+\n");
 8016a8a:	4811      	ldr	r0, [pc, #68]	; (8016ad0 <maze_display+0x220>)
 8016a8c:	f00b ffc0 	bl	8022a10 <puts>
	for (tt = 14;tt >= -1;tt--){
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	3b01      	subs	r3, #1
 8016a94:	607b      	str	r3, [r7, #4]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a9c:	da8f      	bge.n	80169be <maze_display+0x10e>
 8016a9e:	e000      	b.n	8016aa2 <maze_display+0x1f2>
			break;
 8016aa0:	bf00      	nop
	}

	printf(
 8016aa2:	480c      	ldr	r0, [pc, #48]	; (8016ad4 <maze_display+0x224>)
 8016aa4:	f00b ffb4 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	080263ac 	.word	0x080263ac
 8016ab4:	200011f4 	.word	0x200011f4
 8016ab8:	08026410 	.word	0x08026410
 8016abc:	20001010 	.word	0x20001010
 8016ac0:	08026418 	.word	0x08026418
 8016ac4:	08026420 	.word	0x08026420
 8016ac8:	08026424 	.word	0x08026424
 8016acc:	0802642c 	.word	0x0802642c
 8016ad0:	08026434 	.word	0x08026434
 8016ad4:	08026438 	.word	0x08026438

08016ad8 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0

	int tt = 14;
 8016ade:	230e      	movs	r3, #14
 8016ae0:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	603b      	str	r3, [r7, #0]

	printf(
 8016ae6:	4863      	ldr	r0, [pc, #396]	; (8016c74 <maze_display_Dijkstra+0x19c>)
 8016ae8:	f00b ff92 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8016aec:	230e      	movs	r3, #14
 8016aee:	607b      	str	r3, [r7, #4]
 8016af0:	e066      	b.n	8016bc0 <maze_display_Dijkstra+0xe8>

		printf("|   ");//walk_count[tt + 1]
 8016af2:	4861      	ldr	r0, [pc, #388]	; (8016c78 <maze_display_Dijkstra+0x1a0>)
 8016af4:	f00b fef0 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8016af8:	2300      	movs	r3, #0
 8016afa:	603b      	str	r3, [r7, #0]
 8016afc:	e028      	b.n	8016b50 <maze_display_Dijkstra+0x78>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8016afe:	4a5f      	ldr	r2, [pc, #380]	; (8016c7c <maze_display_Dijkstra+0x1a4>)
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	330e      	adds	r3, #14
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	4413      	add	r3, r2
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	3201      	adds	r2, #1
 8016b0e:	2101      	movs	r1, #1
 8016b10:	fa01 f202 	lsl.w	r2, r1, r2
 8016b14:	4013      	ands	r3, r2
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	3201      	adds	r2, #1
 8016b1a:	2101      	movs	r1, #1
 8016b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8016b20:	4293      	cmp	r3, r2
 8016b22:	d103      	bne.n	8016b2c <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8016b24:	4856      	ldr	r0, [pc, #344]	; (8016c80 <maze_display_Dijkstra+0x1a8>)
 8016b26:	f00b fed7 	bl	80228d8 <iprintf>
 8016b2a:	e00e      	b.n	8016b4a <maze_display_Dijkstra+0x72>
			}else{
				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	1c5a      	adds	r2, r3, #1
 8016b30:	4954      	ldr	r1, [pc, #336]	; (8016c84 <maze_display_Dijkstra+0x1ac>)
 8016b32:	4613      	mov	r3, r2
 8016b34:	011b      	lsls	r3, r3, #4
 8016b36:	1a9b      	subs	r3, r3, r2
 8016b38:	683a      	ldr	r2, [r7, #0]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	33f0      	adds	r3, #240	; 0xf0
 8016b3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016b42:	4619      	mov	r1, r3
 8016b44:	4850      	ldr	r0, [pc, #320]	; (8016c88 <maze_display_Dijkstra+0x1b0>)
 8016b46:	f00b fec7 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	603b      	str	r3, [r7, #0]
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	2b0e      	cmp	r3, #14
 8016b54:	ddd3      	ble.n	8016afe <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8016b56:	484d      	ldr	r0, [pc, #308]	; (8016c8c <maze_display_Dijkstra+0x1b4>)
 8016b58:	f00b ff5a 	bl	8022a10 <puts>
		if (tt <= -1) {
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	db33      	blt.n	8016bca <maze_display_Dijkstra+0xf2>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8016b62:	2300      	movs	r3, #0
 8016b64:	603b      	str	r3, [r7, #0]
 8016b66:	e022      	b.n	8016bae <maze_display_Dijkstra+0xd6>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 8016b68:	4a44      	ldr	r2, [pc, #272]	; (8016c7c <maze_display_Dijkstra+0x1a4>)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b70:	2101      	movs	r1, #1
 8016b72:	683a      	ldr	r2, [r7, #0]
 8016b74:	fa01 f202 	lsl.w	r2, r1, r2
 8016b78:	4013      	ands	r3, r2
 8016b7a:	2101      	movs	r1, #1
 8016b7c:	683a      	ldr	r2, [r7, #0]
 8016b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8016b82:	4293      	cmp	r3, r2
 8016b84:	d103      	bne.n	8016b8e <maze_display_Dijkstra+0xb6>
				printf("+-----");
 8016b86:	4842      	ldr	r0, [pc, #264]	; (8016c90 <maze_display_Dijkstra+0x1b8>)
 8016b88:	f00b fea6 	bl	80228d8 <iprintf>
 8016b8c:	e00c      	b.n	8016ba8 <maze_display_Dijkstra+0xd0>
			}else{
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 8016b8e:	493d      	ldr	r1, [pc, #244]	; (8016c84 <maze_display_Dijkstra+0x1ac>)
 8016b90:	683a      	ldr	r2, [r7, #0]
 8016b92:	4613      	mov	r3, r2
 8016b94:	011b      	lsls	r3, r3, #4
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	4413      	add	r3, r2
 8016b9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	483c      	ldr	r0, [pc, #240]	; (8016c94 <maze_display_Dijkstra+0x1bc>)
 8016ba4:	f00b fe98 	bl	80228d8 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	3301      	adds	r3, #1
 8016bac:	603b      	str	r3, [r7, #0]
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	2b0f      	cmp	r3, #15
 8016bb2:	ddd9      	ble.n	8016b68 <maze_display_Dijkstra+0x90>
			}
		}

		printf("+\n");
 8016bb4:	4838      	ldr	r0, [pc, #224]	; (8016c98 <maze_display_Dijkstra+0x1c0>)
 8016bb6:	f00b ff2b 	bl	8022a10 <puts>
	for (tt = 14;tt >= -1;tt--){
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	3b01      	subs	r3, #1
 8016bbe:	607b      	str	r3, [r7, #4]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bc6:	da94      	bge.n	8016af2 <maze_display_Dijkstra+0x1a>
 8016bc8:	e000      	b.n	8016bcc <maze_display_Dijkstra+0xf4>
			break;
 8016bca:	bf00      	nop

	}

	printf(
 8016bcc:	4833      	ldr	r0, [pc, #204]	; (8016c9c <maze_display_Dijkstra+0x1c4>)
 8016bce:	f00b ff1f 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8016bd2:	4828      	ldr	r0, [pc, #160]	; (8016c74 <maze_display_Dijkstra+0x19c>)
 8016bd4:	f00b ff1c 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8016bd8:	230e      	movs	r3, #14
 8016bda:	607b      	str	r3, [r7, #4]
 8016bdc:	e03c      	b.n	8016c58 <maze_display_Dijkstra+0x180>

		printf("|   ");//walk_count[tt + 1]
 8016bde:	4826      	ldr	r0, [pc, #152]	; (8016c78 <maze_display_Dijkstra+0x1a0>)
 8016be0:	f00b fe7a 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8016be4:	2300      	movs	r3, #0
 8016be6:	603b      	str	r3, [r7, #0]
 8016be8:	e011      	b.n	8016c0e <maze_display_Dijkstra+0x136>

				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	1c5a      	adds	r2, r3, #1
 8016bee:	4925      	ldr	r1, [pc, #148]	; (8016c84 <maze_display_Dijkstra+0x1ac>)
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	011b      	lsls	r3, r3, #4
 8016bf4:	1a9b      	subs	r3, r3, r2
 8016bf6:	683a      	ldr	r2, [r7, #0]
 8016bf8:	4413      	add	r3, r2
 8016bfa:	33f0      	adds	r3, #240	; 0xf0
 8016bfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016c00:	4619      	mov	r1, r3
 8016c02:	4821      	ldr	r0, [pc, #132]	; (8016c88 <maze_display_Dijkstra+0x1b0>)
 8016c04:	f00b fe68 	bl	80228d8 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	603b      	str	r3, [r7, #0]
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	2b0e      	cmp	r3, #14
 8016c12:	ddea      	ble.n	8016bea <maze_display_Dijkstra+0x112>

		}
		printf("   |\n");
 8016c14:	481d      	ldr	r0, [pc, #116]	; (8016c8c <maze_display_Dijkstra+0x1b4>)
 8016c16:	f00b fefb 	bl	8022a10 <puts>
		if (tt <= -1) {
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	db20      	blt.n	8016c62 <maze_display_Dijkstra+0x18a>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8016c20:	2300      	movs	r3, #0
 8016c22:	603b      	str	r3, [r7, #0]
 8016c24:	e00f      	b.n	8016c46 <maze_display_Dijkstra+0x16e>
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 8016c26:	4917      	ldr	r1, [pc, #92]	; (8016c84 <maze_display_Dijkstra+0x1ac>)
 8016c28:	683a      	ldr	r2, [r7, #0]
 8016c2a:	4613      	mov	r3, r2
 8016c2c:	011b      	lsls	r3, r3, #4
 8016c2e:	1a9b      	subs	r3, r3, r2
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	4413      	add	r3, r2
 8016c34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	4816      	ldr	r0, [pc, #88]	; (8016c94 <maze_display_Dijkstra+0x1bc>)
 8016c3c:	f00b fe4c 	bl	80228d8 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	3301      	adds	r3, #1
 8016c44:	603b      	str	r3, [r7, #0]
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	2b0f      	cmp	r3, #15
 8016c4a:	ddec      	ble.n	8016c26 <maze_display_Dijkstra+0x14e>
		}

		printf("+\n");
 8016c4c:	4812      	ldr	r0, [pc, #72]	; (8016c98 <maze_display_Dijkstra+0x1c0>)
 8016c4e:	f00b fedf 	bl	8022a10 <puts>
	for (tt = 14;tt >= -1;tt--){
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	3b01      	subs	r3, #1
 8016c56:	607b      	str	r3, [r7, #4]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c5e:	dabe      	bge.n	8016bde <maze_display_Dijkstra+0x106>
 8016c60:	e000      	b.n	8016c64 <maze_display_Dijkstra+0x18c>
			break;
 8016c62:	bf00      	nop

	}

	printf(
 8016c64:	480d      	ldr	r0, [pc, #52]	; (8016c9c <maze_display_Dijkstra+0x1c4>)
 8016c66:	f00b fed3 	bl	8022a10 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8016c6a:	bf00      	nop
 8016c6c:	3708      	adds	r7, #8
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	080263ac 	.word	0x080263ac
 8016c78:	0802649c 	.word	0x0802649c
 8016c7c:	20001010 	.word	0x20001010
 8016c80:	080264a4 	.word	0x080264a4
 8016c84:	200013f4 	.word	0x200013f4
 8016c88:	080264ac 	.word	0x080264ac
 8016c8c:	080264b4 	.word	0x080264b4
 8016c90:	08026424 	.word	0x08026424
 8016c94:	080264bc 	.word	0x080264bc
 8016c98:	08026434 	.word	0x08026434
 8016c9c:	08026438 	.word	0x08026438

08016ca0 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8016caa:	2300      	movs	r3, #0
 8016cac:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8016cb6:	4b71      	ldr	r3, [pc, #452]	; (8016e7c <mode_decision+0x1dc>)
 8016cb8:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8016cba:	79fb      	ldrb	r3, [r7, #7]
 8016cbc:	f003 030f 	and.w	r3, r3, #15
 8016cc0:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8016cc2:	79fb      	ldrb	r3, [r7, #7]
 8016cc4:	091b      	lsrs	r3, r3, #4
 8016cc6:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8016cc8:	7bbb      	ldrb	r3, [r7, #14]
 8016cca:	011b      	lsls	r3, r3, #4
 8016ccc:	b2da      	uxtb	r2, r3
 8016cce:	7bfb      	ldrb	r3, [r7, #15]
 8016cd0:	4413      	add	r3, r2
 8016cd2:	b2db      	uxtb	r3, r3
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f1 fb17 	bl	8008308 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8016cda:	e07f      	b.n	8016ddc <mode_decision+0x13c>
				HAL_Delay(1);
 8016cdc:	2001      	movs	r0, #1
 8016cde:	f003 fea9 	bl	801aa34 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8016ce2:	4b67      	ldr	r3, [pc, #412]	; (8016e80 <mode_decision+0x1e0>)
 8016ce4:	edd3 7a00 	vldr	s15, [r3]
 8016ce8:	ed97 7a02 	vldr	s14, [r7, #8]
 8016cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf4:	d813      	bhi.n	8016d1e <mode_decision+0x7e>
					if (main_modeR == 15) {
 8016cf6:	7bfb      	ldrb	r3, [r7, #15]
 8016cf8:	2b0f      	cmp	r3, #15
 8016cfa:	d102      	bne.n	8016d02 <mode_decision+0x62>
						main_modeR = 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	73fb      	strb	r3, [r7, #15]
 8016d00:	e002      	b.n	8016d08 <mode_decision+0x68>
					} else {
						main_modeR++;
 8016d02:	7bfb      	ldrb	r3, [r7, #15]
 8016d04:	3301      	adds	r3, #1
 8016d06:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8016d08:	f7ea f948 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8016d0c:	7bbb      	ldrb	r3, [r7, #14]
 8016d0e:	011b      	lsls	r3, r3, #4
 8016d10:	b2da      	uxtb	r2, r3
 8016d12:	7bfb      	ldrb	r3, [r7, #15]
 8016d14:	4413      	add	r3, r2
 8016d16:	b2db      	uxtb	r3, r3
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f1 faf5 	bl	8008308 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8016d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8016d22:	eeb1 7a67 	vneg.f32	s14, s15
 8016d26:	4b56      	ldr	r3, [pc, #344]	; (8016e80 <mode_decision+0x1e0>)
 8016d28:	edd3 7a00 	vldr	s15, [r3]
 8016d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d34:	db13      	blt.n	8016d5e <mode_decision+0xbe>
					if (main_modeR == 0) {
 8016d36:	7bfb      	ldrb	r3, [r7, #15]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d102      	bne.n	8016d42 <mode_decision+0xa2>
						main_modeR = 15;
 8016d3c:	230f      	movs	r3, #15
 8016d3e:	73fb      	strb	r3, [r7, #15]
 8016d40:	e002      	b.n	8016d48 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8016d42:	7bfb      	ldrb	r3, [r7, #15]
 8016d44:	3b01      	subs	r3, #1
 8016d46:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8016d48:	f7ea f928 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8016d4c:	7bbb      	ldrb	r3, [r7, #14]
 8016d4e:	011b      	lsls	r3, r3, #4
 8016d50:	b2da      	uxtb	r2, r3
 8016d52:	7bfb      	ldrb	r3, [r7, #15]
 8016d54:	4413      	add	r3, r2
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7f1 fad5 	bl	8008308 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8016d5e:	4b49      	ldr	r3, [pc, #292]	; (8016e84 <mode_decision+0x1e4>)
 8016d60:	edd3 7a00 	vldr	s15, [r3]
 8016d64:	ed97 7a02 	vldr	s14, [r7, #8]
 8016d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d70:	d813      	bhi.n	8016d9a <mode_decision+0xfa>
					if (main_modeL == 15) {
 8016d72:	7bbb      	ldrb	r3, [r7, #14]
 8016d74:	2b0f      	cmp	r3, #15
 8016d76:	d102      	bne.n	8016d7e <mode_decision+0xde>
						main_modeL = 0;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	73bb      	strb	r3, [r7, #14]
 8016d7c:	e002      	b.n	8016d84 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8016d7e:	7bbb      	ldrb	r3, [r7, #14]
 8016d80:	3301      	adds	r3, #1
 8016d82:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8016d84:	f7ea f90a 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8016d88:	7bbb      	ldrb	r3, [r7, #14]
 8016d8a:	011b      	lsls	r3, r3, #4
 8016d8c:	b2da      	uxtb	r2, r3
 8016d8e:	7bfb      	ldrb	r3, [r7, #15]
 8016d90:	4413      	add	r3, r2
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7f1 fab7 	bl	8008308 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8016d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8016d9e:	eeb1 7a67 	vneg.f32	s14, s15
 8016da2:	4b38      	ldr	r3, [pc, #224]	; (8016e84 <mode_decision+0x1e4>)
 8016da4:	edd3 7a00 	vldr	s15, [r3]
 8016da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db0:	da00      	bge.n	8016db4 <mode_decision+0x114>
 8016db2:	e013      	b.n	8016ddc <mode_decision+0x13c>
					if (main_modeL == 0) {
 8016db4:	7bbb      	ldrb	r3, [r7, #14]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d102      	bne.n	8016dc0 <mode_decision+0x120>
						main_modeL = 15;
 8016dba:	230f      	movs	r3, #15
 8016dbc:	73bb      	strb	r3, [r7, #14]
 8016dbe:	e002      	b.n	8016dc6 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8016dc0:	7bbb      	ldrb	r3, [r7, #14]
 8016dc2:	3b01      	subs	r3, #1
 8016dc4:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8016dc6:	f7ea f8e9 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
 8016dcc:	011b      	lsls	r3, r3, #4
 8016dce:	b2da      	uxtb	r2, r3
 8016dd0:	7bfb      	ldrb	r3, [r7, #15]
 8016dd2:	4413      	add	r3, r2
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7f1 fa96 	bl	8008308 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8016ddc:	4b2a      	ldr	r3, [pc, #168]	; (8016e88 <mode_decision+0x1e8>)
 8016dde:	edd3 7a00 	vldr	s15, [r3]
 8016de2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8016e8c <mode_decision+0x1ec>
 8016de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dee:	f67f af75 	bls.w	8016cdc <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8016df2:	f7f1 fa4f 	bl	8008294 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8016df6:	2001      	movs	r0, #1
 8016df8:	f7f1 fb36 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016dfc:	2001      	movs	r0, #1
 8016dfe:	f7f1 fb45 	bl	800848c <pl_l_blue_LED>
			HAL_Delay(1000);
 8016e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e06:	f003 fe15 	bl	801aa34 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8016e0a:	e011      	b.n	8016e30 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8016e0c:	4b1e      	ldr	r3, [pc, #120]	; (8016e88 <mode_decision+0x1e8>)
 8016e0e:	edd3 7a00 	vldr	s15, [r3]
 8016e12:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8016e8c <mode_decision+0x1ec>
 8016e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e1e:	db04      	blt.n	8016e2a <mode_decision+0x18a>
					main_modeL = 0;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	73fb      	strb	r3, [r7, #15]
					break;
 8016e28:	e013      	b.n	8016e52 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8016e2a:	2001      	movs	r0, #1
 8016e2c:	f003 fe02 	bl	801aa34 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8016e30:	4b17      	ldr	r3, [pc, #92]	; (8016e90 <mode_decision+0x1f0>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016e38:	dde8      	ble.n	8016e0c <mode_decision+0x16c>
 8016e3a:	4b15      	ldr	r3, [pc, #84]	; (8016e90 <mode_decision+0x1f0>)
 8016e3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016e40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016e44:	dde2      	ble.n	8016e0c <mode_decision+0x16c>
 8016e46:	4b12      	ldr	r3, [pc, #72]	; (8016e90 <mode_decision+0x1f0>)
 8016e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016e4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016e50:	dddc      	ble.n	8016e0c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8016e52:	2000      	movs	r0, #0
 8016e54:	f7f1 fb08 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016e58:	2000      	movs	r0, #0
 8016e5a:	f7f1 fb17 	bl	800848c <pl_l_blue_LED>
			pl_yellow_LED_off();
 8016e5e:	f7f1 fa19 	bl	8008294 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8016e62:	7bbb      	ldrb	r3, [r7, #14]
 8016e64:	011b      	lsls	r3, r3, #4
 8016e66:	b25a      	sxtb	r2, r3
 8016e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e6c:	4313      	orrs	r3, r2
 8016e6e:	b25b      	sxtb	r3, r3
 8016e70:	737b      	strb	r3, [r7, #13]

return main_mode;
 8016e72:	7b7b      	ldrb	r3, [r7, #13]
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3710      	adds	r7, #16
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	41200000 	.word	0x41200000
 8016e80:	20000224 	.word	0x20000224
 8016e84:	20000220 	.word	0x20000220
 8016e88:	20000274 	.word	0x20000274
 8016e8c:	43c80000 	.word	0x43c80000
 8016e90:	200002bc 	.word	0x200002bc

08016e94 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8016e94:	b590      	push	{r4, r7, lr}
 8016e96:	b0d7      	sub	sp, #348	; 0x15c
 8016e98:	af52      	add	r7, sp, #328	; 0x148
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8016ea6:	79fb      	ldrb	r3, [r7, #7]
 8016ea8:	f003 030f 	and.w	r3, r3, #15
 8016eac:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8016eae:	79fb      	ldrb	r3, [r7, #7]
 8016eb0:	091b      	lsrs	r3, r3, #4
 8016eb2:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8016eb4:	7bbb      	ldrb	r3, [r7, #14]
 8016eb6:	2b0f      	cmp	r3, #15
 8016eb8:	f200 809e 	bhi.w	8016ff8 <mode_execution+0x164>
 8016ebc:	a201      	add	r2, pc, #4	; (adr r2, 8016ec4 <mode_execution+0x30>)
 8016ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ec2:	bf00      	nop
 8016ec4:	08016f05 	.word	0x08016f05
 8016ec8:	08016f0f 	.word	0x08016f0f
 8016ecc:	08016ff7 	.word	0x08016ff7
 8016ed0:	08016f19 	.word	0x08016f19
 8016ed4:	08016f23 	.word	0x08016f23
 8016ed8:	08016f2d 	.word	0x08016f2d
 8016edc:	08016f5d 	.word	0x08016f5d
 8016ee0:	08016f67 	.word	0x08016f67
 8016ee4:	08016f97 	.word	0x08016f97
 8016ee8:	08016fc7 	.word	0x08016fc7
 8016eec:	08016ff7 	.word	0x08016ff7
 8016ef0:	08016ff7 	.word	0x08016ff7
 8016ef4:	08016ff7 	.word	0x08016ff7
 8016ef8:	08016ff7 	.word	0x08016ff7
 8016efc:	08016ff7 	.word	0x08016ff7
 8016f00:	08016ff7 	.word	0x08016ff7
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8016f04:	7bfb      	ldrb	r3, [r7, #15]
 8016f06:	4618      	mov	r0, r3
 8016f08:	f000 f886 	bl	8017018 <mode_PLtest>
	break;
 8016f0c:	e074      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8016f0e:	7bfb      	ldrb	r3, [r7, #15]
 8016f10:	4618      	mov	r0, r3
 8016f12:	f000 fa69 	bl	80173e8 <mode_Running>
	break;
 8016f16:	e06f      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8016f18:	7bfb      	ldrb	r3, [r7, #15]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f000 fccc 	bl	80178b8 <mode_Tuning0>
	break;
 8016f20:	e06a      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8016f22:	7bfb      	ldrb	r3, [r7, #15]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f001 f843 	bl	8017fb0 <mode_WallSensorTuning>
	break;
 8016f2a:	e065      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8016f2c:	7bfb      	ldrb	r3, [r7, #15]
 8016f2e:	4c34      	ldr	r4, [pc, #208]	; (8017000 <mode_execution+0x16c>)
 8016f30:	2201      	movs	r2, #1
 8016f32:	9251      	str	r2, [sp, #324]	; 0x144
 8016f34:	2200      	movs	r2, #0
 8016f36:	9250      	str	r2, [sp, #320]	; 0x140
 8016f38:	2201      	movs	r2, #1
 8016f3a:	924f      	str	r2, [sp, #316]	; 0x13c
 8016f3c:	934e      	str	r3, [sp, #312]	; 0x138
 8016f3e:	4668      	mov	r0, sp
 8016f40:	f104 0310 	add.w	r3, r4, #16
 8016f44:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016f48:	4619      	mov	r1, r3
 8016f4a:	f00b f845 	bl	8021fd8 <memcpy>
 8016f4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f52:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8017004 <mode_execution+0x170>
 8016f56:	f7f8 fc83 	bl	800f860 <testturning>
	break;
 8016f5a:	e04d      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8016f5c:	7bfb      	ldrb	r3, [r7, #15]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f001 faaa 	bl	80184b8 <mode_WallSensorTuning_fast>
	break;
 8016f64:	e048      	b.n	8016ff8 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8016f66:	7bfb      	ldrb	r3, [r7, #15]
 8016f68:	4c27      	ldr	r4, [pc, #156]	; (8017008 <mode_execution+0x174>)
 8016f6a:	2201      	movs	r2, #1
 8016f6c:	9251      	str	r2, [sp, #324]	; 0x144
 8016f6e:	2201      	movs	r2, #1
 8016f70:	9250      	str	r2, [sp, #320]	; 0x140
 8016f72:	2201      	movs	r2, #1
 8016f74:	924f      	str	r2, [sp, #316]	; 0x13c
 8016f76:	934e      	str	r3, [sp, #312]	; 0x138
 8016f78:	4668      	mov	r0, sp
 8016f7a:	f104 0310 	add.w	r3, r4, #16
 8016f7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016f82:	4619      	mov	r1, r3
 8016f84:	f00b f828 	bl	8021fd8 <memcpy>
 8016f88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f8c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 801700c <mode_execution+0x178>
 8016f90:	f7f8 fc66 	bl	800f860 <testturning>
	break;
 8016f94:	e030      	b.n	8016ff8 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8016f96:	7bfb      	ldrb	r3, [r7, #15]
 8016f98:	4c1d      	ldr	r4, [pc, #116]	; (8017010 <mode_execution+0x17c>)
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	9251      	str	r2, [sp, #324]	; 0x144
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	9250      	str	r2, [sp, #320]	; 0x140
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	924f      	str	r2, [sp, #316]	; 0x13c
 8016fa6:	934e      	str	r3, [sp, #312]	; 0x138
 8016fa8:	4668      	mov	r0, sp
 8016faa:	f104 0310 	add.w	r3, r4, #16
 8016fae:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	f00b f810 	bl	8021fd8 <memcpy>
 8016fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016fbc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801700c <mode_execution+0x178>
 8016fc0:	f7f8 fc4e 	bl	800f860 <testturning>
	break;
 8016fc4:	e018      	b.n	8016ff8 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8016fc6:	7bfb      	ldrb	r3, [r7, #15]
 8016fc8:	4c12      	ldr	r4, [pc, #72]	; (8017014 <mode_execution+0x180>)
 8016fca:	2201      	movs	r2, #1
 8016fcc:	9251      	str	r2, [sp, #324]	; 0x144
 8016fce:	2201      	movs	r2, #1
 8016fd0:	9250      	str	r2, [sp, #320]	; 0x140
 8016fd2:	2201      	movs	r2, #1
 8016fd4:	924f      	str	r2, [sp, #316]	; 0x13c
 8016fd6:	934e      	str	r3, [sp, #312]	; 0x138
 8016fd8:	4668      	mov	r0, sp
 8016fda:	f104 0310 	add.w	r3, r4, #16
 8016fde:	f44f 729c 	mov.w	r2, #312	; 0x138
 8016fe2:	4619      	mov	r1, r3
 8016fe4:	f00a fff8 	bl	8021fd8 <memcpy>
 8016fe8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016fec:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801700c <mode_execution+0x178>
 8016ff0:	f7f8 fc36 	bl	800f860 <testturning>
	break;
 8016ff4:	e000      	b.n	8016ff8 <mode_execution+0x164>
	break;
 8016ff6:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8016ff8:	bf00      	nop
 8016ffa:	3714      	adds	r7, #20
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd90      	pop	{r4, r7, pc}
 8017000:	2000f81c 	.word	0x2000f81c
 8017004:	3f028f5c 	.word	0x3f028f5c
 8017008:	2000f964 	.word	0x2000f964
 801700c:	3f7d70a4 	.word	0x3f7d70a4
 8017010:	2000faac 	.word	0x2000faac
 8017014:	2000fbf4 	.word	0x2000fbf4

08017018 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8017018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801701c:	b092      	sub	sp, #72	; 0x48
 801701e:	af0a      	add	r7, sp, #40	; 0x28
 8017020:	4603      	mov	r3, r0
 8017022:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8017024:	2300      	movs	r3, #0
 8017026:	61fb      	str	r3, [r7, #28]
 8017028:	2300      	movs	r3, #0
 801702a:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 801702c:	7dfb      	ldrb	r3, [r7, #23]
 801702e:	2b0f      	cmp	r3, #15
 8017030:	f200 81d2 	bhi.w	80173d8 <mode_PLtest+0x3c0>
 8017034:	a201      	add	r2, pc, #4	; (adr r2, 801703c <mode_PLtest+0x24>)
 8017036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801703a:	bf00      	nop
 801703c:	080173d7 	.word	0x080173d7
 8017040:	0801707d 	.word	0x0801707d
 8017044:	080170af 	.word	0x080170af
 8017048:	0801712b 	.word	0x0801712b
 801704c:	0801718f 	.word	0x0801718f
 8017050:	0801720f 	.word	0x0801720f
 8017054:	08017215 	.word	0x08017215
 8017058:	080173d9 	.word	0x080173d9
 801705c:	080173d9 	.word	0x080173d9
 8017060:	0801729b 	.word	0x0801729b
 8017064:	08017303 	.word	0x08017303
 8017068:	08017389 	.word	0x08017389
 801706c:	080173d9 	.word	0x080173d9
 8017070:	080173d9 	.word	0x080173d9
 8017074:	080173d9 	.word	0x080173d9
 8017078:	080173d1 	.word	0x080173d1
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 801707c:	4bbb      	ldr	r3, [pc, #748]	; (801736c <mode_PLtest+0x354>)
 801707e:	6819      	ldr	r1, [r3, #0]
 8017080:	4bba      	ldr	r3, [pc, #744]	; (801736c <mode_PLtest+0x354>)
 8017082:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017084:	4bb9      	ldr	r3, [pc, #740]	; (801736c <mode_PLtest+0x354>)
 8017086:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801708a:	4bb8      	ldr	r3, [pc, #736]	; (801736c <mode_PLtest+0x354>)
 801708c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017090:	4ab6      	ldr	r2, [pc, #728]	; (801736c <mode_PLtest+0x354>)
 8017092:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8017096:	9201      	str	r2, [sp, #4]
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	4623      	mov	r3, r4
 801709c:	4602      	mov	r2, r0
 801709e:	48b4      	ldr	r0, [pc, #720]	; (8017370 <mode_PLtest+0x358>)
 80170a0:	f00b fc1a 	bl	80228d8 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80170a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80170a8:	f7f2 f95a 	bl	8009360 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80170ac:	e7e6      	b.n	801707c <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80170ae:	2001      	movs	r0, #1
 80170b0:	f7f1 f9da 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80170b4:	2001      	movs	r0, #1
 80170b6:	f7f1 f9e9 	bl	800848c <pl_l_blue_LED>
		record_mode = 1;
 80170ba:	4bae      	ldr	r3, [pc, #696]	; (8017374 <mode_PLtest+0x35c>)
 80170bc:	2201      	movs	r2, #1
 80170be:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 80170c0:	f44f 7161 	mov.w	r1, #900	; 0x384
 80170c4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80170c8:	f7f1 fed2 	bl	8008e70 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80170cc:	2001      	movs	r0, #1
 80170ce:	f7f1 fe8d 	bl	8008dec <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80170d2:	2001      	movs	r0, #1
 80170d4:	f7f1 fe62 	bl	8008d9c <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 80170d8:	f7f1 feae 	bl	8008e38 <pl_DriveMotor_start>
		wait_ms(2500);
 80170dc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80170e0:	f7f2 f93e 	bl	8009360 <wait_ms>
		pl_DriveMotor_stop();
 80170e4:	f7f1 feb6 	bl	8008e54 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80170e8:	2000      	movs	r0, #0
 80170ea:	f7f1 f9bd 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80170ee:	2000      	movs	r0, #0
 80170f0:	f7f1 f9cc 	bl	800848c <pl_l_blue_LED>
		record_mode = 0;
 80170f4:	4b9f      	ldr	r3, [pc, #636]	; (8017374 <mode_PLtest+0x35c>)
 80170f6:	2200      	movs	r2, #0
 80170f8:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80170fa:	e002      	b.n	8017102 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80170fc:	2001      	movs	r0, #1
 80170fe:	f7f2 f92f 	bl	8009360 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8017102:	4b9a      	ldr	r3, [pc, #616]	; (801736c <mode_PLtest+0x354>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801710a:	ddf7      	ble.n	80170fc <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 801710c:	4b97      	ldr	r3, [pc, #604]	; (801736c <mode_PLtest+0x354>)
 801710e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017112:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017116:	ddf1      	ble.n	80170fc <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017118:	4b94      	ldr	r3, [pc, #592]	; (801736c <mode_PLtest+0x354>)
 801711a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801711e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017122:	ddeb      	ble.n	80170fc <mode_PLtest+0xe4>
		}
		record_print();
 8017124:	f001 fcb8 	bl	8018a98 <record_print>
		break;
 8017128:	e156      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b0011:	//gyro
		reset_gyro();
 801712a:	f7ea fd6d 	bl	8001c08 <reset_gyro>
		reset_speed();
 801712e:	f7e9 ff79 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 8017132:	2001      	movs	r0, #1
 8017134:	f7f1 f998 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8017138:	2001      	movs	r0, #1
 801713a:	f7f1 f9a7 	bl	800848c <pl_l_blue_LED>
		record_mode = 2;
 801713e:	4b8d      	ldr	r3, [pc, #564]	; (8017374 <mode_PLtest+0x35c>)
 8017140:	2202      	movs	r2, #2
 8017142:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8017144:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8017148:	f7f2 f90a 	bl	8009360 <wait_ms>
		pl_r_blue_LED(OFF);
 801714c:	2000      	movs	r0, #0
 801714e:	f7f1 f98b 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8017152:	2000      	movs	r0, #0
 8017154:	f7f1 f99a 	bl	800848c <pl_l_blue_LED>
		record_mode = 0;
 8017158:	4b86      	ldr	r3, [pc, #536]	; (8017374 <mode_PLtest+0x35c>)
 801715a:	2200      	movs	r2, #0
 801715c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801715e:	e002      	b.n	8017166 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8017160:	2001      	movs	r0, #1
 8017162:	f7f2 f8fd 	bl	8009360 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8017166:	4b81      	ldr	r3, [pc, #516]	; (801736c <mode_PLtest+0x354>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801716e:	ddf7      	ble.n	8017160 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8017170:	4b7e      	ldr	r3, [pc, #504]	; (801736c <mode_PLtest+0x354>)
 8017172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017176:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801717a:	ddf1      	ble.n	8017160 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 801717c:	4b7b      	ldr	r3, [pc, #492]	; (801736c <mode_PLtest+0x354>)
 801717e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017182:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017186:	ddeb      	ble.n	8017160 <mode_PLtest+0x148>
		}
		record_print();
 8017188:	f001 fc86 	bl	8018a98 <record_print>
		break;
 801718c:	e124      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801718e:	4b7a      	ldr	r3, [pc, #488]	; (8017378 <mode_PLtest+0x360>)
 8017190:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8017192:	4618      	mov	r0, r3
 8017194:	f7e9 fa00 	bl	8000598 <__aeabi_f2d>
 8017198:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801719c:	4b76      	ldr	r3, [pc, #472]	; (8017378 <mode_PLtest+0x360>)
 801719e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7e9 f9f9 	bl	8000598 <__aeabi_f2d>
 80171a6:	4604      	mov	r4, r0
 80171a8:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80171aa:	4b73      	ldr	r3, [pc, #460]	; (8017378 <mode_PLtest+0x360>)
 80171ac:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7e9 f9f2 	bl	8000598 <__aeabi_f2d>
 80171b4:	4680      	mov	r8, r0
 80171b6:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80171b8:	4b6f      	ldr	r3, [pc, #444]	; (8017378 <mode_PLtest+0x360>)
 80171ba:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80171bc:	4618      	mov	r0, r3
 80171be:	f7e9 f9eb 	bl	8000598 <__aeabi_f2d>
 80171c2:	4682      	mov	sl, r0
 80171c4:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80171c6:	4b6c      	ldr	r3, [pc, #432]	; (8017378 <mode_PLtest+0x360>)
 80171c8:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7e9 f9e4 	bl	8000598 <__aeabi_f2d>
 80171d0:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80171d4:	4b68      	ldr	r3, [pc, #416]	; (8017378 <mode_PLtest+0x360>)
 80171d6:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80171d8:	4618      	mov	r0, r3
 80171da:	f7e9 f9dd 	bl	8000598 <__aeabi_f2d>
 80171de:	4602      	mov	r2, r0
 80171e0:	460b      	mov	r3, r1
 80171e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80171e6:	ed97 7b00 	vldr	d7, [r7]
 80171ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80171ee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80171f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80171f6:	e9cd 4500 	strd	r4, r5, [sp]
 80171fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80171fe:	485f      	ldr	r0, [pc, #380]	; (801737c <mode_PLtest+0x364>)
 8017200:	f00b fb6a 	bl	80228d8 <iprintf>
			wait_ms(500);
 8017204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017208:	f7f2 f8aa 	bl	8009360 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801720c:	e7bf      	b.n	801718e <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 801720e:	f7f1 fa7b 	bl	8008708 <test_flash>
		break;
 8017212:	e0e1      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b0110:
		record_mode=6;
 8017214:	4b57      	ldr	r3, [pc, #348]	; (8017374 <mode_PLtest+0x35c>)
 8017216:	2206      	movs	r2, #6
 8017218:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 801721a:	2001      	movs	r0, #1
 801721c:	f7f1 f924 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8017220:	2001      	movs	r0, #1
 8017222:	f7f1 f933 	bl	800848c <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8017226:	f107 0218 	add.w	r2, r7, #24
 801722a:	f107 031c 	add.w	r3, r7, #28
 801722e:	4611      	mov	r1, r2
 8017230:	4618      	mov	r0, r3
 8017232:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8017236:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801723a:	f7eb f863 	bl	8002304 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	69ba      	ldr	r2, [r7, #24]
 8017242:	4611      	mov	r1, r2
 8017244:	4618      	mov	r0, r3
 8017246:	f7f1 fe13 	bl	8008e70 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 801724a:	f7f1 fdf5 	bl	8008e38 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801724e:	e00a      	b.n	8017266 <mode_PLtest+0x24e>
			wait_ms(1);
 8017250:	2001      	movs	r0, #1
 8017252:	f7f2 f885 	bl	8009360 <wait_ms>
			if(record_rupe_flag==1){
 8017256:	4b4a      	ldr	r3, [pc, #296]	; (8017380 <mode_PLtest+0x368>)
 8017258:	781b      	ldrb	r3, [r3, #0]
 801725a:	2b01      	cmp	r3, #1
 801725c:	d103      	bne.n	8017266 <mode_PLtest+0x24e>
				record_mode=0;
 801725e:	4b45      	ldr	r3, [pc, #276]	; (8017374 <mode_PLtest+0x35c>)
 8017260:	2200      	movs	r2, #0
 8017262:	701a      	strb	r2, [r3, #0]
				break;
 8017264:	e010      	b.n	8017288 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017266:	4b41      	ldr	r3, [pc, #260]	; (801736c <mode_PLtest+0x354>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801726e:	ddef      	ble.n	8017250 <mode_PLtest+0x238>
 8017270:	4b3e      	ldr	r3, [pc, #248]	; (801736c <mode_PLtest+0x354>)
 8017272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017276:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801727a:	dde9      	ble.n	8017250 <mode_PLtest+0x238>
 801727c:	4b3b      	ldr	r3, [pc, #236]	; (801736c <mode_PLtest+0x354>)
 801727e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017282:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017286:	dde3      	ble.n	8017250 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8017288:	f7f1 fde4 	bl	8008e54 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 801728c:	2000      	movs	r0, #0
 801728e:	f7f1 f8eb 	bl	8008468 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8017292:	2000      	movs	r0, #0
 8017294:	f7f1 f8fa 	bl	800848c <pl_l_blue_LED>

		break;
 8017298:	e09e      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 801729a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801729e:	f7f1 fe11 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80172a2:	f7f1 fdfb 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(2000);
 80172a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80172aa:	f003 fbc3 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 80172ae:	f7ea fcab 	bl	8001c08 <reset_gyro>
			reset_speed();
 80172b2:	f7e9 feb7 	bl	8001024 <reset_speed>
			clear_Ierror();
 80172b6:	f7ee fbd3 	bl	8005a60 <clear_Ierror>
			pl_r_blue_LED(ON);
 80172ba:	2001      	movs	r0, #1
 80172bc:	f7f1 f8d4 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80172c0:	2001      	movs	r0, #1
 80172c2:	f7f1 f8e3 	bl	800848c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80172c6:	e002      	b.n	80172ce <mode_PLtest+0x2b6>
				HAL_Delay(1);
 80172c8:	2001      	movs	r0, #1
 80172ca:	f003 fbb3 	bl	801aa34 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80172ce:	4b27      	ldr	r3, [pc, #156]	; (801736c <mode_PLtest+0x354>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80172d6:	ddf7      	ble.n	80172c8 <mode_PLtest+0x2b0>
 80172d8:	4b24      	ldr	r3, [pc, #144]	; (801736c <mode_PLtest+0x354>)
 80172da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80172de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80172e2:	ddf1      	ble.n	80172c8 <mode_PLtest+0x2b0>
 80172e4:	4b21      	ldr	r3, [pc, #132]	; (801736c <mode_PLtest+0x354>)
 80172e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80172ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80172ee:	ddeb      	ble.n	80172c8 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 80172f0:	2000      	movs	r0, #0
 80172f2:	f7f1 f8b9 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80172f6:	2000      	movs	r0, #0
 80172f8:	f7f1 f8c8 	bl	800848c <pl_l_blue_LED>
			pl_FunMotor_stop();
 80172fc:	f7f1 fdd8 	bl	8008eb0 <pl_FunMotor_stop>
		break;
 8017300:	e06a      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8017302:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8017384 <mode_PLtest+0x36c>
 8017306:	f7f1 fddd 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801730a:	f7f1 fdc7 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(2000);
 801730e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8017312:	f003 fb8f 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 8017316:	f7ea fc77 	bl	8001c08 <reset_gyro>
			reset_speed();
 801731a:	f7e9 fe83 	bl	8001024 <reset_speed>
			clear_Ierror();
 801731e:	f7ee fb9f 	bl	8005a60 <clear_Ierror>
			pl_r_blue_LED(ON);
 8017322:	2001      	movs	r0, #1
 8017324:	f7f1 f8a0 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8017328:	2001      	movs	r0, #1
 801732a:	f7f1 f8af 	bl	800848c <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801732e:	e002      	b.n	8017336 <mode_PLtest+0x31e>
				HAL_Delay(1);
 8017330:	2001      	movs	r0, #1
 8017332:	f003 fb7f 	bl	801aa34 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017336:	4b0d      	ldr	r3, [pc, #52]	; (801736c <mode_PLtest+0x354>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801733e:	ddf7      	ble.n	8017330 <mode_PLtest+0x318>
 8017340:	4b0a      	ldr	r3, [pc, #40]	; (801736c <mode_PLtest+0x354>)
 8017342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017346:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801734a:	ddf1      	ble.n	8017330 <mode_PLtest+0x318>
 801734c:	4b07      	ldr	r3, [pc, #28]	; (801736c <mode_PLtest+0x354>)
 801734e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017352:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017356:	ddeb      	ble.n	8017330 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8017358:	2000      	movs	r0, #0
 801735a:	f7f1 f885 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801735e:	2000      	movs	r0, #0
 8017360:	f7f1 f894 	bl	800848c <pl_l_blue_LED>
			pl_FunMotor_stop();
 8017364:	f7f1 fda4 	bl	8008eb0 <pl_FunMotor_stop>
		break;
 8017368:	e036      	b.n	80173d8 <mode_PLtest+0x3c0>
 801736a:	bf00      	nop
 801736c:	200002bc 	.word	0x200002bc
 8017370:	080264c4 	.word	0x080264c4
 8017374:	2000f284 	.word	0x2000f284
 8017378:	200006f0 	.word	0x200006f0
 801737c:	080264f0 	.word	0x080264f0
 8017380:	2000f290 	.word	0x2000f290
 8017384:	3f7d70a4 	.word	0x3f7d70a4
	case 0b1011://fun
			pl_FunMotor_duty(0.99);
 8017388:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8017384 <mode_PLtest+0x36c>
 801738c:	f7f1 fd9a 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8017390:	f7f1 fd84 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(2000);
 8017394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8017398:	f003 fb4c 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 801739c:	f7ea fc34 	bl	8001c08 <reset_gyro>
			reset_speed();
 80173a0:	f7e9 fe40 	bl	8001024 <reset_speed>
			clear_Ierror();
 80173a4:	f7ee fb5c 	bl	8005a60 <clear_Ierror>
			record_mode=2;
 80173a8:	4b0e      	ldr	r3, [pc, #56]	; (80173e4 <mode_PLtest+0x3cc>)
 80173aa:	2202      	movs	r2, #2
 80173ac:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80173ae:	2001      	movs	r0, #1
 80173b0:	f7f1 f85a 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80173b4:	2001      	movs	r0, #1
 80173b6:	f7f1 f869 	bl	800848c <pl_l_blue_LED>
			no_angle();
 80173ba:	f7ed ff75 	bl	80052a8 <no_angle>
			pl_r_blue_LED(OFF);
 80173be:	2000      	movs	r0, #0
 80173c0:	f7f1 f852 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80173c4:	2000      	movs	r0, #0
 80173c6:	f7f1 f861 	bl	800848c <pl_l_blue_LED>
			pl_FunMotor_stop();
 80173ca:	f7f1 fd71 	bl	8008eb0 <pl_FunMotor_stop>
		break;
 80173ce:	e003      	b.n	80173d8 <mode_PLtest+0x3c0>
	case 0b1111:	//record_out
		record_print();
 80173d0:	f001 fb62 	bl	8018a98 <record_print>
		break;
 80173d4:	e000      	b.n	80173d8 <mode_PLtest+0x3c0>
		break;
 80173d6:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80173d8:	bf00      	nop
 80173da:	3720      	adds	r7, #32
 80173dc:	46bd      	mov	sp, r7
 80173de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80173e2:	bf00      	nop
 80173e4:	2000f284 	.word	0x2000f284

080173e8 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 80173e8:	b5b0      	push	{r4, r5, r7, lr}
 80173ea:	b0da      	sub	sp, #360	; 0x168
 80173ec:	af54      	add	r7, sp, #336	; 0x150
 80173ee:	4603      	mov	r3, r0
 80173f0:	71fb      	strb	r3, [r7, #7]

	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80173f2:	2003      	movs	r0, #3
 80173f4:	f7f1 fcd2 	bl	8008d9c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80173f8:	2003      	movs	r0, #3
 80173fa:	f7f1 fcf7 	bl	8008dec <pl_R_DriveMotor_mode>
	reset_gyro();
 80173fe:	f7ea fc03 	bl	8001c08 <reset_gyro>
	reset_speed();
 8017402:	f7e9 fe0f 	bl	8001024 <reset_speed>
	reset_distance();
 8017406:	f7e9 fdc9 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801740a:	f7ee fb29 	bl	8005a60 <clear_Ierror>
	switch (main_modeR) {
 801740e:	79fb      	ldrb	r3, [r7, #7]
 8017410:	2b0f      	cmp	r3, #15
 8017412:	f200 8243 	bhi.w	801789c <mode_Running+0x4b4>
 8017416:	a201      	add	r2, pc, #4	; (adr r2, 801741c <mode_Running+0x34>)
 8017418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801741c:	0801745d 	.word	0x0801745d
 8017420:	08017515 	.word	0x08017515
 8017424:	0801754d 	.word	0x0801754d
 8017428:	08017553 	.word	0x08017553
 801742c:	0801758b 	.word	0x0801758b
 8017430:	080175c5 	.word	0x080175c5
 8017434:	080175ff 	.word	0x080175ff
 8017438:	08017639 	.word	0x08017639
 801743c:	08017673 	.word	0x08017673
 8017440:	080176ad 	.word	0x080176ad
 8017444:	080176e7 	.word	0x080176e7
 8017448:	08017721 	.word	0x08017721
 801744c:	0801775b 	.word	0x0801775b
 8017450:	08017795 	.word	0x08017795
 8017454:	080177cf 	.word	0x080177cf
 8017458:	08017869 	.word	0x08017869
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			maze_clear();
 801745c:	f7fb f810 	bl	8012480 <maze_clear>
			maze_out_matlab();
 8017460:	f7fa ffe0 	bl	8012424 <maze_out_matlab>

			create_StepCountMap_queue();
 8017464:	f7fe fc06 	bl	8015c74 <create_StepCountMap_queue>
			maze_display();
 8017468:	f7ff fa22 	bl	80168b0 <maze_display>

			create_DijkstraMap();
 801746c:	f7fb fee2 	bl	8013234 <create_DijkstraMap>
			maze_display_Dijkstra();
 8017470:	f7ff fb32 	bl	8016ad8 <maze_display_Dijkstra>

			route_Dijkstra();
 8017474:	f7fd fc16 	bl	8014ca4 <route_Dijkstra>
			create_StepCountMap_unknown();
 8017478:	f7fe f8ca 	bl	8015610 <create_StepCountMap_unknown>
			maze_display();
 801747c:	f7ff fa18 	bl	80168b0 <maze_display>

			tic_timer();
 8017480:	f7f1 ff40 	bl	8009304 <tic_timer>
			for(int j=0;j<5000;j++){
 8017484:	2300      	movs	r3, #0
 8017486:	617b      	str	r3, [r7, #20]
 8017488:	e004      	b.n	8017494 <mode_Running+0xac>
			create_StepCountMap_queue();
 801748a:	f7fe fbf3 	bl	8015c74 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	3301      	adds	r3, #1
 8017492:	617b      	str	r3, [r7, #20]
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	f241 3287 	movw	r2, #4999	; 0x1387
 801749a:	4293      	cmp	r3, r2
 801749c:	ddf5      	ble.n	801748a <mode_Running+0xa2>
			}
			float tim2 = toc_timer();
 801749e:	f7f1 ff43 	bl	8009328 <toc_timer>
 80174a2:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80174a6:	f7ff fa03 	bl	80168b0 <maze_display>
			printf("tim2=%f\n", tim2);
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7e9 f874 	bl	8000598 <__aeabi_f2d>
 80174b0:	4602      	mov	r2, r0
 80174b2:	460b      	mov	r3, r1
 80174b4:	48d4      	ldr	r0, [pc, #848]	; (8017808 <mode_Running+0x420>)
 80174b6:	f00b fa0f 	bl	80228d8 <iprintf>
			tic_timer();
 80174ba:	f7f1 ff23 	bl	8009304 <tic_timer>
			create_DijkstraMap();
 80174be:	f7fb feb9 	bl	8013234 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80174c2:	2300      	movs	r3, #0
 80174c4:	613b      	str	r3, [r7, #16]
 80174c6:	e006      	b.n	80174d6 <mode_Running+0xee>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80174c8:	f7fd fbec 	bl	8014ca4 <route_Dijkstra>
			create_StepCountMap_unknown();
 80174cc:	f7fe f8a0 	bl	8015610 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	3301      	adds	r3, #1
 80174d4:	613b      	str	r3, [r7, #16]
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80174dc:	4293      	cmp	r3, r2
 80174de:	ddf3      	ble.n	80174c8 <mode_Running+0xe0>

			}
			float tim1 = toc_timer();
 80174e0:	f7f1 ff22 	bl	8009328 <toc_timer>
 80174e4:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80174e8:	f7ff f9e2 	bl	80168b0 <maze_display>
			maze_display_Dijkstra();
 80174ec:	f7ff faf4 	bl	8016ad8 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 80174f0:	68b8      	ldr	r0, [r7, #8]
 80174f2:	f7e9 f851 	bl	8000598 <__aeabi_f2d>
 80174f6:	4604      	mov	r4, r0
 80174f8:	460d      	mov	r5, r1
 80174fa:	68f8      	ldr	r0, [r7, #12]
 80174fc:	f7e9 f84c 	bl	8000598 <__aeabi_f2d>
 8017500:	4602      	mov	r2, r0
 8017502:	460b      	mov	r3, r1
 8017504:	e9cd 2300 	strd	r2, r3, [sp]
 8017508:	4622      	mov	r2, r4
 801750a:	462b      	mov	r3, r5
 801750c:	48bf      	ldr	r0, [pc, #764]	; (801780c <mode_Running+0x424>)
 801750e:	f00b f9e3 	bl	80228d8 <iprintf>
		break;
 8017512:	e1c3      	b.n	801789c <mode_Running+0x4b4>
		case 0b0001://足立法(遅い)
			tic_timer();
 8017514:	f7f1 fef6 	bl	8009304 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8017518:	4cbd      	ldr	r4, [pc, #756]	; (8017810 <mode_Running+0x428>)
 801751a:	2300      	movs	r3, #0
 801751c:	934f      	str	r3, [sp, #316]	; 0x13c
 801751e:	2301      	movs	r3, #1
 8017520:	934e      	str	r3, [sp, #312]	; 0x138
 8017522:	4668      	mov	r0, sp
 8017524:	f104 0310 	add.w	r3, r4, #16
 8017528:	f44f 729c 	mov.w	r2, #312	; 0x138
 801752c:	4619      	mov	r1, r3
 801752e:	f00a fd53 	bl	8021fd8 <memcpy>
 8017532:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017536:	eddf 1ab7 	vldr	s3, [pc, #732]	; 8017814 <mode_Running+0x42c>
 801753a:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8017818 <mode_Running+0x430>
 801753e:	eddf 0ab7 	vldr	s1, [pc, #732]	; 801781c <mode_Running+0x434>
 8017542:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8017820 <mode_Running+0x438>
 8017546:	f7f8 fded 	bl	8010124 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 801754a:	e1a7      	b.n	801789c <mode_Running+0x4b4>
		case 0b0010://Flashから
			record_out();
 801754c:	f7f1 f9f4 	bl	8008938 <record_out>
		break;
 8017550:	e1a4      	b.n	801789c <mode_Running+0x4b4>
		case 0b0011://ゴミ
			tic_timer();
 8017552:	f7f1 fed7 	bl	8009304 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8017556:	4cae      	ldr	r4, [pc, #696]	; (8017810 <mode_Running+0x428>)
 8017558:	2301      	movs	r3, #1
 801755a:	934f      	str	r3, [sp, #316]	; 0x13c
 801755c:	2301      	movs	r3, #1
 801755e:	934e      	str	r3, [sp, #312]	; 0x138
 8017560:	4668      	mov	r0, sp
 8017562:	f104 0310 	add.w	r3, r4, #16
 8017566:	f44f 729c 	mov.w	r2, #312	; 0x138
 801756a:	4619      	mov	r1, r3
 801756c:	f00a fd34 	bl	8021fd8 <memcpy>
 8017570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017574:	eddf 1aa7 	vldr	s3, [pc, #668]	; 8017814 <mode_Running+0x42c>
 8017578:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 8017818 <mode_Running+0x430>
 801757c:	eddf 0aa7 	vldr	s1, [pc, #668]	; 801781c <mode_Running+0x434>
 8017580:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8017820 <mode_Running+0x438>
 8017584:	f7f8 fdce 	bl	8010124 <AdatiWayReturn>
		break;
 8017588:	e188      	b.n	801789c <mode_Running+0x4b4>
		case 0b0100://ゴミ
			record_out();
 801758a:	f7f1 f9d5 	bl	8008938 <record_out>
			run_shortest(1000,3000,3000,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0,0);
 801758e:	4ca5      	ldr	r4, [pc, #660]	; (8017824 <mode_Running+0x43c>)
 8017590:	2300      	movs	r3, #0
 8017592:	9352      	str	r3, [sp, #328]	; 0x148
 8017594:	2300      	movs	r3, #0
 8017596:	9351      	str	r3, [sp, #324]	; 0x144
 8017598:	4668      	mov	r0, sp
 801759a:	1d23      	adds	r3, r4, #4
 801759c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80175a0:	4619      	mov	r1, r3
 80175a2:	f00a fd19 	bl	8021fd8 <memcpy>
 80175a6:	6823      	ldr	r3, [r4, #0]
 80175a8:	eddf 1a9f 	vldr	s3, [pc, #636]	; 8017828 <mode_Running+0x440>
 80175ac:	2200      	movs	r2, #0
 80175ae:	2100      	movs	r1, #0
 80175b0:	2000      	movs	r0, #0
 80175b2:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8017814 <mode_Running+0x42c>
 80175b6:	eddf 0a97 	vldr	s1, [pc, #604]	; 8017814 <mode_Running+0x42c>
 80175ba:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 801782c <mode_Running+0x444>
 80175be:	f7f9 fabf 	bl	8010b40 <run_shortest>
		break;
 80175c2:	e16b      	b.n	801789c <mode_Running+0x4b4>
		case 0b0101://
			record_out();
 80175c4:	f7f1 f9b8 	bl	8008938 <record_out>
			run_shortest(1000,3000,3000,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.99,1,0);
 80175c8:	4c99      	ldr	r4, [pc, #612]	; (8017830 <mode_Running+0x448>)
 80175ca:	2300      	movs	r3, #0
 80175cc:	9352      	str	r3, [sp, #328]	; 0x148
 80175ce:	2301      	movs	r3, #1
 80175d0:	9351      	str	r3, [sp, #324]	; 0x144
 80175d2:	4668      	mov	r0, sp
 80175d4:	1d23      	adds	r3, r4, #4
 80175d6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80175da:	4619      	mov	r1, r3
 80175dc:	f00a fcfc 	bl	8021fd8 <memcpy>
 80175e0:	6823      	ldr	r3, [r4, #0]
 80175e2:	eddf 1a94 	vldr	s3, [pc, #592]	; 8017834 <mode_Running+0x44c>
 80175e6:	2200      	movs	r2, #0
 80175e8:	2100      	movs	r1, #0
 80175ea:	2001      	movs	r0, #1
 80175ec:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8017814 <mode_Running+0x42c>
 80175f0:	eddf 0a88 	vldr	s1, [pc, #544]	; 8017814 <mode_Running+0x42c>
 80175f4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 801782c <mode_Running+0x444>
 80175f8:	f7f9 faa2 	bl	8010b40 <run_shortest>
		break;
 80175fc:	e14e      	b.n	801789c <mode_Running+0x4b4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80175fe:	f7f1 f99b 	bl	8008938 <record_out>
			run_shortest(1000,3000,3000,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.99,1,0);
 8017602:	4c8b      	ldr	r4, [pc, #556]	; (8017830 <mode_Running+0x448>)
 8017604:	2300      	movs	r3, #0
 8017606:	9352      	str	r3, [sp, #328]	; 0x148
 8017608:	2301      	movs	r3, #1
 801760a:	9351      	str	r3, [sp, #324]	; 0x144
 801760c:	4668      	mov	r0, sp
 801760e:	1d23      	adds	r3, r4, #4
 8017610:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017614:	4619      	mov	r1, r3
 8017616:	f00a fcdf 	bl	8021fd8 <memcpy>
 801761a:	6823      	ldr	r3, [r4, #0]
 801761c:	eddf 1a85 	vldr	s3, [pc, #532]	; 8017834 <mode_Running+0x44c>
 8017620:	2201      	movs	r2, #1
 8017622:	2100      	movs	r1, #0
 8017624:	2001      	movs	r0, #1
 8017626:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8017814 <mode_Running+0x42c>
 801762a:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8017814 <mode_Running+0x42c>
 801762e:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 801782c <mode_Running+0x444>
 8017632:	f7f9 fa85 	bl	8010b40 <run_shortest>
		break;
 8017636:	e131      	b.n	801789c <mode_Running+0x4b4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8017638:	f7f1 f97e 	bl	8008938 <record_out>
			run_shortest(3000,10000,10000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,0);
 801763c:	4c7e      	ldr	r4, [pc, #504]	; (8017838 <mode_Running+0x450>)
 801763e:	2300      	movs	r3, #0
 8017640:	9352      	str	r3, [sp, #328]	; 0x148
 8017642:	2301      	movs	r3, #1
 8017644:	9351      	str	r3, [sp, #324]	; 0x144
 8017646:	4668      	mov	r0, sp
 8017648:	1d23      	adds	r3, r4, #4
 801764a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801764e:	4619      	mov	r1, r3
 8017650:	f00a fcc2 	bl	8021fd8 <memcpy>
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	eddf 1a77 	vldr	s3, [pc, #476]	; 8017834 <mode_Running+0x44c>
 801765a:	2201      	movs	r2, #1
 801765c:	2101      	movs	r1, #1
 801765e:	2001      	movs	r0, #1
 8017660:	ed9f 1a76 	vldr	s2, [pc, #472]	; 801783c <mode_Running+0x454>
 8017664:	eddf 0a75 	vldr	s1, [pc, #468]	; 801783c <mode_Running+0x454>
 8017668:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8017814 <mode_Running+0x42c>
 801766c:	f7f9 fa68 	bl	8010b40 <run_shortest>
		break;
 8017670:	e114      	b.n	801789c <mode_Running+0x4b4>
		case 0b1000://
			record_out();
 8017672:	f7f1 f961 	bl	8008938 <record_out>
			run_shortest(3200,13000,10000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,0);
 8017676:	4c70      	ldr	r4, [pc, #448]	; (8017838 <mode_Running+0x450>)
 8017678:	2300      	movs	r3, #0
 801767a:	9352      	str	r3, [sp, #328]	; 0x148
 801767c:	2301      	movs	r3, #1
 801767e:	9351      	str	r3, [sp, #324]	; 0x144
 8017680:	4668      	mov	r0, sp
 8017682:	1d23      	adds	r3, r4, #4
 8017684:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017688:	4619      	mov	r1, r3
 801768a:	f00a fca5 	bl	8021fd8 <memcpy>
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	eddf 1a68 	vldr	s3, [pc, #416]	; 8017834 <mode_Running+0x44c>
 8017694:	2201      	movs	r2, #1
 8017696:	2101      	movs	r1, #1
 8017698:	2001      	movs	r0, #1
 801769a:	ed9f 1a68 	vldr	s2, [pc, #416]	; 801783c <mode_Running+0x454>
 801769e:	eddf 0a68 	vldr	s1, [pc, #416]	; 8017840 <mode_Running+0x458>
 80176a2:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8017844 <mode_Running+0x45c>
 80176a6:	f7f9 fa4b 	bl	8010b40 <run_shortest>
		break;
 80176aa:	e0f7      	b.n	801789c <mode_Running+0x4b4>
		case 0b1001:
			record_out();
 80176ac:	f7f1 f944 	bl	8008938 <record_out>
			run_shortest(3000,10000,10000,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1,0);
 80176b0:	4c65      	ldr	r4, [pc, #404]	; (8017848 <mode_Running+0x460>)
 80176b2:	2300      	movs	r3, #0
 80176b4:	9352      	str	r3, [sp, #328]	; 0x148
 80176b6:	2301      	movs	r3, #1
 80176b8:	9351      	str	r3, [sp, #324]	; 0x144
 80176ba:	4668      	mov	r0, sp
 80176bc:	1d23      	adds	r3, r4, #4
 80176be:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80176c2:	4619      	mov	r1, r3
 80176c4:	f00a fc88 	bl	8021fd8 <memcpy>
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8017834 <mode_Running+0x44c>
 80176ce:	2201      	movs	r2, #1
 80176d0:	2101      	movs	r1, #1
 80176d2:	2001      	movs	r0, #1
 80176d4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 801783c <mode_Running+0x454>
 80176d8:	eddf 0a58 	vldr	s1, [pc, #352]	; 801783c <mode_Running+0x454>
 80176dc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8017814 <mode_Running+0x42c>
 80176e0:	f7f9 fa2e 	bl	8010b40 <run_shortest>
		break;
 80176e4:	e0da      	b.n	801789c <mode_Running+0x4b4>
		case 0b1010:
			record_out();
 80176e6:	f7f1 f927 	bl	8008938 <record_out>
			run_shortest(3200,13000,13000,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1,0);
 80176ea:	4c57      	ldr	r4, [pc, #348]	; (8017848 <mode_Running+0x460>)
 80176ec:	2300      	movs	r3, #0
 80176ee:	9352      	str	r3, [sp, #328]	; 0x148
 80176f0:	2301      	movs	r3, #1
 80176f2:	9351      	str	r3, [sp, #324]	; 0x144
 80176f4:	4668      	mov	r0, sp
 80176f6:	1d23      	adds	r3, r4, #4
 80176f8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80176fc:	4619      	mov	r1, r3
 80176fe:	f00a fc6b 	bl	8021fd8 <memcpy>
 8017702:	6823      	ldr	r3, [r4, #0]
 8017704:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8017834 <mode_Running+0x44c>
 8017708:	2201      	movs	r2, #1
 801770a:	2101      	movs	r1, #1
 801770c:	2001      	movs	r0, #1
 801770e:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8017840 <mode_Running+0x458>
 8017712:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8017840 <mode_Running+0x458>
 8017716:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8017844 <mode_Running+0x45c>
 801771a:	f7f9 fa11 	bl	8010b40 <run_shortest>
		break;
 801771e:	e0bd      	b.n	801789c <mode_Running+0x4b4>
		case 0b1011:
			record_out();
 8017720:	f7f1 f90a 	bl	8008938 <record_out>
			run_shortest(4000,17000,17000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,0);
 8017724:	4c44      	ldr	r4, [pc, #272]	; (8017838 <mode_Running+0x450>)
 8017726:	2300      	movs	r3, #0
 8017728:	9352      	str	r3, [sp, #328]	; 0x148
 801772a:	2301      	movs	r3, #1
 801772c:	9351      	str	r3, [sp, #324]	; 0x144
 801772e:	4668      	mov	r0, sp
 8017730:	1d23      	adds	r3, r4, #4
 8017732:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017736:	4619      	mov	r1, r3
 8017738:	f00a fc4e 	bl	8021fd8 <memcpy>
 801773c:	6823      	ldr	r3, [r4, #0]
 801773e:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8017834 <mode_Running+0x44c>
 8017742:	2201      	movs	r2, #1
 8017744:	2101      	movs	r1, #1
 8017746:	2001      	movs	r0, #1
 8017748:	ed9f 1a40 	vldr	s2, [pc, #256]	; 801784c <mode_Running+0x464>
 801774c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 801784c <mode_Running+0x464>
 8017750:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8017850 <mode_Running+0x468>
 8017754:	f7f9 f9f4 	bl	8010b40 <run_shortest>
		break;
 8017758:	e0a0      	b.n	801789c <mode_Running+0x4b4>
		case 0b1100:
			record_out();
 801775a:	f7f1 f8ed 	bl	8008938 <record_out>
//			run_shortest(3500,15000,15000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,2);
			run_shortest(4000,17000,40000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,2);
 801775e:	4c36      	ldr	r4, [pc, #216]	; (8017838 <mode_Running+0x450>)
 8017760:	2302      	movs	r3, #2
 8017762:	9352      	str	r3, [sp, #328]	; 0x148
 8017764:	2301      	movs	r3, #1
 8017766:	9351      	str	r3, [sp, #324]	; 0x144
 8017768:	4668      	mov	r0, sp
 801776a:	1d23      	adds	r3, r4, #4
 801776c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017770:	4619      	mov	r1, r3
 8017772:	f00a fc31 	bl	8021fd8 <memcpy>
 8017776:	6823      	ldr	r3, [r4, #0]
 8017778:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8017834 <mode_Running+0x44c>
 801777c:	2201      	movs	r2, #1
 801777e:	2101      	movs	r1, #1
 8017780:	2001      	movs	r0, #1
 8017782:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8017854 <mode_Running+0x46c>
 8017786:	eddf 0a31 	vldr	s1, [pc, #196]	; 801784c <mode_Running+0x464>
 801778a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8017850 <mode_Running+0x468>
 801778e:	f7f9 f9d7 	bl	8010b40 <run_shortest>
		break;
 8017792:	e083      	b.n	801789c <mode_Running+0x4b4>
		case 0b1101:
			record_out();
 8017794:	f7f1 f8d0 	bl	8008938 <record_out>
			run_shortest(4000,20000,40000,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1,1);
 8017798:	4c27      	ldr	r4, [pc, #156]	; (8017838 <mode_Running+0x450>)
 801779a:	2301      	movs	r3, #1
 801779c:	9352      	str	r3, [sp, #328]	; 0x148
 801779e:	2301      	movs	r3, #1
 80177a0:	9351      	str	r3, [sp, #324]	; 0x144
 80177a2:	4668      	mov	r0, sp
 80177a4:	1d23      	adds	r3, r4, #4
 80177a6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80177aa:	4619      	mov	r1, r3
 80177ac:	f00a fc14 	bl	8021fd8 <memcpy>
 80177b0:	6823      	ldr	r3, [r4, #0]
 80177b2:	eddf 1a20 	vldr	s3, [pc, #128]	; 8017834 <mode_Running+0x44c>
 80177b6:	2201      	movs	r2, #1
 80177b8:	2101      	movs	r1, #1
 80177ba:	2001      	movs	r0, #1
 80177bc:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8017854 <mode_Running+0x46c>
 80177c0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8017858 <mode_Running+0x470>
 80177c4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8017850 <mode_Running+0x468>
 80177c8:	f7f9 f9ba 	bl	8010b40 <run_shortest>
		break;
 80177cc:	e066      	b.n	801789c <mode_Running+0x4b4>
		case 0b1110:
			record_out();
 80177ce:	f7f1 f8b3 	bl	8008938 <record_out>
			run_shortest(3100,11000,11000,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1,0);
 80177d2:	4c22      	ldr	r4, [pc, #136]	; (801785c <mode_Running+0x474>)
 80177d4:	2300      	movs	r3, #0
 80177d6:	9352      	str	r3, [sp, #328]	; 0x148
 80177d8:	2301      	movs	r3, #1
 80177da:	9351      	str	r3, [sp, #324]	; 0x144
 80177dc:	4668      	mov	r0, sp
 80177de:	1d23      	adds	r3, r4, #4
 80177e0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80177e4:	4619      	mov	r1, r3
 80177e6:	f00a fbf7 	bl	8021fd8 <memcpy>
 80177ea:	6823      	ldr	r3, [r4, #0]
 80177ec:	eddf 1a11 	vldr	s3, [pc, #68]	; 8017834 <mode_Running+0x44c>
 80177f0:	2201      	movs	r2, #1
 80177f2:	2101      	movs	r1, #1
 80177f4:	2001      	movs	r0, #1
 80177f6:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8017860 <mode_Running+0x478>
 80177fa:	eddf 0a19 	vldr	s1, [pc, #100]	; 8017860 <mode_Running+0x478>
 80177fe:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8017864 <mode_Running+0x47c>
 8017802:	f7f9 f99d 	bl	8010b40 <run_shortest>
		break;
 8017806:	e049      	b.n	801789c <mode_Running+0x4b4>
 8017808:	0802653c 	.word	0x0802653c
 801780c:	08026548 	.word	0x08026548
 8017810:	2000f444 	.word	0x2000f444
 8017814:	453b8000 	.word	0x453b8000
 8017818:	44fa0000 	.word	0x44fa0000
 801781c:	43c80000 	.word	0x43c80000
 8017820:	43960000 	.word	0x43960000
 8017824:	2000f6d4 	.word	0x2000f6d4
 8017828:	3e99999a 	.word	0x3e99999a
 801782c:	447a0000 	.word	0x447a0000
 8017830:	2000f81c 	.word	0x2000f81c
 8017834:	3f7d70a4 	.word	0x3f7d70a4
 8017838:	2000f964 	.word	0x2000f964
 801783c:	461c4000 	.word	0x461c4000
 8017840:	464b2000 	.word	0x464b2000
 8017844:	45480000 	.word	0x45480000
 8017848:	2000faac 	.word	0x2000faac
 801784c:	4684d000 	.word	0x4684d000
 8017850:	457a0000 	.word	0x457a0000
 8017854:	471c4000 	.word	0x471c4000
 8017858:	469c4000 	.word	0x469c4000
 801785c:	2000fbf4 	.word	0x2000fbf4
 8017860:	462be000 	.word	0x462be000
 8017864:	4541c000 	.word	0x4541c000
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8017868:	4c0e      	ldr	r4, [pc, #56]	; (80178a4 <mode_Running+0x4bc>)
 801786a:	2300      	movs	r3, #0
 801786c:	934f      	str	r3, [sp, #316]	; 0x13c
 801786e:	2301      	movs	r3, #1
 8017870:	934e      	str	r3, [sp, #312]	; 0x138
 8017872:	4668      	mov	r0, sp
 8017874:	f104 0310 	add.w	r3, r4, #16
 8017878:	f44f 729c 	mov.w	r2, #312	; 0x138
 801787c:	4619      	mov	r1, r3
 801787e:	f00a fbab 	bl	8021fd8 <memcpy>
 8017882:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017886:	eddf 1a08 	vldr	s3, [pc, #32]	; 80178a8 <mode_Running+0x4c0>
 801788a:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80178ac <mode_Running+0x4c4>
 801788e:	eddf 0a08 	vldr	s1, [pc, #32]	; 80178b0 <mode_Running+0x4c8>
 8017892:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80178b4 <mode_Running+0x4cc>
 8017896:	f7f8 fc45 	bl	8010124 <AdatiWayReturn>
		break;
 801789a:	bf00      	nop
	}


}
 801789c:	bf00      	nop
 801789e:	3718      	adds	r7, #24
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bdb0      	pop	{r4, r5, r7, pc}
 80178a4:	2000f58c 	.word	0x2000f58c
 80178a8:	453b8000 	.word	0x453b8000
 80178ac:	44fa0000 	.word	0x44fa0000
 80178b0:	43c80000 	.word	0x43c80000
 80178b4:	437a0000 	.word	0x437a0000

080178b8 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 80178b8:	b590      	push	{r4, r7, lr}
 80178ba:	b0db      	sub	sp, #364	; 0x16c
 80178bc:	af52      	add	r7, sp, #328	; 0x148
 80178be:	4603      	mov	r3, r0
 80178c0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 80178c2:	2300      	movs	r3, #0
 80178c4:	613b      	str	r3, [r7, #16]
 80178c6:	2300      	movs	r3, #0
 80178c8:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 80178ca:	2300      	movs	r3, #0
 80178cc:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 80178ce:	2300      	movs	r3, #0
 80178d0:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 80178d2:	2300      	movs	r3, #0
 80178d4:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80178da:	2003      	movs	r0, #3
 80178dc:	f7f1 fa5e 	bl	8008d9c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80178e0:	2003      	movs	r0, #3
 80178e2:	f7f1 fa83 	bl	8008dec <pl_R_DriveMotor_mode>
	reset_gyro();
 80178e6:	f7ea f98f 	bl	8001c08 <reset_gyro>
	reset_speed();
 80178ea:	f7e9 fb9b 	bl	8001024 <reset_speed>
	reset_distance();
 80178ee:	f7e9 fb55 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80178f2:	f7ee f8b5 	bl	8005a60 <clear_Ierror>

	switch (main_modeR) {
 80178f6:	79fb      	ldrb	r3, [r7, #7]
 80178f8:	2b0f      	cmp	r3, #15
 80178fa:	f200 8302 	bhi.w	8017f02 <mode_Tuning0+0x64a>
 80178fe:	a201      	add	r2, pc, #4	; (adr r2, 8017904 <mode_Tuning0+0x4c>)
 8017900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017904:	08017945 	.word	0x08017945
 8017908:	080179cf 	.word	0x080179cf
 801790c:	080179f5 	.word	0x080179f5
 8017910:	08017a1b 	.word	0x08017a1b
 8017914:	08017a4b 	.word	0x08017a4b
 8017918:	08017a7b 	.word	0x08017a7b
 801791c:	08017aab 	.word	0x08017aab
 8017920:	08017b19 	.word	0x08017b19
 8017924:	08017b6d 	.word	0x08017b6d
 8017928:	08017b91 	.word	0x08017b91
 801792c:	08017bed 	.word	0x08017bed
 8017930:	08017c73 	.word	0x08017c73
 8017934:	08017c99 	.word	0x08017c99
 8017938:	08017d4b 	.word	0x08017d4b
 801793c:	08017e63 	.word	0x08017e63
 8017940:	08017eb3 	.word	0x08017eb3
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8017944:	4bd7      	ldr	r3, [pc, #860]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017946:	2203      	movs	r2, #3
 8017948:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801794a:	2300      	movs	r3, #0
 801794c:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 801794e:	6978      	ldr	r0, [r7, #20]
 8017950:	ed9f 2ad5 	vldr	s4, [pc, #852]	; 8017ca8 <mode_Tuning0+0x3f0>
 8017954:	eddf 1ad5 	vldr	s3, [pc, #852]	; 8017cac <mode_Tuning0+0x3f4>
 8017958:	ed9f 1ad5 	vldr	s2, [pc, #852]	; 8017cb0 <mode_Tuning0+0x3f8>
 801795c:	eddf 0ad4 	vldr	s1, [pc, #848]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017960:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8017cb4 <mode_Tuning0+0x3fc>
 8017964:	f7ec fd58 	bl	8004418 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8017968:	ed9f 2ad3 	vldr	s4, [pc, #844]	; 8017cb8 <mode_Tuning0+0x400>
 801796c:	eddf 1ad3 	vldr	s3, [pc, #844]	; 8017cbc <mode_Tuning0+0x404>
 8017970:	ed9f 1acf 	vldr	s2, [pc, #828]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017974:	eddf 0ace 	vldr	s1, [pc, #824]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017978:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8017cc0 <mode_Tuning0+0x408>
 801797c:	f7ed fa76 	bl	8004e6c <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8017980:	6978      	ldr	r0, [r7, #20]
 8017982:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8017cc4 <mode_Tuning0+0x40c>
 8017986:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8017cc8 <mode_Tuning0+0x410>
 801798a:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 8017cb0 <mode_Tuning0+0x3f8>
 801798e:	eddf 0ac8 	vldr	s1, [pc, #800]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017992:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8017cb4 <mode_Tuning0+0x3fc>
 8017996:	f7ec fd3f 	bl	8004418 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 801799a:	ed9f 2ac7 	vldr	s4, [pc, #796]	; 8017cb8 <mode_Tuning0+0x400>
 801799e:	eddf 1ac7 	vldr	s3, [pc, #796]	; 8017cbc <mode_Tuning0+0x404>
 80179a2:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179a6:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179aa:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8017cc0 <mode_Tuning0+0x408>
 80179ae:	f7ed fa5d 	bl	8004e6c <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 80179b2:	6978      	ldr	r0, [r7, #20]
 80179b4:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8017ccc <mode_Tuning0+0x414>
 80179b8:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8017cd0 <mode_Tuning0+0x418>
 80179bc:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179c0:	eddf 0abb 	vldr	s1, [pc, #748]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179c4:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8017cb4 <mode_Tuning0+0x3fc>
 80179c8:	f7ec fd26 	bl	8004418 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 80179cc:	e299      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 80179ce:	4bb5      	ldr	r3, [pc, #724]	; (8017ca4 <mode_Tuning0+0x3ec>)
 80179d0:	2205      	movs	r2, #5
 80179d2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80179d4:	2300      	movs	r3, #0
 80179d6:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 80179d8:	6978      	ldr	r0, [r7, #20]
 80179da:	ed9f 2abe 	vldr	s4, [pc, #760]	; 8017cd4 <mode_Tuning0+0x41c>
 80179de:	eddf 1abe 	vldr	s3, [pc, #760]	; 8017cd8 <mode_Tuning0+0x420>
 80179e2:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179e6:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8017cb0 <mode_Tuning0+0x3f8>
 80179ea:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8017cdc <mode_Tuning0+0x424>
 80179ee:	f7ec fd13 	bl	8004418 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80179f2:	e286      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 2://壁制御
			record_mode=4;
 80179f4:	4bab      	ldr	r3, [pc, #684]	; (8017ca4 <mode_Tuning0+0x3ec>)
 80179f6:	2204      	movs	r2, #4
 80179f8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80179fa:	2301      	movs	r3, #1
 80179fc:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80179fe:	6978      	ldr	r0, [r7, #20]
 8017a00:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8017ce0 <mode_Tuning0+0x428>
 8017a04:	eddf 1ab7 	vldr	s3, [pc, #732]	; 8017ce4 <mode_Tuning0+0x42c>
 8017a08:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017a0c:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017a10:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8017ce8 <mode_Tuning0+0x430>
 8017a14:	f7ec fd00 	bl	8004418 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8017a18:	e273      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8017a1a:	4cb4      	ldr	r4, [pc, #720]	; (8017cec <mode_Tuning0+0x434>)
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	9351      	str	r3, [sp, #324]	; 0x144
 8017a20:	2300      	movs	r3, #0
 8017a22:	9350      	str	r3, [sp, #320]	; 0x140
 8017a24:	2300      	movs	r3, #0
 8017a26:	934f      	str	r3, [sp, #316]	; 0x13c
 8017a28:	2300      	movs	r3, #0
 8017a2a:	934e      	str	r3, [sp, #312]	; 0x138
 8017a2c:	4668      	mov	r0, sp
 8017a2e:	f104 0310 	add.w	r3, r4, #16
 8017a32:	f44f 729c 	mov.w	r2, #312	; 0x138
 8017a36:	4619      	mov	r1, r3
 8017a38:	f00a face 	bl	8021fd8 <memcpy>
 8017a3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017a40:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017a44:	f7f7 ff0c 	bl	800f860 <testturning>
		break;
 8017a48:	e25b      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8017a4a:	4ca8      	ldr	r4, [pc, #672]	; (8017cec <mode_Tuning0+0x434>)
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	9351      	str	r3, [sp, #324]	; 0x144
 8017a50:	2300      	movs	r3, #0
 8017a52:	9350      	str	r3, [sp, #320]	; 0x140
 8017a54:	2300      	movs	r3, #0
 8017a56:	934f      	str	r3, [sp, #316]	; 0x13c
 8017a58:	2301      	movs	r3, #1
 8017a5a:	934e      	str	r3, [sp, #312]	; 0x138
 8017a5c:	4668      	mov	r0, sp
 8017a5e:	f104 0310 	add.w	r3, r4, #16
 8017a62:	f44f 729c 	mov.w	r2, #312	; 0x138
 8017a66:	4619      	mov	r1, r3
 8017a68:	f00a fab6 	bl	8021fd8 <memcpy>
 8017a6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017a70:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017a74:	f7f7 fef4 	bl	800f860 <testturning>
		break;
 8017a78:	e243      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 5://直進(制御なし)
			testturning(speed300_exploration,6,1,0,0,1);
 8017a7a:	4c9c      	ldr	r4, [pc, #624]	; (8017cec <mode_Tuning0+0x434>)
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	9351      	str	r3, [sp, #324]	; 0x144
 8017a80:	2300      	movs	r3, #0
 8017a82:	9350      	str	r3, [sp, #320]	; 0x140
 8017a84:	2301      	movs	r3, #1
 8017a86:	934f      	str	r3, [sp, #316]	; 0x13c
 8017a88:	2306      	movs	r3, #6
 8017a8a:	934e      	str	r3, [sp, #312]	; 0x138
 8017a8c:	4668      	mov	r0, sp
 8017a8e:	f104 0310 	add.w	r3, r4, #16
 8017a92:	f44f 729c 	mov.w	r2, #312	; 0x138
 8017a96:	4619      	mov	r1, r3
 8017a98:	f00a fa9e 	bl	8021fd8 <memcpy>
 8017a9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017aa0:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017aa4:	f7f7 fedc 	bl	800f860 <testturning>
//			straight_table2(90*8, 0, 0, 2800, 18000,mode);
//			mode.WallControlMode=0;
//			theta_comp_gain=1;
//			straight_table2(-90*8, 0, 0, -2000, 14000,mode);

		break;
 8017aa8:	e22b      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 6://斜め直進(制御あり)
			highspeed_mode = 1;
 8017aaa:	4b91      	ldr	r3, [pc, #580]	; (8017cf0 <mode_Tuning0+0x438>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8017ab0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8017cf4 <mode_Tuning0+0x43c>
 8017ab4:	f7f1 fa06 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8017ab8:	f7f1 f9f0 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(600);
 8017abc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017ac0:	f002 ffb8 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 8017ac4:	f7ea f8a0 	bl	8001c08 <reset_gyro>
			reset_speed();
 8017ac8:	f7e9 faac 	bl	8001024 <reset_speed>
			reset_distance();
 8017acc:	f7e9 fa66 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8017ad0:	f7ed ffc6 	bl	8005a60 <clear_Ierror>
			record_mode=3;
 8017ad4:	4b73      	ldr	r3, [pc, #460]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017ad6:	2203      	movs	r2, #3
 8017ad8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017ada:	2301      	movs	r3, #1
 8017adc:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER_FRONT,0,1000,1000,1000*1000/ BACK_TO_CENTER_FRONT/2, mode);
 8017ade:	6978      	ldr	r0, [r7, #20]
 8017ae0:	ed9f 2a85 	vldr	s4, [pc, #532]	; 8017cf8 <mode_Tuning0+0x440>
 8017ae4:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8017cd4 <mode_Tuning0+0x41c>
 8017ae8:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8017cd4 <mode_Tuning0+0x41c>
 8017aec:	eddf 0a70 	vldr	s1, [pc, #448]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017af0:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 8017af4:	f7ec fc90 	bl	8004418 <straight_table2>
			straight_table_max(90*8-BACK_TO_CENTER_FRONT, 1000, 0, 4000, 17000,30000,mode);
 8017af8:	6978      	ldr	r0, [r7, #20]
 8017afa:	eddf 2a80 	vldr	s5, [pc, #512]	; 8017cfc <mode_Tuning0+0x444>
 8017afe:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8017d00 <mode_Tuning0+0x448>
 8017b02:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8017cb8 <mode_Tuning0+0x400>
 8017b06:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017b0a:	eddf 0a72 	vldr	s1, [pc, #456]	; 8017cd4 <mode_Tuning0+0x41c>
 8017b0e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8017d04 <mode_Tuning0+0x44c>
 8017b12:	f7ec fb41 	bl	8004198 <straight_table_max>
		break;
 8017b16:	e1f4      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 7://斜め直進(平松さん式制御あり)
			highspeed_mode = 1;
 8017b18:	4b75      	ldr	r3, [pc, #468]	; (8017cf0 <mode_Tuning0+0x438>)
 8017b1a:	2201      	movs	r2, #1
 8017b1c:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8017b1e:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8017cf4 <mode_Tuning0+0x43c>
 8017b22:	f7f1 f9cf 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8017b26:	f7f1 f9b9 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(600);
 8017b2a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017b2e:	f002 ff81 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 8017b32:	f7ea f869 	bl	8001c08 <reset_gyro>
			reset_speed();
 8017b36:	f7e9 fa75 	bl	8001024 <reset_speed>
			reset_distance();
 8017b3a:	f7e9 fa2f 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8017b3e:	f7ed ff8f 	bl	8005a60 <clear_Ierror>
			record_mode=3;
 8017b42:	4b58      	ldr	r3, [pc, #352]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017b44:	2203      	movs	r2, #3
 8017b46:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017b48:	2301      	movs	r3, #1
 8017b4a:	753b      	strb	r3, [r7, #20]
			straight_table_dis(90*8, 0, 0, 4000, 17000,30000,mode);
 8017b4c:	6978      	ldr	r0, [r7, #20]
 8017b4e:	eddf 2a6b 	vldr	s5, [pc, #428]	; 8017cfc <mode_Tuning0+0x444>
 8017b52:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8017d00 <mode_Tuning0+0x448>
 8017b56:	eddf 1a58 	vldr	s3, [pc, #352]	; 8017cb8 <mode_Tuning0+0x400>
 8017b5a:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017b5e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017b62:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8017ce8 <mode_Tuning0+0x430>
 8017b66:	f7ec f9d7 	bl	8003f18 <straight_table_dis>
		break;
 8017b6a:	e1ca      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 8://宴会芸
			record_mode=2;
 8017b6c:	4b4d      	ldr	r3, [pc, #308]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017b6e:	2202      	movs	r2, #2
 8017b70:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8017b72:	2001      	movs	r0, #1
 8017b74:	f7f0 fc78 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8017b78:	2001      	movs	r0, #1
 8017b7a:	f7f0 fc87 	bl	800848c <pl_l_blue_LED>
			no_angle();
 8017b7e:	f7ed fb93 	bl	80052a8 <no_angle>
			pl_r_blue_LED(OFF);
 8017b82:	2000      	movs	r0, #0
 8017b84:	f7f0 fc70 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8017b88:	2000      	movs	r0, #0
 8017b8a:	f7f0 fc7f 	bl	800848c <pl_l_blue_LED>
		break;
 8017b8e:	e1b8      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 8017b90:	2001      	movs	r0, #1
 8017b92:	f7f0 fc69 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8017b96:	2001      	movs	r0, #1
 8017b98:	f7f0 fc78 	bl	800848c <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8017b9c:	f107 020c 	add.w	r2, r7, #12
 8017ba0:	f107 0310 	add.w	r3, r7, #16
 8017ba4:	4611      	mov	r1, r2
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017bac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017bb0:	f7ea fba8 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	4611      	mov	r1, r2
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7f1 f958 	bl	8008e70 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8017bc0:	f7f1 f93a 	bl	8008e38 <pl_DriveMotor_start>
			wait_ms(3000);
 8017bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8017bc8:	f7f1 fbca 	bl	8009360 <wait_ms>
			record_mode=11;
 8017bcc:	4b35      	ldr	r3, [pc, #212]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017bce:	220b      	movs	r2, #11
 8017bd0:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 8017bd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8017bd6:	f7f1 fbc3 	bl	8009360 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 8017bda:	f7f1 f93b 	bl	8008e54 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8017bde:	2000      	movs	r0, #0
 8017be0:	f7f0 fc42 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8017be4:	2000      	movs	r0, #0
 8017be6:	f7f0 fc51 	bl	800848c <pl_l_blue_LED>
		break;
 8017bea:	e18a      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 10://システム同定gyro
			record_mode=6;
 8017bec:	4b2d      	ldr	r3, [pc, #180]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017bee:	2206      	movs	r2, #6
 8017bf0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8017bf2:	2001      	movs	r0, #1
 8017bf4:	f7f0 fc38 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8017bf8:	2001      	movs	r0, #1
 8017bfa:	f7f0 fc47 	bl	800848c <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8017bfe:	f107 020c 	add.w	r2, r7, #12
 8017c02:	f107 0310 	add.w	r3, r7, #16
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017c0e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017c12:	f7ea fb77 	bl	8002304 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	68fa      	ldr	r2, [r7, #12]
 8017c1a:	4611      	mov	r1, r2
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7f1 f927 	bl	8008e70 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8017c22:	f7f1 f909 	bl	8008e38 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017c26:	e00a      	b.n	8017c3e <mode_Tuning0+0x386>
				wait_ms(1);
 8017c28:	2001      	movs	r0, #1
 8017c2a:	f7f1 fb99 	bl	8009360 <wait_ms>
				if(record_rupe_flag==1){
 8017c2e:	4b36      	ldr	r3, [pc, #216]	; (8017d08 <mode_Tuning0+0x450>)
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d103      	bne.n	8017c3e <mode_Tuning0+0x386>
					record_mode=0;
 8017c36:	4b1b      	ldr	r3, [pc, #108]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017c38:	2200      	movs	r2, #0
 8017c3a:	701a      	strb	r2, [r3, #0]
					break;
 8017c3c:	e010      	b.n	8017c60 <mode_Tuning0+0x3a8>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017c3e:	4b33      	ldr	r3, [pc, #204]	; (8017d0c <mode_Tuning0+0x454>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017c46:	ddef      	ble.n	8017c28 <mode_Tuning0+0x370>
 8017c48:	4b30      	ldr	r3, [pc, #192]	; (8017d0c <mode_Tuning0+0x454>)
 8017c4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017c4e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017c52:	dde9      	ble.n	8017c28 <mode_Tuning0+0x370>
 8017c54:	4b2d      	ldr	r3, [pc, #180]	; (8017d0c <mode_Tuning0+0x454>)
 8017c56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017c5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017c5e:	dde3      	ble.n	8017c28 <mode_Tuning0+0x370>
				}
			}
			pl_DriveMotor_stop();
 8017c60:	f7f1 f8f8 	bl	8008e54 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8017c64:	2000      	movs	r0, #0
 8017c66:	f7f0 fbff 	bl	8008468 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8017c6a:	2000      	movs	r0, #0
 8017c6c:	f7f0 fc0e 	bl	800848c <pl_l_blue_LED>
		break;
 8017c70:	e147      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 11:
		record_mode=1;
 8017c72:	4b0c      	ldr	r3, [pc, #48]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017c74:	2201      	movs	r2, #1
 8017c76:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8017c78:	2300      	movs	r3, #0
 8017c7a:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8017c7c:	6978      	ldr	r0, [r7, #20]
 8017c7e:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8017ce0 <mode_Tuning0+0x428>
 8017c82:	eddf 1a18 	vldr	s3, [pc, #96]	; 8017ce4 <mode_Tuning0+0x42c>
 8017c86:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017c8a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8017cb0 <mode_Tuning0+0x3f8>
 8017c8e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8017d10 <mode_Tuning0+0x458>
 8017c92:	f7ec fbc1 	bl	8004418 <straight_table2>
		break;
 8017c96:	e134      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 12:
		record_mode=2;
 8017c98:	4b02      	ldr	r3, [pc, #8]	; (8017ca4 <mode_Tuning0+0x3ec>)
 8017c9a:	2202      	movs	r2, #2
 8017c9c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	61fb      	str	r3, [r7, #28]
 8017ca2:	e04e      	b.n	8017d42 <mode_Tuning0+0x48a>
 8017ca4:	2000f284 	.word	0x2000f284
 8017ca8:	464b2000 	.word	0x464b2000
 8017cac:	44c80000 	.word	0x44c80000
 8017cb0:	00000000 	.word	0x00000000
 8017cb4:	44070000 	.word	0x44070000
 8017cb8:	457a0000 	.word	0x457a0000
 8017cbc:	43c80000 	.word	0x43c80000
 8017cc0:	43340000 	.word	0x43340000
 8017cc4:	466a6000 	.word	0x466a6000
 8017cc8:	44fa0000 	.word	0x44fa0000
 8017ccc:	469c4000 	.word	0x469c4000
 8017cd0:	45160000 	.word	0x45160000
 8017cd4:	447a0000 	.word	0x447a0000
 8017cd8:	c3160000 	.word	0xc3160000
 8017cdc:	c1a40000 	.word	0xc1a40000
 8017ce0:	45bb8000 	.word	0x45bb8000
 8017ce4:	43960000 	.word	0x43960000
 8017ce8:	44340000 	.word	0x44340000
 8017cec:	2000f444 	.word	0x2000f444
 8017cf0:	20000814 	.word	0x20000814
 8017cf4:	3f7d70a4 	.word	0x3f7d70a4
 8017cf8:	471c4000 	.word	0x471c4000
 8017cfc:	46ea6000 	.word	0x46ea6000
 8017d00:	4684d000 	.word	0x4684d000
 8017d04:	4430e000 	.word	0x4430e000
 8017d08:	2000f290 	.word	0x2000f290
 8017d0c:	200002bc 	.word	0x200002bc
 8017d10:	420a0000 	.word	0x420a0000
 8017d14:	453b8000 	.word	0x453b8000
 8017d18:	43c80000 	.word	0x43c80000
 8017d1c:	00000000 	.word	0x00000000
 8017d20:	42b40000 	.word	0x42b40000
		turning_table2(90, 0, 0, 400, 3000);
 8017d24:	ed1f 2a05 	vldr	s4, [pc, #-20]	; 8017d14 <mode_Tuning0+0x45c>
 8017d28:	ed5f 1a05 	vldr	s3, [pc, #-20]	; 8017d18 <mode_Tuning0+0x460>
 8017d2c:	ed1f 1a05 	vldr	s2, [pc, #-20]	; 8017d1c <mode_Tuning0+0x464>
 8017d30:	ed5f 0a06 	vldr	s1, [pc, #-24]	; 8017d1c <mode_Tuning0+0x464>
 8017d34:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8017d20 <mode_Tuning0+0x468>
 8017d38:	f7ed f898 	bl	8004e6c <turning_table2>
		for(int i=0;i<40;i++){
 8017d3c:	69fb      	ldr	r3, [r7, #28]
 8017d3e:	3301      	adds	r3, #1
 8017d40:	61fb      	str	r3, [r7, #28]
 8017d42:	69fb      	ldr	r3, [r7, #28]
 8017d44:	2b27      	cmp	r3, #39	; 0x27
 8017d46:	dded      	ble.n	8017d24 <mode_Tuning0+0x46c>
		}
		break;
 8017d48:	e0db      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 13:
			record_mode=2;
 8017d4a:	4b8b      	ldr	r3, [pc, #556]	; (8017f78 <mode_Tuning0+0x6c0>)
 8017d4c:	2202      	movs	r2, #2
 8017d4e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8017d50:	2301      	movs	r3, #1
 8017d52:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8017d54:	4b89      	ldr	r3, [pc, #548]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017d56:	edd3 6a02 	vldr	s13, [r3, #8]
 8017d5a:	4b88      	ldr	r3, [pc, #544]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017d5c:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8017d60:	4b86      	ldr	r3, [pc, #536]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017d62:	ed93 7a02 	vldr	s14, [r3, #8]
 8017d66:	4b85      	ldr	r3, [pc, #532]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017d68:	edd3 7a02 	vldr	s15, [r3, #8]
 8017d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017d70:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017d74:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8017d78:	eddf 5a81 	vldr	s11, [pc, #516]	; 8017f80 <mode_Tuning0+0x6c8>
 8017d7c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8017d80:	6978      	ldr	r0, [r7, #20]
 8017d82:	eeb0 2a47 	vmov.f32	s4, s14
 8017d86:	eef0 1a46 	vmov.f32	s3, s12
 8017d8a:	eeb0 1a66 	vmov.f32	s2, s13
 8017d8e:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8017f84 <mode_Tuning0+0x6cc>
 8017d92:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8017f88 <mode_Tuning0+0x6d0>
 8017d96:	f7ec fb3f 	bl	8004418 <straight_table2>
			for(int i=0;i<40;i++){
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	61bb      	str	r3, [r7, #24]
 8017d9e:	e037      	b.n	8017e10 <mode_Tuning0+0x558>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8017da0:	4b76      	ldr	r3, [pc, #472]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017da2:	edd3 6a02 	vldr	s13, [r3, #8]
 8017da6:	4b75      	ldr	r3, [pc, #468]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017da8:	ed93 6a02 	vldr	s12, [r3, #8]
 8017dac:	4b73      	ldr	r3, [pc, #460]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017dae:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8017db2:	4b72      	ldr	r3, [pc, #456]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017db4:	ed93 7a02 	vldr	s14, [r3, #8]
 8017db8:	4b70      	ldr	r3, [pc, #448]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8017dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017dc2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8017dc6:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8017dca:	ed9f 5a6d 	vldr	s10, [pc, #436]	; 8017f80 <mode_Tuning0+0x6c8>
 8017dce:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8017dd2:	6978      	ldr	r0, [r7, #20]
 8017dd4:	eeb0 2a47 	vmov.f32	s4, s14
 8017dd8:	eef0 1a65 	vmov.f32	s3, s11
 8017ddc:	eeb0 1a46 	vmov.f32	s2, s12
 8017de0:	eef0 0a66 	vmov.f32	s1, s13
 8017de4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8017de8:	f7ec fb16 	bl	8004418 <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8017dec:	4b63      	ldr	r3, [pc, #396]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017dee:	2200      	movs	r2, #0
 8017df0:	9203      	str	r2, [sp, #12]
 8017df2:	2200      	movs	r2, #0
 8017df4:	9202      	str	r2, [sp, #8]
 8017df6:	2200      	movs	r2, #0
 8017df8:	9201      	str	r2, [sp, #4]
 8017dfa:	699a      	ldr	r2, [r3, #24]
 8017dfc:	9200      	str	r2, [sp, #0]
 8017dfe:	3308      	adds	r3, #8
 8017e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e02:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8017f8c <mode_Tuning0+0x6d4>
 8017e06:	f7f3 fee7 	bl	800bbd8 <slalomR>
			for(int i=0;i<40;i++){
 8017e0a:	69bb      	ldr	r3, [r7, #24]
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	61bb      	str	r3, [r7, #24]
 8017e10:	69bb      	ldr	r3, [r7, #24]
 8017e12:	2b27      	cmp	r3, #39	; 0x27
 8017e14:	ddc4      	ble.n	8017da0 <mode_Tuning0+0x4e8>
			}
			mode.WallControlMode=0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8017e1a:	4b58      	ldr	r3, [pc, #352]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017e1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8017e20:	4b56      	ldr	r3, [pc, #344]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017e22:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8017e26:	4b55      	ldr	r3, [pc, #340]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017e28:	ed93 7a02 	vldr	s14, [r3, #8]
 8017e2c:	4b53      	ldr	r3, [pc, #332]	; (8017f7c <mode_Tuning0+0x6c4>)
 8017e2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8017e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e36:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017e3a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8017e3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8017f80 <mode_Tuning0+0x6c8>
 8017e42:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8017e46:	6978      	ldr	r0, [r7, #20]
 8017e48:	eeb0 2a47 	vmov.f32	s4, s14
 8017e4c:	eef0 1a46 	vmov.f32	s3, s12
 8017e50:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8017f84 <mode_Tuning0+0x6cc>
 8017e54:	eef0 0a66 	vmov.f32	s1, s13
 8017e58:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017f80 <mode_Tuning0+0x6c8>
 8017e5c:	f7ec fadc 	bl	8004418 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8017e60:	e04f      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8017e62:	4b4b      	ldr	r3, [pc, #300]	; (8017f90 <mode_Tuning0+0x6d8>)
 8017e64:	2201      	movs	r2, #1
 8017e66:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8017e68:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8017f94 <mode_Tuning0+0x6dc>
 8017e6c:	f7f1 f82a 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8017e70:	f7f1 f814 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(600);
 8017e74:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017e78:	f002 fddc 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 8017e7c:	f7e9 fec4 	bl	8001c08 <reset_gyro>
			reset_speed();
 8017e80:	f7e9 f8d0 	bl	8001024 <reset_speed>
			reset_distance();
 8017e84:	f7e9 f88a 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8017e88:	f7ed fdea 	bl	8005a60 <clear_Ierror>
			record_mode=3;
 8017e8c:	4b3a      	ldr	r3, [pc, #232]	; (8017f78 <mode_Tuning0+0x6c0>)
 8017e8e:	2203      	movs	r2, #3
 8017e90:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8017e92:	2301      	movs	r3, #1
 8017e94:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8017e96:	6978      	ldr	r0, [r7, #20]
 8017e98:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8017f98 <mode_Tuning0+0x6e0>
 8017e9c:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8017f9c <mode_Tuning0+0x6e4>
 8017ea0:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8017f84 <mode_Tuning0+0x6cc>
 8017ea4:	eddf 0a37 	vldr	s1, [pc, #220]	; 8017f84 <mode_Tuning0+0x6cc>
 8017ea8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8017fa0 <mode_Tuning0+0x6e8>
 8017eac:	f7ec fab4 	bl	8004418 <straight_table2>
		break;
 8017eb0:	e027      	b.n	8017f02 <mode_Tuning0+0x64a>
		case 15:
			highspeed_mode = 1;
 8017eb2:	4b37      	ldr	r3, [pc, #220]	; (8017f90 <mode_Tuning0+0x6d8>)
 8017eb4:	2201      	movs	r2, #1
 8017eb6:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8017eb8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8017f94 <mode_Tuning0+0x6dc>
 8017ebc:	f7f1 f802 	bl	8008ec4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8017ec0:	f7f0 ffec 	bl	8008e9c <pl_FunMotor_start>
			HAL_Delay(600);
 8017ec4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017ec8:	f002 fdb4 	bl	801aa34 <HAL_Delay>
			reset_gyro();
 8017ecc:	f7e9 fe9c 	bl	8001c08 <reset_gyro>
			reset_speed();
 8017ed0:	f7e9 f8a8 	bl	8001024 <reset_speed>
			reset_distance();
 8017ed4:	f7e9 f862 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8017ed8:	f7ed fdc2 	bl	8005a60 <clear_Ierror>
			record_mode=3;
 8017edc:	4b26      	ldr	r3, [pc, #152]	; (8017f78 <mode_Tuning0+0x6c0>)
 8017ede:	2203      	movs	r2, #3
 8017ee0:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8017ee2:	2303      	movs	r3, #3
 8017ee4:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8017ee6:	6978      	ldr	r0, [r7, #20]
 8017ee8:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8017fa4 <mode_Tuning0+0x6ec>
 8017eec:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8017f9c <mode_Tuning0+0x6e4>
 8017ef0:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8017f84 <mode_Tuning0+0x6cc>
 8017ef4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8017f84 <mode_Tuning0+0x6cc>
 8017ef8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8017fa8 <mode_Tuning0+0x6f0>
 8017efc:	f7ec fa8c 	bl	8004418 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8017f00:	bf00      	nop
	}
	record_mode=0;
 8017f02:	4b1d      	ldr	r3, [pc, #116]	; (8017f78 <mode_Tuning0+0x6c0>)
 8017f04:	2200      	movs	r2, #0
 8017f06:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8017f08:	2003      	movs	r0, #3
 8017f0a:	f7f0 ff6f 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8017f0e:	2003      	movs	r0, #3
 8017f10:	f7f0 ff44 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8017f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017f18:	f7f1 fa66 	bl	80093e8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8017f1c:	f7f0 ffc8 	bl	8008eb0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8017f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017f24:	f7f1 fa60 	bl	80093e8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8017f28:	2000      	movs	r0, #0
 8017f2a:	f7f0 ff2d 	bl	8008d88 <pl_DriveMotor_standby>
	record_mode=0;
 8017f2e:	4b12      	ldr	r3, [pc, #72]	; (8017f78 <mode_Tuning0+0x6c0>)
 8017f30:	2200      	movs	r2, #0
 8017f32:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017f34:	e002      	b.n	8017f3c <mode_Tuning0+0x684>
		HAL_Delay(1);
 8017f36:	2001      	movs	r0, #1
 8017f38:	f002 fd7c 	bl	801aa34 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8017f3c:	4b1b      	ldr	r3, [pc, #108]	; (8017fac <mode_Tuning0+0x6f4>)
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017f44:	ddf7      	ble.n	8017f36 <mode_Tuning0+0x67e>
 8017f46:	4b19      	ldr	r3, [pc, #100]	; (8017fac <mode_Tuning0+0x6f4>)
 8017f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8017f4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017f50:	ddf1      	ble.n	8017f36 <mode_Tuning0+0x67e>
 8017f52:	4b16      	ldr	r3, [pc, #88]	; (8017fac <mode_Tuning0+0x6f4>)
 8017f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017f58:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017f5c:	ddeb      	ble.n	8017f36 <mode_Tuning0+0x67e>
	}
	pl_r_blue_LED(ON);
 8017f5e:	2001      	movs	r0, #1
 8017f60:	f7f0 fa82 	bl	8008468 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017f64:	2001      	movs	r0, #1
 8017f66:	f7f0 fa91 	bl	800848c <pl_l_blue_LED>
	record_print();
 8017f6a:	f000 fd95 	bl	8018a98 <record_print>



}
 8017f6e:	bf00      	nop
 8017f70:	3724      	adds	r7, #36	; 0x24
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd90      	pop	{r4, r7, pc}
 8017f76:	bf00      	nop
 8017f78:	2000f284 	.word	0x2000f284
 8017f7c:	2000f444 	.word	0x2000f444
 8017f80:	42340000 	.word	0x42340000
 8017f84:	00000000 	.word	0x00000000
 8017f88:	431b8000 	.word	0x431b8000
 8017f8c:	43960000 	.word	0x43960000
 8017f90:	20000814 	.word	0x20000814
 8017f94:	3f7d70a4 	.word	0x3f7d70a4
 8017f98:	4684d000 	.word	0x4684d000
 8017f9c:	457a0000 	.word	0x457a0000
 8017fa0:	44340000 	.word	0x44340000
 8017fa4:	469c4000 	.word	0x469c4000
 8017fa8:	446ea607 	.word	0x446ea607
 8017fac:	200002bc 	.word	0x200002bc

08017fb0 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b088      	sub	sp, #32
 8017fb4:	af04      	add	r7, sp, #16
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8017fba:	2300      	movs	r3, #0
 8017fbc:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8017fca:	2001      	movs	r0, #1
 8017fcc:	f7f0 fedc 	bl	8008d88 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8017fd0:	2003      	movs	r0, #3
 8017fd2:	f7f0 fee3 	bl	8008d9c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8017fd6:	2003      	movs	r0, #3
 8017fd8:	f7f0 ff08 	bl	8008dec <pl_R_DriveMotor_mode>
	reset_gyro();
 8017fdc:	f7e9 fe14 	bl	8001c08 <reset_gyro>
	reset_speed();
 8017fe0:	f7e9 f820 	bl	8001024 <reset_speed>
	clear_Ierror();
 8017fe4:	f7ed fd3c 	bl	8005a60 <clear_Ierror>

	switch (main_modeR) {
 8017fe8:	79fb      	ldrb	r3, [r7, #7]
 8017fea:	2b0f      	cmp	r3, #15
 8017fec:	f200 8226 	bhi.w	801843c <mode_WallSensorTuning+0x48c>
 8017ff0:	a201      	add	r2, pc, #4	; (adr r2, 8017ff8 <mode_WallSensorTuning+0x48>)
 8017ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ff6:	bf00      	nop
 8017ff8:	08018039 	.word	0x08018039
 8017ffc:	0801805f 	.word	0x0801805f
 8018000:	08018077 	.word	0x08018077
 8018004:	080180ed 	.word	0x080180ed
 8018008:	08018163 	.word	0x08018163
 801800c:	080181d9 	.word	0x080181d9
 8018010:	08018249 	.word	0x08018249
 8018014:	080182b5 	.word	0x080182b5
 8018018:	08018321 	.word	0x08018321
 801801c:	08018347 	.word	0x08018347
 8018020:	0801843d 	.word	0x0801843d
 8018024:	0801843d 	.word	0x0801843d
 8018028:	0801843d 	.word	0x0801843d
 801802c:	0801843d 	.word	0x0801843d
 8018030:	0801843d 	.word	0x0801843d
 8018034:	080183cd 	.word	0x080183cd
		case 0://横壁追従制御
			record_mode=16;
 8018038:	4bcc      	ldr	r3, [pc, #816]	; (801836c <mode_WallSensorTuning+0x3bc>)
 801803a:	2210      	movs	r2, #16
 801803c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801803e:	2301      	movs	r3, #1
 8018040:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8018042:	68b8      	ldr	r0, [r7, #8]
 8018044:	ed9f 2aca 	vldr	s4, [pc, #808]	; 8018370 <mode_WallSensorTuning+0x3c0>
 8018048:	eddf 1add 	vldr	s3, [pc, #884]	; 80183c0 <mode_WallSensorTuning+0x410>
 801804c:	ed9f 1ade 	vldr	s2, [pc, #888]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018050:	eddf 0add 	vldr	s1, [pc, #884]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018054:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8018374 <mode_WallSensorTuning+0x3c4>
 8018058:	f7ec f9de 	bl	8004418 <straight_table2>
		break;
 801805c:	e1ee      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 801805e:	2300      	movs	r3, #0
 8018060:	60fb      	str	r3, [r7, #12]
 8018062:	e004      	b.n	801806e <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8018064:	f7ed fa08 	bl	8005478 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	3301      	adds	r3, #1
 801806c:	60fb      	str	r3, [r7, #12]
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	2b14      	cmp	r3, #20
 8018072:	ddf7      	ble.n	8018064 <mode_WallSensorTuning+0xb4>
			}
		break;
 8018074:	e1e2      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 2://壁切れ90度
			record_mode = 7;
 8018076:	4bbd      	ldr	r3, [pc, #756]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018078:	2207      	movs	r2, #7
 801807a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801807c:	2300      	movs	r3, #0
 801807e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8018080:	2300      	movs	r3, #0
 8018082:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8018084:	2300      	movs	r3, #0
 8018086:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8018088:	2300      	movs	r3, #0
 801808a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 801808c:	68b8      	ldr	r0, [r7, #8]
 801808e:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8018378 <mode_WallSensorTuning+0x3c8>
 8018092:	eddf 1aba 	vldr	s3, [pc, #744]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018096:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 801837c <mode_WallSensorTuning+0x3cc>
 801809a:	eddf 0acb 	vldr	s1, [pc, #812]	; 80183c8 <mode_WallSensorTuning+0x418>
 801809e:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8018380 <mode_WallSensorTuning+0x3d0>
 80180a2:	f7ec f9b9 	bl	8004418 <straight_table2>
			mode.WallCutMode=1;
 80180a6:	2301      	movs	r3, #1
 80180a8:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80180aa:	2300      	movs	r3, #0
 80180ac:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80180ae:	68b8      	ldr	r0, [r7, #8]
 80180b0:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8018378 <mode_WallSensorTuning+0x3c8>
 80180b4:	eddf 1ab1 	vldr	s3, [pc, #708]	; 801837c <mode_WallSensorTuning+0x3cc>
 80180b8:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 801837c <mode_WallSensorTuning+0x3cc>
 80180bc:	eddf 0aaf 	vldr	s1, [pc, #700]	; 801837c <mode_WallSensorTuning+0x3cc>
 80180c0:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8018384 <mode_WallSensorTuning+0x3d4>
 80180c4:	f7ec f9a8 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 80180c8:	2300      	movs	r3, #0
 80180ca:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80180cc:	2300      	movs	r3, #0
 80180ce:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 80180d0:	68b8      	ldr	r0, [r7, #8]
 80180d2:	ed9f 2aa9 	vldr	s4, [pc, #676]	; 8018378 <mode_WallSensorTuning+0x3c8>
 80180d6:	eddf 1aa9 	vldr	s3, [pc, #676]	; 801837c <mode_WallSensorTuning+0x3cc>
 80180da:	ed9f 1abb 	vldr	s2, [pc, #748]	; 80183c8 <mode_WallSensorTuning+0x418>
 80180de:	eddf 0aa7 	vldr	s1, [pc, #668]	; 801837c <mode_WallSensorTuning+0x3cc>
 80180e2:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8018388 <mode_WallSensorTuning+0x3d8>
 80180e6:	f7ec f997 	bl	8004418 <straight_table2>
		break;
 80180ea:	e1a7      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 80180ec:	4b9f      	ldr	r3, [pc, #636]	; (801836c <mode_WallSensorTuning+0x3bc>)
 80180ee:	2208      	movs	r2, #8
 80180f0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80180f2:	2300      	movs	r3, #0
 80180f4:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80180fa:	2300      	movs	r3, #0
 80180fc:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80180fe:	2300      	movs	r3, #0
 8018100:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8018102:	68b8      	ldr	r0, [r7, #8]
 8018104:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8018378 <mode_WallSensorTuning+0x3c8>
 8018108:	eddf 1a9c 	vldr	s3, [pc, #624]	; 801837c <mode_WallSensorTuning+0x3cc>
 801810c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018110:	eddf 0aad 	vldr	s1, [pc, #692]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018114:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 801838c <mode_WallSensorTuning+0x3dc>
 8018118:	f7ec f97e 	bl	8004418 <straight_table2>
			mode.WallCutMode=2;
 801811c:	2302      	movs	r3, #2
 801811e:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8018120:	2300      	movs	r3, #0
 8018122:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8018124:	68b8      	ldr	r0, [r7, #8]
 8018126:	ed9f 2a94 	vldr	s4, [pc, #592]	; 8018378 <mode_WallSensorTuning+0x3c8>
 801812a:	eddf 1a94 	vldr	s3, [pc, #592]	; 801837c <mode_WallSensorTuning+0x3cc>
 801812e:	ed9f 1a93 	vldr	s2, [pc, #588]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018132:	eddf 0a92 	vldr	s1, [pc, #584]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018136:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8018384 <mode_WallSensorTuning+0x3d4>
 801813a:	f7ec f96d 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 801813e:	2300      	movs	r3, #0
 8018140:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8018142:	2300      	movs	r3, #0
 8018144:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8018146:	68b8      	ldr	r0, [r7, #8]
 8018148:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 8018378 <mode_WallSensorTuning+0x3c8>
 801814c:	eddf 1a8b 	vldr	s3, [pc, #556]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018150:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018154:	eddf 0a89 	vldr	s1, [pc, #548]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018158:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8018388 <mode_WallSensorTuning+0x3d8>
 801815c:	f7ec f95c 	bl	8004418 <straight_table2>
		break;
 8018160:	e16c      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8018162:	4b82      	ldr	r3, [pc, #520]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018164:	2208      	movs	r2, #8
 8018166:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8018168:	2300      	movs	r3, #0
 801816a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801816c:	2300      	movs	r3, #0
 801816e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8018170:	2300      	movs	r3, #0
 8018172:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8018174:	2300      	movs	r3, #0
 8018176:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8018178:	68b8      	ldr	r0, [r7, #8]
 801817a:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 8018378 <mode_WallSensorTuning+0x3c8>
 801817e:	eddf 1a7f 	vldr	s3, [pc, #508]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018182:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018186:	eddf 0a90 	vldr	s1, [pc, #576]	; 80183c8 <mode_WallSensorTuning+0x418>
 801818a:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8018390 <mode_WallSensorTuning+0x3e0>
 801818e:	f7ec f943 	bl	8004418 <straight_table2>
			mode.WallCutMode=3;
 8018192:	2303      	movs	r3, #3
 8018194:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8018196:	2300      	movs	r3, #0
 8018198:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 801819a:	68b8      	ldr	r0, [r7, #8]
 801819c:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8018378 <mode_WallSensorTuning+0x3c8>
 80181a0:	eddf 1a76 	vldr	s3, [pc, #472]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181a4:	ed9f 1a75 	vldr	s2, [pc, #468]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181a8:	eddf 0a74 	vldr	s1, [pc, #464]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181ac:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8018394 <mode_WallSensorTuning+0x3e4>
 80181b0:	f7ec f932 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 80181b4:	2300      	movs	r3, #0
 80181b6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80181bc:	68b8      	ldr	r0, [r7, #8]
 80181be:	ed9f 2a6e 	vldr	s4, [pc, #440]	; 8018378 <mode_WallSensorTuning+0x3c8>
 80181c2:	eddf 1a6e 	vldr	s3, [pc, #440]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181c6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80183c8 <mode_WallSensorTuning+0x418>
 80181ca:	eddf 0a6c 	vldr	s1, [pc, #432]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181ce:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8018398 <mode_WallSensorTuning+0x3e8>
 80181d2:	f7ec f921 	bl	8004418 <straight_table2>
		break;
 80181d6:	e131      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 80181d8:	2300      	movs	r3, #0
 80181da:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80181dc:	2300      	movs	r3, #0
 80181de:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80181e0:	2300      	movs	r3, #0
 80181e2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80181e4:	2300      	movs	r3, #0
 80181e6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 80181e8:	68b8      	ldr	r0, [r7, #8]
 80181ea:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8018378 <mode_WallSensorTuning+0x3c8>
 80181ee:	eddf 1a63 	vldr	s3, [pc, #396]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181f2:	ed9f 1a62 	vldr	s2, [pc, #392]	; 801837c <mode_WallSensorTuning+0x3cc>
 80181f6:	eddf 0a74 	vldr	s1, [pc, #464]	; 80183c8 <mode_WallSensorTuning+0x418>
 80181fa:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8018390 <mode_WallSensorTuning+0x3e0>
 80181fe:	f7ec f90b 	bl	8004418 <straight_table2>
			mode.WallCutMode=4;
 8018202:	2304      	movs	r3, #4
 8018204:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8018206:	2300      	movs	r3, #0
 8018208:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 801820a:	68b8      	ldr	r0, [r7, #8]
 801820c:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8018378 <mode_WallSensorTuning+0x3c8>
 8018210:	eddf 1a5a 	vldr	s3, [pc, #360]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018214:	ed9f 1a59 	vldr	s2, [pc, #356]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018218:	eddf 0a58 	vldr	s1, [pc, #352]	; 801837c <mode_WallSensorTuning+0x3cc>
 801821c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8018394 <mode_WallSensorTuning+0x3e4>
 8018220:	f7ec f8fa 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 8018224:	2300      	movs	r3, #0
 8018226:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8018228:	2300      	movs	r3, #0
 801822a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 801822c:	68b8      	ldr	r0, [r7, #8]
 801822e:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8018378 <mode_WallSensorTuning+0x3c8>
 8018232:	eddf 1a52 	vldr	s3, [pc, #328]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018236:	ed9f 1a64 	vldr	s2, [pc, #400]	; 80183c8 <mode_WallSensorTuning+0x418>
 801823a:	eddf 0a50 	vldr	s1, [pc, #320]	; 801837c <mode_WallSensorTuning+0x3cc>
 801823e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8018398 <mode_WallSensorTuning+0x3e8>
 8018242:	f7ec f8e9 	bl	8004418 <straight_table2>
		break;
 8018246:	e0f9      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 6://斜め直進(90)
			mode.WallControlMode=1;
 8018248:	2301      	movs	r3, #1
 801824a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;mode.WallCutMode=0;mode.calMazeMode=0;
 801824c:	2300      	movs	r3, #0
 801824e:	727b      	strb	r3, [r7, #9]
 8018250:	2300      	movs	r3, #0
 8018252:	72fb      	strb	r3, [r7, #11]
 8018254:	2300      	movs	r3, #0
 8018256:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT, 0, 300,300,300*300/2/BACK_TO_CENTER_FRONT,mode);
 8018258:	68b8      	ldr	r0, [r7, #8]
 801825a:	ed9f 2a50 	vldr	s4, [pc, #320]	; 801839c <mode_WallSensorTuning+0x3ec>
 801825e:	eddf 1a47 	vldr	s3, [pc, #284]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018262:	ed9f 1a46 	vldr	s2, [pc, #280]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018266:	eddf 0a58 	vldr	s1, [pc, #352]	; 80183c8 <mode_WallSensorTuning+0x418>
 801826a:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 801826e:	f7ec f8d3 	bl	8004418 <straight_table2>
			turn45inR(speed300_exploration.turn45in_R,OFF,1,300);
 8018272:	4b4b      	ldr	r3, [pc, #300]	; (80183a0 <mode_WallSensorTuning+0x3f0>)
 8018274:	2201      	movs	r2, #1
 8018276:	9202      	str	r2, [sp, #8]
 8018278:	2200      	movs	r2, #0
 801827a:	9201      	str	r2, [sp, #4]
 801827c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8018280:	9200      	str	r2, [sp, #0]
 8018282:	3380      	adds	r3, #128	; 0x80
 8018284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018286:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801837c <mode_WallSensorTuning+0x3cc>
 801828a:	f7f4 fe0d 	bl	800cea8 <turn45inR>
			mode.WallControlMode=0;
 801828e:	2300      	movs	r3, #0
 8018290:	723b      	strb	r3, [r7, #8]
			record_mode=9;
 8018292:	4b36      	ldr	r3, [pc, #216]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018294:	2209      	movs	r2, #9
 8018296:	701a      	strb	r2, [r3, #0]
			straight_table2(90*3*sqrt(2), 300, 0, 300, 3000,mode);
 8018298:	68b8      	ldr	r0, [r7, #8]
 801829a:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8018378 <mode_WallSensorTuning+0x3c8>
 801829e:	eddf 1a37 	vldr	s3, [pc, #220]	; 801837c <mode_WallSensorTuning+0x3cc>
 80182a2:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80183c8 <mode_WallSensorTuning+0x418>
 80182a6:	eddf 0a35 	vldr	s1, [pc, #212]	; 801837c <mode_WallSensorTuning+0x3cc>
 80182aa:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80183a4 <mode_WallSensorTuning+0x3f4>
 80182ae:	f7ec f8b3 	bl	8004418 <straight_table2>
		break;
 80182b2:	e0c3      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 7://斜め直進(45)

			mode.WallControlMode=1;
 80182b4:	2301      	movs	r3, #1
 80182b6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;mode.WallCutMode=0;mode.calMazeMode=0;
 80182b8:	2300      	movs	r3, #0
 80182ba:	727b      	strb	r3, [r7, #9]
 80182bc:	2300      	movs	r3, #0
 80182be:	72fb      	strb	r3, [r7, #11]
 80182c0:	2300      	movs	r3, #0
 80182c2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT, 0, 300,300,300*300/2/BACK_TO_CENTER_FRONT,mode);
 80182c4:	68b8      	ldr	r0, [r7, #8]
 80182c6:	ed9f 2a35 	vldr	s4, [pc, #212]	; 801839c <mode_WallSensorTuning+0x3ec>
 80182ca:	eddf 1a2c 	vldr	s3, [pc, #176]	; 801837c <mode_WallSensorTuning+0x3cc>
 80182ce:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 801837c <mode_WallSensorTuning+0x3cc>
 80182d2:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80183c8 <mode_WallSensorTuning+0x418>
 80182d6:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 80182da:	f7ec f89d 	bl	8004418 <straight_table2>
			turn45inR(speed300_exploration.turn45in_R,OFF,1,300);
 80182de:	4b30      	ldr	r3, [pc, #192]	; (80183a0 <mode_WallSensorTuning+0x3f0>)
 80182e0:	2201      	movs	r2, #1
 80182e2:	9202      	str	r2, [sp, #8]
 80182e4:	2200      	movs	r2, #0
 80182e6:	9201      	str	r2, [sp, #4]
 80182e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80182ec:	9200      	str	r2, [sp, #0]
 80182ee:	3380      	adds	r3, #128	; 0x80
 80182f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80182f2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801837c <mode_WallSensorTuning+0x3cc>
 80182f6:	f7f4 fdd7 	bl	800cea8 <turn45inR>
			mode.WallControlMode=0;
 80182fa:	2300      	movs	r3, #0
 80182fc:	723b      	strb	r3, [r7, #8]
			record_mode=10;
 80182fe:	4b1b      	ldr	r3, [pc, #108]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018300:	220a      	movs	r2, #10
 8018302:	701a      	strb	r2, [r3, #0]
			straight_table2(90*3*sqrt(2), 300, 0, 300, 3000,mode);
 8018304:	68b8      	ldr	r0, [r7, #8]
 8018306:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8018378 <mode_WallSensorTuning+0x3c8>
 801830a:	eddf 1a1c 	vldr	s3, [pc, #112]	; 801837c <mode_WallSensorTuning+0x3cc>
 801830e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018312:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018316:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80183a4 <mode_WallSensorTuning+0x3f4>
 801831a:	f7ec f87d 	bl	8004418 <straight_table2>

		break;
 801831e:	e08d      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8018320:	4b12      	ldr	r3, [pc, #72]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018322:	2207      	movs	r2, #7
 8018324:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8018326:	2303      	movs	r3, #3
 8018328:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801832a:	68b8      	ldr	r0, [r7, #8]
 801832c:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8018378 <mode_WallSensorTuning+0x3c8>
 8018330:	eddf 1a12 	vldr	s3, [pc, #72]	; 801837c <mode_WallSensorTuning+0x3cc>
 8018334:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018338:	eddf 0a23 	vldr	s1, [pc, #140]	; 80183c8 <mode_WallSensorTuning+0x418>
 801833c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80183a4 <mode_WallSensorTuning+0x3f4>
 8018340:	f7ec f86a 	bl	8004418 <straight_table2>
		break;
 8018344:	e07a      	b.n	801843c <mode_WallSensorTuning+0x48c>
		case 9:
			record_mode=8;
 8018346:	4b09      	ldr	r3, [pc, #36]	; (801836c <mode_WallSensorTuning+0x3bc>)
 8018348:	2208      	movs	r2, #8
 801834a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801834c:	2303      	movs	r3, #3
 801834e:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8018350:	68b8      	ldr	r0, [r7, #8]
 8018352:	ed9f 2a15 	vldr	s4, [pc, #84]	; 80183a8 <mode_WallSensorTuning+0x3f8>
 8018356:	eddf 1a15 	vldr	s3, [pc, #84]	; 80183ac <mode_WallSensorTuning+0x3fc>
 801835a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80183c8 <mode_WallSensorTuning+0x418>
 801835e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80183c8 <mode_WallSensorTuning+0x418>
 8018362:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80183b0 <mode_WallSensorTuning+0x400>
 8018366:	f7ec f857 	bl	8004418 <straight_table2>
		break;
 801836a:	e067      	b.n	801843c <mode_WallSensorTuning+0x48c>
 801836c:	2000f284 	.word	0x2000f284
 8018370:	459c4000 	.word	0x459c4000
 8018374:	44b40000 	.word	0x44b40000
 8018378:	453b8000 	.word	0x453b8000
 801837c:	43960000 	.word	0x43960000
 8018380:	431b8000 	.word	0x431b8000
 8018384:	41b40000 	.word	0x41b40000
 8018388:	42870000 	.word	0x42870000
 801838c:	42cd0000 	.word	0x42cd0000
 8018390:	4329c77b 	.word	0x4329c77b
 8018394:	41fe8ef6 	.word	0x41fe8ef6
 8018398:	42beeb39 	.word	0x42beeb39
 801839c:	45610000 	.word	0x45610000
 80183a0:	2000f444 	.word	0x2000f444
 80183a4:	43beeb39 	.word	0x43beeb39
 80183a8:	461c4000 	.word	0x461c4000
 80183ac:	442f0000 	.word	0x442f0000
 80183b0:	4484977b 	.word	0x4484977b
 80183b4:	43488000 	.word	0x43488000
 80183b8:	42340000 	.word	0x42340000
 80183bc:	44bb8000 	.word	0x44bb8000
 80183c0:	43fa0000 	.word	0x43fa0000
 80183c4:	43070000 	.word	0x43070000
 80183c8:	00000000 	.word	0x00000000
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 80183cc:	2305      	movs	r3, #5
 80183ce:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80183d0:	2300      	movs	r3, #0
 80183d2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80183d4:	2300      	movs	r3, #0
 80183d6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80183d8:	2300      	movs	r3, #0
 80183da:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 80183dc:	68b8      	ldr	r0, [r7, #8]
 80183de:	ed1f 2a09 	vldr	s4, [pc, #-36]	; 80183bc <mode_WallSensorTuning+0x40c>
 80183e2:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 80183c0 <mode_WallSensorTuning+0x410>
 80183e6:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 80183c0 <mode_WallSensorTuning+0x410>
 80183ea:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 80183c8 <mode_WallSensorTuning+0x418>
 80183ee:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 80183b4 <mode_WallSensorTuning+0x404>
 80183f2:	f7ec f811 	bl	8004418 <straight_table2>
			mode.WallCutMode=2;
 80183f6:	2302      	movs	r3, #2
 80183f8:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 80183fe:	68b8      	ldr	r0, [r7, #8]
 8018400:	ed1f 2a12 	vldr	s4, [pc, #-72]	; 80183bc <mode_WallSensorTuning+0x40c>
 8018404:	ed5f 1a12 	vldr	s3, [pc, #-72]	; 80183c0 <mode_WallSensorTuning+0x410>
 8018408:	ed1f 1a13 	vldr	s2, [pc, #-76]	; 80183c0 <mode_WallSensorTuning+0x410>
 801840c:	ed5f 0a14 	vldr	s1, [pc, #-80]	; 80183c0 <mode_WallSensorTuning+0x410>
 8018410:	ed1f 0a17 	vldr	s0, [pc, #-92]	; 80183b8 <mode_WallSensorTuning+0x408>
 8018414:	f7ec f800 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 8018418:	2300      	movs	r3, #0
 801841a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801841c:	2300      	movs	r3, #0
 801841e:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8018420:	68b8      	ldr	r0, [r7, #8]
 8018422:	ed1f 2a1a 	vldr	s4, [pc, #-104]	; 80183bc <mode_WallSensorTuning+0x40c>
 8018426:	ed5f 1a1a 	vldr	s3, [pc, #-104]	; 80183c0 <mode_WallSensorTuning+0x410>
 801842a:	ed1f 1a19 	vldr	s2, [pc, #-100]	; 80183c8 <mode_WallSensorTuning+0x418>
 801842e:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 80183c0 <mode_WallSensorTuning+0x410>
 8018432:	ed1f 0a1c 	vldr	s0, [pc, #-112]	; 80183c4 <mode_WallSensorTuning+0x414>
 8018436:	f7eb ffef 	bl	8004418 <straight_table2>
		break;
 801843a:	bf00      	nop
	}
	record_mode=0;
 801843c:	4b1c      	ldr	r3, [pc, #112]	; (80184b0 <mode_WallSensorTuning+0x500>)
 801843e:	2200      	movs	r2, #0
 8018440:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8018442:	2003      	movs	r0, #3
 8018444:	f7f0 fcd2 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8018448:	2003      	movs	r0, #3
 801844a:	f7f0 fca7 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801844e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8018452:	f7f0 ffc9 	bl	80093e8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8018456:	f7f0 fd2b 	bl	8008eb0 <pl_FunMotor_stop>
	record_mode=0;
 801845a:	4b15      	ldr	r3, [pc, #84]	; (80184b0 <mode_WallSensorTuning+0x500>)
 801845c:	2200      	movs	r2, #0
 801845e:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8018460:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8018464:	f7f0 ffc0 	bl	80093e8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8018468:	2000      	movs	r0, #0
 801846a:	f7f0 fc8d 	bl	8008d88 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801846e:	e002      	b.n	8018476 <mode_WallSensorTuning+0x4c6>
		HAL_Delay(1);
 8018470:	2001      	movs	r0, #1
 8018472:	f002 fadf 	bl	801aa34 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8018476:	4b0f      	ldr	r3, [pc, #60]	; (80184b4 <mode_WallSensorTuning+0x504>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801847e:	ddf7      	ble.n	8018470 <mode_WallSensorTuning+0x4c0>
 8018480:	4b0c      	ldr	r3, [pc, #48]	; (80184b4 <mode_WallSensorTuning+0x504>)
 8018482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018486:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801848a:	ddf1      	ble.n	8018470 <mode_WallSensorTuning+0x4c0>
 801848c:	4b09      	ldr	r3, [pc, #36]	; (80184b4 <mode_WallSensorTuning+0x504>)
 801848e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8018492:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8018496:	ddeb      	ble.n	8018470 <mode_WallSensorTuning+0x4c0>
	}
	pl_r_blue_LED(ON);
 8018498:	2001      	movs	r0, #1
 801849a:	f7ef ffe5 	bl	8008468 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801849e:	2001      	movs	r0, #1
 80184a0:	f7ef fff4 	bl	800848c <pl_l_blue_LED>
	record_print();
 80184a4:	f000 faf8 	bl	8018a98 <record_print>



}
 80184a8:	bf00      	nop
 80184aa:	3710      	adds	r7, #16
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	2000f284 	.word	0x2000f284
 80184b4:	200002bc 	.word	0x200002bc

080184b8 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	4603      	mov	r3, r0
 80184c0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80184c2:	2300      	movs	r3, #0
 80184c4:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80184c6:	2300      	movs	r3, #0
 80184c8:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80184ca:	2300      	movs	r3, #0
 80184cc:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80184ce:	2300      	movs	r3, #0
 80184d0:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80184d2:	2001      	movs	r0, #1
 80184d4:	f7f0 fc58 	bl	8008d88 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80184d8:	2003      	movs	r0, #3
 80184da:	f7f0 fc5f 	bl	8008d9c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80184de:	2003      	movs	r0, #3
 80184e0:	f7f0 fc84 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80184e4:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8018874 <mode_WallSensorTuning_fast+0x3bc>
 80184e8:	f7f0 fcec 	bl	8008ec4 <pl_FunMotor_duty>
	pl_FunMotor_start();
 80184ec:	f7f0 fcd6 	bl	8008e9c <pl_FunMotor_start>
	HAL_Delay(600);
 80184f0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80184f4:	f002 fa9e 	bl	801aa34 <HAL_Delay>
	reset_gyro();
 80184f8:	f7e9 fb86 	bl	8001c08 <reset_gyro>
	reset_speed();
 80184fc:	f7e8 fd92 	bl	8001024 <reset_speed>
	clear_Ierror();
 8018500:	f7ed faae 	bl	8005a60 <clear_Ierror>
	angle=0;
 8018504:	4bdc      	ldr	r3, [pc, #880]	; (8018878 <mode_WallSensorTuning_fast+0x3c0>)
 8018506:	f04f 0200 	mov.w	r2, #0
 801850a:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 801850c:	79fb      	ldrb	r3, [r7, #7]
 801850e:	2b0f      	cmp	r3, #15
 8018510:	f200 821b 	bhi.w	801894a <mode_WallSensorTuning_fast+0x492>
 8018514:	a201      	add	r2, pc, #4	; (adr r2, 801851c <mode_WallSensorTuning_fast+0x64>)
 8018516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851a:	bf00      	nop
 801851c:	0801855d 	.word	0x0801855d
 8018520:	0801858f 	.word	0x0801858f
 8018524:	08018605 	.word	0x08018605
 8018528:	0801867b 	.word	0x0801867b
 801852c:	080186f1 	.word	0x080186f1
 8018530:	08018767 	.word	0x08018767
 8018534:	080187dd 	.word	0x080187dd
 8018538:	08018803 	.word	0x08018803
 801853c:	08018829 	.word	0x08018829
 8018540:	0801884f 	.word	0x0801884f
 8018544:	080188d9 	.word	0x080188d9
 8018548:	080188ff 	.word	0x080188ff
 801854c:	08018925 	.word	0x08018925
 8018550:	0801894b 	.word	0x0801894b
 8018554:	0801894b 	.word	0x0801894b
 8018558:	0801894b 	.word	0x0801894b
		case 0://横壁追従制御
			record_mode=15;
 801855c:	4bc7      	ldr	r3, [pc, #796]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 801855e:	220f      	movs	r2, #15
 8018560:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8018562:	2301      	movs	r3, #1
 8018564:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8018566:	4bc6      	ldr	r3, [pc, #792]	; (8018880 <mode_WallSensorTuning_fast+0x3c8>)
 8018568:	2201      	movs	r2, #1
 801856a:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 801856c:	68f8      	ldr	r0, [r7, #12]
 801856e:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8018884 <mode_WallSensorTuning_fast+0x3cc>
 8018572:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8018888 <mode_WallSensorTuning_fast+0x3d0>
 8018576:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801857a:	eddf 0ac4 	vldr	s1, [pc, #784]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801857e:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8018890 <mode_WallSensorTuning_fast+0x3d8>
 8018582:	f7eb ff49 	bl	8004418 <straight_table2>
			highspeed_mode=0;
 8018586:	4bbe      	ldr	r3, [pc, #760]	; (8018880 <mode_WallSensorTuning_fast+0x3c8>)
 8018588:	2200      	movs	r2, #0
 801858a:	701a      	strb	r2, [r3, #0]
		break;
 801858c:	e1dd      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 801858e:	4bbb      	ldr	r3, [pc, #748]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 8018590:	2208      	movs	r2, #8
 8018592:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8018594:	2301      	movs	r3, #1
 8018596:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8018598:	2300      	movs	r3, #0
 801859a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801859c:	2300      	movs	r3, #0
 801859e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80185a0:	2300      	movs	r3, #0
 80185a2:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 80185a4:	68f8      	ldr	r0, [r7, #12]
 80185a6:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 80185aa:	eddf 1abb 	vldr	s3, [pc, #748]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185ae:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185b2:	eddf 0ab6 	vldr	s1, [pc, #728]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80185b6:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 801889c <mode_WallSensorTuning_fast+0x3e4>
 80185ba:	f7eb ff2d 	bl	8004418 <straight_table2>
			mode.WallCutMode=2;
 80185be:	2302      	movs	r3, #2
 80185c0:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80185c2:	2300      	movs	r3, #0
 80185c4:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 80185c6:	68f8      	ldr	r0, [r7, #12]
 80185c8:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 80185cc:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185d0:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185d4:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185d8:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80188a0 <mode_WallSensorTuning_fast+0x3e8>
 80185dc:	f7eb ff1c 	bl	8004418 <straight_table2>
			mode.WallControlMode=1;
 80185e0:	2301      	movs	r3, #1
 80185e2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80185e4:	2300      	movs	r3, #0
 80185e6:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 80185e8:	68f8      	ldr	r0, [r7, #12]
 80185ea:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 80185ee:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185f2:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80185f6:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80185fa:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 80188a4 <mode_WallSensorTuning_fast+0x3ec>
 80185fe:	f7eb ff0b 	bl	8004418 <straight_table2>
		break;
 8018602:	e1a2      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 8018604:	4b9d      	ldr	r3, [pc, #628]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 8018606:	2208      	movs	r2, #8
 8018608:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801860a:	2301      	movs	r3, #1
 801860c:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801860e:	2300      	movs	r3, #0
 8018610:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8018612:	2300      	movs	r3, #0
 8018614:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8018616:	2300      	movs	r3, #0
 8018618:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 801861a:	68f8      	ldr	r0, [r7, #12]
 801861c:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 8018620:	eddf 1aa1 	vldr	s3, [pc, #644]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 8018624:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 8018628:	eddf 0a98 	vldr	s1, [pc, #608]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801862c:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 801889c <mode_WallSensorTuning_fast+0x3e4>
 8018630:	f7eb fef2 	bl	8004418 <straight_table2>
			mode.WallCutMode=2;
 8018634:	2302      	movs	r3, #2
 8018636:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8018638:	2300      	movs	r3, #0
 801863a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 801863c:	68f8      	ldr	r0, [r7, #12]
 801863e:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 8018642:	eddf 1a99 	vldr	s3, [pc, #612]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 8018646:	ed9f 1a98 	vldr	s2, [pc, #608]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 801864a:	eddf 0a97 	vldr	s1, [pc, #604]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 801864e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80188a0 <mode_WallSensorTuning_fast+0x3e8>
 8018652:	f7eb fee1 	bl	8004418 <straight_table2>
			mode.WallControlMode=1;
 8018656:	2301      	movs	r3, #1
 8018658:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801865a:	2300      	movs	r3, #0
 801865c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 801865e:	68f8      	ldr	r0, [r7, #12]
 8018660:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 8018664:	eddf 1a90 	vldr	s3, [pc, #576]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 8018668:	ed9f 1a88 	vldr	s2, [pc, #544]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801866c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80188a8 <mode_WallSensorTuning_fast+0x3f0>
 8018670:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80188a4 <mode_WallSensorTuning_fast+0x3ec>
 8018674:	f7eb fed0 	bl	8004418 <straight_table2>
		break;
 8018678:	e167      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 801867a:	4b80      	ldr	r3, [pc, #512]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 801867c:	2208      	movs	r2, #8
 801867e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8018680:	2301      	movs	r3, #1
 8018682:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8018684:	2300      	movs	r3, #0
 8018686:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8018688:	2300      	movs	r3, #0
 801868a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801868c:	2300      	movs	r3, #0
 801868e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8018690:	68f8      	ldr	r0, [r7, #12]
 8018692:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80188ac <mode_WallSensorTuning_fast+0x3f4>
 8018696:	eddf 1a86 	vldr	s3, [pc, #536]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 801869a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 801869e:	eddf 0a7b 	vldr	s1, [pc, #492]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80186a2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 801889c <mode_WallSensorTuning_fast+0x3e4>
 80186a6:	f7eb feb7 	bl	8004418 <straight_table2>
			mode.WallCutMode=2;
 80186aa:	2302      	movs	r3, #2
 80186ac:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80186ae:	2300      	movs	r3, #0
 80186b0:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 80186b2:	68f8      	ldr	r0, [r7, #12]
 80186b4:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 80188ac <mode_WallSensorTuning_fast+0x3f4>
 80186b8:	eddf 1a7d 	vldr	s3, [pc, #500]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 80186bc:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 80186c0:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 80186c4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80188a0 <mode_WallSensorTuning_fast+0x3e8>
 80186c8:	f7eb fea6 	bl	8004418 <straight_table2>
			mode.WallControlMode=1;
 80186cc:	2301      	movs	r3, #1
 80186ce:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80186d0:	2300      	movs	r3, #0
 80186d2:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 80186d4:	68f8      	ldr	r0, [r7, #12]
 80186d6:	ed9f 2a75 	vldr	s4, [pc, #468]	; 80188ac <mode_WallSensorTuning_fast+0x3f4>
 80186da:	eddf 1a75 	vldr	s3, [pc, #468]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 80186de:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80186e2:	eddf 0a73 	vldr	s1, [pc, #460]	; 80188b0 <mode_WallSensorTuning_fast+0x3f8>
 80186e6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80188a4 <mode_WallSensorTuning_fast+0x3ec>
 80186ea:	f7eb fe95 	bl	8004418 <straight_table2>
		break;
 80186ee:	e12c      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 80186f0:	4b62      	ldr	r3, [pc, #392]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 80186f2:	2208      	movs	r2, #8
 80186f4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80186f6:	2300      	movs	r3, #0
 80186f8:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80186fa:	2300      	movs	r3, #0
 80186fc:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80186fe:	2300      	movs	r3, #0
 8018700:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8018702:	2300      	movs	r3, #0
 8018704:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8018706:	68f8      	ldr	r0, [r7, #12]
 8018708:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 801870c:	eddf 1a62 	vldr	s3, [pc, #392]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018710:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018714:	eddf 0a5d 	vldr	s1, [pc, #372]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 8018718:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80188b4 <mode_WallSensorTuning_fast+0x3fc>
 801871c:	f7eb fe7c 	bl	8004418 <straight_table2>
			mode.WallCutMode=3;
 8018720:	2303      	movs	r3, #3
 8018722:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8018724:	2300      	movs	r3, #0
 8018726:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8018728:	68f8      	ldr	r0, [r7, #12]
 801872a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 801872e:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018732:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018736:	eddf 0a58 	vldr	s1, [pc, #352]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 801873a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80188b8 <mode_WallSensorTuning_fast+0x400>
 801873e:	f7eb fe6b 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 8018742:	2300      	movs	r3, #0
 8018744:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8018746:	2300      	movs	r3, #0
 8018748:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 801874a:	68f8      	ldr	r0, [r7, #12]
 801874c:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 8018750:	eddf 1a51 	vldr	s3, [pc, #324]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018754:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 8018758:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 801875c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80188bc <mode_WallSensorTuning_fast+0x404>
 8018760:	f7eb fe5a 	bl	8004418 <straight_table2>
		break;
 8018764:	e0f1      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8018766:	4b45      	ldr	r3, [pc, #276]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 8018768:	2208      	movs	r2, #8
 801876a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 801876c:	2300      	movs	r3, #0
 801876e:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8018770:	2300      	movs	r3, #0
 8018772:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8018774:	2300      	movs	r3, #0
 8018776:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8018778:	2300      	movs	r3, #0
 801877a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 801877c:	68f8      	ldr	r0, [r7, #12]
 801877e:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 8018782:	eddf 1a45 	vldr	s3, [pc, #276]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 8018786:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 801878a:	eddf 0a40 	vldr	s1, [pc, #256]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801878e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80188b4 <mode_WallSensorTuning_fast+0x3fc>
 8018792:	f7eb fe41 	bl	8004418 <straight_table2>
			mode.WallCutMode=4;
 8018796:	2304      	movs	r3, #4
 8018798:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801879a:	2300      	movs	r3, #0
 801879c:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 801879e:	68f8      	ldr	r0, [r7, #12]
 80187a0:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 80187a4:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80187a8:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80187ac:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80187b0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80188b8 <mode_WallSensorTuning_fast+0x400>
 80187b4:	f7eb fe30 	bl	8004418 <straight_table2>
			mode.WallControlMode=0;
 80187b8:	2300      	movs	r3, #0
 80187ba:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80187bc:	2300      	movs	r3, #0
 80187be:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80187c0:	68f8      	ldr	r0, [r7, #12]
 80187c2:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8018894 <mode_WallSensorTuning_fast+0x3dc>
 80187c6:	eddf 1a34 	vldr	s3, [pc, #208]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80187ca:	ed9f 1a30 	vldr	s2, [pc, #192]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80187ce:	eddf 0a32 	vldr	s1, [pc, #200]	; 8018898 <mode_WallSensorTuning_fast+0x3e0>
 80187d2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80188bc <mode_WallSensorTuning_fast+0x404>
 80187d6:	f7eb fe1f 	bl	8004418 <straight_table2>
		break;
 80187da:	e0b6      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 80187dc:	4b27      	ldr	r3, [pc, #156]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 80187de:	2207      	movs	r2, #7
 80187e0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 80187e6:	68f8      	ldr	r0, [r7, #12]
 80187e8:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80188c0 <mode_WallSensorTuning_fast+0x408>
 80187ec:	eddf 1a35 	vldr	s3, [pc, #212]	; 80188c4 <mode_WallSensorTuning_fast+0x40c>
 80187f0:	ed9f 1a26 	vldr	s2, [pc, #152]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80187f4:	eddf 0a25 	vldr	s1, [pc, #148]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 80187f8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80188c8 <mode_WallSensorTuning_fast+0x410>
 80187fc:	f7eb fe0c 	bl	8004418 <straight_table2>
		break;
 8018800:	e0a3      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8018802:	4b1e      	ldr	r3, [pc, #120]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 8018804:	2209      	movs	r2, #9
 8018806:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8018808:	2300      	movs	r3, #0
 801880a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 801880c:	68f8      	ldr	r0, [r7, #12]
 801880e:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80188c0 <mode_WallSensorTuning_fast+0x408>
 8018812:	eddf 1a2c 	vldr	s3, [pc, #176]	; 80188c4 <mode_WallSensorTuning_fast+0x40c>
 8018816:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801881a:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801881e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80188c8 <mode_WallSensorTuning_fast+0x410>
 8018822:	f7eb fdf9 	bl	8004418 <straight_table2>

		break;
 8018826:	e090      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8018828:	4b14      	ldr	r3, [pc, #80]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 801882a:	2207      	movs	r2, #7
 801882c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801882e:	2303      	movs	r3, #3
 8018830:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8018832:	68f8      	ldr	r0, [r7, #12]
 8018834:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80188c0 <mode_WallSensorTuning_fast+0x408>
 8018838:	eddf 1a24 	vldr	s3, [pc, #144]	; 80188cc <mode_WallSensorTuning_fast+0x414>
 801883c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 8018840:	eddf 0a12 	vldr	s1, [pc, #72]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 8018844:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80188d0 <mode_WallSensorTuning_fast+0x418>
 8018848:	f7eb fde6 	bl	8004418 <straight_table2>
		break;
 801884c:	e07d      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 801884e:	4b0b      	ldr	r3, [pc, #44]	; (801887c <mode_WallSensorTuning_fast+0x3c4>)
 8018850:	2208      	movs	r2, #8
 8018852:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8018854:	2303      	movs	r3, #3
 8018856:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8018858:	68f8      	ldr	r0, [r7, #12]
 801885a:	ed9f 2a19 	vldr	s4, [pc, #100]	; 80188c0 <mode_WallSensorTuning_fast+0x408>
 801885e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80188cc <mode_WallSensorTuning_fast+0x414>
 8018862:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 8018866:	eddf 0a09 	vldr	s1, [pc, #36]	; 801888c <mode_WallSensorTuning_fast+0x3d4>
 801886a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80188d4 <mode_WallSensorTuning_fast+0x41c>
 801886e:	f7eb fdd3 	bl	8004418 <straight_table2>
		break;
 8018872:	e06a      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
 8018874:	3f7d70a4 	.word	0x3f7d70a4
 8018878:	20000268 	.word	0x20000268
 801887c:	2000f284 	.word	0x2000f284
 8018880:	20000814 	.word	0x20000814
 8018884:	46bb8000 	.word	0x46bb8000
 8018888:	459c4000 	.word	0x459c4000
 801888c:	00000000 	.word	0x00000000
 8018890:	44e39000 	.word	0x44e39000
 8018894:	461c4000 	.word	0x461c4000
 8018898:	447a0000 	.word	0x447a0000
 801889c:	42cd0000 	.word	0x42cd0000
 80188a0:	41b40000 	.word	0x41b40000
 80188a4:	42e10000 	.word	0x42e10000
 80188a8:	44960000 	.word	0x44960000
 80188ac:	464b2000 	.word	0x464b2000
 80188b0:	44bb8000 	.word	0x44bb8000
 80188b4:	4321c77b 	.word	0x4321c77b
 80188b8:	41fe8ef6 	.word	0x41fe8ef6
 80188bc:	42beeb39 	.word	0x42beeb39
 80188c0:	469c4000 	.word	0x469c4000
 80188c4:	44fa0000 	.word	0x44fa0000
 80188c8:	445ebd17 	.word	0x445ebd17
 80188cc:	455ac000 	.word	0x455ac000
 80188d0:	443eeb39 	.word	0x443eeb39
 80188d4:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 80188d8:	4b39      	ldr	r3, [pc, #228]	; (80189c0 <mode_WallSensorTuning_fast+0x508>)
 80188da:	220a      	movs	r2, #10
 80188dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80188de:	2303      	movs	r3, #3
 80188e0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 80188e2:	68f8      	ldr	r0, [r7, #12]
 80188e4:	ed9f 2a37 	vldr	s4, [pc, #220]	; 80189c4 <mode_WallSensorTuning_fast+0x50c>
 80188e8:	eddf 1a37 	vldr	s3, [pc, #220]	; 80189c8 <mode_WallSensorTuning_fast+0x510>
 80188ec:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 80188f0:	eddf 0a36 	vldr	s1, [pc, #216]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 80188f4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80189d0 <mode_WallSensorTuning_fast+0x518>
 80188f8:	f7eb fd8e 	bl	8004418 <straight_table2>
		break;
 80188fc:	e025      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 80188fe:	4b30      	ldr	r3, [pc, #192]	; (80189c0 <mode_WallSensorTuning_fast+0x508>)
 8018900:	220b      	movs	r2, #11
 8018902:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8018904:	2303      	movs	r3, #3
 8018906:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8018908:	68f8      	ldr	r0, [r7, #12]
 801890a:	ed9f 2a32 	vldr	s4, [pc, #200]	; 80189d4 <mode_WallSensorTuning_fast+0x51c>
 801890e:	eddf 1a32 	vldr	s3, [pc, #200]	; 80189d8 <mode_WallSensorTuning_fast+0x520>
 8018912:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 8018916:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 801891a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80189d0 <mode_WallSensorTuning_fast+0x518>
 801891e:	f7eb fd7b 	bl	8004418 <straight_table2>
		break;
 8018922:	e012      	b.n	801894a <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8018924:	4b26      	ldr	r3, [pc, #152]	; (80189c0 <mode_WallSensorTuning_fast+0x508>)
 8018926:	220c      	movs	r2, #12
 8018928:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801892a:	2303      	movs	r3, #3
 801892c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801892e:	68f8      	ldr	r0, [r7, #12]
 8018930:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80189d4 <mode_WallSensorTuning_fast+0x51c>
 8018934:	eddf 1a28 	vldr	s3, [pc, #160]	; 80189d8 <mode_WallSensorTuning_fast+0x520>
 8018938:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 801893c:	eddf 0a23 	vldr	s1, [pc, #140]	; 80189cc <mode_WallSensorTuning_fast+0x514>
 8018940:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80189d0 <mode_WallSensorTuning_fast+0x518>
 8018944:	f7eb fd68 	bl	8004418 <straight_table2>
		break;
 8018948:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 801894a:	4b1d      	ldr	r3, [pc, #116]	; (80189c0 <mode_WallSensorTuning_fast+0x508>)
 801894c:	2200      	movs	r2, #0
 801894e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8018950:	2003      	movs	r0, #3
 8018952:	f7f0 fa4b 	bl	8008dec <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8018956:	2003      	movs	r0, #3
 8018958:	f7f0 fa20 	bl	8008d9c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801895c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8018960:	f7f0 fd42 	bl	80093e8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8018964:	f7f0 faa4 	bl	8008eb0 <pl_FunMotor_stop>
	record_mode=0;
 8018968:	4b15      	ldr	r3, [pc, #84]	; (80189c0 <mode_WallSensorTuning_fast+0x508>)
 801896a:	2200      	movs	r2, #0
 801896c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 801896e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8018972:	f7f0 fd39 	bl	80093e8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8018976:	2000      	movs	r0, #0
 8018978:	f7f0 fa06 	bl	8008d88 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801897c:	e002      	b.n	8018984 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 801897e:	2001      	movs	r0, #1
 8018980:	f002 f858 	bl	801aa34 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8018984:	4b15      	ldr	r3, [pc, #84]	; (80189dc <mode_WallSensorTuning_fast+0x524>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801898c:	ddf7      	ble.n	801897e <mode_WallSensorTuning_fast+0x4c6>
 801898e:	4b13      	ldr	r3, [pc, #76]	; (80189dc <mode_WallSensorTuning_fast+0x524>)
 8018990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018994:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8018998:	ddf1      	ble.n	801897e <mode_WallSensorTuning_fast+0x4c6>
 801899a:	4b10      	ldr	r3, [pc, #64]	; (80189dc <mode_WallSensorTuning_fast+0x524>)
 801899c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80189a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80189a4:	ddeb      	ble.n	801897e <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 80189a6:	2001      	movs	r0, #1
 80189a8:	f7ef fd5e 	bl	8008468 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80189ac:	2001      	movs	r0, #1
 80189ae:	f7ef fd6d 	bl	800848c <pl_l_blue_LED>
	record_print();
 80189b2:	f000 f871 	bl	8018a98 <record_print>



}
 80189b6:	bf00      	nop
 80189b8:	3710      	adds	r7, #16
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	2000f284 	.word	0x2000f284
 80189c4:	469c4000 	.word	0x469c4000
 80189c8:	455ac000 	.word	0x455ac000
 80189cc:	00000000 	.word	0x00000000
 80189d0:	443eeb39 	.word	0x443eeb39
 80189d4:	466a6000 	.word	0x466a6000
 80189d8:	453b8000 	.word	0x453b8000
 80189dc:	200002bc 	.word	0x200002bc

080189e0 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 80189e0:	b480      	push	{r7}
 80189e2:	af00      	add	r7, sp, #0
	record_mode = 0;
 80189e4:	4b06      	ldr	r3, [pc, #24]	; (8018a00 <record_reset+0x20>)
 80189e6:	2200      	movs	r2, #0
 80189e8:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 80189ea:	4b06      	ldr	r3, [pc, #24]	; (8018a04 <record_reset+0x24>)
 80189ec:	2200      	movs	r2, #0
 80189ee:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 80189f0:	4b05      	ldr	r3, [pc, #20]	; (8018a08 <record_reset+0x28>)
 80189f2:	2200      	movs	r2, #0
 80189f4:	701a      	strb	r2, [r3, #0]
}
 80189f6:	bf00      	nop
 80189f8:	46bd      	mov	sp, r7
 80189fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fe:	4770      	bx	lr
 8018a00:	2000f284 	.word	0x2000f284
 8018a04:	2000f288 	.word	0x2000f288
 8018a08:	2000f290 	.word	0x2000f290

08018a0c <record_data>:

void record_data(float *input_record_data, int numlen) {
 8018a0c:	b490      	push	{r4, r7}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
 8018a14:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8018a16:	2300      	movs	r3, #0
 8018a18:	60fb      	str	r3, [r7, #12]
 8018a1a:	e013      	b.n	8018a44 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	009b      	lsls	r3, r3, #2
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8018a24:	4b18      	ldr	r3, [pc, #96]	; (8018a88 <record_data+0x7c>)
 8018a26:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8018a28:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8018a2a:	4818      	ldr	r0, [pc, #96]	; (8018a8c <record_data+0x80>)
 8018a2c:	68f9      	ldr	r1, [r7, #12]
 8018a2e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8018a32:	fb04 f101 	mul.w	r1, r4, r1
 8018a36:	440b      	add	r3, r1
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	4403      	add	r3, r0
 8018a3c:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	3301      	adds	r3, #1
 8018a42:	60fb      	str	r3, [r7, #12]
 8018a44:	68fa      	ldr	r2, [r7, #12]
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	dbe7      	blt.n	8018a1c <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8018a4c:	4b10      	ldr	r3, [pc, #64]	; (8018a90 <record_data+0x84>)
 8018a4e:	781b      	ldrb	r3, [r3, #0]
 8018a50:	2b01      	cmp	r3, #1
 8018a52:	d103      	bne.n	8018a5c <record_data+0x50>
		record_end_point = record_time;
 8018a54:	4b0c      	ldr	r3, [pc, #48]	; (8018a88 <record_data+0x7c>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	4a0e      	ldr	r2, [pc, #56]	; (8018a94 <record_data+0x88>)
 8018a5a:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8018a5c:	4b0a      	ldr	r3, [pc, #40]	; (8018a88 <record_data+0x7c>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	3301      	adds	r3, #1
 8018a62:	4a09      	ldr	r2, [pc, #36]	; (8018a88 <record_data+0x7c>)
 8018a64:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8018a66:	4b08      	ldr	r3, [pc, #32]	; (8018a88 <record_data+0x7c>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8018a6e:	4293      	cmp	r3, r2
 8018a70:	dd05      	ble.n	8018a7e <record_data+0x72>
		record_time = 0;
 8018a72:	4b05      	ldr	r3, [pc, #20]	; (8018a88 <record_data+0x7c>)
 8018a74:	2200      	movs	r2, #0
 8018a76:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8018a78:	4b05      	ldr	r3, [pc, #20]	; (8018a90 <record_data+0x84>)
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	701a      	strb	r2, [r3, #0]
	}

}
 8018a7e:	bf00      	nop
 8018a80:	3710      	adds	r7, #16
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bc90      	pop	{r4, r7}
 8018a86:	4770      	bx	lr
 8018a88:	2000f288 	.word	0x2000f288
 8018a8c:	20003704 	.word	0x20003704
 8018a90:	2000f290 	.word	0x2000f290
 8018a94:	2000f28c 	.word	0x2000f28c

08018a98 <record_print>:

void record_print(void) {
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b084      	sub	sp, #16
 8018a9c:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8018a9e:	4b3a      	ldr	r3, [pc, #232]	; (8018b88 <record_print+0xf0>)
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d12e      	bne.n	8018b04 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	60fb      	str	r3, [r7, #12]
 8018aaa:	e025      	b.n	8018af8 <record_print+0x60>

			printf("%d", a);
 8018aac:	68f9      	ldr	r1, [r7, #12]
 8018aae:	4837      	ldr	r0, [pc, #220]	; (8018b8c <record_print+0xf4>)
 8018ab0:	f009 ff12 	bl	80228d8 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	607b      	str	r3, [r7, #4]
 8018ab8:	e015      	b.n	8018ae6 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8018aba:	4935      	ldr	r1, [pc, #212]	; (8018b90 <record_print+0xf8>)
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018ac2:	fb03 f202 	mul.w	r2, r3, r2
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	4413      	add	r3, r2
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	440b      	add	r3, r1
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7e7 fd61 	bl	8000598 <__aeabi_f2d>
 8018ad6:	4602      	mov	r2, r0
 8018ad8:	460b      	mov	r3, r1
 8018ada:	482e      	ldr	r0, [pc, #184]	; (8018b94 <record_print+0xfc>)
 8018adc:	f009 fefc 	bl	80228d8 <iprintf>
					record_count++) {
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2b03      	cmp	r3, #3
 8018aea:	dde6      	ble.n	8018aba <record_print+0x22>
			}
			printf("\n");
 8018aec:	200a      	movs	r0, #10
 8018aee:	f009 ff0b 	bl	8022908 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	3301      	adds	r3, #1
 8018af6:	60fb      	str	r3, [r7, #12]
 8018af8:	4b27      	ldr	r3, [pc, #156]	; (8018b98 <record_print+0x100>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	68fa      	ldr	r2, [r7, #12]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	dbd4      	blt.n	8018aac <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8018b02:	e03c      	b.n	8018b7e <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8018b04:	2300      	movs	r3, #0
 8018b06:	60fb      	str	r3, [r7, #12]
 8018b08:	e034      	b.n	8018b74 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8018b0a:	4b24      	ldr	r3, [pc, #144]	; (8018b9c <record_print+0x104>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	3301      	adds	r3, #1
 8018b10:	68fa      	ldr	r2, [r7, #12]
 8018b12:	4413      	add	r3, r2
 8018b14:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8018b1c:	4293      	cmp	r3, r2
 8018b1e:	dd03      	ble.n	8018b28 <record_print+0x90>
				time_index -= max_record_time;
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8018b26:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8018b28:	68f9      	ldr	r1, [r7, #12]
 8018b2a:	4818      	ldr	r0, [pc, #96]	; (8018b8c <record_print+0xf4>)
 8018b2c:	f009 fed4 	bl	80228d8 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8018b30:	2300      	movs	r3, #0
 8018b32:	603b      	str	r3, [r7, #0]
 8018b34:	e015      	b.n	8018b62 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8018b36:	4916      	ldr	r1, [pc, #88]	; (8018b90 <record_print+0xf8>)
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018b3e:	fb03 f202 	mul.w	r2, r3, r2
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	4413      	add	r3, r2
 8018b46:	009b      	lsls	r3, r3, #2
 8018b48:	440b      	add	r3, r1
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7e7 fd23 	bl	8000598 <__aeabi_f2d>
 8018b52:	4602      	mov	r2, r0
 8018b54:	460b      	mov	r3, r1
 8018b56:	480f      	ldr	r0, [pc, #60]	; (8018b94 <record_print+0xfc>)
 8018b58:	f009 febe 	bl	80228d8 <iprintf>
					record_count++) {
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	3301      	adds	r3, #1
 8018b60:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	2b03      	cmp	r3, #3
 8018b66:	dde6      	ble.n	8018b36 <record_print+0x9e>
			printf("\n");
 8018b68:	200a      	movs	r0, #10
 8018b6a:	f009 fecd 	bl	8022908 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	3301      	adds	r3, #1
 8018b72:	60fb      	str	r3, [r7, #12]
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	ddc5      	ble.n	8018b0a <record_print+0x72>
}
 8018b7e:	bf00      	nop
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	2000f290 	.word	0x2000f290
 8018b8c:	0802655c 	.word	0x0802655c
 8018b90:	20003704 	.word	0x20003704
 8018b94:	08026560 	.word	0x08026560
 8018b98:	2000f288 	.word	0x2000f288
 8018b9c:	2000f28c 	.word	0x2000f28c

08018ba0 <interrupt_record>:

void interrupt_record(void) {
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8018ba6:	4baf      	ldr	r3, [pc, #700]	; (8018e64 <interrupt_record+0x2c4>)
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	2b01      	cmp	r3, #1
 8018bac:	d110      	bne.n	8018bd0 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8018bae:	4bae      	ldr	r3, [pc, #696]	; (8018e68 <interrupt_record+0x2c8>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8018bb4:	4bad      	ldr	r3, [pc, #692]	; (8018e6c <interrupt_record+0x2cc>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8018bba:	4bad      	ldr	r3, [pc, #692]	; (8018e70 <interrupt_record+0x2d0>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8018bc0:	4bac      	ldr	r3, [pc, #688]	; (8018e74 <interrupt_record+0x2d4>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8018bc6:	463b      	mov	r3, r7
 8018bc8:	2104      	movs	r1, #4
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7ff ff1e 	bl	8018a0c <record_data>
		}
	if (record_mode == 2) {
 8018bd0:	4ba4      	ldr	r3, [pc, #656]	; (8018e64 <interrupt_record+0x2c4>)
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b02      	cmp	r3, #2
 8018bd6:	d11b      	bne.n	8018c10 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8018bd8:	4ba7      	ldr	r3, [pc, #668]	; (8018e78 <interrupt_record+0x2d8>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8018bde:	4ba7      	ldr	r3, [pc, #668]	; (8018e7c <interrupt_record+0x2dc>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8018be4:	4ba6      	ldr	r3, [pc, #664]	; (8018e80 <interrupt_record+0x2e0>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8018bea:	4ba6      	ldr	r3, [pc, #664]	; (8018e84 <interrupt_record+0x2e4>)
 8018bec:	ed93 7a00 	vldr	s14, [r3]
 8018bf0:	4ba5      	ldr	r3, [pc, #660]	; (8018e88 <interrupt_record+0x2e8>)
 8018bf2:	edd3 7a00 	vldr	s15, [r3]
 8018bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018bfa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018c02:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8018c06:	463b      	mov	r3, r7
 8018c08:	2104      	movs	r1, #4
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ff fefe 	bl	8018a0c <record_data>
		}
	if (record_mode == 3) {
 8018c10:	4b94      	ldr	r3, [pc, #592]	; (8018e64 <interrupt_record+0x2c4>)
 8018c12:	781b      	ldrb	r3, [r3, #0]
 8018c14:	2b03      	cmp	r3, #3
 8018c16:	d126      	bne.n	8018c66 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8018c18:	4b99      	ldr	r3, [pc, #612]	; (8018e80 <interrupt_record+0x2e0>)
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8018c1e:	4b98      	ldr	r3, [pc, #608]	; (8018e80 <interrupt_record+0x2e0>)
 8018c20:	689b      	ldr	r3, [r3, #8]
 8018c22:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedL + fusion_speedR) / 2;
 8018c24:	4b98      	ldr	r3, [pc, #608]	; (8018e88 <interrupt_record+0x2e8>)
 8018c26:	ed93 7a00 	vldr	s14, [r3]
 8018c2a:	4b96      	ldr	r3, [pc, #600]	; (8018e84 <interrupt_record+0x2e4>)
 8018c2c:	edd3 7a00 	vldr	s15, [r3]
 8018c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018c3c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceL + fusion_distanceR) / 2;
 8018c40:	4b92      	ldr	r3, [pc, #584]	; (8018e8c <interrupt_record+0x2ec>)
 8018c42:	ed93 7a00 	vldr	s14, [r3]
 8018c46:	4b92      	ldr	r3, [pc, #584]	; (8018e90 <interrupt_record+0x2f0>)
 8018c48:	edd3 7a00 	vldr	s15, [r3]
 8018c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018c58:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8018c5c:	463b      	mov	r3, r7
 8018c5e:	2104      	movs	r1, #4
 8018c60:	4618      	mov	r0, r3
 8018c62:	f7ff fed3 	bl	8018a0c <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8018c66:	4b7f      	ldr	r3, [pc, #508]	; (8018e64 <interrupt_record+0x2c4>)
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	2b04      	cmp	r3, #4
 8018c6c:	d126      	bne.n	8018cbc <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8018c6e:	4b84      	ldr	r3, [pc, #528]	; (8018e80 <interrupt_record+0x2e0>)
 8018c70:	689b      	ldr	r3, [r3, #8]
 8018c72:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8018c74:	4b7e      	ldr	r3, [pc, #504]	; (8018e70 <interrupt_record+0x2d0>)
 8018c76:	ed93 7a00 	vldr	s14, [r3]
 8018c7a:	4b7e      	ldr	r3, [pc, #504]	; (8018e74 <interrupt_record+0x2d4>)
 8018c7c:	edd3 7a00 	vldr	s15, [r3]
 8018c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018c8c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8018c90:	4b80      	ldr	r3, [pc, #512]	; (8018e94 <interrupt_record+0x2f4>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8018c96:	4b7e      	ldr	r3, [pc, #504]	; (8018e90 <interrupt_record+0x2f0>)
 8018c98:	ed93 7a00 	vldr	s14, [r3]
 8018c9c:	4b7b      	ldr	r3, [pc, #492]	; (8018e8c <interrupt_record+0x2ec>)
 8018c9e:	edd3 7a00 	vldr	s15, [r3]
 8018ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ca6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018cae:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8018cb2:	463b      	mov	r3, r7
 8018cb4:	2104      	movs	r1, #4
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f7ff fea8 	bl	8018a0c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8018cbc:	4b69      	ldr	r3, [pc, #420]	; (8018e64 <interrupt_record+0x2c4>)
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	2b05      	cmp	r3, #5
 8018cc2:	d110      	bne.n	8018ce6 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8018cc4:	4b6e      	ldr	r3, [pc, #440]	; (8018e80 <interrupt_record+0x2e0>)
 8018cc6:	689b      	ldr	r3, [r3, #8]
 8018cc8:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8018cca:	4b69      	ldr	r3, [pc, #420]	; (8018e70 <interrupt_record+0x2d0>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8018cd0:	4b68      	ldr	r3, [pc, #416]	; (8018e74 <interrupt_record+0x2d4>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8018cd6:	4b6f      	ldr	r3, [pc, #444]	; (8018e94 <interrupt_record+0x2f4>)
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8018cdc:	463b      	mov	r3, r7
 8018cde:	2104      	movs	r1, #4
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff fe93 	bl	8018a0c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8018ce6:	4b5f      	ldr	r3, [pc, #380]	; (8018e64 <interrupt_record+0x2c4>)
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	2b05      	cmp	r3, #5
 8018cec:	d110      	bne.n	8018d10 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8018cee:	4b6a      	ldr	r3, [pc, #424]	; (8018e98 <interrupt_record+0x2f8>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8018cf4:	4b5e      	ldr	r3, [pc, #376]	; (8018e70 <interrupt_record+0x2d0>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8018cfa:	4b5e      	ldr	r3, [pc, #376]	; (8018e74 <interrupt_record+0x2d4>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8018d00:	4b64      	ldr	r3, [pc, #400]	; (8018e94 <interrupt_record+0x2f4>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8018d06:	463b      	mov	r3, r7
 8018d08:	2104      	movs	r1, #4
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7ff fe7e 	bl	8018a0c <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8018d10:	4b54      	ldr	r3, [pc, #336]	; (8018e64 <interrupt_record+0x2c4>)
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	2b06      	cmp	r3, #6
 8018d16:	d110      	bne.n	8018d3a <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8018d18:	4b59      	ldr	r3, [pc, #356]	; (8018e80 <interrupt_record+0x2e0>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8018d1e:	4b5f      	ldr	r3, [pc, #380]	; (8018e9c <interrupt_record+0x2fc>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8018d24:	4b5e      	ldr	r3, [pc, #376]	; (8018ea0 <interrupt_record+0x300>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8018d2a:	4b5e      	ldr	r3, [pc, #376]	; (8018ea4 <interrupt_record+0x304>)
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8018d30:	463b      	mov	r3, r7
 8018d32:	2104      	movs	r1, #4
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7ff fe69 	bl	8018a0c <record_data>
			}
	if (record_mode == 7) {
 8018d3a:	4b4a      	ldr	r3, [pc, #296]	; (8018e64 <interrupt_record+0x2c4>)
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	2b07      	cmp	r3, #7
 8018d40:	d125      	bne.n	8018d8e <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8018d42:	4b59      	ldr	r3, [pc, #356]	; (8018ea8 <interrupt_record+0x308>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	ee07 3a90 	vmov	s15, r3
 8018d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d4e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8018d52:	4b56      	ldr	r3, [pc, #344]	; (8018eac <interrupt_record+0x30c>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	ee07 3a90 	vmov	s15, r3
 8018d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d5e:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8018d62:	4b51      	ldr	r3, [pc, #324]	; (8018ea8 <interrupt_record+0x308>)
 8018d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8018d68:	ee07 3a90 	vmov	s15, r3
 8018d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d70:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8018d74:	4b4d      	ldr	r3, [pc, #308]	; (8018eac <interrupt_record+0x30c>)
 8018d76:	691b      	ldr	r3, [r3, #16]
 8018d78:	ee07 3a90 	vmov	s15, r3
 8018d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d80:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8018d84:	463b      	mov	r3, r7
 8018d86:	2104      	movs	r1, #4
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7ff fe3f 	bl	8018a0c <record_data>
		}
	if (record_mode == 8) {
 8018d8e:	4b35      	ldr	r3, [pc, #212]	; (8018e64 <interrupt_record+0x2c4>)
 8018d90:	781b      	ldrb	r3, [r3, #0]
 8018d92:	2b08      	cmp	r3, #8
 8018d94:	d125      	bne.n	8018de2 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8018d96:	4b44      	ldr	r3, [pc, #272]	; (8018ea8 <interrupt_record+0x308>)
 8018d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d9a:	ee07 3a90 	vmov	s15, r3
 8018d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018da2:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8018da6:	4b42      	ldr	r3, [pc, #264]	; (8018eb0 <interrupt_record+0x310>)
 8018da8:	685b      	ldr	r3, [r3, #4]
 8018daa:	ee07 3a90 	vmov	s15, r3
 8018dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018db2:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8018db6:	4b3c      	ldr	r3, [pc, #240]	; (8018ea8 <interrupt_record+0x308>)
 8018db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018dbc:	ee07 3a90 	vmov	s15, r3
 8018dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018dc4:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8018dc8:	4b39      	ldr	r3, [pc, #228]	; (8018eb0 <interrupt_record+0x310>)
 8018dca:	68db      	ldr	r3, [r3, #12]
 8018dcc:	ee07 3a90 	vmov	s15, r3
 8018dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018dd4:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8018dd8:	463b      	mov	r3, r7
 8018dda:	2104      	movs	r1, #4
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7ff fe15 	bl	8018a0c <record_data>
		}
	if (record_mode == 9) { //90
 8018de2:	4b20      	ldr	r3, [pc, #128]	; (8018e64 <interrupt_record+0x2c4>)
 8018de4:	781b      	ldrb	r3, [r3, #0]
 8018de6:	2b09      	cmp	r3, #9
 8018de8:	d11b      	bne.n	8018e22 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8018dea:	4b2f      	ldr	r3, [pc, #188]	; (8018ea8 <interrupt_record+0x308>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	ee07 3a90 	vmov	s15, r3
 8018df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018df6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8018dfa:	4b2b      	ldr	r3, [pc, #172]	; (8018ea8 <interrupt_record+0x308>)
 8018dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8018e00:	ee07 3a90 	vmov	s15, r3
 8018e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e08:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8018e0c:	4b29      	ldr	r3, [pc, #164]	; (8018eb4 <interrupt_record+0x314>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8018e12:	4b29      	ldr	r3, [pc, #164]	; (8018eb8 <interrupt_record+0x318>)
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8018e18:	463b      	mov	r3, r7
 8018e1a:	2104      	movs	r1, #4
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f7ff fdf5 	bl	8018a0c <record_data>
		}
	if (record_mode == 10) { //90
 8018e22:	4b10      	ldr	r3, [pc, #64]	; (8018e64 <interrupt_record+0x2c4>)
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b0a      	cmp	r3, #10
 8018e28:	d148      	bne.n	8018ebc <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8018e2a:	4b1f      	ldr	r3, [pc, #124]	; (8018ea8 <interrupt_record+0x308>)
 8018e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e2e:	ee07 3a90 	vmov	s15, r3
 8018e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e36:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8018e3a:	4b1b      	ldr	r3, [pc, #108]	; (8018ea8 <interrupt_record+0x308>)
 8018e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8018e40:	ee07 3a90 	vmov	s15, r3
 8018e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e48:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8018e4c:	4b19      	ldr	r3, [pc, #100]	; (8018eb4 <interrupt_record+0x314>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8018e52:	4b19      	ldr	r3, [pc, #100]	; (8018eb8 <interrupt_record+0x318>)
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8018e58:	463b      	mov	r3, r7
 8018e5a:	2104      	movs	r1, #4
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7ff fdd5 	bl	8018a0c <record_data>
 8018e62:	e02b      	b.n	8018ebc <interrupt_record+0x31c>
 8018e64:	2000f284 	.word	0x2000f284
 8018e68:	2000022c 	.word	0x2000022c
 8018e6c:	20000228 	.word	0x20000228
 8018e70:	20000224 	.word	0x20000224
 8018e74:	20000220 	.word	0x20000220
 8018e78:	200004e8 	.word	0x200004e8
 8018e7c:	2000026c 	.word	0x2000026c
 8018e80:	200004dc 	.word	0x200004dc
 8018e84:	2000025c 	.word	0x2000025c
 8018e88:	20000258 	.word	0x20000258
 8018e8c:	20000250 	.word	0x20000250
 8018e90:	20000254 	.word	0x20000254
 8018e94:	20000280 	.word	0x20000280
 8018e98:	20000538 	.word	0x20000538
 8018e9c:	20000238 	.word	0x20000238
 8018ea0:	2000023c 	.word	0x2000023c
 8018ea4:	2000027c 	.word	0x2000027c
 8018ea8:	200002bc 	.word	0x200002bc
 8018eac:	2000044c 	.word	0x2000044c
 8018eb0:	20000460 	.word	0x20000460
 8018eb4:	200005ec 	.word	0x200005ec
 8018eb8:	200005e8 	.word	0x200005e8
		}
	if (record_mode == 11) { //距離の比較
 8018ebc:	4b16      	ldr	r3, [pc, #88]	; (8018f18 <interrupt_record+0x378>)
 8018ebe:	781b      	ldrb	r3, [r3, #0]
 8018ec0:	2b0b      	cmp	r3, #11
 8018ec2:	d110      	bne.n	8018ee6 <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8018ec4:	4b15      	ldr	r3, [pc, #84]	; (8018f1c <interrupt_record+0x37c>)
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8018eca:	4b15      	ldr	r3, [pc, #84]	; (8018f20 <interrupt_record+0x380>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8018ed0:	4b14      	ldr	r3, [pc, #80]	; (8018f24 <interrupt_record+0x384>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8018ed6:	4b14      	ldr	r3, [pc, #80]	; (8018f28 <interrupt_record+0x388>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8018edc:	463b      	mov	r3, r7
 8018ede:	2104      	movs	r1, #4
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7ff fd93 	bl	8018a0c <record_data>
			}
	if (record_mode == 12) {
 8018ee6:	4b0c      	ldr	r3, [pc, #48]	; (8018f18 <interrupt_record+0x378>)
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	2b0c      	cmp	r3, #12
 8018eec:	d110      	bne.n	8018f10 <interrupt_record+0x370>
		r_data[0] = turning.velocity;
 8018eee:	4b0f      	ldr	r3, [pc, #60]	; (8018f2c <interrupt_record+0x38c>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8018ef4:	4b0e      	ldr	r3, [pc, #56]	; (8018f30 <interrupt_record+0x390>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	607b      	str	r3, [r7, #4]
		r_data[2] = g_V_L;
 8018efa:	4b0e      	ldr	r3, [pc, #56]	; (8018f34 <interrupt_record+0x394>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	60bb      	str	r3, [r7, #8]
		r_data[3] = g_V_R;
 8018f00:	4b0d      	ldr	r3, [pc, #52]	; (8018f38 <interrupt_record+0x398>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8018f06:	463b      	mov	r3, r7
 8018f08:	2104      	movs	r1, #4
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7ff fd7e 	bl	8018a0c <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8018f10:	bf00      	nop
 8018f12:	3710      	adds	r7, #16
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bd80      	pop	{r7, pc}
 8018f18:	2000f284 	.word	0x2000f284
 8018f1c:	20000228 	.word	0x20000228
 8018f20:	200006e8 	.word	0x200006e8
 8018f24:	2000022c 	.word	0x2000022c
 8018f28:	200006e4 	.word	0x200006e4
 8018f2c:	200004e8 	.word	0x200004e8
 8018f30:	2000026c 	.word	0x2000026c
 8018f34:	20000538 	.word	0x20000538
 8018f38:	2000053c 	.word	0x2000053c

08018f3c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8018f40:	4b1b      	ldr	r3, [pc, #108]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f42:	4a1c      	ldr	r2, [pc, #112]	; (8018fb4 <MX_SPI1_Init+0x78>)
 8018f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8018f46:	4b1a      	ldr	r3, [pc, #104]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8018f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8018f4e:	4b18      	ldr	r3, [pc, #96]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f50:	2200      	movs	r2, #0
 8018f52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8018f54:	4b16      	ldr	r3, [pc, #88]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8018f5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8018f5c:	4b14      	ldr	r3, [pc, #80]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f5e:	2200      	movs	r2, #0
 8018f60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8018f62:	4b13      	ldr	r3, [pc, #76]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f64:	2200      	movs	r2, #0
 8018f66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8018f68:	4b11      	ldr	r3, [pc, #68]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8018f70:	4b0f      	ldr	r3, [pc, #60]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f72:	2210      	movs	r2, #16
 8018f74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8018f76:	4b0e      	ldr	r3, [pc, #56]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f78:	2200      	movs	r2, #0
 8018f7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8018f7c:	4b0c      	ldr	r3, [pc, #48]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f7e:	2200      	movs	r2, #0
 8018f80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018f82:	4b0b      	ldr	r3, [pc, #44]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f84:	2200      	movs	r2, #0
 8018f86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8018f88:	4b09      	ldr	r3, [pc, #36]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f8a:	2207      	movs	r2, #7
 8018f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8018f8e:	4b08      	ldr	r3, [pc, #32]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f90:	2200      	movs	r2, #0
 8018f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8018f94:	4b06      	ldr	r3, [pc, #24]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f96:	2208      	movs	r2, #8
 8018f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8018f9a:	4805      	ldr	r0, [pc, #20]	; (8018fb0 <MX_SPI1_Init+0x74>)
 8018f9c:	f005 ff3e 	bl	801ee1c <HAL_SPI_Init>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d001      	beq.n	8018faa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8018fa6:	f7f2 fd40 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8018faa:	bf00      	nop
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	2000f294 	.word	0x2000f294
 8018fb4:	40013000 	.word	0x40013000

08018fb8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8018fbc:	4b1b      	ldr	r3, [pc, #108]	; (801902c <MX_SPI3_Init+0x74>)
 8018fbe:	4a1c      	ldr	r2, [pc, #112]	; (8019030 <MX_SPI3_Init+0x78>)
 8018fc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8018fc2:	4b1a      	ldr	r3, [pc, #104]	; (801902c <MX_SPI3_Init+0x74>)
 8018fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8018fc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8018fca:	4b18      	ldr	r3, [pc, #96]	; (801902c <MX_SPI3_Init+0x74>)
 8018fcc:	2200      	movs	r2, #0
 8018fce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8018fd0:	4b16      	ldr	r3, [pc, #88]	; (801902c <MX_SPI3_Init+0x74>)
 8018fd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8018fd6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8018fd8:	4b14      	ldr	r3, [pc, #80]	; (801902c <MX_SPI3_Init+0x74>)
 8018fda:	2200      	movs	r2, #0
 8018fdc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8018fde:	4b13      	ldr	r3, [pc, #76]	; (801902c <MX_SPI3_Init+0x74>)
 8018fe0:	2201      	movs	r2, #1
 8018fe2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8018fe4:	4b11      	ldr	r3, [pc, #68]	; (801902c <MX_SPI3_Init+0x74>)
 8018fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018fea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8018fec:	4b0f      	ldr	r3, [pc, #60]	; (801902c <MX_SPI3_Init+0x74>)
 8018fee:	2208      	movs	r2, #8
 8018ff0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8018ff2:	4b0e      	ldr	r3, [pc, #56]	; (801902c <MX_SPI3_Init+0x74>)
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8018ff8:	4b0c      	ldr	r3, [pc, #48]	; (801902c <MX_SPI3_Init+0x74>)
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018ffe:	4b0b      	ldr	r3, [pc, #44]	; (801902c <MX_SPI3_Init+0x74>)
 8019000:	2200      	movs	r2, #0
 8019002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8019004:	4b09      	ldr	r3, [pc, #36]	; (801902c <MX_SPI3_Init+0x74>)
 8019006:	2207      	movs	r2, #7
 8019008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801900a:	4b08      	ldr	r3, [pc, #32]	; (801902c <MX_SPI3_Init+0x74>)
 801900c:	2200      	movs	r2, #0
 801900e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8019010:	4b06      	ldr	r3, [pc, #24]	; (801902c <MX_SPI3_Init+0x74>)
 8019012:	2200      	movs	r2, #0
 8019014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8019016:	4805      	ldr	r0, [pc, #20]	; (801902c <MX_SPI3_Init+0x74>)
 8019018:	f005 ff00 	bl	801ee1c <HAL_SPI_Init>
 801901c:	4603      	mov	r3, r0
 801901e:	2b00      	cmp	r3, #0
 8019020:	d001      	beq.n	8019026 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8019022:	f7f2 fd02 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8019026:	bf00      	nop
 8019028:	bd80      	pop	{r7, pc}
 801902a:	bf00      	nop
 801902c:	2000f2f8 	.word	0x2000f2f8
 8019030:	40003c00 	.word	0x40003c00

08019034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b08c      	sub	sp, #48	; 0x30
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801903c:	f107 031c 	add.w	r3, r7, #28
 8019040:	2200      	movs	r2, #0
 8019042:	601a      	str	r2, [r3, #0]
 8019044:	605a      	str	r2, [r3, #4]
 8019046:	609a      	str	r2, [r3, #8]
 8019048:	60da      	str	r2, [r3, #12]
 801904a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	4a3d      	ldr	r2, [pc, #244]	; (8019148 <HAL_SPI_MspInit+0x114>)
 8019052:	4293      	cmp	r3, r2
 8019054:	d129      	bne.n	80190aa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8019056:	4b3d      	ldr	r3, [pc, #244]	; (801914c <HAL_SPI_MspInit+0x118>)
 8019058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801905a:	4a3c      	ldr	r2, [pc, #240]	; (801914c <HAL_SPI_MspInit+0x118>)
 801905c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019060:	6613      	str	r3, [r2, #96]	; 0x60
 8019062:	4b3a      	ldr	r3, [pc, #232]	; (801914c <HAL_SPI_MspInit+0x118>)
 8019064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801906a:	61bb      	str	r3, [r7, #24]
 801906c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801906e:	4b37      	ldr	r3, [pc, #220]	; (801914c <HAL_SPI_MspInit+0x118>)
 8019070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019072:	4a36      	ldr	r2, [pc, #216]	; (801914c <HAL_SPI_MspInit+0x118>)
 8019074:	f043 0301 	orr.w	r3, r3, #1
 8019078:	64d3      	str	r3, [r2, #76]	; 0x4c
 801907a:	4b34      	ldr	r3, [pc, #208]	; (801914c <HAL_SPI_MspInit+0x118>)
 801907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801907e:	f003 0301 	and.w	r3, r3, #1
 8019082:	617b      	str	r3, [r7, #20]
 8019084:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8019086:	23e0      	movs	r3, #224	; 0xe0
 8019088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801908a:	2302      	movs	r3, #2
 801908c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801908e:	2300      	movs	r3, #0
 8019090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019092:	2300      	movs	r3, #0
 8019094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8019096:	2305      	movs	r3, #5
 8019098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801909a:	f107 031c 	add.w	r3, r7, #28
 801909e:	4619      	mov	r1, r3
 80190a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80190a4:	f004 fd00 	bl	801daa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80190a8:	e049      	b.n	801913e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	4a28      	ldr	r2, [pc, #160]	; (8019150 <HAL_SPI_MspInit+0x11c>)
 80190b0:	4293      	cmp	r3, r2
 80190b2:	d144      	bne.n	801913e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80190b4:	4b25      	ldr	r3, [pc, #148]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190b8:	4a24      	ldr	r2, [pc, #144]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80190be:	6593      	str	r3, [r2, #88]	; 0x58
 80190c0:	4b22      	ldr	r3, [pc, #136]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80190c8:	613b      	str	r3, [r7, #16]
 80190ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80190cc:	4b1f      	ldr	r3, [pc, #124]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190d0:	4a1e      	ldr	r2, [pc, #120]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190d2:	f043 0304 	orr.w	r3, r3, #4
 80190d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80190d8:	4b1c      	ldr	r3, [pc, #112]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190dc:	f003 0304 	and.w	r3, r3, #4
 80190e0:	60fb      	str	r3, [r7, #12]
 80190e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80190e4:	4b19      	ldr	r3, [pc, #100]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190e8:	4a18      	ldr	r2, [pc, #96]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190ea:	f043 0302 	orr.w	r3, r3, #2
 80190ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80190f0:	4b16      	ldr	r3, [pc, #88]	; (801914c <HAL_SPI_MspInit+0x118>)
 80190f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190f4:	f003 0302 	and.w	r3, r3, #2
 80190f8:	60bb      	str	r3, [r7, #8]
 80190fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80190fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8019100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019102:	2302      	movs	r3, #2
 8019104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019106:	2300      	movs	r3, #0
 8019108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801910a:	2300      	movs	r3, #0
 801910c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801910e:	2306      	movs	r3, #6
 8019110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019112:	f107 031c 	add.w	r3, r7, #28
 8019116:	4619      	mov	r1, r3
 8019118:	480e      	ldr	r0, [pc, #56]	; (8019154 <HAL_SPI_MspInit+0x120>)
 801911a:	f004 fcc5 	bl	801daa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801911e:	2320      	movs	r3, #32
 8019120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019122:	2302      	movs	r3, #2
 8019124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019126:	2300      	movs	r3, #0
 8019128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801912a:	2300      	movs	r3, #0
 801912c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801912e:	2306      	movs	r3, #6
 8019130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019132:	f107 031c 	add.w	r3, r7, #28
 8019136:	4619      	mov	r1, r3
 8019138:	4807      	ldr	r0, [pc, #28]	; (8019158 <HAL_SPI_MspInit+0x124>)
 801913a:	f004 fcb5 	bl	801daa8 <HAL_GPIO_Init>
}
 801913e:	bf00      	nop
 8019140:	3730      	adds	r7, #48	; 0x30
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
 8019146:	bf00      	nop
 8019148:	40013000 	.word	0x40013000
 801914c:	40021000 	.word	0x40021000
 8019150:	40003c00 	.word	0x40003c00
 8019154:	48000800 	.word	0x48000800
 8019158:	48000400 	.word	0x48000400

0801915c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b082      	sub	sp, #8
 8019160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019162:	4b0f      	ldr	r3, [pc, #60]	; (80191a0 <HAL_MspInit+0x44>)
 8019164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019166:	4a0e      	ldr	r2, [pc, #56]	; (80191a0 <HAL_MspInit+0x44>)
 8019168:	f043 0301 	orr.w	r3, r3, #1
 801916c:	6613      	str	r3, [r2, #96]	; 0x60
 801916e:	4b0c      	ldr	r3, [pc, #48]	; (80191a0 <HAL_MspInit+0x44>)
 8019170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019172:	f003 0301 	and.w	r3, r3, #1
 8019176:	607b      	str	r3, [r7, #4]
 8019178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801917a:	4b09      	ldr	r3, [pc, #36]	; (80191a0 <HAL_MspInit+0x44>)
 801917c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801917e:	4a08      	ldr	r2, [pc, #32]	; (80191a0 <HAL_MspInit+0x44>)
 8019180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019184:	6593      	str	r3, [r2, #88]	; 0x58
 8019186:	4b06      	ldr	r3, [pc, #24]	; (80191a0 <HAL_MspInit+0x44>)
 8019188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801918a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801918e:	603b      	str	r3, [r7, #0]
 8019190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8019192:	f004 fec7 	bl	801df24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8019196:	bf00      	nop
 8019198:	3708      	adds	r7, #8
 801919a:	46bd      	mov	sp, r7
 801919c:	bd80      	pop	{r7, pc}
 801919e:	bf00      	nop
 80191a0:	40021000 	.word	0x40021000

080191a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80191a4:	b480      	push	{r7}
 80191a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80191a8:	e7fe      	b.n	80191a8 <NMI_Handler+0x4>

080191aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80191aa:	b480      	push	{r7}
 80191ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80191ae:	e7fe      	b.n	80191ae <HardFault_Handler+0x4>

080191b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80191b0:	b480      	push	{r7}
 80191b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80191b4:	e7fe      	b.n	80191b4 <MemManage_Handler+0x4>

080191b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80191b6:	b480      	push	{r7}
 80191b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80191ba:	e7fe      	b.n	80191ba <BusFault_Handler+0x4>

080191bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80191bc:	b480      	push	{r7}
 80191be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80191c0:	e7fe      	b.n	80191c0 <UsageFault_Handler+0x4>

080191c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80191c2:	b480      	push	{r7}
 80191c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80191c6:	bf00      	nop
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr

080191d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80191d0:	b480      	push	{r7}
 80191d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80191d4:	bf00      	nop
 80191d6:	46bd      	mov	sp, r7
 80191d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191dc:	4770      	bx	lr

080191de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80191de:	b480      	push	{r7}
 80191e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80191e2:	bf00      	nop
 80191e4:	46bd      	mov	sp, r7
 80191e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ea:	4770      	bx	lr

080191ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80191f0:	f001 fc02 	bl	801a9f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80191f4:	bf00      	nop
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80191fc:	4802      	ldr	r0, [pc, #8]	; (8019208 <DMA1_Channel1_IRQHandler+0x10>)
 80191fe:	f004 f89b 	bl	801d338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8019202:	bf00      	nop
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	200007ac 	.word	0x200007ac

0801920c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8019210:	4802      	ldr	r0, [pc, #8]	; (801921c <ADC1_2_IRQHandler+0x10>)
 8019212:	f002 fba1 	bl	801b958 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8019216:	bf00      	nop
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	20000740 	.word	0x20000740

08019220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8019224:	480d      	ldr	r0, [pc, #52]	; (801925c <TIM6_DAC_IRQHandler+0x3c>)
 8019226:	f006 ffd9 	bl	80201dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801922a:	f7f0 f841 	bl	80092b0 <interrupt_timer>
  interupt_calSensor();
 801922e:	f7e8 ff89 	bl	8002144 <interupt_calSensor>
  ICM20602_DataUpdate();
 8019232:	f7ef fd5f 	bl	8008cf4 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8019236:	f7e8 fd7b 	bl	8001d30 <interrupt_calGyro>
  AS5047_DataUpdate();
 801923a:	f7ef fa2b 	bl	8008694 <AS5047_DataUpdate>
  interupt_calEncoder();
 801923e:	f7e7 ff2b 	bl	8001098 <interupt_calEncoder>
  interupt_calFusion();
 8019242:	f7e8 fb7d 	bl	8001940 <interupt_calFusion>
  interrupt_WallCut();
 8019246:	f7ee f98f 	bl	8007568 <interrupt_WallCut>
  interupt_DriveMotor();
 801924a:	f7e9 f8ed 	bl	8002428 <interupt_DriveMotor>

  interrupt_FailSafe();
 801924e:	f7f2 f93f 	bl	800b4d0 <interrupt_FailSafe>
  interrupt_record();
 8019252:	f7ff fca5 	bl	8018ba0 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8019256:	bf00      	nop
 8019258:	bd80      	pop	{r7, pc}
 801925a:	bf00      	nop
 801925c:	2000f360 	.word	0x2000f360

08019260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8019260:	b480      	push	{r7}
 8019262:	af00      	add	r7, sp, #0
	return 1;
 8019264:	2301      	movs	r3, #1
}
 8019266:	4618      	mov	r0, r3
 8019268:	46bd      	mov	sp, r7
 801926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926e:	4770      	bx	lr

08019270 <_kill>:

int _kill(int pid, int sig)
{
 8019270:	b580      	push	{r7, lr}
 8019272:	b082      	sub	sp, #8
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801927a:	f008 fe83 	bl	8021f84 <__errno>
 801927e:	4603      	mov	r3, r0
 8019280:	2216      	movs	r2, #22
 8019282:	601a      	str	r2, [r3, #0]
	return -1;
 8019284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019288:	4618      	mov	r0, r3
 801928a:	3708      	adds	r7, #8
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}

08019290 <_exit>:

void _exit (int status)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b082      	sub	sp, #8
 8019294:	af00      	add	r7, sp, #0
 8019296:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8019298:	f04f 31ff 	mov.w	r1, #4294967295
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7ff ffe7 	bl	8019270 <_kill>
	while (1) {}		/* Make sure we hang here */
 80192a2:	e7fe      	b.n	80192a2 <_exit+0x12>

080192a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b086      	sub	sp, #24
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	60f8      	str	r0, [r7, #12]
 80192ac:	60b9      	str	r1, [r7, #8]
 80192ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80192b0:	2300      	movs	r3, #0
 80192b2:	617b      	str	r3, [r7, #20]
 80192b4:	e00a      	b.n	80192cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80192b6:	f3af 8000 	nop.w
 80192ba:	4601      	mov	r1, r0
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	1c5a      	adds	r2, r3, #1
 80192c0:	60ba      	str	r2, [r7, #8]
 80192c2:	b2ca      	uxtb	r2, r1
 80192c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80192c6:	697b      	ldr	r3, [r7, #20]
 80192c8:	3301      	adds	r3, #1
 80192ca:	617b      	str	r3, [r7, #20]
 80192cc:	697a      	ldr	r2, [r7, #20]
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	dbf0      	blt.n	80192b6 <_read+0x12>
	}

return len;
 80192d4:	687b      	ldr	r3, [r7, #4]
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	3718      	adds	r7, #24
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
	...

080192e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b086      	sub	sp, #24
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	60f8      	str	r0, [r7, #12]
 80192e8:	60b9      	str	r1, [r7, #8]
 80192ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80192ec:	2300      	movs	r3, #0
 80192ee:	617b      	str	r3, [r7, #20]
 80192f0:	e00a      	b.n	8019308 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 80192f2:	68b9      	ldr	r1, [r7, #8]
 80192f4:	1c4b      	adds	r3, r1, #1
 80192f6:	60bb      	str	r3, [r7, #8]
 80192f8:	2301      	movs	r3, #1
 80192fa:	2201      	movs	r2, #1
 80192fc:	4807      	ldr	r0, [pc, #28]	; (801931c <_write+0x3c>)
 80192fe:	f007 fff7 	bl	80212f0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	3301      	adds	r3, #1
 8019306:	617b      	str	r3, [r7, #20]
 8019308:	697a      	ldr	r2, [r7, #20]
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	429a      	cmp	r2, r3
 801930e:	dbf0      	blt.n	80192f2 <_write+0x12>
	}
	return len;
 8019310:	687b      	ldr	r3, [r7, #4]
}
 8019312:	4618      	mov	r0, r3
 8019314:	3718      	adds	r7, #24
 8019316:	46bd      	mov	sp, r7
 8019318:	bd80      	pop	{r7, pc}
 801931a:	bf00      	nop
 801931c:	2000fd3c 	.word	0x2000fd3c

08019320 <_close>:

int _close(int file)
{
 8019320:	b480      	push	{r7}
 8019322:	b083      	sub	sp, #12
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
	return -1;
 8019328:	f04f 33ff 	mov.w	r3, #4294967295
}
 801932c:	4618      	mov	r0, r3
 801932e:	370c      	adds	r7, #12
 8019330:	46bd      	mov	sp, r7
 8019332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019336:	4770      	bx	lr

08019338 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8019338:	b480      	push	{r7}
 801933a:	b083      	sub	sp, #12
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019348:	605a      	str	r2, [r3, #4]
	return 0;
 801934a:	2300      	movs	r3, #0
}
 801934c:	4618      	mov	r0, r3
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <_isatty>:

int _isatty(int file)
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
	return 1;
 8019360:	2301      	movs	r3, #1
}
 8019362:	4618      	mov	r0, r3
 8019364:	370c      	adds	r7, #12
 8019366:	46bd      	mov	sp, r7
 8019368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936c:	4770      	bx	lr

0801936e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801936e:	b480      	push	{r7}
 8019370:	b085      	sub	sp, #20
 8019372:	af00      	add	r7, sp, #0
 8019374:	60f8      	str	r0, [r7, #12]
 8019376:	60b9      	str	r1, [r7, #8]
 8019378:	607a      	str	r2, [r7, #4]
	return 0;
 801937a:	2300      	movs	r3, #0
}
 801937c:	4618      	mov	r0, r3
 801937e:	3714      	adds	r7, #20
 8019380:	46bd      	mov	sp, r7
 8019382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019386:	4770      	bx	lr

08019388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b086      	sub	sp, #24
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8019390:	4a14      	ldr	r2, [pc, #80]	; (80193e4 <_sbrk+0x5c>)
 8019392:	4b15      	ldr	r3, [pc, #84]	; (80193e8 <_sbrk+0x60>)
 8019394:	1ad3      	subs	r3, r2, r3
 8019396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801939c:	4b13      	ldr	r3, [pc, #76]	; (80193ec <_sbrk+0x64>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d102      	bne.n	80193aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80193a4:	4b11      	ldr	r3, [pc, #68]	; (80193ec <_sbrk+0x64>)
 80193a6:	4a12      	ldr	r2, [pc, #72]	; (80193f0 <_sbrk+0x68>)
 80193a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80193aa:	4b10      	ldr	r3, [pc, #64]	; (80193ec <_sbrk+0x64>)
 80193ac:	681a      	ldr	r2, [r3, #0]
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	4413      	add	r3, r2
 80193b2:	693a      	ldr	r2, [r7, #16]
 80193b4:	429a      	cmp	r2, r3
 80193b6:	d207      	bcs.n	80193c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80193b8:	f008 fde4 	bl	8021f84 <__errno>
 80193bc:	4603      	mov	r3, r0
 80193be:	220c      	movs	r2, #12
 80193c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80193c2:	f04f 33ff 	mov.w	r3, #4294967295
 80193c6:	e009      	b.n	80193dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80193c8:	4b08      	ldr	r3, [pc, #32]	; (80193ec <_sbrk+0x64>)
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80193ce:	4b07      	ldr	r3, [pc, #28]	; (80193ec <_sbrk+0x64>)
 80193d0:	681a      	ldr	r2, [r3, #0]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	4413      	add	r3, r2
 80193d6:	4a05      	ldr	r2, [pc, #20]	; (80193ec <_sbrk+0x64>)
 80193d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80193da:	68fb      	ldr	r3, [r7, #12]
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3718      	adds	r7, #24
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	2001c000 	.word	0x2001c000
 80193e8:	00000400 	.word	0x00000400
 80193ec:	2000f35c 	.word	0x2000f35c
 80193f0:	2000fde0 	.word	0x2000fde0

080193f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80193f4:	b480      	push	{r7}
 80193f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80193f8:	4b06      	ldr	r3, [pc, #24]	; (8019414 <SystemInit+0x20>)
 80193fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80193fe:	4a05      	ldr	r2, [pc, #20]	; (8019414 <SystemInit+0x20>)
 8019400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8019408:	bf00      	nop
 801940a:	46bd      	mov	sp, r7
 801940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019410:	4770      	bx	lr
 8019412:	bf00      	nop
 8019414:	e000ed00 	.word	0xe000ed00

08019418 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801941e:	1d3b      	adds	r3, r7, #4
 8019420:	2200      	movs	r2, #0
 8019422:	601a      	str	r2, [r3, #0]
 8019424:	605a      	str	r2, [r3, #4]
 8019426:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8019428:	4b14      	ldr	r3, [pc, #80]	; (801947c <MX_TIM6_Init+0x64>)
 801942a:	4a15      	ldr	r2, [pc, #84]	; (8019480 <MX_TIM6_Init+0x68>)
 801942c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801942e:	4b13      	ldr	r3, [pc, #76]	; (801947c <MX_TIM6_Init+0x64>)
 8019430:	2254      	movs	r2, #84	; 0x54
 8019432:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019434:	4b11      	ldr	r3, [pc, #68]	; (801947c <MX_TIM6_Init+0x64>)
 8019436:	2200      	movs	r2, #0
 8019438:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801943a:	4b10      	ldr	r3, [pc, #64]	; (801947c <MX_TIM6_Init+0x64>)
 801943c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8019440:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8019442:	4b0e      	ldr	r3, [pc, #56]	; (801947c <MX_TIM6_Init+0x64>)
 8019444:	2200      	movs	r2, #0
 8019446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8019448:	480c      	ldr	r0, [pc, #48]	; (801947c <MX_TIM6_Init+0x64>)
 801944a:	f006 fbff 	bl	801fc4c <HAL_TIM_Base_Init>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d001      	beq.n	8019458 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8019454:	f7f2 fae9 	bl	800ba2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8019458:	2300      	movs	r3, #0
 801945a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801945c:	2300      	movs	r3, #0
 801945e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8019460:	1d3b      	adds	r3, r7, #4
 8019462:	4619      	mov	r1, r3
 8019464:	4805      	ldr	r0, [pc, #20]	; (801947c <MX_TIM6_Init+0x64>)
 8019466:	f007 fd6d 	bl	8020f44 <HAL_TIMEx_MasterConfigSynchronization>
 801946a:	4603      	mov	r3, r0
 801946c:	2b00      	cmp	r3, #0
 801946e:	d001      	beq.n	8019474 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8019470:	f7f2 fadb 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8019474:	bf00      	nop
 8019476:	3710      	adds	r7, #16
 8019478:	46bd      	mov	sp, r7
 801947a:	bd80      	pop	{r7, pc}
 801947c:	2000f360 	.word	0x2000f360
 8019480:	40001000 	.word	0x40001000

08019484 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b098      	sub	sp, #96	; 0x60
 8019488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801948a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801948e:	2200      	movs	r2, #0
 8019490:	601a      	str	r2, [r3, #0]
 8019492:	605a      	str	r2, [r3, #4]
 8019494:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8019496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801949a:	2200      	movs	r2, #0
 801949c:	601a      	str	r2, [r3, #0]
 801949e:	605a      	str	r2, [r3, #4]
 80194a0:	609a      	str	r2, [r3, #8]
 80194a2:	60da      	str	r2, [r3, #12]
 80194a4:	611a      	str	r2, [r3, #16]
 80194a6:	615a      	str	r2, [r3, #20]
 80194a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80194aa:	1d3b      	adds	r3, r7, #4
 80194ac:	2234      	movs	r2, #52	; 0x34
 80194ae:	2100      	movs	r1, #0
 80194b0:	4618      	mov	r0, r3
 80194b2:	f008 fd9f 	bl	8021ff4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80194b6:	4b41      	ldr	r3, [pc, #260]	; (80195bc <MX_TIM8_Init+0x138>)
 80194b8:	4a41      	ldr	r2, [pc, #260]	; (80195c0 <MX_TIM8_Init+0x13c>)
 80194ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80194bc:	4b3f      	ldr	r3, [pc, #252]	; (80195bc <MX_TIM8_Init+0x138>)
 80194be:	2201      	movs	r2, #1
 80194c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80194c2:	4b3e      	ldr	r3, [pc, #248]	; (80195bc <MX_TIM8_Init+0x138>)
 80194c4:	2200      	movs	r2, #0
 80194c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80194c8:	4b3c      	ldr	r3, [pc, #240]	; (80195bc <MX_TIM8_Init+0x138>)
 80194ca:	f240 628f 	movw	r2, #1679	; 0x68f
 80194ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80194d0:	4b3a      	ldr	r3, [pc, #232]	; (80195bc <MX_TIM8_Init+0x138>)
 80194d2:	2200      	movs	r2, #0
 80194d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80194d6:	4b39      	ldr	r3, [pc, #228]	; (80195bc <MX_TIM8_Init+0x138>)
 80194d8:	2200      	movs	r2, #0
 80194da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80194dc:	4b37      	ldr	r3, [pc, #220]	; (80195bc <MX_TIM8_Init+0x138>)
 80194de:	2200      	movs	r2, #0
 80194e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80194e2:	4836      	ldr	r0, [pc, #216]	; (80195bc <MX_TIM8_Init+0x138>)
 80194e4:	f006 fc7a 	bl	801fddc <HAL_TIM_PWM_Init>
 80194e8:	4603      	mov	r3, r0
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d001      	beq.n	80194f2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80194ee:	f7f2 fa9c 	bl	800ba2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80194f2:	2300      	movs	r3, #0
 80194f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80194f6:	2300      	movs	r3, #0
 80194f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80194fa:	2300      	movs	r3, #0
 80194fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80194fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019502:	4619      	mov	r1, r3
 8019504:	482d      	ldr	r0, [pc, #180]	; (80195bc <MX_TIM8_Init+0x138>)
 8019506:	f007 fd1d 	bl	8020f44 <HAL_TIMEx_MasterConfigSynchronization>
 801950a:	4603      	mov	r3, r0
 801950c:	2b00      	cmp	r3, #0
 801950e:	d001      	beq.n	8019514 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8019510:	f7f2 fa8b 	bl	800ba2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8019514:	2360      	movs	r3, #96	; 0x60
 8019516:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8019518:	f240 13a3 	movw	r3, #419	; 0x1a3
 801951c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801951e:	2300      	movs	r3, #0
 8019520:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8019522:	2300      	movs	r3, #0
 8019524:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8019526:	2300      	movs	r3, #0
 8019528:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801952a:	2300      	movs	r3, #0
 801952c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801952e:	2300      	movs	r3, #0
 8019530:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8019532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019536:	2200      	movs	r2, #0
 8019538:	4619      	mov	r1, r3
 801953a:	4820      	ldr	r0, [pc, #128]	; (80195bc <MX_TIM8_Init+0x138>)
 801953c:	f006 ffce 	bl	80204dc <HAL_TIM_PWM_ConfigChannel>
 8019540:	4603      	mov	r3, r0
 8019542:	2b00      	cmp	r3, #0
 8019544:	d001      	beq.n	801954a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8019546:	f7f2 fa70 	bl	800ba2a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801954a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801954e:	2208      	movs	r2, #8
 8019550:	4619      	mov	r1, r3
 8019552:	481a      	ldr	r0, [pc, #104]	; (80195bc <MX_TIM8_Init+0x138>)
 8019554:	f006 ffc2 	bl	80204dc <HAL_TIM_PWM_ConfigChannel>
 8019558:	4603      	mov	r3, r0
 801955a:	2b00      	cmp	r3, #0
 801955c:	d001      	beq.n	8019562 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 801955e:	f7f2 fa64 	bl	800ba2a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8019562:	2300      	movs	r3, #0
 8019564:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8019566:	2300      	movs	r3, #0
 8019568:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801956a:	2300      	movs	r3, #0
 801956c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801956e:	2300      	movs	r3, #0
 8019570:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8019572:	2300      	movs	r3, #0
 8019574:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8019576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801957a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801957c:	2300      	movs	r3, #0
 801957e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8019580:	2300      	movs	r3, #0
 8019582:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8019584:	2300      	movs	r3, #0
 8019586:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8019588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801958c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801958e:	2300      	movs	r3, #0
 8019590:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8019592:	2300      	movs	r3, #0
 8019594:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8019596:	2300      	movs	r3, #0
 8019598:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801959a:	1d3b      	adds	r3, r7, #4
 801959c:	4619      	mov	r1, r3
 801959e:	4807      	ldr	r0, [pc, #28]	; (80195bc <MX_TIM8_Init+0x138>)
 80195a0:	f007 fd5e 	bl	8021060 <HAL_TIMEx_ConfigBreakDeadTime>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d001      	beq.n	80195ae <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80195aa:	f7f2 fa3e 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80195ae:	4803      	ldr	r0, [pc, #12]	; (80195bc <MX_TIM8_Init+0x138>)
 80195b0:	f000 f8da 	bl	8019768 <HAL_TIM_MspPostInit>

}
 80195b4:	bf00      	nop
 80195b6:	3760      	adds	r7, #96	; 0x60
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}
 80195bc:	2000f3ac 	.word	0x2000f3ac
 80195c0:	40013400 	.word	0x40013400

080195c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b094      	sub	sp, #80	; 0x50
 80195c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80195ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80195ce:	2200      	movs	r2, #0
 80195d0:	601a      	str	r2, [r3, #0]
 80195d2:	605a      	str	r2, [r3, #4]
 80195d4:	609a      	str	r2, [r3, #8]
 80195d6:	60da      	str	r2, [r3, #12]
 80195d8:	611a      	str	r2, [r3, #16]
 80195da:	615a      	str	r2, [r3, #20]
 80195dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80195de:	463b      	mov	r3, r7
 80195e0:	2234      	movs	r2, #52	; 0x34
 80195e2:	2100      	movs	r1, #0
 80195e4:	4618      	mov	r0, r3
 80195e6:	f008 fd05 	bl	8021ff4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80195ea:	4b30      	ldr	r3, [pc, #192]	; (80196ac <MX_TIM16_Init+0xe8>)
 80195ec:	4a30      	ldr	r2, [pc, #192]	; (80196b0 <MX_TIM16_Init+0xec>)
 80195ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 80195f0:	4b2e      	ldr	r3, [pc, #184]	; (80196ac <MX_TIM16_Init+0xe8>)
 80195f2:	2201      	movs	r2, #1
 80195f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80195f6:	4b2d      	ldr	r3, [pc, #180]	; (80196ac <MX_TIM16_Init+0xe8>)
 80195f8:	2200      	movs	r2, #0
 80195fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80195fc:	4b2b      	ldr	r3, [pc, #172]	; (80196ac <MX_TIM16_Init+0xe8>)
 80195fe:	2264      	movs	r2, #100	; 0x64
 8019600:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019602:	4b2a      	ldr	r3, [pc, #168]	; (80196ac <MX_TIM16_Init+0xe8>)
 8019604:	2200      	movs	r2, #0
 8019606:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8019608:	4b28      	ldr	r3, [pc, #160]	; (80196ac <MX_TIM16_Init+0xe8>)
 801960a:	2200      	movs	r2, #0
 801960c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801960e:	4b27      	ldr	r3, [pc, #156]	; (80196ac <MX_TIM16_Init+0xe8>)
 8019610:	2200      	movs	r2, #0
 8019612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8019614:	4825      	ldr	r0, [pc, #148]	; (80196ac <MX_TIM16_Init+0xe8>)
 8019616:	f006 fb19 	bl	801fc4c <HAL_TIM_Base_Init>
 801961a:	4603      	mov	r3, r0
 801961c:	2b00      	cmp	r3, #0
 801961e:	d001      	beq.n	8019624 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8019620:	f7f2 fa03 	bl	800ba2a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8019624:	4821      	ldr	r0, [pc, #132]	; (80196ac <MX_TIM16_Init+0xe8>)
 8019626:	f006 fbd9 	bl	801fddc <HAL_TIM_PWM_Init>
 801962a:	4603      	mov	r3, r0
 801962c:	2b00      	cmp	r3, #0
 801962e:	d001      	beq.n	8019634 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8019630:	f7f2 f9fb 	bl	800ba2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8019634:	2360      	movs	r3, #96	; 0x60
 8019636:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8019638:	231e      	movs	r3, #30
 801963a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801963c:	2300      	movs	r3, #0
 801963e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8019640:	2300      	movs	r3, #0
 8019642:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8019644:	2300      	movs	r3, #0
 8019646:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8019648:	2300      	movs	r3, #0
 801964a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801964c:	2300      	movs	r3, #0
 801964e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8019650:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019654:	2200      	movs	r2, #0
 8019656:	4619      	mov	r1, r3
 8019658:	4814      	ldr	r0, [pc, #80]	; (80196ac <MX_TIM16_Init+0xe8>)
 801965a:	f006 ff3f 	bl	80204dc <HAL_TIM_PWM_ConfigChannel>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d001      	beq.n	8019668 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8019664:	f7f2 f9e1 	bl	800ba2a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8019668:	2300      	movs	r3, #0
 801966a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801966c:	2300      	movs	r3, #0
 801966e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8019670:	2300      	movs	r3, #0
 8019672:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8019674:	2300      	movs	r3, #0
 8019676:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8019678:	2300      	movs	r3, #0
 801967a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801967c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8019682:	2300      	movs	r3, #0
 8019684:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8019686:	2300      	movs	r3, #0
 8019688:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 801968a:	463b      	mov	r3, r7
 801968c:	4619      	mov	r1, r3
 801968e:	4807      	ldr	r0, [pc, #28]	; (80196ac <MX_TIM16_Init+0xe8>)
 8019690:	f007 fce6 	bl	8021060 <HAL_TIMEx_ConfigBreakDeadTime>
 8019694:	4603      	mov	r3, r0
 8019696:	2b00      	cmp	r3, #0
 8019698:	d001      	beq.n	801969e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 801969a:	f7f2 f9c6 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 801969e:	4803      	ldr	r0, [pc, #12]	; (80196ac <MX_TIM16_Init+0xe8>)
 80196a0:	f000 f862 	bl	8019768 <HAL_TIM_MspPostInit>

}
 80196a4:	bf00      	nop
 80196a6:	3750      	adds	r7, #80	; 0x50
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}
 80196ac:	2000f3f8 	.word	0x2000f3f8
 80196b0:	40014400 	.word	0x40014400

080196b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b084      	sub	sp, #16
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	4a16      	ldr	r2, [pc, #88]	; (801971c <HAL_TIM_Base_MspInit+0x68>)
 80196c2:	4293      	cmp	r3, r2
 80196c4:	d114      	bne.n	80196f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80196c6:	4b16      	ldr	r3, [pc, #88]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 80196c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196ca:	4a15      	ldr	r2, [pc, #84]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 80196cc:	f043 0310 	orr.w	r3, r3, #16
 80196d0:	6593      	str	r3, [r2, #88]	; 0x58
 80196d2:	4b13      	ldr	r3, [pc, #76]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 80196d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196d6:	f003 0310 	and.w	r3, r3, #16
 80196da:	60fb      	str	r3, [r7, #12]
 80196dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80196de:	2200      	movs	r2, #0
 80196e0:	2103      	movs	r1, #3
 80196e2:	2036      	movs	r0, #54	; 0x36
 80196e4:	f003 fc77 	bl	801cfd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80196e8:	2036      	movs	r0, #54	; 0x36
 80196ea:	f003 fc8e 	bl	801d00a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80196ee:	e010      	b.n	8019712 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	4a0b      	ldr	r2, [pc, #44]	; (8019724 <HAL_TIM_Base_MspInit+0x70>)
 80196f6:	4293      	cmp	r3, r2
 80196f8:	d10b      	bne.n	8019712 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80196fa:	4b09      	ldr	r3, [pc, #36]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 80196fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196fe:	4a08      	ldr	r2, [pc, #32]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 8019700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019704:	6613      	str	r3, [r2, #96]	; 0x60
 8019706:	4b06      	ldr	r3, [pc, #24]	; (8019720 <HAL_TIM_Base_MspInit+0x6c>)
 8019708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801970a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801970e:	60bb      	str	r3, [r7, #8]
 8019710:	68bb      	ldr	r3, [r7, #8]
}
 8019712:	bf00      	nop
 8019714:	3710      	adds	r7, #16
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	40001000 	.word	0x40001000
 8019720:	40021000 	.word	0x40021000
 8019724:	40014400 	.word	0x40014400

08019728 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8019728:	b480      	push	{r7}
 801972a:	b085      	sub	sp, #20
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	4a0a      	ldr	r2, [pc, #40]	; (8019760 <HAL_TIM_PWM_MspInit+0x38>)
 8019736:	4293      	cmp	r3, r2
 8019738:	d10b      	bne.n	8019752 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801973a:	4b0a      	ldr	r3, [pc, #40]	; (8019764 <HAL_TIM_PWM_MspInit+0x3c>)
 801973c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801973e:	4a09      	ldr	r2, [pc, #36]	; (8019764 <HAL_TIM_PWM_MspInit+0x3c>)
 8019740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019744:	6613      	str	r3, [r2, #96]	; 0x60
 8019746:	4b07      	ldr	r3, [pc, #28]	; (8019764 <HAL_TIM_PWM_MspInit+0x3c>)
 8019748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801974a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801974e:	60fb      	str	r3, [r7, #12]
 8019750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8019752:	bf00      	nop
 8019754:	3714      	adds	r7, #20
 8019756:	46bd      	mov	sp, r7
 8019758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975c:	4770      	bx	lr
 801975e:	bf00      	nop
 8019760:	40013400 	.word	0x40013400
 8019764:	40021000 	.word	0x40021000

08019768 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8019768:	b580      	push	{r7, lr}
 801976a:	b08a      	sub	sp, #40	; 0x28
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019770:	f107 0314 	add.w	r3, r7, #20
 8019774:	2200      	movs	r2, #0
 8019776:	601a      	str	r2, [r3, #0]
 8019778:	605a      	str	r2, [r3, #4]
 801977a:	609a      	str	r2, [r3, #8]
 801977c:	60da      	str	r2, [r3, #12]
 801977e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4a2b      	ldr	r2, [pc, #172]	; (8019834 <HAL_TIM_MspPostInit+0xcc>)
 8019786:	4293      	cmp	r3, r2
 8019788:	d12d      	bne.n	80197e6 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801978a:	4b2b      	ldr	r3, [pc, #172]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 801978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801978e:	4a2a      	ldr	r2, [pc, #168]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 8019790:	f043 0302 	orr.w	r3, r3, #2
 8019794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019796:	4b28      	ldr	r3, [pc, #160]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 8019798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801979a:	f003 0302 	and.w	r3, r3, #2
 801979e:	613b      	str	r3, [r7, #16]
 80197a0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 80197a2:	2340      	movs	r3, #64	; 0x40
 80197a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80197a6:	2302      	movs	r3, #2
 80197a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80197aa:	2300      	movs	r3, #0
 80197ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80197ae:	2300      	movs	r3, #0
 80197b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80197b2:	2305      	movs	r3, #5
 80197b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80197b6:	f107 0314 	add.w	r3, r7, #20
 80197ba:	4619      	mov	r1, r3
 80197bc:	481f      	ldr	r0, [pc, #124]	; (801983c <HAL_TIM_MspPostInit+0xd4>)
 80197be:	f004 f973 	bl	801daa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80197c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80197c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80197c8:	2302      	movs	r3, #2
 80197ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80197cc:	2300      	movs	r3, #0
 80197ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80197d0:	2300      	movs	r3, #0
 80197d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80197d4:	230a      	movs	r3, #10
 80197d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80197d8:	f107 0314 	add.w	r3, r7, #20
 80197dc:	4619      	mov	r1, r3
 80197de:	4817      	ldr	r0, [pc, #92]	; (801983c <HAL_TIM_MspPostInit+0xd4>)
 80197e0:	f004 f962 	bl	801daa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80197e4:	e022      	b.n	801982c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4a15      	ldr	r2, [pc, #84]	; (8019840 <HAL_TIM_MspPostInit+0xd8>)
 80197ec:	4293      	cmp	r3, r2
 80197ee:	d11d      	bne.n	801982c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80197f0:	4b11      	ldr	r3, [pc, #68]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 80197f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197f4:	4a10      	ldr	r2, [pc, #64]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 80197f6:	f043 0301 	orr.w	r3, r3, #1
 80197fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80197fc:	4b0e      	ldr	r3, [pc, #56]	; (8019838 <HAL_TIM_MspPostInit+0xd0>)
 80197fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019800:	f003 0301 	and.w	r3, r3, #1
 8019804:	60fb      	str	r3, [r7, #12]
 8019806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8019808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801980c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801980e:	2302      	movs	r3, #2
 8019810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019812:	2300      	movs	r3, #0
 8019814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019816:	2300      	movs	r3, #0
 8019818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 801981a:	2301      	movs	r3, #1
 801981c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 801981e:	f107 0314 	add.w	r3, r7, #20
 8019822:	4619      	mov	r1, r3
 8019824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019828:	f004 f93e 	bl	801daa8 <HAL_GPIO_Init>
}
 801982c:	bf00      	nop
 801982e:	3728      	adds	r7, #40	; 0x28
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}
 8019834:	40013400 	.word	0x40013400
 8019838:	40021000 	.word	0x40021000
 801983c:	48000400 	.word	0x48000400
 8019840:	40014400 	.word	0x40014400

08019844 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8019844:	b084      	sub	sp, #16
 8019846:	b480      	push	{r7}
 8019848:	b083      	sub	sp, #12
 801984a:	af00      	add	r7, sp, #0
 801984c:	f107 0c10 	add.w	ip, r7, #16
 8019850:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8019854:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019858:	f113 0f02 	cmn.w	r3, #2
 801985c:	d102      	bne.n	8019864 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 801985e:	69bb      	ldr	r3, [r7, #24]
 8019860:	607b      	str	r3, [r7, #4]
 8019862:	e083      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8019864:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019868:	f113 0f03 	cmn.w	r3, #3
 801986c:	d102      	bne.n	8019874 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 801986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019870:	607b      	str	r3, [r7, #4]
 8019872:	e07b      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8019874:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019878:	f113 0f04 	cmn.w	r3, #4
 801987c:	d102      	bne.n	8019884 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 801987e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019880:	607b      	str	r3, [r7, #4]
 8019882:	e073      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8019884:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019888:	f113 0f05 	cmn.w	r3, #5
 801988c:	d102      	bne.n	8019894 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 801988e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019890:	607b      	str	r3, [r7, #4]
 8019892:	e06b      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8019894:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019898:	f113 0f06 	cmn.w	r3, #6
 801989c:	d102      	bne.n	80198a4 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 801989e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80198a0:	607b      	str	r3, [r7, #4]
 80198a2:	e063      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 80198a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80198a8:	f113 0f07 	cmn.w	r3, #7
 80198ac:	d102      	bne.n	80198b4 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 80198ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80198b0:	607b      	str	r3, [r7, #4]
 80198b2:	e05b      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 80198b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80198b8:	f113 0f08 	cmn.w	r3, #8
 80198bc:	d103      	bne.n	80198c6 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 80198be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80198c2:	607b      	str	r3, [r7, #4]
 80198c4:	e052      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 80198c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80198ca:	f113 0f09 	cmn.w	r3, #9
 80198ce:	d103      	bne.n	80198d8 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 80198d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80198d4:	607b      	str	r3, [r7, #4]
 80198d6:	e049      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 80198d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80198dc:	f113 0f0a 	cmn.w	r3, #10
 80198e0:	d103      	bne.n	80198ea <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 80198e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80198e6:	607b      	str	r3, [r7, #4]
 80198e8:	e040      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 80198ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80198ee:	f113 0f0b 	cmn.w	r3, #11
 80198f2:	d103      	bne.n	80198fc <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 80198f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80198f8:	607b      	str	r3, [r7, #4]
 80198fa:	e037      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 80198fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019900:	f113 0f0c 	cmn.w	r3, #12
 8019904:	d103      	bne.n	801990e <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8019906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801990a:	607b      	str	r3, [r7, #4]
 801990c:	e02e      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 801990e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019912:	f113 0f0d 	cmn.w	r3, #13
 8019916:	d103      	bne.n	8019920 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8019918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801991c:	607b      	str	r3, [r7, #4]
 801991e:	e025      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8019920:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019924:	f113 0f0e 	cmn.w	r3, #14
 8019928:	d103      	bne.n	8019932 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801992a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801992e:	607b      	str	r3, [r7, #4]
 8019930:	e01c      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8019932:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019936:	f113 0f0f 	cmn.w	r3, #15
 801993a:	d103      	bne.n	8019944 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 801993c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019940:	607b      	str	r3, [r7, #4]
 8019942:	e013      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8019944:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8019948:	f113 0f10 	cmn.w	r3, #16
 801994c:	d103      	bne.n	8019956 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 801994e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8019952:	607b      	str	r3, [r7, #4]
 8019954:	e00a      	b.n	801996c <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8019956:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801995a:	f113 0f11 	cmn.w	r3, #17
 801995e:	d103      	bne.n	8019968 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8019960:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8019964:	607b      	str	r3, [r7, #4]
 8019966:	e001      	b.n	801996c <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	ee07 3a90 	vmov	s15, r3
}
 8019972:	eeb0 0a67 	vmov.f32	s0, s15
 8019976:	370c      	adds	r7, #12
 8019978:	46bd      	mov	sp, r7
 801997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997e:	b004      	add	sp, #16
 8019980:	4770      	bx	lr
	...

08019984 <input_parameter>:

void input_parameter(void) {
 8019984:	b480      	push	{r7}
 8019986:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8019988:	4b8f      	ldr	r3, [pc, #572]	; (8019bc8 <input_parameter+0x244>)
 801998a:	4a90      	ldr	r2, [pc, #576]	; (8019bcc <input_parameter+0x248>)
 801998c:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 801998e:	4b8e      	ldr	r3, [pc, #568]	; (8019bc8 <input_parameter+0x244>)
 8019990:	4a8e      	ldr	r2, [pc, #568]	; (8019bcc <input_parameter+0x248>)
 8019992:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8019994:	4b8c      	ldr	r3, [pc, #560]	; (8019bc8 <input_parameter+0x244>)
 8019996:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8019998:	4a8b      	ldr	r2, [pc, #556]	; (8019bc8 <input_parameter+0x244>)
 801999a:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 801999c:	4b8a      	ldr	r3, [pc, #552]	; (8019bc8 <input_parameter+0x244>)
 801999e:	4a8c      	ldr	r2, [pc, #560]	; (8019bd0 <input_parameter+0x24c>)
 80199a0:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 80199a2:	4b89      	ldr	r3, [pc, #548]	; (8019bc8 <input_parameter+0x244>)
 80199a4:	4a8b      	ldr	r2, [pc, #556]	; (8019bd4 <input_parameter+0x250>)
 80199a6:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 80199a8:	4b87      	ldr	r3, [pc, #540]	; (8019bc8 <input_parameter+0x244>)
 80199aa:	4a8b      	ldr	r2, [pc, #556]	; (8019bd8 <input_parameter+0x254>)
 80199ac:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 24;
 80199ae:	4b86      	ldr	r3, [pc, #536]	; (8019bc8 <input_parameter+0x244>)
 80199b0:	4a8a      	ldr	r2, [pc, #552]	; (8019bdc <input_parameter+0x258>)
 80199b2:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80199b4:	4b84      	ldr	r3, [pc, #528]	; (8019bc8 <input_parameter+0x244>)
 80199b6:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 80199b8:	4a83      	ldr	r2, [pc, #524]	; (8019bc8 <input_parameter+0x244>)
 80199ba:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 80199bc:	4b82      	ldr	r3, [pc, #520]	; (8019bc8 <input_parameter+0x244>)
 80199be:	4a84      	ldr	r2, [pc, #528]	; (8019bd0 <input_parameter+0x24c>)
 80199c0:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 80199c2:	4b81      	ldr	r3, [pc, #516]	; (8019bc8 <input_parameter+0x244>)
 80199c4:	4a83      	ldr	r2, [pc, #524]	; (8019bd4 <input_parameter+0x250>)
 80199c6:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 80199c8:	4b7f      	ldr	r3, [pc, #508]	; (8019bc8 <input_parameter+0x244>)
 80199ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80199ce:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 24;
 80199d0:	4b7d      	ldr	r3, [pc, #500]	; (8019bc8 <input_parameter+0x244>)
 80199d2:	4a82      	ldr	r2, [pc, #520]	; (8019bdc <input_parameter+0x258>)
 80199d4:	625a      	str	r2, [r3, #36]	; 0x24

	speed300_exploration.turn45in_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80199d6:	4b7c      	ldr	r3, [pc, #496]	; (8019bc8 <input_parameter+0x244>)
 80199d8:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.turn45in_R.g_speed =
 80199da:	4a7b      	ldr	r2, [pc, #492]	; (8019bc8 <input_parameter+0x244>)
 80199dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_exploration.turn45in_R.t_speed = 570;
 80199e0:	4b79      	ldr	r3, [pc, #484]	; (8019bc8 <input_parameter+0x244>)
 80199e2:	4a7f      	ldr	r2, [pc, #508]	; (8019be0 <input_parameter+0x25c>)
 80199e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_exploration.turn45in_R.t_acc = 10000;
 80199e8:	4b77      	ldr	r3, [pc, #476]	; (8019bc8 <input_parameter+0x244>)
 80199ea:	4a7e      	ldr	r2, [pc, #504]	; (8019be4 <input_parameter+0x260>)
 80199ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_exploration.turn45in_R.f_ofset = 30; //50;
 80199f0:	4b75      	ldr	r3, [pc, #468]	; (8019bc8 <input_parameter+0x244>)
 80199f2:	4a7d      	ldr	r2, [pc, #500]	; (8019be8 <input_parameter+0x264>)
 80199f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_exploration.turn45in_R.e_ofset = 24;
 80199f8:	4b73      	ldr	r3, [pc, #460]	; (8019bc8 <input_parameter+0x244>)
 80199fa:	4a78      	ldr	r2, [pc, #480]	; (8019bdc <input_parameter+0x258>)
 80199fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed250_exploration.SlalomCentervelocity = 250;
 8019a00:	4b7a      	ldr	r3, [pc, #488]	; (8019bec <input_parameter+0x268>)
 8019a02:	4a7b      	ldr	r2, [pc, #492]	; (8019bf0 <input_parameter+0x26c>)
 8019a04:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8019a06:	4b79      	ldr	r3, [pc, #484]	; (8019bec <input_parameter+0x268>)
 8019a08:	4a79      	ldr	r2, [pc, #484]	; (8019bf0 <input_parameter+0x26c>)
 8019a0a:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8019a0c:	4b77      	ldr	r3, [pc, #476]	; (8019bec <input_parameter+0x268>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8019a10:	4a76      	ldr	r2, [pc, #472]	; (8019bec <input_parameter+0x268>)
 8019a12:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8019a14:	4b75      	ldr	r3, [pc, #468]	; (8019bec <input_parameter+0x268>)
 8019a16:	4a77      	ldr	r2, [pc, #476]	; (8019bf4 <input_parameter+0x270>)
 8019a18:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8019a1a:	4b74      	ldr	r3, [pc, #464]	; (8019bec <input_parameter+0x268>)
 8019a1c:	4a76      	ldr	r2, [pc, #472]	; (8019bf8 <input_parameter+0x274>)
 8019a1e:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8019a20:	4b72      	ldr	r3, [pc, #456]	; (8019bec <input_parameter+0x268>)
 8019a22:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8019a26:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8019a28:	4b70      	ldr	r3, [pc, #448]	; (8019bec <input_parameter+0x268>)
 8019a2a:	4a74      	ldr	r2, [pc, #464]	; (8019bfc <input_parameter+0x278>)
 8019a2c:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8019a2e:	4b6f      	ldr	r3, [pc, #444]	; (8019bec <input_parameter+0x268>)
 8019a30:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8019a32:	4a6e      	ldr	r2, [pc, #440]	; (8019bec <input_parameter+0x268>)
 8019a34:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8019a36:	4b6d      	ldr	r3, [pc, #436]	; (8019bec <input_parameter+0x268>)
 8019a38:	4a71      	ldr	r2, [pc, #452]	; (8019c00 <input_parameter+0x27c>)
 8019a3a:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8019a3c:	4b6b      	ldr	r3, [pc, #428]	; (8019bec <input_parameter+0x268>)
 8019a3e:	4a6e      	ldr	r2, [pc, #440]	; (8019bf8 <input_parameter+0x274>)
 8019a40:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8019a42:	4b6a      	ldr	r3, [pc, #424]	; (8019bec <input_parameter+0x268>)
 8019a44:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8019a48:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8019a4a:	4b68      	ldr	r3, [pc, #416]	; (8019bec <input_parameter+0x268>)
 8019a4c:	4a6d      	ldr	r2, [pc, #436]	; (8019c04 <input_parameter+0x280>)
 8019a4e:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8019a50:	4b5d      	ldr	r3, [pc, #372]	; (8019bc8 <input_parameter+0x244>)
 8019a52:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8019a54:	4a6c      	ldr	r2, [pc, #432]	; (8019c08 <input_parameter+0x284>)
 8019a56:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8019a58:	4b5b      	ldr	r3, [pc, #364]	; (8019bc8 <input_parameter+0x244>)
 8019a5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a5e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8019c0c <input_parameter+0x288>
 8019a62:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8019a66:	4b68      	ldr	r3, [pc, #416]	; (8019c08 <input_parameter+0x284>)
 8019a68:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8019a6c:	4b56      	ldr	r3, [pc, #344]	; (8019bc8 <input_parameter+0x244>)
 8019a6e:	689b      	ldr	r3, [r3, #8]
 8019a70:	4a65      	ldr	r2, [pc, #404]	; (8019c08 <input_parameter+0x284>)
 8019a72:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8019a74:	4b54      	ldr	r3, [pc, #336]	; (8019bc8 <input_parameter+0x244>)
 8019a76:	695b      	ldr	r3, [r3, #20]
 8019a78:	4a63      	ldr	r2, [pc, #396]	; (8019c08 <input_parameter+0x284>)
 8019a7a:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8019a7c:	4b52      	ldr	r3, [pc, #328]	; (8019bc8 <input_parameter+0x244>)
 8019a7e:	699b      	ldr	r3, [r3, #24]
 8019a80:	4a61      	ldr	r2, [pc, #388]	; (8019c08 <input_parameter+0x284>)
 8019a82:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8019a84:	4b50      	ldr	r3, [pc, #320]	; (8019bc8 <input_parameter+0x244>)
 8019a86:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8019a8a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8019a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8019a92:	4b5d      	ldr	r3, [pc, #372]	; (8019c08 <input_parameter+0x284>)
 8019a94:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8019a98:	4b4b      	ldr	r3, [pc, #300]	; (8019bc8 <input_parameter+0x244>)
 8019a9a:	691b      	ldr	r3, [r3, #16]
 8019a9c:	4a5a      	ldr	r2, [pc, #360]	; (8019c08 <input_parameter+0x284>)
 8019a9e:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8019aa0:	4b49      	ldr	r3, [pc, #292]	; (8019bc8 <input_parameter+0x244>)
 8019aa2:	69db      	ldr	r3, [r3, #28]
 8019aa4:	4a58      	ldr	r2, [pc, #352]	; (8019c08 <input_parameter+0x284>)
 8019aa6:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8019aa8:	4b47      	ldr	r3, [pc, #284]	; (8019bc8 <input_parameter+0x244>)
 8019aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aac:	4a56      	ldr	r2, [pc, #344]	; (8019c08 <input_parameter+0x284>)
 8019aae:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8019ab0:	4b45      	ldr	r3, [pc, #276]	; (8019bc8 <input_parameter+0x244>)
 8019ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab4:	4a54      	ldr	r2, [pc, #336]	; (8019c08 <input_parameter+0x284>)
 8019ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8019ab8:	4b43      	ldr	r3, [pc, #268]	; (8019bc8 <input_parameter+0x244>)
 8019aba:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8019abe:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8019ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8019ac6:	4b50      	ldr	r3, [pc, #320]	; (8019c08 <input_parameter+0x284>)
 8019ac8:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8019acc:	4b3e      	ldr	r3, [pc, #248]	; (8019bc8 <input_parameter+0x244>)
 8019ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ad0:	4a4d      	ldr	r2, [pc, #308]	; (8019c08 <input_parameter+0x284>)
 8019ad2:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8019ad4:	4b4c      	ldr	r3, [pc, #304]	; (8019c08 <input_parameter+0x284>)
 8019ad6:	685b      	ldr	r3, [r3, #4]
 8019ad8:	4a4b      	ldr	r2, [pc, #300]	; (8019c08 <input_parameter+0x284>)
 8019ada:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8019adc:	4b4a      	ldr	r3, [pc, #296]	; (8019c08 <input_parameter+0x284>)
 8019ade:	4a4c      	ldr	r2, [pc, #304]	; (8019c10 <input_parameter+0x28c>)
 8019ae0:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8019ae2:	4b49      	ldr	r3, [pc, #292]	; (8019c08 <input_parameter+0x284>)
 8019ae4:	4a3f      	ldr	r2, [pc, #252]	; (8019be4 <input_parameter+0x260>)
 8019ae6:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8019ae8:	4b47      	ldr	r3, [pc, #284]	; (8019c08 <input_parameter+0x284>)
 8019aea:	4a4a      	ldr	r2, [pc, #296]	; (8019c14 <input_parameter+0x290>)
 8019aec:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8019aee:	4b46      	ldr	r3, [pc, #280]	; (8019c08 <input_parameter+0x284>)
 8019af0:	4a49      	ldr	r2, [pc, #292]	; (8019c18 <input_parameter+0x294>)
 8019af2:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8019af4:	4b44      	ldr	r3, [pc, #272]	; (8019c08 <input_parameter+0x284>)
 8019af6:	685b      	ldr	r3, [r3, #4]
 8019af8:	4a43      	ldr	r2, [pc, #268]	; (8019c08 <input_parameter+0x284>)
 8019afa:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8019afc:	4b42      	ldr	r3, [pc, #264]	; (8019c08 <input_parameter+0x284>)
 8019afe:	4a44      	ldr	r2, [pc, #272]	; (8019c10 <input_parameter+0x28c>)
 8019b00:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8019b02:	4b41      	ldr	r3, [pc, #260]	; (8019c08 <input_parameter+0x284>)
 8019b04:	4a37      	ldr	r2, [pc, #220]	; (8019be4 <input_parameter+0x260>)
 8019b06:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8019b08:	4b3f      	ldr	r3, [pc, #252]	; (8019c08 <input_parameter+0x284>)
 8019b0a:	4a44      	ldr	r2, [pc, #272]	; (8019c1c <input_parameter+0x298>)
 8019b0c:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8019b0e:	4b3e      	ldr	r3, [pc, #248]	; (8019c08 <input_parameter+0x284>)
 8019b10:	4a43      	ldr	r2, [pc, #268]	; (8019c20 <input_parameter+0x29c>)
 8019b12:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8019b14:	4b3c      	ldr	r3, [pc, #240]	; (8019c08 <input_parameter+0x284>)
 8019b16:	685b      	ldr	r3, [r3, #4]
 8019b18:	4a3b      	ldr	r2, [pc, #236]	; (8019c08 <input_parameter+0x284>)
 8019b1a:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8019b1c:	4b3a      	ldr	r3, [pc, #232]	; (8019c08 <input_parameter+0x284>)
 8019b1e:	4a41      	ldr	r2, [pc, #260]	; (8019c24 <input_parameter+0x2a0>)
 8019b20:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8019b22:	4b39      	ldr	r3, [pc, #228]	; (8019c08 <input_parameter+0x284>)
 8019b24:	4a40      	ldr	r2, [pc, #256]	; (8019c28 <input_parameter+0x2a4>)
 8019b26:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8019b28:	4b37      	ldr	r3, [pc, #220]	; (8019c08 <input_parameter+0x284>)
 8019b2a:	4a40      	ldr	r2, [pc, #256]	; (8019c2c <input_parameter+0x2a8>)
 8019b2c:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8019b2e:	4b36      	ldr	r3, [pc, #216]	; (8019c08 <input_parameter+0x284>)
 8019b30:	4a3f      	ldr	r2, [pc, #252]	; (8019c30 <input_parameter+0x2ac>)
 8019b32:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8019b34:	4b34      	ldr	r3, [pc, #208]	; (8019c08 <input_parameter+0x284>)
 8019b36:	685b      	ldr	r3, [r3, #4]
 8019b38:	4a33      	ldr	r2, [pc, #204]	; (8019c08 <input_parameter+0x284>)
 8019b3a:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8019b3c:	4b32      	ldr	r3, [pc, #200]	; (8019c08 <input_parameter+0x284>)
 8019b3e:	4a3d      	ldr	r2, [pc, #244]	; (8019c34 <input_parameter+0x2b0>)
 8019b40:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8019b42:	4b31      	ldr	r3, [pc, #196]	; (8019c08 <input_parameter+0x284>)
 8019b44:	4a38      	ldr	r2, [pc, #224]	; (8019c28 <input_parameter+0x2a4>)
 8019b46:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8019b48:	4b2f      	ldr	r3, [pc, #188]	; (8019c08 <input_parameter+0x284>)
 8019b4a:	4a3b      	ldr	r2, [pc, #236]	; (8019c38 <input_parameter+0x2b4>)
 8019b4c:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8019b4e:	4b2e      	ldr	r3, [pc, #184]	; (8019c08 <input_parameter+0x284>)
 8019b50:	4a3a      	ldr	r2, [pc, #232]	; (8019c3c <input_parameter+0x2b8>)
 8019b52:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8019b54:	4b2c      	ldr	r3, [pc, #176]	; (8019c08 <input_parameter+0x284>)
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	4a2b      	ldr	r2, [pc, #172]	; (8019c08 <input_parameter+0x284>)
 8019b5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8019b5e:	4b2a      	ldr	r3, [pc, #168]	; (8019c08 <input_parameter+0x284>)
 8019b60:	4a2b      	ldr	r2, [pc, #172]	; (8019c10 <input_parameter+0x28c>)
 8019b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8019b66:	4b28      	ldr	r3, [pc, #160]	; (8019c08 <input_parameter+0x284>)
 8019b68:	4a1e      	ldr	r2, [pc, #120]	; (8019be4 <input_parameter+0x260>)
 8019b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8019b6e:	4b26      	ldr	r3, [pc, #152]	; (8019c08 <input_parameter+0x284>)
 8019b70:	4a33      	ldr	r2, [pc, #204]	; (8019c40 <input_parameter+0x2bc>)
 8019b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8019b76:	4b24      	ldr	r3, [pc, #144]	; (8019c08 <input_parameter+0x284>)
 8019b78:	4a32      	ldr	r2, [pc, #200]	; (8019c44 <input_parameter+0x2c0>)
 8019b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8019b7e:	4b22      	ldr	r3, [pc, #136]	; (8019c08 <input_parameter+0x284>)
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	4a21      	ldr	r2, [pc, #132]	; (8019c08 <input_parameter+0x284>)
 8019b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8019b88:	4b1f      	ldr	r3, [pc, #124]	; (8019c08 <input_parameter+0x284>)
 8019b8a:	4a21      	ldr	r2, [pc, #132]	; (8019c10 <input_parameter+0x28c>)
 8019b8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8019b90:	4b1d      	ldr	r3, [pc, #116]	; (8019c08 <input_parameter+0x284>)
 8019b92:	4a14      	ldr	r2, [pc, #80]	; (8019be4 <input_parameter+0x260>)
 8019b94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8019b98:	4b1b      	ldr	r3, [pc, #108]	; (8019c08 <input_parameter+0x284>)
 8019b9a:	4a2b      	ldr	r2, [pc, #172]	; (8019c48 <input_parameter+0x2c4>)
 8019b9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8019ba0:	4b19      	ldr	r3, [pc, #100]	; (8019c08 <input_parameter+0x284>)
 8019ba2:	4a2a      	ldr	r2, [pc, #168]	; (8019c4c <input_parameter+0x2c8>)
 8019ba4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019ba8:	4b17      	ldr	r3, [pc, #92]	; (8019c08 <input_parameter+0x284>)
 8019baa:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8019bac:	4a16      	ldr	r2, [pc, #88]	; (8019c08 <input_parameter+0x284>)
 8019bae:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8019bb2:	4b15      	ldr	r3, [pc, #84]	; (8019c08 <input_parameter+0x284>)
 8019bb4:	4a26      	ldr	r2, [pc, #152]	; (8019c50 <input_parameter+0x2cc>)
 8019bb6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8019bba:	4b13      	ldr	r3, [pc, #76]	; (8019c08 <input_parameter+0x284>)
 8019bbc:	4a1a      	ldr	r2, [pc, #104]	; (8019c28 <input_parameter+0x2a4>)
 8019bbe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8019bc2:	4b11      	ldr	r3, [pc, #68]	; (8019c08 <input_parameter+0x284>)
 8019bc4:	e046      	b.n	8019c54 <input_parameter+0x2d0>
 8019bc6:	bf00      	nop
 8019bc8:	2000f444 	.word	0x2000f444
 8019bcc:	43960000 	.word	0x43960000
 8019bd0:	44750000 	.word	0x44750000
 8019bd4:	464b2000 	.word	0x464b2000
 8019bd8:	40400000 	.word	0x40400000
 8019bdc:	41c00000 	.word	0x41c00000
 8019be0:	440e8000 	.word	0x440e8000
 8019be4:	461c4000 	.word	0x461c4000
 8019be8:	41f00000 	.word	0x41f00000
 8019bec:	2000f58c 	.word	0x2000f58c
 8019bf0:	437a0000 	.word	0x437a0000
 8019bf4:	444f8000 	.word	0x444f8000
 8019bf8:	460ca000 	.word	0x460ca000
 8019bfc:	41a00000 	.word	0x41a00000
 8019c00:	44368000 	.word	0x44368000
 8019c04:	41980000 	.word	0x41980000
 8019c08:	2000f6d4 	.word	0x2000f6d4
 8019c0c:	43480000 	.word	0x43480000
 8019c10:	44160000 	.word	0x44160000
 8019c14:	42980000 	.word	0x42980000
 8019c18:	42d60000 	.word	0x42d60000
 8019c1c:	429a0000 	.word	0x429a0000
 8019c20:	42ce0000 	.word	0x42ce0000
 8019c24:	43d70000 	.word	0x43d70000
 8019c28:	45fa0000 	.word	0x45fa0000
 8019c2c:	42820000 	.word	0x42820000
 8019c30:	42a00000 	.word	0x42a00000
 8019c34:	43e10000 	.word	0x43e10000
 8019c38:	42700000 	.word	0x42700000
 8019c3c:	428e0000 	.word	0x428e0000
 8019c40:	41d80000 	.word	0x41d80000
 8019c44:	42b20000 	.word	0x42b20000
 8019c48:	42040000 	.word	0x42040000
 8019c4c:	42b40000 	.word	0x42b40000
 8019c50:	44188000 	.word	0x44188000
 8019c54:	4a99      	ldr	r2, [pc, #612]	; (8019ebc <input_parameter+0x538>)
 8019c56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8019c5a:	4b99      	ldr	r3, [pc, #612]	; (8019ec0 <input_parameter+0x53c>)
 8019c5c:	4a99      	ldr	r2, [pc, #612]	; (8019ec4 <input_parameter+0x540>)
 8019c5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019c62:	4b97      	ldr	r3, [pc, #604]	; (8019ec0 <input_parameter+0x53c>)
 8019c64:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8019c66:	4a96      	ldr	r2, [pc, #600]	; (8019ec0 <input_parameter+0x53c>)
 8019c68:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8019c6c:	4b94      	ldr	r3, [pc, #592]	; (8019ec0 <input_parameter+0x53c>)
 8019c6e:	4a96      	ldr	r2, [pc, #600]	; (8019ec8 <input_parameter+0x544>)
 8019c70:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8019c74:	4b92      	ldr	r3, [pc, #584]	; (8019ec0 <input_parameter+0x53c>)
 8019c76:	4a95      	ldr	r2, [pc, #596]	; (8019ecc <input_parameter+0x548>)
 8019c78:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8019c7c:	4b90      	ldr	r3, [pc, #576]	; (8019ec0 <input_parameter+0x53c>)
 8019c7e:	4a8f      	ldr	r2, [pc, #572]	; (8019ebc <input_parameter+0x538>)
 8019c80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8019c84:	4b8e      	ldr	r3, [pc, #568]	; (8019ec0 <input_parameter+0x53c>)
 8019c86:	4a8f      	ldr	r2, [pc, #572]	; (8019ec4 <input_parameter+0x540>)
 8019c88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019c8c:	4b8c      	ldr	r3, [pc, #560]	; (8019ec0 <input_parameter+0x53c>)
 8019c8e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8019c90:	4a8b      	ldr	r2, [pc, #556]	; (8019ec0 <input_parameter+0x53c>)
 8019c92:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8019c96:	4b8a      	ldr	r3, [pc, #552]	; (8019ec0 <input_parameter+0x53c>)
 8019c98:	4a8d      	ldr	r2, [pc, #564]	; (8019ed0 <input_parameter+0x54c>)
 8019c9a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8019c9e:	4b88      	ldr	r3, [pc, #544]	; (8019ec0 <input_parameter+0x53c>)
 8019ca0:	4a8c      	ldr	r2, [pc, #560]	; (8019ed4 <input_parameter+0x550>)
 8019ca2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8019ca6:	4b86      	ldr	r3, [pc, #536]	; (8019ec0 <input_parameter+0x53c>)
 8019ca8:	4a8b      	ldr	r2, [pc, #556]	; (8019ed8 <input_parameter+0x554>)
 8019caa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8019cae:	4b84      	ldr	r3, [pc, #528]	; (8019ec0 <input_parameter+0x53c>)
 8019cb0:	4a89      	ldr	r2, [pc, #548]	; (8019ed8 <input_parameter+0x554>)
 8019cb2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019cb6:	4b82      	ldr	r3, [pc, #520]	; (8019ec0 <input_parameter+0x53c>)
 8019cb8:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8019cba:	4a81      	ldr	r2, [pc, #516]	; (8019ec0 <input_parameter+0x53c>)
 8019cbc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8019cc0:	4b7f      	ldr	r3, [pc, #508]	; (8019ec0 <input_parameter+0x53c>)
 8019cc2:	4a83      	ldr	r2, [pc, #524]	; (8019ed0 <input_parameter+0x54c>)
 8019cc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8019cc8:	4b7d      	ldr	r3, [pc, #500]	; (8019ec0 <input_parameter+0x53c>)
 8019cca:	4a82      	ldr	r2, [pc, #520]	; (8019ed4 <input_parameter+0x550>)
 8019ccc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8019cd0:	4b7b      	ldr	r3, [pc, #492]	; (8019ec0 <input_parameter+0x53c>)
 8019cd2:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8019cd6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8019cda:	4b79      	ldr	r3, [pc, #484]	; (8019ec0 <input_parameter+0x53c>)
 8019cdc:	4a7f      	ldr	r2, [pc, #508]	; (8019edc <input_parameter+0x558>)
 8019cde:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019ce2:	4b77      	ldr	r3, [pc, #476]	; (8019ec0 <input_parameter+0x53c>)
 8019ce4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8019ce6:	4a76      	ldr	r2, [pc, #472]	; (8019ec0 <input_parameter+0x53c>)
 8019ce8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8019cec:	4b74      	ldr	r3, [pc, #464]	; (8019ec0 <input_parameter+0x53c>)
 8019cee:	4a7c      	ldr	r2, [pc, #496]	; (8019ee0 <input_parameter+0x55c>)
 8019cf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8019cf4:	4b72      	ldr	r3, [pc, #456]	; (8019ec0 <input_parameter+0x53c>)
 8019cf6:	4a75      	ldr	r2, [pc, #468]	; (8019ecc <input_parameter+0x548>)
 8019cf8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8019cfc:	4b70      	ldr	r3, [pc, #448]	; (8019ec0 <input_parameter+0x53c>)
 8019cfe:	4a79      	ldr	r2, [pc, #484]	; (8019ee4 <input_parameter+0x560>)
 8019d00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8019d04:	4b6e      	ldr	r3, [pc, #440]	; (8019ec0 <input_parameter+0x53c>)
 8019d06:	4a78      	ldr	r2, [pc, #480]	; (8019ee8 <input_parameter+0x564>)
 8019d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8019d0c:	4b6c      	ldr	r3, [pc, #432]	; (8019ec0 <input_parameter+0x53c>)
 8019d0e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8019d10:	4a6b      	ldr	r2, [pc, #428]	; (8019ec0 <input_parameter+0x53c>)
 8019d12:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8019d16:	4b6a      	ldr	r3, [pc, #424]	; (8019ec0 <input_parameter+0x53c>)
 8019d18:	4a71      	ldr	r2, [pc, #452]	; (8019ee0 <input_parameter+0x55c>)
 8019d1a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8019d1e:	4b68      	ldr	r3, [pc, #416]	; (8019ec0 <input_parameter+0x53c>)
 8019d20:	4a6a      	ldr	r2, [pc, #424]	; (8019ecc <input_parameter+0x548>)
 8019d22:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8019d26:	4b66      	ldr	r3, [pc, #408]	; (8019ec0 <input_parameter+0x53c>)
 8019d28:	4a6e      	ldr	r2, [pc, #440]	; (8019ee4 <input_parameter+0x560>)
 8019d2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8019d2e:	4b64      	ldr	r3, [pc, #400]	; (8019ec0 <input_parameter+0x53c>)
 8019d30:	4a6e      	ldr	r2, [pc, #440]	; (8019eec <input_parameter+0x568>)
 8019d32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8019d36:	4b62      	ldr	r3, [pc, #392]	; (8019ec0 <input_parameter+0x53c>)
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	4a61      	ldr	r2, [pc, #388]	; (8019ec0 <input_parameter+0x53c>)
 8019d3c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8019d40:	4b5f      	ldr	r3, [pc, #380]	; (8019ec0 <input_parameter+0x53c>)
 8019d42:	4a6b      	ldr	r2, [pc, #428]	; (8019ef0 <input_parameter+0x56c>)
 8019d44:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8019d48:	4b5d      	ldr	r3, [pc, #372]	; (8019ec0 <input_parameter+0x53c>)
 8019d4a:	4a6a      	ldr	r2, [pc, #424]	; (8019ef4 <input_parameter+0x570>)
 8019d4c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8019d50:	4b5b      	ldr	r3, [pc, #364]	; (8019ec0 <input_parameter+0x53c>)
 8019d52:	4a69      	ldr	r2, [pc, #420]	; (8019ef8 <input_parameter+0x574>)
 8019d54:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8019d58:	4b59      	ldr	r3, [pc, #356]	; (8019ec0 <input_parameter+0x53c>)
 8019d5a:	4a68      	ldr	r2, [pc, #416]	; (8019efc <input_parameter+0x578>)
 8019d5c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8019d60:	4b57      	ldr	r3, [pc, #348]	; (8019ec0 <input_parameter+0x53c>)
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	4a56      	ldr	r2, [pc, #344]	; (8019ec0 <input_parameter+0x53c>)
 8019d66:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8019d6a:	4b55      	ldr	r3, [pc, #340]	; (8019ec0 <input_parameter+0x53c>)
 8019d6c:	4a60      	ldr	r2, [pc, #384]	; (8019ef0 <input_parameter+0x56c>)
 8019d6e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8019d72:	4b53      	ldr	r3, [pc, #332]	; (8019ec0 <input_parameter+0x53c>)
 8019d74:	4a5f      	ldr	r2, [pc, #380]	; (8019ef4 <input_parameter+0x570>)
 8019d76:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8019d7a:	4b51      	ldr	r3, [pc, #324]	; (8019ec0 <input_parameter+0x53c>)
 8019d7c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8019d80:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8019d84:	4b4e      	ldr	r3, [pc, #312]	; (8019ec0 <input_parameter+0x53c>)
 8019d86:	4a5e      	ldr	r2, [pc, #376]	; (8019f00 <input_parameter+0x57c>)
 8019d88:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8019d8c:	4b5d      	ldr	r3, [pc, #372]	; (8019f04 <input_parameter+0x580>)
 8019d8e:	4a50      	ldr	r2, [pc, #320]	; (8019ed0 <input_parameter+0x54c>)
 8019d90:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8019d92:	4b5c      	ldr	r3, [pc, #368]	; (8019f04 <input_parameter+0x580>)
 8019d94:	4a4e      	ldr	r2, [pc, #312]	; (8019ed0 <input_parameter+0x54c>)
 8019d96:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8019d98:	4b5a      	ldr	r3, [pc, #360]	; (8019f04 <input_parameter+0x580>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8019d9c:	4a59      	ldr	r2, [pc, #356]	; (8019f04 <input_parameter+0x580>)
 8019d9e:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8019da0:	4b58      	ldr	r3, [pc, #352]	; (8019f04 <input_parameter+0x580>)
 8019da2:	4a59      	ldr	r2, [pc, #356]	; (8019f08 <input_parameter+0x584>)
 8019da4:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8019da6:	4b57      	ldr	r3, [pc, #348]	; (8019f04 <input_parameter+0x580>)
 8019da8:	4a58      	ldr	r2, [pc, #352]	; (8019f0c <input_parameter+0x588>)
 8019daa:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8019dac:	4b55      	ldr	r3, [pc, #340]	; (8019f04 <input_parameter+0x580>)
 8019dae:	4a58      	ldr	r2, [pc, #352]	; (8019f10 <input_parameter+0x58c>)
 8019db0:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8019db2:	4b54      	ldr	r3, [pc, #336]	; (8019f04 <input_parameter+0x580>)
 8019db4:	4a57      	ldr	r2, [pc, #348]	; (8019f14 <input_parameter+0x590>)
 8019db6:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8019db8:	4b52      	ldr	r3, [pc, #328]	; (8019f04 <input_parameter+0x580>)
 8019dba:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8019dbc:	4a51      	ldr	r2, [pc, #324]	; (8019f04 <input_parameter+0x580>)
 8019dbe:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8019dc0:	4b50      	ldr	r3, [pc, #320]	; (8019f04 <input_parameter+0x580>)
 8019dc2:	4a51      	ldr	r2, [pc, #324]	; (8019f08 <input_parameter+0x584>)
 8019dc4:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8019dc6:	4b4f      	ldr	r3, [pc, #316]	; (8019f04 <input_parameter+0x580>)
 8019dc8:	4a50      	ldr	r2, [pc, #320]	; (8019f0c <input_parameter+0x588>)
 8019dca:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8019dcc:	4b4d      	ldr	r3, [pc, #308]	; (8019f04 <input_parameter+0x580>)
 8019dce:	4a50      	ldr	r2, [pc, #320]	; (8019f10 <input_parameter+0x58c>)
 8019dd0:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8019dd2:	4b4c      	ldr	r3, [pc, #304]	; (8019f04 <input_parameter+0x580>)
 8019dd4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8019dd8:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8019dda:	4b4a      	ldr	r3, [pc, #296]	; (8019f04 <input_parameter+0x580>)
 8019ddc:	4a3c      	ldr	r2, [pc, #240]	; (8019ed0 <input_parameter+0x54c>)
 8019dde:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8019de0:	4b48      	ldr	r3, [pc, #288]	; (8019f04 <input_parameter+0x580>)
 8019de2:	4a4d      	ldr	r2, [pc, #308]	; (8019f18 <input_parameter+0x594>)
 8019de4:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8019de6:	4b47      	ldr	r3, [pc, #284]	; (8019f04 <input_parameter+0x580>)
 8019de8:	4a4c      	ldr	r2, [pc, #304]	; (8019f1c <input_parameter+0x598>)
 8019dea:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8019dec:	4b45      	ldr	r3, [pc, #276]	; (8019f04 <input_parameter+0x580>)
 8019dee:	4a4c      	ldr	r2, [pc, #304]	; (8019f20 <input_parameter+0x59c>)
 8019df0:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8019df2:	4b44      	ldr	r3, [pc, #272]	; (8019f04 <input_parameter+0x580>)
 8019df4:	4a4a      	ldr	r2, [pc, #296]	; (8019f20 <input_parameter+0x59c>)
 8019df6:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8019df8:	4b42      	ldr	r3, [pc, #264]	; (8019f04 <input_parameter+0x580>)
 8019dfa:	4a35      	ldr	r2, [pc, #212]	; (8019ed0 <input_parameter+0x54c>)
 8019dfc:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8019dfe:	4b41      	ldr	r3, [pc, #260]	; (8019f04 <input_parameter+0x580>)
 8019e00:	4a45      	ldr	r2, [pc, #276]	; (8019f18 <input_parameter+0x594>)
 8019e02:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8019e04:	4b3f      	ldr	r3, [pc, #252]	; (8019f04 <input_parameter+0x580>)
 8019e06:	4a45      	ldr	r2, [pc, #276]	; (8019f1c <input_parameter+0x598>)
 8019e08:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8019e0a:	4b3e      	ldr	r3, [pc, #248]	; (8019f04 <input_parameter+0x580>)
 8019e0c:	4a44      	ldr	r2, [pc, #272]	; (8019f20 <input_parameter+0x59c>)
 8019e0e:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8019e10:	4b3c      	ldr	r3, [pc, #240]	; (8019f04 <input_parameter+0x580>)
 8019e12:	4a39      	ldr	r2, [pc, #228]	; (8019ef8 <input_parameter+0x574>)
 8019e14:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8019e16:	4b3b      	ldr	r3, [pc, #236]	; (8019f04 <input_parameter+0x580>)
 8019e18:	4a2d      	ldr	r2, [pc, #180]	; (8019ed0 <input_parameter+0x54c>)
 8019e1a:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8019e1c:	4b39      	ldr	r3, [pc, #228]	; (8019f04 <input_parameter+0x580>)
 8019e1e:	4a41      	ldr	r2, [pc, #260]	; (8019f24 <input_parameter+0x5a0>)
 8019e20:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8019e22:	4b38      	ldr	r3, [pc, #224]	; (8019f04 <input_parameter+0x580>)
 8019e24:	4a40      	ldr	r2, [pc, #256]	; (8019f28 <input_parameter+0x5a4>)
 8019e26:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8019e28:	4b36      	ldr	r3, [pc, #216]	; (8019f04 <input_parameter+0x580>)
 8019e2a:	4a40      	ldr	r2, [pc, #256]	; (8019f2c <input_parameter+0x5a8>)
 8019e2c:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8019e2e:	4b35      	ldr	r3, [pc, #212]	; (8019f04 <input_parameter+0x580>)
 8019e30:	4a3f      	ldr	r2, [pc, #252]	; (8019f30 <input_parameter+0x5ac>)
 8019e32:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8019e34:	4b33      	ldr	r3, [pc, #204]	; (8019f04 <input_parameter+0x580>)
 8019e36:	4a26      	ldr	r2, [pc, #152]	; (8019ed0 <input_parameter+0x54c>)
 8019e38:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8019e3a:	4b32      	ldr	r3, [pc, #200]	; (8019f04 <input_parameter+0x580>)
 8019e3c:	4a3d      	ldr	r2, [pc, #244]	; (8019f34 <input_parameter+0x5b0>)
 8019e3e:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8019e40:	4b30      	ldr	r3, [pc, #192]	; (8019f04 <input_parameter+0x580>)
 8019e42:	4a39      	ldr	r2, [pc, #228]	; (8019f28 <input_parameter+0x5a4>)
 8019e44:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8019e46:	4b2f      	ldr	r3, [pc, #188]	; (8019f04 <input_parameter+0x580>)
 8019e48:	4a38      	ldr	r2, [pc, #224]	; (8019f2c <input_parameter+0x5a8>)
 8019e4a:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8019e4c:	4b2d      	ldr	r3, [pc, #180]	; (8019f04 <input_parameter+0x580>)
 8019e4e:	4a3a      	ldr	r2, [pc, #232]	; (8019f38 <input_parameter+0x5b4>)
 8019e50:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8019e52:	4b2c      	ldr	r3, [pc, #176]	; (8019f04 <input_parameter+0x580>)
 8019e54:	4a1e      	ldr	r2, [pc, #120]	; (8019ed0 <input_parameter+0x54c>)
 8019e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8019e5a:	4b2a      	ldr	r3, [pc, #168]	; (8019f04 <input_parameter+0x580>)
 8019e5c:	4a37      	ldr	r2, [pc, #220]	; (8019f3c <input_parameter+0x5b8>)
 8019e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8019e62:	4b28      	ldr	r3, [pc, #160]	; (8019f04 <input_parameter+0x580>)
 8019e64:	4a36      	ldr	r2, [pc, #216]	; (8019f40 <input_parameter+0x5bc>)
 8019e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8019e6a:	4b26      	ldr	r3, [pc, #152]	; (8019f04 <input_parameter+0x580>)
 8019e6c:	4a35      	ldr	r2, [pc, #212]	; (8019f44 <input_parameter+0x5c0>)
 8019e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8019e72:	4b24      	ldr	r3, [pc, #144]	; (8019f04 <input_parameter+0x580>)
 8019e74:	4a34      	ldr	r2, [pc, #208]	; (8019f48 <input_parameter+0x5c4>)
 8019e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8019e7a:	4b22      	ldr	r3, [pc, #136]	; (8019f04 <input_parameter+0x580>)
 8019e7c:	4a14      	ldr	r2, [pc, #80]	; (8019ed0 <input_parameter+0x54c>)
 8019e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8019e82:	4b20      	ldr	r3, [pc, #128]	; (8019f04 <input_parameter+0x580>)
 8019e84:	4a31      	ldr	r2, [pc, #196]	; (8019f4c <input_parameter+0x5c8>)
 8019e86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8019e8a:	4b1e      	ldr	r3, [pc, #120]	; (8019f04 <input_parameter+0x580>)
 8019e8c:	4a2c      	ldr	r2, [pc, #176]	; (8019f40 <input_parameter+0x5bc>)
 8019e8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8019e92:	4b1c      	ldr	r3, [pc, #112]	; (8019f04 <input_parameter+0x580>)
 8019e94:	4a2e      	ldr	r2, [pc, #184]	; (8019f50 <input_parameter+0x5cc>)
 8019e96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8019e9a:	4b1a      	ldr	r3, [pc, #104]	; (8019f04 <input_parameter+0x580>)
 8019e9c:	4a2d      	ldr	r2, [pc, #180]	; (8019f54 <input_parameter+0x5d0>)
 8019e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8019ea2:	4b18      	ldr	r3, [pc, #96]	; (8019f04 <input_parameter+0x580>)
 8019ea4:	4a0a      	ldr	r2, [pc, #40]	; (8019ed0 <input_parameter+0x54c>)
 8019ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8019eaa:	4b16      	ldr	r3, [pc, #88]	; (8019f04 <input_parameter+0x580>)
 8019eac:	4a2a      	ldr	r2, [pc, #168]	; (8019f58 <input_parameter+0x5d4>)
 8019eae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8019eb2:	4b14      	ldr	r3, [pc, #80]	; (8019f04 <input_parameter+0x580>)
 8019eb4:	4a1c      	ldr	r2, [pc, #112]	; (8019f28 <input_parameter+0x5a4>)
 8019eb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019eba:	e04f      	b.n	8019f5c <input_parameter+0x5d8>
 8019ebc:	42860000 	.word	0x42860000
 8019ec0:	2000f6d4 	.word	0x2000f6d4
 8019ec4:	42920000 	.word	0x42920000
 8019ec8:	44188000 	.word	0x44188000
 8019ecc:	45fa0000 	.word	0x45fa0000
 8019ed0:	44160000 	.word	0x44160000
 8019ed4:	461c4000 	.word	0x461c4000
 8019ed8:	42640000 	.word	0x42640000
 8019edc:	42500000 	.word	0x42500000
 8019ee0:	44250000 	.word	0x44250000
 8019ee4:	425c0000 	.word	0x425c0000
 8019ee8:	42c80000 	.word	0x42c80000
 8019eec:	42ce0000 	.word	0x42ce0000
 8019ef0:	442f0000 	.word	0x442f0000
 8019ef4:	462be000 	.word	0x462be000
 8019ef8:	420c0000 	.word	0x420c0000
 8019efc:	42600000 	.word	0x42600000
 8019f00:	42700000 	.word	0x42700000
 8019f04:	2000f81c 	.word	0x2000f81c
 8019f08:	44898000 	.word	0x44898000
 8019f0c:	476a6000 	.word	0x476a6000
 8019f10:	40a00000 	.word	0x40a00000
 8019f14:	41e00000 	.word	0x41e00000
 8019f18:	446d8000 	.word	0x446d8000
 8019f1c:	466a6000 	.word	0x466a6000
 8019f20:	41f80000 	.word	0x41f80000
 8019f24:	44520000 	.word	0x44520000
 8019f28:	465ac000 	.word	0x465ac000
 8019f2c:	40e00000 	.word	0x40e00000
 8019f30:	41a00000 	.word	0x41a00000
 8019f34:	444d0000 	.word	0x444d0000
 8019f38:	41900000 	.word	0x41900000
 8019f3c:	444f8000 	.word	0x444f8000
 8019f40:	463b8000 	.word	0x463b8000
 8019f44:	41500000 	.word	0x41500000
 8019f48:	42180000 	.word	0x42180000
 8019f4c:	44608000 	.word	0x44608000
 8019f50:	41400000 	.word	0x41400000
 8019f54:	42100000 	.word	0x42100000
 8019f58:	446b0000 	.word	0x446b0000
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8019f5c:	4b9d      	ldr	r3, [pc, #628]	; (801a1d4 <input_parameter+0x850>)
 8019f5e:	4a9e      	ldr	r2, [pc, #632]	; (801a1d8 <input_parameter+0x854>)
 8019f60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8019f64:	4b9b      	ldr	r3, [pc, #620]	; (801a1d4 <input_parameter+0x850>)
 8019f66:	4a9d      	ldr	r2, [pc, #628]	; (801a1dc <input_parameter+0x858>)
 8019f68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8019f6c:	4b99      	ldr	r3, [pc, #612]	; (801a1d4 <input_parameter+0x850>)
 8019f6e:	4a9c      	ldr	r2, [pc, #624]	; (801a1e0 <input_parameter+0x85c>)
 8019f70:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8019f74:	4b97      	ldr	r3, [pc, #604]	; (801a1d4 <input_parameter+0x850>)
 8019f76:	4a9b      	ldr	r2, [pc, #620]	; (801a1e4 <input_parameter+0x860>)
 8019f78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8019f7c:	4b95      	ldr	r3, [pc, #596]	; (801a1d4 <input_parameter+0x850>)
 8019f7e:	4a9a      	ldr	r2, [pc, #616]	; (801a1e8 <input_parameter+0x864>)
 8019f80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8019f84:	4b93      	ldr	r3, [pc, #588]	; (801a1d4 <input_parameter+0x850>)
 8019f86:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019f8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8019f8e:	4b91      	ldr	r3, [pc, #580]	; (801a1d4 <input_parameter+0x850>)
 8019f90:	4a96      	ldr	r2, [pc, #600]	; (801a1ec <input_parameter+0x868>)
 8019f92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8019f96:	4b8f      	ldr	r3, [pc, #572]	; (801a1d4 <input_parameter+0x850>)
 8019f98:	4a91      	ldr	r2, [pc, #580]	; (801a1e0 <input_parameter+0x85c>)
 8019f9a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8019f9e:	4b8d      	ldr	r3, [pc, #564]	; (801a1d4 <input_parameter+0x850>)
 8019fa0:	4a93      	ldr	r2, [pc, #588]	; (801a1f0 <input_parameter+0x86c>)
 8019fa2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8019fa6:	4b8b      	ldr	r3, [pc, #556]	; (801a1d4 <input_parameter+0x850>)
 8019fa8:	4a92      	ldr	r2, [pc, #584]	; (801a1f4 <input_parameter+0x870>)
 8019faa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8019fae:	4b89      	ldr	r3, [pc, #548]	; (801a1d4 <input_parameter+0x850>)
 8019fb0:	4a91      	ldr	r2, [pc, #580]	; (801a1f8 <input_parameter+0x874>)
 8019fb2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8019fb6:	4b87      	ldr	r3, [pc, #540]	; (801a1d4 <input_parameter+0x850>)
 8019fb8:	4a90      	ldr	r2, [pc, #576]	; (801a1fc <input_parameter+0x878>)
 8019fba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8019fbe:	4b85      	ldr	r3, [pc, #532]	; (801a1d4 <input_parameter+0x850>)
 8019fc0:	4a87      	ldr	r2, [pc, #540]	; (801a1e0 <input_parameter+0x85c>)
 8019fc2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8019fc6:	4b83      	ldr	r3, [pc, #524]	; (801a1d4 <input_parameter+0x850>)
 8019fc8:	4a8d      	ldr	r2, [pc, #564]	; (801a200 <input_parameter+0x87c>)
 8019fca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8019fce:	4b81      	ldr	r3, [pc, #516]	; (801a1d4 <input_parameter+0x850>)
 8019fd0:	4a88      	ldr	r2, [pc, #544]	; (801a1f4 <input_parameter+0x870>)
 8019fd2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8019fd6:	4b7f      	ldr	r3, [pc, #508]	; (801a1d4 <input_parameter+0x850>)
 8019fd8:	4a8a      	ldr	r2, [pc, #552]	; (801a204 <input_parameter+0x880>)
 8019fda:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8019fde:	4b7d      	ldr	r3, [pc, #500]	; (801a1d4 <input_parameter+0x850>)
 8019fe0:	4a89      	ldr	r2, [pc, #548]	; (801a208 <input_parameter+0x884>)
 8019fe2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8019fe6:	4b7b      	ldr	r3, [pc, #492]	; (801a1d4 <input_parameter+0x850>)
 8019fe8:	4a7d      	ldr	r2, [pc, #500]	; (801a1e0 <input_parameter+0x85c>)
 8019fea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8019fee:	4b79      	ldr	r3, [pc, #484]	; (801a1d4 <input_parameter+0x850>)
 8019ff0:	4a86      	ldr	r2, [pc, #536]	; (801a20c <input_parameter+0x888>)
 8019ff2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8019ff6:	4b77      	ldr	r3, [pc, #476]	; (801a1d4 <input_parameter+0x850>)
 8019ff8:	4a85      	ldr	r2, [pc, #532]	; (801a210 <input_parameter+0x88c>)
 8019ffa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8019ffe:	4b75      	ldr	r3, [pc, #468]	; (801a1d4 <input_parameter+0x850>)
 801a000:	4a84      	ldr	r2, [pc, #528]	; (801a214 <input_parameter+0x890>)
 801a002:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801a006:	4b73      	ldr	r3, [pc, #460]	; (801a1d4 <input_parameter+0x850>)
 801a008:	4a7c      	ldr	r2, [pc, #496]	; (801a1fc <input_parameter+0x878>)
 801a00a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 801a00e:	4b71      	ldr	r3, [pc, #452]	; (801a1d4 <input_parameter+0x850>)
 801a010:	4a73      	ldr	r2, [pc, #460]	; (801a1e0 <input_parameter+0x85c>)
 801a012:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 801a016:	4b6f      	ldr	r3, [pc, #444]	; (801a1d4 <input_parameter+0x850>)
 801a018:	4a7f      	ldr	r2, [pc, #508]	; (801a218 <input_parameter+0x894>)
 801a01a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801a01e:	4b6d      	ldr	r3, [pc, #436]	; (801a1d4 <input_parameter+0x850>)
 801a020:	4a71      	ldr	r2, [pc, #452]	; (801a1e8 <input_parameter+0x864>)
 801a022:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 801a026:	4b6b      	ldr	r3, [pc, #428]	; (801a1d4 <input_parameter+0x850>)
 801a028:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a02c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 801a030:	4b68      	ldr	r3, [pc, #416]	; (801a1d4 <input_parameter+0x850>)
 801a032:	4a6a      	ldr	r2, [pc, #424]	; (801a1dc <input_parameter+0x858>)
 801a034:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 801a038:	4b66      	ldr	r3, [pc, #408]	; (801a1d4 <input_parameter+0x850>)
 801a03a:	4a69      	ldr	r2, [pc, #420]	; (801a1e0 <input_parameter+0x85c>)
 801a03c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 801a040:	4b64      	ldr	r3, [pc, #400]	; (801a1d4 <input_parameter+0x850>)
 801a042:	4a76      	ldr	r2, [pc, #472]	; (801a21c <input_parameter+0x898>)
 801a044:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 801a048:	4b62      	ldr	r3, [pc, #392]	; (801a1d4 <input_parameter+0x850>)
 801a04a:	4a71      	ldr	r2, [pc, #452]	; (801a210 <input_parameter+0x88c>)
 801a04c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 801a050:	4b60      	ldr	r3, [pc, #384]	; (801a1d4 <input_parameter+0x850>)
 801a052:	4a73      	ldr	r2, [pc, #460]	; (801a220 <input_parameter+0x89c>)
 801a054:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 801a058:	4b5e      	ldr	r3, [pc, #376]	; (801a1d4 <input_parameter+0x850>)
 801a05a:	4a72      	ldr	r2, [pc, #456]	; (801a224 <input_parameter+0x8a0>)
 801a05c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 801a060:	4b5c      	ldr	r3, [pc, #368]	; (801a1d4 <input_parameter+0x850>)
 801a062:	4a5f      	ldr	r2, [pc, #380]	; (801a1e0 <input_parameter+0x85c>)
 801a064:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 801a068:	4b5a      	ldr	r3, [pc, #360]	; (801a1d4 <input_parameter+0x850>)
 801a06a:	4a6f      	ldr	r2, [pc, #444]	; (801a228 <input_parameter+0x8a4>)
 801a06c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 801a070:	4b58      	ldr	r3, [pc, #352]	; (801a1d4 <input_parameter+0x850>)
 801a072:	4a6e      	ldr	r2, [pc, #440]	; (801a22c <input_parameter+0x8a8>)
 801a074:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 801a078:	4b56      	ldr	r3, [pc, #344]	; (801a1d4 <input_parameter+0x850>)
 801a07a:	4a6d      	ldr	r2, [pc, #436]	; (801a230 <input_parameter+0x8ac>)
 801a07c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 801a080:	4b54      	ldr	r3, [pc, #336]	; (801a1d4 <input_parameter+0x850>)
 801a082:	4a68      	ldr	r2, [pc, #416]	; (801a224 <input_parameter+0x8a0>)
 801a084:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 801a088:	4b6a      	ldr	r3, [pc, #424]	; (801a234 <input_parameter+0x8b0>)
 801a08a:	4a6b      	ldr	r2, [pc, #428]	; (801a238 <input_parameter+0x8b4>)
 801a08c:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 801a08e:	4b69      	ldr	r3, [pc, #420]	; (801a234 <input_parameter+0x8b0>)
 801a090:	4a69      	ldr	r2, [pc, #420]	; (801a238 <input_parameter+0x8b4>)
 801a092:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 801a094:	4b67      	ldr	r3, [pc, #412]	; (801a234 <input_parameter+0x8b0>)
 801a096:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 801a098:	4a66      	ldr	r2, [pc, #408]	; (801a234 <input_parameter+0x8b0>)
 801a09a:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 801a09c:	4b65      	ldr	r3, [pc, #404]	; (801a234 <input_parameter+0x8b0>)
 801a09e:	4a67      	ldr	r2, [pc, #412]	; (801a23c <input_parameter+0x8b8>)
 801a0a0:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 801a0a2:	4b64      	ldr	r3, [pc, #400]	; (801a234 <input_parameter+0x8b0>)
 801a0a4:	4a5b      	ldr	r2, [pc, #364]	; (801a214 <input_parameter+0x890>)
 801a0a6:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 801a0a8:	4b62      	ldr	r3, [pc, #392]	; (801a234 <input_parameter+0x8b0>)
 801a0aa:	4a65      	ldr	r2, [pc, #404]	; (801a240 <input_parameter+0x8bc>)
 801a0ac:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 801a0ae:	4b61      	ldr	r3, [pc, #388]	; (801a234 <input_parameter+0x8b0>)
 801a0b0:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 801a0b2:	4a60      	ldr	r2, [pc, #384]	; (801a234 <input_parameter+0x8b0>)
 801a0b4:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 801a0b6:	4b5f      	ldr	r3, [pc, #380]	; (801a234 <input_parameter+0x8b0>)
 801a0b8:	4a60      	ldr	r2, [pc, #384]	; (801a23c <input_parameter+0x8b8>)
 801a0ba:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 801a0bc:	4b5d      	ldr	r3, [pc, #372]	; (801a234 <input_parameter+0x8b0>)
 801a0be:	4a55      	ldr	r2, [pc, #340]	; (801a214 <input_parameter+0x890>)
 801a0c0:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 801a0c2:	4b5c      	ldr	r3, [pc, #368]	; (801a234 <input_parameter+0x8b0>)
 801a0c4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801a0c8:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 801a0ca:	4b5a      	ldr	r3, [pc, #360]	; (801a234 <input_parameter+0x8b0>)
 801a0cc:	4a5a      	ldr	r2, [pc, #360]	; (801a238 <input_parameter+0x8b4>)
 801a0ce:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 801a0d0:	4b58      	ldr	r3, [pc, #352]	; (801a234 <input_parameter+0x8b0>)
 801a0d2:	4a5c      	ldr	r2, [pc, #368]	; (801a244 <input_parameter+0x8c0>)
 801a0d4:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 801a0d6:	4b57      	ldr	r3, [pc, #348]	; (801a234 <input_parameter+0x8b0>)
 801a0d8:	4a5b      	ldr	r2, [pc, #364]	; (801a248 <input_parameter+0x8c4>)
 801a0da:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 801a0dc:	4b55      	ldr	r3, [pc, #340]	; (801a234 <input_parameter+0x8b0>)
 801a0de:	4a5b      	ldr	r2, [pc, #364]	; (801a24c <input_parameter+0x8c8>)
 801a0e0:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 801a0e2:	4b54      	ldr	r3, [pc, #336]	; (801a234 <input_parameter+0x8b0>)
 801a0e4:	4a54      	ldr	r2, [pc, #336]	; (801a238 <input_parameter+0x8b4>)
 801a0e6:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 801a0e8:	4b52      	ldr	r3, [pc, #328]	; (801a234 <input_parameter+0x8b0>)
 801a0ea:	4a56      	ldr	r2, [pc, #344]	; (801a244 <input_parameter+0x8c0>)
 801a0ec:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 801a0ee:	4b51      	ldr	r3, [pc, #324]	; (801a234 <input_parameter+0x8b0>)
 801a0f0:	4a55      	ldr	r2, [pc, #340]	; (801a248 <input_parameter+0x8c4>)
 801a0f2:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 801a0f4:	4b4f      	ldr	r3, [pc, #316]	; (801a234 <input_parameter+0x8b0>)
 801a0f6:	4a56      	ldr	r2, [pc, #344]	; (801a250 <input_parameter+0x8cc>)
 801a0f8:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 801a0fa:	4b4e      	ldr	r3, [pc, #312]	; (801a234 <input_parameter+0x8b0>)
 801a0fc:	4a4e      	ldr	r2, [pc, #312]	; (801a238 <input_parameter+0x8b4>)
 801a0fe:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 801a100:	4b4c      	ldr	r3, [pc, #304]	; (801a234 <input_parameter+0x8b0>)
 801a102:	4a54      	ldr	r2, [pc, #336]	; (801a254 <input_parameter+0x8d0>)
 801a104:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 801a106:	4b4b      	ldr	r3, [pc, #300]	; (801a234 <input_parameter+0x8b0>)
 801a108:	4a45      	ldr	r2, [pc, #276]	; (801a220 <input_parameter+0x89c>)
 801a10a:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 801a10c:	4b49      	ldr	r3, [pc, #292]	; (801a234 <input_parameter+0x8b0>)
 801a10e:	4a45      	ldr	r2, [pc, #276]	; (801a224 <input_parameter+0x8a0>)
 801a110:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 801a112:	4b48      	ldr	r3, [pc, #288]	; (801a234 <input_parameter+0x8b0>)
 801a114:	4a48      	ldr	r2, [pc, #288]	; (801a238 <input_parameter+0x8b4>)
 801a116:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 801a118:	4b46      	ldr	r3, [pc, #280]	; (801a234 <input_parameter+0x8b0>)
 801a11a:	4a4e      	ldr	r2, [pc, #312]	; (801a254 <input_parameter+0x8d0>)
 801a11c:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 801a11e:	4b45      	ldr	r3, [pc, #276]	; (801a234 <input_parameter+0x8b0>)
 801a120:	4a3f      	ldr	r2, [pc, #252]	; (801a220 <input_parameter+0x89c>)
 801a122:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 801a124:	4b43      	ldr	r3, [pc, #268]	; (801a234 <input_parameter+0x8b0>)
 801a126:	4a4c      	ldr	r2, [pc, #304]	; (801a258 <input_parameter+0x8d4>)
 801a128:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 801a12a:	4b42      	ldr	r3, [pc, #264]	; (801a234 <input_parameter+0x8b0>)
 801a12c:	4a42      	ldr	r2, [pc, #264]	; (801a238 <input_parameter+0x8b4>)
 801a12e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 801a132:	4b40      	ldr	r3, [pc, #256]	; (801a234 <input_parameter+0x8b0>)
 801a134:	4a49      	ldr	r2, [pc, #292]	; (801a25c <input_parameter+0x8d8>)
 801a136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 801a13a:	4b3e      	ldr	r3, [pc, #248]	; (801a234 <input_parameter+0x8b0>)
 801a13c:	4a46      	ldr	r2, [pc, #280]	; (801a258 <input_parameter+0x8d4>)
 801a13e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 801a142:	4b3c      	ldr	r3, [pc, #240]	; (801a234 <input_parameter+0x8b0>)
 801a144:	4a46      	ldr	r2, [pc, #280]	; (801a260 <input_parameter+0x8dc>)
 801a146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 801a14a:	4b3a      	ldr	r3, [pc, #232]	; (801a234 <input_parameter+0x8b0>)
 801a14c:	4a3a      	ldr	r2, [pc, #232]	; (801a238 <input_parameter+0x8b4>)
 801a14e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 801a152:	4b38      	ldr	r3, [pc, #224]	; (801a234 <input_parameter+0x8b0>)
 801a154:	4a41      	ldr	r2, [pc, #260]	; (801a25c <input_parameter+0x8d8>)
 801a156:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 801a15a:	4b36      	ldr	r3, [pc, #216]	; (801a234 <input_parameter+0x8b0>)
 801a15c:	4a30      	ldr	r2, [pc, #192]	; (801a220 <input_parameter+0x89c>)
 801a15e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 801a162:	4b34      	ldr	r3, [pc, #208]	; (801a234 <input_parameter+0x8b0>)
 801a164:	4a1d      	ldr	r2, [pc, #116]	; (801a1dc <input_parameter+0x858>)
 801a166:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 801a16a:	4b32      	ldr	r3, [pc, #200]	; (801a234 <input_parameter+0x8b0>)
 801a16c:	4a32      	ldr	r2, [pc, #200]	; (801a238 <input_parameter+0x8b4>)
 801a16e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 801a172:	4b30      	ldr	r3, [pc, #192]	; (801a234 <input_parameter+0x8b0>)
 801a174:	4a3b      	ldr	r2, [pc, #236]	; (801a264 <input_parameter+0x8e0>)
 801a176:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 801a17a:	4b2e      	ldr	r3, [pc, #184]	; (801a234 <input_parameter+0x8b0>)
 801a17c:	4a28      	ldr	r2, [pc, #160]	; (801a220 <input_parameter+0x89c>)
 801a17e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 801a182:	4b2c      	ldr	r3, [pc, #176]	; (801a234 <input_parameter+0x8b0>)
 801a184:	4a38      	ldr	r2, [pc, #224]	; (801a268 <input_parameter+0x8e4>)
 801a186:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 801a18a:	4b2a      	ldr	r3, [pc, #168]	; (801a234 <input_parameter+0x8b0>)
 801a18c:	4a2a      	ldr	r2, [pc, #168]	; (801a238 <input_parameter+0x8b4>)
 801a18e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 801a192:	4b28      	ldr	r3, [pc, #160]	; (801a234 <input_parameter+0x8b0>)
 801a194:	4a35      	ldr	r2, [pc, #212]	; (801a26c <input_parameter+0x8e8>)
 801a196:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 801a19a:	4b26      	ldr	r3, [pc, #152]	; (801a234 <input_parameter+0x8b0>)
 801a19c:	4a34      	ldr	r2, [pc, #208]	; (801a270 <input_parameter+0x8ec>)
 801a19e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 801a1a2:	4b24      	ldr	r3, [pc, #144]	; (801a234 <input_parameter+0x8b0>)
 801a1a4:	4a33      	ldr	r2, [pc, #204]	; (801a274 <input_parameter+0x8f0>)
 801a1a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 801a1aa:	4b22      	ldr	r3, [pc, #136]	; (801a234 <input_parameter+0x8b0>)
 801a1ac:	4a22      	ldr	r2, [pc, #136]	; (801a238 <input_parameter+0x8b4>)
 801a1ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 801a1b2:	4b20      	ldr	r3, [pc, #128]	; (801a234 <input_parameter+0x8b0>)
 801a1b4:	4a29      	ldr	r2, [pc, #164]	; (801a25c <input_parameter+0x8d8>)
 801a1b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 801a1ba:	4b1e      	ldr	r3, [pc, #120]	; (801a234 <input_parameter+0x8b0>)
 801a1bc:	4a28      	ldr	r2, [pc, #160]	; (801a260 <input_parameter+0x8dc>)
 801a1be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 801a1c2:	4b1c      	ldr	r3, [pc, #112]	; (801a234 <input_parameter+0x8b0>)
 801a1c4:	4a0d      	ldr	r2, [pc, #52]	; (801a1fc <input_parameter+0x878>)
 801a1c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 801a1ca:	4b1a      	ldr	r3, [pc, #104]	; (801a234 <input_parameter+0x8b0>)
 801a1cc:	4a1a      	ldr	r2, [pc, #104]	; (801a238 <input_parameter+0x8b4>)
 801a1ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 801a1d2:	e051      	b.n	801a278 <input_parameter+0x8f4>
 801a1d4:	2000f81c 	.word	0x2000f81c
 801a1d8:	41180000 	.word	0x41180000
 801a1dc:	42100000 	.word	0x42100000
 801a1e0:	44160000 	.word	0x44160000
 801a1e4:	44610000 	.word	0x44610000
 801a1e8:	465ac000 	.word	0x465ac000
 801a1ec:	42080000 	.word	0x42080000
 801a1f0:	44340000 	.word	0x44340000
 801a1f4:	463b8000 	.word	0x463b8000
 801a1f8:	422c0000 	.word	0x422c0000
 801a1fc:	41b00000 	.word	0x41b00000
 801a200:	443b8000 	.word	0x443b8000
 801a204:	42200000 	.word	0x42200000
 801a208:	41c00000 	.word	0x41c00000
 801a20c:	44660000 	.word	0x44660000
 801a210:	466a6000 	.word	0x466a6000
 801a214:	40a00000 	.word	0x40a00000
 801a218:	445e8000 	.word	0x445e8000
 801a21c:	446b0000 	.word	0x446b0000
 801a220:	41880000 	.word	0x41880000
 801a224:	41a00000 	.word	0x41a00000
 801a228:	44700000 	.word	0x44700000
 801a22c:	467a0000 	.word	0x467a0000
 801a230:	41200000 	.word	0x41200000
 801a234:	2000f964 	.word	0x2000f964
 801a238:	447a0000 	.word	0x447a0000
 801a23c:	44898000 	.word	0x44898000
 801a240:	41e00000 	.word	0x41e00000
 801a244:	44b54000 	.word	0x44b54000
 801a248:	41e80000 	.word	0x41e80000
 801a24c:	41f80000 	.word	0x41f80000
 801a250:	420c0000 	.word	0x420c0000
 801a254:	44af0000 	.word	0x44af0000
 801a258:	41900000 	.word	0x41900000
 801a25c:	44a28000 	.word	0x44a28000
 801a260:	42180000 	.word	0x42180000
 801a264:	44c6c000 	.word	0x44c6c000
 801a268:	41700000 	.word	0x41700000
 801a26c:	44c30000 	.word	0x44c30000
 801a270:	41600000 	.word	0x41600000
 801a274:	41400000 	.word	0x41400000
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 801a278:	4ba0      	ldr	r3, [pc, #640]	; (801a4fc <input_parameter+0xb78>)
 801a27a:	4aa1      	ldr	r2, [pc, #644]	; (801a500 <input_parameter+0xb7c>)
 801a27c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 801a280:	4b9e      	ldr	r3, [pc, #632]	; (801a4fc <input_parameter+0xb78>)
 801a282:	4aa0      	ldr	r2, [pc, #640]	; (801a504 <input_parameter+0xb80>)
 801a284:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 801a288:	4b9c      	ldr	r3, [pc, #624]	; (801a4fc <input_parameter+0xb78>)
 801a28a:	4a9f      	ldr	r2, [pc, #636]	; (801a508 <input_parameter+0xb84>)
 801a28c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 801a290:	4b9a      	ldr	r3, [pc, #616]	; (801a4fc <input_parameter+0xb78>)
 801a292:	4a9e      	ldr	r2, [pc, #632]	; (801a50c <input_parameter+0xb88>)
 801a294:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 801a298:	4b98      	ldr	r3, [pc, #608]	; (801a4fc <input_parameter+0xb78>)
 801a29a:	4a9d      	ldr	r2, [pc, #628]	; (801a510 <input_parameter+0xb8c>)
 801a29c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 801a2a0:	4b96      	ldr	r3, [pc, #600]	; (801a4fc <input_parameter+0xb78>)
 801a2a2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801a2a6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 801a2aa:	4b94      	ldr	r3, [pc, #592]	; (801a4fc <input_parameter+0xb78>)
 801a2ac:	4a99      	ldr	r2, [pc, #612]	; (801a514 <input_parameter+0xb90>)
 801a2ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 801a2b2:	4b92      	ldr	r3, [pc, #584]	; (801a4fc <input_parameter+0xb78>)
 801a2b4:	4a95      	ldr	r2, [pc, #596]	; (801a50c <input_parameter+0xb88>)
 801a2b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 801a2ba:	4b90      	ldr	r3, [pc, #576]	; (801a4fc <input_parameter+0xb78>)
 801a2bc:	4a94      	ldr	r2, [pc, #592]	; (801a510 <input_parameter+0xb8c>)
 801a2be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 801a2c2:	4b8e      	ldr	r3, [pc, #568]	; (801a4fc <input_parameter+0xb78>)
 801a2c4:	4a94      	ldr	r2, [pc, #592]	; (801a518 <input_parameter+0xb94>)
 801a2c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 801a2ca:	4b8c      	ldr	r3, [pc, #560]	; (801a4fc <input_parameter+0xb78>)
 801a2cc:	4a8d      	ldr	r2, [pc, #564]	; (801a504 <input_parameter+0xb80>)
 801a2ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 801a2d2:	4b8a      	ldr	r3, [pc, #552]	; (801a4fc <input_parameter+0xb78>)
 801a2d4:	4a8d      	ldr	r2, [pc, #564]	; (801a50c <input_parameter+0xb88>)
 801a2d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 801a2da:	4b88      	ldr	r3, [pc, #544]	; (801a4fc <input_parameter+0xb78>)
 801a2dc:	4a8f      	ldr	r2, [pc, #572]	; (801a51c <input_parameter+0xb98>)
 801a2de:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 801a2e2:	4b86      	ldr	r3, [pc, #536]	; (801a4fc <input_parameter+0xb78>)
 801a2e4:	4a8e      	ldr	r2, [pc, #568]	; (801a520 <input_parameter+0xb9c>)
 801a2e6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 801a2ea:	4b84      	ldr	r3, [pc, #528]	; (801a4fc <input_parameter+0xb78>)
 801a2ec:	4a8d      	ldr	r2, [pc, #564]	; (801a524 <input_parameter+0xba0>)
 801a2ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 801a2f2:	4b82      	ldr	r3, [pc, #520]	; (801a4fc <input_parameter+0xb78>)
 801a2f4:	4a85      	ldr	r2, [pc, #532]	; (801a50c <input_parameter+0xb88>)
 801a2f6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 801a2fa:	4b80      	ldr	r3, [pc, #512]	; (801a4fc <input_parameter+0xb78>)
 801a2fc:	4a87      	ldr	r2, [pc, #540]	; (801a51c <input_parameter+0xb98>)
 801a2fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 801a302:	4b7e      	ldr	r3, [pc, #504]	; (801a4fc <input_parameter+0xb78>)
 801a304:	4a88      	ldr	r2, [pc, #544]	; (801a528 <input_parameter+0xba4>)
 801a306:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 801a30a:	4b7c      	ldr	r3, [pc, #496]	; (801a4fc <input_parameter+0xb78>)
 801a30c:	4a85      	ldr	r2, [pc, #532]	; (801a524 <input_parameter+0xba0>)
 801a30e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 801a312:	4b86      	ldr	r3, [pc, #536]	; (801a52c <input_parameter+0xba8>)
 801a314:	4a86      	ldr	r2, [pc, #536]	; (801a530 <input_parameter+0xbac>)
 801a316:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 801a318:	4b84      	ldr	r3, [pc, #528]	; (801a52c <input_parameter+0xba8>)
 801a31a:	4a85      	ldr	r2, [pc, #532]	; (801a530 <input_parameter+0xbac>)
 801a31c:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801a31e:	4b83      	ldr	r3, [pc, #524]	; (801a52c <input_parameter+0xba8>)
 801a320:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 801a322:	4a82      	ldr	r2, [pc, #520]	; (801a52c <input_parameter+0xba8>)
 801a324:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 801a326:	4b81      	ldr	r3, [pc, #516]	; (801a52c <input_parameter+0xba8>)
 801a328:	4a82      	ldr	r2, [pc, #520]	; (801a534 <input_parameter+0xbb0>)
 801a32a:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 801a32c:	4b7f      	ldr	r3, [pc, #508]	; (801a52c <input_parameter+0xba8>)
 801a32e:	4a82      	ldr	r2, [pc, #520]	; (801a538 <input_parameter+0xbb4>)
 801a330:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 801a332:	4b7e      	ldr	r3, [pc, #504]	; (801a52c <input_parameter+0xba8>)
 801a334:	4a81      	ldr	r2, [pc, #516]	; (801a53c <input_parameter+0xbb8>)
 801a336:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801a338:	4b7c      	ldr	r3, [pc, #496]	; (801a52c <input_parameter+0xba8>)
 801a33a:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 801a33c:	4a7b      	ldr	r2, [pc, #492]	; (801a52c <input_parameter+0xba8>)
 801a33e:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 801a340:	4b7a      	ldr	r3, [pc, #488]	; (801a52c <input_parameter+0xba8>)
 801a342:	4a7c      	ldr	r2, [pc, #496]	; (801a534 <input_parameter+0xbb0>)
 801a344:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 801a346:	4b79      	ldr	r3, [pc, #484]	; (801a52c <input_parameter+0xba8>)
 801a348:	4a7b      	ldr	r2, [pc, #492]	; (801a538 <input_parameter+0xbb4>)
 801a34a:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 801a34c:	4b77      	ldr	r3, [pc, #476]	; (801a52c <input_parameter+0xba8>)
 801a34e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801a352:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 801a354:	4b75      	ldr	r3, [pc, #468]	; (801a52c <input_parameter+0xba8>)
 801a356:	4a76      	ldr	r2, [pc, #472]	; (801a530 <input_parameter+0xbac>)
 801a358:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 801a35a:	4b74      	ldr	r3, [pc, #464]	; (801a52c <input_parameter+0xba8>)
 801a35c:	4a78      	ldr	r2, [pc, #480]	; (801a540 <input_parameter+0xbbc>)
 801a35e:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 801a360:	4b72      	ldr	r3, [pc, #456]	; (801a52c <input_parameter+0xba8>)
 801a362:	4a70      	ldr	r2, [pc, #448]	; (801a524 <input_parameter+0xba0>)
 801a364:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 801a366:	4b71      	ldr	r3, [pc, #452]	; (801a52c <input_parameter+0xba8>)
 801a368:	4a76      	ldr	r2, [pc, #472]	; (801a544 <input_parameter+0xbc0>)
 801a36a:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 801a36c:	4b6f      	ldr	r3, [pc, #444]	; (801a52c <input_parameter+0xba8>)
 801a36e:	4a70      	ldr	r2, [pc, #448]	; (801a530 <input_parameter+0xbac>)
 801a370:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 801a372:	4b6e      	ldr	r3, [pc, #440]	; (801a52c <input_parameter+0xba8>)
 801a374:	4a72      	ldr	r2, [pc, #456]	; (801a540 <input_parameter+0xbbc>)
 801a376:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 801a378:	4b6c      	ldr	r3, [pc, #432]	; (801a52c <input_parameter+0xba8>)
 801a37a:	4a72      	ldr	r2, [pc, #456]	; (801a544 <input_parameter+0xbc0>)
 801a37c:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801a37e:	4b6b      	ldr	r3, [pc, #428]	; (801a52c <input_parameter+0xba8>)
 801a380:	4a71      	ldr	r2, [pc, #452]	; (801a548 <input_parameter+0xbc4>)
 801a382:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 801a384:	4b69      	ldr	r3, [pc, #420]	; (801a52c <input_parameter+0xba8>)
 801a386:	4a6a      	ldr	r2, [pc, #424]	; (801a530 <input_parameter+0xbac>)
 801a388:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 801a38a:	4b68      	ldr	r3, [pc, #416]	; (801a52c <input_parameter+0xba8>)
 801a38c:	4a6f      	ldr	r2, [pc, #444]	; (801a54c <input_parameter+0xbc8>)
 801a38e:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 801a390:	4b66      	ldr	r3, [pc, #408]	; (801a52c <input_parameter+0xba8>)
 801a392:	4a6f      	ldr	r2, [pc, #444]	; (801a550 <input_parameter+0xbcc>)
 801a394:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 801a396:	4b65      	ldr	r3, [pc, #404]	; (801a52c <input_parameter+0xba8>)
 801a398:	4a6a      	ldr	r2, [pc, #424]	; (801a544 <input_parameter+0xbc0>)
 801a39a:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 801a39c:	4b63      	ldr	r3, [pc, #396]	; (801a52c <input_parameter+0xba8>)
 801a39e:	4a64      	ldr	r2, [pc, #400]	; (801a530 <input_parameter+0xbac>)
 801a3a0:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 801a3a2:	4b62      	ldr	r3, [pc, #392]	; (801a52c <input_parameter+0xba8>)
 801a3a4:	4a69      	ldr	r2, [pc, #420]	; (801a54c <input_parameter+0xbc8>)
 801a3a6:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 801a3a8:	4b60      	ldr	r3, [pc, #384]	; (801a52c <input_parameter+0xba8>)
 801a3aa:	4a6a      	ldr	r2, [pc, #424]	; (801a554 <input_parameter+0xbd0>)
 801a3ac:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 801a3ae:	4b5f      	ldr	r3, [pc, #380]	; (801a52c <input_parameter+0xba8>)
 801a3b0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a3b4:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 801a3b6:	4b5d      	ldr	r3, [pc, #372]	; (801a52c <input_parameter+0xba8>)
 801a3b8:	4a5d      	ldr	r2, [pc, #372]	; (801a530 <input_parameter+0xbac>)
 801a3ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 801a3be:	4b5b      	ldr	r3, [pc, #364]	; (801a52c <input_parameter+0xba8>)
 801a3c0:	4a65      	ldr	r2, [pc, #404]	; (801a558 <input_parameter+0xbd4>)
 801a3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 801a3c6:	4b59      	ldr	r3, [pc, #356]	; (801a52c <input_parameter+0xba8>)
 801a3c8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 801a3d0:	4b56      	ldr	r3, [pc, #344]	; (801a52c <input_parameter+0xba8>)
 801a3d2:	4a62      	ldr	r2, [pc, #392]	; (801a55c <input_parameter+0xbd8>)
 801a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 801a3d8:	4b54      	ldr	r3, [pc, #336]	; (801a52c <input_parameter+0xba8>)
 801a3da:	4a55      	ldr	r2, [pc, #340]	; (801a530 <input_parameter+0xbac>)
 801a3dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 801a3e0:	4b52      	ldr	r3, [pc, #328]	; (801a52c <input_parameter+0xba8>)
 801a3e2:	4a5d      	ldr	r2, [pc, #372]	; (801a558 <input_parameter+0xbd4>)
 801a3e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 801a3e8:	4b50      	ldr	r3, [pc, #320]	; (801a52c <input_parameter+0xba8>)
 801a3ea:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801a3ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 801a3f2:	4b4e      	ldr	r3, [pc, #312]	; (801a52c <input_parameter+0xba8>)
 801a3f4:	4a59      	ldr	r2, [pc, #356]	; (801a55c <input_parameter+0xbd8>)
 801a3f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 801a3fa:	4b4c      	ldr	r3, [pc, #304]	; (801a52c <input_parameter+0xba8>)
 801a3fc:	4a4c      	ldr	r2, [pc, #304]	; (801a530 <input_parameter+0xbac>)
 801a3fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 801a402:	4b4a      	ldr	r3, [pc, #296]	; (801a52c <input_parameter+0xba8>)
 801a404:	4a56      	ldr	r2, [pc, #344]	; (801a560 <input_parameter+0xbdc>)
 801a406:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 801a40a:	4b48      	ldr	r3, [pc, #288]	; (801a52c <input_parameter+0xba8>)
 801a40c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801a410:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 801a414:	4b45      	ldr	r3, [pc, #276]	; (801a52c <input_parameter+0xba8>)
 801a416:	4a3f      	ldr	r2, [pc, #252]	; (801a514 <input_parameter+0xb90>)
 801a418:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 801a41c:	4b43      	ldr	r3, [pc, #268]	; (801a52c <input_parameter+0xba8>)
 801a41e:	4a44      	ldr	r2, [pc, #272]	; (801a530 <input_parameter+0xbac>)
 801a420:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 801a424:	4b41      	ldr	r3, [pc, #260]	; (801a52c <input_parameter+0xba8>)
 801a426:	4a4e      	ldr	r2, [pc, #312]	; (801a560 <input_parameter+0xbdc>)
 801a428:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 801a42c:	4b3f      	ldr	r3, [pc, #252]	; (801a52c <input_parameter+0xba8>)
 801a42e:	4a49      	ldr	r2, [pc, #292]	; (801a554 <input_parameter+0xbd0>)
 801a430:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 801a434:	4b3d      	ldr	r3, [pc, #244]	; (801a52c <input_parameter+0xba8>)
 801a436:	4a43      	ldr	r2, [pc, #268]	; (801a544 <input_parameter+0xbc0>)
 801a438:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 801a43c:	4b3b      	ldr	r3, [pc, #236]	; (801a52c <input_parameter+0xba8>)
 801a43e:	4a3c      	ldr	r2, [pc, #240]	; (801a530 <input_parameter+0xbac>)
 801a440:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 801a444:	4b39      	ldr	r3, [pc, #228]	; (801a52c <input_parameter+0xba8>)
 801a446:	4a47      	ldr	r2, [pc, #284]	; (801a564 <input_parameter+0xbe0>)
 801a448:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 801a44c:	4b37      	ldr	r3, [pc, #220]	; (801a52c <input_parameter+0xba8>)
 801a44e:	4a46      	ldr	r2, [pc, #280]	; (801a568 <input_parameter+0xbe4>)
 801a450:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 801a454:	4b35      	ldr	r3, [pc, #212]	; (801a52c <input_parameter+0xba8>)
 801a456:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801a45a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 801a45e:	4b33      	ldr	r3, [pc, #204]	; (801a52c <input_parameter+0xba8>)
 801a460:	4a33      	ldr	r2, [pc, #204]	; (801a530 <input_parameter+0xbac>)
 801a462:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 801a466:	4b31      	ldr	r3, [pc, #196]	; (801a52c <input_parameter+0xba8>)
 801a468:	4a3e      	ldr	r2, [pc, #248]	; (801a564 <input_parameter+0xbe0>)
 801a46a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 801a46e:	4b2f      	ldr	r3, [pc, #188]	; (801a52c <input_parameter+0xba8>)
 801a470:	4a25      	ldr	r2, [pc, #148]	; (801a508 <input_parameter+0xb84>)
 801a472:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 801a476:	4b2d      	ldr	r3, [pc, #180]	; (801a52c <input_parameter+0xba8>)
 801a478:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801a47c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 801a480:	4b2a      	ldr	r3, [pc, #168]	; (801a52c <input_parameter+0xba8>)
 801a482:	4a2b      	ldr	r2, [pc, #172]	; (801a530 <input_parameter+0xbac>)
 801a484:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 801a488:	4b28      	ldr	r3, [pc, #160]	; (801a52c <input_parameter+0xba8>)
 801a48a:	4a35      	ldr	r2, [pc, #212]	; (801a560 <input_parameter+0xbdc>)
 801a48c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 801a490:	4b26      	ldr	r3, [pc, #152]	; (801a52c <input_parameter+0xba8>)
 801a492:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a496:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 801a49a:	4b24      	ldr	r3, [pc, #144]	; (801a52c <input_parameter+0xba8>)
 801a49c:	4a19      	ldr	r2, [pc, #100]	; (801a504 <input_parameter+0xb80>)
 801a49e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801a4a2:	4b22      	ldr	r3, [pc, #136]	; (801a52c <input_parameter+0xba8>)
 801a4a4:	4a22      	ldr	r2, [pc, #136]	; (801a530 <input_parameter+0xbac>)
 801a4a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 801a4aa:	4b20      	ldr	r3, [pc, #128]	; (801a52c <input_parameter+0xba8>)
 801a4ac:	4a2c      	ldr	r2, [pc, #176]	; (801a560 <input_parameter+0xbdc>)
 801a4ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 801a4b2:	4b1e      	ldr	r3, [pc, #120]	; (801a52c <input_parameter+0xba8>)
 801a4b4:	4a18      	ldr	r2, [pc, #96]	; (801a518 <input_parameter+0xb94>)
 801a4b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 801a4ba:	4b1c      	ldr	r3, [pc, #112]	; (801a52c <input_parameter+0xba8>)
 801a4bc:	4a11      	ldr	r2, [pc, #68]	; (801a504 <input_parameter+0xb80>)
 801a4be:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 801a4c2:	4b1a      	ldr	r3, [pc, #104]	; (801a52c <input_parameter+0xba8>)
 801a4c4:	4a1a      	ldr	r2, [pc, #104]	; (801a530 <input_parameter+0xbac>)
 801a4c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 801a4ca:	4b18      	ldr	r3, [pc, #96]	; (801a52c <input_parameter+0xba8>)
 801a4cc:	4a27      	ldr	r2, [pc, #156]	; (801a56c <input_parameter+0xbe8>)
 801a4ce:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 801a4d2:	4b16      	ldr	r3, [pc, #88]	; (801a52c <input_parameter+0xba8>)
 801a4d4:	4a14      	ldr	r2, [pc, #80]	; (801a528 <input_parameter+0xba4>)
 801a4d6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 801a4da:	4b14      	ldr	r3, [pc, #80]	; (801a52c <input_parameter+0xba8>)
 801a4dc:	4a1a      	ldr	r2, [pc, #104]	; (801a548 <input_parameter+0xbc4>)
 801a4de:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 801a4e2:	4b12      	ldr	r3, [pc, #72]	; (801a52c <input_parameter+0xba8>)
 801a4e4:	4a12      	ldr	r2, [pc, #72]	; (801a530 <input_parameter+0xbac>)
 801a4e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 801a4ea:	4b10      	ldr	r3, [pc, #64]	; (801a52c <input_parameter+0xba8>)
 801a4ec:	4a1f      	ldr	r2, [pc, #124]	; (801a56c <input_parameter+0xbe8>)
 801a4ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 801a4f2:	4b0e      	ldr	r3, [pc, #56]	; (801a52c <input_parameter+0xba8>)
 801a4f4:	4a1e      	ldr	r2, [pc, #120]	; (801a570 <input_parameter+0xbec>)
 801a4f6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801a4fa:	e03b      	b.n	801a574 <input_parameter+0xbf0>
 801a4fc:	2000f964 	.word	0x2000f964
 801a500:	44a28000 	.word	0x44a28000
 801a504:	41f00000 	.word	0x41f00000
 801a508:	41c00000 	.word	0x41c00000
 801a50c:	447a0000 	.word	0x447a0000
 801a510:	44cf8000 	.word	0x44cf8000
 801a514:	41b00000 	.word	0x41b00000
 801a518:	41200000 	.word	0x41200000
 801a51c:	44dac000 	.word	0x44dac000
 801a520:	41840000 	.word	0x41840000
 801a524:	41a80000 	.word	0x41a80000
 801a528:	41600000 	.word	0x41600000
 801a52c:	2000faac 	.word	0x2000faac
 801a530:	44960000 	.word	0x44960000
 801a534:	44898000 	.word	0x44898000
 801a538:	40a00000 	.word	0x40a00000
 801a53c:	41e00000 	.word	0x41e00000
 801a540:	44bcc000 	.word	0x44bcc000
 801a544:	41a00000 	.word	0x41a00000
 801a548:	41c80000 	.word	0x41c80000
 801a54c:	44ce4000 	.word	0x44ce4000
 801a550:	41880000 	.word	0x41880000
 801a554:	41700000 	.word	0x41700000
 801a558:	44c1c000 	.word	0x44c1c000
 801a55c:	421c0000 	.word	0x421c0000
 801a560:	44e74000 	.word	0x44e74000
 801a564:	44af0000 	.word	0x44af0000
 801a568:	42040000 	.word	0x42040000
 801a56c:	44f3c000 	.word	0x44f3c000
 801a570:	41080000 	.word	0x41080000
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 801a574:	4b6f      	ldr	r3, [pc, #444]	; (801a734 <input_parameter+0xdb0>)
 801a576:	4a70      	ldr	r2, [pc, #448]	; (801a738 <input_parameter+0xdb4>)
 801a578:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 801a57c:	4b6f      	ldr	r3, [pc, #444]	; (801a73c <input_parameter+0xdb8>)
 801a57e:	4a70      	ldr	r2, [pc, #448]	; (801a740 <input_parameter+0xdbc>)
 801a580:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 801a582:	4b6e      	ldr	r3, [pc, #440]	; (801a73c <input_parameter+0xdb8>)
 801a584:	4a6e      	ldr	r2, [pc, #440]	; (801a740 <input_parameter+0xdbc>)
 801a586:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 801a588:	4b6c      	ldr	r3, [pc, #432]	; (801a73c <input_parameter+0xdb8>)
 801a58a:	4a6d      	ldr	r2, [pc, #436]	; (801a740 <input_parameter+0xdbc>)
 801a58c:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 801a58e:	4b6b      	ldr	r3, [pc, #428]	; (801a73c <input_parameter+0xdb8>)
 801a590:	4a6c      	ldr	r2, [pc, #432]	; (801a744 <input_parameter+0xdc0>)
 801a592:	63da      	str	r2, [r3, #60]	; 0x3c
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 801a594:	4b69      	ldr	r3, [pc, #420]	; (801a73c <input_parameter+0xdb8>)
 801a596:	4a6c      	ldr	r2, [pc, #432]	; (801a748 <input_parameter+0xdc4>)
 801a598:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801a59a:	4b68      	ldr	r3, [pc, #416]	; (801a73c <input_parameter+0xdb8>)
 801a59c:	4a6b      	ldr	r2, [pc, #428]	; (801a74c <input_parameter+0xdc8>)
 801a59e:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 801a5a0:	4b66      	ldr	r3, [pc, #408]	; (801a73c <input_parameter+0xdb8>)
 801a5a2:	4a67      	ldr	r2, [pc, #412]	; (801a740 <input_parameter+0xdbc>)
 801a5a4:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 801a5a6:	4b65      	ldr	r3, [pc, #404]	; (801a73c <input_parameter+0xdb8>)
 801a5a8:	4a66      	ldr	r2, [pc, #408]	; (801a744 <input_parameter+0xdc0>)
 801a5aa:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 801a5ac:	4b63      	ldr	r3, [pc, #396]	; (801a73c <input_parameter+0xdb8>)
 801a5ae:	4a68      	ldr	r2, [pc, #416]	; (801a750 <input_parameter+0xdcc>)
 801a5b0:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 801a5b2:	4b62      	ldr	r3, [pc, #392]	; (801a73c <input_parameter+0xdb8>)
 801a5b4:	4a67      	ldr	r2, [pc, #412]	; (801a754 <input_parameter+0xdd0>)
 801a5b6:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 801a5b8:	4b60      	ldr	r3, [pc, #384]	; (801a73c <input_parameter+0xdb8>)
 801a5ba:	4a61      	ldr	r2, [pc, #388]	; (801a740 <input_parameter+0xdbc>)
 801a5bc:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 801a5be:	4b5f      	ldr	r3, [pc, #380]	; (801a73c <input_parameter+0xdb8>)
 801a5c0:	4a65      	ldr	r2, [pc, #404]	; (801a758 <input_parameter+0xdd4>)
 801a5c2:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 801a5c4:	4b5d      	ldr	r3, [pc, #372]	; (801a73c <input_parameter+0xdb8>)
 801a5c6:	4a65      	ldr	r2, [pc, #404]	; (801a75c <input_parameter+0xdd8>)
 801a5c8:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 801a5ca:	4b5c      	ldr	r3, [pc, #368]	; (801a73c <input_parameter+0xdb8>)
 801a5cc:	4a64      	ldr	r2, [pc, #400]	; (801a760 <input_parameter+0xddc>)
 801a5ce:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 801a5d0:	4b5a      	ldr	r3, [pc, #360]	; (801a73c <input_parameter+0xdb8>)
 801a5d2:	4a5b      	ldr	r2, [pc, #364]	; (801a740 <input_parameter+0xdbc>)
 801a5d4:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 801a5d6:	4b59      	ldr	r3, [pc, #356]	; (801a73c <input_parameter+0xdb8>)
 801a5d8:	4a5f      	ldr	r2, [pc, #380]	; (801a758 <input_parameter+0xdd4>)
 801a5da:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 801a5dc:	4b57      	ldr	r3, [pc, #348]	; (801a73c <input_parameter+0xdb8>)
 801a5de:	4a5f      	ldr	r2, [pc, #380]	; (801a75c <input_parameter+0xdd8>)
 801a5e0:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 801a5e2:	4b56      	ldr	r3, [pc, #344]	; (801a73c <input_parameter+0xdb8>)
 801a5e4:	4a5f      	ldr	r2, [pc, #380]	; (801a764 <input_parameter+0xde0>)
 801a5e6:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 801a5e8:	4b54      	ldr	r3, [pc, #336]	; (801a73c <input_parameter+0xdb8>)
 801a5ea:	4a55      	ldr	r2, [pc, #340]	; (801a740 <input_parameter+0xdbc>)
 801a5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 801a5f0:	4b52      	ldr	r3, [pc, #328]	; (801a73c <input_parameter+0xdb8>)
 801a5f2:	4a5d      	ldr	r2, [pc, #372]	; (801a768 <input_parameter+0xde4>)
 801a5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 801a5f8:	4b50      	ldr	r3, [pc, #320]	; (801a73c <input_parameter+0xdb8>)
 801a5fa:	4a5c      	ldr	r2, [pc, #368]	; (801a76c <input_parameter+0xde8>)
 801a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 801a600:	4b4e      	ldr	r3, [pc, #312]	; (801a73c <input_parameter+0xdb8>)
 801a602:	4a5b      	ldr	r2, [pc, #364]	; (801a770 <input_parameter+0xdec>)
 801a604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 801a608:	4b4c      	ldr	r3, [pc, #304]	; (801a73c <input_parameter+0xdb8>)
 801a60a:	4a4d      	ldr	r2, [pc, #308]	; (801a740 <input_parameter+0xdbc>)
 801a60c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 801a610:	4b4a      	ldr	r3, [pc, #296]	; (801a73c <input_parameter+0xdb8>)
 801a612:	4a55      	ldr	r2, [pc, #340]	; (801a768 <input_parameter+0xde4>)
 801a614:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 801a618:	4b48      	ldr	r3, [pc, #288]	; (801a73c <input_parameter+0xdb8>)
 801a61a:	4a54      	ldr	r2, [pc, #336]	; (801a76c <input_parameter+0xde8>)
 801a61c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 801a620:	4b46      	ldr	r3, [pc, #280]	; (801a73c <input_parameter+0xdb8>)
 801a622:	4a54      	ldr	r2, [pc, #336]	; (801a774 <input_parameter+0xdf0>)
 801a624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 801a628:	4b44      	ldr	r3, [pc, #272]	; (801a73c <input_parameter+0xdb8>)
 801a62a:	4a45      	ldr	r2, [pc, #276]	; (801a740 <input_parameter+0xdbc>)
 801a62c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 801a630:	4b42      	ldr	r3, [pc, #264]	; (801a73c <input_parameter+0xdb8>)
 801a632:	4a51      	ldr	r2, [pc, #324]	; (801a778 <input_parameter+0xdf4>)
 801a634:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 801a638:	4b40      	ldr	r3, [pc, #256]	; (801a73c <input_parameter+0xdb8>)
 801a63a:	4a50      	ldr	r2, [pc, #320]	; (801a77c <input_parameter+0xdf8>)
 801a63c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 801a640:	4b3e      	ldr	r3, [pc, #248]	; (801a73c <input_parameter+0xdb8>)
 801a642:	4a4c      	ldr	r2, [pc, #304]	; (801a774 <input_parameter+0xdf0>)
 801a644:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 801a648:	4b3c      	ldr	r3, [pc, #240]	; (801a73c <input_parameter+0xdb8>)
 801a64a:	4a3d      	ldr	r2, [pc, #244]	; (801a740 <input_parameter+0xdbc>)
 801a64c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 801a650:	4b3a      	ldr	r3, [pc, #232]	; (801a73c <input_parameter+0xdb8>)
 801a652:	4a49      	ldr	r2, [pc, #292]	; (801a778 <input_parameter+0xdf4>)
 801a654:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 801a658:	4b38      	ldr	r3, [pc, #224]	; (801a73c <input_parameter+0xdb8>)
 801a65a:	4a48      	ldr	r2, [pc, #288]	; (801a77c <input_parameter+0xdf8>)
 801a65c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801a660:	4b36      	ldr	r3, [pc, #216]	; (801a73c <input_parameter+0xdb8>)
 801a662:	4a47      	ldr	r2, [pc, #284]	; (801a780 <input_parameter+0xdfc>)
 801a664:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 801a668:	4b34      	ldr	r3, [pc, #208]	; (801a73c <input_parameter+0xdb8>)
 801a66a:	4a35      	ldr	r2, [pc, #212]	; (801a740 <input_parameter+0xdbc>)
 801a66c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 801a670:	4b32      	ldr	r3, [pc, #200]	; (801a73c <input_parameter+0xdb8>)
 801a672:	4a44      	ldr	r2, [pc, #272]	; (801a784 <input_parameter+0xe00>)
 801a674:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 801a678:	4b30      	ldr	r3, [pc, #192]	; (801a73c <input_parameter+0xdb8>)
 801a67a:	4a43      	ldr	r2, [pc, #268]	; (801a788 <input_parameter+0xe04>)
 801a67c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 801a680:	4b2e      	ldr	r3, [pc, #184]	; (801a73c <input_parameter+0xdb8>)
 801a682:	4a42      	ldr	r2, [pc, #264]	; (801a78c <input_parameter+0xe08>)
 801a684:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 801a688:	4b2c      	ldr	r3, [pc, #176]	; (801a73c <input_parameter+0xdb8>)
 801a68a:	4a2d      	ldr	r2, [pc, #180]	; (801a740 <input_parameter+0xdbc>)
 801a68c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 801a690:	4b2a      	ldr	r3, [pc, #168]	; (801a73c <input_parameter+0xdb8>)
 801a692:	4a3c      	ldr	r2, [pc, #240]	; (801a784 <input_parameter+0xe00>)
 801a694:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 801a698:	4b28      	ldr	r3, [pc, #160]	; (801a73c <input_parameter+0xdb8>)
 801a69a:	4a32      	ldr	r2, [pc, #200]	; (801a764 <input_parameter+0xde0>)
 801a69c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 801a6a0:	4b26      	ldr	r3, [pc, #152]	; (801a73c <input_parameter+0xdb8>)
 801a6a2:	4a3b      	ldr	r2, [pc, #236]	; (801a790 <input_parameter+0xe0c>)
 801a6a4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 801a6a8:	4b24      	ldr	r3, [pc, #144]	; (801a73c <input_parameter+0xdb8>)
 801a6aa:	4a25      	ldr	r2, [pc, #148]	; (801a740 <input_parameter+0xdbc>)
 801a6ac:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 801a6b0:	4b22      	ldr	r3, [pc, #136]	; (801a73c <input_parameter+0xdb8>)
 801a6b2:	4a38      	ldr	r2, [pc, #224]	; (801a794 <input_parameter+0xe10>)
 801a6b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 801a6b8:	4b20      	ldr	r3, [pc, #128]	; (801a73c <input_parameter+0xdb8>)
 801a6ba:	4a37      	ldr	r2, [pc, #220]	; (801a798 <input_parameter+0xe14>)
 801a6bc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801a6c0:	4b1e      	ldr	r3, [pc, #120]	; (801a73c <input_parameter+0xdb8>)
 801a6c2:	4a32      	ldr	r2, [pc, #200]	; (801a78c <input_parameter+0xe08>)
 801a6c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 801a6c8:	4b1c      	ldr	r3, [pc, #112]	; (801a73c <input_parameter+0xdb8>)
 801a6ca:	4a1d      	ldr	r2, [pc, #116]	; (801a740 <input_parameter+0xdbc>)
 801a6cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 801a6d0:	4b1a      	ldr	r3, [pc, #104]	; (801a73c <input_parameter+0xdb8>)
 801a6d2:	4a30      	ldr	r2, [pc, #192]	; (801a794 <input_parameter+0xe10>)
 801a6d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 801a6d8:	4b18      	ldr	r3, [pc, #96]	; (801a73c <input_parameter+0xdb8>)
 801a6da:	4a2f      	ldr	r2, [pc, #188]	; (801a798 <input_parameter+0xe14>)
 801a6dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 801a6e0:	4b16      	ldr	r3, [pc, #88]	; (801a73c <input_parameter+0xdb8>)
 801a6e2:	4a2e      	ldr	r2, [pc, #184]	; (801a79c <input_parameter+0xe18>)
 801a6e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 801a6e8:	4b14      	ldr	r3, [pc, #80]	; (801a73c <input_parameter+0xdb8>)
 801a6ea:	4a15      	ldr	r2, [pc, #84]	; (801a740 <input_parameter+0xdbc>)
 801a6ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 801a6f0:	4b12      	ldr	r3, [pc, #72]	; (801a73c <input_parameter+0xdb8>)
 801a6f2:	4a2b      	ldr	r2, [pc, #172]	; (801a7a0 <input_parameter+0xe1c>)
 801a6f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 801a6f8:	4b10      	ldr	r3, [pc, #64]	; (801a73c <input_parameter+0xdb8>)
 801a6fa:	4a2a      	ldr	r2, [pc, #168]	; (801a7a4 <input_parameter+0xe20>)
 801a6fc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 801a700:	4b0e      	ldr	r3, [pc, #56]	; (801a73c <input_parameter+0xdb8>)
 801a702:	4a17      	ldr	r2, [pc, #92]	; (801a760 <input_parameter+0xddc>)
 801a704:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 801a708:	4b0c      	ldr	r3, [pc, #48]	; (801a73c <input_parameter+0xdb8>)
 801a70a:	4a0d      	ldr	r2, [pc, #52]	; (801a740 <input_parameter+0xdbc>)
 801a70c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 801a710:	4b0a      	ldr	r3, [pc, #40]	; (801a73c <input_parameter+0xdb8>)
 801a712:	4a23      	ldr	r2, [pc, #140]	; (801a7a0 <input_parameter+0xe1c>)
 801a714:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 801a718:	4b08      	ldr	r3, [pc, #32]	; (801a73c <input_parameter+0xdb8>)
 801a71a:	4a22      	ldr	r2, [pc, #136]	; (801a7a4 <input_parameter+0xe20>)
 801a71c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 801a720:	4b06      	ldr	r3, [pc, #24]	; (801a73c <input_parameter+0xdb8>)
 801a722:	4a0f      	ldr	r2, [pc, #60]	; (801a760 <input_parameter+0xddc>)
 801a724:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 801a728:	bf00      	nop
 801a72a:	46bd      	mov	sp, r7
 801a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a730:	4770      	bx	lr
 801a732:	bf00      	nop
 801a734:	2000faac 	.word	0x2000faac
 801a738:	41c80000 	.word	0x41c80000
 801a73c:	2000fbf4 	.word	0x2000fbf4
 801a740:	44bb8000 	.word	0x44bb8000
 801a744:	44e4c000 	.word	0x44e4c000
 801a748:	41880000 	.word	0x41880000
 801a74c:	41f80000 	.word	0x41f80000
 801a750:	41700000 	.word	0x41700000
 801a754:	420c0000 	.word	0x420c0000
 801a758:	44fa0000 	.word	0x44fa0000
 801a75c:	41200000 	.word	0x41200000
 801a760:	41a00000 	.word	0x41a00000
 801a764:	41900000 	.word	0x41900000
 801a768:	44e74000 	.word	0x44e74000
 801a76c:	41400000 	.word	0x41400000
 801a770:	42180000 	.word	0x42180000
 801a774:	42100000 	.word	0x42100000
 801a778:	45034000 	.word	0x45034000
 801a77c:	41500000 	.word	0x41500000
 801a780:	42080000 	.word	0x42080000
 801a784:	44e10000 	.word	0x44e10000
 801a788:	41a80000 	.word	0x41a80000
 801a78c:	41b00000 	.word	0x41b00000
 801a790:	41c00000 	.word	0x41c00000
 801a794:	45098000 	.word	0x45098000
 801a798:	40e00000 	.word	0x40e00000
 801a79c:	41f00000 	.word	0x41f00000
 801a7a0:	45066000 	.word	0x45066000
 801a7a4:	40400000 	.word	0x40400000

0801a7a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801a7ac:	4b22      	ldr	r3, [pc, #136]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7ae:	4a23      	ldr	r2, [pc, #140]	; (801a83c <MX_USART1_UART_Init+0x94>)
 801a7b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801a7b2:	4b21      	ldr	r3, [pc, #132]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801a7b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801a7ba:	4b1f      	ldr	r3, [pc, #124]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7bc:	2200      	movs	r2, #0
 801a7be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801a7c0:	4b1d      	ldr	r3, [pc, #116]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801a7c6:	4b1c      	ldr	r3, [pc, #112]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801a7cc:	4b1a      	ldr	r3, [pc, #104]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7ce:	220c      	movs	r2, #12
 801a7d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801a7d2:	4b19      	ldr	r3, [pc, #100]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801a7d8:	4b17      	ldr	r3, [pc, #92]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801a7de:	4b16      	ldr	r3, [pc, #88]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801a7e4:	4b14      	ldr	r3, [pc, #80]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801a7ea:	4b13      	ldr	r3, [pc, #76]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801a7f0:	4811      	ldr	r0, [pc, #68]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a7f2:	f006 fd2d 	bl	8021250 <HAL_UART_Init>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d001      	beq.n	801a800 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 801a7fc:	f7f1 f915 	bl	800ba2a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801a800:	2100      	movs	r1, #0
 801a802:	480d      	ldr	r0, [pc, #52]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a804:	f007 faf4 	bl	8021df0 <HAL_UARTEx_SetTxFifoThreshold>
 801a808:	4603      	mov	r3, r0
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d001      	beq.n	801a812 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801a80e:	f7f1 f90c 	bl	800ba2a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801a812:	2100      	movs	r1, #0
 801a814:	4808      	ldr	r0, [pc, #32]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a816:	f007 fb29 	bl	8021e6c <HAL_UARTEx_SetRxFifoThreshold>
 801a81a:	4603      	mov	r3, r0
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d001      	beq.n	801a824 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 801a820:	f7f1 f903 	bl	800ba2a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801a824:	4804      	ldr	r0, [pc, #16]	; (801a838 <MX_USART1_UART_Init+0x90>)
 801a826:	f007 faaa 	bl	8021d7e <HAL_UARTEx_DisableFifoMode>
 801a82a:	4603      	mov	r3, r0
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d001      	beq.n	801a834 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 801a830:	f7f1 f8fb 	bl	800ba2a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801a834:	bf00      	nop
 801a836:	bd80      	pop	{r7, pc}
 801a838:	2000fd3c 	.word	0x2000fd3c
 801a83c:	40013800 	.word	0x40013800

0801a840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b09e      	sub	sp, #120	; 0x78
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a848:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a84c:	2200      	movs	r2, #0
 801a84e:	601a      	str	r2, [r3, #0]
 801a850:	605a      	str	r2, [r3, #4]
 801a852:	609a      	str	r2, [r3, #8]
 801a854:	60da      	str	r2, [r3, #12]
 801a856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801a858:	f107 0314 	add.w	r3, r7, #20
 801a85c:	2250      	movs	r2, #80	; 0x50
 801a85e:	2100      	movs	r1, #0
 801a860:	4618      	mov	r0, r3
 801a862:	f007 fbc7 	bl	8021ff4 <memset>
  if(uartHandle->Instance==USART1)
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4a1f      	ldr	r2, [pc, #124]	; (801a8e8 <HAL_UART_MspInit+0xa8>)
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d137      	bne.n	801a8e0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801a870:	2301      	movs	r3, #1
 801a872:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801a874:	2300      	movs	r3, #0
 801a876:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801a878:	f107 0314 	add.w	r3, r7, #20
 801a87c:	4618      	mov	r0, r3
 801a87e:	f004 f891 	bl	801e9a4 <HAL_RCCEx_PeriphCLKConfig>
 801a882:	4603      	mov	r3, r0
 801a884:	2b00      	cmp	r3, #0
 801a886:	d001      	beq.n	801a88c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 801a888:	f7f1 f8cf 	bl	800ba2a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801a88c:	4b17      	ldr	r3, [pc, #92]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a890:	4a16      	ldr	r2, [pc, #88]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a896:	6613      	str	r3, [r2, #96]	; 0x60
 801a898:	4b14      	ldr	r3, [pc, #80]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a8a0:	613b      	str	r3, [r7, #16]
 801a8a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a8a4:	4b11      	ldr	r3, [pc, #68]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8a8:	4a10      	ldr	r2, [pc, #64]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a8aa:	f043 0301 	orr.w	r3, r3, #1
 801a8ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a8b0:	4b0e      	ldr	r3, [pc, #56]	; (801a8ec <HAL_UART_MspInit+0xac>)
 801a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8b4:	f003 0301 	and.w	r3, r3, #1
 801a8b8:	60fb      	str	r3, [r7, #12]
 801a8ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801a8bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801a8c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a8c2:	2302      	movs	r3, #2
 801a8c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801a8ce:	2307      	movs	r3, #7
 801a8d0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a8d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a8dc:	f003 f8e4 	bl	801daa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801a8e0:	bf00      	nop
 801a8e2:	3778      	adds	r7, #120	; 0x78
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}
 801a8e8:	40013800 	.word	0x40013800
 801a8ec:	40021000 	.word	0x40021000

0801a8f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801a8f0:	480d      	ldr	r0, [pc, #52]	; (801a928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801a8f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801a8f4:	480d      	ldr	r0, [pc, #52]	; (801a92c <LoopForever+0x6>)
  ldr r1, =_edata
 801a8f6:	490e      	ldr	r1, [pc, #56]	; (801a930 <LoopForever+0xa>)
  ldr r2, =_sidata
 801a8f8:	4a0e      	ldr	r2, [pc, #56]	; (801a934 <LoopForever+0xe>)
  movs r3, #0
 801a8fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801a8fc:	e002      	b.n	801a904 <LoopCopyDataInit>

0801a8fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a8fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a902:	3304      	adds	r3, #4

0801a904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a908:	d3f9      	bcc.n	801a8fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a90a:	4a0b      	ldr	r2, [pc, #44]	; (801a938 <LoopForever+0x12>)
  ldr r4, =_ebss
 801a90c:	4c0b      	ldr	r4, [pc, #44]	; (801a93c <LoopForever+0x16>)
  movs r3, #0
 801a90e:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a910:	e001      	b.n	801a916 <LoopFillZerobss>

0801a912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a914:	3204      	adds	r2, #4

0801a916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a918:	d3fb      	bcc.n	801a912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801a91a:	f7fe fd6b 	bl	80193f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801a91e:	f007 fb37 	bl	8021f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801a922:	f7f0 ff85 	bl	800b830 <main>

0801a926 <LoopForever>:

LoopForever:
    b LoopForever
 801a926:	e7fe      	b.n	801a926 <LoopForever>
  ldr   r0, =_estack
 801a928:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 801a92c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801a930:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 801a934:	08026b98 	.word	0x08026b98
  ldr r2, =_sbss
 801a938:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 801a93c:	2000fde0 	.word	0x2000fde0

0801a940 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801a940:	e7fe      	b.n	801a940 <ADC3_IRQHandler>
	...

0801a944 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a944:	b580      	push	{r7, lr}
 801a946:	b082      	sub	sp, #8
 801a948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801a94a:	2300      	movs	r3, #0
 801a94c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801a94e:	4b0c      	ldr	r3, [pc, #48]	; (801a980 <HAL_Init+0x3c>)
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	4a0b      	ldr	r2, [pc, #44]	; (801a980 <HAL_Init+0x3c>)
 801a954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a958:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a95a:	2003      	movs	r0, #3
 801a95c:	f002 fb30 	bl	801cfc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a960:	2000      	movs	r0, #0
 801a962:	f000 f80f 	bl	801a984 <HAL_InitTick>
 801a966:	4603      	mov	r3, r0
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d002      	beq.n	801a972 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 801a96c:	2301      	movs	r3, #1
 801a96e:	71fb      	strb	r3, [r7, #7]
 801a970:	e001      	b.n	801a976 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801a972:	f7fe fbf3 	bl	801915c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801a976:	79fb      	ldrb	r3, [r7, #7]

}
 801a978:	4618      	mov	r0, r3
 801a97a:	3708      	adds	r7, #8
 801a97c:	46bd      	mov	sp, r7
 801a97e:	bd80      	pop	{r7, pc}
 801a980:	40022000 	.word	0x40022000

0801a984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b084      	sub	sp, #16
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801a98c:	2300      	movs	r3, #0
 801a98e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 801a990:	4b16      	ldr	r3, [pc, #88]	; (801a9ec <HAL_InitTick+0x68>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d022      	beq.n	801a9de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 801a998:	4b15      	ldr	r3, [pc, #84]	; (801a9f0 <HAL_InitTick+0x6c>)
 801a99a:	681a      	ldr	r2, [r3, #0]
 801a99c:	4b13      	ldr	r3, [pc, #76]	; (801a9ec <HAL_InitTick+0x68>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a9a4:	fbb1 f3f3 	udiv	r3, r1, r3
 801a9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	f002 fb3a 	bl	801d026 <HAL_SYSTICK_Config>
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d10f      	bne.n	801a9d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b0f      	cmp	r3, #15
 801a9bc:	d809      	bhi.n	801a9d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a9be:	2200      	movs	r2, #0
 801a9c0:	6879      	ldr	r1, [r7, #4]
 801a9c2:	f04f 30ff 	mov.w	r0, #4294967295
 801a9c6:	f002 fb06 	bl	801cfd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801a9ca:	4a0a      	ldr	r2, [pc, #40]	; (801a9f4 <HAL_InitTick+0x70>)
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6013      	str	r3, [r2, #0]
 801a9d0:	e007      	b.n	801a9e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 801a9d2:	2301      	movs	r3, #1
 801a9d4:	73fb      	strb	r3, [r7, #15]
 801a9d6:	e004      	b.n	801a9e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 801a9d8:	2301      	movs	r3, #1
 801a9da:	73fb      	strb	r3, [r7, #15]
 801a9dc:	e001      	b.n	801a9e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801a9de:	2301      	movs	r3, #1
 801a9e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	3710      	adds	r7, #16
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}
 801a9ec:	20000008 	.word	0x20000008
 801a9f0:	20000000 	.word	0x20000000
 801a9f4:	20000004 	.word	0x20000004

0801a9f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801a9fc:	4b05      	ldr	r3, [pc, #20]	; (801aa14 <HAL_IncTick+0x1c>)
 801a9fe:	681a      	ldr	r2, [r3, #0]
 801aa00:	4b05      	ldr	r3, [pc, #20]	; (801aa18 <HAL_IncTick+0x20>)
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4413      	add	r3, r2
 801aa06:	4a03      	ldr	r2, [pc, #12]	; (801aa14 <HAL_IncTick+0x1c>)
 801aa08:	6013      	str	r3, [r2, #0]
}
 801aa0a:	bf00      	nop
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa12:	4770      	bx	lr
 801aa14:	2000fdcc 	.word	0x2000fdcc
 801aa18:	20000008 	.word	0x20000008

0801aa1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	af00      	add	r7, sp, #0
  return uwTick;
 801aa20:	4b03      	ldr	r3, [pc, #12]	; (801aa30 <HAL_GetTick+0x14>)
 801aa22:	681b      	ldr	r3, [r3, #0]
}
 801aa24:	4618      	mov	r0, r3
 801aa26:	46bd      	mov	sp, r7
 801aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa2c:	4770      	bx	lr
 801aa2e:	bf00      	nop
 801aa30:	2000fdcc 	.word	0x2000fdcc

0801aa34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801aa3c:	f7ff ffee 	bl	801aa1c <HAL_GetTick>
 801aa40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa4c:	d004      	beq.n	801aa58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801aa4e:	4b09      	ldr	r3, [pc, #36]	; (801aa74 <HAL_Delay+0x40>)
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	68fa      	ldr	r2, [r7, #12]
 801aa54:	4413      	add	r3, r2
 801aa56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801aa58:	bf00      	nop
 801aa5a:	f7ff ffdf 	bl	801aa1c <HAL_GetTick>
 801aa5e:	4602      	mov	r2, r0
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	1ad3      	subs	r3, r2, r3
 801aa64:	68fa      	ldr	r2, [r7, #12]
 801aa66:	429a      	cmp	r2, r3
 801aa68:	d8f7      	bhi.n	801aa5a <HAL_Delay+0x26>
  {
  }
}
 801aa6a:	bf00      	nop
 801aa6c:	bf00      	nop
 801aa6e:	3710      	adds	r7, #16
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	20000008 	.word	0x20000008

0801aa78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 801aa78:	b480      	push	{r7}
 801aa7a:	b083      	sub	sp, #12
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	689b      	ldr	r3, [r3, #8]
 801aa86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	431a      	orrs	r2, r3
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	609a      	str	r2, [r3, #8]
}
 801aa92:	bf00      	nop
 801aa94:	370c      	adds	r7, #12
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801aa9e:	b480      	push	{r7}
 801aaa0:	b083      	sub	sp, #12
 801aaa2:	af00      	add	r7, sp, #0
 801aaa4:	6078      	str	r0, [r7, #4]
 801aaa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	689b      	ldr	r3, [r3, #8]
 801aaac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	431a      	orrs	r2, r3
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	609a      	str	r2, [r3, #8]
}
 801aab8:	bf00      	nop
 801aaba:	370c      	adds	r7, #12
 801aabc:	46bd      	mov	sp, r7
 801aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac2:	4770      	bx	lr

0801aac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801aac4:	b480      	push	{r7}
 801aac6:	b083      	sub	sp, #12
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	689b      	ldr	r3, [r3, #8]
 801aad0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	370c      	adds	r7, #12
 801aad8:	46bd      	mov	sp, r7
 801aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aade:	4770      	bx	lr

0801aae0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 801aae0:	b480      	push	{r7}
 801aae2:	b087      	sub	sp, #28
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	60f8      	str	r0, [r7, #12]
 801aae8:	60b9      	str	r1, [r7, #8]
 801aaea:	607a      	str	r2, [r7, #4]
 801aaec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	3360      	adds	r3, #96	; 0x60
 801aaf2:	461a      	mov	r2, r3
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	009b      	lsls	r3, r3, #2
 801aaf8:	4413      	add	r3, r2
 801aafa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801aafc:	697b      	ldr	r3, [r7, #20]
 801aafe:	681a      	ldr	r2, [r3, #0]
 801ab00:	4b08      	ldr	r3, [pc, #32]	; (801ab24 <LL_ADC_SetOffset+0x44>)
 801ab02:	4013      	ands	r3, r2
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801ab0a:	683a      	ldr	r2, [r7, #0]
 801ab0c:	430a      	orrs	r2, r1
 801ab0e:	4313      	orrs	r3, r2
 801ab10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ab14:	697b      	ldr	r3, [r7, #20]
 801ab16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801ab18:	bf00      	nop
 801ab1a:	371c      	adds	r7, #28
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab22:	4770      	bx	lr
 801ab24:	03fff000 	.word	0x03fff000

0801ab28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801ab28:	b480      	push	{r7}
 801ab2a:	b085      	sub	sp, #20
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
 801ab30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	3360      	adds	r3, #96	; 0x60
 801ab36:	461a      	mov	r2, r3
 801ab38:	683b      	ldr	r3, [r7, #0]
 801ab3a:	009b      	lsls	r3, r3, #2
 801ab3c:	4413      	add	r3, r2
 801ab3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3714      	adds	r7, #20
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab52:	4770      	bx	lr

0801ab54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 801ab54:	b480      	push	{r7}
 801ab56:	b087      	sub	sp, #28
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	60f8      	str	r0, [r7, #12]
 801ab5c:	60b9      	str	r1, [r7, #8]
 801ab5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	3360      	adds	r3, #96	; 0x60
 801ab64:	461a      	mov	r2, r3
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	009b      	lsls	r3, r3, #2
 801ab6a:	4413      	add	r3, r2
 801ab6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801ab6e:	697b      	ldr	r3, [r7, #20]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	431a      	orrs	r2, r3
 801ab7a:	697b      	ldr	r3, [r7, #20]
 801ab7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801ab7e:	bf00      	nop
 801ab80:	371c      	adds	r7, #28
 801ab82:	46bd      	mov	sp, r7
 801ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab88:	4770      	bx	lr

0801ab8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801ab8a:	b480      	push	{r7}
 801ab8c:	b087      	sub	sp, #28
 801ab8e:	af00      	add	r7, sp, #0
 801ab90:	60f8      	str	r0, [r7, #12]
 801ab92:	60b9      	str	r1, [r7, #8]
 801ab94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	3360      	adds	r3, #96	; 0x60
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	009b      	lsls	r3, r3, #2
 801aba0:	4413      	add	r3, r2
 801aba2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	431a      	orrs	r2, r3
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 801abb4:	bf00      	nop
 801abb6:	371c      	adds	r7, #28
 801abb8:	46bd      	mov	sp, r7
 801abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abbe:	4770      	bx	lr

0801abc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b087      	sub	sp, #28
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	60f8      	str	r0, [r7, #12]
 801abc8:	60b9      	str	r1, [r7, #8]
 801abca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	3360      	adds	r3, #96	; 0x60
 801abd0:	461a      	mov	r2, r3
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	009b      	lsls	r3, r3, #2
 801abd6:	4413      	add	r3, r2
 801abd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801abda:	697b      	ldr	r3, [r7, #20]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	431a      	orrs	r2, r3
 801abe6:	697b      	ldr	r3, [r7, #20]
 801abe8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 801abea:	bf00      	nop
 801abec:	371c      	adds	r7, #28
 801abee:	46bd      	mov	sp, r7
 801abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf4:	4770      	bx	lr

0801abf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801abf6:	b480      	push	{r7}
 801abf8:	b083      	sub	sp, #12
 801abfa:	af00      	add	r7, sp, #0
 801abfc:	6078      	str	r0, [r7, #4]
 801abfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	695b      	ldr	r3, [r3, #20]
 801ac04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ac08:	683b      	ldr	r3, [r7, #0]
 801ac0a:	431a      	orrs	r2, r3
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	615a      	str	r2, [r3, #20]
}
 801ac10:	bf00      	nop
 801ac12:	370c      	adds	r7, #12
 801ac14:	46bd      	mov	sp, r7
 801ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac1a:	4770      	bx	lr

0801ac1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801ac1c:	b480      	push	{r7}
 801ac1e:	b083      	sub	sp, #12
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	68db      	ldr	r3, [r3, #12]
 801ac28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d101      	bne.n	801ac34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 801ac30:	2301      	movs	r3, #1
 801ac32:	e000      	b.n	801ac36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801ac34:	2300      	movs	r3, #0
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	370c      	adds	r7, #12
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac40:	4770      	bx	lr

0801ac42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801ac42:	b480      	push	{r7}
 801ac44:	b087      	sub	sp, #28
 801ac46:	af00      	add	r7, sp, #0
 801ac48:	60f8      	str	r0, [r7, #12]
 801ac4a:	60b9      	str	r1, [r7, #8]
 801ac4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	3330      	adds	r3, #48	; 0x30
 801ac52:	461a      	mov	r2, r3
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	0a1b      	lsrs	r3, r3, #8
 801ac58:	009b      	lsls	r3, r3, #2
 801ac5a:	f003 030c 	and.w	r3, r3, #12
 801ac5e:	4413      	add	r3, r2
 801ac60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801ac62:	697b      	ldr	r3, [r7, #20]
 801ac64:	681a      	ldr	r2, [r3, #0]
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	f003 031f 	and.w	r3, r3, #31
 801ac6c:	211f      	movs	r1, #31
 801ac6e:	fa01 f303 	lsl.w	r3, r1, r3
 801ac72:	43db      	mvns	r3, r3
 801ac74:	401a      	ands	r2, r3
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	0e9b      	lsrs	r3, r3, #26
 801ac7a:	f003 011f 	and.w	r1, r3, #31
 801ac7e:	68bb      	ldr	r3, [r7, #8]
 801ac80:	f003 031f 	and.w	r3, r3, #31
 801ac84:	fa01 f303 	lsl.w	r3, r1, r3
 801ac88:	431a      	orrs	r2, r3
 801ac8a:	697b      	ldr	r3, [r7, #20]
 801ac8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801ac8e:	bf00      	nop
 801ac90:	371c      	adds	r7, #28
 801ac92:	46bd      	mov	sp, r7
 801ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac98:	4770      	bx	lr

0801ac9a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801ac9a:	b480      	push	{r7}
 801ac9c:	b083      	sub	sp, #12
 801ac9e:	af00      	add	r7, sp, #0
 801aca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aca6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d101      	bne.n	801acb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801acae:	2301      	movs	r3, #1
 801acb0:	e000      	b.n	801acb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801acb2:	2300      	movs	r3, #0
}
 801acb4:	4618      	mov	r0, r3
 801acb6:	370c      	adds	r7, #12
 801acb8:	46bd      	mov	sp, r7
 801acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbe:	4770      	bx	lr

0801acc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801acc0:	b480      	push	{r7}
 801acc2:	b087      	sub	sp, #28
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	60f8      	str	r0, [r7, #12]
 801acc8:	60b9      	str	r1, [r7, #8]
 801acca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	3314      	adds	r3, #20
 801acd0:	461a      	mov	r2, r3
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	0e5b      	lsrs	r3, r3, #25
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	f003 0304 	and.w	r3, r3, #4
 801acdc:	4413      	add	r3, r2
 801acde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801ace0:	697b      	ldr	r3, [r7, #20]
 801ace2:	681a      	ldr	r2, [r3, #0]
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	0d1b      	lsrs	r3, r3, #20
 801ace8:	f003 031f 	and.w	r3, r3, #31
 801acec:	2107      	movs	r1, #7
 801acee:	fa01 f303 	lsl.w	r3, r1, r3
 801acf2:	43db      	mvns	r3, r3
 801acf4:	401a      	ands	r2, r3
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	0d1b      	lsrs	r3, r3, #20
 801acfa:	f003 031f 	and.w	r3, r3, #31
 801acfe:	6879      	ldr	r1, [r7, #4]
 801ad00:	fa01 f303 	lsl.w	r3, r1, r3
 801ad04:	431a      	orrs	r2, r3
 801ad06:	697b      	ldr	r3, [r7, #20]
 801ad08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801ad0a:	bf00      	nop
 801ad0c:	371c      	adds	r7, #28
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad14:	4770      	bx	lr
	...

0801ad18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801ad18:	b480      	push	{r7}
 801ad1a:	b085      	sub	sp, #20
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	60f8      	str	r0, [r7, #12]
 801ad20:	60b9      	str	r1, [r7, #8]
 801ad22:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	4a0f      	ldr	r2, [pc, #60]	; (801ad64 <LL_ADC_SetChannelSingleDiff+0x4c>)
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	d10a      	bne.n	801ad42 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad38:	431a      	orrs	r2, r3
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 801ad40:	e00a      	b.n	801ad58 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad4e:	43db      	mvns	r3, r3
 801ad50:	401a      	ands	r2, r3
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 801ad58:	bf00      	nop
 801ad5a:	3714      	adds	r7, #20
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad62:	4770      	bx	lr
 801ad64:	407f0000 	.word	0x407f0000

0801ad68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801ad68:	b480      	push	{r7}
 801ad6a:	b083      	sub	sp, #12
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	689b      	ldr	r3, [r3, #8]
 801ad74:	f003 031f 	and.w	r3, r3, #31
}
 801ad78:	4618      	mov	r0, r3
 801ad7a:	370c      	adds	r7, #12
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr

0801ad84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801ad84:	b480      	push	{r7}
 801ad86:	b083      	sub	sp, #12
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	689b      	ldr	r3, [r3, #8]
 801ad90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 801ad94:	4618      	mov	r0, r3
 801ad96:	370c      	adds	r7, #12
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9e:	4770      	bx	lr

0801ada0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 801ada0:	b480      	push	{r7}
 801ada2:	b083      	sub	sp, #12
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	689b      	ldr	r3, [r3, #8]
 801adac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 801adb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801adb4:	687a      	ldr	r2, [r7, #4]
 801adb6:	6093      	str	r3, [r2, #8]
}
 801adb8:	bf00      	nop
 801adba:	370c      	adds	r7, #12
 801adbc:	46bd      	mov	sp, r7
 801adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc2:	4770      	bx	lr

0801adc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b083      	sub	sp, #12
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	689b      	ldr	r3, [r3, #8]
 801add0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801add4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801add8:	d101      	bne.n	801adde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801adda:	2301      	movs	r3, #1
 801addc:	e000      	b.n	801ade0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801adde:	2300      	movs	r3, #0
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	370c      	adds	r7, #12
 801ade4:	46bd      	mov	sp, r7
 801ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adea:	4770      	bx	lr

0801adec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801adec:	b480      	push	{r7}
 801adee:	b083      	sub	sp, #12
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	689b      	ldr	r3, [r3, #8]
 801adf8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801adfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ae00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 801ae08:	bf00      	nop
 801ae0a:	370c      	adds	r7, #12
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae12:	4770      	bx	lr

0801ae14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 801ae14:	b480      	push	{r7}
 801ae16:	b083      	sub	sp, #12
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	689b      	ldr	r3, [r3, #8]
 801ae20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ae24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ae28:	d101      	bne.n	801ae2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e000      	b.n	801ae30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801ae2e:	2300      	movs	r3, #0
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	370c      	adds	r7, #12
 801ae34:	46bd      	mov	sp, r7
 801ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae3a:	4770      	bx	lr

0801ae3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801ae3c:	b480      	push	{r7}
 801ae3e:	b083      	sub	sp, #12
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	689b      	ldr	r3, [r3, #8]
 801ae48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ae50:	f043 0201 	orr.w	r2, r3, #1
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801ae58:	bf00      	nop
 801ae5a:	370c      	adds	r7, #12
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae62:	4770      	bx	lr

0801ae64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 801ae64:	b480      	push	{r7}
 801ae66:	b083      	sub	sp, #12
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	689b      	ldr	r3, [r3, #8]
 801ae70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ae74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ae78:	f043 0202 	orr.w	r2, r3, #2
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 801ae80:	bf00      	nop
 801ae82:	370c      	adds	r7, #12
 801ae84:	46bd      	mov	sp, r7
 801ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8a:	4770      	bx	lr

0801ae8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801ae8c:	b480      	push	{r7}
 801ae8e:	b083      	sub	sp, #12
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	689b      	ldr	r3, [r3, #8]
 801ae98:	f003 0301 	and.w	r3, r3, #1
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	d101      	bne.n	801aea4 <LL_ADC_IsEnabled+0x18>
 801aea0:	2301      	movs	r3, #1
 801aea2:	e000      	b.n	801aea6 <LL_ADC_IsEnabled+0x1a>
 801aea4:	2300      	movs	r3, #0
}
 801aea6:	4618      	mov	r0, r3
 801aea8:	370c      	adds	r7, #12
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb0:	4770      	bx	lr

0801aeb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 801aeb2:	b480      	push	{r7}
 801aeb4:	b083      	sub	sp, #12
 801aeb6:	af00      	add	r7, sp, #0
 801aeb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	689b      	ldr	r3, [r3, #8]
 801aebe:	f003 0302 	and.w	r3, r3, #2
 801aec2:	2b02      	cmp	r3, #2
 801aec4:	d101      	bne.n	801aeca <LL_ADC_IsDisableOngoing+0x18>
 801aec6:	2301      	movs	r3, #1
 801aec8:	e000      	b.n	801aecc <LL_ADC_IsDisableOngoing+0x1a>
 801aeca:	2300      	movs	r3, #0
}
 801aecc:	4618      	mov	r0, r3
 801aece:	370c      	adds	r7, #12
 801aed0:	46bd      	mov	sp, r7
 801aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed6:	4770      	bx	lr

0801aed8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801aed8:	b480      	push	{r7}
 801aeda:	b083      	sub	sp, #12
 801aedc:	af00      	add	r7, sp, #0
 801aede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	689b      	ldr	r3, [r3, #8]
 801aee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801aeec:	f043 0204 	orr.w	r2, r3, #4
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801aef4:	bf00      	nop
 801aef6:	370c      	adds	r7, #12
 801aef8:	46bd      	mov	sp, r7
 801aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefe:	4770      	bx	lr

0801af00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 801af00:	b480      	push	{r7}
 801af02:	b083      	sub	sp, #12
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	689b      	ldr	r3, [r3, #8]
 801af0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801af10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801af14:	f043 0210 	orr.w	r2, r3, #16
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 801af1c:	bf00      	nop
 801af1e:	370c      	adds	r7, #12
 801af20:	46bd      	mov	sp, r7
 801af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af26:	4770      	bx	lr

0801af28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801af28:	b480      	push	{r7}
 801af2a:	b083      	sub	sp, #12
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	689b      	ldr	r3, [r3, #8]
 801af34:	f003 0304 	and.w	r3, r3, #4
 801af38:	2b04      	cmp	r3, #4
 801af3a:	d101      	bne.n	801af40 <LL_ADC_REG_IsConversionOngoing+0x18>
 801af3c:	2301      	movs	r3, #1
 801af3e:	e000      	b.n	801af42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801af40:	2300      	movs	r3, #0
}
 801af42:	4618      	mov	r0, r3
 801af44:	370c      	adds	r7, #12
 801af46:	46bd      	mov	sp, r7
 801af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4c:	4770      	bx	lr

0801af4e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 801af4e:	b480      	push	{r7}
 801af50:	b083      	sub	sp, #12
 801af52:	af00      	add	r7, sp, #0
 801af54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	689b      	ldr	r3, [r3, #8]
 801af5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801af5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801af62:	f043 0220 	orr.w	r2, r3, #32
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 801af6a:	bf00      	nop
 801af6c:	370c      	adds	r7, #12
 801af6e:	46bd      	mov	sp, r7
 801af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af74:	4770      	bx	lr

0801af76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801af76:	b480      	push	{r7}
 801af78:	b083      	sub	sp, #12
 801af7a:	af00      	add	r7, sp, #0
 801af7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	689b      	ldr	r3, [r3, #8]
 801af82:	f003 0308 	and.w	r3, r3, #8
 801af86:	2b08      	cmp	r3, #8
 801af88:	d101      	bne.n	801af8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 801af8a:	2301      	movs	r3, #1
 801af8c:	e000      	b.n	801af90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801af8e:	2300      	movs	r3, #0
}
 801af90:	4618      	mov	r0, r3
 801af92:	370c      	adds	r7, #12
 801af94:	46bd      	mov	sp, r7
 801af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9a:	4770      	bx	lr

0801af9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801af9c:	b590      	push	{r4, r7, lr}
 801af9e:	b089      	sub	sp, #36	; 0x24
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801afa4:	2300      	movs	r3, #0
 801afa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801afa8:	2300      	movs	r3, #0
 801afaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d101      	bne.n	801afb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801afb2:	2301      	movs	r3, #1
 801afb4:	e1a1      	b.n	801b2fa <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	695b      	ldr	r3, [r3, #20]
 801afba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d109      	bne.n	801afd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	f7ee fb17 	bl	80095f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	2200      	movs	r2, #0
 801afce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2200      	movs	r2, #0
 801afd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	4618      	mov	r0, r3
 801afde:	f7ff fef1 	bl	801adc4 <LL_ADC_IsDeepPowerDownEnabled>
 801afe2:	4603      	mov	r3, r0
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d004      	beq.n	801aff2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	4618      	mov	r0, r3
 801afee:	f7ff fed7 	bl	801ada0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7ff ff0c 	bl	801ae14 <LL_ADC_IsInternalRegulatorEnabled>
 801affc:	4603      	mov	r3, r0
 801affe:	2b00      	cmp	r3, #0
 801b000:	d115      	bne.n	801b02e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	4618      	mov	r0, r3
 801b008:	f7ff fef0 	bl	801adec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801b00c:	4b9a      	ldr	r3, [pc, #616]	; (801b278 <HAL_ADC_Init+0x2dc>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	099b      	lsrs	r3, r3, #6
 801b012:	4a9a      	ldr	r2, [pc, #616]	; (801b27c <HAL_ADC_Init+0x2e0>)
 801b014:	fba2 2303 	umull	r2, r3, r2, r3
 801b018:	099b      	lsrs	r3, r3, #6
 801b01a:	3301      	adds	r3, #1
 801b01c:	005b      	lsls	r3, r3, #1
 801b01e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801b020:	e002      	b.n	801b028 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	3b01      	subs	r3, #1
 801b026:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d1f9      	bne.n	801b022 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	4618      	mov	r0, r3
 801b034:	f7ff feee 	bl	801ae14 <LL_ADC_IsInternalRegulatorEnabled>
 801b038:	4603      	mov	r3, r0
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d10d      	bne.n	801b05a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b042:	f043 0210 	orr.w	r2, r3, #16
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b04e:	f043 0201 	orr.w	r2, r3, #1
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801b056:	2301      	movs	r3, #1
 801b058:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4618      	mov	r0, r3
 801b060:	f7ff ff62 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801b064:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b06a:	f003 0310 	and.w	r3, r3, #16
 801b06e:	2b00      	cmp	r3, #0
 801b070:	f040 813a 	bne.w	801b2e8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	2b00      	cmp	r3, #0
 801b078:	f040 8136 	bne.w	801b2e8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801b084:	f043 0202 	orr.w	r2, r3, #2
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	4618      	mov	r0, r3
 801b092:	f7ff fefb 	bl	801ae8c <LL_ADC_IsEnabled>
 801b096:	4603      	mov	r3, r0
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d137      	bne.n	801b10c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b0a4:	d004      	beq.n	801b0b0 <HAL_ADC_Init+0x114>
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	4a75      	ldr	r2, [pc, #468]	; (801b280 <HAL_ADC_Init+0x2e4>)
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d10f      	bne.n	801b0d0 <HAL_ADC_Init+0x134>
 801b0b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b0b4:	f7ff feea 	bl	801ae8c <LL_ADC_IsEnabled>
 801b0b8:	4604      	mov	r4, r0
 801b0ba:	4871      	ldr	r0, [pc, #452]	; (801b280 <HAL_ADC_Init+0x2e4>)
 801b0bc:	f7ff fee6 	bl	801ae8c <LL_ADC_IsEnabled>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	4323      	orrs	r3, r4
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	bf0c      	ite	eq
 801b0c8:	2301      	moveq	r3, #1
 801b0ca:	2300      	movne	r3, #0
 801b0cc:	b2db      	uxtb	r3, r3
 801b0ce:	e008      	b.n	801b0e2 <HAL_ADC_Init+0x146>
 801b0d0:	486c      	ldr	r0, [pc, #432]	; (801b284 <HAL_ADC_Init+0x2e8>)
 801b0d2:	f7ff fedb 	bl	801ae8c <LL_ADC_IsEnabled>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	bf0c      	ite	eq
 801b0dc:	2301      	moveq	r3, #1
 801b0de:	2300      	movne	r3, #0
 801b0e0:	b2db      	uxtb	r3, r3
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d012      	beq.n	801b10c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b0ee:	d004      	beq.n	801b0fa <HAL_ADC_Init+0x15e>
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	4a62      	ldr	r2, [pc, #392]	; (801b280 <HAL_ADC_Init+0x2e4>)
 801b0f6:	4293      	cmp	r3, r2
 801b0f8:	d101      	bne.n	801b0fe <HAL_ADC_Init+0x162>
 801b0fa:	4a63      	ldr	r2, [pc, #396]	; (801b288 <HAL_ADC_Init+0x2ec>)
 801b0fc:	e000      	b.n	801b100 <HAL_ADC_Init+0x164>
 801b0fe:	4a63      	ldr	r2, [pc, #396]	; (801b28c <HAL_ADC_Init+0x2f0>)
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	685b      	ldr	r3, [r3, #4]
 801b104:	4619      	mov	r1, r3
 801b106:	4610      	mov	r0, r2
 801b108:	f7ff fcb6 	bl	801aa78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	7f5b      	ldrb	r3, [r3, #29]
 801b110:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801b116:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 801b11c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801b122:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b12a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801b12c:	4313      	orrs	r3, r2
 801b12e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b136:	2b01      	cmp	r3, #1
 801b138:	d106      	bne.n	801b148 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b13e:	3b01      	subs	r3, #1
 801b140:	045b      	lsls	r3, r3, #17
 801b142:	69ba      	ldr	r2, [r7, #24]
 801b144:	4313      	orrs	r3, r2
 801b146:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d009      	beq.n	801b164 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b154:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b15c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801b15e:	69ba      	ldr	r2, [r7, #24]
 801b160:	4313      	orrs	r3, r2
 801b162:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	68da      	ldr	r2, [r3, #12]
 801b16a:	4b49      	ldr	r3, [pc, #292]	; (801b290 <HAL_ADC_Init+0x2f4>)
 801b16c:	4013      	ands	r3, r2
 801b16e:	687a      	ldr	r2, [r7, #4]
 801b170:	6812      	ldr	r2, [r2, #0]
 801b172:	69b9      	ldr	r1, [r7, #24]
 801b174:	430b      	orrs	r3, r1
 801b176:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	691b      	ldr	r3, [r3, #16]
 801b17e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	430a      	orrs	r2, r1
 801b18c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	4618      	mov	r0, r3
 801b194:	f7ff fec8 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801b198:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7ff fee9 	bl	801af76 <LL_ADC_INJ_IsConversionOngoing>
 801b1a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d17b      	bne.n	801b2a4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d178      	bne.n	801b2a4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801b1b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b1be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b1ce:	f023 0302 	bic.w	r3, r3, #2
 801b1d2:	687a      	ldr	r2, [r7, #4]
 801b1d4:	6812      	ldr	r2, [r2, #0]
 801b1d6:	69b9      	ldr	r1, [r7, #24]
 801b1d8:	430b      	orrs	r3, r1
 801b1da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	691b      	ldr	r3, [r3, #16]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d017      	beq.n	801b214 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	691a      	ldr	r2, [r3, #16]
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801b1f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801b1fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801b200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b204:	687a      	ldr	r2, [r7, #4]
 801b206:	6911      	ldr	r1, [r2, #16]
 801b208:	687a      	ldr	r2, [r7, #4]
 801b20a:	6812      	ldr	r2, [r2, #0]
 801b20c:	430b      	orrs	r3, r1
 801b20e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 801b212:	e013      	b.n	801b23c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	691a      	ldr	r2, [r3, #16]
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801b222:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801b22c:	687a      	ldr	r2, [r7, #4]
 801b22e:	6812      	ldr	r2, [r2, #0]
 801b230:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801b234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b238:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b242:	2b01      	cmp	r3, #1
 801b244:	d126      	bne.n	801b294 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	691b      	ldr	r3, [r3, #16]
 801b24c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b250:	f023 0304 	bic.w	r3, r3, #4
 801b254:	687a      	ldr	r2, [r7, #4]
 801b256:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b25c:	4311      	orrs	r1, r2
 801b25e:	687a      	ldr	r2, [r7, #4]
 801b260:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801b262:	4311      	orrs	r1, r2
 801b264:	687a      	ldr	r2, [r7, #4]
 801b266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b268:	430a      	orrs	r2, r1
 801b26a:	431a      	orrs	r2, r3
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f042 0201 	orr.w	r2, r2, #1
 801b274:	611a      	str	r2, [r3, #16]
 801b276:	e015      	b.n	801b2a4 <HAL_ADC_Init+0x308>
 801b278:	20000000 	.word	0x20000000
 801b27c:	053e2d63 	.word	0x053e2d63
 801b280:	50000100 	.word	0x50000100
 801b284:	50000400 	.word	0x50000400
 801b288:	50000300 	.word	0x50000300
 801b28c:	50000700 	.word	0x50000700
 801b290:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	691a      	ldr	r2, [r3, #16]
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	f022 0201 	bic.w	r2, r2, #1
 801b2a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	695b      	ldr	r3, [r3, #20]
 801b2a8:	2b01      	cmp	r3, #1
 801b2aa:	d10c      	bne.n	801b2c6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2b2:	f023 010f 	bic.w	r1, r3, #15
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	6a1b      	ldr	r3, [r3, #32]
 801b2ba:	1e5a      	subs	r2, r3, #1
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	430a      	orrs	r2, r1
 801b2c2:	631a      	str	r2, [r3, #48]	; 0x30
 801b2c4:	e007      	b.n	801b2d6 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	f022 020f 	bic.w	r2, r2, #15
 801b2d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b2da:	f023 0303 	bic.w	r3, r3, #3
 801b2de:	f043 0201 	orr.w	r2, r3, #1
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	65da      	str	r2, [r3, #92]	; 0x5c
 801b2e6:	e007      	b.n	801b2f8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b2ec:	f043 0210 	orr.w	r2, r3, #16
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801b2f8:	7ffb      	ldrb	r3, [r7, #31]
}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	3724      	adds	r7, #36	; 0x24
 801b2fe:	46bd      	mov	sp, r7
 801b300:	bd90      	pop	{r4, r7, pc}
 801b302:	bf00      	nop

0801b304 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801b304:	b580      	push	{r7, lr}
 801b306:	b086      	sub	sp, #24
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b314:	d004      	beq.n	801b320 <HAL_ADC_Start+0x1c>
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	4a5c      	ldr	r2, [pc, #368]	; (801b48c <HAL_ADC_Start+0x188>)
 801b31c:	4293      	cmp	r3, r2
 801b31e:	d101      	bne.n	801b324 <HAL_ADC_Start+0x20>
 801b320:	4b5b      	ldr	r3, [pc, #364]	; (801b490 <HAL_ADC_Start+0x18c>)
 801b322:	e000      	b.n	801b326 <HAL_ADC_Start+0x22>
 801b324:	4b5b      	ldr	r3, [pc, #364]	; (801b494 <HAL_ADC_Start+0x190>)
 801b326:	4618      	mov	r0, r3
 801b328:	f7ff fd1e 	bl	801ad68 <LL_ADC_GetMultimode>
 801b32c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4618      	mov	r0, r3
 801b334:	f7ff fdf8 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801b338:	4603      	mov	r3, r0
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	f040 809f 	bne.w	801b47e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b346:	2b01      	cmp	r3, #1
 801b348:	d101      	bne.n	801b34e <HAL_ADC_Start+0x4a>
 801b34a:	2302      	movs	r3, #2
 801b34c:	e09a      	b.n	801b484 <HAL_ADC_Start+0x180>
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	2201      	movs	r2, #1
 801b352:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801b356:	6878      	ldr	r0, [r7, #4]
 801b358:	f001 fa3e 	bl	801c7d8 <ADC_Enable>
 801b35c:	4603      	mov	r3, r0
 801b35e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801b360:	7dfb      	ldrb	r3, [r7, #23]
 801b362:	2b00      	cmp	r3, #0
 801b364:	f040 8086 	bne.w	801b474 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b36c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b370:	f023 0301 	bic.w	r3, r3, #1
 801b374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4a42      	ldr	r2, [pc, #264]	; (801b48c <HAL_ADC_Start+0x188>)
 801b382:	4293      	cmp	r3, r2
 801b384:	d002      	beq.n	801b38c <HAL_ADC_Start+0x88>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	e001      	b.n	801b390 <HAL_ADC_Start+0x8c>
 801b38c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b390:	687a      	ldr	r2, [r7, #4]
 801b392:	6812      	ldr	r2, [r2, #0]
 801b394:	4293      	cmp	r3, r2
 801b396:	d002      	beq.n	801b39e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b398:	693b      	ldr	r3, [r7, #16]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d105      	bne.n	801b3aa <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b3a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b3ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b3b6:	d106      	bne.n	801b3c6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b3bc:	f023 0206 	bic.w	r2, r3, #6
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	661a      	str	r2, [r3, #96]	; 0x60
 801b3c4:	e002      	b.n	801b3cc <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	221c      	movs	r2, #28
 801b3d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4a2a      	ldr	r2, [pc, #168]	; (801b48c <HAL_ADC_Start+0x188>)
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	d002      	beq.n	801b3ec <HAL_ADC_Start+0xe8>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	e001      	b.n	801b3f0 <HAL_ADC_Start+0xec>
 801b3ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b3f0:	687a      	ldr	r2, [r7, #4]
 801b3f2:	6812      	ldr	r2, [r2, #0]
 801b3f4:	4293      	cmp	r3, r2
 801b3f6:	d008      	beq.n	801b40a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b3f8:	693b      	ldr	r3, [r7, #16]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d005      	beq.n	801b40a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801b3fe:	693b      	ldr	r3, [r7, #16]
 801b400:	2b05      	cmp	r3, #5
 801b402:	d002      	beq.n	801b40a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801b404:	693b      	ldr	r3, [r7, #16]
 801b406:	2b09      	cmp	r3, #9
 801b408:	d114      	bne.n	801b434 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	68db      	ldr	r3, [r3, #12]
 801b410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b414:	2b00      	cmp	r3, #0
 801b416:	d007      	beq.n	801b428 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b41c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801b420:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7ff fd53 	bl	801aed8 <LL_ADC_REG_StartConversion>
 801b432:	e026      	b.n	801b482 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b438:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	4a11      	ldr	r2, [pc, #68]	; (801b48c <HAL_ADC_Start+0x188>)
 801b446:	4293      	cmp	r3, r2
 801b448:	d002      	beq.n	801b450 <HAL_ADC_Start+0x14c>
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	e001      	b.n	801b454 <HAL_ADC_Start+0x150>
 801b450:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b454:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d00f      	beq.n	801b482 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801b46a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	65da      	str	r2, [r3, #92]	; 0x5c
 801b472:	e006      	b.n	801b482 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	2200      	movs	r2, #0
 801b478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801b47c:	e001      	b.n	801b482 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801b47e:	2302      	movs	r3, #2
 801b480:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801b482:	7dfb      	ldrb	r3, [r7, #23]
}
 801b484:	4618      	mov	r0, r3
 801b486:	3718      	adds	r7, #24
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}
 801b48c:	50000100 	.word	0x50000100
 801b490:	50000300 	.word	0x50000300
 801b494:	50000700 	.word	0x50000700

0801b498 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b084      	sub	sp, #16
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b4a6:	2b01      	cmp	r3, #1
 801b4a8:	d101      	bne.n	801b4ae <HAL_ADC_Stop+0x16>
 801b4aa:	2302      	movs	r3, #2
 801b4ac:	e023      	b.n	801b4f6 <HAL_ADC_Stop+0x5e>
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2201      	movs	r2, #1
 801b4b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801b4b6:	2103      	movs	r1, #3
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	f001 f8d1 	bl	801c660 <ADC_ConversionStop>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801b4c2:	7bfb      	ldrb	r3, [r7, #15]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d111      	bne.n	801b4ec <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f001 f9e7 	bl	801c89c <ADC_Disable>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801b4d2:	7bfb      	ldrb	r3, [r7, #15]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d109      	bne.n	801b4ec <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b4e0:	f023 0301 	bic.w	r3, r3, #1
 801b4e4:	f043 0201 	orr.w	r2, r3, #1
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	3710      	adds	r7, #16
 801b4fa:	46bd      	mov	sp, r7
 801b4fc:	bd80      	pop	{r7, pc}
	...

0801b500 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b088      	sub	sp, #32
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
 801b508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b512:	d004      	beq.n	801b51e <HAL_ADC_PollForConversion+0x1e>
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	4a70      	ldr	r2, [pc, #448]	; (801b6dc <HAL_ADC_PollForConversion+0x1dc>)
 801b51a:	4293      	cmp	r3, r2
 801b51c:	d101      	bne.n	801b522 <HAL_ADC_PollForConversion+0x22>
 801b51e:	4b70      	ldr	r3, [pc, #448]	; (801b6e0 <HAL_ADC_PollForConversion+0x1e0>)
 801b520:	e000      	b.n	801b524 <HAL_ADC_PollForConversion+0x24>
 801b522:	4b70      	ldr	r3, [pc, #448]	; (801b6e4 <HAL_ADC_PollForConversion+0x1e4>)
 801b524:	4618      	mov	r0, r3
 801b526:	f7ff fc1f 	bl	801ad68 <LL_ADC_GetMultimode>
 801b52a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	699b      	ldr	r3, [r3, #24]
 801b530:	2b08      	cmp	r3, #8
 801b532:	d102      	bne.n	801b53a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801b534:	2308      	movs	r3, #8
 801b536:	61fb      	str	r3, [r7, #28]
 801b538:	e037      	b.n	801b5aa <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d005      	beq.n	801b54c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801b540:	697b      	ldr	r3, [r7, #20]
 801b542:	2b05      	cmp	r3, #5
 801b544:	d002      	beq.n	801b54c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801b546:	697b      	ldr	r3, [r7, #20]
 801b548:	2b09      	cmp	r3, #9
 801b54a:	d111      	bne.n	801b570 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	68db      	ldr	r3, [r3, #12]
 801b552:	f003 0301 	and.w	r3, r3, #1
 801b556:	2b00      	cmp	r3, #0
 801b558:	d007      	beq.n	801b56a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b55e:	f043 0220 	orr.w	r2, r3, #32
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801b566:	2301      	movs	r3, #1
 801b568:	e0b3      	b.n	801b6d2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801b56a:	2304      	movs	r3, #4
 801b56c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801b56e:	e01c      	b.n	801b5aa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b578:	d004      	beq.n	801b584 <HAL_ADC_PollForConversion+0x84>
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	4a57      	ldr	r2, [pc, #348]	; (801b6dc <HAL_ADC_PollForConversion+0x1dc>)
 801b580:	4293      	cmp	r3, r2
 801b582:	d101      	bne.n	801b588 <HAL_ADC_PollForConversion+0x88>
 801b584:	4b56      	ldr	r3, [pc, #344]	; (801b6e0 <HAL_ADC_PollForConversion+0x1e0>)
 801b586:	e000      	b.n	801b58a <HAL_ADC_PollForConversion+0x8a>
 801b588:	4b56      	ldr	r3, [pc, #344]	; (801b6e4 <HAL_ADC_PollForConversion+0x1e4>)
 801b58a:	4618      	mov	r0, r3
 801b58c:	f7ff fbfa 	bl	801ad84 <LL_ADC_GetMultiDMATransfer>
 801b590:	4603      	mov	r3, r0
 801b592:	2b00      	cmp	r3, #0
 801b594:	d007      	beq.n	801b5a6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b59a:	f043 0220 	orr.w	r2, r3, #32
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801b5a2:	2301      	movs	r3, #1
 801b5a4:	e095      	b.n	801b6d2 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801b5a6:	2304      	movs	r3, #4
 801b5a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801b5aa:	f7ff fa37 	bl	801aa1c <HAL_GetTick>
 801b5ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801b5b0:	e021      	b.n	801b5f6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5b8:	d01d      	beq.n	801b5f6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801b5ba:	f7ff fa2f 	bl	801aa1c <HAL_GetTick>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	693b      	ldr	r3, [r7, #16]
 801b5c2:	1ad3      	subs	r3, r2, r3
 801b5c4:	683a      	ldr	r2, [r7, #0]
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	d302      	bcc.n	801b5d0 <HAL_ADC_PollForConversion+0xd0>
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d112      	bne.n	801b5f6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	681a      	ldr	r2, [r3, #0]
 801b5d6:	69fb      	ldr	r3, [r7, #28]
 801b5d8:	4013      	ands	r3, r2
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d10b      	bne.n	801b5f6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5e2:	f043 0204 	orr.w	r2, r3, #4
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801b5f2:	2303      	movs	r3, #3
 801b5f4:	e06d      	b.n	801b6d2 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	681a      	ldr	r2, [r3, #0]
 801b5fc:	69fb      	ldr	r3, [r7, #28]
 801b5fe:	4013      	ands	r3, r2
 801b600:	2b00      	cmp	r3, #0
 801b602:	d0d6      	beq.n	801b5b2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b608:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	4618      	mov	r0, r3
 801b616:	f7ff fb01 	bl	801ac1c <LL_ADC_REG_IsTriggerSourceSWStart>
 801b61a:	4603      	mov	r3, r0
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d01c      	beq.n	801b65a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	7f5b      	ldrb	r3, [r3, #29]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d118      	bne.n	801b65a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	f003 0308 	and.w	r3, r3, #8
 801b632:	2b08      	cmp	r3, #8
 801b634:	d111      	bne.n	801b65a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b63a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d105      	bne.n	801b65a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b652:	f043 0201 	orr.w	r2, r3, #1
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	4a1f      	ldr	r2, [pc, #124]	; (801b6dc <HAL_ADC_PollForConversion+0x1dc>)
 801b660:	4293      	cmp	r3, r2
 801b662:	d002      	beq.n	801b66a <HAL_ADC_PollForConversion+0x16a>
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	e001      	b.n	801b66e <HAL_ADC_PollForConversion+0x16e>
 801b66a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b66e:	687a      	ldr	r2, [r7, #4]
 801b670:	6812      	ldr	r2, [r2, #0]
 801b672:	4293      	cmp	r3, r2
 801b674:	d008      	beq.n	801b688 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b676:	697b      	ldr	r3, [r7, #20]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d005      	beq.n	801b688 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	2b05      	cmp	r3, #5
 801b680:	d002      	beq.n	801b688 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	2b09      	cmp	r3, #9
 801b686:	d104      	bne.n	801b692 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	68db      	ldr	r3, [r3, #12]
 801b68e:	61bb      	str	r3, [r7, #24]
 801b690:	e00d      	b.n	801b6ae <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4a11      	ldr	r2, [pc, #68]	; (801b6dc <HAL_ADC_PollForConversion+0x1dc>)
 801b698:	4293      	cmp	r3, r2
 801b69a:	d002      	beq.n	801b6a2 <HAL_ADC_PollForConversion+0x1a2>
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	e001      	b.n	801b6a6 <HAL_ADC_PollForConversion+0x1a6>
 801b6a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b6a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	68db      	ldr	r3, [r3, #12]
 801b6ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801b6ae:	69fb      	ldr	r3, [r7, #28]
 801b6b0:	2b08      	cmp	r3, #8
 801b6b2:	d104      	bne.n	801b6be <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2208      	movs	r2, #8
 801b6ba:	601a      	str	r2, [r3, #0]
 801b6bc:	e008      	b.n	801b6d0 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801b6be:	69bb      	ldr	r3, [r7, #24]
 801b6c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d103      	bne.n	801b6d0 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	220c      	movs	r2, #12
 801b6ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 801b6d0:	2300      	movs	r3, #0
}
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	3720      	adds	r7, #32
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}
 801b6da:	bf00      	nop
 801b6dc:	50000100 	.word	0x50000100
 801b6e0:	50000300 	.word	0x50000300
 801b6e4:	50000700 	.word	0x50000700

0801b6e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b086      	sub	sp, #24
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	60f8      	str	r0, [r7, #12]
 801b6f0:	60b9      	str	r1, [r7, #8]
 801b6f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b6fc:	d004      	beq.n	801b708 <HAL_ADC_Start_DMA+0x20>
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	4a57      	ldr	r2, [pc, #348]	; (801b860 <HAL_ADC_Start_DMA+0x178>)
 801b704:	4293      	cmp	r3, r2
 801b706:	d101      	bne.n	801b70c <HAL_ADC_Start_DMA+0x24>
 801b708:	4b56      	ldr	r3, [pc, #344]	; (801b864 <HAL_ADC_Start_DMA+0x17c>)
 801b70a:	e000      	b.n	801b70e <HAL_ADC_Start_DMA+0x26>
 801b70c:	4b56      	ldr	r3, [pc, #344]	; (801b868 <HAL_ADC_Start_DMA+0x180>)
 801b70e:	4618      	mov	r0, r3
 801b710:	f7ff fb2a 	bl	801ad68 <LL_ADC_GetMultimode>
 801b714:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	4618      	mov	r0, r3
 801b71c:	f7ff fc04 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801b720:	4603      	mov	r3, r0
 801b722:	2b00      	cmp	r3, #0
 801b724:	f040 8094 	bne.w	801b850 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b72e:	2b01      	cmp	r3, #1
 801b730:	d101      	bne.n	801b736 <HAL_ADC_Start_DMA+0x4e>
 801b732:	2302      	movs	r3, #2
 801b734:	e08f      	b.n	801b856 <HAL_ADC_Start_DMA+0x16e>
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	2201      	movs	r2, #1
 801b73a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	4a4a      	ldr	r2, [pc, #296]	; (801b86c <HAL_ADC_Start_DMA+0x184>)
 801b744:	4293      	cmp	r3, r2
 801b746:	d008      	beq.n	801b75a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b748:	693b      	ldr	r3, [r7, #16]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d005      	beq.n	801b75a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801b74e:	693b      	ldr	r3, [r7, #16]
 801b750:	2b05      	cmp	r3, #5
 801b752:	d002      	beq.n	801b75a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	2b09      	cmp	r3, #9
 801b758:	d173      	bne.n	801b842 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801b75a:	68f8      	ldr	r0, [r7, #12]
 801b75c:	f001 f83c 	bl	801c7d8 <ADC_Enable>
 801b760:	4603      	mov	r3, r0
 801b762:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801b764:	7dfb      	ldrb	r3, [r7, #23]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d166      	bne.n	801b838 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b76e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b772:	f023 0301 	bic.w	r3, r3, #1
 801b776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	4a37      	ldr	r2, [pc, #220]	; (801b860 <HAL_ADC_Start_DMA+0x178>)
 801b784:	4293      	cmp	r3, r2
 801b786:	d002      	beq.n	801b78e <HAL_ADC_Start_DMA+0xa6>
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	e001      	b.n	801b792 <HAL_ADC_Start_DMA+0xaa>
 801b78e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801b792:	68fa      	ldr	r2, [r7, #12]
 801b794:	6812      	ldr	r2, [r2, #0]
 801b796:	4293      	cmp	r3, r2
 801b798:	d002      	beq.n	801b7a0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801b79a:	693b      	ldr	r3, [r7, #16]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d105      	bne.n	801b7ac <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d006      	beq.n	801b7c6 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b7bc:	f023 0206 	bic.w	r2, r3, #6
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	661a      	str	r2, [r3, #96]	; 0x60
 801b7c4:	e002      	b.n	801b7cc <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7d0:	4a27      	ldr	r2, [pc, #156]	; (801b870 <HAL_ADC_Start_DMA+0x188>)
 801b7d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7d8:	4a26      	ldr	r2, [pc, #152]	; (801b874 <HAL_ADC_Start_DMA+0x18c>)
 801b7da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b7e0:	4a25      	ldr	r2, [pc, #148]	; (801b878 <HAL_ADC_Start_DMA+0x190>)
 801b7e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	221c      	movs	r2, #28
 801b7ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	685a      	ldr	r2, [r3, #4]
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	f042 0210 	orr.w	r2, r2, #16
 801b802:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	68da      	ldr	r2, [r3, #12]
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	f042 0201 	orr.w	r2, r2, #1
 801b812:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	3340      	adds	r3, #64	; 0x40
 801b81e:	4619      	mov	r1, r3
 801b820:	68ba      	ldr	r2, [r7, #8]
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	f001 fcb4 	bl	801d190 <HAL_DMA_Start_IT>
 801b828:	4603      	mov	r3, r0
 801b82a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	4618      	mov	r0, r3
 801b832:	f7ff fb51 	bl	801aed8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801b836:	e00d      	b.n	801b854 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	2200      	movs	r2, #0
 801b83c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801b840:	e008      	b.n	801b854 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801b842:	2301      	movs	r3, #1
 801b844:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	2200      	movs	r2, #0
 801b84a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801b84e:	e001      	b.n	801b854 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801b850:	2302      	movs	r3, #2
 801b852:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801b854:	7dfb      	ldrb	r3, [r7, #23]
}
 801b856:	4618      	mov	r0, r3
 801b858:	3718      	adds	r7, #24
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
 801b85e:	bf00      	nop
 801b860:	50000100 	.word	0x50000100
 801b864:	50000300 	.word	0x50000300
 801b868:	50000700 	.word	0x50000700
 801b86c:	50000400 	.word	0x50000400
 801b870:	0801c95b 	.word	0x0801c95b
 801b874:	0801ca33 	.word	0x0801ca33
 801b878:	0801ca4f 	.word	0x0801ca4f

0801b87c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b084      	sub	sp, #16
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b88a:	2b01      	cmp	r3, #1
 801b88c:	d101      	bne.n	801b892 <HAL_ADC_Stop_DMA+0x16>
 801b88e:	2302      	movs	r3, #2
 801b890:	e051      	b.n	801b936 <HAL_ADC_Stop_DMA+0xba>
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	2201      	movs	r2, #1
 801b896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801b89a:	2103      	movs	r1, #3
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	f000 fedf 	bl	801c660 <ADC_ConversionStop>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801b8a6:	7bfb      	ldrb	r3, [r7, #15]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d13f      	bne.n	801b92c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	68da      	ldr	r2, [r3, #12]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	f022 0201 	bic.w	r2, r2, #1
 801b8ba:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b8c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b8c4:	b2db      	uxtb	r3, r3
 801b8c6:	2b02      	cmp	r3, #2
 801b8c8:	d10f      	bne.n	801b8ea <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	f001 fcd9 	bl	801d286 <HAL_DMA_Abort>
 801b8d4:	4603      	mov	r3, r0
 801b8d6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801b8d8:	7bfb      	ldrb	r3, [r7, #15]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d005      	beq.n	801b8ea <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b8e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	685a      	ldr	r2, [r3, #4]
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	f022 0210 	bic.w	r2, r2, #16
 801b8f8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801b8fa:	7bfb      	ldrb	r3, [r7, #15]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d105      	bne.n	801b90c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f000 ffcb 	bl	801c89c <ADC_Disable>
 801b906:	4603      	mov	r3, r0
 801b908:	73fb      	strb	r3, [r7, #15]
 801b90a:	e002      	b.n	801b912 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801b90c:	6878      	ldr	r0, [r7, #4]
 801b90e:	f000 ffc5 	bl	801c89c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801b912:	7bfb      	ldrb	r3, [r7, #15]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d109      	bne.n	801b92c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b91c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b920:	f023 0301 	bic.w	r3, r3, #1
 801b924:	f043 0201 	orr.w	r2, r3, #1
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2200      	movs	r2, #0
 801b930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b934:	7bfb      	ldrb	r3, [r7, #15]
}
 801b936:	4618      	mov	r0, r3
 801b938:	3710      	adds	r7, #16
 801b93a:	46bd      	mov	sp, r7
 801b93c:	bd80      	pop	{r7, pc}

0801b93e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801b93e:	b480      	push	{r7}
 801b940:	b083      	sub	sp, #12
 801b942:	af00      	add	r7, sp, #0
 801b944:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801b94c:	4618      	mov	r0, r3
 801b94e:	370c      	adds	r7, #12
 801b950:	46bd      	mov	sp, r7
 801b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b956:	4770      	bx	lr

0801b958 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b08a      	sub	sp, #40	; 0x28
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 801b960:	2300      	movs	r3, #0
 801b962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	685b      	ldr	r3, [r3, #4]
 801b972:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b97c:	d004      	beq.n	801b988 <HAL_ADC_IRQHandler+0x30>
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	4a87      	ldr	r2, [pc, #540]	; (801bba0 <HAL_ADC_IRQHandler+0x248>)
 801b984:	4293      	cmp	r3, r2
 801b986:	d101      	bne.n	801b98c <HAL_ADC_IRQHandler+0x34>
 801b988:	4b86      	ldr	r3, [pc, #536]	; (801bba4 <HAL_ADC_IRQHandler+0x24c>)
 801b98a:	e000      	b.n	801b98e <HAL_ADC_IRQHandler+0x36>
 801b98c:	4b86      	ldr	r3, [pc, #536]	; (801bba8 <HAL_ADC_IRQHandler+0x250>)
 801b98e:	4618      	mov	r0, r3
 801b990:	f7ff f9ea 	bl	801ad68 <LL_ADC_GetMultimode>
 801b994:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801b996:	69fb      	ldr	r3, [r7, #28]
 801b998:	f003 0302 	and.w	r3, r3, #2
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d017      	beq.n	801b9d0 <HAL_ADC_IRQHandler+0x78>
 801b9a0:	69bb      	ldr	r3, [r7, #24]
 801b9a2:	f003 0302 	and.w	r3, r3, #2
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d012      	beq.n	801b9d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9ae:	f003 0310 	and.w	r3, r3, #16
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d105      	bne.n	801b9c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 801b9c2:	6878      	ldr	r0, [r7, #4]
 801b9c4:	f001 f93a 	bl	801cc3c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	2202      	movs	r2, #2
 801b9ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801b9d0:	69fb      	ldr	r3, [r7, #28]
 801b9d2:	f003 0304 	and.w	r3, r3, #4
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d004      	beq.n	801b9e4 <HAL_ADC_IRQHandler+0x8c>
 801b9da:	69bb      	ldr	r3, [r7, #24]
 801b9dc:	f003 0304 	and.w	r3, r3, #4
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d10a      	bne.n	801b9fa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801b9e4:	69fb      	ldr	r3, [r7, #28]
 801b9e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f000 8085 	beq.w	801bafa <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801b9f0:	69bb      	ldr	r3, [r7, #24]
 801b9f2:	f003 0308 	and.w	r3, r3, #8
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d07f      	beq.n	801bafa <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9fe:	f003 0310 	and.w	r3, r3, #16
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d105      	bne.n	801ba12 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4618      	mov	r0, r3
 801ba18:	f7ff f900 	bl	801ac1c <LL_ADC_REG_IsTriggerSourceSWStart>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d064      	beq.n	801baec <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	4a5e      	ldr	r2, [pc, #376]	; (801bba0 <HAL_ADC_IRQHandler+0x248>)
 801ba28:	4293      	cmp	r3, r2
 801ba2a:	d002      	beq.n	801ba32 <HAL_ADC_IRQHandler+0xda>
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	e001      	b.n	801ba36 <HAL_ADC_IRQHandler+0xde>
 801ba32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801ba36:	687a      	ldr	r2, [r7, #4]
 801ba38:	6812      	ldr	r2, [r2, #0]
 801ba3a:	4293      	cmp	r3, r2
 801ba3c:	d008      	beq.n	801ba50 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801ba3e:	697b      	ldr	r3, [r7, #20]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d005      	beq.n	801ba50 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	2b05      	cmp	r3, #5
 801ba48:	d002      	beq.n	801ba50 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801ba4a:	697b      	ldr	r3, [r7, #20]
 801ba4c:	2b09      	cmp	r3, #9
 801ba4e:	d104      	bne.n	801ba5a <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	623b      	str	r3, [r7, #32]
 801ba58:	e00d      	b.n	801ba76 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	4a50      	ldr	r2, [pc, #320]	; (801bba0 <HAL_ADC_IRQHandler+0x248>)
 801ba60:	4293      	cmp	r3, r2
 801ba62:	d002      	beq.n	801ba6a <HAL_ADC_IRQHandler+0x112>
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	e001      	b.n	801ba6e <HAL_ADC_IRQHandler+0x116>
 801ba6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801ba6e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	68db      	ldr	r3, [r3, #12]
 801ba74:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801ba76:	6a3b      	ldr	r3, [r7, #32]
 801ba78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d135      	bne.n	801baec <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	f003 0308 	and.w	r3, r3, #8
 801ba8a:	2b08      	cmp	r3, #8
 801ba8c:	d12e      	bne.n	801baec <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	4618      	mov	r0, r3
 801ba94:	f7ff fa48 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d11a      	bne.n	801bad4 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	685a      	ldr	r2, [r3, #4]
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	f022 020c 	bic.w	r2, r2, #12
 801baac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801babe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d112      	bne.n	801baec <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801baca:	f043 0201 	orr.w	r2, r3, #1
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	65da      	str	r2, [r3, #92]	; 0x5c
 801bad2:	e00b      	b.n	801baec <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bad8:	f043 0210 	orr.w	r2, r3, #16
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bae4:	f043 0201 	orr.w	r2, r3, #1
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801baec:	6878      	ldr	r0, [r7, #4]
 801baee:	f7ed fe2b 	bl	8009748 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	220c      	movs	r2, #12
 801baf8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801bafa:	69fb      	ldr	r3, [r7, #28]
 801bafc:	f003 0320 	and.w	r3, r3, #32
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d004      	beq.n	801bb0e <HAL_ADC_IRQHandler+0x1b6>
 801bb04:	69bb      	ldr	r3, [r7, #24]
 801bb06:	f003 0320 	and.w	r3, r3, #32
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d10b      	bne.n	801bb26 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801bb0e:	69fb      	ldr	r3, [r7, #28]
 801bb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	f000 80a1 	beq.w	801bc5c <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801bb1a:	69bb      	ldr	r3, [r7, #24]
 801bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	f000 809b 	beq.w	801bc5c <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bb2a:	f003 0310 	and.w	r3, r3, #16
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d105      	bne.n	801bb3e <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bb36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	4618      	mov	r0, r3
 801bb44:	f7ff f8a9 	bl	801ac9a <LL_ADC_INJ_IsTriggerSourceSWStart>
 801bb48:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7ff f864 	bl	801ac1c <LL_ADC_REG_IsTriggerSourceSWStart>
 801bb54:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a11      	ldr	r2, [pc, #68]	; (801bba0 <HAL_ADC_IRQHandler+0x248>)
 801bb5c:	4293      	cmp	r3, r2
 801bb5e:	d002      	beq.n	801bb66 <HAL_ADC_IRQHandler+0x20e>
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	e001      	b.n	801bb6a <HAL_ADC_IRQHandler+0x212>
 801bb66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801bb6a:	687a      	ldr	r2, [r7, #4]
 801bb6c:	6812      	ldr	r2, [r2, #0]
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	d008      	beq.n	801bb84 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d005      	beq.n	801bb84 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801bb78:	697b      	ldr	r3, [r7, #20]
 801bb7a:	2b06      	cmp	r3, #6
 801bb7c:	d002      	beq.n	801bb84 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	2b07      	cmp	r3, #7
 801bb82:	d104      	bne.n	801bb8e <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	68db      	ldr	r3, [r3, #12]
 801bb8a:	623b      	str	r3, [r7, #32]
 801bb8c:	e014      	b.n	801bbb8 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	4a03      	ldr	r2, [pc, #12]	; (801bba0 <HAL_ADC_IRQHandler+0x248>)
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d009      	beq.n	801bbac <HAL_ADC_IRQHandler+0x254>
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	e008      	b.n	801bbb0 <HAL_ADC_IRQHandler+0x258>
 801bb9e:	bf00      	nop
 801bba0:	50000100 	.word	0x50000100
 801bba4:	50000300 	.word	0x50000300
 801bba8:	50000700 	.word	0x50000700
 801bbac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801bbb0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801bbb2:	693b      	ldr	r3, [r7, #16]
 801bbb4:	68db      	ldr	r3, [r3, #12]
 801bbb6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d047      	beq.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801bbbe:	6a3b      	ldr	r3, [r7, #32]
 801bbc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d007      	beq.n	801bbd8 <HAL_ADC_IRQHandler+0x280>
 801bbc8:	68bb      	ldr	r3, [r7, #8]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d03f      	beq.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801bbce:	6a3b      	ldr	r3, [r7, #32]
 801bbd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d13a      	bne.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbe2:	2b40      	cmp	r3, #64	; 0x40
 801bbe4:	d133      	bne.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801bbe6:	6a3b      	ldr	r3, [r7, #32]
 801bbe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d12e      	bne.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f7ff f9be 	bl	801af76 <LL_ADC_INJ_IsConversionOngoing>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d11a      	bne.n	801bc36 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	685a      	ldr	r2, [r3, #4]
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bc0e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d112      	bne.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc2c:	f043 0201 	orr.w	r2, r3, #1
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	65da      	str	r2, [r3, #92]	; 0x5c
 801bc34:	e00b      	b.n	801bc4e <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc3a:	f043 0210 	orr.w	r2, r3, #16
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bc46:	f043 0201 	orr.w	r2, r3, #1
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801bc4e:	6878      	ldr	r0, [r7, #4]
 801bc50:	f000 ffcc 	bl	801cbec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	2260      	movs	r2, #96	; 0x60
 801bc5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801bc5c:	69fb      	ldr	r3, [r7, #28]
 801bc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d011      	beq.n	801bc8a <HAL_ADC_IRQHandler+0x332>
 801bc66:	69bb      	ldr	r3, [r7, #24]
 801bc68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d00c      	beq.n	801bc8a <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bc74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801bc7c:	6878      	ldr	r0, [r7, #4]
 801bc7e:	f000 f8af 	bl	801bde0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	2280      	movs	r2, #128	; 0x80
 801bc88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801bc8a:	69fb      	ldr	r3, [r7, #28]
 801bc8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d012      	beq.n	801bcba <HAL_ADC_IRQHandler+0x362>
 801bc94:	69bb      	ldr	r3, [r7, #24]
 801bc96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d00d      	beq.n	801bcba <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bca2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f000 ffb2 	bl	801cc14 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bcb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801bcba:	69fb      	ldr	r3, [r7, #28]
 801bcbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d012      	beq.n	801bcea <HAL_ADC_IRQHandler+0x392>
 801bcc4:	69bb      	ldr	r3, [r7, #24]
 801bcc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d00d      	beq.n	801bcea <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bcd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801bcda:	6878      	ldr	r0, [r7, #4]
 801bcdc:	f000 ffa4 	bl	801cc28 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bce8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801bcea:	69fb      	ldr	r3, [r7, #28]
 801bcec:	f003 0310 	and.w	r3, r3, #16
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d043      	beq.n	801bd7c <HAL_ADC_IRQHandler+0x424>
 801bcf4:	69bb      	ldr	r3, [r7, #24]
 801bcf6:	f003 0310 	and.w	r3, r3, #16
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d03e      	beq.n	801bd7c <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d102      	bne.n	801bd0c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801bd06:	2301      	movs	r3, #1
 801bd08:	627b      	str	r3, [r7, #36]	; 0x24
 801bd0a:	e021      	b.n	801bd50 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d015      	beq.n	801bd3e <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801bd1a:	d004      	beq.n	801bd26 <HAL_ADC_IRQHandler+0x3ce>
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	4a27      	ldr	r2, [pc, #156]	; (801bdc0 <HAL_ADC_IRQHandler+0x468>)
 801bd22:	4293      	cmp	r3, r2
 801bd24:	d101      	bne.n	801bd2a <HAL_ADC_IRQHandler+0x3d2>
 801bd26:	4b27      	ldr	r3, [pc, #156]	; (801bdc4 <HAL_ADC_IRQHandler+0x46c>)
 801bd28:	e000      	b.n	801bd2c <HAL_ADC_IRQHandler+0x3d4>
 801bd2a:	4b27      	ldr	r3, [pc, #156]	; (801bdc8 <HAL_ADC_IRQHandler+0x470>)
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f7ff f829 	bl	801ad84 <LL_ADC_GetMultiDMATransfer>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d00b      	beq.n	801bd50 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801bd38:	2301      	movs	r3, #1
 801bd3a:	627b      	str	r3, [r7, #36]	; 0x24
 801bd3c:	e008      	b.n	801bd50 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	68db      	ldr	r3, [r3, #12]
 801bd44:	f003 0301 	and.w	r3, r3, #1
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d001      	beq.n	801bd50 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd52:	2b01      	cmp	r3, #1
 801bd54:	d10e      	bne.n	801bd74 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bd5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd66:	f043 0202 	orr.w	r2, r3, #2
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801bd6e:	6878      	ldr	r0, [r7, #4]
 801bd70:	f000 f840 	bl	801bdf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	2210      	movs	r2, #16
 801bd7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801bd7c:	69fb      	ldr	r3, [r7, #28]
 801bd7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d018      	beq.n	801bdb8 <HAL_ADC_IRQHandler+0x460>
 801bd86:	69bb      	ldr	r3, [r7, #24]
 801bd88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d013      	beq.n	801bdb8 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bd94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bda0:	f043 0208 	orr.w	r2, r3, #8
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bdb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801bdb2:	6878      	ldr	r0, [r7, #4]
 801bdb4:	f000 ff24 	bl	801cc00 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801bdb8:	bf00      	nop
 801bdba:	3728      	adds	r7, #40	; 0x28
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	50000100 	.word	0x50000100
 801bdc4:	50000300 	.word	0x50000300
 801bdc8:	50000700 	.word	0x50000700

0801bdcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801bdcc:	b480      	push	{r7}
 801bdce:	b083      	sub	sp, #12
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801bdd4:	bf00      	nop
 801bdd6:	370c      	adds	r7, #12
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdde:	4770      	bx	lr

0801bde0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801bde0:	b480      	push	{r7}
 801bde2:	b083      	sub	sp, #12
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801bde8:	bf00      	nop
 801bdea:	370c      	adds	r7, #12
 801bdec:	46bd      	mov	sp, r7
 801bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf2:	4770      	bx	lr

0801bdf4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801bdf4:	b480      	push	{r7}
 801bdf6:	b083      	sub	sp, #12
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801bdfc:	bf00      	nop
 801bdfe:	370c      	adds	r7, #12
 801be00:	46bd      	mov	sp, r7
 801be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be06:	4770      	bx	lr

0801be08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b0b6      	sub	sp, #216	; 0xd8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801be12:	2300      	movs	r3, #0
 801be14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801be18:	2300      	movs	r3, #0
 801be1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801be22:	2b01      	cmp	r3, #1
 801be24:	d102      	bne.n	801be2c <HAL_ADC_ConfigChannel+0x24>
 801be26:	2302      	movs	r3, #2
 801be28:	f000 bc04 	b.w	801c634 <HAL_ADC_ConfigChannel+0x82c>
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2201      	movs	r2, #1
 801be30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	4618      	mov	r0, r3
 801be3a:	f7ff f875 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801be3e:	4603      	mov	r3, r0
 801be40:	2b00      	cmp	r3, #0
 801be42:	f040 83e8 	bne.w	801c616 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	6818      	ldr	r0, [r3, #0]
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	6859      	ldr	r1, [r3, #4]
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	461a      	mov	r2, r3
 801be54:	f7fe fef5 	bl	801ac42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	4618      	mov	r0, r3
 801be5e:	f7ff f863 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801be62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	4618      	mov	r0, r3
 801be6c:	f7ff f883 	bl	801af76 <LL_ADC_INJ_IsConversionOngoing>
 801be70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801be74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801be78:	2b00      	cmp	r3, #0
 801be7a:	f040 81d9 	bne.w	801c230 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801be7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801be82:	2b00      	cmp	r3, #0
 801be84:	f040 81d4 	bne.w	801c230 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	689b      	ldr	r3, [r3, #8]
 801be8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be90:	d10f      	bne.n	801beb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	6818      	ldr	r0, [r3, #0]
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	2200      	movs	r2, #0
 801be9c:	4619      	mov	r1, r3
 801be9e:	f7fe ff0f 	bl	801acc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801beaa:	4618      	mov	r0, r3
 801beac:	f7fe fea3 	bl	801abf6 <LL_ADC_SetSamplingTimeCommonConfig>
 801beb0:	e00e      	b.n	801bed0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	6818      	ldr	r0, [r3, #0]
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	6819      	ldr	r1, [r3, #0]
 801beba:	683b      	ldr	r3, [r7, #0]
 801bebc:	689b      	ldr	r3, [r3, #8]
 801bebe:	461a      	mov	r2, r3
 801bec0:	f7fe fefe 	bl	801acc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	2100      	movs	r1, #0
 801beca:	4618      	mov	r0, r3
 801becc:	f7fe fe93 	bl	801abf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801bed0:	683b      	ldr	r3, [r7, #0]
 801bed2:	695a      	ldr	r2, [r3, #20]
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	68db      	ldr	r3, [r3, #12]
 801beda:	08db      	lsrs	r3, r3, #3
 801bedc:	f003 0303 	and.w	r3, r3, #3
 801bee0:	005b      	lsls	r3, r3, #1
 801bee2:	fa02 f303 	lsl.w	r3, r2, r3
 801bee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801beea:	683b      	ldr	r3, [r7, #0]
 801beec:	691b      	ldr	r3, [r3, #16]
 801beee:	2b04      	cmp	r3, #4
 801bef0:	d022      	beq.n	801bf38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	6818      	ldr	r0, [r3, #0]
 801bef6:	683b      	ldr	r3, [r7, #0]
 801bef8:	6919      	ldr	r1, [r3, #16]
 801befa:	683b      	ldr	r3, [r7, #0]
 801befc:	681a      	ldr	r2, [r3, #0]
 801befe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bf02:	f7fe fded 	bl	801aae0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	6818      	ldr	r0, [r3, #0]
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	6919      	ldr	r1, [r3, #16]
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	699b      	ldr	r3, [r3, #24]
 801bf12:	461a      	mov	r2, r3
 801bf14:	f7fe fe39 	bl	801ab8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	6818      	ldr	r0, [r3, #0]
 801bf1c:	683b      	ldr	r3, [r7, #0]
 801bf1e:	6919      	ldr	r1, [r3, #16]
 801bf20:	683b      	ldr	r3, [r7, #0]
 801bf22:	7f1b      	ldrb	r3, [r3, #28]
 801bf24:	2b01      	cmp	r3, #1
 801bf26:	d102      	bne.n	801bf2e <HAL_ADC_ConfigChannel+0x126>
 801bf28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bf2c:	e000      	b.n	801bf30 <HAL_ADC_ConfigChannel+0x128>
 801bf2e:	2300      	movs	r3, #0
 801bf30:	461a      	mov	r2, r3
 801bf32:	f7fe fe45 	bl	801abc0 <LL_ADC_SetOffsetSaturation>
 801bf36:	e17b      	b.n	801c230 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	2100      	movs	r1, #0
 801bf3e:	4618      	mov	r0, r3
 801bf40:	f7fe fdf2 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801bf44:	4603      	mov	r3, r0
 801bf46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d10a      	bne.n	801bf64 <HAL_ADC_ConfigChannel+0x15c>
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	2100      	movs	r1, #0
 801bf54:	4618      	mov	r0, r3
 801bf56:	f7fe fde7 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	0e9b      	lsrs	r3, r3, #26
 801bf5e:	f003 021f 	and.w	r2, r3, #31
 801bf62:	e01e      	b.n	801bfa2 <HAL_ADC_ConfigChannel+0x19a>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	2100      	movs	r1, #0
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f7fe fddc 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801bf70:	4603      	mov	r3, r0
 801bf72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801bf76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801bf7a:	fa93 f3a3 	rbit	r3, r3
 801bf7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801bf82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bf86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801bf8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d101      	bne.n	801bf96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801bf92:	2320      	movs	r3, #32
 801bf94:	e004      	b.n	801bfa0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801bf96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bf9a:	fab3 f383 	clz	r3, r3
 801bf9e:	b2db      	uxtb	r3, r3
 801bfa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d105      	bne.n	801bfba <HAL_ADC_ConfigChannel+0x1b2>
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	0e9b      	lsrs	r3, r3, #26
 801bfb4:	f003 031f 	and.w	r3, r3, #31
 801bfb8:	e018      	b.n	801bfec <HAL_ADC_ConfigChannel+0x1e4>
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801bfc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801bfc6:	fa93 f3a3 	rbit	r3, r3
 801bfca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801bfce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bfd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801bfd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d101      	bne.n	801bfe2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801bfde:	2320      	movs	r3, #32
 801bfe0:	e004      	b.n	801bfec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801bfe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bfe6:	fab3 f383 	clz	r3, r3
 801bfea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801bfec:	429a      	cmp	r2, r3
 801bfee:	d106      	bne.n	801bffe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	2200      	movs	r2, #0
 801bff6:	2100      	movs	r1, #0
 801bff8:	4618      	mov	r0, r3
 801bffa:	f7fe fdab 	bl	801ab54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2101      	movs	r1, #1
 801c004:	4618      	mov	r0, r3
 801c006:	f7fe fd8f 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c00a:	4603      	mov	r3, r0
 801c00c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c010:	2b00      	cmp	r3, #0
 801c012:	d10a      	bne.n	801c02a <HAL_ADC_ConfigChannel+0x222>
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	2101      	movs	r1, #1
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7fe fd84 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c020:	4603      	mov	r3, r0
 801c022:	0e9b      	lsrs	r3, r3, #26
 801c024:	f003 021f 	and.w	r2, r3, #31
 801c028:	e01e      	b.n	801c068 <HAL_ADC_ConfigChannel+0x260>
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	2101      	movs	r1, #1
 801c030:	4618      	mov	r0, r3
 801c032:	f7fe fd79 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c036:	4603      	mov	r3, r0
 801c038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c03c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c040:	fa93 f3a3 	rbit	r3, r3
 801c044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801c048:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c04c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801c050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801c054:	2b00      	cmp	r3, #0
 801c056:	d101      	bne.n	801c05c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801c058:	2320      	movs	r3, #32
 801c05a:	e004      	b.n	801c066 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801c05c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801c060:	fab3 f383 	clz	r3, r3
 801c064:	b2db      	uxtb	r3, r3
 801c066:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801c068:	683b      	ldr	r3, [r7, #0]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c070:	2b00      	cmp	r3, #0
 801c072:	d105      	bne.n	801c080 <HAL_ADC_ConfigChannel+0x278>
 801c074:	683b      	ldr	r3, [r7, #0]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	0e9b      	lsrs	r3, r3, #26
 801c07a:	f003 031f 	and.w	r3, r3, #31
 801c07e:	e018      	b.n	801c0b2 <HAL_ADC_ConfigChannel+0x2aa>
 801c080:	683b      	ldr	r3, [r7, #0]
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c08c:	fa93 f3a3 	rbit	r3, r3
 801c090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801c094:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801c09c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d101      	bne.n	801c0a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801c0a4:	2320      	movs	r3, #32
 801c0a6:	e004      	b.n	801c0b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801c0a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c0ac:	fab3 f383 	clz	r3, r3
 801c0b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d106      	bne.n	801c0c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	2101      	movs	r1, #1
 801c0be:	4618      	mov	r0, r3
 801c0c0:	f7fe fd48 	bl	801ab54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	2102      	movs	r1, #2
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	f7fe fd2c 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d10a      	bne.n	801c0f0 <HAL_ADC_ConfigChannel+0x2e8>
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	2102      	movs	r1, #2
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f7fe fd21 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c0e6:	4603      	mov	r3, r0
 801c0e8:	0e9b      	lsrs	r3, r3, #26
 801c0ea:	f003 021f 	and.w	r2, r3, #31
 801c0ee:	e01e      	b.n	801c12e <HAL_ADC_ConfigChannel+0x326>
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	2102      	movs	r1, #2
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7fe fd16 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c106:	fa93 f3a3 	rbit	r3, r3
 801c10a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801c10e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801c116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d101      	bne.n	801c122 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801c11e:	2320      	movs	r3, #32
 801c120:	e004      	b.n	801c12c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801c122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c126:	fab3 f383 	clz	r3, r3
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801c12e:	683b      	ldr	r3, [r7, #0]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c136:	2b00      	cmp	r3, #0
 801c138:	d105      	bne.n	801c146 <HAL_ADC_ConfigChannel+0x33e>
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	0e9b      	lsrs	r3, r3, #26
 801c140:	f003 031f 	and.w	r3, r3, #31
 801c144:	e016      	b.n	801c174 <HAL_ADC_ConfigChannel+0x36c>
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c14e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c152:	fa93 f3a3 	rbit	r3, r3
 801c156:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801c158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c15a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801c15e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c162:	2b00      	cmp	r3, #0
 801c164:	d101      	bne.n	801c16a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801c166:	2320      	movs	r3, #32
 801c168:	e004      	b.n	801c174 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801c16a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c16e:	fab3 f383 	clz	r3, r3
 801c172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801c174:	429a      	cmp	r2, r3
 801c176:	d106      	bne.n	801c186 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	2200      	movs	r2, #0
 801c17e:	2102      	movs	r1, #2
 801c180:	4618      	mov	r0, r3
 801c182:	f7fe fce7 	bl	801ab54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	2103      	movs	r1, #3
 801c18c:	4618      	mov	r0, r3
 801c18e:	f7fe fccb 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c192:	4603      	mov	r3, r0
 801c194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d10a      	bne.n	801c1b2 <HAL_ADC_ConfigChannel+0x3aa>
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2103      	movs	r1, #3
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7fe fcc0 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	0e9b      	lsrs	r3, r3, #26
 801c1ac:	f003 021f 	and.w	r2, r3, #31
 801c1b0:	e017      	b.n	801c1e2 <HAL_ADC_ConfigChannel+0x3da>
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	2103      	movs	r1, #3
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7fe fcb5 	bl	801ab28 <LL_ADC_GetOffsetChannel>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c1c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c1c4:	fa93 f3a3 	rbit	r3, r3
 801c1c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801c1ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801c1ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d101      	bne.n	801c1d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801c1d4:	2320      	movs	r3, #32
 801c1d6:	e003      	b.n	801c1e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801c1d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c1da:	fab3 f383 	clz	r3, r3
 801c1de:	b2db      	uxtb	r3, r3
 801c1e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d105      	bne.n	801c1fa <HAL_ADC_ConfigChannel+0x3f2>
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	0e9b      	lsrs	r3, r3, #26
 801c1f4:	f003 031f 	and.w	r3, r3, #31
 801c1f8:	e011      	b.n	801c21e <HAL_ADC_ConfigChannel+0x416>
 801c1fa:	683b      	ldr	r3, [r7, #0]
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c202:	fa93 f3a3 	rbit	r3, r3
 801c206:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801c208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c20a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801c20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d101      	bne.n	801c216 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801c212:	2320      	movs	r3, #32
 801c214:	e003      	b.n	801c21e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801c216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c218:	fab3 f383 	clz	r3, r3
 801c21c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801c21e:	429a      	cmp	r2, r3
 801c220:	d106      	bne.n	801c230 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	2200      	movs	r2, #0
 801c228:	2103      	movs	r1, #3
 801c22a:	4618      	mov	r0, r3
 801c22c:	f7fe fc92 	bl	801ab54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	4618      	mov	r0, r3
 801c236:	f7fe fe29 	bl	801ae8c <LL_ADC_IsEnabled>
 801c23a:	4603      	mov	r3, r0
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	f040 813d 	bne.w	801c4bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	6818      	ldr	r0, [r3, #0]
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	6819      	ldr	r1, [r3, #0]
 801c24a:	683b      	ldr	r3, [r7, #0]
 801c24c:	68db      	ldr	r3, [r3, #12]
 801c24e:	461a      	mov	r2, r3
 801c250:	f7fe fd62 	bl	801ad18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	68db      	ldr	r3, [r3, #12]
 801c258:	4aa2      	ldr	r2, [pc, #648]	; (801c4e4 <HAL_ADC_ConfigChannel+0x6dc>)
 801c25a:	4293      	cmp	r3, r2
 801c25c:	f040 812e 	bne.w	801c4bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801c264:	683b      	ldr	r3, [r7, #0]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d10b      	bne.n	801c288 <HAL_ADC_ConfigChannel+0x480>
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	0e9b      	lsrs	r3, r3, #26
 801c276:	3301      	adds	r3, #1
 801c278:	f003 031f 	and.w	r3, r3, #31
 801c27c:	2b09      	cmp	r3, #9
 801c27e:	bf94      	ite	ls
 801c280:	2301      	movls	r3, #1
 801c282:	2300      	movhi	r3, #0
 801c284:	b2db      	uxtb	r3, r3
 801c286:	e019      	b.n	801c2bc <HAL_ADC_ConfigChannel+0x4b4>
 801c288:	683b      	ldr	r3, [r7, #0]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c290:	fa93 f3a3 	rbit	r3, r3
 801c294:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801c296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c298:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801c29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d101      	bne.n	801c2a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801c2a0:	2320      	movs	r3, #32
 801c2a2:	e003      	b.n	801c2ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801c2a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c2a6:	fab3 f383 	clz	r3, r3
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	3301      	adds	r3, #1
 801c2ae:	f003 031f 	and.w	r3, r3, #31
 801c2b2:	2b09      	cmp	r3, #9
 801c2b4:	bf94      	ite	ls
 801c2b6:	2301      	movls	r3, #1
 801c2b8:	2300      	movhi	r3, #0
 801c2ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d079      	beq.n	801c3b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d107      	bne.n	801c2dc <HAL_ADC_ConfigChannel+0x4d4>
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	0e9b      	lsrs	r3, r3, #26
 801c2d2:	3301      	adds	r3, #1
 801c2d4:	069b      	lsls	r3, r3, #26
 801c2d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801c2da:	e015      	b.n	801c308 <HAL_ADC_ConfigChannel+0x500>
 801c2dc:	683b      	ldr	r3, [r7, #0]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2e4:	fa93 f3a3 	rbit	r3, r3
 801c2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801c2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801c2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d101      	bne.n	801c2f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801c2f4:	2320      	movs	r3, #32
 801c2f6:	e003      	b.n	801c300 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801c2f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2fa:	fab3 f383 	clz	r3, r3
 801c2fe:	b2db      	uxtb	r3, r3
 801c300:	3301      	adds	r3, #1
 801c302:	069b      	lsls	r3, r3, #26
 801c304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801c308:	683b      	ldr	r3, [r7, #0]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c310:	2b00      	cmp	r3, #0
 801c312:	d109      	bne.n	801c328 <HAL_ADC_ConfigChannel+0x520>
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	0e9b      	lsrs	r3, r3, #26
 801c31a:	3301      	adds	r3, #1
 801c31c:	f003 031f 	and.w	r3, r3, #31
 801c320:	2101      	movs	r1, #1
 801c322:	fa01 f303 	lsl.w	r3, r1, r3
 801c326:	e017      	b.n	801c358 <HAL_ADC_ConfigChannel+0x550>
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c330:	fa93 f3a3 	rbit	r3, r3
 801c334:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801c336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c338:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801c33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d101      	bne.n	801c344 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801c340:	2320      	movs	r3, #32
 801c342:	e003      	b.n	801c34c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801c344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c346:	fab3 f383 	clz	r3, r3
 801c34a:	b2db      	uxtb	r3, r3
 801c34c:	3301      	adds	r3, #1
 801c34e:	f003 031f 	and.w	r3, r3, #31
 801c352:	2101      	movs	r1, #1
 801c354:	fa01 f303 	lsl.w	r3, r1, r3
 801c358:	ea42 0103 	orr.w	r1, r2, r3
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c364:	2b00      	cmp	r3, #0
 801c366:	d10a      	bne.n	801c37e <HAL_ADC_ConfigChannel+0x576>
 801c368:	683b      	ldr	r3, [r7, #0]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	0e9b      	lsrs	r3, r3, #26
 801c36e:	3301      	adds	r3, #1
 801c370:	f003 021f 	and.w	r2, r3, #31
 801c374:	4613      	mov	r3, r2
 801c376:	005b      	lsls	r3, r3, #1
 801c378:	4413      	add	r3, r2
 801c37a:	051b      	lsls	r3, r3, #20
 801c37c:	e018      	b.n	801c3b0 <HAL_ADC_ConfigChannel+0x5a8>
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c386:	fa93 f3a3 	rbit	r3, r3
 801c38a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801c38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801c390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c392:	2b00      	cmp	r3, #0
 801c394:	d101      	bne.n	801c39a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801c396:	2320      	movs	r3, #32
 801c398:	e003      	b.n	801c3a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801c39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c39c:	fab3 f383 	clz	r3, r3
 801c3a0:	b2db      	uxtb	r3, r3
 801c3a2:	3301      	adds	r3, #1
 801c3a4:	f003 021f 	and.w	r2, r3, #31
 801c3a8:	4613      	mov	r3, r2
 801c3aa:	005b      	lsls	r3, r3, #1
 801c3ac:	4413      	add	r3, r2
 801c3ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801c3b0:	430b      	orrs	r3, r1
 801c3b2:	e07e      	b.n	801c4b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d107      	bne.n	801c3d0 <HAL_ADC_ConfigChannel+0x5c8>
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	0e9b      	lsrs	r3, r3, #26
 801c3c6:	3301      	adds	r3, #1
 801c3c8:	069b      	lsls	r3, r3, #26
 801c3ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801c3ce:	e015      	b.n	801c3fc <HAL_ADC_ConfigChannel+0x5f4>
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3d8:	fa93 f3a3 	rbit	r3, r3
 801c3dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d101      	bne.n	801c3ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801c3e8:	2320      	movs	r3, #32
 801c3ea:	e003      	b.n	801c3f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3ee:	fab3 f383 	clz	r3, r3
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	3301      	adds	r3, #1
 801c3f6:	069b      	lsls	r3, r3, #26
 801c3f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801c3fc:	683b      	ldr	r3, [r7, #0]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c404:	2b00      	cmp	r3, #0
 801c406:	d109      	bne.n	801c41c <HAL_ADC_ConfigChannel+0x614>
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	0e9b      	lsrs	r3, r3, #26
 801c40e:	3301      	adds	r3, #1
 801c410:	f003 031f 	and.w	r3, r3, #31
 801c414:	2101      	movs	r1, #1
 801c416:	fa01 f303 	lsl.w	r3, r1, r3
 801c41a:	e017      	b.n	801c44c <HAL_ADC_ConfigChannel+0x644>
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c422:	6a3b      	ldr	r3, [r7, #32]
 801c424:	fa93 f3a3 	rbit	r3, r3
 801c428:	61fb      	str	r3, [r7, #28]
  return result;
 801c42a:	69fb      	ldr	r3, [r7, #28]
 801c42c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c430:	2b00      	cmp	r3, #0
 801c432:	d101      	bne.n	801c438 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801c434:	2320      	movs	r3, #32
 801c436:	e003      	b.n	801c440 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c43a:	fab3 f383 	clz	r3, r3
 801c43e:	b2db      	uxtb	r3, r3
 801c440:	3301      	adds	r3, #1
 801c442:	f003 031f 	and.w	r3, r3, #31
 801c446:	2101      	movs	r1, #1
 801c448:	fa01 f303 	lsl.w	r3, r1, r3
 801c44c:	ea42 0103 	orr.w	r1, r2, r3
 801c450:	683b      	ldr	r3, [r7, #0]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d10d      	bne.n	801c478 <HAL_ADC_ConfigChannel+0x670>
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	0e9b      	lsrs	r3, r3, #26
 801c462:	3301      	adds	r3, #1
 801c464:	f003 021f 	and.w	r2, r3, #31
 801c468:	4613      	mov	r3, r2
 801c46a:	005b      	lsls	r3, r3, #1
 801c46c:	4413      	add	r3, r2
 801c46e:	3b1e      	subs	r3, #30
 801c470:	051b      	lsls	r3, r3, #20
 801c472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801c476:	e01b      	b.n	801c4b0 <HAL_ADC_ConfigChannel+0x6a8>
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c47e:	697b      	ldr	r3, [r7, #20]
 801c480:	fa93 f3a3 	rbit	r3, r3
 801c484:	613b      	str	r3, [r7, #16]
  return result;
 801c486:	693b      	ldr	r3, [r7, #16]
 801c488:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c48a:	69bb      	ldr	r3, [r7, #24]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d101      	bne.n	801c494 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801c490:	2320      	movs	r3, #32
 801c492:	e003      	b.n	801c49c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801c494:	69bb      	ldr	r3, [r7, #24]
 801c496:	fab3 f383 	clz	r3, r3
 801c49a:	b2db      	uxtb	r3, r3
 801c49c:	3301      	adds	r3, #1
 801c49e:	f003 021f 	and.w	r2, r3, #31
 801c4a2:	4613      	mov	r3, r2
 801c4a4:	005b      	lsls	r3, r3, #1
 801c4a6:	4413      	add	r3, r2
 801c4a8:	3b1e      	subs	r3, #30
 801c4aa:	051b      	lsls	r3, r3, #20
 801c4ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801c4b0:	430b      	orrs	r3, r1
 801c4b2:	683a      	ldr	r2, [r7, #0]
 801c4b4:	6892      	ldr	r2, [r2, #8]
 801c4b6:	4619      	mov	r1, r3
 801c4b8:	f7fe fc02 	bl	801acc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801c4bc:	683b      	ldr	r3, [r7, #0]
 801c4be:	681a      	ldr	r2, [r3, #0]
 801c4c0:	4b09      	ldr	r3, [pc, #36]	; (801c4e8 <HAL_ADC_ConfigChannel+0x6e0>)
 801c4c2:	4013      	ands	r3, r2
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f000 80af 	beq.w	801c628 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c4d2:	d004      	beq.n	801c4de <HAL_ADC_ConfigChannel+0x6d6>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	4a04      	ldr	r2, [pc, #16]	; (801c4ec <HAL_ADC_ConfigChannel+0x6e4>)
 801c4da:	4293      	cmp	r3, r2
 801c4dc:	d10a      	bne.n	801c4f4 <HAL_ADC_ConfigChannel+0x6ec>
 801c4de:	4b04      	ldr	r3, [pc, #16]	; (801c4f0 <HAL_ADC_ConfigChannel+0x6e8>)
 801c4e0:	e009      	b.n	801c4f6 <HAL_ADC_ConfigChannel+0x6ee>
 801c4e2:	bf00      	nop
 801c4e4:	407f0000 	.word	0x407f0000
 801c4e8:	80080000 	.word	0x80080000
 801c4ec:	50000100 	.word	0x50000100
 801c4f0:	50000300 	.word	0x50000300
 801c4f4:	4b51      	ldr	r3, [pc, #324]	; (801c63c <HAL_ADC_ConfigChannel+0x834>)
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7fe fae4 	bl	801aac4 <LL_ADC_GetCommonPathInternalCh>
 801c4fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	4a4e      	ldr	r2, [pc, #312]	; (801c640 <HAL_ADC_ConfigChannel+0x838>)
 801c506:	4293      	cmp	r3, r2
 801c508:	d004      	beq.n	801c514 <HAL_ADC_ConfigChannel+0x70c>
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	4a4d      	ldr	r2, [pc, #308]	; (801c644 <HAL_ADC_ConfigChannel+0x83c>)
 801c510:	4293      	cmp	r3, r2
 801c512:	d134      	bne.n	801c57e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801c514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d12e      	bne.n	801c57e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c528:	d17e      	bne.n	801c628 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c532:	d004      	beq.n	801c53e <HAL_ADC_ConfigChannel+0x736>
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	4a43      	ldr	r2, [pc, #268]	; (801c648 <HAL_ADC_ConfigChannel+0x840>)
 801c53a:	4293      	cmp	r3, r2
 801c53c:	d101      	bne.n	801c542 <HAL_ADC_ConfigChannel+0x73a>
 801c53e:	4a43      	ldr	r2, [pc, #268]	; (801c64c <HAL_ADC_ConfigChannel+0x844>)
 801c540:	e000      	b.n	801c544 <HAL_ADC_ConfigChannel+0x73c>
 801c542:	4a3e      	ldr	r2, [pc, #248]	; (801c63c <HAL_ADC_ConfigChannel+0x834>)
 801c544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801c54c:	4619      	mov	r1, r3
 801c54e:	4610      	mov	r0, r2
 801c550:	f7fe faa5 	bl	801aa9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801c554:	4b3e      	ldr	r3, [pc, #248]	; (801c650 <HAL_ADC_ConfigChannel+0x848>)
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	099b      	lsrs	r3, r3, #6
 801c55a:	4a3e      	ldr	r2, [pc, #248]	; (801c654 <HAL_ADC_ConfigChannel+0x84c>)
 801c55c:	fba2 2303 	umull	r2, r3, r2, r3
 801c560:	099b      	lsrs	r3, r3, #6
 801c562:	1c5a      	adds	r2, r3, #1
 801c564:	4613      	mov	r3, r2
 801c566:	005b      	lsls	r3, r3, #1
 801c568:	4413      	add	r3, r2
 801c56a:	009b      	lsls	r3, r3, #2
 801c56c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801c56e:	e002      	b.n	801c576 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	3b01      	subs	r3, #1
 801c574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d1f9      	bne.n	801c570 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801c57c:	e054      	b.n	801c628 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801c57e:	683b      	ldr	r3, [r7, #0]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	4a35      	ldr	r2, [pc, #212]	; (801c658 <HAL_ADC_ConfigChannel+0x850>)
 801c584:	4293      	cmp	r3, r2
 801c586:	d120      	bne.n	801c5ca <HAL_ADC_ConfigChannel+0x7c2>
 801c588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c58c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c590:	2b00      	cmp	r3, #0
 801c592:	d11a      	bne.n	801c5ca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c59c:	d144      	bne.n	801c628 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c5a6:	d004      	beq.n	801c5b2 <HAL_ADC_ConfigChannel+0x7aa>
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	4a26      	ldr	r2, [pc, #152]	; (801c648 <HAL_ADC_ConfigChannel+0x840>)
 801c5ae:	4293      	cmp	r3, r2
 801c5b0:	d101      	bne.n	801c5b6 <HAL_ADC_ConfigChannel+0x7ae>
 801c5b2:	4a26      	ldr	r2, [pc, #152]	; (801c64c <HAL_ADC_ConfigChannel+0x844>)
 801c5b4:	e000      	b.n	801c5b8 <HAL_ADC_ConfigChannel+0x7b0>
 801c5b6:	4a21      	ldr	r2, [pc, #132]	; (801c63c <HAL_ADC_ConfigChannel+0x834>)
 801c5b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c5bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c5c0:	4619      	mov	r1, r3
 801c5c2:	4610      	mov	r0, r2
 801c5c4:	f7fe fa6b 	bl	801aa9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801c5c8:	e02e      	b.n	801c628 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801c5ca:	683b      	ldr	r3, [r7, #0]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	4a23      	ldr	r2, [pc, #140]	; (801c65c <HAL_ADC_ConfigChannel+0x854>)
 801c5d0:	4293      	cmp	r3, r2
 801c5d2:	d129      	bne.n	801c628 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801c5d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c5d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d123      	bne.n	801c628 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	4a18      	ldr	r2, [pc, #96]	; (801c648 <HAL_ADC_ConfigChannel+0x840>)
 801c5e6:	4293      	cmp	r3, r2
 801c5e8:	d01e      	beq.n	801c628 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c5f2:	d004      	beq.n	801c5fe <HAL_ADC_ConfigChannel+0x7f6>
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4a13      	ldr	r2, [pc, #76]	; (801c648 <HAL_ADC_ConfigChannel+0x840>)
 801c5fa:	4293      	cmp	r3, r2
 801c5fc:	d101      	bne.n	801c602 <HAL_ADC_ConfigChannel+0x7fa>
 801c5fe:	4a13      	ldr	r2, [pc, #76]	; (801c64c <HAL_ADC_ConfigChannel+0x844>)
 801c600:	e000      	b.n	801c604 <HAL_ADC_ConfigChannel+0x7fc>
 801c602:	4a0e      	ldr	r2, [pc, #56]	; (801c63c <HAL_ADC_ConfigChannel+0x834>)
 801c604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801c60c:	4619      	mov	r1, r3
 801c60e:	4610      	mov	r0, r2
 801c610:	f7fe fa45 	bl	801aa9e <LL_ADC_SetCommonPathInternalCh>
 801c614:	e008      	b.n	801c628 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c61a:	f043 0220 	orr.w	r2, r3, #32
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801c622:	2301      	movs	r3, #1
 801c624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	2200      	movs	r2, #0
 801c62c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801c630:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801c634:	4618      	mov	r0, r3
 801c636:	37d8      	adds	r7, #216	; 0xd8
 801c638:	46bd      	mov	sp, r7
 801c63a:	bd80      	pop	{r7, pc}
 801c63c:	50000700 	.word	0x50000700
 801c640:	c3210000 	.word	0xc3210000
 801c644:	90c00010 	.word	0x90c00010
 801c648:	50000100 	.word	0x50000100
 801c64c:	50000300 	.word	0x50000300
 801c650:	20000000 	.word	0x20000000
 801c654:	053e2d63 	.word	0x053e2d63
 801c658:	c7520000 	.word	0xc7520000
 801c65c:	cb840000 	.word	0xcb840000

0801c660 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b088      	sub	sp, #32
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
 801c668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801c66a:	2300      	movs	r3, #0
 801c66c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	4618      	mov	r0, r3
 801c678:	f7fe fc56 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801c67c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	4618      	mov	r0, r3
 801c684:	f7fe fc77 	bl	801af76 <LL_ADC_INJ_IsConversionOngoing>
 801c688:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801c68a:	693b      	ldr	r3, [r7, #16]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d103      	bne.n	801c698 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	2b00      	cmp	r3, #0
 801c694:	f000 8098 	beq.w	801c7c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	68db      	ldr	r3, [r3, #12]
 801c69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d02a      	beq.n	801c6fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	7f5b      	ldrb	r3, [r3, #29]
 801c6aa:	2b01      	cmp	r3, #1
 801c6ac:	d126      	bne.n	801c6fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	7f1b      	ldrb	r3, [r3, #28]
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d122      	bne.n	801c6fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801c6ba:	e014      	b.n	801c6e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801c6bc:	69fb      	ldr	r3, [r7, #28]
 801c6be:	4a45      	ldr	r2, [pc, #276]	; (801c7d4 <ADC_ConversionStop+0x174>)
 801c6c0:	4293      	cmp	r3, r2
 801c6c2:	d90d      	bls.n	801c6e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c6c8:	f043 0210 	orr.w	r2, r3, #16
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c6d4:	f043 0201 	orr.w	r2, r3, #1
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801c6dc:	2301      	movs	r3, #1
 801c6de:	e074      	b.n	801c7ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801c6e0:	69fb      	ldr	r3, [r7, #28]
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6f0:	2b40      	cmp	r3, #64	; 0x40
 801c6f2:	d1e3      	bne.n	801c6bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	2240      	movs	r2, #64	; 0x40
 801c6fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801c6fc:	69bb      	ldr	r3, [r7, #24]
 801c6fe:	2b02      	cmp	r3, #2
 801c700:	d014      	beq.n	801c72c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	4618      	mov	r0, r3
 801c708:	f7fe fc0e 	bl	801af28 <LL_ADC_REG_IsConversionOngoing>
 801c70c:	4603      	mov	r3, r0
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d00c      	beq.n	801c72c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	4618      	mov	r0, r3
 801c718:	f7fe fbcb 	bl	801aeb2 <LL_ADC_IsDisableOngoing>
 801c71c:	4603      	mov	r3, r0
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d104      	bne.n	801c72c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	4618      	mov	r0, r3
 801c728:	f7fe fbea 	bl	801af00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801c72c:	69bb      	ldr	r3, [r7, #24]
 801c72e:	2b01      	cmp	r3, #1
 801c730:	d014      	beq.n	801c75c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	4618      	mov	r0, r3
 801c738:	f7fe fc1d 	bl	801af76 <LL_ADC_INJ_IsConversionOngoing>
 801c73c:	4603      	mov	r3, r0
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d00c      	beq.n	801c75c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	4618      	mov	r0, r3
 801c748:	f7fe fbb3 	bl	801aeb2 <LL_ADC_IsDisableOngoing>
 801c74c:	4603      	mov	r3, r0
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d104      	bne.n	801c75c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	4618      	mov	r0, r3
 801c758:	f7fe fbf9 	bl	801af4e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801c75c:	69bb      	ldr	r3, [r7, #24]
 801c75e:	2b02      	cmp	r3, #2
 801c760:	d005      	beq.n	801c76e <ADC_ConversionStop+0x10e>
 801c762:	69bb      	ldr	r3, [r7, #24]
 801c764:	2b03      	cmp	r3, #3
 801c766:	d105      	bne.n	801c774 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801c768:	230c      	movs	r3, #12
 801c76a:	617b      	str	r3, [r7, #20]
        break;
 801c76c:	e005      	b.n	801c77a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801c76e:	2308      	movs	r3, #8
 801c770:	617b      	str	r3, [r7, #20]
        break;
 801c772:	e002      	b.n	801c77a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801c774:	2304      	movs	r3, #4
 801c776:	617b      	str	r3, [r7, #20]
        break;
 801c778:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801c77a:	f7fe f94f 	bl	801aa1c <HAL_GetTick>
 801c77e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801c780:	e01b      	b.n	801c7ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801c782:	f7fe f94b 	bl	801aa1c <HAL_GetTick>
 801c786:	4602      	mov	r2, r0
 801c788:	68bb      	ldr	r3, [r7, #8]
 801c78a:	1ad3      	subs	r3, r2, r3
 801c78c:	2b05      	cmp	r3, #5
 801c78e:	d914      	bls.n	801c7ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	689a      	ldr	r2, [r3, #8]
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	4013      	ands	r3, r2
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d00d      	beq.n	801c7ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c7a2:	f043 0210 	orr.w	r2, r3, #16
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c7ae:	f043 0201 	orr.w	r2, r3, #1
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	e007      	b.n	801c7ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	689a      	ldr	r2, [r3, #8]
 801c7c0:	697b      	ldr	r3, [r7, #20]
 801c7c2:	4013      	ands	r3, r2
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d1dc      	bne.n	801c782 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801c7c8:	2300      	movs	r3, #0
}
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	3720      	adds	r7, #32
 801c7ce:	46bd      	mov	sp, r7
 801c7d0:	bd80      	pop	{r7, pc}
 801c7d2:	bf00      	nop
 801c7d4:	a33fffff 	.word	0xa33fffff

0801c7d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b084      	sub	sp, #16
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	f7fe fb51 	bl	801ae8c <LL_ADC_IsEnabled>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d14d      	bne.n	801c88c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	689a      	ldr	r2, [r3, #8]
 801c7f6:	4b28      	ldr	r3, [pc, #160]	; (801c898 <ADC_Enable+0xc0>)
 801c7f8:	4013      	ands	r3, r2
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d00d      	beq.n	801c81a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c802:	f043 0210 	orr.w	r2, r3, #16
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c80e:	f043 0201 	orr.w	r2, r3, #1
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801c816:	2301      	movs	r3, #1
 801c818:	e039      	b.n	801c88e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	4618      	mov	r0, r3
 801c820:	f7fe fb0c 	bl	801ae3c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801c824:	f7fe f8fa 	bl	801aa1c <HAL_GetTick>
 801c828:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801c82a:	e028      	b.n	801c87e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	4618      	mov	r0, r3
 801c832:	f7fe fb2b 	bl	801ae8c <LL_ADC_IsEnabled>
 801c836:	4603      	mov	r3, r0
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d104      	bne.n	801c846 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4618      	mov	r0, r3
 801c842:	f7fe fafb 	bl	801ae3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801c846:	f7fe f8e9 	bl	801aa1c <HAL_GetTick>
 801c84a:	4602      	mov	r2, r0
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	1ad3      	subs	r3, r2, r3
 801c850:	2b02      	cmp	r3, #2
 801c852:	d914      	bls.n	801c87e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f003 0301 	and.w	r3, r3, #1
 801c85e:	2b01      	cmp	r3, #1
 801c860:	d00d      	beq.n	801c87e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c866:	f043 0210 	orr.w	r2, r3, #16
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c872:	f043 0201 	orr.w	r2, r3, #1
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801c87a:	2301      	movs	r3, #1
 801c87c:	e007      	b.n	801c88e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	f003 0301 	and.w	r3, r3, #1
 801c888:	2b01      	cmp	r3, #1
 801c88a:	d1cf      	bne.n	801c82c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801c88c:	2300      	movs	r3, #0
}
 801c88e:	4618      	mov	r0, r3
 801c890:	3710      	adds	r7, #16
 801c892:	46bd      	mov	sp, r7
 801c894:	bd80      	pop	{r7, pc}
 801c896:	bf00      	nop
 801c898:	8000003f 	.word	0x8000003f

0801c89c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b084      	sub	sp, #16
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7fe fb02 	bl	801aeb2 <LL_ADC_IsDisableOngoing>
 801c8ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	f7fe fae9 	bl	801ae8c <LL_ADC_IsEnabled>
 801c8ba:	4603      	mov	r3, r0
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d047      	beq.n	801c950 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d144      	bne.n	801c950 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	689b      	ldr	r3, [r3, #8]
 801c8cc:	f003 030d 	and.w	r3, r3, #13
 801c8d0:	2b01      	cmp	r3, #1
 801c8d2:	d10c      	bne.n	801c8ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f7fe fac3 	bl	801ae64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	2203      	movs	r2, #3
 801c8e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801c8e6:	f7fe f899 	bl	801aa1c <HAL_GetTick>
 801c8ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801c8ec:	e029      	b.n	801c942 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c8f2:	f043 0210 	orr.w	r2, r3, #16
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8fe:	f043 0201 	orr.w	r2, r3, #1
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801c906:	2301      	movs	r3, #1
 801c908:	e023      	b.n	801c952 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801c90a:	f7fe f887 	bl	801aa1c <HAL_GetTick>
 801c90e:	4602      	mov	r2, r0
 801c910:	68bb      	ldr	r3, [r7, #8]
 801c912:	1ad3      	subs	r3, r2, r3
 801c914:	2b02      	cmp	r3, #2
 801c916:	d914      	bls.n	801c942 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	689b      	ldr	r3, [r3, #8]
 801c91e:	f003 0301 	and.w	r3, r3, #1
 801c922:	2b00      	cmp	r3, #0
 801c924:	d00d      	beq.n	801c942 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c92a:	f043 0210 	orr.w	r2, r3, #16
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c936:	f043 0201 	orr.w	r2, r3, #1
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801c93e:	2301      	movs	r3, #1
 801c940:	e007      	b.n	801c952 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	689b      	ldr	r3, [r3, #8]
 801c948:	f003 0301 	and.w	r3, r3, #1
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d1dc      	bne.n	801c90a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801c950:	2300      	movs	r3, #0
}
 801c952:	4618      	mov	r0, r3
 801c954:	3710      	adds	r7, #16
 801c956:	46bd      	mov	sp, r7
 801c958:	bd80      	pop	{r7, pc}

0801c95a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801c95a:	b580      	push	{r7, lr}
 801c95c:	b084      	sub	sp, #16
 801c95e:	af00      	add	r7, sp, #0
 801c960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c966:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c96c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c970:	2b00      	cmp	r3, #0
 801c972:	d14b      	bne.n	801ca0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c978:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	f003 0308 	and.w	r3, r3, #8
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d021      	beq.n	801c9d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	4618      	mov	r0, r3
 801c994:	f7fe f942 	bl	801ac1c <LL_ADC_REG_IsTriggerSourceSWStart>
 801c998:	4603      	mov	r3, r0
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d032      	beq.n	801ca04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	68db      	ldr	r3, [r3, #12]
 801c9a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d12b      	bne.n	801ca04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d11f      	bne.n	801ca04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9c8:	f043 0201 	orr.w	r2, r3, #1
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	65da      	str	r2, [r3, #92]	; 0x5c
 801c9d0:	e018      	b.n	801ca04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	68db      	ldr	r3, [r3, #12]
 801c9d8:	f003 0302 	and.w	r3, r3, #2
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d111      	bne.n	801ca04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d105      	bne.n	801ca04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9fc:	f043 0201 	orr.w	r2, r3, #1
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ec fe9f 	bl	8009748 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801ca0a:	e00e      	b.n	801ca2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca10:	f003 0310 	and.w	r3, r3, #16
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d003      	beq.n	801ca20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801ca18:	68f8      	ldr	r0, [r7, #12]
 801ca1a:	f7ff f9eb 	bl	801bdf4 <HAL_ADC_ErrorCallback>
}
 801ca1e:	e004      	b.n	801ca2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca26:	6878      	ldr	r0, [r7, #4]
 801ca28:	4798      	blx	r3
}
 801ca2a:	bf00      	nop
 801ca2c:	3710      	adds	r7, #16
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	bd80      	pop	{r7, pc}

0801ca32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801ca32:	b580      	push	{r7, lr}
 801ca34:	b084      	sub	sp, #16
 801ca36:	af00      	add	r7, sp, #0
 801ca38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801ca40:	68f8      	ldr	r0, [r7, #12]
 801ca42:	f7ff f9c3 	bl	801bdcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ca46:	bf00      	nop
 801ca48:	3710      	adds	r7, #16
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}

0801ca4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801ca4e:	b580      	push	{r7, lr}
 801ca50:	b084      	sub	sp, #16
 801ca52:	af00      	add	r7, sp, #0
 801ca54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca6c:	f043 0204 	orr.w	r2, r3, #4
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801ca74:	68f8      	ldr	r0, [r7, #12]
 801ca76:	f7ff f9bd 	bl	801bdf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ca7a:	bf00      	nop
 801ca7c:	3710      	adds	r7, #16
 801ca7e:	46bd      	mov	sp, r7
 801ca80:	bd80      	pop	{r7, pc}

0801ca82 <LL_ADC_IsEnabled>:
{
 801ca82:	b480      	push	{r7}
 801ca84:	b083      	sub	sp, #12
 801ca86:	af00      	add	r7, sp, #0
 801ca88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	689b      	ldr	r3, [r3, #8]
 801ca8e:	f003 0301 	and.w	r3, r3, #1
 801ca92:	2b01      	cmp	r3, #1
 801ca94:	d101      	bne.n	801ca9a <LL_ADC_IsEnabled+0x18>
 801ca96:	2301      	movs	r3, #1
 801ca98:	e000      	b.n	801ca9c <LL_ADC_IsEnabled+0x1a>
 801ca9a:	2300      	movs	r3, #0
}
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	370c      	adds	r7, #12
 801caa0:	46bd      	mov	sp, r7
 801caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa6:	4770      	bx	lr

0801caa8 <LL_ADC_StartCalibration>:
{
 801caa8:	b480      	push	{r7}
 801caaa:	b083      	sub	sp, #12
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
 801cab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	689b      	ldr	r3, [r3, #8]
 801cab6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801caba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801cabe:	683a      	ldr	r2, [r7, #0]
 801cac0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801cac4:	4313      	orrs	r3, r2
 801cac6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	609a      	str	r2, [r3, #8]
}
 801cace:	bf00      	nop
 801cad0:	370c      	adds	r7, #12
 801cad2:	46bd      	mov	sp, r7
 801cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad8:	4770      	bx	lr

0801cada <LL_ADC_IsCalibrationOnGoing>:
{
 801cada:	b480      	push	{r7}
 801cadc:	b083      	sub	sp, #12
 801cade:	af00      	add	r7, sp, #0
 801cae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	689b      	ldr	r3, [r3, #8]
 801cae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801caea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801caee:	d101      	bne.n	801caf4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801caf0:	2301      	movs	r3, #1
 801caf2:	e000      	b.n	801caf6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801caf4:	2300      	movs	r3, #0
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	370c      	adds	r7, #12
 801cafa:	46bd      	mov	sp, r7
 801cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb00:	4770      	bx	lr

0801cb02 <LL_ADC_REG_IsConversionOngoing>:
{
 801cb02:	b480      	push	{r7}
 801cb04:	b083      	sub	sp, #12
 801cb06:	af00      	add	r7, sp, #0
 801cb08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	689b      	ldr	r3, [r3, #8]
 801cb0e:	f003 0304 	and.w	r3, r3, #4
 801cb12:	2b04      	cmp	r3, #4
 801cb14:	d101      	bne.n	801cb1a <LL_ADC_REG_IsConversionOngoing+0x18>
 801cb16:	2301      	movs	r3, #1
 801cb18:	e000      	b.n	801cb1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801cb1a:	2300      	movs	r3, #0
}
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	370c      	adds	r7, #12
 801cb20:	46bd      	mov	sp, r7
 801cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb26:	4770      	bx	lr

0801cb28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b084      	sub	sp, #16
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
 801cb30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801cb32:	2300      	movs	r3, #0
 801cb34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801cb3c:	2b01      	cmp	r3, #1
 801cb3e:	d101      	bne.n	801cb44 <HAL_ADCEx_Calibration_Start+0x1c>
 801cb40:	2302      	movs	r3, #2
 801cb42:	e04d      	b.n	801cbe0 <HAL_ADCEx_Calibration_Start+0xb8>
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	2201      	movs	r2, #1
 801cb48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801cb4c:	6878      	ldr	r0, [r7, #4]
 801cb4e:	f7ff fea5 	bl	801c89c <ADC_Disable>
 801cb52:	4603      	mov	r3, r0
 801cb54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801cb56:	7bfb      	ldrb	r3, [r7, #15]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d136      	bne.n	801cbca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cb60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801cb64:	f023 0302 	bic.w	r3, r3, #2
 801cb68:	f043 0202 	orr.w	r2, r3, #2
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	6839      	ldr	r1, [r7, #0]
 801cb76:	4618      	mov	r0, r3
 801cb78:	f7ff ff96 	bl	801caa8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801cb7c:	e014      	b.n	801cba8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801cb7e:	68bb      	ldr	r3, [r7, #8]
 801cb80:	3301      	adds	r3, #1
 801cb82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801cb84:	68bb      	ldr	r3, [r7, #8]
 801cb86:	4a18      	ldr	r2, [pc, #96]	; (801cbe8 <HAL_ADCEx_Calibration_Start+0xc0>)
 801cb88:	4293      	cmp	r3, r2
 801cb8a:	d90d      	bls.n	801cba8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cb90:	f023 0312 	bic.w	r3, r3, #18
 801cb94:	f043 0210 	orr.w	r2, r3, #16
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	2200      	movs	r2, #0
 801cba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801cba4:	2301      	movs	r3, #1
 801cba6:	e01b      	b.n	801cbe0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	4618      	mov	r0, r3
 801cbae:	f7ff ff94 	bl	801cada <LL_ADC_IsCalibrationOnGoing>
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d1e2      	bne.n	801cb7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbbc:	f023 0303 	bic.w	r3, r3, #3
 801cbc0:	f043 0201 	orr.w	r2, r3, #1
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	65da      	str	r2, [r3, #92]	; 0x5c
 801cbc8:	e005      	b.n	801cbd6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbce:	f043 0210 	orr.w	r2, r3, #16
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	2200      	movs	r2, #0
 801cbda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801cbde:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3710      	adds	r7, #16
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}
 801cbe8:	0004de01 	.word	0x0004de01

0801cbec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801cbec:	b480      	push	{r7}
 801cbee:	b083      	sub	sp, #12
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801cbf4:	bf00      	nop
 801cbf6:	370c      	adds	r7, #12
 801cbf8:	46bd      	mov	sp, r7
 801cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbfe:	4770      	bx	lr

0801cc00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801cc00:	b480      	push	{r7}
 801cc02:	b083      	sub	sp, #12
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801cc08:	bf00      	nop
 801cc0a:	370c      	adds	r7, #12
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc12:	4770      	bx	lr

0801cc14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801cc14:	b480      	push	{r7}
 801cc16:	b083      	sub	sp, #12
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801cc1c:	bf00      	nop
 801cc1e:	370c      	adds	r7, #12
 801cc20:	46bd      	mov	sp, r7
 801cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc26:	4770      	bx	lr

0801cc28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801cc28:	b480      	push	{r7}
 801cc2a:	b083      	sub	sp, #12
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801cc30:	bf00      	nop
 801cc32:	370c      	adds	r7, #12
 801cc34:	46bd      	mov	sp, r7
 801cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3a:	4770      	bx	lr

0801cc3c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801cc3c:	b480      	push	{r7}
 801cc3e:	b083      	sub	sp, #12
 801cc40:	af00      	add	r7, sp, #0
 801cc42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801cc44:	bf00      	nop
 801cc46:	370c      	adds	r7, #12
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4e:	4770      	bx	lr

0801cc50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801cc50:	b590      	push	{r4, r7, lr}
 801cc52:	b0a1      	sub	sp, #132	; 0x84
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
 801cc58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801cc66:	2b01      	cmp	r3, #1
 801cc68:	d101      	bne.n	801cc6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801cc6a:	2302      	movs	r3, #2
 801cc6c:	e0cb      	b.n	801ce06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	2201      	movs	r2, #1
 801cc72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801cc76:	2300      	movs	r3, #0
 801cc78:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cc86:	d102      	bne.n	801cc8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801cc88:	4b61      	ldr	r3, [pc, #388]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cc8a:	60bb      	str	r3, [r7, #8]
 801cc8c:	e001      	b.n	801cc92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801cc8e:	2300      	movs	r3, #0
 801cc90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801cc92:	68bb      	ldr	r3, [r7, #8]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d10b      	bne.n	801ccb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc9c:	f043 0220 	orr.w	r2, r3, #32
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2200      	movs	r2, #0
 801cca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801ccac:	2301      	movs	r3, #1
 801ccae:	e0aa      	b.n	801ce06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801ccb0:	68bb      	ldr	r3, [r7, #8]
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	f7ff ff25 	bl	801cb02 <LL_ADC_REG_IsConversionOngoing>
 801ccb8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f7ff ff1f 	bl	801cb02 <LL_ADC_REG_IsConversionOngoing>
 801ccc4:	4603      	mov	r3, r0
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	f040 808c 	bne.w	801cde4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801cccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	f040 8088 	bne.w	801cde4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ccdc:	d004      	beq.n	801cce8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	4a4b      	ldr	r2, [pc, #300]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cce4:	4293      	cmp	r3, r2
 801cce6:	d101      	bne.n	801ccec <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801cce8:	4b4a      	ldr	r3, [pc, #296]	; (801ce14 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801ccea:	e000      	b.n	801ccee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801ccec:	4b4a      	ldr	r3, [pc, #296]	; (801ce18 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801ccee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ccf0:	683b      	ldr	r3, [r7, #0]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d041      	beq.n	801cd7c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801ccf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ccfa:	689b      	ldr	r3, [r3, #8]
 801ccfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	6859      	ldr	r1, [r3, #4]
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801cd0a:	035b      	lsls	r3, r3, #13
 801cd0c:	430b      	orrs	r3, r1
 801cd0e:	431a      	orrs	r2, r3
 801cd10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cd1c:	d004      	beq.n	801cd28 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	4a3b      	ldr	r2, [pc, #236]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cd24:	4293      	cmp	r3, r2
 801cd26:	d10f      	bne.n	801cd48 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801cd28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801cd2c:	f7ff fea9 	bl	801ca82 <LL_ADC_IsEnabled>
 801cd30:	4604      	mov	r4, r0
 801cd32:	4837      	ldr	r0, [pc, #220]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cd34:	f7ff fea5 	bl	801ca82 <LL_ADC_IsEnabled>
 801cd38:	4603      	mov	r3, r0
 801cd3a:	4323      	orrs	r3, r4
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	bf0c      	ite	eq
 801cd40:	2301      	moveq	r3, #1
 801cd42:	2300      	movne	r3, #0
 801cd44:	b2db      	uxtb	r3, r3
 801cd46:	e008      	b.n	801cd5a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801cd48:	4834      	ldr	r0, [pc, #208]	; (801ce1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801cd4a:	f7ff fe9a 	bl	801ca82 <LL_ADC_IsEnabled>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	bf0c      	ite	eq
 801cd54:	2301      	moveq	r3, #1
 801cd56:	2300      	movne	r3, #0
 801cd58:	b2db      	uxtb	r3, r3
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d04c      	beq.n	801cdf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801cd5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd60:	689b      	ldr	r3, [r3, #8]
 801cd62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801cd66:	f023 030f 	bic.w	r3, r3, #15
 801cd6a:	683a      	ldr	r2, [r7, #0]
 801cd6c:	6811      	ldr	r1, [r2, #0]
 801cd6e:	683a      	ldr	r2, [r7, #0]
 801cd70:	6892      	ldr	r2, [r2, #8]
 801cd72:	430a      	orrs	r2, r1
 801cd74:	431a      	orrs	r2, r3
 801cd76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801cd7a:	e03d      	b.n	801cdf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801cd7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd7e:	689b      	ldr	r3, [r3, #8]
 801cd80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801cd84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cd86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cd90:	d004      	beq.n	801cd9c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4a1e      	ldr	r2, [pc, #120]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cd98:	4293      	cmp	r3, r2
 801cd9a:	d10f      	bne.n	801cdbc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801cd9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801cda0:	f7ff fe6f 	bl	801ca82 <LL_ADC_IsEnabled>
 801cda4:	4604      	mov	r4, r0
 801cda6:	481a      	ldr	r0, [pc, #104]	; (801ce10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801cda8:	f7ff fe6b 	bl	801ca82 <LL_ADC_IsEnabled>
 801cdac:	4603      	mov	r3, r0
 801cdae:	4323      	orrs	r3, r4
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	bf0c      	ite	eq
 801cdb4:	2301      	moveq	r3, #1
 801cdb6:	2300      	movne	r3, #0
 801cdb8:	b2db      	uxtb	r3, r3
 801cdba:	e008      	b.n	801cdce <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801cdbc:	4817      	ldr	r0, [pc, #92]	; (801ce1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801cdbe:	f7ff fe60 	bl	801ca82 <LL_ADC_IsEnabled>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	bf0c      	ite	eq
 801cdc8:	2301      	moveq	r3, #1
 801cdca:	2300      	movne	r3, #0
 801cdcc:	b2db      	uxtb	r3, r3
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d012      	beq.n	801cdf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801cdd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdd4:	689b      	ldr	r3, [r3, #8]
 801cdd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801cdda:	f023 030f 	bic.w	r3, r3, #15
 801cdde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801cde0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801cde2:	e009      	b.n	801cdf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cde8:	f043 0220 	orr.w	r2, r3, #32
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801cdf0:	2301      	movs	r3, #1
 801cdf2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801cdf6:	e000      	b.n	801cdfa <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801cdf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	2200      	movs	r2, #0
 801cdfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ce02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3784      	adds	r7, #132	; 0x84
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd90      	pop	{r4, r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	50000100 	.word	0x50000100
 801ce14:	50000300 	.word	0x50000300
 801ce18:	50000700 	.word	0x50000700
 801ce1c:	50000400 	.word	0x50000400

0801ce20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ce20:	b480      	push	{r7}
 801ce22:	b085      	sub	sp, #20
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	f003 0307 	and.w	r3, r3, #7
 801ce2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801ce30:	4b0c      	ldr	r3, [pc, #48]	; (801ce64 <__NVIC_SetPriorityGrouping+0x44>)
 801ce32:	68db      	ldr	r3, [r3, #12]
 801ce34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801ce36:	68ba      	ldr	r2, [r7, #8]
 801ce38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801ce3c:	4013      	ands	r3, r2
 801ce3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801ce48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801ce4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ce50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801ce52:	4a04      	ldr	r2, [pc, #16]	; (801ce64 <__NVIC_SetPriorityGrouping+0x44>)
 801ce54:	68bb      	ldr	r3, [r7, #8]
 801ce56:	60d3      	str	r3, [r2, #12]
}
 801ce58:	bf00      	nop
 801ce5a:	3714      	adds	r7, #20
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce62:	4770      	bx	lr
 801ce64:	e000ed00 	.word	0xe000ed00

0801ce68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801ce68:	b480      	push	{r7}
 801ce6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801ce6c:	4b04      	ldr	r3, [pc, #16]	; (801ce80 <__NVIC_GetPriorityGrouping+0x18>)
 801ce6e:	68db      	ldr	r3, [r3, #12]
 801ce70:	0a1b      	lsrs	r3, r3, #8
 801ce72:	f003 0307 	and.w	r3, r3, #7
}
 801ce76:	4618      	mov	r0, r3
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce7e:	4770      	bx	lr
 801ce80:	e000ed00 	.word	0xe000ed00

0801ce84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801ce84:	b480      	push	{r7}
 801ce86:	b083      	sub	sp, #12
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ce8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	db0b      	blt.n	801ceae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ce96:	79fb      	ldrb	r3, [r7, #7]
 801ce98:	f003 021f 	and.w	r2, r3, #31
 801ce9c:	4907      	ldr	r1, [pc, #28]	; (801cebc <__NVIC_EnableIRQ+0x38>)
 801ce9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cea2:	095b      	lsrs	r3, r3, #5
 801cea4:	2001      	movs	r0, #1
 801cea6:	fa00 f202 	lsl.w	r2, r0, r2
 801ceaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801ceae:	bf00      	nop
 801ceb0:	370c      	adds	r7, #12
 801ceb2:	46bd      	mov	sp, r7
 801ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceb8:	4770      	bx	lr
 801ceba:	bf00      	nop
 801cebc:	e000e100 	.word	0xe000e100

0801cec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801cec0:	b480      	push	{r7}
 801cec2:	b083      	sub	sp, #12
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	4603      	mov	r3, r0
 801cec8:	6039      	str	r1, [r7, #0]
 801ceca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801cecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	db0a      	blt.n	801ceea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ced4:	683b      	ldr	r3, [r7, #0]
 801ced6:	b2da      	uxtb	r2, r3
 801ced8:	490c      	ldr	r1, [pc, #48]	; (801cf0c <__NVIC_SetPriority+0x4c>)
 801ceda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cede:	0112      	lsls	r2, r2, #4
 801cee0:	b2d2      	uxtb	r2, r2
 801cee2:	440b      	add	r3, r1
 801cee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801cee8:	e00a      	b.n	801cf00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	b2da      	uxtb	r2, r3
 801ceee:	4908      	ldr	r1, [pc, #32]	; (801cf10 <__NVIC_SetPriority+0x50>)
 801cef0:	79fb      	ldrb	r3, [r7, #7]
 801cef2:	f003 030f 	and.w	r3, r3, #15
 801cef6:	3b04      	subs	r3, #4
 801cef8:	0112      	lsls	r2, r2, #4
 801cefa:	b2d2      	uxtb	r2, r2
 801cefc:	440b      	add	r3, r1
 801cefe:	761a      	strb	r2, [r3, #24]
}
 801cf00:	bf00      	nop
 801cf02:	370c      	adds	r7, #12
 801cf04:	46bd      	mov	sp, r7
 801cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf0a:	4770      	bx	lr
 801cf0c:	e000e100 	.word	0xe000e100
 801cf10:	e000ed00 	.word	0xe000ed00

0801cf14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801cf14:	b480      	push	{r7}
 801cf16:	b089      	sub	sp, #36	; 0x24
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	60b9      	str	r1, [r7, #8]
 801cf1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	f003 0307 	and.w	r3, r3, #7
 801cf26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801cf28:	69fb      	ldr	r3, [r7, #28]
 801cf2a:	f1c3 0307 	rsb	r3, r3, #7
 801cf2e:	2b04      	cmp	r3, #4
 801cf30:	bf28      	it	cs
 801cf32:	2304      	movcs	r3, #4
 801cf34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801cf36:	69fb      	ldr	r3, [r7, #28]
 801cf38:	3304      	adds	r3, #4
 801cf3a:	2b06      	cmp	r3, #6
 801cf3c:	d902      	bls.n	801cf44 <NVIC_EncodePriority+0x30>
 801cf3e:	69fb      	ldr	r3, [r7, #28]
 801cf40:	3b03      	subs	r3, #3
 801cf42:	e000      	b.n	801cf46 <NVIC_EncodePriority+0x32>
 801cf44:	2300      	movs	r3, #0
 801cf46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801cf48:	f04f 32ff 	mov.w	r2, #4294967295
 801cf4c:	69bb      	ldr	r3, [r7, #24]
 801cf4e:	fa02 f303 	lsl.w	r3, r2, r3
 801cf52:	43da      	mvns	r2, r3
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	401a      	ands	r2, r3
 801cf58:	697b      	ldr	r3, [r7, #20]
 801cf5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801cf5c:	f04f 31ff 	mov.w	r1, #4294967295
 801cf60:	697b      	ldr	r3, [r7, #20]
 801cf62:	fa01 f303 	lsl.w	r3, r1, r3
 801cf66:	43d9      	mvns	r1, r3
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801cf6c:	4313      	orrs	r3, r2
         );
}
 801cf6e:	4618      	mov	r0, r3
 801cf70:	3724      	adds	r7, #36	; 0x24
 801cf72:	46bd      	mov	sp, r7
 801cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf78:	4770      	bx	lr
	...

0801cf7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b082      	sub	sp, #8
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	3b01      	subs	r3, #1
 801cf88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cf8c:	d301      	bcc.n	801cf92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801cf8e:	2301      	movs	r3, #1
 801cf90:	e00f      	b.n	801cfb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801cf92:	4a0a      	ldr	r2, [pc, #40]	; (801cfbc <SysTick_Config+0x40>)
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	3b01      	subs	r3, #1
 801cf98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801cf9a:	210f      	movs	r1, #15
 801cf9c:	f04f 30ff 	mov.w	r0, #4294967295
 801cfa0:	f7ff ff8e 	bl	801cec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801cfa4:	4b05      	ldr	r3, [pc, #20]	; (801cfbc <SysTick_Config+0x40>)
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801cfaa:	4b04      	ldr	r3, [pc, #16]	; (801cfbc <SysTick_Config+0x40>)
 801cfac:	2207      	movs	r2, #7
 801cfae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801cfb0:	2300      	movs	r3, #0
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	3708      	adds	r7, #8
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	e000e010 	.word	0xe000e010

0801cfc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801cfc8:	6878      	ldr	r0, [r7, #4]
 801cfca:	f7ff ff29 	bl	801ce20 <__NVIC_SetPriorityGrouping>
}
 801cfce:	bf00      	nop
 801cfd0:	3708      	adds	r7, #8
 801cfd2:	46bd      	mov	sp, r7
 801cfd4:	bd80      	pop	{r7, pc}

0801cfd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801cfd6:	b580      	push	{r7, lr}
 801cfd8:	b086      	sub	sp, #24
 801cfda:	af00      	add	r7, sp, #0
 801cfdc:	4603      	mov	r3, r0
 801cfde:	60b9      	str	r1, [r7, #8]
 801cfe0:	607a      	str	r2, [r7, #4]
 801cfe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801cfe4:	f7ff ff40 	bl	801ce68 <__NVIC_GetPriorityGrouping>
 801cfe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801cfea:	687a      	ldr	r2, [r7, #4]
 801cfec:	68b9      	ldr	r1, [r7, #8]
 801cfee:	6978      	ldr	r0, [r7, #20]
 801cff0:	f7ff ff90 	bl	801cf14 <NVIC_EncodePriority>
 801cff4:	4602      	mov	r2, r0
 801cff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cffa:	4611      	mov	r1, r2
 801cffc:	4618      	mov	r0, r3
 801cffe:	f7ff ff5f 	bl	801cec0 <__NVIC_SetPriority>
}
 801d002:	bf00      	nop
 801d004:	3718      	adds	r7, #24
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}

0801d00a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801d00a:	b580      	push	{r7, lr}
 801d00c:	b082      	sub	sp, #8
 801d00e:	af00      	add	r7, sp, #0
 801d010:	4603      	mov	r3, r0
 801d012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801d014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d018:	4618      	mov	r0, r3
 801d01a:	f7ff ff33 	bl	801ce84 <__NVIC_EnableIRQ>
}
 801d01e:	bf00      	nop
 801d020:	3708      	adds	r7, #8
 801d022:	46bd      	mov	sp, r7
 801d024:	bd80      	pop	{r7, pc}

0801d026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801d026:	b580      	push	{r7, lr}
 801d028:	b082      	sub	sp, #8
 801d02a:	af00      	add	r7, sp, #0
 801d02c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801d02e:	6878      	ldr	r0, [r7, #4]
 801d030:	f7ff ffa4 	bl	801cf7c <SysTick_Config>
 801d034:	4603      	mov	r3, r0
}
 801d036:	4618      	mov	r0, r3
 801d038:	3708      	adds	r7, #8
 801d03a:	46bd      	mov	sp, r7
 801d03c:	bd80      	pop	{r7, pc}
	...

0801d040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b084      	sub	sp, #16
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d101      	bne.n	801d052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801d04e:	2301      	movs	r3, #1
 801d050:	e08d      	b.n	801d16e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	461a      	mov	r2, r3
 801d058:	4b47      	ldr	r3, [pc, #284]	; (801d178 <HAL_DMA_Init+0x138>)
 801d05a:	429a      	cmp	r2, r3
 801d05c:	d80f      	bhi.n	801d07e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	461a      	mov	r2, r3
 801d064:	4b45      	ldr	r3, [pc, #276]	; (801d17c <HAL_DMA_Init+0x13c>)
 801d066:	4413      	add	r3, r2
 801d068:	4a45      	ldr	r2, [pc, #276]	; (801d180 <HAL_DMA_Init+0x140>)
 801d06a:	fba2 2303 	umull	r2, r3, r2, r3
 801d06e:	091b      	lsrs	r3, r3, #4
 801d070:	009a      	lsls	r2, r3, #2
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	4a42      	ldr	r2, [pc, #264]	; (801d184 <HAL_DMA_Init+0x144>)
 801d07a:	641a      	str	r2, [r3, #64]	; 0x40
 801d07c:	e00e      	b.n	801d09c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	461a      	mov	r2, r3
 801d084:	4b40      	ldr	r3, [pc, #256]	; (801d188 <HAL_DMA_Init+0x148>)
 801d086:	4413      	add	r3, r2
 801d088:	4a3d      	ldr	r2, [pc, #244]	; (801d180 <HAL_DMA_Init+0x140>)
 801d08a:	fba2 2303 	umull	r2, r3, r2, r3
 801d08e:	091b      	lsrs	r3, r3, #4
 801d090:	009a      	lsls	r2, r3, #2
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	4a3c      	ldr	r2, [pc, #240]	; (801d18c <HAL_DMA_Init+0x14c>)
 801d09a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	2202      	movs	r2, #2
 801d0a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801d0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d0b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801d0c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	691b      	ldr	r3, [r3, #16]
 801d0c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801d0cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	699b      	ldr	r3, [r3, #24]
 801d0d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801d0d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	6a1b      	ldr	r3, [r3, #32]
 801d0de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801d0e0:	68fa      	ldr	r2, [r7, #12]
 801d0e2:	4313      	orrs	r3, r2
 801d0e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	68fa      	ldr	r2, [r7, #12]
 801d0ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801d0ee:	6878      	ldr	r0, [r7, #4]
 801d0f0:	f000 fa10 	bl	801d514 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	689b      	ldr	r3, [r3, #8]
 801d0f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d0fc:	d102      	bne.n	801d104 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2200      	movs	r2, #0
 801d102:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	685a      	ldr	r2, [r3, #4]
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d10c:	b2d2      	uxtb	r2, r2
 801d10e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d114:	687a      	ldr	r2, [r7, #4]
 801d116:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801d118:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	685b      	ldr	r3, [r3, #4]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d010      	beq.n	801d144 <HAL_DMA_Init+0x104>
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	685b      	ldr	r3, [r3, #4]
 801d126:	2b04      	cmp	r3, #4
 801d128:	d80c      	bhi.n	801d144 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801d12a:	6878      	ldr	r0, [r7, #4]
 801d12c:	f000 fa30 	bl	801d590 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d134:	2200      	movs	r2, #0
 801d136:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d13c:	687a      	ldr	r2, [r7, #4]
 801d13e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801d140:	605a      	str	r2, [r3, #4]
 801d142:	e008      	b.n	801d156 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	2200      	movs	r2, #0
 801d148:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	2200      	movs	r2, #0
 801d14e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	2200      	movs	r2, #0
 801d154:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2200      	movs	r2, #0
 801d15a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	2201      	movs	r2, #1
 801d160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2200      	movs	r2, #0
 801d168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801d16c:	2300      	movs	r3, #0
}
 801d16e:	4618      	mov	r0, r3
 801d170:	3710      	adds	r7, #16
 801d172:	46bd      	mov	sp, r7
 801d174:	bd80      	pop	{r7, pc}
 801d176:	bf00      	nop
 801d178:	40020407 	.word	0x40020407
 801d17c:	bffdfff8 	.word	0xbffdfff8
 801d180:	cccccccd 	.word	0xcccccccd
 801d184:	40020000 	.word	0x40020000
 801d188:	bffdfbf8 	.word	0xbffdfbf8
 801d18c:	40020400 	.word	0x40020400

0801d190 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b086      	sub	sp, #24
 801d194:	af00      	add	r7, sp, #0
 801d196:	60f8      	str	r0, [r7, #12]
 801d198:	60b9      	str	r1, [r7, #8]
 801d19a:	607a      	str	r2, [r7, #4]
 801d19c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d19e:	2300      	movs	r3, #0
 801d1a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d1a8:	2b01      	cmp	r3, #1
 801d1aa:	d101      	bne.n	801d1b0 <HAL_DMA_Start_IT+0x20>
 801d1ac:	2302      	movs	r3, #2
 801d1ae:	e066      	b.n	801d27e <HAL_DMA_Start_IT+0xee>
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	2201      	movs	r2, #1
 801d1b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801d1be:	b2db      	uxtb	r3, r3
 801d1c0:	2b01      	cmp	r3, #1
 801d1c2:	d155      	bne.n	801d270 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	2202      	movs	r2, #2
 801d1c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	681a      	ldr	r2, [r3, #0]
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	f022 0201 	bic.w	r2, r2, #1
 801d1e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801d1e2:	683b      	ldr	r3, [r7, #0]
 801d1e4:	687a      	ldr	r2, [r7, #4]
 801d1e6:	68b9      	ldr	r1, [r7, #8]
 801d1e8:	68f8      	ldr	r0, [r7, #12]
 801d1ea:	f000 f954 	bl	801d496 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d008      	beq.n	801d208 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	681a      	ldr	r2, [r3, #0]
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	f042 020e 	orr.w	r2, r2, #14
 801d204:	601a      	str	r2, [r3, #0]
 801d206:	e00f      	b.n	801d228 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	681a      	ldr	r2, [r3, #0]
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	f022 0204 	bic.w	r2, r2, #4
 801d216:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	681a      	ldr	r2, [r3, #0]
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	f042 020a 	orr.w	r2, r2, #10
 801d226:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d232:	2b00      	cmp	r3, #0
 801d234:	d007      	beq.n	801d246 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d23a:	681a      	ldr	r2, [r3, #0]
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d244:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d007      	beq.n	801d25e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d252:	681a      	ldr	r2, [r3, #0]
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d25c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	681a      	ldr	r2, [r3, #0]
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	f042 0201 	orr.w	r2, r2, #1
 801d26c:	601a      	str	r2, [r3, #0]
 801d26e:	e005      	b.n	801d27c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	2200      	movs	r2, #0
 801d274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801d278:	2302      	movs	r3, #2
 801d27a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801d27c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d27e:	4618      	mov	r0, r3
 801d280:	3718      	adds	r7, #24
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}

0801d286 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801d286:	b480      	push	{r7}
 801d288:	b085      	sub	sp, #20
 801d28a:	af00      	add	r7, sp, #0
 801d28c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d28e:	2300      	movs	r3, #0
 801d290:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801d298:	b2db      	uxtb	r3, r3
 801d29a:	2b02      	cmp	r3, #2
 801d29c:	d005      	beq.n	801d2aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	2204      	movs	r2, #4
 801d2a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801d2a4:	2301      	movs	r3, #1
 801d2a6:	73fb      	strb	r3, [r7, #15]
 801d2a8:	e037      	b.n	801d31a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	681a      	ldr	r2, [r3, #0]
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	f022 020e 	bic.w	r2, r2, #14
 801d2b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2be:	681a      	ldr	r2, [r3, #0]
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801d2c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	681a      	ldr	r2, [r3, #0]
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	f022 0201 	bic.w	r2, r2, #1
 801d2d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2de:	f003 021f 	and.w	r2, r3, #31
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2e6:	2101      	movs	r1, #1
 801d2e8:	fa01 f202 	lsl.w	r2, r1, r2
 801d2ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2f2:	687a      	ldr	r2, [r7, #4]
 801d2f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801d2f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00c      	beq.n	801d31a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d304:	681a      	ldr	r2, [r3, #0]
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d30a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801d30e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d314:	687a      	ldr	r2, [r7, #4]
 801d316:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801d318:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	2201      	movs	r2, #1
 801d31e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	2200      	movs	r2, #0
 801d326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801d32a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d32c:	4618      	mov	r0, r3
 801d32e:	3714      	adds	r7, #20
 801d330:	46bd      	mov	sp, r7
 801d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d336:	4770      	bx	lr

0801d338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801d338:	b580      	push	{r7, lr}
 801d33a:	b084      	sub	sp, #16
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d354:	f003 031f 	and.w	r3, r3, #31
 801d358:	2204      	movs	r2, #4
 801d35a:	409a      	lsls	r2, r3
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	4013      	ands	r3, r2
 801d360:	2b00      	cmp	r3, #0
 801d362:	d026      	beq.n	801d3b2 <HAL_DMA_IRQHandler+0x7a>
 801d364:	68bb      	ldr	r3, [r7, #8]
 801d366:	f003 0304 	and.w	r3, r3, #4
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d021      	beq.n	801d3b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	f003 0320 	and.w	r3, r3, #32
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d107      	bne.n	801d38c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	681a      	ldr	r2, [r3, #0]
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	f022 0204 	bic.w	r2, r2, #4
 801d38a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d390:	f003 021f 	and.w	r2, r3, #31
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d398:	2104      	movs	r1, #4
 801d39a:	fa01 f202 	lsl.w	r2, r1, r2
 801d39e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d071      	beq.n	801d48c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3ac:	6878      	ldr	r0, [r7, #4]
 801d3ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801d3b0:	e06c      	b.n	801d48c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3b6:	f003 031f 	and.w	r3, r3, #31
 801d3ba:	2202      	movs	r2, #2
 801d3bc:	409a      	lsls	r2, r3
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	4013      	ands	r3, r2
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d02e      	beq.n	801d424 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801d3c6:	68bb      	ldr	r3, [r7, #8]
 801d3c8:	f003 0302 	and.w	r3, r3, #2
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d029      	beq.n	801d424 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	f003 0320 	and.w	r3, r3, #32
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d10b      	bne.n	801d3f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	681a      	ldr	r2, [r3, #0]
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	f022 020a 	bic.w	r2, r2, #10
 801d3ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	2201      	movs	r2, #1
 801d3f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3fa:	f003 021f 	and.w	r2, r3, #31
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d402:	2102      	movs	r1, #2
 801d404:	fa01 f202 	lsl.w	r2, r1, r2
 801d408:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	2200      	movs	r2, #0
 801d40e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d416:	2b00      	cmp	r3, #0
 801d418:	d038      	beq.n	801d48c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d41e:	6878      	ldr	r0, [r7, #4]
 801d420:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801d422:	e033      	b.n	801d48c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d428:	f003 031f 	and.w	r3, r3, #31
 801d42c:	2208      	movs	r2, #8
 801d42e:	409a      	lsls	r2, r3
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	4013      	ands	r3, r2
 801d434:	2b00      	cmp	r3, #0
 801d436:	d02a      	beq.n	801d48e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	f003 0308 	and.w	r3, r3, #8
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d025      	beq.n	801d48e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	681a      	ldr	r2, [r3, #0]
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	f022 020e 	bic.w	r2, r2, #14
 801d450:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d456:	f003 021f 	and.w	r2, r3, #31
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d45e:	2101      	movs	r1, #1
 801d460:	fa01 f202 	lsl.w	r2, r1, r2
 801d464:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	2201      	movs	r2, #1
 801d46a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	2201      	movs	r2, #1
 801d470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	2200      	movs	r2, #0
 801d478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d480:	2b00      	cmp	r3, #0
 801d482:	d004      	beq.n	801d48e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d488:	6878      	ldr	r0, [r7, #4]
 801d48a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801d48c:	bf00      	nop
 801d48e:	bf00      	nop
}
 801d490:	3710      	adds	r7, #16
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}

0801d496 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d496:	b480      	push	{r7}
 801d498:	b085      	sub	sp, #20
 801d49a:	af00      	add	r7, sp, #0
 801d49c:	60f8      	str	r0, [r7, #12]
 801d49e:	60b9      	str	r1, [r7, #8]
 801d4a0:	607a      	str	r2, [r7, #4]
 801d4a2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d4a8:	68fa      	ldr	r2, [r7, #12]
 801d4aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801d4ac:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d004      	beq.n	801d4c0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d4ba:	68fa      	ldr	r2, [r7, #12]
 801d4bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801d4be:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d4c4:	f003 021f 	and.w	r2, r3, #31
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4cc:	2101      	movs	r1, #1
 801d4ce:	fa01 f202 	lsl.w	r2, r1, r2
 801d4d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	683a      	ldr	r2, [r7, #0]
 801d4da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	689b      	ldr	r3, [r3, #8]
 801d4e0:	2b10      	cmp	r3, #16
 801d4e2:	d108      	bne.n	801d4f6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	687a      	ldr	r2, [r7, #4]
 801d4ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	68ba      	ldr	r2, [r7, #8]
 801d4f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801d4f4:	e007      	b.n	801d506 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	68ba      	ldr	r2, [r7, #8]
 801d4fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	687a      	ldr	r2, [r7, #4]
 801d504:	60da      	str	r2, [r3, #12]
}
 801d506:	bf00      	nop
 801d508:	3714      	adds	r7, #20
 801d50a:	46bd      	mov	sp, r7
 801d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d510:	4770      	bx	lr
	...

0801d514 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801d514:	b480      	push	{r7}
 801d516:	b087      	sub	sp, #28
 801d518:	af00      	add	r7, sp, #0
 801d51a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	461a      	mov	r2, r3
 801d522:	4b16      	ldr	r3, [pc, #88]	; (801d57c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801d524:	429a      	cmp	r2, r3
 801d526:	d802      	bhi.n	801d52e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801d528:	4b15      	ldr	r3, [pc, #84]	; (801d580 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801d52a:	617b      	str	r3, [r7, #20]
 801d52c:	e001      	b.n	801d532 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801d52e:	4b15      	ldr	r3, [pc, #84]	; (801d584 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801d530:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	b2db      	uxtb	r3, r3
 801d53c:	3b08      	subs	r3, #8
 801d53e:	4a12      	ldr	r2, [pc, #72]	; (801d588 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801d540:	fba2 2303 	umull	r2, r3, r2, r3
 801d544:	091b      	lsrs	r3, r3, #4
 801d546:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d54c:	089b      	lsrs	r3, r3, #2
 801d54e:	009a      	lsls	r2, r3, #2
 801d550:	693b      	ldr	r3, [r7, #16]
 801d552:	4413      	add	r3, r2
 801d554:	461a      	mov	r2, r3
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	4a0b      	ldr	r2, [pc, #44]	; (801d58c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801d55e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801d560:	68fb      	ldr	r3, [r7, #12]
 801d562:	f003 031f 	and.w	r3, r3, #31
 801d566:	2201      	movs	r2, #1
 801d568:	409a      	lsls	r2, r3
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d56e:	bf00      	nop
 801d570:	371c      	adds	r7, #28
 801d572:	46bd      	mov	sp, r7
 801d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop
 801d57c:	40020407 	.word	0x40020407
 801d580:	40020800 	.word	0x40020800
 801d584:	40020820 	.word	0x40020820
 801d588:	cccccccd 	.word	0xcccccccd
 801d58c:	40020880 	.word	0x40020880

0801d590 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801d590:	b480      	push	{r7}
 801d592:	b085      	sub	sp, #20
 801d594:	af00      	add	r7, sp, #0
 801d596:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	685b      	ldr	r3, [r3, #4]
 801d59c:	b2db      	uxtb	r3, r3
 801d59e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801d5a0:	68fa      	ldr	r2, [r7, #12]
 801d5a2:	4b0b      	ldr	r3, [pc, #44]	; (801d5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801d5a4:	4413      	add	r3, r2
 801d5a6:	009b      	lsls	r3, r3, #2
 801d5a8:	461a      	mov	r2, r3
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	4a08      	ldr	r2, [pc, #32]	; (801d5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801d5b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	3b01      	subs	r3, #1
 801d5b8:	f003 031f 	and.w	r3, r3, #31
 801d5bc:	2201      	movs	r2, #1
 801d5be:	409a      	lsls	r2, r3
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801d5c4:	bf00      	nop
 801d5c6:	3714      	adds	r7, #20
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ce:	4770      	bx	lr
 801d5d0:	1000823f 	.word	0x1000823f
 801d5d4:	40020940 	.word	0x40020940

0801d5d8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801d5d8:	b580      	push	{r7, lr}
 801d5da:	b086      	sub	sp, #24
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	60f8      	str	r0, [r7, #12]
 801d5e0:	60b9      	str	r1, [r7, #8]
 801d5e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801d5ea:	4b24      	ldr	r3, [pc, #144]	; (801d67c <HAL_FLASH_Program+0xa4>)
 801d5ec:	781b      	ldrb	r3, [r3, #0]
 801d5ee:	2b01      	cmp	r3, #1
 801d5f0:	d101      	bne.n	801d5f6 <HAL_FLASH_Program+0x1e>
 801d5f2:	2302      	movs	r3, #2
 801d5f4:	e03e      	b.n	801d674 <HAL_FLASH_Program+0x9c>
 801d5f6:	4b21      	ldr	r3, [pc, #132]	; (801d67c <HAL_FLASH_Program+0xa4>)
 801d5f8:	2201      	movs	r2, #1
 801d5fa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801d5fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d600:	f000 f87c 	bl	801d6fc <FLASH_WaitForLastOperation>
 801d604:	4603      	mov	r3, r0
 801d606:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801d608:	7dfb      	ldrb	r3, [r7, #23]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d12e      	bne.n	801d66c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801d60e:	4b1b      	ldr	r3, [pc, #108]	; (801d67c <HAL_FLASH_Program+0xa4>)
 801d610:	2200      	movs	r2, #0
 801d612:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d107      	bne.n	801d62a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801d61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d61e:	68b8      	ldr	r0, [r7, #8]
 801d620:	f000 f8c0 	bl	801d7a4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801d624:	2301      	movs	r3, #1
 801d626:	613b      	str	r3, [r7, #16]
 801d628:	e010      	b.n	801d64c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	2b01      	cmp	r3, #1
 801d62e:	d002      	beq.n	801d636 <HAL_FLASH_Program+0x5e>
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	2b02      	cmp	r3, #2
 801d634:	d10a      	bne.n	801d64c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	4619      	mov	r1, r3
 801d63a:	68b8      	ldr	r0, [r7, #8]
 801d63c:	f000 f8d8 	bl	801d7f0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	2b02      	cmp	r3, #2
 801d644:	d102      	bne.n	801d64c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801d646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d64a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801d64c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d650:	f000 f854 	bl	801d6fc <FLASH_WaitForLastOperation>
 801d654:	4603      	mov	r3, r0
 801d656:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801d658:	693b      	ldr	r3, [r7, #16]
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d006      	beq.n	801d66c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801d65e:	4b08      	ldr	r3, [pc, #32]	; (801d680 <HAL_FLASH_Program+0xa8>)
 801d660:	695a      	ldr	r2, [r3, #20]
 801d662:	693b      	ldr	r3, [r7, #16]
 801d664:	43db      	mvns	r3, r3
 801d666:	4906      	ldr	r1, [pc, #24]	; (801d680 <HAL_FLASH_Program+0xa8>)
 801d668:	4013      	ands	r3, r2
 801d66a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801d66c:	4b03      	ldr	r3, [pc, #12]	; (801d67c <HAL_FLASH_Program+0xa4>)
 801d66e:	2200      	movs	r2, #0
 801d670:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801d672:	7dfb      	ldrb	r3, [r7, #23]
}
 801d674:	4618      	mov	r0, r3
 801d676:	3718      	adds	r7, #24
 801d678:	46bd      	mov	sp, r7
 801d67a:	bd80      	pop	{r7, pc}
 801d67c:	2000000c 	.word	0x2000000c
 801d680:	40022000 	.word	0x40022000

0801d684 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801d684:	b480      	push	{r7}
 801d686:	b083      	sub	sp, #12
 801d688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801d68a:	2300      	movs	r3, #0
 801d68c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801d68e:	4b0b      	ldr	r3, [pc, #44]	; (801d6bc <HAL_FLASH_Unlock+0x38>)
 801d690:	695b      	ldr	r3, [r3, #20]
 801d692:	2b00      	cmp	r3, #0
 801d694:	da0b      	bge.n	801d6ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801d696:	4b09      	ldr	r3, [pc, #36]	; (801d6bc <HAL_FLASH_Unlock+0x38>)
 801d698:	4a09      	ldr	r2, [pc, #36]	; (801d6c0 <HAL_FLASH_Unlock+0x3c>)
 801d69a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801d69c:	4b07      	ldr	r3, [pc, #28]	; (801d6bc <HAL_FLASH_Unlock+0x38>)
 801d69e:	4a09      	ldr	r2, [pc, #36]	; (801d6c4 <HAL_FLASH_Unlock+0x40>)
 801d6a0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801d6a2:	4b06      	ldr	r3, [pc, #24]	; (801d6bc <HAL_FLASH_Unlock+0x38>)
 801d6a4:	695b      	ldr	r3, [r3, #20]
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	da01      	bge.n	801d6ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801d6ae:	79fb      	ldrb	r3, [r7, #7]
}
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	370c      	adds	r7, #12
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ba:	4770      	bx	lr
 801d6bc:	40022000 	.word	0x40022000
 801d6c0:	45670123 	.word	0x45670123
 801d6c4:	cdef89ab 	.word	0xcdef89ab

0801d6c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801d6c8:	b480      	push	{r7}
 801d6ca:	b083      	sub	sp, #12
 801d6cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801d6ce:	2301      	movs	r3, #1
 801d6d0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801d6d2:	4b09      	ldr	r3, [pc, #36]	; (801d6f8 <HAL_FLASH_Lock+0x30>)
 801d6d4:	695b      	ldr	r3, [r3, #20]
 801d6d6:	4a08      	ldr	r2, [pc, #32]	; (801d6f8 <HAL_FLASH_Lock+0x30>)
 801d6d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801d6dc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801d6de:	4b06      	ldr	r3, [pc, #24]	; (801d6f8 <HAL_FLASH_Lock+0x30>)
 801d6e0:	695b      	ldr	r3, [r3, #20]
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	da01      	bge.n	801d6ea <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801d6e6:	2300      	movs	r3, #0
 801d6e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801d6ea:	79fb      	ldrb	r3, [r7, #7]
}
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	370c      	adds	r7, #12
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f6:	4770      	bx	lr
 801d6f8:	40022000 	.word	0x40022000

0801d6fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801d6fc:	b580      	push	{r7, lr}
 801d6fe:	b084      	sub	sp, #16
 801d700:	af00      	add	r7, sp, #0
 801d702:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801d704:	f7fd f98a 	bl	801aa1c <HAL_GetTick>
 801d708:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801d70a:	e009      	b.n	801d720 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801d70c:	f7fd f986 	bl	801aa1c <HAL_GetTick>
 801d710:	4602      	mov	r2, r0
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	1ad3      	subs	r3, r2, r3
 801d716:	687a      	ldr	r2, [r7, #4]
 801d718:	429a      	cmp	r2, r3
 801d71a:	d201      	bcs.n	801d720 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801d71c:	2303      	movs	r3, #3
 801d71e:	e038      	b.n	801d792 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801d720:	4b1e      	ldr	r3, [pc, #120]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d722:	691b      	ldr	r3, [r3, #16]
 801d724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d72c:	d0ee      	beq.n	801d70c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801d72e:	4b1b      	ldr	r3, [pc, #108]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d730:	691a      	ldr	r2, [r3, #16]
 801d732:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801d736:	4013      	ands	r3, r2
 801d738:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801d73a:	68bb      	ldr	r3, [r7, #8]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d01e      	beq.n	801d77e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801d740:	4b17      	ldr	r3, [pc, #92]	; (801d7a0 <FLASH_WaitForLastOperation+0xa4>)
 801d742:	685a      	ldr	r2, [r3, #4]
 801d744:	68bb      	ldr	r3, [r7, #8]
 801d746:	4313      	orrs	r3, r2
 801d748:	4a15      	ldr	r2, [pc, #84]	; (801d7a0 <FLASH_WaitForLastOperation+0xa4>)
 801d74a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d752:	2b00      	cmp	r3, #0
 801d754:	d007      	beq.n	801d766 <FLASH_WaitForLastOperation+0x6a>
 801d756:	4b11      	ldr	r3, [pc, #68]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d758:	699a      	ldr	r2, [r3, #24]
 801d75a:	68bb      	ldr	r3, [r7, #8]
 801d75c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d760:	490e      	ldr	r1, [pc, #56]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d762:	4313      	orrs	r3, r2
 801d764:	618b      	str	r3, [r1, #24]
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d004      	beq.n	801d77a <FLASH_WaitForLastOperation+0x7e>
 801d770:	4a0a      	ldr	r2, [pc, #40]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d772:	68bb      	ldr	r3, [r7, #8]
 801d774:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801d778:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801d77a:	2301      	movs	r3, #1
 801d77c:	e009      	b.n	801d792 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801d77e:	4b07      	ldr	r3, [pc, #28]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d780:	691b      	ldr	r3, [r3, #16]
 801d782:	f003 0301 	and.w	r3, r3, #1
 801d786:	2b01      	cmp	r3, #1
 801d788:	d102      	bne.n	801d790 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801d78a:	4b04      	ldr	r3, [pc, #16]	; (801d79c <FLASH_WaitForLastOperation+0xa0>)
 801d78c:	2201      	movs	r2, #1
 801d78e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801d790:	2300      	movs	r3, #0
}
 801d792:	4618      	mov	r0, r3
 801d794:	3710      	adds	r7, #16
 801d796:	46bd      	mov	sp, r7
 801d798:	bd80      	pop	{r7, pc}
 801d79a:	bf00      	nop
 801d79c:	40022000 	.word	0x40022000
 801d7a0:	2000000c 	.word	0x2000000c

0801d7a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801d7a4:	b480      	push	{r7}
 801d7a6:	b085      	sub	sp, #20
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	60f8      	str	r0, [r7, #12]
 801d7ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801d7b0:	4b0e      	ldr	r3, [pc, #56]	; (801d7ec <FLASH_Program_DoubleWord+0x48>)
 801d7b2:	695b      	ldr	r3, [r3, #20]
 801d7b4:	4a0d      	ldr	r2, [pc, #52]	; (801d7ec <FLASH_Program_DoubleWord+0x48>)
 801d7b6:	f043 0301 	orr.w	r3, r3, #1
 801d7ba:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	683a      	ldr	r2, [r7, #0]
 801d7c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801d7c2:	f3bf 8f6f 	isb	sy
}
 801d7c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801d7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d7cc:	f04f 0200 	mov.w	r2, #0
 801d7d0:	f04f 0300 	mov.w	r3, #0
 801d7d4:	000a      	movs	r2, r1
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	68f9      	ldr	r1, [r7, #12]
 801d7da:	3104      	adds	r1, #4
 801d7dc:	4613      	mov	r3, r2
 801d7de:	600b      	str	r3, [r1, #0]
}
 801d7e0:	bf00      	nop
 801d7e2:	3714      	adds	r7, #20
 801d7e4:	46bd      	mov	sp, r7
 801d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ea:	4770      	bx	lr
 801d7ec:	40022000 	.word	0x40022000

0801d7f0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801d7f0:	b480      	push	{r7}
 801d7f2:	b089      	sub	sp, #36	; 0x24
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801d7fa:	2340      	movs	r3, #64	; 0x40
 801d7fc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801d802:	683b      	ldr	r3, [r7, #0]
 801d804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801d806:	4b14      	ldr	r3, [pc, #80]	; (801d858 <FLASH_Program_Fast+0x68>)
 801d808:	695b      	ldr	r3, [r3, #20]
 801d80a:	4a13      	ldr	r2, [pc, #76]	; (801d858 <FLASH_Program_Fast+0x68>)
 801d80c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d810:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d812:	f3ef 8310 	mrs	r3, PRIMASK
 801d816:	60fb      	str	r3, [r7, #12]
  return(result);
 801d818:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801d81a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d81c:	b672      	cpsid	i
}
 801d81e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801d820:	697b      	ldr	r3, [r7, #20]
 801d822:	681a      	ldr	r2, [r3, #0]
 801d824:	69bb      	ldr	r3, [r7, #24]
 801d826:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801d828:	69bb      	ldr	r3, [r7, #24]
 801d82a:	3304      	adds	r3, #4
 801d82c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801d82e:	697b      	ldr	r3, [r7, #20]
 801d830:	3304      	adds	r3, #4
 801d832:	617b      	str	r3, [r7, #20]
    row_index--;
 801d834:	7ffb      	ldrb	r3, [r7, #31]
 801d836:	3b01      	subs	r3, #1
 801d838:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801d83a:	7ffb      	ldrb	r3, [r7, #31]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d1ef      	bne.n	801d820 <FLASH_Program_Fast+0x30>
 801d840:	693b      	ldr	r3, [r7, #16]
 801d842:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d844:	68bb      	ldr	r3, [r7, #8]
 801d846:	f383 8810 	msr	PRIMASK, r3
}
 801d84a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801d84c:	bf00      	nop
 801d84e:	3724      	adds	r7, #36	; 0x24
 801d850:	46bd      	mov	sp, r7
 801d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d856:	4770      	bx	lr
 801d858:	40022000 	.word	0x40022000

0801d85c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b084      	sub	sp, #16
 801d860:	af00      	add	r7, sp, #0
 801d862:	6078      	str	r0, [r7, #4]
 801d864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801d866:	4b48      	ldr	r3, [pc, #288]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d868:	781b      	ldrb	r3, [r3, #0]
 801d86a:	2b01      	cmp	r3, #1
 801d86c:	d101      	bne.n	801d872 <HAL_FLASHEx_Erase+0x16>
 801d86e:	2302      	movs	r3, #2
 801d870:	e085      	b.n	801d97e <HAL_FLASHEx_Erase+0x122>
 801d872:	4b45      	ldr	r3, [pc, #276]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d874:	2201      	movs	r2, #1
 801d876:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801d878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d87c:	f7ff ff3e 	bl	801d6fc <FLASH_WaitForLastOperation>
 801d880:	4603      	mov	r3, r0
 801d882:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801d884:	7bfb      	ldrb	r3, [r7, #15]
 801d886:	2b00      	cmp	r3, #0
 801d888:	d175      	bne.n	801d976 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801d88a:	4b3f      	ldr	r3, [pc, #252]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d88c:	2200      	movs	r2, #0
 801d88e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801d890:	4b3e      	ldr	r3, [pc, #248]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d013      	beq.n	801d8c4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801d89c:	4b3b      	ldr	r3, [pc, #236]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d009      	beq.n	801d8bc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801d8a8:	4b38      	ldr	r3, [pc, #224]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	4a37      	ldr	r2, [pc, #220]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d8ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d8b2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801d8b4:	4b34      	ldr	r3, [pc, #208]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d8b6:	2203      	movs	r2, #3
 801d8b8:	771a      	strb	r2, [r3, #28]
 801d8ba:	e016      	b.n	801d8ea <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801d8bc:	4b32      	ldr	r3, [pc, #200]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d8be:	2201      	movs	r2, #1
 801d8c0:	771a      	strb	r2, [r3, #28]
 801d8c2:	e012      	b.n	801d8ea <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801d8c4:	4b31      	ldr	r3, [pc, #196]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d009      	beq.n	801d8e4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801d8d0:	4b2e      	ldr	r3, [pc, #184]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	4a2d      	ldr	r2, [pc, #180]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d8d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d8da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801d8dc:	4b2a      	ldr	r3, [pc, #168]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d8de:	2202      	movs	r2, #2
 801d8e0:	771a      	strb	r2, [r3, #28]
 801d8e2:	e002      	b.n	801d8ea <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801d8e4:	4b28      	ldr	r3, [pc, #160]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	2b01      	cmp	r3, #1
 801d8f0:	d111      	bne.n	801d916 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	685b      	ldr	r3, [r3, #4]
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f000 f84a 	bl	801d990 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801d8fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d900:	f7ff fefc 	bl	801d6fc <FLASH_WaitForLastOperation>
 801d904:	4603      	mov	r3, r0
 801d906:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801d908:	4b20      	ldr	r3, [pc, #128]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d90a:	695b      	ldr	r3, [r3, #20]
 801d90c:	4a1f      	ldr	r2, [pc, #124]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d90e:	f023 0304 	bic.w	r3, r3, #4
 801d912:	6153      	str	r3, [r2, #20]
 801d914:	e02d      	b.n	801d972 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801d916:	683b      	ldr	r3, [r7, #0]
 801d918:	f04f 32ff 	mov.w	r2, #4294967295
 801d91c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	689b      	ldr	r3, [r3, #8]
 801d922:	60bb      	str	r3, [r7, #8]
 801d924:	e01d      	b.n	801d962 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	685b      	ldr	r3, [r3, #4]
 801d92a:	4619      	mov	r1, r3
 801d92c:	68b8      	ldr	r0, [r7, #8]
 801d92e:	f000 f84d 	bl	801d9cc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801d932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d936:	f7ff fee1 	bl	801d6fc <FLASH_WaitForLastOperation>
 801d93a:	4603      	mov	r3, r0
 801d93c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801d93e:	4b13      	ldr	r3, [pc, #76]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d940:	695b      	ldr	r3, [r3, #20]
 801d942:	4a12      	ldr	r2, [pc, #72]	; (801d98c <HAL_FLASHEx_Erase+0x130>)
 801d944:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801d948:	f023 0302 	bic.w	r3, r3, #2
 801d94c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801d94e:	7bfb      	ldrb	r3, [r7, #15]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d003      	beq.n	801d95c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801d954:	683b      	ldr	r3, [r7, #0]
 801d956:	68ba      	ldr	r2, [r7, #8]
 801d958:	601a      	str	r2, [r3, #0]
          break;
 801d95a:	e00a      	b.n	801d972 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	3301      	adds	r3, #1
 801d960:	60bb      	str	r3, [r7, #8]
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	689a      	ldr	r2, [r3, #8]
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	68db      	ldr	r3, [r3, #12]
 801d96a:	4413      	add	r3, r2
 801d96c:	68ba      	ldr	r2, [r7, #8]
 801d96e:	429a      	cmp	r2, r3
 801d970:	d3d9      	bcc.n	801d926 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801d972:	f000 f84f 	bl	801da14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801d976:	4b04      	ldr	r3, [pc, #16]	; (801d988 <HAL_FLASHEx_Erase+0x12c>)
 801d978:	2200      	movs	r2, #0
 801d97a:	701a      	strb	r2, [r3, #0]

  return status;
 801d97c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d97e:	4618      	mov	r0, r3
 801d980:	3710      	adds	r7, #16
 801d982:	46bd      	mov	sp, r7
 801d984:	bd80      	pop	{r7, pc}
 801d986:	bf00      	nop
 801d988:	2000000c 	.word	0x2000000c
 801d98c:	40022000 	.word	0x40022000

0801d990 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801d990:	b480      	push	{r7}
 801d992:	b083      	sub	sp, #12
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d005      	beq.n	801d9ae <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801d9a2:	4b09      	ldr	r3, [pc, #36]	; (801d9c8 <FLASH_MassErase+0x38>)
 801d9a4:	695b      	ldr	r3, [r3, #20]
 801d9a6:	4a08      	ldr	r2, [pc, #32]	; (801d9c8 <FLASH_MassErase+0x38>)
 801d9a8:	f043 0304 	orr.w	r3, r3, #4
 801d9ac:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801d9ae:	4b06      	ldr	r3, [pc, #24]	; (801d9c8 <FLASH_MassErase+0x38>)
 801d9b0:	695b      	ldr	r3, [r3, #20]
 801d9b2:	4a05      	ldr	r2, [pc, #20]	; (801d9c8 <FLASH_MassErase+0x38>)
 801d9b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d9b8:	6153      	str	r3, [r2, #20]
}
 801d9ba:	bf00      	nop
 801d9bc:	370c      	adds	r7, #12
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9c4:	4770      	bx	lr
 801d9c6:	bf00      	nop
 801d9c8:	40022000 	.word	0x40022000

0801d9cc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801d9cc:	b480      	push	{r7}
 801d9ce:	b083      	sub	sp, #12
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
 801d9d4:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801d9d6:	4b0e      	ldr	r3, [pc, #56]	; (801da10 <FLASH_PageErase+0x44>)
 801d9d8:	695b      	ldr	r3, [r3, #20]
 801d9da:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	00db      	lsls	r3, r3, #3
 801d9e2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801d9e6:	490a      	ldr	r1, [pc, #40]	; (801da10 <FLASH_PageErase+0x44>)
 801d9e8:	4313      	orrs	r3, r2
 801d9ea:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801d9ec:	4b08      	ldr	r3, [pc, #32]	; (801da10 <FLASH_PageErase+0x44>)
 801d9ee:	695b      	ldr	r3, [r3, #20]
 801d9f0:	4a07      	ldr	r2, [pc, #28]	; (801da10 <FLASH_PageErase+0x44>)
 801d9f2:	f043 0302 	orr.w	r3, r3, #2
 801d9f6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801d9f8:	4b05      	ldr	r3, [pc, #20]	; (801da10 <FLASH_PageErase+0x44>)
 801d9fa:	695b      	ldr	r3, [r3, #20]
 801d9fc:	4a04      	ldr	r2, [pc, #16]	; (801da10 <FLASH_PageErase+0x44>)
 801d9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da02:	6153      	str	r3, [r2, #20]
}
 801da04:	bf00      	nop
 801da06:	370c      	adds	r7, #12
 801da08:	46bd      	mov	sp, r7
 801da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da0e:	4770      	bx	lr
 801da10:	40022000 	.word	0x40022000

0801da14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801da14:	b480      	push	{r7}
 801da16:	b083      	sub	sp, #12
 801da18:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801da1a:	4b21      	ldr	r3, [pc, #132]	; (801daa0 <FLASH_FlushCaches+0x8c>)
 801da1c:	7f1b      	ldrb	r3, [r3, #28]
 801da1e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801da20:	79fb      	ldrb	r3, [r7, #7]
 801da22:	2b01      	cmp	r3, #1
 801da24:	d002      	beq.n	801da2c <FLASH_FlushCaches+0x18>
 801da26:	79fb      	ldrb	r3, [r7, #7]
 801da28:	2b03      	cmp	r3, #3
 801da2a:	d117      	bne.n	801da5c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801da2c:	4b1d      	ldr	r3, [pc, #116]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	4a1c      	ldr	r2, [pc, #112]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801da36:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801da38:	4b1a      	ldr	r3, [pc, #104]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	4a19      	ldr	r2, [pc, #100]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801da42:	6013      	str	r3, [r2, #0]
 801da44:	4b17      	ldr	r3, [pc, #92]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	4a16      	ldr	r2, [pc, #88]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801da4e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801da50:	4b14      	ldr	r3, [pc, #80]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	4a13      	ldr	r2, [pc, #76]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801da5a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801da5c:	79fb      	ldrb	r3, [r7, #7]
 801da5e:	2b02      	cmp	r3, #2
 801da60:	d002      	beq.n	801da68 <FLASH_FlushCaches+0x54>
 801da62:	79fb      	ldrb	r3, [r7, #7]
 801da64:	2b03      	cmp	r3, #3
 801da66:	d111      	bne.n	801da8c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801da68:	4b0e      	ldr	r3, [pc, #56]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	4a0d      	ldr	r2, [pc, #52]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801da72:	6013      	str	r3, [r2, #0]
 801da74:	4b0b      	ldr	r3, [pc, #44]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	4a0a      	ldr	r2, [pc, #40]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801da80:	4b08      	ldr	r3, [pc, #32]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	4a07      	ldr	r2, [pc, #28]	; (801daa4 <FLASH_FlushCaches+0x90>)
 801da86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801da8a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801da8c:	4b04      	ldr	r3, [pc, #16]	; (801daa0 <FLASH_FlushCaches+0x8c>)
 801da8e:	2200      	movs	r2, #0
 801da90:	771a      	strb	r2, [r3, #28]
}
 801da92:	bf00      	nop
 801da94:	370c      	adds	r7, #12
 801da96:	46bd      	mov	sp, r7
 801da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da9c:	4770      	bx	lr
 801da9e:	bf00      	nop
 801daa0:	2000000c 	.word	0x2000000c
 801daa4:	40022000 	.word	0x40022000

0801daa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801daa8:	b480      	push	{r7}
 801daaa:	b087      	sub	sp, #28
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
 801dab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801dab2:	2300      	movs	r3, #0
 801dab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801dab6:	e15a      	b.n	801dd6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801dab8:	683b      	ldr	r3, [r7, #0]
 801daba:	681a      	ldr	r2, [r3, #0]
 801dabc:	2101      	movs	r1, #1
 801dabe:	697b      	ldr	r3, [r7, #20]
 801dac0:	fa01 f303 	lsl.w	r3, r1, r3
 801dac4:	4013      	ands	r3, r2
 801dac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	2b00      	cmp	r3, #0
 801dacc:	f000 814c 	beq.w	801dd68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	685b      	ldr	r3, [r3, #4]
 801dad4:	f003 0303 	and.w	r3, r3, #3
 801dad8:	2b01      	cmp	r3, #1
 801dada:	d005      	beq.n	801dae8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801dadc:	683b      	ldr	r3, [r7, #0]
 801dade:	685b      	ldr	r3, [r3, #4]
 801dae0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801dae4:	2b02      	cmp	r3, #2
 801dae6:	d130      	bne.n	801db4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	689b      	ldr	r3, [r3, #8]
 801daec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801daee:	697b      	ldr	r3, [r7, #20]
 801daf0:	005b      	lsls	r3, r3, #1
 801daf2:	2203      	movs	r2, #3
 801daf4:	fa02 f303 	lsl.w	r3, r2, r3
 801daf8:	43db      	mvns	r3, r3
 801dafa:	693a      	ldr	r2, [r7, #16]
 801dafc:	4013      	ands	r3, r2
 801dafe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	68da      	ldr	r2, [r3, #12]
 801db04:	697b      	ldr	r3, [r7, #20]
 801db06:	005b      	lsls	r3, r3, #1
 801db08:	fa02 f303 	lsl.w	r3, r2, r3
 801db0c:	693a      	ldr	r2, [r7, #16]
 801db0e:	4313      	orrs	r3, r2
 801db10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	693a      	ldr	r2, [r7, #16]
 801db16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	685b      	ldr	r3, [r3, #4]
 801db1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801db1e:	2201      	movs	r2, #1
 801db20:	697b      	ldr	r3, [r7, #20]
 801db22:	fa02 f303 	lsl.w	r3, r2, r3
 801db26:	43db      	mvns	r3, r3
 801db28:	693a      	ldr	r2, [r7, #16]
 801db2a:	4013      	ands	r3, r2
 801db2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801db2e:	683b      	ldr	r3, [r7, #0]
 801db30:	685b      	ldr	r3, [r3, #4]
 801db32:	091b      	lsrs	r3, r3, #4
 801db34:	f003 0201 	and.w	r2, r3, #1
 801db38:	697b      	ldr	r3, [r7, #20]
 801db3a:	fa02 f303 	lsl.w	r3, r2, r3
 801db3e:	693a      	ldr	r2, [r7, #16]
 801db40:	4313      	orrs	r3, r2
 801db42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	693a      	ldr	r2, [r7, #16]
 801db48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801db4a:	683b      	ldr	r3, [r7, #0]
 801db4c:	685b      	ldr	r3, [r3, #4]
 801db4e:	f003 0303 	and.w	r3, r3, #3
 801db52:	2b03      	cmp	r3, #3
 801db54:	d017      	beq.n	801db86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	68db      	ldr	r3, [r3, #12]
 801db5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801db5c:	697b      	ldr	r3, [r7, #20]
 801db5e:	005b      	lsls	r3, r3, #1
 801db60:	2203      	movs	r2, #3
 801db62:	fa02 f303 	lsl.w	r3, r2, r3
 801db66:	43db      	mvns	r3, r3
 801db68:	693a      	ldr	r2, [r7, #16]
 801db6a:	4013      	ands	r3, r2
 801db6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	689a      	ldr	r2, [r3, #8]
 801db72:	697b      	ldr	r3, [r7, #20]
 801db74:	005b      	lsls	r3, r3, #1
 801db76:	fa02 f303 	lsl.w	r3, r2, r3
 801db7a:	693a      	ldr	r2, [r7, #16]
 801db7c:	4313      	orrs	r3, r2
 801db7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	693a      	ldr	r2, [r7, #16]
 801db84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801db86:	683b      	ldr	r3, [r7, #0]
 801db88:	685b      	ldr	r3, [r3, #4]
 801db8a:	f003 0303 	and.w	r3, r3, #3
 801db8e:	2b02      	cmp	r3, #2
 801db90:	d123      	bne.n	801dbda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801db92:	697b      	ldr	r3, [r7, #20]
 801db94:	08da      	lsrs	r2, r3, #3
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	3208      	adds	r2, #8
 801db9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801db9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	f003 0307 	and.w	r3, r3, #7
 801dba6:	009b      	lsls	r3, r3, #2
 801dba8:	220f      	movs	r2, #15
 801dbaa:	fa02 f303 	lsl.w	r3, r2, r3
 801dbae:	43db      	mvns	r3, r3
 801dbb0:	693a      	ldr	r2, [r7, #16]
 801dbb2:	4013      	ands	r3, r2
 801dbb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	691a      	ldr	r2, [r3, #16]
 801dbba:	697b      	ldr	r3, [r7, #20]
 801dbbc:	f003 0307 	and.w	r3, r3, #7
 801dbc0:	009b      	lsls	r3, r3, #2
 801dbc2:	fa02 f303 	lsl.w	r3, r2, r3
 801dbc6:	693a      	ldr	r2, [r7, #16]
 801dbc8:	4313      	orrs	r3, r2
 801dbca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801dbcc:	697b      	ldr	r3, [r7, #20]
 801dbce:	08da      	lsrs	r2, r3, #3
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	3208      	adds	r2, #8
 801dbd4:	6939      	ldr	r1, [r7, #16]
 801dbd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801dbe0:	697b      	ldr	r3, [r7, #20]
 801dbe2:	005b      	lsls	r3, r3, #1
 801dbe4:	2203      	movs	r2, #3
 801dbe6:	fa02 f303 	lsl.w	r3, r2, r3
 801dbea:	43db      	mvns	r3, r3
 801dbec:	693a      	ldr	r2, [r7, #16]
 801dbee:	4013      	ands	r3, r2
 801dbf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801dbf2:	683b      	ldr	r3, [r7, #0]
 801dbf4:	685b      	ldr	r3, [r3, #4]
 801dbf6:	f003 0203 	and.w	r2, r3, #3
 801dbfa:	697b      	ldr	r3, [r7, #20]
 801dbfc:	005b      	lsls	r3, r3, #1
 801dbfe:	fa02 f303 	lsl.w	r3, r2, r3
 801dc02:	693a      	ldr	r2, [r7, #16]
 801dc04:	4313      	orrs	r3, r2
 801dc06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	693a      	ldr	r2, [r7, #16]
 801dc0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801dc0e:	683b      	ldr	r3, [r7, #0]
 801dc10:	685b      	ldr	r3, [r3, #4]
 801dc12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	f000 80a6 	beq.w	801dd68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801dc1c:	4b5b      	ldr	r3, [pc, #364]	; (801dd8c <HAL_GPIO_Init+0x2e4>)
 801dc1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc20:	4a5a      	ldr	r2, [pc, #360]	; (801dd8c <HAL_GPIO_Init+0x2e4>)
 801dc22:	f043 0301 	orr.w	r3, r3, #1
 801dc26:	6613      	str	r3, [r2, #96]	; 0x60
 801dc28:	4b58      	ldr	r3, [pc, #352]	; (801dd8c <HAL_GPIO_Init+0x2e4>)
 801dc2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dc2c:	f003 0301 	and.w	r3, r3, #1
 801dc30:	60bb      	str	r3, [r7, #8]
 801dc32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801dc34:	4a56      	ldr	r2, [pc, #344]	; (801dd90 <HAL_GPIO_Init+0x2e8>)
 801dc36:	697b      	ldr	r3, [r7, #20]
 801dc38:	089b      	lsrs	r3, r3, #2
 801dc3a:	3302      	adds	r3, #2
 801dc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dc40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	f003 0303 	and.w	r3, r3, #3
 801dc48:	009b      	lsls	r3, r3, #2
 801dc4a:	220f      	movs	r2, #15
 801dc4c:	fa02 f303 	lsl.w	r3, r2, r3
 801dc50:	43db      	mvns	r3, r3
 801dc52:	693a      	ldr	r2, [r7, #16]
 801dc54:	4013      	ands	r3, r2
 801dc56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801dc5e:	d01f      	beq.n	801dca0 <HAL_GPIO_Init+0x1f8>
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	4a4c      	ldr	r2, [pc, #304]	; (801dd94 <HAL_GPIO_Init+0x2ec>)
 801dc64:	4293      	cmp	r3, r2
 801dc66:	d019      	beq.n	801dc9c <HAL_GPIO_Init+0x1f4>
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	4a4b      	ldr	r2, [pc, #300]	; (801dd98 <HAL_GPIO_Init+0x2f0>)
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d013      	beq.n	801dc98 <HAL_GPIO_Init+0x1f0>
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	4a4a      	ldr	r2, [pc, #296]	; (801dd9c <HAL_GPIO_Init+0x2f4>)
 801dc74:	4293      	cmp	r3, r2
 801dc76:	d00d      	beq.n	801dc94 <HAL_GPIO_Init+0x1ec>
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	4a49      	ldr	r2, [pc, #292]	; (801dda0 <HAL_GPIO_Init+0x2f8>)
 801dc7c:	4293      	cmp	r3, r2
 801dc7e:	d007      	beq.n	801dc90 <HAL_GPIO_Init+0x1e8>
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	4a48      	ldr	r2, [pc, #288]	; (801dda4 <HAL_GPIO_Init+0x2fc>)
 801dc84:	4293      	cmp	r3, r2
 801dc86:	d101      	bne.n	801dc8c <HAL_GPIO_Init+0x1e4>
 801dc88:	2305      	movs	r3, #5
 801dc8a:	e00a      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dc8c:	2306      	movs	r3, #6
 801dc8e:	e008      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dc90:	2304      	movs	r3, #4
 801dc92:	e006      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dc94:	2303      	movs	r3, #3
 801dc96:	e004      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dc98:	2302      	movs	r3, #2
 801dc9a:	e002      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	e000      	b.n	801dca2 <HAL_GPIO_Init+0x1fa>
 801dca0:	2300      	movs	r3, #0
 801dca2:	697a      	ldr	r2, [r7, #20]
 801dca4:	f002 0203 	and.w	r2, r2, #3
 801dca8:	0092      	lsls	r2, r2, #2
 801dcaa:	4093      	lsls	r3, r2
 801dcac:	693a      	ldr	r2, [r7, #16]
 801dcae:	4313      	orrs	r3, r2
 801dcb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801dcb2:	4937      	ldr	r1, [pc, #220]	; (801dd90 <HAL_GPIO_Init+0x2e8>)
 801dcb4:	697b      	ldr	r3, [r7, #20]
 801dcb6:	089b      	lsrs	r3, r3, #2
 801dcb8:	3302      	adds	r3, #2
 801dcba:	693a      	ldr	r2, [r7, #16]
 801dcbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801dcc0:	4b39      	ldr	r3, [pc, #228]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dcc2:	689b      	ldr	r3, [r3, #8]
 801dcc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	43db      	mvns	r3, r3
 801dcca:	693a      	ldr	r2, [r7, #16]
 801dccc:	4013      	ands	r3, r2
 801dcce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801dcd0:	683b      	ldr	r3, [r7, #0]
 801dcd2:	685b      	ldr	r3, [r3, #4]
 801dcd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d003      	beq.n	801dce4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801dcdc:	693a      	ldr	r2, [r7, #16]
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	4313      	orrs	r3, r2
 801dce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801dce4:	4a30      	ldr	r2, [pc, #192]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dce6:	693b      	ldr	r3, [r7, #16]
 801dce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801dcea:	4b2f      	ldr	r3, [pc, #188]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dcec:	68db      	ldr	r3, [r3, #12]
 801dcee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	43db      	mvns	r3, r3
 801dcf4:	693a      	ldr	r2, [r7, #16]
 801dcf6:	4013      	ands	r3, r2
 801dcf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801dcfa:	683b      	ldr	r3, [r7, #0]
 801dcfc:	685b      	ldr	r3, [r3, #4]
 801dcfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d003      	beq.n	801dd0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801dd06:	693a      	ldr	r2, [r7, #16]
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	4313      	orrs	r3, r2
 801dd0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801dd0e:	4a26      	ldr	r2, [pc, #152]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dd10:	693b      	ldr	r3, [r7, #16]
 801dd12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801dd14:	4b24      	ldr	r3, [pc, #144]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dd16:	685b      	ldr	r3, [r3, #4]
 801dd18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	43db      	mvns	r3, r3
 801dd1e:	693a      	ldr	r2, [r7, #16]
 801dd20:	4013      	ands	r3, r2
 801dd22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801dd24:	683b      	ldr	r3, [r7, #0]
 801dd26:	685b      	ldr	r3, [r3, #4]
 801dd28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d003      	beq.n	801dd38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801dd30:	693a      	ldr	r2, [r7, #16]
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	4313      	orrs	r3, r2
 801dd36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801dd38:	4a1b      	ldr	r2, [pc, #108]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dd3a:	693b      	ldr	r3, [r7, #16]
 801dd3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801dd3e:	4b1a      	ldr	r3, [pc, #104]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	43db      	mvns	r3, r3
 801dd48:	693a      	ldr	r2, [r7, #16]
 801dd4a:	4013      	ands	r3, r2
 801dd4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801dd4e:	683b      	ldr	r3, [r7, #0]
 801dd50:	685b      	ldr	r3, [r3, #4]
 801dd52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d003      	beq.n	801dd62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801dd5a:	693a      	ldr	r2, [r7, #16]
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	4313      	orrs	r3, r2
 801dd60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801dd62:	4a11      	ldr	r2, [pc, #68]	; (801dda8 <HAL_GPIO_Init+0x300>)
 801dd64:	693b      	ldr	r3, [r7, #16]
 801dd66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801dd68:	697b      	ldr	r3, [r7, #20]
 801dd6a:	3301      	adds	r3, #1
 801dd6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801dd6e:	683b      	ldr	r3, [r7, #0]
 801dd70:	681a      	ldr	r2, [r3, #0]
 801dd72:	697b      	ldr	r3, [r7, #20]
 801dd74:	fa22 f303 	lsr.w	r3, r2, r3
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	f47f ae9d 	bne.w	801dab8 <HAL_GPIO_Init+0x10>
  }
}
 801dd7e:	bf00      	nop
 801dd80:	bf00      	nop
 801dd82:	371c      	adds	r7, #28
 801dd84:	46bd      	mov	sp, r7
 801dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd8a:	4770      	bx	lr
 801dd8c:	40021000 	.word	0x40021000
 801dd90:	40010000 	.word	0x40010000
 801dd94:	48000400 	.word	0x48000400
 801dd98:	48000800 	.word	0x48000800
 801dd9c:	48000c00 	.word	0x48000c00
 801dda0:	48001000 	.word	0x48001000
 801dda4:	48001400 	.word	0x48001400
 801dda8:	40010400 	.word	0x40010400

0801ddac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ddac:	b480      	push	{r7}
 801ddae:	b083      	sub	sp, #12
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
 801ddb4:	460b      	mov	r3, r1
 801ddb6:	807b      	strh	r3, [r7, #2]
 801ddb8:	4613      	mov	r3, r2
 801ddba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ddbc:	787b      	ldrb	r3, [r7, #1]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d003      	beq.n	801ddca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801ddc2:	887a      	ldrh	r2, [r7, #2]
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ddc8:	e002      	b.n	801ddd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ddca:	887a      	ldrh	r2, [r7, #2]
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ddd0:	bf00      	nop
 801ddd2:	370c      	adds	r7, #12
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddda:	4770      	bx	lr

0801dddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801dddc:	b480      	push	{r7}
 801ddde:	b085      	sub	sp, #20
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d141      	bne.n	801de6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ddea:	4b4b      	ldr	r3, [pc, #300]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ddf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ddf6:	d131      	bne.n	801de5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ddf8:	4b47      	ldr	r3, [pc, #284]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ddfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ddfe:	4a46      	ldr	r2, [pc, #280]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801de04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801de08:	4b43      	ldr	r3, [pc, #268]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801de10:	4a41      	ldr	r2, [pc, #260]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801de16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801de18:	4b40      	ldr	r3, [pc, #256]	; (801df1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	2232      	movs	r2, #50	; 0x32
 801de1e:	fb02 f303 	mul.w	r3, r2, r3
 801de22:	4a3f      	ldr	r2, [pc, #252]	; (801df20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801de24:	fba2 2303 	umull	r2, r3, r2, r3
 801de28:	0c9b      	lsrs	r3, r3, #18
 801de2a:	3301      	adds	r3, #1
 801de2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801de2e:	e002      	b.n	801de36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	3b01      	subs	r3, #1
 801de34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801de36:	4b38      	ldr	r3, [pc, #224]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de38:	695b      	ldr	r3, [r3, #20]
 801de3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801de3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de42:	d102      	bne.n	801de4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	2b00      	cmp	r3, #0
 801de48:	d1f2      	bne.n	801de30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801de4a:	4b33      	ldr	r3, [pc, #204]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de4c:	695b      	ldr	r3, [r3, #20]
 801de4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801de52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de56:	d158      	bne.n	801df0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801de58:	2303      	movs	r3, #3
 801de5a:	e057      	b.n	801df0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801de5c:	4b2e      	ldr	r3, [pc, #184]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801de62:	4a2d      	ldr	r2, [pc, #180]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801de68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801de6c:	e04d      	b.n	801df0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de74:	d141      	bne.n	801defa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801de76:	4b28      	ldr	r3, [pc, #160]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801de7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de82:	d131      	bne.n	801dee8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801de84:	4b24      	ldr	r3, [pc, #144]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801de8a:	4a23      	ldr	r2, [pc, #140]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801de90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801de94:	4b20      	ldr	r3, [pc, #128]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801de9c:	4a1e      	ldr	r2, [pc, #120]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801de9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801dea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801dea4:	4b1d      	ldr	r3, [pc, #116]	; (801df1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	2232      	movs	r2, #50	; 0x32
 801deaa:	fb02 f303 	mul.w	r3, r2, r3
 801deae:	4a1c      	ldr	r2, [pc, #112]	; (801df20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801deb0:	fba2 2303 	umull	r2, r3, r2, r3
 801deb4:	0c9b      	lsrs	r3, r3, #18
 801deb6:	3301      	adds	r3, #1
 801deb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801deba:	e002      	b.n	801dec2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801debc:	68fb      	ldr	r3, [r7, #12]
 801debe:	3b01      	subs	r3, #1
 801dec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801dec2:	4b15      	ldr	r3, [pc, #84]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801dec4:	695b      	ldr	r3, [r3, #20]
 801dec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801deca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dece:	d102      	bne.n	801ded6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d1f2      	bne.n	801debc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ded6:	4b10      	ldr	r3, [pc, #64]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ded8:	695b      	ldr	r3, [r3, #20]
 801deda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801dede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dee2:	d112      	bne.n	801df0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801dee4:	2303      	movs	r3, #3
 801dee6:	e011      	b.n	801df0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801dee8:	4b0b      	ldr	r3, [pc, #44]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801deea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801deee:	4a0a      	ldr	r2, [pc, #40]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801def0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801def4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801def8:	e007      	b.n	801df0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801defa:	4b07      	ldr	r3, [pc, #28]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801df02:	4a05      	ldr	r2, [pc, #20]	; (801df18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801df04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801df08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801df0a:	2300      	movs	r3, #0
}
 801df0c:	4618      	mov	r0, r3
 801df0e:	3714      	adds	r7, #20
 801df10:	46bd      	mov	sp, r7
 801df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df16:	4770      	bx	lr
 801df18:	40007000 	.word	0x40007000
 801df1c:	20000000 	.word	0x20000000
 801df20:	431bde83 	.word	0x431bde83

0801df24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801df24:	b480      	push	{r7}
 801df26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801df28:	4b05      	ldr	r3, [pc, #20]	; (801df40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801df2a:	689b      	ldr	r3, [r3, #8]
 801df2c:	4a04      	ldr	r2, [pc, #16]	; (801df40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801df2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801df32:	6093      	str	r3, [r2, #8]
}
 801df34:	bf00      	nop
 801df36:	46bd      	mov	sp, r7
 801df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df3c:	4770      	bx	lr
 801df3e:	bf00      	nop
 801df40:	40007000 	.word	0x40007000

0801df44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801df44:	b580      	push	{r7, lr}
 801df46:	b088      	sub	sp, #32
 801df48:	af00      	add	r7, sp, #0
 801df4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d101      	bne.n	801df56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801df52:	2301      	movs	r3, #1
 801df54:	e306      	b.n	801e564 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	f003 0301 	and.w	r3, r3, #1
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d075      	beq.n	801e04e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801df62:	4b97      	ldr	r3, [pc, #604]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801df64:	689b      	ldr	r3, [r3, #8]
 801df66:	f003 030c 	and.w	r3, r3, #12
 801df6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801df6c:	4b94      	ldr	r3, [pc, #592]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801df6e:	68db      	ldr	r3, [r3, #12]
 801df70:	f003 0303 	and.w	r3, r3, #3
 801df74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801df76:	69bb      	ldr	r3, [r7, #24]
 801df78:	2b0c      	cmp	r3, #12
 801df7a:	d102      	bne.n	801df82 <HAL_RCC_OscConfig+0x3e>
 801df7c:	697b      	ldr	r3, [r7, #20]
 801df7e:	2b03      	cmp	r3, #3
 801df80:	d002      	beq.n	801df88 <HAL_RCC_OscConfig+0x44>
 801df82:	69bb      	ldr	r3, [r7, #24]
 801df84:	2b08      	cmp	r3, #8
 801df86:	d10b      	bne.n	801dfa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801df88:	4b8d      	ldr	r3, [pc, #564]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801df90:	2b00      	cmp	r3, #0
 801df92:	d05b      	beq.n	801e04c <HAL_RCC_OscConfig+0x108>
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	685b      	ldr	r3, [r3, #4]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d157      	bne.n	801e04c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801df9c:	2301      	movs	r3, #1
 801df9e:	e2e1      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	685b      	ldr	r3, [r3, #4]
 801dfa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dfa8:	d106      	bne.n	801dfb8 <HAL_RCC_OscConfig+0x74>
 801dfaa:	4b85      	ldr	r3, [pc, #532]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	4a84      	ldr	r2, [pc, #528]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dfb4:	6013      	str	r3, [r2, #0]
 801dfb6:	e01d      	b.n	801dff4 <HAL_RCC_OscConfig+0xb0>
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	685b      	ldr	r3, [r3, #4]
 801dfbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801dfc0:	d10c      	bne.n	801dfdc <HAL_RCC_OscConfig+0x98>
 801dfc2:	4b7f      	ldr	r3, [pc, #508]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	4a7e      	ldr	r2, [pc, #504]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801dfcc:	6013      	str	r3, [r2, #0]
 801dfce:	4b7c      	ldr	r3, [pc, #496]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	4a7b      	ldr	r2, [pc, #492]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dfd8:	6013      	str	r3, [r2, #0]
 801dfda:	e00b      	b.n	801dff4 <HAL_RCC_OscConfig+0xb0>
 801dfdc:	4b78      	ldr	r3, [pc, #480]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	4a77      	ldr	r2, [pc, #476]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dfe6:	6013      	str	r3, [r2, #0]
 801dfe8:	4b75      	ldr	r3, [pc, #468]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	4a74      	ldr	r2, [pc, #464]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801dfee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	685b      	ldr	r3, [r3, #4]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d013      	beq.n	801e024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dffc:	f7fc fd0e 	bl	801aa1c <HAL_GetTick>
 801e000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801e002:	e008      	b.n	801e016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801e004:	f7fc fd0a 	bl	801aa1c <HAL_GetTick>
 801e008:	4602      	mov	r2, r0
 801e00a:	693b      	ldr	r3, [r7, #16]
 801e00c:	1ad3      	subs	r3, r2, r3
 801e00e:	2b64      	cmp	r3, #100	; 0x64
 801e010:	d901      	bls.n	801e016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801e012:	2303      	movs	r3, #3
 801e014:	e2a6      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801e016:	4b6a      	ldr	r3, [pc, #424]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e018:	681b      	ldr	r3, [r3, #0]
 801e01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d0f0      	beq.n	801e004 <HAL_RCC_OscConfig+0xc0>
 801e022:	e014      	b.n	801e04e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e024:	f7fc fcfa 	bl	801aa1c <HAL_GetTick>
 801e028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801e02a:	e008      	b.n	801e03e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801e02c:	f7fc fcf6 	bl	801aa1c <HAL_GetTick>
 801e030:	4602      	mov	r2, r0
 801e032:	693b      	ldr	r3, [r7, #16]
 801e034:	1ad3      	subs	r3, r2, r3
 801e036:	2b64      	cmp	r3, #100	; 0x64
 801e038:	d901      	bls.n	801e03e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801e03a:	2303      	movs	r3, #3
 801e03c:	e292      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801e03e:	4b60      	ldr	r3, [pc, #384]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e046:	2b00      	cmp	r3, #0
 801e048:	d1f0      	bne.n	801e02c <HAL_RCC_OscConfig+0xe8>
 801e04a:	e000      	b.n	801e04e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801e04c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	f003 0302 	and.w	r3, r3, #2
 801e056:	2b00      	cmp	r3, #0
 801e058:	d075      	beq.n	801e146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e05a:	4b59      	ldr	r3, [pc, #356]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e05c:	689b      	ldr	r3, [r3, #8]
 801e05e:	f003 030c 	and.w	r3, r3, #12
 801e062:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801e064:	4b56      	ldr	r3, [pc, #344]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e066:	68db      	ldr	r3, [r3, #12]
 801e068:	f003 0303 	and.w	r3, r3, #3
 801e06c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801e06e:	69bb      	ldr	r3, [r7, #24]
 801e070:	2b0c      	cmp	r3, #12
 801e072:	d102      	bne.n	801e07a <HAL_RCC_OscConfig+0x136>
 801e074:	697b      	ldr	r3, [r7, #20]
 801e076:	2b02      	cmp	r3, #2
 801e078:	d002      	beq.n	801e080 <HAL_RCC_OscConfig+0x13c>
 801e07a:	69bb      	ldr	r3, [r7, #24]
 801e07c:	2b04      	cmp	r3, #4
 801e07e:	d11f      	bne.n	801e0c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801e080:	4b4f      	ldr	r3, [pc, #316]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d005      	beq.n	801e098 <HAL_RCC_OscConfig+0x154>
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	68db      	ldr	r3, [r3, #12]
 801e090:	2b00      	cmp	r3, #0
 801e092:	d101      	bne.n	801e098 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801e094:	2301      	movs	r3, #1
 801e096:	e265      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801e098:	4b49      	ldr	r3, [pc, #292]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e09a:	685b      	ldr	r3, [r3, #4]
 801e09c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	691b      	ldr	r3, [r3, #16]
 801e0a4:	061b      	lsls	r3, r3, #24
 801e0a6:	4946      	ldr	r1, [pc, #280]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e0a8:	4313      	orrs	r3, r2
 801e0aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801e0ac:	4b45      	ldr	r3, [pc, #276]	; (801e1c4 <HAL_RCC_OscConfig+0x280>)
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	f7fc fc67 	bl	801a984 <HAL_InitTick>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d043      	beq.n	801e144 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801e0bc:	2301      	movs	r3, #1
 801e0be:	e251      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	68db      	ldr	r3, [r3, #12]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d023      	beq.n	801e110 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801e0c8:	4b3d      	ldr	r3, [pc, #244]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	4a3c      	ldr	r2, [pc, #240]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e0d4:	f7fc fca2 	bl	801aa1c <HAL_GetTick>
 801e0d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801e0da:	e008      	b.n	801e0ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801e0dc:	f7fc fc9e 	bl	801aa1c <HAL_GetTick>
 801e0e0:	4602      	mov	r2, r0
 801e0e2:	693b      	ldr	r3, [r7, #16]
 801e0e4:	1ad3      	subs	r3, r2, r3
 801e0e6:	2b02      	cmp	r3, #2
 801e0e8:	d901      	bls.n	801e0ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801e0ea:	2303      	movs	r3, #3
 801e0ec:	e23a      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801e0ee:	4b34      	ldr	r3, [pc, #208]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d0f0      	beq.n	801e0dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801e0fa:	4b31      	ldr	r3, [pc, #196]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e0fc:	685b      	ldr	r3, [r3, #4]
 801e0fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	691b      	ldr	r3, [r3, #16]
 801e106:	061b      	lsls	r3, r3, #24
 801e108:	492d      	ldr	r1, [pc, #180]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e10a:	4313      	orrs	r3, r2
 801e10c:	604b      	str	r3, [r1, #4]
 801e10e:	e01a      	b.n	801e146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801e110:	4b2b      	ldr	r3, [pc, #172]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	4a2a      	ldr	r2, [pc, #168]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e11a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e11c:	f7fc fc7e 	bl	801aa1c <HAL_GetTick>
 801e120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801e122:	e008      	b.n	801e136 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801e124:	f7fc fc7a 	bl	801aa1c <HAL_GetTick>
 801e128:	4602      	mov	r2, r0
 801e12a:	693b      	ldr	r3, [r7, #16]
 801e12c:	1ad3      	subs	r3, r2, r3
 801e12e:	2b02      	cmp	r3, #2
 801e130:	d901      	bls.n	801e136 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801e132:	2303      	movs	r3, #3
 801e134:	e216      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801e136:	4b22      	ldr	r3, [pc, #136]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d1f0      	bne.n	801e124 <HAL_RCC_OscConfig+0x1e0>
 801e142:	e000      	b.n	801e146 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801e144:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	f003 0308 	and.w	r3, r3, #8
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d041      	beq.n	801e1d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	695b      	ldr	r3, [r3, #20]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d01c      	beq.n	801e194 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801e15a:	4b19      	ldr	r3, [pc, #100]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e160:	4a17      	ldr	r2, [pc, #92]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e162:	f043 0301 	orr.w	r3, r3, #1
 801e166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e16a:	f7fc fc57 	bl	801aa1c <HAL_GetTick>
 801e16e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801e170:	e008      	b.n	801e184 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801e172:	f7fc fc53 	bl	801aa1c <HAL_GetTick>
 801e176:	4602      	mov	r2, r0
 801e178:	693b      	ldr	r3, [r7, #16]
 801e17a:	1ad3      	subs	r3, r2, r3
 801e17c:	2b02      	cmp	r3, #2
 801e17e:	d901      	bls.n	801e184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801e180:	2303      	movs	r3, #3
 801e182:	e1ef      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801e184:	4b0e      	ldr	r3, [pc, #56]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e18a:	f003 0302 	and.w	r3, r3, #2
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d0ef      	beq.n	801e172 <HAL_RCC_OscConfig+0x22e>
 801e192:	e020      	b.n	801e1d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801e194:	4b0a      	ldr	r3, [pc, #40]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e19a:	4a09      	ldr	r2, [pc, #36]	; (801e1c0 <HAL_RCC_OscConfig+0x27c>)
 801e19c:	f023 0301 	bic.w	r3, r3, #1
 801e1a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e1a4:	f7fc fc3a 	bl	801aa1c <HAL_GetTick>
 801e1a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801e1aa:	e00d      	b.n	801e1c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801e1ac:	f7fc fc36 	bl	801aa1c <HAL_GetTick>
 801e1b0:	4602      	mov	r2, r0
 801e1b2:	693b      	ldr	r3, [r7, #16]
 801e1b4:	1ad3      	subs	r3, r2, r3
 801e1b6:	2b02      	cmp	r3, #2
 801e1b8:	d906      	bls.n	801e1c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801e1ba:	2303      	movs	r3, #3
 801e1bc:	e1d2      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
 801e1be:	bf00      	nop
 801e1c0:	40021000 	.word	0x40021000
 801e1c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801e1c8:	4b8c      	ldr	r3, [pc, #560]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e1ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e1ce:	f003 0302 	and.w	r3, r3, #2
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d1ea      	bne.n	801e1ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	f003 0304 	and.w	r3, r3, #4
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	f000 80a6 	beq.w	801e330 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801e1e8:	4b84      	ldr	r3, [pc, #528]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e1ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d101      	bne.n	801e1f8 <HAL_RCC_OscConfig+0x2b4>
 801e1f4:	2301      	movs	r3, #1
 801e1f6:	e000      	b.n	801e1fa <HAL_RCC_OscConfig+0x2b6>
 801e1f8:	2300      	movs	r3, #0
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d00d      	beq.n	801e21a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801e1fe:	4b7f      	ldr	r3, [pc, #508]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e202:	4a7e      	ldr	r2, [pc, #504]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e208:	6593      	str	r3, [r2, #88]	; 0x58
 801e20a:	4b7c      	ldr	r3, [pc, #496]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e20e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e212:	60fb      	str	r3, [r7, #12]
 801e214:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801e216:	2301      	movs	r3, #1
 801e218:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801e21a:	4b79      	ldr	r3, [pc, #484]	; (801e400 <HAL_RCC_OscConfig+0x4bc>)
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e222:	2b00      	cmp	r3, #0
 801e224:	d118      	bne.n	801e258 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e226:	4b76      	ldr	r3, [pc, #472]	; (801e400 <HAL_RCC_OscConfig+0x4bc>)
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	4a75      	ldr	r2, [pc, #468]	; (801e400 <HAL_RCC_OscConfig+0x4bc>)
 801e22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801e232:	f7fc fbf3 	bl	801aa1c <HAL_GetTick>
 801e236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801e238:	e008      	b.n	801e24c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e23a:	f7fc fbef 	bl	801aa1c <HAL_GetTick>
 801e23e:	4602      	mov	r2, r0
 801e240:	693b      	ldr	r3, [r7, #16]
 801e242:	1ad3      	subs	r3, r2, r3
 801e244:	2b02      	cmp	r3, #2
 801e246:	d901      	bls.n	801e24c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801e248:	2303      	movs	r3, #3
 801e24a:	e18b      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801e24c:	4b6c      	ldr	r3, [pc, #432]	; (801e400 <HAL_RCC_OscConfig+0x4bc>)
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e254:	2b00      	cmp	r3, #0
 801e256:	d0f0      	beq.n	801e23a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	689b      	ldr	r3, [r3, #8]
 801e25c:	2b01      	cmp	r3, #1
 801e25e:	d108      	bne.n	801e272 <HAL_RCC_OscConfig+0x32e>
 801e260:	4b66      	ldr	r3, [pc, #408]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e266:	4a65      	ldr	r2, [pc, #404]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e268:	f043 0301 	orr.w	r3, r3, #1
 801e26c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801e270:	e024      	b.n	801e2bc <HAL_RCC_OscConfig+0x378>
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	689b      	ldr	r3, [r3, #8]
 801e276:	2b05      	cmp	r3, #5
 801e278:	d110      	bne.n	801e29c <HAL_RCC_OscConfig+0x358>
 801e27a:	4b60      	ldr	r3, [pc, #384]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e280:	4a5e      	ldr	r2, [pc, #376]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e282:	f043 0304 	orr.w	r3, r3, #4
 801e286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801e28a:	4b5c      	ldr	r3, [pc, #368]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e290:	4a5a      	ldr	r2, [pc, #360]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e292:	f043 0301 	orr.w	r3, r3, #1
 801e296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801e29a:	e00f      	b.n	801e2bc <HAL_RCC_OscConfig+0x378>
 801e29c:	4b57      	ldr	r3, [pc, #348]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e2a2:	4a56      	ldr	r2, [pc, #344]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e2a4:	f023 0301 	bic.w	r3, r3, #1
 801e2a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801e2ac:	4b53      	ldr	r3, [pc, #332]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e2b2:	4a52      	ldr	r2, [pc, #328]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e2b4:	f023 0304 	bic.w	r3, r3, #4
 801e2b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	689b      	ldr	r3, [r3, #8]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d016      	beq.n	801e2f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e2c4:	f7fc fbaa 	bl	801aa1c <HAL_GetTick>
 801e2c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801e2ca:	e00a      	b.n	801e2e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e2cc:	f7fc fba6 	bl	801aa1c <HAL_GetTick>
 801e2d0:	4602      	mov	r2, r0
 801e2d2:	693b      	ldr	r3, [r7, #16]
 801e2d4:	1ad3      	subs	r3, r2, r3
 801e2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 801e2da:	4293      	cmp	r3, r2
 801e2dc:	d901      	bls.n	801e2e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801e2de:	2303      	movs	r3, #3
 801e2e0:	e140      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801e2e2:	4b46      	ldr	r3, [pc, #280]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e2e8:	f003 0302 	and.w	r3, r3, #2
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d0ed      	beq.n	801e2cc <HAL_RCC_OscConfig+0x388>
 801e2f0:	e015      	b.n	801e31e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e2f2:	f7fc fb93 	bl	801aa1c <HAL_GetTick>
 801e2f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801e2f8:	e00a      	b.n	801e310 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e2fa:	f7fc fb8f 	bl	801aa1c <HAL_GetTick>
 801e2fe:	4602      	mov	r2, r0
 801e300:	693b      	ldr	r3, [r7, #16]
 801e302:	1ad3      	subs	r3, r2, r3
 801e304:	f241 3288 	movw	r2, #5000	; 0x1388
 801e308:	4293      	cmp	r3, r2
 801e30a:	d901      	bls.n	801e310 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801e30c:	2303      	movs	r3, #3
 801e30e:	e129      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801e310:	4b3a      	ldr	r3, [pc, #232]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e316:	f003 0302 	and.w	r3, r3, #2
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d1ed      	bne.n	801e2fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801e31e:	7ffb      	ldrb	r3, [r7, #31]
 801e320:	2b01      	cmp	r3, #1
 801e322:	d105      	bne.n	801e330 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801e324:	4b35      	ldr	r3, [pc, #212]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e328:	4a34      	ldr	r2, [pc, #208]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e32a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e32e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	f003 0320 	and.w	r3, r3, #32
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d03c      	beq.n	801e3b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	699b      	ldr	r3, [r3, #24]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d01c      	beq.n	801e37e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801e344:	4b2d      	ldr	r3, [pc, #180]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e34a:	4a2c      	ldr	r2, [pc, #176]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e34c:	f043 0301 	orr.w	r3, r3, #1
 801e350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e354:	f7fc fb62 	bl	801aa1c <HAL_GetTick>
 801e358:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801e35a:	e008      	b.n	801e36e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801e35c:	f7fc fb5e 	bl	801aa1c <HAL_GetTick>
 801e360:	4602      	mov	r2, r0
 801e362:	693b      	ldr	r3, [r7, #16]
 801e364:	1ad3      	subs	r3, r2, r3
 801e366:	2b02      	cmp	r3, #2
 801e368:	d901      	bls.n	801e36e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801e36a:	2303      	movs	r3, #3
 801e36c:	e0fa      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801e36e:	4b23      	ldr	r3, [pc, #140]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e374:	f003 0302 	and.w	r3, r3, #2
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d0ef      	beq.n	801e35c <HAL_RCC_OscConfig+0x418>
 801e37c:	e01b      	b.n	801e3b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801e37e:	4b1f      	ldr	r3, [pc, #124]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e384:	4a1d      	ldr	r2, [pc, #116]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e386:	f023 0301 	bic.w	r3, r3, #1
 801e38a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801e38e:	f7fc fb45 	bl	801aa1c <HAL_GetTick>
 801e392:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801e394:	e008      	b.n	801e3a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801e396:	f7fc fb41 	bl	801aa1c <HAL_GetTick>
 801e39a:	4602      	mov	r2, r0
 801e39c:	693b      	ldr	r3, [r7, #16]
 801e39e:	1ad3      	subs	r3, r2, r3
 801e3a0:	2b02      	cmp	r3, #2
 801e3a2:	d901      	bls.n	801e3a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801e3a4:	2303      	movs	r3, #3
 801e3a6:	e0dd      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801e3a8:	4b14      	ldr	r3, [pc, #80]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e3aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e3ae:	f003 0302 	and.w	r3, r3, #2
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d1ef      	bne.n	801e396 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	69db      	ldr	r3, [r3, #28]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	f000 80d1 	beq.w	801e562 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801e3c0:	4b0e      	ldr	r3, [pc, #56]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e3c2:	689b      	ldr	r3, [r3, #8]
 801e3c4:	f003 030c 	and.w	r3, r3, #12
 801e3c8:	2b0c      	cmp	r3, #12
 801e3ca:	f000 808b 	beq.w	801e4e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	69db      	ldr	r3, [r3, #28]
 801e3d2:	2b02      	cmp	r3, #2
 801e3d4:	d15e      	bne.n	801e494 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801e3d6:	4b09      	ldr	r3, [pc, #36]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	4a08      	ldr	r2, [pc, #32]	; (801e3fc <HAL_RCC_OscConfig+0x4b8>)
 801e3dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e3e2:	f7fc fb1b 	bl	801aa1c <HAL_GetTick>
 801e3e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801e3e8:	e00c      	b.n	801e404 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801e3ea:	f7fc fb17 	bl	801aa1c <HAL_GetTick>
 801e3ee:	4602      	mov	r2, r0
 801e3f0:	693b      	ldr	r3, [r7, #16]
 801e3f2:	1ad3      	subs	r3, r2, r3
 801e3f4:	2b02      	cmp	r3, #2
 801e3f6:	d905      	bls.n	801e404 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801e3f8:	2303      	movs	r3, #3
 801e3fa:	e0b3      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
 801e3fc:	40021000 	.word	0x40021000
 801e400:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801e404:	4b59      	ldr	r3, [pc, #356]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d1ec      	bne.n	801e3ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801e410:	4b56      	ldr	r3, [pc, #344]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e412:	68da      	ldr	r2, [r3, #12]
 801e414:	4b56      	ldr	r3, [pc, #344]	; (801e570 <HAL_RCC_OscConfig+0x62c>)
 801e416:	4013      	ands	r3, r2
 801e418:	687a      	ldr	r2, [r7, #4]
 801e41a:	6a11      	ldr	r1, [r2, #32]
 801e41c:	687a      	ldr	r2, [r7, #4]
 801e41e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801e420:	3a01      	subs	r2, #1
 801e422:	0112      	lsls	r2, r2, #4
 801e424:	4311      	orrs	r1, r2
 801e426:	687a      	ldr	r2, [r7, #4]
 801e428:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801e42a:	0212      	lsls	r2, r2, #8
 801e42c:	4311      	orrs	r1, r2
 801e42e:	687a      	ldr	r2, [r7, #4]
 801e430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801e432:	0852      	lsrs	r2, r2, #1
 801e434:	3a01      	subs	r2, #1
 801e436:	0552      	lsls	r2, r2, #21
 801e438:	4311      	orrs	r1, r2
 801e43a:	687a      	ldr	r2, [r7, #4]
 801e43c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e43e:	0852      	lsrs	r2, r2, #1
 801e440:	3a01      	subs	r2, #1
 801e442:	0652      	lsls	r2, r2, #25
 801e444:	4311      	orrs	r1, r2
 801e446:	687a      	ldr	r2, [r7, #4]
 801e448:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e44a:	06d2      	lsls	r2, r2, #27
 801e44c:	430a      	orrs	r2, r1
 801e44e:	4947      	ldr	r1, [pc, #284]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e450:	4313      	orrs	r3, r2
 801e452:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801e454:	4b45      	ldr	r3, [pc, #276]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	4a44      	ldr	r2, [pc, #272]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e45e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801e460:	4b42      	ldr	r3, [pc, #264]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e462:	68db      	ldr	r3, [r3, #12]
 801e464:	4a41      	ldr	r2, [pc, #260]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e46a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e46c:	f7fc fad6 	bl	801aa1c <HAL_GetTick>
 801e470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801e472:	e008      	b.n	801e486 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801e474:	f7fc fad2 	bl	801aa1c <HAL_GetTick>
 801e478:	4602      	mov	r2, r0
 801e47a:	693b      	ldr	r3, [r7, #16]
 801e47c:	1ad3      	subs	r3, r2, r3
 801e47e:	2b02      	cmp	r3, #2
 801e480:	d901      	bls.n	801e486 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801e482:	2303      	movs	r3, #3
 801e484:	e06e      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801e486:	4b39      	ldr	r3, [pc, #228]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d0f0      	beq.n	801e474 <HAL_RCC_OscConfig+0x530>
 801e492:	e066      	b.n	801e562 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801e494:	4b35      	ldr	r3, [pc, #212]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	4a34      	ldr	r2, [pc, #208]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e49e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801e4a0:	4b32      	ldr	r3, [pc, #200]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4a2:	68db      	ldr	r3, [r3, #12]
 801e4a4:	4a31      	ldr	r2, [pc, #196]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4a6:	f023 0303 	bic.w	r3, r3, #3
 801e4aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801e4ac:	4b2f      	ldr	r3, [pc, #188]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4ae:	68db      	ldr	r3, [r3, #12]
 801e4b0:	4a2e      	ldr	r2, [pc, #184]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801e4b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e4ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e4bc:	f7fc faae 	bl	801aa1c <HAL_GetTick>
 801e4c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801e4c2:	e008      	b.n	801e4d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801e4c4:	f7fc faaa 	bl	801aa1c <HAL_GetTick>
 801e4c8:	4602      	mov	r2, r0
 801e4ca:	693b      	ldr	r3, [r7, #16]
 801e4cc:	1ad3      	subs	r3, r2, r3
 801e4ce:	2b02      	cmp	r3, #2
 801e4d0:	d901      	bls.n	801e4d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801e4d2:	2303      	movs	r3, #3
 801e4d4:	e046      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801e4d6:	4b25      	ldr	r3, [pc, #148]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d1f0      	bne.n	801e4c4 <HAL_RCC_OscConfig+0x580>
 801e4e2:	e03e      	b.n	801e562 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	69db      	ldr	r3, [r3, #28]
 801e4e8:	2b01      	cmp	r3, #1
 801e4ea:	d101      	bne.n	801e4f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801e4ec:	2301      	movs	r3, #1
 801e4ee:	e039      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801e4f0:	4b1e      	ldr	r3, [pc, #120]	; (801e56c <HAL_RCC_OscConfig+0x628>)
 801e4f2:	68db      	ldr	r3, [r3, #12]
 801e4f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801e4f6:	697b      	ldr	r3, [r7, #20]
 801e4f8:	f003 0203 	and.w	r2, r3, #3
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	6a1b      	ldr	r3, [r3, #32]
 801e500:	429a      	cmp	r2, r3
 801e502:	d12c      	bne.n	801e55e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801e504:	697b      	ldr	r3, [r7, #20]
 801e506:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e50e:	3b01      	subs	r3, #1
 801e510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801e512:	429a      	cmp	r2, r3
 801e514:	d123      	bne.n	801e55e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801e516:	697b      	ldr	r3, [r7, #20]
 801e518:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e520:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801e522:	429a      	cmp	r2, r3
 801e524:	d11b      	bne.n	801e55e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801e526:	697b      	ldr	r3, [r7, #20]
 801e528:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e530:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801e532:	429a      	cmp	r2, r3
 801e534:	d113      	bne.n	801e55e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801e536:	697b      	ldr	r3, [r7, #20]
 801e538:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e540:	085b      	lsrs	r3, r3, #1
 801e542:	3b01      	subs	r3, #1
 801e544:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801e546:	429a      	cmp	r2, r3
 801e548:	d109      	bne.n	801e55e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801e54a:	697b      	ldr	r3, [r7, #20]
 801e54c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e554:	085b      	lsrs	r3, r3, #1
 801e556:	3b01      	subs	r3, #1
 801e558:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801e55a:	429a      	cmp	r2, r3
 801e55c:	d001      	beq.n	801e562 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801e55e:	2301      	movs	r3, #1
 801e560:	e000      	b.n	801e564 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801e562:	2300      	movs	r3, #0
}
 801e564:	4618      	mov	r0, r3
 801e566:	3720      	adds	r7, #32
 801e568:	46bd      	mov	sp, r7
 801e56a:	bd80      	pop	{r7, pc}
 801e56c:	40021000 	.word	0x40021000
 801e570:	019f800c 	.word	0x019f800c

0801e574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801e574:	b580      	push	{r7, lr}
 801e576:	b086      	sub	sp, #24
 801e578:	af00      	add	r7, sp, #0
 801e57a:	6078      	str	r0, [r7, #4]
 801e57c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801e57e:	2300      	movs	r3, #0
 801e580:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d101      	bne.n	801e58c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801e588:	2301      	movs	r3, #1
 801e58a:	e11e      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801e58c:	4b91      	ldr	r3, [pc, #580]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	f003 030f 	and.w	r3, r3, #15
 801e594:	683a      	ldr	r2, [r7, #0]
 801e596:	429a      	cmp	r2, r3
 801e598:	d910      	bls.n	801e5bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801e59a:	4b8e      	ldr	r3, [pc, #568]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f023 020f 	bic.w	r2, r3, #15
 801e5a2:	498c      	ldr	r1, [pc, #560]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e5a4:	683b      	ldr	r3, [r7, #0]
 801e5a6:	4313      	orrs	r3, r2
 801e5a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801e5aa:	4b8a      	ldr	r3, [pc, #552]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	f003 030f 	and.w	r3, r3, #15
 801e5b2:	683a      	ldr	r2, [r7, #0]
 801e5b4:	429a      	cmp	r2, r3
 801e5b6:	d001      	beq.n	801e5bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801e5b8:	2301      	movs	r3, #1
 801e5ba:	e106      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	f003 0301 	and.w	r3, r3, #1
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d073      	beq.n	801e6b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	685b      	ldr	r3, [r3, #4]
 801e5cc:	2b03      	cmp	r3, #3
 801e5ce:	d129      	bne.n	801e624 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801e5d0:	4b81      	ldr	r3, [pc, #516]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d101      	bne.n	801e5e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801e5dc:	2301      	movs	r3, #1
 801e5de:	e0f4      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801e5e0:	f000 f99c 	bl	801e91c <RCC_GetSysClockFreqFromPLLSource>
 801e5e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801e5e6:	693b      	ldr	r3, [r7, #16]
 801e5e8:	4a7c      	ldr	r2, [pc, #496]	; (801e7dc <HAL_RCC_ClockConfig+0x268>)
 801e5ea:	4293      	cmp	r3, r2
 801e5ec:	d93f      	bls.n	801e66e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801e5ee:	4b7a      	ldr	r3, [pc, #488]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e5f0:	689b      	ldr	r3, [r3, #8]
 801e5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d009      	beq.n	801e60e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	681b      	ldr	r3, [r3, #0]
 801e5fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801e602:	2b00      	cmp	r3, #0
 801e604:	d033      	beq.n	801e66e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d12f      	bne.n	801e66e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801e60e:	4b72      	ldr	r3, [pc, #456]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e610:	689b      	ldr	r3, [r3, #8]
 801e612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801e616:	4a70      	ldr	r2, [pc, #448]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e61c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801e61e:	2380      	movs	r3, #128	; 0x80
 801e620:	617b      	str	r3, [r7, #20]
 801e622:	e024      	b.n	801e66e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	685b      	ldr	r3, [r3, #4]
 801e628:	2b02      	cmp	r3, #2
 801e62a:	d107      	bne.n	801e63c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801e62c:	4b6a      	ldr	r3, [pc, #424]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e634:	2b00      	cmp	r3, #0
 801e636:	d109      	bne.n	801e64c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801e638:	2301      	movs	r3, #1
 801e63a:	e0c6      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801e63c:	4b66      	ldr	r3, [pc, #408]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801e644:	2b00      	cmp	r3, #0
 801e646:	d101      	bne.n	801e64c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801e648:	2301      	movs	r3, #1
 801e64a:	e0be      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801e64c:	f000 f8ce 	bl	801e7ec <HAL_RCC_GetSysClockFreq>
 801e650:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801e652:	693b      	ldr	r3, [r7, #16]
 801e654:	4a61      	ldr	r2, [pc, #388]	; (801e7dc <HAL_RCC_ClockConfig+0x268>)
 801e656:	4293      	cmp	r3, r2
 801e658:	d909      	bls.n	801e66e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801e65a:	4b5f      	ldr	r3, [pc, #380]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e65c:	689b      	ldr	r3, [r3, #8]
 801e65e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801e662:	4a5d      	ldr	r2, [pc, #372]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e668:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801e66a:	2380      	movs	r3, #128	; 0x80
 801e66c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801e66e:	4b5a      	ldr	r3, [pc, #360]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e670:	689b      	ldr	r3, [r3, #8]
 801e672:	f023 0203 	bic.w	r2, r3, #3
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	685b      	ldr	r3, [r3, #4]
 801e67a:	4957      	ldr	r1, [pc, #348]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e67c:	4313      	orrs	r3, r2
 801e67e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e680:	f7fc f9cc 	bl	801aa1c <HAL_GetTick>
 801e684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801e686:	e00a      	b.n	801e69e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e688:	f7fc f9c8 	bl	801aa1c <HAL_GetTick>
 801e68c:	4602      	mov	r2, r0
 801e68e:	68fb      	ldr	r3, [r7, #12]
 801e690:	1ad3      	subs	r3, r2, r3
 801e692:	f241 3288 	movw	r2, #5000	; 0x1388
 801e696:	4293      	cmp	r3, r2
 801e698:	d901      	bls.n	801e69e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801e69a:	2303      	movs	r3, #3
 801e69c:	e095      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801e69e:	4b4e      	ldr	r3, [pc, #312]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6a0:	689b      	ldr	r3, [r3, #8]
 801e6a2:	f003 020c 	and.w	r2, r3, #12
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	685b      	ldr	r3, [r3, #4]
 801e6aa:	009b      	lsls	r3, r3, #2
 801e6ac:	429a      	cmp	r2, r3
 801e6ae:	d1eb      	bne.n	801e688 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	f003 0302 	and.w	r3, r3, #2
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d023      	beq.n	801e704 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	f003 0304 	and.w	r3, r3, #4
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d005      	beq.n	801e6d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801e6c8:	4b43      	ldr	r3, [pc, #268]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6ca:	689b      	ldr	r3, [r3, #8]
 801e6cc:	4a42      	ldr	r2, [pc, #264]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801e6d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	f003 0308 	and.w	r3, r3, #8
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d007      	beq.n	801e6f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801e6e0:	4b3d      	ldr	r3, [pc, #244]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6e2:	689b      	ldr	r3, [r3, #8]
 801e6e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e6e8:	4a3b      	ldr	r2, [pc, #236]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801e6ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801e6f0:	4b39      	ldr	r3, [pc, #228]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6f2:	689b      	ldr	r3, [r3, #8]
 801e6f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	689b      	ldr	r3, [r3, #8]
 801e6fc:	4936      	ldr	r1, [pc, #216]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e6fe:	4313      	orrs	r3, r2
 801e700:	608b      	str	r3, [r1, #8]
 801e702:	e008      	b.n	801e716 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801e704:	697b      	ldr	r3, [r7, #20]
 801e706:	2b80      	cmp	r3, #128	; 0x80
 801e708:	d105      	bne.n	801e716 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801e70a:	4b33      	ldr	r3, [pc, #204]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e70c:	689b      	ldr	r3, [r3, #8]
 801e70e:	4a32      	ldr	r2, [pc, #200]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801e714:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801e716:	4b2f      	ldr	r3, [pc, #188]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	f003 030f 	and.w	r3, r3, #15
 801e71e:	683a      	ldr	r2, [r7, #0]
 801e720:	429a      	cmp	r2, r3
 801e722:	d21d      	bcs.n	801e760 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801e724:	4b2b      	ldr	r3, [pc, #172]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	f023 020f 	bic.w	r2, r3, #15
 801e72c:	4929      	ldr	r1, [pc, #164]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e72e:	683b      	ldr	r3, [r7, #0]
 801e730:	4313      	orrs	r3, r2
 801e732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801e734:	f7fc f972 	bl	801aa1c <HAL_GetTick>
 801e738:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801e73a:	e00a      	b.n	801e752 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e73c:	f7fc f96e 	bl	801aa1c <HAL_GetTick>
 801e740:	4602      	mov	r2, r0
 801e742:	68fb      	ldr	r3, [r7, #12]
 801e744:	1ad3      	subs	r3, r2, r3
 801e746:	f241 3288 	movw	r2, #5000	; 0x1388
 801e74a:	4293      	cmp	r3, r2
 801e74c:	d901      	bls.n	801e752 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801e74e:	2303      	movs	r3, #3
 801e750:	e03b      	b.n	801e7ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801e752:	4b20      	ldr	r3, [pc, #128]	; (801e7d4 <HAL_RCC_ClockConfig+0x260>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	f003 030f 	and.w	r3, r3, #15
 801e75a:	683a      	ldr	r2, [r7, #0]
 801e75c:	429a      	cmp	r2, r3
 801e75e:	d1ed      	bne.n	801e73c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	f003 0304 	and.w	r3, r3, #4
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d008      	beq.n	801e77e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801e76c:	4b1a      	ldr	r3, [pc, #104]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e76e:	689b      	ldr	r3, [r3, #8]
 801e770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	68db      	ldr	r3, [r3, #12]
 801e778:	4917      	ldr	r1, [pc, #92]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e77a:	4313      	orrs	r3, r2
 801e77c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	f003 0308 	and.w	r3, r3, #8
 801e786:	2b00      	cmp	r3, #0
 801e788:	d009      	beq.n	801e79e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801e78a:	4b13      	ldr	r3, [pc, #76]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e78c:	689b      	ldr	r3, [r3, #8]
 801e78e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	691b      	ldr	r3, [r3, #16]
 801e796:	00db      	lsls	r3, r3, #3
 801e798:	490f      	ldr	r1, [pc, #60]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e79a:	4313      	orrs	r3, r2
 801e79c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801e79e:	f000 f825 	bl	801e7ec <HAL_RCC_GetSysClockFreq>
 801e7a2:	4602      	mov	r2, r0
 801e7a4:	4b0c      	ldr	r3, [pc, #48]	; (801e7d8 <HAL_RCC_ClockConfig+0x264>)
 801e7a6:	689b      	ldr	r3, [r3, #8]
 801e7a8:	091b      	lsrs	r3, r3, #4
 801e7aa:	f003 030f 	and.w	r3, r3, #15
 801e7ae:	490c      	ldr	r1, [pc, #48]	; (801e7e0 <HAL_RCC_ClockConfig+0x26c>)
 801e7b0:	5ccb      	ldrb	r3, [r1, r3]
 801e7b2:	f003 031f 	and.w	r3, r3, #31
 801e7b6:	fa22 f303 	lsr.w	r3, r2, r3
 801e7ba:	4a0a      	ldr	r2, [pc, #40]	; (801e7e4 <HAL_RCC_ClockConfig+0x270>)
 801e7bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801e7be:	4b0a      	ldr	r3, [pc, #40]	; (801e7e8 <HAL_RCC_ClockConfig+0x274>)
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f7fc f8de 	bl	801a984 <HAL_InitTick>
 801e7c8:	4603      	mov	r3, r0
}
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	3718      	adds	r7, #24
 801e7ce:	46bd      	mov	sp, r7
 801e7d0:	bd80      	pop	{r7, pc}
 801e7d2:	bf00      	nop
 801e7d4:	40022000 	.word	0x40022000
 801e7d8:	40021000 	.word	0x40021000
 801e7dc:	04c4b400 	.word	0x04c4b400
 801e7e0:	08026564 	.word	0x08026564
 801e7e4:	20000000 	.word	0x20000000
 801e7e8:	20000004 	.word	0x20000004

0801e7ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801e7ec:	b480      	push	{r7}
 801e7ee:	b087      	sub	sp, #28
 801e7f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801e7f2:	4b2c      	ldr	r3, [pc, #176]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e7f4:	689b      	ldr	r3, [r3, #8]
 801e7f6:	f003 030c 	and.w	r3, r3, #12
 801e7fa:	2b04      	cmp	r3, #4
 801e7fc:	d102      	bne.n	801e804 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801e7fe:	4b2a      	ldr	r3, [pc, #168]	; (801e8a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801e800:	613b      	str	r3, [r7, #16]
 801e802:	e047      	b.n	801e894 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801e804:	4b27      	ldr	r3, [pc, #156]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e806:	689b      	ldr	r3, [r3, #8]
 801e808:	f003 030c 	and.w	r3, r3, #12
 801e80c:	2b08      	cmp	r3, #8
 801e80e:	d102      	bne.n	801e816 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801e810:	4b25      	ldr	r3, [pc, #148]	; (801e8a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801e812:	613b      	str	r3, [r7, #16]
 801e814:	e03e      	b.n	801e894 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801e816:	4b23      	ldr	r3, [pc, #140]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e818:	689b      	ldr	r3, [r3, #8]
 801e81a:	f003 030c 	and.w	r3, r3, #12
 801e81e:	2b0c      	cmp	r3, #12
 801e820:	d136      	bne.n	801e890 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801e822:	4b20      	ldr	r3, [pc, #128]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e824:	68db      	ldr	r3, [r3, #12]
 801e826:	f003 0303 	and.w	r3, r3, #3
 801e82a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801e82c:	4b1d      	ldr	r3, [pc, #116]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e82e:	68db      	ldr	r3, [r3, #12]
 801e830:	091b      	lsrs	r3, r3, #4
 801e832:	f003 030f 	and.w	r3, r3, #15
 801e836:	3301      	adds	r3, #1
 801e838:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	2b03      	cmp	r3, #3
 801e83e:	d10c      	bne.n	801e85a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801e840:	4a19      	ldr	r2, [pc, #100]	; (801e8a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801e842:	68bb      	ldr	r3, [r7, #8]
 801e844:	fbb2 f3f3 	udiv	r3, r2, r3
 801e848:	4a16      	ldr	r2, [pc, #88]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e84a:	68d2      	ldr	r2, [r2, #12]
 801e84c:	0a12      	lsrs	r2, r2, #8
 801e84e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801e852:	fb02 f303 	mul.w	r3, r2, r3
 801e856:	617b      	str	r3, [r7, #20]
      break;
 801e858:	e00c      	b.n	801e874 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801e85a:	4a13      	ldr	r2, [pc, #76]	; (801e8a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801e85c:	68bb      	ldr	r3, [r7, #8]
 801e85e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e862:	4a10      	ldr	r2, [pc, #64]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e864:	68d2      	ldr	r2, [r2, #12]
 801e866:	0a12      	lsrs	r2, r2, #8
 801e868:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801e86c:	fb02 f303 	mul.w	r3, r2, r3
 801e870:	617b      	str	r3, [r7, #20]
      break;
 801e872:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801e874:	4b0b      	ldr	r3, [pc, #44]	; (801e8a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801e876:	68db      	ldr	r3, [r3, #12]
 801e878:	0e5b      	lsrs	r3, r3, #25
 801e87a:	f003 0303 	and.w	r3, r3, #3
 801e87e:	3301      	adds	r3, #1
 801e880:	005b      	lsls	r3, r3, #1
 801e882:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801e884:	697a      	ldr	r2, [r7, #20]
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	fbb2 f3f3 	udiv	r3, r2, r3
 801e88c:	613b      	str	r3, [r7, #16]
 801e88e:	e001      	b.n	801e894 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801e890:	2300      	movs	r3, #0
 801e892:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801e894:	693b      	ldr	r3, [r7, #16]
}
 801e896:	4618      	mov	r0, r3
 801e898:	371c      	adds	r7, #28
 801e89a:	46bd      	mov	sp, r7
 801e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a0:	4770      	bx	lr
 801e8a2:	bf00      	nop
 801e8a4:	40021000 	.word	0x40021000
 801e8a8:	00f42400 	.word	0x00f42400

0801e8ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801e8ac:	b480      	push	{r7}
 801e8ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801e8b0:	4b03      	ldr	r3, [pc, #12]	; (801e8c0 <HAL_RCC_GetHCLKFreq+0x14>)
 801e8b2:	681b      	ldr	r3, [r3, #0]
}
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8bc:	4770      	bx	lr
 801e8be:	bf00      	nop
 801e8c0:	20000000 	.word	0x20000000

0801e8c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801e8c4:	b580      	push	{r7, lr}
 801e8c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801e8c8:	f7ff fff0 	bl	801e8ac <HAL_RCC_GetHCLKFreq>
 801e8cc:	4602      	mov	r2, r0
 801e8ce:	4b06      	ldr	r3, [pc, #24]	; (801e8e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801e8d0:	689b      	ldr	r3, [r3, #8]
 801e8d2:	0a1b      	lsrs	r3, r3, #8
 801e8d4:	f003 0307 	and.w	r3, r3, #7
 801e8d8:	4904      	ldr	r1, [pc, #16]	; (801e8ec <HAL_RCC_GetPCLK1Freq+0x28>)
 801e8da:	5ccb      	ldrb	r3, [r1, r3]
 801e8dc:	f003 031f 	and.w	r3, r3, #31
 801e8e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	bd80      	pop	{r7, pc}
 801e8e8:	40021000 	.word	0x40021000
 801e8ec:	08026574 	.word	0x08026574

0801e8f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801e8f0:	b580      	push	{r7, lr}
 801e8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801e8f4:	f7ff ffda 	bl	801e8ac <HAL_RCC_GetHCLKFreq>
 801e8f8:	4602      	mov	r2, r0
 801e8fa:	4b06      	ldr	r3, [pc, #24]	; (801e914 <HAL_RCC_GetPCLK2Freq+0x24>)
 801e8fc:	689b      	ldr	r3, [r3, #8]
 801e8fe:	0adb      	lsrs	r3, r3, #11
 801e900:	f003 0307 	and.w	r3, r3, #7
 801e904:	4904      	ldr	r1, [pc, #16]	; (801e918 <HAL_RCC_GetPCLK2Freq+0x28>)
 801e906:	5ccb      	ldrb	r3, [r1, r3]
 801e908:	f003 031f 	and.w	r3, r3, #31
 801e90c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e910:	4618      	mov	r0, r3
 801e912:	bd80      	pop	{r7, pc}
 801e914:	40021000 	.word	0x40021000
 801e918:	08026574 	.word	0x08026574

0801e91c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801e91c:	b480      	push	{r7}
 801e91e:	b087      	sub	sp, #28
 801e920:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801e922:	4b1e      	ldr	r3, [pc, #120]	; (801e99c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801e924:	68db      	ldr	r3, [r3, #12]
 801e926:	f003 0303 	and.w	r3, r3, #3
 801e92a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801e92c:	4b1b      	ldr	r3, [pc, #108]	; (801e99c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801e92e:	68db      	ldr	r3, [r3, #12]
 801e930:	091b      	lsrs	r3, r3, #4
 801e932:	f003 030f 	and.w	r3, r3, #15
 801e936:	3301      	adds	r3, #1
 801e938:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801e93a:	693b      	ldr	r3, [r7, #16]
 801e93c:	2b03      	cmp	r3, #3
 801e93e:	d10c      	bne.n	801e95a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801e940:	4a17      	ldr	r2, [pc, #92]	; (801e9a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	fbb2 f3f3 	udiv	r3, r2, r3
 801e948:	4a14      	ldr	r2, [pc, #80]	; (801e99c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801e94a:	68d2      	ldr	r2, [r2, #12]
 801e94c:	0a12      	lsrs	r2, r2, #8
 801e94e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801e952:	fb02 f303 	mul.w	r3, r2, r3
 801e956:	617b      	str	r3, [r7, #20]
    break;
 801e958:	e00c      	b.n	801e974 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801e95a:	4a11      	ldr	r2, [pc, #68]	; (801e9a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e962:	4a0e      	ldr	r2, [pc, #56]	; (801e99c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801e964:	68d2      	ldr	r2, [r2, #12]
 801e966:	0a12      	lsrs	r2, r2, #8
 801e968:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801e96c:	fb02 f303 	mul.w	r3, r2, r3
 801e970:	617b      	str	r3, [r7, #20]
    break;
 801e972:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801e974:	4b09      	ldr	r3, [pc, #36]	; (801e99c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801e976:	68db      	ldr	r3, [r3, #12]
 801e978:	0e5b      	lsrs	r3, r3, #25
 801e97a:	f003 0303 	and.w	r3, r3, #3
 801e97e:	3301      	adds	r3, #1
 801e980:	005b      	lsls	r3, r3, #1
 801e982:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801e984:	697a      	ldr	r2, [r7, #20]
 801e986:	68bb      	ldr	r3, [r7, #8]
 801e988:	fbb2 f3f3 	udiv	r3, r2, r3
 801e98c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801e98e:	687b      	ldr	r3, [r7, #4]
}
 801e990:	4618      	mov	r0, r3
 801e992:	371c      	adds	r7, #28
 801e994:	46bd      	mov	sp, r7
 801e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99a:	4770      	bx	lr
 801e99c:	40021000 	.word	0x40021000
 801e9a0:	00f42400 	.word	0x00f42400

0801e9a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b086      	sub	sp, #24
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801e9ac:	2300      	movs	r3, #0
 801e9ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	f000 8098 	beq.w	801eaf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801e9c2:	2300      	movs	r3, #0
 801e9c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801e9c6:	4b43      	ldr	r3, [pc, #268]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801e9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e9ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d10d      	bne.n	801e9ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801e9d2:	4b40      	ldr	r3, [pc, #256]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801e9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e9d6:	4a3f      	ldr	r2, [pc, #252]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801e9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e9dc:	6593      	str	r3, [r2, #88]	; 0x58
 801e9de:	4b3d      	ldr	r3, [pc, #244]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801e9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e9e6:	60bb      	str	r3, [r7, #8]
 801e9e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801e9ea:	2301      	movs	r3, #1
 801e9ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e9ee:	4b3a      	ldr	r3, [pc, #232]	; (801ead8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	4a39      	ldr	r2, [pc, #228]	; (801ead8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801e9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e9f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e9fa:	f7fc f80f 	bl	801aa1c <HAL_GetTick>
 801e9fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ea00:	e009      	b.n	801ea16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ea02:	f7fc f80b 	bl	801aa1c <HAL_GetTick>
 801ea06:	4602      	mov	r2, r0
 801ea08:	68fb      	ldr	r3, [r7, #12]
 801ea0a:	1ad3      	subs	r3, r2, r3
 801ea0c:	2b02      	cmp	r3, #2
 801ea0e:	d902      	bls.n	801ea16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801ea10:	2303      	movs	r3, #3
 801ea12:	74fb      	strb	r3, [r7, #19]
        break;
 801ea14:	e005      	b.n	801ea22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ea16:	4b30      	ldr	r3, [pc, #192]	; (801ead8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d0ef      	beq.n	801ea02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801ea22:	7cfb      	ldrb	r3, [r7, #19]
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d159      	bne.n	801eadc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801ea28:	4b2a      	ldr	r3, [pc, #168]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ea32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801ea34:	697b      	ldr	r3, [r7, #20]
 801ea36:	2b00      	cmp	r3, #0
 801ea38:	d01e      	beq.n	801ea78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ea3e:	697a      	ldr	r2, [r7, #20]
 801ea40:	429a      	cmp	r2, r3
 801ea42:	d019      	beq.n	801ea78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801ea44:	4b23      	ldr	r3, [pc, #140]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ea4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ea50:	4b20      	ldr	r3, [pc, #128]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea56:	4a1f      	ldr	r2, [pc, #124]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ea5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ea60:	4b1c      	ldr	r3, [pc, #112]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ea66:	4a1b      	ldr	r2, [pc, #108]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ea6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801ea70:	4a18      	ldr	r2, [pc, #96]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ea72:	697b      	ldr	r3, [r7, #20]
 801ea74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	f003 0301 	and.w	r3, r3, #1
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d016      	beq.n	801eab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ea82:	f7fb ffcb 	bl	801aa1c <HAL_GetTick>
 801ea86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ea88:	e00b      	b.n	801eaa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ea8a:	f7fb ffc7 	bl	801aa1c <HAL_GetTick>
 801ea8e:	4602      	mov	r2, r0
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	1ad3      	subs	r3, r2, r3
 801ea94:	f241 3288 	movw	r2, #5000	; 0x1388
 801ea98:	4293      	cmp	r3, r2
 801ea9a:	d902      	bls.n	801eaa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801ea9c:	2303      	movs	r3, #3
 801ea9e:	74fb      	strb	r3, [r7, #19]
            break;
 801eaa0:	e006      	b.n	801eab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801eaa2:	4b0c      	ldr	r3, [pc, #48]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801eaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801eaa8:	f003 0302 	and.w	r3, r3, #2
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d0ec      	beq.n	801ea8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801eab0:	7cfb      	ldrb	r3, [r7, #19]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d10b      	bne.n	801eace <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801eab6:	4b07      	ldr	r3, [pc, #28]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801eab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801eabc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eac4:	4903      	ldr	r1, [pc, #12]	; (801ead4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801eac6:	4313      	orrs	r3, r2
 801eac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801eacc:	e008      	b.n	801eae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801eace:	7cfb      	ldrb	r3, [r7, #19]
 801ead0:	74bb      	strb	r3, [r7, #18]
 801ead2:	e005      	b.n	801eae0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801ead4:	40021000 	.word	0x40021000
 801ead8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eadc:	7cfb      	ldrb	r3, [r7, #19]
 801eade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801eae0:	7c7b      	ldrb	r3, [r7, #17]
 801eae2:	2b01      	cmp	r3, #1
 801eae4:	d105      	bne.n	801eaf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801eae6:	4ba7      	ldr	r3, [pc, #668]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eaea:	4aa6      	ldr	r2, [pc, #664]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eaec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801eaf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	f003 0301 	and.w	r3, r3, #1
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d00a      	beq.n	801eb14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801eafe:	4ba1      	ldr	r3, [pc, #644]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eb04:	f023 0203 	bic.w	r2, r3, #3
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	685b      	ldr	r3, [r3, #4]
 801eb0c:	499d      	ldr	r1, [pc, #628]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb0e:	4313      	orrs	r3, r2
 801eb10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	f003 0302 	and.w	r3, r3, #2
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d00a      	beq.n	801eb36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801eb20:	4b98      	ldr	r3, [pc, #608]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eb26:	f023 020c 	bic.w	r2, r3, #12
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	689b      	ldr	r3, [r3, #8]
 801eb2e:	4995      	ldr	r1, [pc, #596]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb30:	4313      	orrs	r3, r2
 801eb32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	f003 0304 	and.w	r3, r3, #4
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d00a      	beq.n	801eb58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801eb42:	4b90      	ldr	r3, [pc, #576]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eb48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	68db      	ldr	r3, [r3, #12]
 801eb50:	498c      	ldr	r1, [pc, #560]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb52:	4313      	orrs	r3, r2
 801eb54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	f003 0308 	and.w	r3, r3, #8
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d00a      	beq.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801eb64:	4b87      	ldr	r3, [pc, #540]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eb6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	691b      	ldr	r3, [r3, #16]
 801eb72:	4984      	ldr	r1, [pc, #528]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb74:	4313      	orrs	r3, r2
 801eb76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	f003 0310 	and.w	r3, r3, #16
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d00a      	beq.n	801eb9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801eb86:	4b7f      	ldr	r3, [pc, #508]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801eb8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	695b      	ldr	r3, [r3, #20]
 801eb94:	497b      	ldr	r1, [pc, #492]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801eb96:	4313      	orrs	r3, r2
 801eb98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	f003 0320 	and.w	r3, r3, #32
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d00a      	beq.n	801ebbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801eba8:	4b76      	ldr	r3, [pc, #472]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ebae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	699b      	ldr	r3, [r3, #24]
 801ebb6:	4973      	ldr	r1, [pc, #460]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebb8:	4313      	orrs	r3, r2
 801ebba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d00a      	beq.n	801ebe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801ebca:	4b6e      	ldr	r3, [pc, #440]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ebd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	69db      	ldr	r3, [r3, #28]
 801ebd8:	496a      	ldr	r1, [pc, #424]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebda:	4313      	orrs	r3, r2
 801ebdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d00a      	beq.n	801ec02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801ebec:	4b65      	ldr	r3, [pc, #404]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ebf2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	6a1b      	ldr	r3, [r3, #32]
 801ebfa:	4962      	ldr	r1, [pc, #392]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ebfc:	4313      	orrs	r3, r2
 801ebfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d00a      	beq.n	801ec24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ec0e:	4b5d      	ldr	r3, [pc, #372]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ec14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec1c:	4959      	ldr	r1, [pc, #356]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec1e:	4313      	orrs	r3, r2
 801ec20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d00a      	beq.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ec30:	4b54      	ldr	r3, [pc, #336]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ec36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec3e:	4951      	ldr	r1, [pc, #324]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec40:	4313      	orrs	r3, r2
 801ec42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d015      	beq.n	801ec7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ec52:	4b4c      	ldr	r3, [pc, #304]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ec58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec60:	4948      	ldr	r1, [pc, #288]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec62:	4313      	orrs	r3, r2
 801ec64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ec70:	d105      	bne.n	801ec7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ec72:	4b44      	ldr	r3, [pc, #272]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec74:	68db      	ldr	r3, [r3, #12]
 801ec76:	4a43      	ldr	r2, [pc, #268]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ec7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d015      	beq.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801ec8a:	4b3e      	ldr	r3, [pc, #248]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ec90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec98:	493a      	ldr	r1, [pc, #232]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ec9a:	4313      	orrs	r3, r2
 801ec9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801eca8:	d105      	bne.n	801ecb6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ecaa:	4b36      	ldr	r3, [pc, #216]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ecac:	68db      	ldr	r3, [r3, #12]
 801ecae:	4a35      	ldr	r2, [pc, #212]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ecb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ecb4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d015      	beq.n	801ecee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801ecc2:	4b30      	ldr	r3, [pc, #192]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ecc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ecc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ecd0:	492c      	ldr	r1, [pc, #176]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ecd2:	4313      	orrs	r3, r2
 801ecd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ecdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ece0:	d105      	bne.n	801ecee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ece2:	4b28      	ldr	r3, [pc, #160]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ece4:	68db      	ldr	r3, [r3, #12]
 801ece6:	4a27      	ldr	r2, [pc, #156]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ece8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ecec:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d015      	beq.n	801ed26 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ecfa:	4b22      	ldr	r3, [pc, #136]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ecfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ed00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801ed04:	687b      	ldr	r3, [r7, #4]
 801ed06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed08:	491e      	ldr	r1, [pc, #120]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed0a:	4313      	orrs	r3, r2
 801ed0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ed18:	d105      	bne.n	801ed26 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ed1a:	4b1a      	ldr	r3, [pc, #104]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed1c:	68db      	ldr	r3, [r3, #12]
 801ed1e:	4a19      	ldr	r2, [pc, #100]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ed24:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d015      	beq.n	801ed5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ed32:	4b14      	ldr	r3, [pc, #80]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ed38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed40:	4910      	ldr	r1, [pc, #64]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed42:	4313      	orrs	r3, r2
 801ed44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ed50:	d105      	bne.n	801ed5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ed52:	4b0c      	ldr	r3, [pc, #48]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed54:	68db      	ldr	r3, [r3, #12]
 801ed56:	4a0b      	ldr	r2, [pc, #44]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ed5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d018      	beq.n	801ed9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801ed6a:	4b06      	ldr	r3, [pc, #24]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ed70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed78:	4902      	ldr	r1, [pc, #8]	; (801ed84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ed7a:	4313      	orrs	r3, r2
 801ed7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	e001      	b.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801ed84:	40021000 	.word	0x40021000
 801ed88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ed8e:	d105      	bne.n	801ed9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801ed90:	4b21      	ldr	r3, [pc, #132]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ed92:	68db      	ldr	r3, [r3, #12]
 801ed94:	4a20      	ldr	r2, [pc, #128]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ed96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ed9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d015      	beq.n	801edd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801eda8:	4b1b      	ldr	r3, [pc, #108]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801edaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801edae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801edb6:	4918      	ldr	r1, [pc, #96]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801edb8:	4313      	orrs	r3, r2
 801edba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801edc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801edc6:	d105      	bne.n	801edd4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801edc8:	4b13      	ldr	r3, [pc, #76]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801edca:	68db      	ldr	r3, [r3, #12]
 801edcc:	4a12      	ldr	r2, [pc, #72]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801edce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801edd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d015      	beq.n	801ee0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ede0:	4b0d      	ldr	r3, [pc, #52]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ede2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ede6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801edee:	490a      	ldr	r1, [pc, #40]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801edf0:	4313      	orrs	r3, r2
 801edf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801edfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801edfe:	d105      	bne.n	801ee0c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ee00:	4b05      	ldr	r3, [pc, #20]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ee02:	68db      	ldr	r3, [r3, #12]
 801ee04:	4a04      	ldr	r2, [pc, #16]	; (801ee18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ee06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ee0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801ee0c:	7cbb      	ldrb	r3, [r7, #18]
}
 801ee0e:	4618      	mov	r0, r3
 801ee10:	3718      	adds	r7, #24
 801ee12:	46bd      	mov	sp, r7
 801ee14:	bd80      	pop	{r7, pc}
 801ee16:	bf00      	nop
 801ee18:	40021000 	.word	0x40021000

0801ee1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b084      	sub	sp, #16
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d101      	bne.n	801ee2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801ee2a:	2301      	movs	r3, #1
 801ee2c:	e09d      	b.n	801ef6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	d108      	bne.n	801ee48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	685b      	ldr	r3, [r3, #4]
 801ee3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ee3e:	d009      	beq.n	801ee54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	2200      	movs	r2, #0
 801ee44:	61da      	str	r2, [r3, #28]
 801ee46:	e005      	b.n	801ee54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	2200      	movs	r2, #0
 801ee52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	2200      	movs	r2, #0
 801ee58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ee60:	b2db      	uxtb	r3, r3
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d106      	bne.n	801ee74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	2200      	movs	r2, #0
 801ee6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801ee6e:	6878      	ldr	r0, [r7, #4]
 801ee70:	f7fa f8e0 	bl	8019034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	2202      	movs	r2, #2
 801ee78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	681b      	ldr	r3, [r3, #0]
 801ee80:	681a      	ldr	r2, [r3, #0]
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ee8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	68db      	ldr	r3, [r3, #12]
 801ee90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ee94:	d902      	bls.n	801ee9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801ee96:	2300      	movs	r3, #0
 801ee98:	60fb      	str	r3, [r7, #12]
 801ee9a:	e002      	b.n	801eea2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801ee9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801eea0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	68db      	ldr	r3, [r3, #12]
 801eea6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801eeaa:	d007      	beq.n	801eebc <HAL_SPI_Init+0xa0>
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	68db      	ldr	r3, [r3, #12]
 801eeb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801eeb4:	d002      	beq.n	801eebc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	2200      	movs	r2, #0
 801eeba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	685b      	ldr	r3, [r3, #4]
 801eec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	689b      	ldr	r3, [r3, #8]
 801eec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801eecc:	431a      	orrs	r2, r3
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	691b      	ldr	r3, [r3, #16]
 801eed2:	f003 0302 	and.w	r3, r3, #2
 801eed6:	431a      	orrs	r2, r3
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	695b      	ldr	r3, [r3, #20]
 801eedc:	f003 0301 	and.w	r3, r3, #1
 801eee0:	431a      	orrs	r2, r3
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	699b      	ldr	r3, [r3, #24]
 801eee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801eeea:	431a      	orrs	r2, r3
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	69db      	ldr	r3, [r3, #28]
 801eef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801eef4:	431a      	orrs	r2, r3
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	6a1b      	ldr	r3, [r3, #32]
 801eefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eefe:	ea42 0103 	orr.w	r1, r2, r3
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	430a      	orrs	r2, r1
 801ef10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	699b      	ldr	r3, [r3, #24]
 801ef16:	0c1b      	lsrs	r3, r3, #16
 801ef18:	f003 0204 	and.w	r2, r3, #4
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef20:	f003 0310 	and.w	r3, r3, #16
 801ef24:	431a      	orrs	r2, r3
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef2a:	f003 0308 	and.w	r3, r3, #8
 801ef2e:	431a      	orrs	r2, r3
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	68db      	ldr	r3, [r3, #12]
 801ef34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ef38:	ea42 0103 	orr.w	r1, r2, r3
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	430a      	orrs	r2, r1
 801ef48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	69da      	ldr	r2, [r3, #28]
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ef58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	2200      	movs	r2, #0
 801ef5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	2201      	movs	r2, #1
 801ef64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801ef68:	2300      	movs	r3, #0
}
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	3710      	adds	r7, #16
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	bd80      	pop	{r7, pc}

0801ef72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ef72:	b580      	push	{r7, lr}
 801ef74:	b088      	sub	sp, #32
 801ef76:	af00      	add	r7, sp, #0
 801ef78:	60f8      	str	r0, [r7, #12]
 801ef7a:	60b9      	str	r1, [r7, #8]
 801ef7c:	603b      	str	r3, [r7, #0]
 801ef7e:	4613      	mov	r3, r2
 801ef80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801ef82:	2300      	movs	r3, #0
 801ef84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ef8c:	2b01      	cmp	r3, #1
 801ef8e:	d101      	bne.n	801ef94 <HAL_SPI_Transmit+0x22>
 801ef90:	2302      	movs	r3, #2
 801ef92:	e158      	b.n	801f246 <HAL_SPI_Transmit+0x2d4>
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	2201      	movs	r2, #1
 801ef98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ef9c:	f7fb fd3e 	bl	801aa1c <HAL_GetTick>
 801efa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801efa2:	88fb      	ldrh	r3, [r7, #6]
 801efa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801efa6:	68fb      	ldr	r3, [r7, #12]
 801efa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801efac:	b2db      	uxtb	r3, r3
 801efae:	2b01      	cmp	r3, #1
 801efb0:	d002      	beq.n	801efb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801efb2:	2302      	movs	r3, #2
 801efb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801efb6:	e13d      	b.n	801f234 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801efb8:	68bb      	ldr	r3, [r7, #8]
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d002      	beq.n	801efc4 <HAL_SPI_Transmit+0x52>
 801efbe:	88fb      	ldrh	r3, [r7, #6]
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d102      	bne.n	801efca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801efc4:	2301      	movs	r3, #1
 801efc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801efc8:	e134      	b.n	801f234 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	2203      	movs	r2, #3
 801efce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801efd2:	68fb      	ldr	r3, [r7, #12]
 801efd4:	2200      	movs	r2, #0
 801efd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	68ba      	ldr	r2, [r7, #8]
 801efdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801efde:	68fb      	ldr	r3, [r7, #12]
 801efe0:	88fa      	ldrh	r2, [r7, #6]
 801efe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	88fa      	ldrh	r2, [r7, #6]
 801efe8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801efea:	68fb      	ldr	r3, [r7, #12]
 801efec:	2200      	movs	r2, #0
 801efee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	2200      	movs	r2, #0
 801eff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801eff8:	68fb      	ldr	r3, [r7, #12]
 801effa:	2200      	movs	r2, #0
 801effc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	2200      	movs	r2, #0
 801f004:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801f006:	68fb      	ldr	r3, [r7, #12]
 801f008:	2200      	movs	r2, #0
 801f00a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	689b      	ldr	r3, [r3, #8]
 801f010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f014:	d10f      	bne.n	801f036 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801f016:	68fb      	ldr	r3, [r7, #12]
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	681a      	ldr	r2, [r3, #0]
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	681a      	ldr	r2, [r3, #0]
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f040:	2b40      	cmp	r3, #64	; 0x40
 801f042:	d007      	beq.n	801f054 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	681a      	ldr	r2, [r3, #0]
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	68db      	ldr	r3, [r3, #12]
 801f058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801f05c:	d94b      	bls.n	801f0f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	685b      	ldr	r3, [r3, #4]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d002      	beq.n	801f06c <HAL_SPI_Transmit+0xfa>
 801f066:	8afb      	ldrh	r3, [r7, #22]
 801f068:	2b01      	cmp	r3, #1
 801f06a:	d13e      	bne.n	801f0ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f070:	881a      	ldrh	r2, [r3, #0]
 801f072:	68fb      	ldr	r3, [r7, #12]
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f07c:	1c9a      	adds	r2, r3, #2
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801f082:	68fb      	ldr	r3, [r7, #12]
 801f084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f086:	b29b      	uxth	r3, r3
 801f088:	3b01      	subs	r3, #1
 801f08a:	b29a      	uxth	r2, r3
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801f090:	e02b      	b.n	801f0ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801f092:	68fb      	ldr	r3, [r7, #12]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	689b      	ldr	r3, [r3, #8]
 801f098:	f003 0302 	and.w	r3, r3, #2
 801f09c:	2b02      	cmp	r3, #2
 801f09e:	d112      	bne.n	801f0c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f0a4:	881a      	ldrh	r2, [r3, #0]
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f0b0:	1c9a      	adds	r2, r3, #2
 801f0b2:	68fb      	ldr	r3, [r7, #12]
 801f0b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801f0b6:	68fb      	ldr	r3, [r7, #12]
 801f0b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f0ba:	b29b      	uxth	r3, r3
 801f0bc:	3b01      	subs	r3, #1
 801f0be:	b29a      	uxth	r2, r3
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f0c4:	e011      	b.n	801f0ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801f0c6:	f7fb fca9 	bl	801aa1c <HAL_GetTick>
 801f0ca:	4602      	mov	r2, r0
 801f0cc:	69bb      	ldr	r3, [r7, #24]
 801f0ce:	1ad3      	subs	r3, r2, r3
 801f0d0:	683a      	ldr	r2, [r7, #0]
 801f0d2:	429a      	cmp	r2, r3
 801f0d4:	d803      	bhi.n	801f0de <HAL_SPI_Transmit+0x16c>
 801f0d6:	683b      	ldr	r3, [r7, #0]
 801f0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0dc:	d102      	bne.n	801f0e4 <HAL_SPI_Transmit+0x172>
 801f0de:	683b      	ldr	r3, [r7, #0]
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d102      	bne.n	801f0ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801f0e4:	2303      	movs	r3, #3
 801f0e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 801f0e8:	e0a4      	b.n	801f234 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f0ee:	b29b      	uxth	r3, r3
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d1ce      	bne.n	801f092 <HAL_SPI_Transmit+0x120>
 801f0f4:	e07c      	b.n	801f1f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	685b      	ldr	r3, [r3, #4]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d002      	beq.n	801f104 <HAL_SPI_Transmit+0x192>
 801f0fe:	8afb      	ldrh	r3, [r7, #22]
 801f100:	2b01      	cmp	r3, #1
 801f102:	d170      	bne.n	801f1e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801f104:	68fb      	ldr	r3, [r7, #12]
 801f106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f108:	b29b      	uxth	r3, r3
 801f10a:	2b01      	cmp	r3, #1
 801f10c:	d912      	bls.n	801f134 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f112:	881a      	ldrh	r2, [r3, #0]
 801f114:	68fb      	ldr	r3, [r7, #12]
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801f11a:	68fb      	ldr	r3, [r7, #12]
 801f11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f11e:	1c9a      	adds	r2, r3, #2
 801f120:	68fb      	ldr	r3, [r7, #12]
 801f122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801f124:	68fb      	ldr	r3, [r7, #12]
 801f126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f128:	b29b      	uxth	r3, r3
 801f12a:	3b02      	subs	r3, #2
 801f12c:	b29a      	uxth	r2, r3
 801f12e:	68fb      	ldr	r3, [r7, #12]
 801f130:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f132:	e058      	b.n	801f1e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	330c      	adds	r3, #12
 801f13e:	7812      	ldrb	r2, [r2, #0]
 801f140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f146:	1c5a      	adds	r2, r3, #1
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f150:	b29b      	uxth	r3, r3
 801f152:	3b01      	subs	r3, #1
 801f154:	b29a      	uxth	r2, r3
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801f15a:	e044      	b.n	801f1e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	689b      	ldr	r3, [r3, #8]
 801f162:	f003 0302 	and.w	r3, r3, #2
 801f166:	2b02      	cmp	r3, #2
 801f168:	d12b      	bne.n	801f1c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f16e:	b29b      	uxth	r3, r3
 801f170:	2b01      	cmp	r3, #1
 801f172:	d912      	bls.n	801f19a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f178:	881a      	ldrh	r2, [r3, #0]
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801f180:	68fb      	ldr	r3, [r7, #12]
 801f182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f184:	1c9a      	adds	r2, r3, #2
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f18e:	b29b      	uxth	r3, r3
 801f190:	3b02      	subs	r3, #2
 801f192:	b29a      	uxth	r2, r3
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f198:	e025      	b.n	801f1e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	681b      	ldr	r3, [r3, #0]
 801f1a2:	330c      	adds	r3, #12
 801f1a4:	7812      	ldrb	r2, [r2, #0]
 801f1a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f1ac:	1c5a      	adds	r2, r3, #1
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f1b6:	b29b      	uxth	r3, r3
 801f1b8:	3b01      	subs	r3, #1
 801f1ba:	b29a      	uxth	r2, r3
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f1c0:	e011      	b.n	801f1e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801f1c2:	f7fb fc2b 	bl	801aa1c <HAL_GetTick>
 801f1c6:	4602      	mov	r2, r0
 801f1c8:	69bb      	ldr	r3, [r7, #24]
 801f1ca:	1ad3      	subs	r3, r2, r3
 801f1cc:	683a      	ldr	r2, [r7, #0]
 801f1ce:	429a      	cmp	r2, r3
 801f1d0:	d803      	bhi.n	801f1da <HAL_SPI_Transmit+0x268>
 801f1d2:	683b      	ldr	r3, [r7, #0]
 801f1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1d8:	d102      	bne.n	801f1e0 <HAL_SPI_Transmit+0x26e>
 801f1da:	683b      	ldr	r3, [r7, #0]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d102      	bne.n	801f1e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801f1e0:	2303      	movs	r3, #3
 801f1e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801f1e4:	e026      	b.n	801f234 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f1ea:	b29b      	uxth	r3, r3
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d1b5      	bne.n	801f15c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801f1f0:	69ba      	ldr	r2, [r7, #24]
 801f1f2:	6839      	ldr	r1, [r7, #0]
 801f1f4:	68f8      	ldr	r0, [r7, #12]
 801f1f6:	f000 fce3 	bl	801fbc0 <SPI_EndRxTxTransaction>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d002      	beq.n	801f206 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801f200:	68fb      	ldr	r3, [r7, #12]
 801f202:	2220      	movs	r2, #32
 801f204:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	689b      	ldr	r3, [r3, #8]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d10a      	bne.n	801f224 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f20e:	2300      	movs	r3, #0
 801f210:	613b      	str	r3, [r7, #16]
 801f212:	68fb      	ldr	r3, [r7, #12]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	68db      	ldr	r3, [r3, #12]
 801f218:	613b      	str	r3, [r7, #16]
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	689b      	ldr	r3, [r3, #8]
 801f220:	613b      	str	r3, [r7, #16]
 801f222:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d002      	beq.n	801f232 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801f22c:	2301      	movs	r3, #1
 801f22e:	77fb      	strb	r3, [r7, #31]
 801f230:	e000      	b.n	801f234 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801f232:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	2201      	movs	r2, #1
 801f238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	2200      	movs	r2, #0
 801f240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801f244:	7ffb      	ldrb	r3, [r7, #31]
}
 801f246:	4618      	mov	r0, r3
 801f248:	3720      	adds	r7, #32
 801f24a:	46bd      	mov	sp, r7
 801f24c:	bd80      	pop	{r7, pc}

0801f24e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f24e:	b580      	push	{r7, lr}
 801f250:	b088      	sub	sp, #32
 801f252:	af02      	add	r7, sp, #8
 801f254:	60f8      	str	r0, [r7, #12]
 801f256:	60b9      	str	r1, [r7, #8]
 801f258:	603b      	str	r3, [r7, #0]
 801f25a:	4613      	mov	r3, r2
 801f25c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801f25e:	2300      	movs	r3, #0
 801f260:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	685b      	ldr	r3, [r3, #4]
 801f266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f26a:	d112      	bne.n	801f292 <HAL_SPI_Receive+0x44>
 801f26c:	68fb      	ldr	r3, [r7, #12]
 801f26e:	689b      	ldr	r3, [r3, #8]
 801f270:	2b00      	cmp	r3, #0
 801f272:	d10e      	bne.n	801f292 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801f274:	68fb      	ldr	r3, [r7, #12]
 801f276:	2204      	movs	r2, #4
 801f278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801f27c:	88fa      	ldrh	r2, [r7, #6]
 801f27e:	683b      	ldr	r3, [r7, #0]
 801f280:	9300      	str	r3, [sp, #0]
 801f282:	4613      	mov	r3, r2
 801f284:	68ba      	ldr	r2, [r7, #8]
 801f286:	68b9      	ldr	r1, [r7, #8]
 801f288:	68f8      	ldr	r0, [r7, #12]
 801f28a:	f000 f910 	bl	801f4ae <HAL_SPI_TransmitReceive>
 801f28e:	4603      	mov	r3, r0
 801f290:	e109      	b.n	801f4a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801f292:	68fb      	ldr	r3, [r7, #12]
 801f294:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801f298:	2b01      	cmp	r3, #1
 801f29a:	d101      	bne.n	801f2a0 <HAL_SPI_Receive+0x52>
 801f29c:	2302      	movs	r3, #2
 801f29e:	e102      	b.n	801f4a6 <HAL_SPI_Receive+0x258>
 801f2a0:	68fb      	ldr	r3, [r7, #12]
 801f2a2:	2201      	movs	r2, #1
 801f2a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801f2a8:	f7fb fbb8 	bl	801aa1c <HAL_GetTick>
 801f2ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801f2b4:	b2db      	uxtb	r3, r3
 801f2b6:	2b01      	cmp	r3, #1
 801f2b8:	d002      	beq.n	801f2c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801f2ba:	2302      	movs	r3, #2
 801f2bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 801f2be:	e0e9      	b.n	801f494 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801f2c0:	68bb      	ldr	r3, [r7, #8]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d002      	beq.n	801f2cc <HAL_SPI_Receive+0x7e>
 801f2c6:	88fb      	ldrh	r3, [r7, #6]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d102      	bne.n	801f2d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801f2cc:	2301      	movs	r3, #1
 801f2ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 801f2d0:	e0e0      	b.n	801f494 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	2204      	movs	r2, #4
 801f2d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801f2da:	68fb      	ldr	r3, [r7, #12]
 801f2dc:	2200      	movs	r2, #0
 801f2de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	68ba      	ldr	r2, [r7, #8]
 801f2e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	88fa      	ldrh	r2, [r7, #6]
 801f2ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	88fa      	ldrh	r2, [r7, #6]
 801f2f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	2200      	movs	r2, #0
 801f300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	2200      	movs	r2, #0
 801f306:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	2200      	movs	r2, #0
 801f30c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	2200      	movs	r2, #0
 801f312:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	68db      	ldr	r3, [r3, #12]
 801f318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801f31c:	d908      	bls.n	801f330 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	685a      	ldr	r2, [r3, #4]
 801f324:	68fb      	ldr	r3, [r7, #12]
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801f32c:	605a      	str	r2, [r3, #4]
 801f32e:	e007      	b.n	801f340 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	685a      	ldr	r2, [r3, #4]
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f33e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	689b      	ldr	r3, [r3, #8]
 801f344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f348:	d10f      	bne.n	801f36a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	681a      	ldr	r2, [r3, #0]
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f358:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	681b      	ldr	r3, [r3, #0]
 801f35e:	681a      	ldr	r2, [r3, #0]
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801f368:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f374:	2b40      	cmp	r3, #64	; 0x40
 801f376:	d007      	beq.n	801f388 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	681a      	ldr	r2, [r3, #0]
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f386:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	68db      	ldr	r3, [r3, #12]
 801f38c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801f390:	d867      	bhi.n	801f462 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801f392:	e030      	b.n	801f3f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	689b      	ldr	r3, [r3, #8]
 801f39a:	f003 0301 	and.w	r3, r3, #1
 801f39e:	2b01      	cmp	r3, #1
 801f3a0:	d117      	bne.n	801f3d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	f103 020c 	add.w	r2, r3, #12
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ae:	7812      	ldrb	r2, [r2, #0]
 801f3b0:	b2d2      	uxtb	r2, r2
 801f3b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3b8:	1c5a      	adds	r2, r3, #1
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	3b01      	subs	r3, #1
 801f3c8:	b29a      	uxth	r2, r3
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801f3d0:	e011      	b.n	801f3f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801f3d2:	f7fb fb23 	bl	801aa1c <HAL_GetTick>
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	693b      	ldr	r3, [r7, #16]
 801f3da:	1ad3      	subs	r3, r2, r3
 801f3dc:	683a      	ldr	r2, [r7, #0]
 801f3de:	429a      	cmp	r2, r3
 801f3e0:	d803      	bhi.n	801f3ea <HAL_SPI_Receive+0x19c>
 801f3e2:	683b      	ldr	r3, [r7, #0]
 801f3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3e8:	d102      	bne.n	801f3f0 <HAL_SPI_Receive+0x1a2>
 801f3ea:	683b      	ldr	r3, [r7, #0]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d102      	bne.n	801f3f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801f3f0:	2303      	movs	r3, #3
 801f3f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 801f3f4:	e04e      	b.n	801f494 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f3fc:	b29b      	uxth	r3, r3
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d1c8      	bne.n	801f394 <HAL_SPI_Receive+0x146>
 801f402:	e034      	b.n	801f46e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801f404:	68fb      	ldr	r3, [r7, #12]
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	689b      	ldr	r3, [r3, #8]
 801f40a:	f003 0301 	and.w	r3, r3, #1
 801f40e:	2b01      	cmp	r3, #1
 801f410:	d115      	bne.n	801f43e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	68da      	ldr	r2, [r3, #12]
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f41c:	b292      	uxth	r2, r2
 801f41e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f424:	1c9a      	adds	r2, r3, #2
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f430:	b29b      	uxth	r3, r3
 801f432:	3b01      	subs	r3, #1
 801f434:	b29a      	uxth	r2, r3
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801f43c:	e011      	b.n	801f462 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801f43e:	f7fb faed 	bl	801aa1c <HAL_GetTick>
 801f442:	4602      	mov	r2, r0
 801f444:	693b      	ldr	r3, [r7, #16]
 801f446:	1ad3      	subs	r3, r2, r3
 801f448:	683a      	ldr	r2, [r7, #0]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d803      	bhi.n	801f456 <HAL_SPI_Receive+0x208>
 801f44e:	683b      	ldr	r3, [r7, #0]
 801f450:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f454:	d102      	bne.n	801f45c <HAL_SPI_Receive+0x20e>
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d102      	bne.n	801f462 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801f45c:	2303      	movs	r3, #3
 801f45e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801f460:	e018      	b.n	801f494 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801f462:	68fb      	ldr	r3, [r7, #12]
 801f464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f468:	b29b      	uxth	r3, r3
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	d1ca      	bne.n	801f404 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801f46e:	693a      	ldr	r2, [r7, #16]
 801f470:	6839      	ldr	r1, [r7, #0]
 801f472:	68f8      	ldr	r0, [r7, #12]
 801f474:	f000 fb4c 	bl	801fb10 <SPI_EndRxTransaction>
 801f478:	4603      	mov	r3, r0
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d002      	beq.n	801f484 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	2220      	movs	r2, #32
 801f482:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f488:	2b00      	cmp	r3, #0
 801f48a:	d002      	beq.n	801f492 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801f48c:	2301      	movs	r3, #1
 801f48e:	75fb      	strb	r3, [r7, #23]
 801f490:	e000      	b.n	801f494 <HAL_SPI_Receive+0x246>
  }

error :
 801f492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801f494:	68fb      	ldr	r3, [r7, #12]
 801f496:	2201      	movs	r2, #1
 801f498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	2200      	movs	r2, #0
 801f4a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801f4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 801f4a6:	4618      	mov	r0, r3
 801f4a8:	3718      	adds	r7, #24
 801f4aa:	46bd      	mov	sp, r7
 801f4ac:	bd80      	pop	{r7, pc}

0801f4ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801f4ae:	b580      	push	{r7, lr}
 801f4b0:	b08a      	sub	sp, #40	; 0x28
 801f4b2:	af00      	add	r7, sp, #0
 801f4b4:	60f8      	str	r0, [r7, #12]
 801f4b6:	60b9      	str	r1, [r7, #8]
 801f4b8:	607a      	str	r2, [r7, #4]
 801f4ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801f4bc:	2301      	movs	r3, #1
 801f4be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801f4cc:	2b01      	cmp	r3, #1
 801f4ce:	d101      	bne.n	801f4d4 <HAL_SPI_TransmitReceive+0x26>
 801f4d0:	2302      	movs	r3, #2
 801f4d2:	e1fb      	b.n	801f8cc <HAL_SPI_TransmitReceive+0x41e>
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	2201      	movs	r2, #1
 801f4d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801f4dc:	f7fb fa9e 	bl	801aa1c <HAL_GetTick>
 801f4e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801f4e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	685b      	ldr	r3, [r3, #4]
 801f4ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801f4f0:	887b      	ldrh	r3, [r7, #2]
 801f4f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801f4f4:	887b      	ldrh	r3, [r7, #2]
 801f4f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801f4f8:	7efb      	ldrb	r3, [r7, #27]
 801f4fa:	2b01      	cmp	r3, #1
 801f4fc:	d00e      	beq.n	801f51c <HAL_SPI_TransmitReceive+0x6e>
 801f4fe:	697b      	ldr	r3, [r7, #20]
 801f500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f504:	d106      	bne.n	801f514 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	689b      	ldr	r3, [r3, #8]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d102      	bne.n	801f514 <HAL_SPI_TransmitReceive+0x66>
 801f50e:	7efb      	ldrb	r3, [r7, #27]
 801f510:	2b04      	cmp	r3, #4
 801f512:	d003      	beq.n	801f51c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801f514:	2302      	movs	r3, #2
 801f516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801f51a:	e1cd      	b.n	801f8b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801f51c:	68bb      	ldr	r3, [r7, #8]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d005      	beq.n	801f52e <HAL_SPI_TransmitReceive+0x80>
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d002      	beq.n	801f52e <HAL_SPI_TransmitReceive+0x80>
 801f528:	887b      	ldrh	r3, [r7, #2]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d103      	bne.n	801f536 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801f52e:	2301      	movs	r3, #1
 801f530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801f534:	e1c0      	b.n	801f8b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801f53c:	b2db      	uxtb	r3, r3
 801f53e:	2b04      	cmp	r3, #4
 801f540:	d003      	beq.n	801f54a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	2205      	movs	r2, #5
 801f546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801f54a:	68fb      	ldr	r3, [r7, #12]
 801f54c:	2200      	movs	r2, #0
 801f54e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	687a      	ldr	r2, [r7, #4]
 801f554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	887a      	ldrh	r2, [r7, #2]
 801f55a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	887a      	ldrh	r2, [r7, #2]
 801f562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801f566:	68fb      	ldr	r3, [r7, #12]
 801f568:	68ba      	ldr	r2, [r7, #8]
 801f56a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801f56c:	68fb      	ldr	r3, [r7, #12]
 801f56e:	887a      	ldrh	r2, [r7, #2]
 801f570:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	887a      	ldrh	r2, [r7, #2]
 801f576:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	2200      	movs	r2, #0
 801f57c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	2200      	movs	r2, #0
 801f582:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801f584:	68fb      	ldr	r3, [r7, #12]
 801f586:	68db      	ldr	r3, [r3, #12]
 801f588:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801f58c:	d802      	bhi.n	801f594 <HAL_SPI_TransmitReceive+0xe6>
 801f58e:	8a3b      	ldrh	r3, [r7, #16]
 801f590:	2b01      	cmp	r3, #1
 801f592:	d908      	bls.n	801f5a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	685a      	ldr	r2, [r3, #4]
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801f5a2:	605a      	str	r2, [r3, #4]
 801f5a4:	e007      	b.n	801f5b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801f5a6:	68fb      	ldr	r3, [r7, #12]
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	685a      	ldr	r2, [r3, #4]
 801f5ac:	68fb      	ldr	r3, [r7, #12]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f5b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f5c0:	2b40      	cmp	r3, #64	; 0x40
 801f5c2:	d007      	beq.n	801f5d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	681a      	ldr	r2, [r3, #0]
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f5d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f5d4:	68fb      	ldr	r3, [r7, #12]
 801f5d6:	68db      	ldr	r3, [r3, #12]
 801f5d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801f5dc:	d97c      	bls.n	801f6d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801f5de:	68fb      	ldr	r3, [r7, #12]
 801f5e0:	685b      	ldr	r3, [r3, #4]
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d002      	beq.n	801f5ec <HAL_SPI_TransmitReceive+0x13e>
 801f5e6:	8a7b      	ldrh	r3, [r7, #18]
 801f5e8:	2b01      	cmp	r3, #1
 801f5ea:	d169      	bne.n	801f6c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5f0:	881a      	ldrh	r2, [r3, #0]
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801f5f8:	68fb      	ldr	r3, [r7, #12]
 801f5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5fc:	1c9a      	adds	r2, r3, #2
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f606:	b29b      	uxth	r3, r3
 801f608:	3b01      	subs	r3, #1
 801f60a:	b29a      	uxth	r2, r3
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801f610:	e056      	b.n	801f6c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801f612:	68fb      	ldr	r3, [r7, #12]
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	689b      	ldr	r3, [r3, #8]
 801f618:	f003 0302 	and.w	r3, r3, #2
 801f61c:	2b02      	cmp	r3, #2
 801f61e:	d11b      	bne.n	801f658 <HAL_SPI_TransmitReceive+0x1aa>
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f624:	b29b      	uxth	r3, r3
 801f626:	2b00      	cmp	r3, #0
 801f628:	d016      	beq.n	801f658 <HAL_SPI_TransmitReceive+0x1aa>
 801f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f62c:	2b01      	cmp	r3, #1
 801f62e:	d113      	bne.n	801f658 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f634:	881a      	ldrh	r2, [r3, #0]
 801f636:	68fb      	ldr	r3, [r7, #12]
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f640:	1c9a      	adds	r2, r3, #2
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f64a:	b29b      	uxth	r3, r3
 801f64c:	3b01      	subs	r3, #1
 801f64e:	b29a      	uxth	r2, r3
 801f650:	68fb      	ldr	r3, [r7, #12]
 801f652:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801f654:	2300      	movs	r3, #0
 801f656:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801f658:	68fb      	ldr	r3, [r7, #12]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	689b      	ldr	r3, [r3, #8]
 801f65e:	f003 0301 	and.w	r3, r3, #1
 801f662:	2b01      	cmp	r3, #1
 801f664:	d11c      	bne.n	801f6a0 <HAL_SPI_TransmitReceive+0x1f2>
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f66c:	b29b      	uxth	r3, r3
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d016      	beq.n	801f6a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801f672:	68fb      	ldr	r3, [r7, #12]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	68da      	ldr	r2, [r3, #12]
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f67c:	b292      	uxth	r2, r2
 801f67e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801f680:	68fb      	ldr	r3, [r7, #12]
 801f682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f684:	1c9a      	adds	r2, r3, #2
 801f686:	68fb      	ldr	r3, [r7, #12]
 801f688:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801f68a:	68fb      	ldr	r3, [r7, #12]
 801f68c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f690:	b29b      	uxth	r3, r3
 801f692:	3b01      	subs	r3, #1
 801f694:	b29a      	uxth	r2, r3
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801f69c:	2301      	movs	r3, #1
 801f69e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801f6a0:	f7fb f9bc 	bl	801aa1c <HAL_GetTick>
 801f6a4:	4602      	mov	r2, r0
 801f6a6:	69fb      	ldr	r3, [r7, #28]
 801f6a8:	1ad3      	subs	r3, r2, r3
 801f6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f6ac:	429a      	cmp	r2, r3
 801f6ae:	d807      	bhi.n	801f6c0 <HAL_SPI_TransmitReceive+0x212>
 801f6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f6b6:	d003      	beq.n	801f6c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801f6b8:	2303      	movs	r3, #3
 801f6ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801f6be:	e0fb      	b.n	801f8b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f6c4:	b29b      	uxth	r3, r3
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d1a3      	bne.n	801f612 <HAL_SPI_TransmitReceive+0x164>
 801f6ca:	68fb      	ldr	r3, [r7, #12]
 801f6cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f6d0:	b29b      	uxth	r3, r3
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d19d      	bne.n	801f612 <HAL_SPI_TransmitReceive+0x164>
 801f6d6:	e0df      	b.n	801f898 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801f6d8:	68fb      	ldr	r3, [r7, #12]
 801f6da:	685b      	ldr	r3, [r3, #4]
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d003      	beq.n	801f6e8 <HAL_SPI_TransmitReceive+0x23a>
 801f6e0:	8a7b      	ldrh	r3, [r7, #18]
 801f6e2:	2b01      	cmp	r3, #1
 801f6e4:	f040 80cb 	bne.w	801f87e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801f6e8:	68fb      	ldr	r3, [r7, #12]
 801f6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f6ec:	b29b      	uxth	r3, r3
 801f6ee:	2b01      	cmp	r3, #1
 801f6f0:	d912      	bls.n	801f718 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6f6:	881a      	ldrh	r2, [r3, #0]
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801f6fe:	68fb      	ldr	r3, [r7, #12]
 801f700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f702:	1c9a      	adds	r2, r3, #2
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f70c:	b29b      	uxth	r3, r3
 801f70e:	3b02      	subs	r3, #2
 801f710:	b29a      	uxth	r2, r3
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f716:	e0b2      	b.n	801f87e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	330c      	adds	r3, #12
 801f722:	7812      	ldrb	r2, [r2, #0]
 801f724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801f726:	68fb      	ldr	r3, [r7, #12]
 801f728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f72a:	1c5a      	adds	r2, r3, #1
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801f730:	68fb      	ldr	r3, [r7, #12]
 801f732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f734:	b29b      	uxth	r3, r3
 801f736:	3b01      	subs	r3, #1
 801f738:	b29a      	uxth	r2, r3
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801f73e:	e09e      	b.n	801f87e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	689b      	ldr	r3, [r3, #8]
 801f746:	f003 0302 	and.w	r3, r3, #2
 801f74a:	2b02      	cmp	r3, #2
 801f74c:	d134      	bne.n	801f7b8 <HAL_SPI_TransmitReceive+0x30a>
 801f74e:	68fb      	ldr	r3, [r7, #12]
 801f750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f752:	b29b      	uxth	r3, r3
 801f754:	2b00      	cmp	r3, #0
 801f756:	d02f      	beq.n	801f7b8 <HAL_SPI_TransmitReceive+0x30a>
 801f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f75a:	2b01      	cmp	r3, #1
 801f75c:	d12c      	bne.n	801f7b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f762:	b29b      	uxth	r3, r3
 801f764:	2b01      	cmp	r3, #1
 801f766:	d912      	bls.n	801f78e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f76c:	881a      	ldrh	r2, [r3, #0]
 801f76e:	68fb      	ldr	r3, [r7, #12]
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f778:	1c9a      	adds	r2, r3, #2
 801f77a:	68fb      	ldr	r3, [r7, #12]
 801f77c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801f77e:	68fb      	ldr	r3, [r7, #12]
 801f780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f782:	b29b      	uxth	r3, r3
 801f784:	3b02      	subs	r3, #2
 801f786:	b29a      	uxth	r2, r3
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801f78c:	e012      	b.n	801f7b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f792:	68fb      	ldr	r3, [r7, #12]
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	330c      	adds	r3, #12
 801f798:	7812      	ldrb	r2, [r2, #0]
 801f79a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801f79c:	68fb      	ldr	r3, [r7, #12]
 801f79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7a0:	1c5a      	adds	r2, r3, #1
 801f7a2:	68fb      	ldr	r3, [r7, #12]
 801f7a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f7aa:	b29b      	uxth	r3, r3
 801f7ac:	3b01      	subs	r3, #1
 801f7ae:	b29a      	uxth	r2, r3
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	689b      	ldr	r3, [r3, #8]
 801f7be:	f003 0301 	and.w	r3, r3, #1
 801f7c2:	2b01      	cmp	r3, #1
 801f7c4:	d148      	bne.n	801f858 <HAL_SPI_TransmitReceive+0x3aa>
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f7cc:	b29b      	uxth	r3, r3
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d042      	beq.n	801f858 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801f7d2:	68fb      	ldr	r3, [r7, #12]
 801f7d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f7d8:	b29b      	uxth	r3, r3
 801f7da:	2b01      	cmp	r3, #1
 801f7dc:	d923      	bls.n	801f826 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	681b      	ldr	r3, [r3, #0]
 801f7e2:	68da      	ldr	r2, [r3, #12]
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7e8:	b292      	uxth	r2, r2
 801f7ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7f0:	1c9a      	adds	r2, r3, #2
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f7fc:	b29b      	uxth	r3, r3
 801f7fe:	3b02      	subs	r3, #2
 801f800:	b29a      	uxth	r2, r3
 801f802:	68fb      	ldr	r3, [r7, #12]
 801f804:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f80e:	b29b      	uxth	r3, r3
 801f810:	2b01      	cmp	r3, #1
 801f812:	d81f      	bhi.n	801f854 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	685a      	ldr	r2, [r3, #4]
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f822:	605a      	str	r2, [r3, #4]
 801f824:	e016      	b.n	801f854 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801f826:	68fb      	ldr	r3, [r7, #12]
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	f103 020c 	add.w	r2, r3, #12
 801f82e:	68fb      	ldr	r3, [r7, #12]
 801f830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f832:	7812      	ldrb	r2, [r2, #0]
 801f834:	b2d2      	uxtb	r2, r2
 801f836:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f83c:	1c5a      	adds	r2, r3, #1
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f848:	b29b      	uxth	r3, r3
 801f84a:	3b01      	subs	r3, #1
 801f84c:	b29a      	uxth	r2, r3
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801f854:	2301      	movs	r3, #1
 801f856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801f858:	f7fb f8e0 	bl	801aa1c <HAL_GetTick>
 801f85c:	4602      	mov	r2, r0
 801f85e:	69fb      	ldr	r3, [r7, #28]
 801f860:	1ad3      	subs	r3, r2, r3
 801f862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f864:	429a      	cmp	r2, r3
 801f866:	d803      	bhi.n	801f870 <HAL_SPI_TransmitReceive+0x3c2>
 801f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f86e:	d102      	bne.n	801f876 <HAL_SPI_TransmitReceive+0x3c8>
 801f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f872:	2b00      	cmp	r3, #0
 801f874:	d103      	bne.n	801f87e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801f876:	2303      	movs	r3, #3
 801f878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801f87c:	e01c      	b.n	801f8b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801f882:	b29b      	uxth	r3, r3
 801f884:	2b00      	cmp	r3, #0
 801f886:	f47f af5b 	bne.w	801f740 <HAL_SPI_TransmitReceive+0x292>
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801f890:	b29b      	uxth	r3, r3
 801f892:	2b00      	cmp	r3, #0
 801f894:	f47f af54 	bne.w	801f740 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801f898:	69fa      	ldr	r2, [r7, #28]
 801f89a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f89c:	68f8      	ldr	r0, [r7, #12]
 801f89e:	f000 f98f 	bl	801fbc0 <SPI_EndRxTxTransaction>
 801f8a2:	4603      	mov	r3, r0
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d006      	beq.n	801f8b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801f8a8:	2301      	movs	r3, #1
 801f8aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	2220      	movs	r2, #32
 801f8b2:	661a      	str	r2, [r3, #96]	; 0x60
 801f8b4:	e000      	b.n	801f8b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801f8b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801f8b8:	68fb      	ldr	r3, [r7, #12]
 801f8ba:	2201      	movs	r2, #1
 801f8bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	2200      	movs	r2, #0
 801f8c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801f8c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	3728      	adds	r7, #40	; 0x28
 801f8d0:	46bd      	mov	sp, r7
 801f8d2:	bd80      	pop	{r7, pc}

0801f8d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801f8d4:	b580      	push	{r7, lr}
 801f8d6:	b088      	sub	sp, #32
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	60f8      	str	r0, [r7, #12]
 801f8dc:	60b9      	str	r1, [r7, #8]
 801f8de:	603b      	str	r3, [r7, #0]
 801f8e0:	4613      	mov	r3, r2
 801f8e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801f8e4:	f7fb f89a 	bl	801aa1c <HAL_GetTick>
 801f8e8:	4602      	mov	r2, r0
 801f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8ec:	1a9b      	subs	r3, r3, r2
 801f8ee:	683a      	ldr	r2, [r7, #0]
 801f8f0:	4413      	add	r3, r2
 801f8f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801f8f4:	f7fb f892 	bl	801aa1c <HAL_GetTick>
 801f8f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801f8fa:	4b39      	ldr	r3, [pc, #228]	; (801f9e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	015b      	lsls	r3, r3, #5
 801f900:	0d1b      	lsrs	r3, r3, #20
 801f902:	69fa      	ldr	r2, [r7, #28]
 801f904:	fb02 f303 	mul.w	r3, r2, r3
 801f908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f90a:	e054      	b.n	801f9b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801f90c:	683b      	ldr	r3, [r7, #0]
 801f90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f912:	d050      	beq.n	801f9b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801f914:	f7fb f882 	bl	801aa1c <HAL_GetTick>
 801f918:	4602      	mov	r2, r0
 801f91a:	69bb      	ldr	r3, [r7, #24]
 801f91c:	1ad3      	subs	r3, r2, r3
 801f91e:	69fa      	ldr	r2, [r7, #28]
 801f920:	429a      	cmp	r2, r3
 801f922:	d902      	bls.n	801f92a <SPI_WaitFlagStateUntilTimeout+0x56>
 801f924:	69fb      	ldr	r3, [r7, #28]
 801f926:	2b00      	cmp	r3, #0
 801f928:	d13d      	bne.n	801f9a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	685a      	ldr	r2, [r3, #4]
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	681b      	ldr	r3, [r3, #0]
 801f934:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801f938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f93a:	68fb      	ldr	r3, [r7, #12]
 801f93c:	685b      	ldr	r3, [r3, #4]
 801f93e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f942:	d111      	bne.n	801f968 <SPI_WaitFlagStateUntilTimeout+0x94>
 801f944:	68fb      	ldr	r3, [r7, #12]
 801f946:	689b      	ldr	r3, [r3, #8]
 801f948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f94c:	d004      	beq.n	801f958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	689b      	ldr	r3, [r3, #8]
 801f952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f956:	d107      	bne.n	801f968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801f958:	68fb      	ldr	r3, [r7, #12]
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	681a      	ldr	r2, [r3, #0]
 801f95e:	68fb      	ldr	r3, [r7, #12]
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f970:	d10f      	bne.n	801f992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801f972:	68fb      	ldr	r3, [r7, #12]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	681a      	ldr	r2, [r3, #0]
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f980:	601a      	str	r2, [r3, #0]
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	681a      	ldr	r2, [r3, #0]
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	2201      	movs	r2, #1
 801f996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	2200      	movs	r2, #0
 801f99e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801f9a2:	2303      	movs	r3, #3
 801f9a4:	e017      	b.n	801f9d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801f9a6:	697b      	ldr	r3, [r7, #20]
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d101      	bne.n	801f9b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801f9ac:	2300      	movs	r3, #0
 801f9ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801f9b0:	697b      	ldr	r3, [r7, #20]
 801f9b2:	3b01      	subs	r3, #1
 801f9b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	689a      	ldr	r2, [r3, #8]
 801f9bc:	68bb      	ldr	r3, [r7, #8]
 801f9be:	4013      	ands	r3, r2
 801f9c0:	68ba      	ldr	r2, [r7, #8]
 801f9c2:	429a      	cmp	r2, r3
 801f9c4:	bf0c      	ite	eq
 801f9c6:	2301      	moveq	r3, #1
 801f9c8:	2300      	movne	r3, #0
 801f9ca:	b2db      	uxtb	r3, r3
 801f9cc:	461a      	mov	r2, r3
 801f9ce:	79fb      	ldrb	r3, [r7, #7]
 801f9d0:	429a      	cmp	r2, r3
 801f9d2:	d19b      	bne.n	801f90c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801f9d4:	2300      	movs	r3, #0
}
 801f9d6:	4618      	mov	r0, r3
 801f9d8:	3720      	adds	r7, #32
 801f9da:	46bd      	mov	sp, r7
 801f9dc:	bd80      	pop	{r7, pc}
 801f9de:	bf00      	nop
 801f9e0:	20000000 	.word	0x20000000

0801f9e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801f9e4:	b580      	push	{r7, lr}
 801f9e6:	b08a      	sub	sp, #40	; 0x28
 801f9e8:	af00      	add	r7, sp, #0
 801f9ea:	60f8      	str	r0, [r7, #12]
 801f9ec:	60b9      	str	r1, [r7, #8]
 801f9ee:	607a      	str	r2, [r7, #4]
 801f9f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801f9f6:	f7fb f811 	bl	801aa1c <HAL_GetTick>
 801f9fa:	4602      	mov	r2, r0
 801f9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9fe:	1a9b      	subs	r3, r3, r2
 801fa00:	683a      	ldr	r2, [r7, #0]
 801fa02:	4413      	add	r3, r2
 801fa04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801fa06:	f7fb f809 	bl	801aa1c <HAL_GetTick>
 801fa0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	330c      	adds	r3, #12
 801fa12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801fa14:	4b3d      	ldr	r3, [pc, #244]	; (801fb0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801fa16:	681a      	ldr	r2, [r3, #0]
 801fa18:	4613      	mov	r3, r2
 801fa1a:	009b      	lsls	r3, r3, #2
 801fa1c:	4413      	add	r3, r2
 801fa1e:	00da      	lsls	r2, r3, #3
 801fa20:	1ad3      	subs	r3, r2, r3
 801fa22:	0d1b      	lsrs	r3, r3, #20
 801fa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fa26:	fb02 f303 	mul.w	r3, r2, r3
 801fa2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801fa2c:	e060      	b.n	801faf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801fa2e:	68bb      	ldr	r3, [r7, #8]
 801fa30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801fa34:	d107      	bne.n	801fa46 <SPI_WaitFifoStateUntilTimeout+0x62>
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d104      	bne.n	801fa46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801fa3c:	69fb      	ldr	r3, [r7, #28]
 801fa3e:	781b      	ldrb	r3, [r3, #0]
 801fa40:	b2db      	uxtb	r3, r3
 801fa42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801fa44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fa4c:	d050      	beq.n	801faf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801fa4e:	f7fa ffe5 	bl	801aa1c <HAL_GetTick>
 801fa52:	4602      	mov	r2, r0
 801fa54:	6a3b      	ldr	r3, [r7, #32]
 801fa56:	1ad3      	subs	r3, r2, r3
 801fa58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fa5a:	429a      	cmp	r2, r3
 801fa5c:	d902      	bls.n	801fa64 <SPI_WaitFifoStateUntilTimeout+0x80>
 801fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa60:	2b00      	cmp	r3, #0
 801fa62:	d13d      	bne.n	801fae0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801fa64:	68fb      	ldr	r3, [r7, #12]
 801fa66:	681b      	ldr	r3, [r3, #0]
 801fa68:	685a      	ldr	r2, [r3, #4]
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	681b      	ldr	r3, [r3, #0]
 801fa6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801fa72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	685b      	ldr	r3, [r3, #4]
 801fa78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801fa7c:	d111      	bne.n	801faa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	689b      	ldr	r3, [r3, #8]
 801fa82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fa86:	d004      	beq.n	801fa92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801fa88:	68fb      	ldr	r3, [r7, #12]
 801fa8a:	689b      	ldr	r3, [r3, #8]
 801fa8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa90:	d107      	bne.n	801faa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	681a      	ldr	r2, [r3, #0]
 801fa98:	68fb      	ldr	r3, [r7, #12]
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801faa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801faa2:	68fb      	ldr	r3, [r7, #12]
 801faa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801faa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801faaa:	d10f      	bne.n	801facc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801faac:	68fb      	ldr	r3, [r7, #12]
 801faae:	681b      	ldr	r3, [r3, #0]
 801fab0:	681a      	ldr	r2, [r3, #0]
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801faba:	601a      	str	r2, [r3, #0]
 801fabc:	68fb      	ldr	r3, [r7, #12]
 801fabe:	681b      	ldr	r3, [r3, #0]
 801fac0:	681a      	ldr	r2, [r3, #0]
 801fac2:	68fb      	ldr	r3, [r7, #12]
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801faca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801facc:	68fb      	ldr	r3, [r7, #12]
 801face:	2201      	movs	r2, #1
 801fad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801fad4:	68fb      	ldr	r3, [r7, #12]
 801fad6:	2200      	movs	r2, #0
 801fad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801fadc:	2303      	movs	r3, #3
 801fade:	e010      	b.n	801fb02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801fae0:	69bb      	ldr	r3, [r7, #24]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d101      	bne.n	801faea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801fae6:	2300      	movs	r3, #0
 801fae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801faea:	69bb      	ldr	r3, [r7, #24]
 801faec:	3b01      	subs	r3, #1
 801faee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801faf0:	68fb      	ldr	r3, [r7, #12]
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	689a      	ldr	r2, [r3, #8]
 801faf6:	68bb      	ldr	r3, [r7, #8]
 801faf8:	4013      	ands	r3, r2
 801fafa:	687a      	ldr	r2, [r7, #4]
 801fafc:	429a      	cmp	r2, r3
 801fafe:	d196      	bne.n	801fa2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801fb00:	2300      	movs	r3, #0
}
 801fb02:	4618      	mov	r0, r3
 801fb04:	3728      	adds	r7, #40	; 0x28
 801fb06:	46bd      	mov	sp, r7
 801fb08:	bd80      	pop	{r7, pc}
 801fb0a:	bf00      	nop
 801fb0c:	20000000 	.word	0x20000000

0801fb10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801fb10:	b580      	push	{r7, lr}
 801fb12:	b086      	sub	sp, #24
 801fb14:	af02      	add	r7, sp, #8
 801fb16:	60f8      	str	r0, [r7, #12]
 801fb18:	60b9      	str	r1, [r7, #8]
 801fb1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	685b      	ldr	r3, [r3, #4]
 801fb20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801fb24:	d111      	bne.n	801fb4a <SPI_EndRxTransaction+0x3a>
 801fb26:	68fb      	ldr	r3, [r7, #12]
 801fb28:	689b      	ldr	r3, [r3, #8]
 801fb2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb2e:	d004      	beq.n	801fb3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801fb30:	68fb      	ldr	r3, [r7, #12]
 801fb32:	689b      	ldr	r3, [r3, #8]
 801fb34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fb38:	d107      	bne.n	801fb4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801fb3a:	68fb      	ldr	r3, [r7, #12]
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	681a      	ldr	r2, [r3, #0]
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801fb48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	9300      	str	r3, [sp, #0]
 801fb4e:	68bb      	ldr	r3, [r7, #8]
 801fb50:	2200      	movs	r2, #0
 801fb52:	2180      	movs	r1, #128	; 0x80
 801fb54:	68f8      	ldr	r0, [r7, #12]
 801fb56:	f7ff febd 	bl	801f8d4 <SPI_WaitFlagStateUntilTimeout>
 801fb5a:	4603      	mov	r3, r0
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d007      	beq.n	801fb70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fb64:	f043 0220 	orr.w	r2, r3, #32
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801fb6c:	2303      	movs	r3, #3
 801fb6e:	e023      	b.n	801fbb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	685b      	ldr	r3, [r3, #4]
 801fb74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801fb78:	d11d      	bne.n	801fbb6 <SPI_EndRxTransaction+0xa6>
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	689b      	ldr	r3, [r3, #8]
 801fb7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb82:	d004      	beq.n	801fb8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801fb84:	68fb      	ldr	r3, [r7, #12]
 801fb86:	689b      	ldr	r3, [r3, #8]
 801fb88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fb8c:	d113      	bne.n	801fbb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	9300      	str	r3, [sp, #0]
 801fb92:	68bb      	ldr	r3, [r7, #8]
 801fb94:	2200      	movs	r2, #0
 801fb96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801fb9a:	68f8      	ldr	r0, [r7, #12]
 801fb9c:	f7ff ff22 	bl	801f9e4 <SPI_WaitFifoStateUntilTimeout>
 801fba0:	4603      	mov	r3, r0
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d007      	beq.n	801fbb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fbaa:	f043 0220 	orr.w	r2, r3, #32
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801fbb2:	2303      	movs	r3, #3
 801fbb4:	e000      	b.n	801fbb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801fbb6:	2300      	movs	r3, #0
}
 801fbb8:	4618      	mov	r0, r3
 801fbba:	3710      	adds	r7, #16
 801fbbc:	46bd      	mov	sp, r7
 801fbbe:	bd80      	pop	{r7, pc}

0801fbc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801fbc0:	b580      	push	{r7, lr}
 801fbc2:	b086      	sub	sp, #24
 801fbc4:	af02      	add	r7, sp, #8
 801fbc6:	60f8      	str	r0, [r7, #12]
 801fbc8:	60b9      	str	r1, [r7, #8]
 801fbca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	9300      	str	r3, [sp, #0]
 801fbd0:	68bb      	ldr	r3, [r7, #8]
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801fbd8:	68f8      	ldr	r0, [r7, #12]
 801fbda:	f7ff ff03 	bl	801f9e4 <SPI_WaitFifoStateUntilTimeout>
 801fbde:	4603      	mov	r3, r0
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d007      	beq.n	801fbf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fbe8:	f043 0220 	orr.w	r2, r3, #32
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801fbf0:	2303      	movs	r3, #3
 801fbf2:	e027      	b.n	801fc44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	9300      	str	r3, [sp, #0]
 801fbf8:	68bb      	ldr	r3, [r7, #8]
 801fbfa:	2200      	movs	r2, #0
 801fbfc:	2180      	movs	r1, #128	; 0x80
 801fbfe:	68f8      	ldr	r0, [r7, #12]
 801fc00:	f7ff fe68 	bl	801f8d4 <SPI_WaitFlagStateUntilTimeout>
 801fc04:	4603      	mov	r3, r0
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d007      	beq.n	801fc1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801fc0a:	68fb      	ldr	r3, [r7, #12]
 801fc0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fc0e:	f043 0220 	orr.w	r2, r3, #32
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801fc16:	2303      	movs	r3, #3
 801fc18:	e014      	b.n	801fc44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	9300      	str	r3, [sp, #0]
 801fc1e:	68bb      	ldr	r3, [r7, #8]
 801fc20:	2200      	movs	r2, #0
 801fc22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801fc26:	68f8      	ldr	r0, [r7, #12]
 801fc28:	f7ff fedc 	bl	801f9e4 <SPI_WaitFifoStateUntilTimeout>
 801fc2c:	4603      	mov	r3, r0
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d007      	beq.n	801fc42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801fc32:	68fb      	ldr	r3, [r7, #12]
 801fc34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fc36:	f043 0220 	orr.w	r2, r3, #32
 801fc3a:	68fb      	ldr	r3, [r7, #12]
 801fc3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801fc3e:	2303      	movs	r3, #3
 801fc40:	e000      	b.n	801fc44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801fc42:	2300      	movs	r3, #0
}
 801fc44:	4618      	mov	r0, r3
 801fc46:	3710      	adds	r7, #16
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}

0801fc4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b082      	sub	sp, #8
 801fc50:	af00      	add	r7, sp, #0
 801fc52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d101      	bne.n	801fc5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fc5a:	2301      	movs	r3, #1
 801fc5c:	e049      	b.n	801fcf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fc64:	b2db      	uxtb	r3, r3
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d106      	bne.n	801fc78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	2200      	movs	r2, #0
 801fc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fc72:	6878      	ldr	r0, [r7, #4]
 801fc74:	f7f9 fd1e 	bl	80196b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	2202      	movs	r2, #2
 801fc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	681a      	ldr	r2, [r3, #0]
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	3304      	adds	r3, #4
 801fc88:	4619      	mov	r1, r3
 801fc8a:	4610      	mov	r0, r2
 801fc8c:	f000 fd6c 	bl	8020768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	2201      	movs	r2, #1
 801fc94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2201      	movs	r2, #1
 801fc9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	2201      	movs	r2, #1
 801fca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	2201      	movs	r2, #1
 801fcac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	2201      	movs	r2, #1
 801fcb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2201      	movs	r2, #1
 801fcbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	2201      	movs	r2, #1
 801fcc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	2201      	movs	r2, #1
 801fccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	2201      	movs	r2, #1
 801fcd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	2201      	movs	r2, #1
 801fcdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	2201      	movs	r2, #1
 801fce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	2201      	movs	r2, #1
 801fcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fcf0:	2300      	movs	r3, #0
}
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	3708      	adds	r7, #8
 801fcf6:	46bd      	mov	sp, r7
 801fcf8:	bd80      	pop	{r7, pc}
	...

0801fcfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801fcfc:	b480      	push	{r7}
 801fcfe:	b085      	sub	sp, #20
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fd0a:	b2db      	uxtb	r3, r3
 801fd0c:	2b01      	cmp	r3, #1
 801fd0e:	d001      	beq.n	801fd14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801fd10:	2301      	movs	r3, #1
 801fd12:	e04f      	b.n	801fdb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	2202      	movs	r2, #2
 801fd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	68da      	ldr	r2, [r3, #12]
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	f042 0201 	orr.w	r2, r2, #1
 801fd2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	4a23      	ldr	r2, [pc, #140]	; (801fdc0 <HAL_TIM_Base_Start_IT+0xc4>)
 801fd32:	4293      	cmp	r3, r2
 801fd34:	d01d      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fd3e:	d018      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	4a1f      	ldr	r2, [pc, #124]	; (801fdc4 <HAL_TIM_Base_Start_IT+0xc8>)
 801fd46:	4293      	cmp	r3, r2
 801fd48:	d013      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	4a1e      	ldr	r2, [pc, #120]	; (801fdc8 <HAL_TIM_Base_Start_IT+0xcc>)
 801fd50:	4293      	cmp	r3, r2
 801fd52:	d00e      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	4a1c      	ldr	r2, [pc, #112]	; (801fdcc <HAL_TIM_Base_Start_IT+0xd0>)
 801fd5a:	4293      	cmp	r3, r2
 801fd5c:	d009      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	4a1b      	ldr	r2, [pc, #108]	; (801fdd0 <HAL_TIM_Base_Start_IT+0xd4>)
 801fd64:	4293      	cmp	r3, r2
 801fd66:	d004      	beq.n	801fd72 <HAL_TIM_Base_Start_IT+0x76>
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	4a19      	ldr	r2, [pc, #100]	; (801fdd4 <HAL_TIM_Base_Start_IT+0xd8>)
 801fd6e:	4293      	cmp	r3, r2
 801fd70:	d115      	bne.n	801fd9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	689a      	ldr	r2, [r3, #8]
 801fd78:	4b17      	ldr	r3, [pc, #92]	; (801fdd8 <HAL_TIM_Base_Start_IT+0xdc>)
 801fd7a:	4013      	ands	r3, r2
 801fd7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fd7e:	68fb      	ldr	r3, [r7, #12]
 801fd80:	2b06      	cmp	r3, #6
 801fd82:	d015      	beq.n	801fdb0 <HAL_TIM_Base_Start_IT+0xb4>
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fd8a:	d011      	beq.n	801fdb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	681a      	ldr	r2, [r3, #0]
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	f042 0201 	orr.w	r2, r2, #1
 801fd9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fd9c:	e008      	b.n	801fdb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	681a      	ldr	r2, [r3, #0]
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	f042 0201 	orr.w	r2, r2, #1
 801fdac:	601a      	str	r2, [r3, #0]
 801fdae:	e000      	b.n	801fdb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fdb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801fdb2:	2300      	movs	r3, #0
}
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	3714      	adds	r7, #20
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdbe:	4770      	bx	lr
 801fdc0:	40012c00 	.word	0x40012c00
 801fdc4:	40000400 	.word	0x40000400
 801fdc8:	40000800 	.word	0x40000800
 801fdcc:	40013400 	.word	0x40013400
 801fdd0:	40014000 	.word	0x40014000
 801fdd4:	40015000 	.word	0x40015000
 801fdd8:	00010007 	.word	0x00010007

0801fddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	b082      	sub	sp, #8
 801fde0:	af00      	add	r7, sp, #0
 801fde2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d101      	bne.n	801fdee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fdea:	2301      	movs	r3, #1
 801fdec:	e049      	b.n	801fe82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fdf4:	b2db      	uxtb	r3, r3
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d106      	bne.n	801fe08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fe02:	6878      	ldr	r0, [r7, #4]
 801fe04:	f7f9 fc90 	bl	8019728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	2202      	movs	r2, #2
 801fe0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	681a      	ldr	r2, [r3, #0]
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	3304      	adds	r3, #4
 801fe18:	4619      	mov	r1, r3
 801fe1a:	4610      	mov	r0, r2
 801fe1c:	f000 fca4 	bl	8020768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	2201      	movs	r2, #1
 801fe24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	2201      	movs	r2, #1
 801fe2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	2201      	movs	r2, #1
 801fe34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	2201      	movs	r2, #1
 801fe3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	2201      	movs	r2, #1
 801fe44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2201      	movs	r2, #1
 801fe4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	2201      	movs	r2, #1
 801fe54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	2201      	movs	r2, #1
 801fe5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	2201      	movs	r2, #1
 801fe64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	2201      	movs	r2, #1
 801fe6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	2201      	movs	r2, #1
 801fe74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	2201      	movs	r2, #1
 801fe7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fe80:	2300      	movs	r3, #0
}
 801fe82:	4618      	mov	r0, r3
 801fe84:	3708      	adds	r7, #8
 801fe86:	46bd      	mov	sp, r7
 801fe88:	bd80      	pop	{r7, pc}
	...

0801fe8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b084      	sub	sp, #16
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801fe96:	683b      	ldr	r3, [r7, #0]
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d109      	bne.n	801feb0 <HAL_TIM_PWM_Start+0x24>
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fea2:	b2db      	uxtb	r3, r3
 801fea4:	2b01      	cmp	r3, #1
 801fea6:	bf14      	ite	ne
 801fea8:	2301      	movne	r3, #1
 801feaa:	2300      	moveq	r3, #0
 801feac:	b2db      	uxtb	r3, r3
 801feae:	e03c      	b.n	801ff2a <HAL_TIM_PWM_Start+0x9e>
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	2b04      	cmp	r3, #4
 801feb4:	d109      	bne.n	801feca <HAL_TIM_PWM_Start+0x3e>
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801febc:	b2db      	uxtb	r3, r3
 801febe:	2b01      	cmp	r3, #1
 801fec0:	bf14      	ite	ne
 801fec2:	2301      	movne	r3, #1
 801fec4:	2300      	moveq	r3, #0
 801fec6:	b2db      	uxtb	r3, r3
 801fec8:	e02f      	b.n	801ff2a <HAL_TIM_PWM_Start+0x9e>
 801feca:	683b      	ldr	r3, [r7, #0]
 801fecc:	2b08      	cmp	r3, #8
 801fece:	d109      	bne.n	801fee4 <HAL_TIM_PWM_Start+0x58>
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fed6:	b2db      	uxtb	r3, r3
 801fed8:	2b01      	cmp	r3, #1
 801feda:	bf14      	ite	ne
 801fedc:	2301      	movne	r3, #1
 801fede:	2300      	moveq	r3, #0
 801fee0:	b2db      	uxtb	r3, r3
 801fee2:	e022      	b.n	801ff2a <HAL_TIM_PWM_Start+0x9e>
 801fee4:	683b      	ldr	r3, [r7, #0]
 801fee6:	2b0c      	cmp	r3, #12
 801fee8:	d109      	bne.n	801fefe <HAL_TIM_PWM_Start+0x72>
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fef0:	b2db      	uxtb	r3, r3
 801fef2:	2b01      	cmp	r3, #1
 801fef4:	bf14      	ite	ne
 801fef6:	2301      	movne	r3, #1
 801fef8:	2300      	moveq	r3, #0
 801fefa:	b2db      	uxtb	r3, r3
 801fefc:	e015      	b.n	801ff2a <HAL_TIM_PWM_Start+0x9e>
 801fefe:	683b      	ldr	r3, [r7, #0]
 801ff00:	2b10      	cmp	r3, #16
 801ff02:	d109      	bne.n	801ff18 <HAL_TIM_PWM_Start+0x8c>
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ff0a:	b2db      	uxtb	r3, r3
 801ff0c:	2b01      	cmp	r3, #1
 801ff0e:	bf14      	ite	ne
 801ff10:	2301      	movne	r3, #1
 801ff12:	2300      	moveq	r3, #0
 801ff14:	b2db      	uxtb	r3, r3
 801ff16:	e008      	b.n	801ff2a <HAL_TIM_PWM_Start+0x9e>
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff1e:	b2db      	uxtb	r3, r3
 801ff20:	2b01      	cmp	r3, #1
 801ff22:	bf14      	ite	ne
 801ff24:	2301      	movne	r3, #1
 801ff26:	2300      	moveq	r3, #0
 801ff28:	b2db      	uxtb	r3, r3
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	d001      	beq.n	801ff32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801ff2e:	2301      	movs	r3, #1
 801ff30:	e0a1      	b.n	8020076 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d104      	bne.n	801ff42 <HAL_TIM_PWM_Start+0xb6>
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	2202      	movs	r2, #2
 801ff3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ff40:	e023      	b.n	801ff8a <HAL_TIM_PWM_Start+0xfe>
 801ff42:	683b      	ldr	r3, [r7, #0]
 801ff44:	2b04      	cmp	r3, #4
 801ff46:	d104      	bne.n	801ff52 <HAL_TIM_PWM_Start+0xc6>
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	2202      	movs	r2, #2
 801ff4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ff50:	e01b      	b.n	801ff8a <HAL_TIM_PWM_Start+0xfe>
 801ff52:	683b      	ldr	r3, [r7, #0]
 801ff54:	2b08      	cmp	r3, #8
 801ff56:	d104      	bne.n	801ff62 <HAL_TIM_PWM_Start+0xd6>
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	2202      	movs	r2, #2
 801ff5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ff60:	e013      	b.n	801ff8a <HAL_TIM_PWM_Start+0xfe>
 801ff62:	683b      	ldr	r3, [r7, #0]
 801ff64:	2b0c      	cmp	r3, #12
 801ff66:	d104      	bne.n	801ff72 <HAL_TIM_PWM_Start+0xe6>
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	2202      	movs	r2, #2
 801ff6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ff70:	e00b      	b.n	801ff8a <HAL_TIM_PWM_Start+0xfe>
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	2b10      	cmp	r3, #16
 801ff76:	d104      	bne.n	801ff82 <HAL_TIM_PWM_Start+0xf6>
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	2202      	movs	r2, #2
 801ff7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ff80:	e003      	b.n	801ff8a <HAL_TIM_PWM_Start+0xfe>
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	2202      	movs	r2, #2
 801ff86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	2201      	movs	r2, #1
 801ff90:	6839      	ldr	r1, [r7, #0]
 801ff92:	4618      	mov	r0, r3
 801ff94:	f000 ffb0 	bl	8020ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	4a38      	ldr	r2, [pc, #224]	; (8020080 <HAL_TIM_PWM_Start+0x1f4>)
 801ff9e:	4293      	cmp	r3, r2
 801ffa0:	d018      	beq.n	801ffd4 <HAL_TIM_PWM_Start+0x148>
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	4a37      	ldr	r2, [pc, #220]	; (8020084 <HAL_TIM_PWM_Start+0x1f8>)
 801ffa8:	4293      	cmp	r3, r2
 801ffaa:	d013      	beq.n	801ffd4 <HAL_TIM_PWM_Start+0x148>
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	4a35      	ldr	r2, [pc, #212]	; (8020088 <HAL_TIM_PWM_Start+0x1fc>)
 801ffb2:	4293      	cmp	r3, r2
 801ffb4:	d00e      	beq.n	801ffd4 <HAL_TIM_PWM_Start+0x148>
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	4a34      	ldr	r2, [pc, #208]	; (802008c <HAL_TIM_PWM_Start+0x200>)
 801ffbc:	4293      	cmp	r3, r2
 801ffbe:	d009      	beq.n	801ffd4 <HAL_TIM_PWM_Start+0x148>
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	4a32      	ldr	r2, [pc, #200]	; (8020090 <HAL_TIM_PWM_Start+0x204>)
 801ffc6:	4293      	cmp	r3, r2
 801ffc8:	d004      	beq.n	801ffd4 <HAL_TIM_PWM_Start+0x148>
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	4a31      	ldr	r2, [pc, #196]	; (8020094 <HAL_TIM_PWM_Start+0x208>)
 801ffd0:	4293      	cmp	r3, r2
 801ffd2:	d101      	bne.n	801ffd8 <HAL_TIM_PWM_Start+0x14c>
 801ffd4:	2301      	movs	r3, #1
 801ffd6:	e000      	b.n	801ffda <HAL_TIM_PWM_Start+0x14e>
 801ffd8:	2300      	movs	r3, #0
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	d007      	beq.n	801ffee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ffec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ffee:	687b      	ldr	r3, [r7, #4]
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	4a23      	ldr	r2, [pc, #140]	; (8020080 <HAL_TIM_PWM_Start+0x1f4>)
 801fff4:	4293      	cmp	r3, r2
 801fff6:	d01d      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020000:	d018      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	4a24      	ldr	r2, [pc, #144]	; (8020098 <HAL_TIM_PWM_Start+0x20c>)
 8020008:	4293      	cmp	r3, r2
 802000a:	d013      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	4a22      	ldr	r2, [pc, #136]	; (802009c <HAL_TIM_PWM_Start+0x210>)
 8020012:	4293      	cmp	r3, r2
 8020014:	d00e      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	4a1a      	ldr	r2, [pc, #104]	; (8020084 <HAL_TIM_PWM_Start+0x1f8>)
 802001c:	4293      	cmp	r3, r2
 802001e:	d009      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	4a18      	ldr	r2, [pc, #96]	; (8020088 <HAL_TIM_PWM_Start+0x1fc>)
 8020026:	4293      	cmp	r3, r2
 8020028:	d004      	beq.n	8020034 <HAL_TIM_PWM_Start+0x1a8>
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	4a19      	ldr	r2, [pc, #100]	; (8020094 <HAL_TIM_PWM_Start+0x208>)
 8020030:	4293      	cmp	r3, r2
 8020032:	d115      	bne.n	8020060 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	689a      	ldr	r2, [r3, #8]
 802003a:	4b19      	ldr	r3, [pc, #100]	; (80200a0 <HAL_TIM_PWM_Start+0x214>)
 802003c:	4013      	ands	r3, r2
 802003e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	2b06      	cmp	r3, #6
 8020044:	d015      	beq.n	8020072 <HAL_TIM_PWM_Start+0x1e6>
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802004c:	d011      	beq.n	8020072 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	681a      	ldr	r2, [r3, #0]
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	f042 0201 	orr.w	r2, r2, #1
 802005c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802005e:	e008      	b.n	8020072 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	681a      	ldr	r2, [r3, #0]
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	f042 0201 	orr.w	r2, r2, #1
 802006e:	601a      	str	r2, [r3, #0]
 8020070:	e000      	b.n	8020074 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8020074:	2300      	movs	r3, #0
}
 8020076:	4618      	mov	r0, r3
 8020078:	3710      	adds	r7, #16
 802007a:	46bd      	mov	sp, r7
 802007c:	bd80      	pop	{r7, pc}
 802007e:	bf00      	nop
 8020080:	40012c00 	.word	0x40012c00
 8020084:	40013400 	.word	0x40013400
 8020088:	40014000 	.word	0x40014000
 802008c:	40014400 	.word	0x40014400
 8020090:	40014800 	.word	0x40014800
 8020094:	40015000 	.word	0x40015000
 8020098:	40000400 	.word	0x40000400
 802009c:	40000800 	.word	0x40000800
 80200a0:	00010007 	.word	0x00010007

080200a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80200a4:	b580      	push	{r7, lr}
 80200a6:	b082      	sub	sp, #8
 80200a8:	af00      	add	r7, sp, #0
 80200aa:	6078      	str	r0, [r7, #4]
 80200ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	2200      	movs	r2, #0
 80200b4:	6839      	ldr	r1, [r7, #0]
 80200b6:	4618      	mov	r0, r3
 80200b8:	f000 ff1e 	bl	8020ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	4a40      	ldr	r2, [pc, #256]	; (80201c4 <HAL_TIM_PWM_Stop+0x120>)
 80200c2:	4293      	cmp	r3, r2
 80200c4:	d018      	beq.n	80200f8 <HAL_TIM_PWM_Stop+0x54>
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	681b      	ldr	r3, [r3, #0]
 80200ca:	4a3f      	ldr	r2, [pc, #252]	; (80201c8 <HAL_TIM_PWM_Stop+0x124>)
 80200cc:	4293      	cmp	r3, r2
 80200ce:	d013      	beq.n	80200f8 <HAL_TIM_PWM_Stop+0x54>
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	4a3d      	ldr	r2, [pc, #244]	; (80201cc <HAL_TIM_PWM_Stop+0x128>)
 80200d6:	4293      	cmp	r3, r2
 80200d8:	d00e      	beq.n	80200f8 <HAL_TIM_PWM_Stop+0x54>
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	4a3c      	ldr	r2, [pc, #240]	; (80201d0 <HAL_TIM_PWM_Stop+0x12c>)
 80200e0:	4293      	cmp	r3, r2
 80200e2:	d009      	beq.n	80200f8 <HAL_TIM_PWM_Stop+0x54>
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	4a3a      	ldr	r2, [pc, #232]	; (80201d4 <HAL_TIM_PWM_Stop+0x130>)
 80200ea:	4293      	cmp	r3, r2
 80200ec:	d004      	beq.n	80200f8 <HAL_TIM_PWM_Stop+0x54>
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	4a39      	ldr	r2, [pc, #228]	; (80201d8 <HAL_TIM_PWM_Stop+0x134>)
 80200f4:	4293      	cmp	r3, r2
 80200f6:	d101      	bne.n	80200fc <HAL_TIM_PWM_Stop+0x58>
 80200f8:	2301      	movs	r3, #1
 80200fa:	e000      	b.n	80200fe <HAL_TIM_PWM_Stop+0x5a>
 80200fc:	2300      	movs	r3, #0
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d017      	beq.n	8020132 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	6a1a      	ldr	r2, [r3, #32]
 8020108:	f241 1311 	movw	r3, #4369	; 0x1111
 802010c:	4013      	ands	r3, r2
 802010e:	2b00      	cmp	r3, #0
 8020110:	d10f      	bne.n	8020132 <HAL_TIM_PWM_Stop+0x8e>
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	6a1a      	ldr	r2, [r3, #32]
 8020118:	f244 4344 	movw	r3, #17476	; 0x4444
 802011c:	4013      	ands	r3, r2
 802011e:	2b00      	cmp	r3, #0
 8020120:	d107      	bne.n	8020132 <HAL_TIM_PWM_Stop+0x8e>
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	681b      	ldr	r3, [r3, #0]
 802012c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	6a1a      	ldr	r2, [r3, #32]
 8020138:	f241 1311 	movw	r3, #4369	; 0x1111
 802013c:	4013      	ands	r3, r2
 802013e:	2b00      	cmp	r3, #0
 8020140:	d10f      	bne.n	8020162 <HAL_TIM_PWM_Stop+0xbe>
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	6a1a      	ldr	r2, [r3, #32]
 8020148:	f244 4344 	movw	r3, #17476	; 0x4444
 802014c:	4013      	ands	r3, r2
 802014e:	2b00      	cmp	r3, #0
 8020150:	d107      	bne.n	8020162 <HAL_TIM_PWM_Stop+0xbe>
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	681a      	ldr	r2, [r3, #0]
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	f022 0201 	bic.w	r2, r2, #1
 8020160:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8020162:	683b      	ldr	r3, [r7, #0]
 8020164:	2b00      	cmp	r3, #0
 8020166:	d104      	bne.n	8020172 <HAL_TIM_PWM_Stop+0xce>
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	2201      	movs	r2, #1
 802016c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020170:	e023      	b.n	80201ba <HAL_TIM_PWM_Stop+0x116>
 8020172:	683b      	ldr	r3, [r7, #0]
 8020174:	2b04      	cmp	r3, #4
 8020176:	d104      	bne.n	8020182 <HAL_TIM_PWM_Stop+0xde>
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	2201      	movs	r2, #1
 802017c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020180:	e01b      	b.n	80201ba <HAL_TIM_PWM_Stop+0x116>
 8020182:	683b      	ldr	r3, [r7, #0]
 8020184:	2b08      	cmp	r3, #8
 8020186:	d104      	bne.n	8020192 <HAL_TIM_PWM_Stop+0xee>
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	2201      	movs	r2, #1
 802018c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020190:	e013      	b.n	80201ba <HAL_TIM_PWM_Stop+0x116>
 8020192:	683b      	ldr	r3, [r7, #0]
 8020194:	2b0c      	cmp	r3, #12
 8020196:	d104      	bne.n	80201a2 <HAL_TIM_PWM_Stop+0xfe>
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	2201      	movs	r2, #1
 802019c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80201a0:	e00b      	b.n	80201ba <HAL_TIM_PWM_Stop+0x116>
 80201a2:	683b      	ldr	r3, [r7, #0]
 80201a4:	2b10      	cmp	r3, #16
 80201a6:	d104      	bne.n	80201b2 <HAL_TIM_PWM_Stop+0x10e>
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	2201      	movs	r2, #1
 80201ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80201b0:	e003      	b.n	80201ba <HAL_TIM_PWM_Stop+0x116>
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	2201      	movs	r2, #1
 80201b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80201ba:	2300      	movs	r3, #0
}
 80201bc:	4618      	mov	r0, r3
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}
 80201c4:	40012c00 	.word	0x40012c00
 80201c8:	40013400 	.word	0x40013400
 80201cc:	40014000 	.word	0x40014000
 80201d0:	40014400 	.word	0x40014400
 80201d4:	40014800 	.word	0x40014800
 80201d8:	40015000 	.word	0x40015000

080201dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80201dc:	b580      	push	{r7, lr}
 80201de:	b082      	sub	sp, #8
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	691b      	ldr	r3, [r3, #16]
 80201ea:	f003 0302 	and.w	r3, r3, #2
 80201ee:	2b02      	cmp	r3, #2
 80201f0:	d122      	bne.n	8020238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	68db      	ldr	r3, [r3, #12]
 80201f8:	f003 0302 	and.w	r3, r3, #2
 80201fc:	2b02      	cmp	r3, #2
 80201fe:	d11b      	bne.n	8020238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	f06f 0202 	mvn.w	r2, #2
 8020208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	2201      	movs	r2, #1
 802020e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	699b      	ldr	r3, [r3, #24]
 8020216:	f003 0303 	and.w	r3, r3, #3
 802021a:	2b00      	cmp	r3, #0
 802021c:	d003      	beq.n	8020226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802021e:	6878      	ldr	r0, [r7, #4]
 8020220:	f000 fa84 	bl	802072c <HAL_TIM_IC_CaptureCallback>
 8020224:	e005      	b.n	8020232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8020226:	6878      	ldr	r0, [r7, #4]
 8020228:	f000 fa76 	bl	8020718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802022c:	6878      	ldr	r0, [r7, #4]
 802022e:	f000 fa87 	bl	8020740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	2200      	movs	r2, #0
 8020236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	691b      	ldr	r3, [r3, #16]
 802023e:	f003 0304 	and.w	r3, r3, #4
 8020242:	2b04      	cmp	r3, #4
 8020244:	d122      	bne.n	802028c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	68db      	ldr	r3, [r3, #12]
 802024c:	f003 0304 	and.w	r3, r3, #4
 8020250:	2b04      	cmp	r3, #4
 8020252:	d11b      	bne.n	802028c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	f06f 0204 	mvn.w	r2, #4
 802025c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	2202      	movs	r2, #2
 8020262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	699b      	ldr	r3, [r3, #24]
 802026a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802026e:	2b00      	cmp	r3, #0
 8020270:	d003      	beq.n	802027a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020272:	6878      	ldr	r0, [r7, #4]
 8020274:	f000 fa5a 	bl	802072c <HAL_TIM_IC_CaptureCallback>
 8020278:	e005      	b.n	8020286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802027a:	6878      	ldr	r0, [r7, #4]
 802027c:	f000 fa4c 	bl	8020718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020280:	6878      	ldr	r0, [r7, #4]
 8020282:	f000 fa5d 	bl	8020740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	2200      	movs	r2, #0
 802028a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	691b      	ldr	r3, [r3, #16]
 8020292:	f003 0308 	and.w	r3, r3, #8
 8020296:	2b08      	cmp	r3, #8
 8020298:	d122      	bne.n	80202e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	68db      	ldr	r3, [r3, #12]
 80202a0:	f003 0308 	and.w	r3, r3, #8
 80202a4:	2b08      	cmp	r3, #8
 80202a6:	d11b      	bne.n	80202e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	f06f 0208 	mvn.w	r2, #8
 80202b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	2204      	movs	r2, #4
 80202b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	69db      	ldr	r3, [r3, #28]
 80202be:	f003 0303 	and.w	r3, r3, #3
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d003      	beq.n	80202ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80202c6:	6878      	ldr	r0, [r7, #4]
 80202c8:	f000 fa30 	bl	802072c <HAL_TIM_IC_CaptureCallback>
 80202cc:	e005      	b.n	80202da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80202ce:	6878      	ldr	r0, [r7, #4]
 80202d0:	f000 fa22 	bl	8020718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80202d4:	6878      	ldr	r0, [r7, #4]
 80202d6:	f000 fa33 	bl	8020740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	2200      	movs	r2, #0
 80202de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	691b      	ldr	r3, [r3, #16]
 80202e6:	f003 0310 	and.w	r3, r3, #16
 80202ea:	2b10      	cmp	r3, #16
 80202ec:	d122      	bne.n	8020334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	68db      	ldr	r3, [r3, #12]
 80202f4:	f003 0310 	and.w	r3, r3, #16
 80202f8:	2b10      	cmp	r3, #16
 80202fa:	d11b      	bne.n	8020334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	f06f 0210 	mvn.w	r2, #16
 8020304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	2208      	movs	r2, #8
 802030a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	69db      	ldr	r3, [r3, #28]
 8020312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020316:	2b00      	cmp	r3, #0
 8020318:	d003      	beq.n	8020322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802031a:	6878      	ldr	r0, [r7, #4]
 802031c:	f000 fa06 	bl	802072c <HAL_TIM_IC_CaptureCallback>
 8020320:	e005      	b.n	802032e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020322:	6878      	ldr	r0, [r7, #4]
 8020324:	f000 f9f8 	bl	8020718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020328:	6878      	ldr	r0, [r7, #4]
 802032a:	f000 fa09 	bl	8020740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	2200      	movs	r2, #0
 8020332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	691b      	ldr	r3, [r3, #16]
 802033a:	f003 0301 	and.w	r3, r3, #1
 802033e:	2b01      	cmp	r3, #1
 8020340:	d10e      	bne.n	8020360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	68db      	ldr	r3, [r3, #12]
 8020348:	f003 0301 	and.w	r3, r3, #1
 802034c:	2b01      	cmp	r3, #1
 802034e:	d107      	bne.n	8020360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	f06f 0201 	mvn.w	r2, #1
 8020358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802035a:	6878      	ldr	r0, [r7, #4]
 802035c:	f000 f9d2 	bl	8020704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	691b      	ldr	r3, [r3, #16]
 8020366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802036a:	2b80      	cmp	r3, #128	; 0x80
 802036c:	d10e      	bne.n	802038c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	68db      	ldr	r3, [r3, #12]
 8020374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020378:	2b80      	cmp	r3, #128	; 0x80
 802037a:	d107      	bne.n	802038c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8020386:	6878      	ldr	r0, [r7, #4]
 8020388:	f000 ff26 	bl	80211d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	681b      	ldr	r3, [r3, #0]
 8020390:	691b      	ldr	r3, [r3, #16]
 8020392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802039a:	d10e      	bne.n	80203ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	68db      	ldr	r3, [r3, #12]
 80203a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80203a6:	2b80      	cmp	r3, #128	; 0x80
 80203a8:	d107      	bne.n	80203ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80203b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80203b4:	6878      	ldr	r0, [r7, #4]
 80203b6:	f000 ff19 	bl	80211ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	691b      	ldr	r3, [r3, #16]
 80203c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80203c4:	2b40      	cmp	r3, #64	; 0x40
 80203c6:	d10e      	bne.n	80203e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	68db      	ldr	r3, [r3, #12]
 80203ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80203d2:	2b40      	cmp	r3, #64	; 0x40
 80203d4:	d107      	bne.n	80203e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	681b      	ldr	r3, [r3, #0]
 80203da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80203de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80203e0:	6878      	ldr	r0, [r7, #4]
 80203e2:	f000 f9b7 	bl	8020754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	691b      	ldr	r3, [r3, #16]
 80203ec:	f003 0320 	and.w	r3, r3, #32
 80203f0:	2b20      	cmp	r3, #32
 80203f2:	d10e      	bne.n	8020412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	68db      	ldr	r3, [r3, #12]
 80203fa:	f003 0320 	and.w	r3, r3, #32
 80203fe:	2b20      	cmp	r3, #32
 8020400:	d107      	bne.n	8020412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	f06f 0220 	mvn.w	r2, #32
 802040a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802040c:	6878      	ldr	r0, [r7, #4]
 802040e:	f000 fed9 	bl	80211c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	691b      	ldr	r3, [r3, #16]
 8020418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802041c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020420:	d10f      	bne.n	8020442 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	68db      	ldr	r3, [r3, #12]
 8020428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802042c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020430:	d107      	bne.n	8020442 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 802043a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 802043c:	6878      	ldr	r0, [r7, #4]
 802043e:	f000 fedf 	bl	8021200 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	691b      	ldr	r3, [r3, #16]
 8020448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802044c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8020450:	d10f      	bne.n	8020472 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	68db      	ldr	r3, [r3, #12]
 8020458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802045c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8020460:	d107      	bne.n	8020472 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 802046a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 802046c:	6878      	ldr	r0, [r7, #4]
 802046e:	f000 fed1 	bl	8021214 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	691b      	ldr	r3, [r3, #16]
 8020478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802047c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8020480:	d10f      	bne.n	80204a2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	681b      	ldr	r3, [r3, #0]
 8020486:	68db      	ldr	r3, [r3, #12]
 8020488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802048c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8020490:	d107      	bne.n	80204a2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	681b      	ldr	r3, [r3, #0]
 8020496:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 802049a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 802049c:	6878      	ldr	r0, [r7, #4]
 802049e:	f000 fec3 	bl	8021228 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	681b      	ldr	r3, [r3, #0]
 80204a6:	691b      	ldr	r3, [r3, #16]
 80204a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80204ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80204b0:	d10f      	bne.n	80204d2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	681b      	ldr	r3, [r3, #0]
 80204b6:	68db      	ldr	r3, [r3, #12]
 80204b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80204bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80204c0:	d107      	bne.n	80204d2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80204ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80204cc:	6878      	ldr	r0, [r7, #4]
 80204ce:	f000 feb5 	bl	802123c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80204d2:	bf00      	nop
 80204d4:	3708      	adds	r7, #8
 80204d6:	46bd      	mov	sp, r7
 80204d8:	bd80      	pop	{r7, pc}
	...

080204dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80204dc:	b580      	push	{r7, lr}
 80204de:	b086      	sub	sp, #24
 80204e0:	af00      	add	r7, sp, #0
 80204e2:	60f8      	str	r0, [r7, #12]
 80204e4:	60b9      	str	r1, [r7, #8]
 80204e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80204e8:	2300      	movs	r3, #0
 80204ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80204ec:	68fb      	ldr	r3, [r7, #12]
 80204ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80204f2:	2b01      	cmp	r3, #1
 80204f4:	d101      	bne.n	80204fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80204f6:	2302      	movs	r3, #2
 80204f8:	e0ff      	b.n	80206fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80204fa:	68fb      	ldr	r3, [r7, #12]
 80204fc:	2201      	movs	r2, #1
 80204fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	2b14      	cmp	r3, #20
 8020506:	f200 80f0 	bhi.w	80206ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 802050a:	a201      	add	r2, pc, #4	; (adr r2, 8020510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802050c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020510:	08020565 	.word	0x08020565
 8020514:	080206eb 	.word	0x080206eb
 8020518:	080206eb 	.word	0x080206eb
 802051c:	080206eb 	.word	0x080206eb
 8020520:	080205a5 	.word	0x080205a5
 8020524:	080206eb 	.word	0x080206eb
 8020528:	080206eb 	.word	0x080206eb
 802052c:	080206eb 	.word	0x080206eb
 8020530:	080205e7 	.word	0x080205e7
 8020534:	080206eb 	.word	0x080206eb
 8020538:	080206eb 	.word	0x080206eb
 802053c:	080206eb 	.word	0x080206eb
 8020540:	08020627 	.word	0x08020627
 8020544:	080206eb 	.word	0x080206eb
 8020548:	080206eb 	.word	0x080206eb
 802054c:	080206eb 	.word	0x080206eb
 8020550:	08020669 	.word	0x08020669
 8020554:	080206eb 	.word	0x080206eb
 8020558:	080206eb 	.word	0x080206eb
 802055c:	080206eb 	.word	0x080206eb
 8020560:	080206a9 	.word	0x080206a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020564:	68fb      	ldr	r3, [r7, #12]
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	68b9      	ldr	r1, [r7, #8]
 802056a:	4618      	mov	r0, r3
 802056c:	f000 f99a 	bl	80208a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	699a      	ldr	r2, [r3, #24]
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	f042 0208 	orr.w	r2, r2, #8
 802057e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	699a      	ldr	r2, [r3, #24]
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	f022 0204 	bic.w	r2, r2, #4
 802058e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	6999      	ldr	r1, [r3, #24]
 8020596:	68bb      	ldr	r3, [r7, #8]
 8020598:	691a      	ldr	r2, [r3, #16]
 802059a:	68fb      	ldr	r3, [r7, #12]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	430a      	orrs	r2, r1
 80205a0:	619a      	str	r2, [r3, #24]
      break;
 80205a2:	e0a5      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	68b9      	ldr	r1, [r7, #8]
 80205aa:	4618      	mov	r0, r3
 80205ac:	f000 fa14 	bl	80209d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80205b0:	68fb      	ldr	r3, [r7, #12]
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	699a      	ldr	r2, [r3, #24]
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80205be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	699a      	ldr	r2, [r3, #24]
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80205ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80205d0:	68fb      	ldr	r3, [r7, #12]
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	6999      	ldr	r1, [r3, #24]
 80205d6:	68bb      	ldr	r3, [r7, #8]
 80205d8:	691b      	ldr	r3, [r3, #16]
 80205da:	021a      	lsls	r2, r3, #8
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	681b      	ldr	r3, [r3, #0]
 80205e0:	430a      	orrs	r2, r1
 80205e2:	619a      	str	r2, [r3, #24]
      break;
 80205e4:	e084      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80205e6:	68fb      	ldr	r3, [r7, #12]
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	68b9      	ldr	r1, [r7, #8]
 80205ec:	4618      	mov	r0, r3
 80205ee:	f000 fa87 	bl	8020b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80205f2:	68fb      	ldr	r3, [r7, #12]
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	69da      	ldr	r2, [r3, #28]
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	f042 0208 	orr.w	r2, r2, #8
 8020600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020602:	68fb      	ldr	r3, [r7, #12]
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	69da      	ldr	r2, [r3, #28]
 8020608:	68fb      	ldr	r3, [r7, #12]
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	f022 0204 	bic.w	r2, r2, #4
 8020610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020612:	68fb      	ldr	r3, [r7, #12]
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	69d9      	ldr	r1, [r3, #28]
 8020618:	68bb      	ldr	r3, [r7, #8]
 802061a:	691a      	ldr	r2, [r3, #16]
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	681b      	ldr	r3, [r3, #0]
 8020620:	430a      	orrs	r2, r1
 8020622:	61da      	str	r2, [r3, #28]
      break;
 8020624:	e064      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	68b9      	ldr	r1, [r7, #8]
 802062c:	4618      	mov	r0, r3
 802062e:	f000 faf9 	bl	8020c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	681b      	ldr	r3, [r3, #0]
 8020636:	69da      	ldr	r2, [r3, #28]
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020642:	68fb      	ldr	r3, [r7, #12]
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	69da      	ldr	r2, [r3, #28]
 8020648:	68fb      	ldr	r3, [r7, #12]
 802064a:	681b      	ldr	r3, [r3, #0]
 802064c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020652:	68fb      	ldr	r3, [r7, #12]
 8020654:	681b      	ldr	r3, [r3, #0]
 8020656:	69d9      	ldr	r1, [r3, #28]
 8020658:	68bb      	ldr	r3, [r7, #8]
 802065a:	691b      	ldr	r3, [r3, #16]
 802065c:	021a      	lsls	r2, r3, #8
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	681b      	ldr	r3, [r3, #0]
 8020662:	430a      	orrs	r2, r1
 8020664:	61da      	str	r2, [r3, #28]
      break;
 8020666:	e043      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	681b      	ldr	r3, [r3, #0]
 802066c:	68b9      	ldr	r1, [r7, #8]
 802066e:	4618      	mov	r0, r3
 8020670:	f000 fb6c 	bl	8020d4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	f042 0208 	orr.w	r2, r2, #8
 8020682:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020684:	68fb      	ldr	r3, [r7, #12]
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	681b      	ldr	r3, [r3, #0]
 802068e:	f022 0204 	bic.w	r2, r2, #4
 8020692:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020694:	68fb      	ldr	r3, [r7, #12]
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	6d19      	ldr	r1, [r3, #80]	; 0x50
 802069a:	68bb      	ldr	r3, [r7, #8]
 802069c:	691a      	ldr	r2, [r3, #16]
 802069e:	68fb      	ldr	r3, [r7, #12]
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	430a      	orrs	r2, r1
 80206a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80206a6:	e023      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80206a8:	68fb      	ldr	r3, [r7, #12]
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	68b9      	ldr	r1, [r7, #8]
 80206ae:	4618      	mov	r0, r3
 80206b0:	f000 fbb6 	bl	8020e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80206c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80206d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80206da:	68bb      	ldr	r3, [r7, #8]
 80206dc:	691b      	ldr	r3, [r3, #16]
 80206de:	021a      	lsls	r2, r3, #8
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	430a      	orrs	r2, r1
 80206e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80206e8:	e002      	b.n	80206f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80206ea:	2301      	movs	r3, #1
 80206ec:	75fb      	strb	r3, [r7, #23]
      break;
 80206ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	2200      	movs	r2, #0
 80206f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80206f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80206fa:	4618      	mov	r0, r3
 80206fc:	3718      	adds	r7, #24
 80206fe:	46bd      	mov	sp, r7
 8020700:	bd80      	pop	{r7, pc}
 8020702:	bf00      	nop

08020704 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020704:	b480      	push	{r7}
 8020706:	b083      	sub	sp, #12
 8020708:	af00      	add	r7, sp, #0
 802070a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802070c:	bf00      	nop
 802070e:	370c      	adds	r7, #12
 8020710:	46bd      	mov	sp, r7
 8020712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020716:	4770      	bx	lr

08020718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020718:	b480      	push	{r7}
 802071a:	b083      	sub	sp, #12
 802071c:	af00      	add	r7, sp, #0
 802071e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020720:	bf00      	nop
 8020722:	370c      	adds	r7, #12
 8020724:	46bd      	mov	sp, r7
 8020726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802072a:	4770      	bx	lr

0802072c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802072c:	b480      	push	{r7}
 802072e:	b083      	sub	sp, #12
 8020730:	af00      	add	r7, sp, #0
 8020732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8020734:	bf00      	nop
 8020736:	370c      	adds	r7, #12
 8020738:	46bd      	mov	sp, r7
 802073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802073e:	4770      	bx	lr

08020740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8020740:	b480      	push	{r7}
 8020742:	b083      	sub	sp, #12
 8020744:	af00      	add	r7, sp, #0
 8020746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8020748:	bf00      	nop
 802074a:	370c      	adds	r7, #12
 802074c:	46bd      	mov	sp, r7
 802074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020752:	4770      	bx	lr

08020754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020754:	b480      	push	{r7}
 8020756:	b083      	sub	sp, #12
 8020758:	af00      	add	r7, sp, #0
 802075a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802075c:	bf00      	nop
 802075e:	370c      	adds	r7, #12
 8020760:	46bd      	mov	sp, r7
 8020762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020766:	4770      	bx	lr

08020768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020768:	b480      	push	{r7}
 802076a:	b085      	sub	sp, #20
 802076c:	af00      	add	r7, sp, #0
 802076e:	6078      	str	r0, [r7, #4]
 8020770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	4a42      	ldr	r2, [pc, #264]	; (8020884 <TIM_Base_SetConfig+0x11c>)
 802077c:	4293      	cmp	r3, r2
 802077e:	d013      	beq.n	80207a8 <TIM_Base_SetConfig+0x40>
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020786:	d00f      	beq.n	80207a8 <TIM_Base_SetConfig+0x40>
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	4a3f      	ldr	r2, [pc, #252]	; (8020888 <TIM_Base_SetConfig+0x120>)
 802078c:	4293      	cmp	r3, r2
 802078e:	d00b      	beq.n	80207a8 <TIM_Base_SetConfig+0x40>
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	4a3e      	ldr	r2, [pc, #248]	; (802088c <TIM_Base_SetConfig+0x124>)
 8020794:	4293      	cmp	r3, r2
 8020796:	d007      	beq.n	80207a8 <TIM_Base_SetConfig+0x40>
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	4a3d      	ldr	r2, [pc, #244]	; (8020890 <TIM_Base_SetConfig+0x128>)
 802079c:	4293      	cmp	r3, r2
 802079e:	d003      	beq.n	80207a8 <TIM_Base_SetConfig+0x40>
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	4a3c      	ldr	r2, [pc, #240]	; (8020894 <TIM_Base_SetConfig+0x12c>)
 80207a4:	4293      	cmp	r3, r2
 80207a6:	d108      	bne.n	80207ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80207ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80207b0:	683b      	ldr	r3, [r7, #0]
 80207b2:	685b      	ldr	r3, [r3, #4]
 80207b4:	68fa      	ldr	r2, [r7, #12]
 80207b6:	4313      	orrs	r3, r2
 80207b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	4a31      	ldr	r2, [pc, #196]	; (8020884 <TIM_Base_SetConfig+0x11c>)
 80207be:	4293      	cmp	r3, r2
 80207c0:	d01f      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80207c8:	d01b      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	4a2e      	ldr	r2, [pc, #184]	; (8020888 <TIM_Base_SetConfig+0x120>)
 80207ce:	4293      	cmp	r3, r2
 80207d0:	d017      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	4a2d      	ldr	r2, [pc, #180]	; (802088c <TIM_Base_SetConfig+0x124>)
 80207d6:	4293      	cmp	r3, r2
 80207d8:	d013      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	4a2c      	ldr	r2, [pc, #176]	; (8020890 <TIM_Base_SetConfig+0x128>)
 80207de:	4293      	cmp	r3, r2
 80207e0:	d00f      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207e2:	687b      	ldr	r3, [r7, #4]
 80207e4:	4a2c      	ldr	r2, [pc, #176]	; (8020898 <TIM_Base_SetConfig+0x130>)
 80207e6:	4293      	cmp	r3, r2
 80207e8:	d00b      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	4a2b      	ldr	r2, [pc, #172]	; (802089c <TIM_Base_SetConfig+0x134>)
 80207ee:	4293      	cmp	r3, r2
 80207f0:	d007      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	4a2a      	ldr	r2, [pc, #168]	; (80208a0 <TIM_Base_SetConfig+0x138>)
 80207f6:	4293      	cmp	r3, r2
 80207f8:	d003      	beq.n	8020802 <TIM_Base_SetConfig+0x9a>
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	4a25      	ldr	r2, [pc, #148]	; (8020894 <TIM_Base_SetConfig+0x12c>)
 80207fe:	4293      	cmp	r3, r2
 8020800:	d108      	bne.n	8020814 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802080a:	683b      	ldr	r3, [r7, #0]
 802080c:	68db      	ldr	r3, [r3, #12]
 802080e:	68fa      	ldr	r2, [r7, #12]
 8020810:	4313      	orrs	r3, r2
 8020812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802081a:	683b      	ldr	r3, [r7, #0]
 802081c:	695b      	ldr	r3, [r3, #20]
 802081e:	4313      	orrs	r3, r2
 8020820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	68fa      	ldr	r2, [r7, #12]
 8020826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020828:	683b      	ldr	r3, [r7, #0]
 802082a:	689a      	ldr	r2, [r3, #8]
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020830:	683b      	ldr	r3, [r7, #0]
 8020832:	681a      	ldr	r2, [r3, #0]
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	4a12      	ldr	r2, [pc, #72]	; (8020884 <TIM_Base_SetConfig+0x11c>)
 802083c:	4293      	cmp	r3, r2
 802083e:	d013      	beq.n	8020868 <TIM_Base_SetConfig+0x100>
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	4a13      	ldr	r2, [pc, #76]	; (8020890 <TIM_Base_SetConfig+0x128>)
 8020844:	4293      	cmp	r3, r2
 8020846:	d00f      	beq.n	8020868 <TIM_Base_SetConfig+0x100>
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	4a13      	ldr	r2, [pc, #76]	; (8020898 <TIM_Base_SetConfig+0x130>)
 802084c:	4293      	cmp	r3, r2
 802084e:	d00b      	beq.n	8020868 <TIM_Base_SetConfig+0x100>
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	4a12      	ldr	r2, [pc, #72]	; (802089c <TIM_Base_SetConfig+0x134>)
 8020854:	4293      	cmp	r3, r2
 8020856:	d007      	beq.n	8020868 <TIM_Base_SetConfig+0x100>
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	4a11      	ldr	r2, [pc, #68]	; (80208a0 <TIM_Base_SetConfig+0x138>)
 802085c:	4293      	cmp	r3, r2
 802085e:	d003      	beq.n	8020868 <TIM_Base_SetConfig+0x100>
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	4a0c      	ldr	r2, [pc, #48]	; (8020894 <TIM_Base_SetConfig+0x12c>)
 8020864:	4293      	cmp	r3, r2
 8020866:	d103      	bne.n	8020870 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020868:	683b      	ldr	r3, [r7, #0]
 802086a:	691a      	ldr	r2, [r3, #16]
 802086c:	687b      	ldr	r3, [r7, #4]
 802086e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2201      	movs	r2, #1
 8020874:	615a      	str	r2, [r3, #20]
}
 8020876:	bf00      	nop
 8020878:	3714      	adds	r7, #20
 802087a:	46bd      	mov	sp, r7
 802087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020880:	4770      	bx	lr
 8020882:	bf00      	nop
 8020884:	40012c00 	.word	0x40012c00
 8020888:	40000400 	.word	0x40000400
 802088c:	40000800 	.word	0x40000800
 8020890:	40013400 	.word	0x40013400
 8020894:	40015000 	.word	0x40015000
 8020898:	40014000 	.word	0x40014000
 802089c:	40014400 	.word	0x40014400
 80208a0:	40014800 	.word	0x40014800

080208a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80208a4:	b480      	push	{r7}
 80208a6:	b087      	sub	sp, #28
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	6078      	str	r0, [r7, #4]
 80208ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	6a1b      	ldr	r3, [r3, #32]
 80208b2:	f023 0201 	bic.w	r2, r3, #1
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	6a1b      	ldr	r3, [r3, #32]
 80208be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	685b      	ldr	r3, [r3, #4]
 80208c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	699b      	ldr	r3, [r3, #24]
 80208ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80208cc:	68fb      	ldr	r3, [r7, #12]
 80208ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80208d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	f023 0303 	bic.w	r3, r3, #3
 80208de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80208e0:	683b      	ldr	r3, [r7, #0]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	68fa      	ldr	r2, [r7, #12]
 80208e6:	4313      	orrs	r3, r2
 80208e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80208ea:	697b      	ldr	r3, [r7, #20]
 80208ec:	f023 0302 	bic.w	r3, r3, #2
 80208f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80208f2:	683b      	ldr	r3, [r7, #0]
 80208f4:	689b      	ldr	r3, [r3, #8]
 80208f6:	697a      	ldr	r2, [r7, #20]
 80208f8:	4313      	orrs	r3, r2
 80208fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	4a30      	ldr	r2, [pc, #192]	; (80209c0 <TIM_OC1_SetConfig+0x11c>)
 8020900:	4293      	cmp	r3, r2
 8020902:	d013      	beq.n	802092c <TIM_OC1_SetConfig+0x88>
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	4a2f      	ldr	r2, [pc, #188]	; (80209c4 <TIM_OC1_SetConfig+0x120>)
 8020908:	4293      	cmp	r3, r2
 802090a:	d00f      	beq.n	802092c <TIM_OC1_SetConfig+0x88>
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	4a2e      	ldr	r2, [pc, #184]	; (80209c8 <TIM_OC1_SetConfig+0x124>)
 8020910:	4293      	cmp	r3, r2
 8020912:	d00b      	beq.n	802092c <TIM_OC1_SetConfig+0x88>
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	4a2d      	ldr	r2, [pc, #180]	; (80209cc <TIM_OC1_SetConfig+0x128>)
 8020918:	4293      	cmp	r3, r2
 802091a:	d007      	beq.n	802092c <TIM_OC1_SetConfig+0x88>
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	4a2c      	ldr	r2, [pc, #176]	; (80209d0 <TIM_OC1_SetConfig+0x12c>)
 8020920:	4293      	cmp	r3, r2
 8020922:	d003      	beq.n	802092c <TIM_OC1_SetConfig+0x88>
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	4a2b      	ldr	r2, [pc, #172]	; (80209d4 <TIM_OC1_SetConfig+0x130>)
 8020928:	4293      	cmp	r3, r2
 802092a:	d10c      	bne.n	8020946 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802092c:	697b      	ldr	r3, [r7, #20]
 802092e:	f023 0308 	bic.w	r3, r3, #8
 8020932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020934:	683b      	ldr	r3, [r7, #0]
 8020936:	68db      	ldr	r3, [r3, #12]
 8020938:	697a      	ldr	r2, [r7, #20]
 802093a:	4313      	orrs	r3, r2
 802093c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	f023 0304 	bic.w	r3, r3, #4
 8020944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	4a1d      	ldr	r2, [pc, #116]	; (80209c0 <TIM_OC1_SetConfig+0x11c>)
 802094a:	4293      	cmp	r3, r2
 802094c:	d013      	beq.n	8020976 <TIM_OC1_SetConfig+0xd2>
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	4a1c      	ldr	r2, [pc, #112]	; (80209c4 <TIM_OC1_SetConfig+0x120>)
 8020952:	4293      	cmp	r3, r2
 8020954:	d00f      	beq.n	8020976 <TIM_OC1_SetConfig+0xd2>
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	4a1b      	ldr	r2, [pc, #108]	; (80209c8 <TIM_OC1_SetConfig+0x124>)
 802095a:	4293      	cmp	r3, r2
 802095c:	d00b      	beq.n	8020976 <TIM_OC1_SetConfig+0xd2>
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	4a1a      	ldr	r2, [pc, #104]	; (80209cc <TIM_OC1_SetConfig+0x128>)
 8020962:	4293      	cmp	r3, r2
 8020964:	d007      	beq.n	8020976 <TIM_OC1_SetConfig+0xd2>
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	4a19      	ldr	r2, [pc, #100]	; (80209d0 <TIM_OC1_SetConfig+0x12c>)
 802096a:	4293      	cmp	r3, r2
 802096c:	d003      	beq.n	8020976 <TIM_OC1_SetConfig+0xd2>
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	4a18      	ldr	r2, [pc, #96]	; (80209d4 <TIM_OC1_SetConfig+0x130>)
 8020972:	4293      	cmp	r3, r2
 8020974:	d111      	bne.n	802099a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020976:	693b      	ldr	r3, [r7, #16]
 8020978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802097c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802097e:	693b      	ldr	r3, [r7, #16]
 8020980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	695b      	ldr	r3, [r3, #20]
 802098a:	693a      	ldr	r2, [r7, #16]
 802098c:	4313      	orrs	r3, r2
 802098e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020990:	683b      	ldr	r3, [r7, #0]
 8020992:	699b      	ldr	r3, [r3, #24]
 8020994:	693a      	ldr	r2, [r7, #16]
 8020996:	4313      	orrs	r3, r2
 8020998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	693a      	ldr	r2, [r7, #16]
 802099e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	68fa      	ldr	r2, [r7, #12]
 80209a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	685a      	ldr	r2, [r3, #4]
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	697a      	ldr	r2, [r7, #20]
 80209b2:	621a      	str	r2, [r3, #32]
}
 80209b4:	bf00      	nop
 80209b6:	371c      	adds	r7, #28
 80209b8:	46bd      	mov	sp, r7
 80209ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209be:	4770      	bx	lr
 80209c0:	40012c00 	.word	0x40012c00
 80209c4:	40013400 	.word	0x40013400
 80209c8:	40014000 	.word	0x40014000
 80209cc:	40014400 	.word	0x40014400
 80209d0:	40014800 	.word	0x40014800
 80209d4:	40015000 	.word	0x40015000

080209d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80209d8:	b480      	push	{r7}
 80209da:	b087      	sub	sp, #28
 80209dc:	af00      	add	r7, sp, #0
 80209de:	6078      	str	r0, [r7, #4]
 80209e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80209e2:	687b      	ldr	r3, [r7, #4]
 80209e4:	6a1b      	ldr	r3, [r3, #32]
 80209e6:	f023 0210 	bic.w	r2, r3, #16
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	6a1b      	ldr	r3, [r3, #32]
 80209f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	685b      	ldr	r3, [r3, #4]
 80209f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	699b      	ldr	r3, [r3, #24]
 80209fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8020a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020a14:	683b      	ldr	r3, [r7, #0]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	021b      	lsls	r3, r3, #8
 8020a1a:	68fa      	ldr	r2, [r7, #12]
 8020a1c:	4313      	orrs	r3, r2
 8020a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020a20:	697b      	ldr	r3, [r7, #20]
 8020a22:	f023 0320 	bic.w	r3, r3, #32
 8020a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020a28:	683b      	ldr	r3, [r7, #0]
 8020a2a:	689b      	ldr	r3, [r3, #8]
 8020a2c:	011b      	lsls	r3, r3, #4
 8020a2e:	697a      	ldr	r2, [r7, #20]
 8020a30:	4313      	orrs	r3, r2
 8020a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	4a2c      	ldr	r2, [pc, #176]	; (8020ae8 <TIM_OC2_SetConfig+0x110>)
 8020a38:	4293      	cmp	r3, r2
 8020a3a:	d007      	beq.n	8020a4c <TIM_OC2_SetConfig+0x74>
 8020a3c:	687b      	ldr	r3, [r7, #4]
 8020a3e:	4a2b      	ldr	r2, [pc, #172]	; (8020aec <TIM_OC2_SetConfig+0x114>)
 8020a40:	4293      	cmp	r3, r2
 8020a42:	d003      	beq.n	8020a4c <TIM_OC2_SetConfig+0x74>
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	4a2a      	ldr	r2, [pc, #168]	; (8020af0 <TIM_OC2_SetConfig+0x118>)
 8020a48:	4293      	cmp	r3, r2
 8020a4a:	d10d      	bne.n	8020a68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020a4c:	697b      	ldr	r3, [r7, #20]
 8020a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020a54:	683b      	ldr	r3, [r7, #0]
 8020a56:	68db      	ldr	r3, [r3, #12]
 8020a58:	011b      	lsls	r3, r3, #4
 8020a5a:	697a      	ldr	r2, [r7, #20]
 8020a5c:	4313      	orrs	r3, r2
 8020a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020a60:	697b      	ldr	r3, [r7, #20]
 8020a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	4a1f      	ldr	r2, [pc, #124]	; (8020ae8 <TIM_OC2_SetConfig+0x110>)
 8020a6c:	4293      	cmp	r3, r2
 8020a6e:	d013      	beq.n	8020a98 <TIM_OC2_SetConfig+0xc0>
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	4a1e      	ldr	r2, [pc, #120]	; (8020aec <TIM_OC2_SetConfig+0x114>)
 8020a74:	4293      	cmp	r3, r2
 8020a76:	d00f      	beq.n	8020a98 <TIM_OC2_SetConfig+0xc0>
 8020a78:	687b      	ldr	r3, [r7, #4]
 8020a7a:	4a1e      	ldr	r2, [pc, #120]	; (8020af4 <TIM_OC2_SetConfig+0x11c>)
 8020a7c:	4293      	cmp	r3, r2
 8020a7e:	d00b      	beq.n	8020a98 <TIM_OC2_SetConfig+0xc0>
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	4a1d      	ldr	r2, [pc, #116]	; (8020af8 <TIM_OC2_SetConfig+0x120>)
 8020a84:	4293      	cmp	r3, r2
 8020a86:	d007      	beq.n	8020a98 <TIM_OC2_SetConfig+0xc0>
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	4a1c      	ldr	r2, [pc, #112]	; (8020afc <TIM_OC2_SetConfig+0x124>)
 8020a8c:	4293      	cmp	r3, r2
 8020a8e:	d003      	beq.n	8020a98 <TIM_OC2_SetConfig+0xc0>
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	4a17      	ldr	r2, [pc, #92]	; (8020af0 <TIM_OC2_SetConfig+0x118>)
 8020a94:	4293      	cmp	r3, r2
 8020a96:	d113      	bne.n	8020ac0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020a98:	693b      	ldr	r3, [r7, #16]
 8020a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020aa0:	693b      	ldr	r3, [r7, #16]
 8020aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020aa8:	683b      	ldr	r3, [r7, #0]
 8020aaa:	695b      	ldr	r3, [r3, #20]
 8020aac:	009b      	lsls	r3, r3, #2
 8020aae:	693a      	ldr	r2, [r7, #16]
 8020ab0:	4313      	orrs	r3, r2
 8020ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020ab4:	683b      	ldr	r3, [r7, #0]
 8020ab6:	699b      	ldr	r3, [r3, #24]
 8020ab8:	009b      	lsls	r3, r3, #2
 8020aba:	693a      	ldr	r2, [r7, #16]
 8020abc:	4313      	orrs	r3, r2
 8020abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	693a      	ldr	r2, [r7, #16]
 8020ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	68fa      	ldr	r2, [r7, #12]
 8020aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020acc:	683b      	ldr	r3, [r7, #0]
 8020ace:	685a      	ldr	r2, [r3, #4]
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	697a      	ldr	r2, [r7, #20]
 8020ad8:	621a      	str	r2, [r3, #32]
}
 8020ada:	bf00      	nop
 8020adc:	371c      	adds	r7, #28
 8020ade:	46bd      	mov	sp, r7
 8020ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae4:	4770      	bx	lr
 8020ae6:	bf00      	nop
 8020ae8:	40012c00 	.word	0x40012c00
 8020aec:	40013400 	.word	0x40013400
 8020af0:	40015000 	.word	0x40015000
 8020af4:	40014000 	.word	0x40014000
 8020af8:	40014400 	.word	0x40014400
 8020afc:	40014800 	.word	0x40014800

08020b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020b00:	b480      	push	{r7}
 8020b02:	b087      	sub	sp, #28
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
 8020b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	6a1b      	ldr	r3, [r3, #32]
 8020b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	6a1b      	ldr	r3, [r3, #32]
 8020b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	685b      	ldr	r3, [r3, #4]
 8020b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	69db      	ldr	r3, [r3, #28]
 8020b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020b28:	68fb      	ldr	r3, [r7, #12]
 8020b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020b34:	68fb      	ldr	r3, [r7, #12]
 8020b36:	f023 0303 	bic.w	r3, r3, #3
 8020b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020b3c:	683b      	ldr	r3, [r7, #0]
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	68fa      	ldr	r2, [r7, #12]
 8020b42:	4313      	orrs	r3, r2
 8020b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020b46:	697b      	ldr	r3, [r7, #20]
 8020b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020b4e:	683b      	ldr	r3, [r7, #0]
 8020b50:	689b      	ldr	r3, [r3, #8]
 8020b52:	021b      	lsls	r3, r3, #8
 8020b54:	697a      	ldr	r2, [r7, #20]
 8020b56:	4313      	orrs	r3, r2
 8020b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	4a2b      	ldr	r2, [pc, #172]	; (8020c0c <TIM_OC3_SetConfig+0x10c>)
 8020b5e:	4293      	cmp	r3, r2
 8020b60:	d007      	beq.n	8020b72 <TIM_OC3_SetConfig+0x72>
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	4a2a      	ldr	r2, [pc, #168]	; (8020c10 <TIM_OC3_SetConfig+0x110>)
 8020b66:	4293      	cmp	r3, r2
 8020b68:	d003      	beq.n	8020b72 <TIM_OC3_SetConfig+0x72>
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	4a29      	ldr	r2, [pc, #164]	; (8020c14 <TIM_OC3_SetConfig+0x114>)
 8020b6e:	4293      	cmp	r3, r2
 8020b70:	d10d      	bne.n	8020b8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020b7a:	683b      	ldr	r3, [r7, #0]
 8020b7c:	68db      	ldr	r3, [r3, #12]
 8020b7e:	021b      	lsls	r3, r3, #8
 8020b80:	697a      	ldr	r2, [r7, #20]
 8020b82:	4313      	orrs	r3, r2
 8020b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020b86:	697b      	ldr	r3, [r7, #20]
 8020b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	4a1e      	ldr	r2, [pc, #120]	; (8020c0c <TIM_OC3_SetConfig+0x10c>)
 8020b92:	4293      	cmp	r3, r2
 8020b94:	d013      	beq.n	8020bbe <TIM_OC3_SetConfig+0xbe>
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	4a1d      	ldr	r2, [pc, #116]	; (8020c10 <TIM_OC3_SetConfig+0x110>)
 8020b9a:	4293      	cmp	r3, r2
 8020b9c:	d00f      	beq.n	8020bbe <TIM_OC3_SetConfig+0xbe>
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	4a1d      	ldr	r2, [pc, #116]	; (8020c18 <TIM_OC3_SetConfig+0x118>)
 8020ba2:	4293      	cmp	r3, r2
 8020ba4:	d00b      	beq.n	8020bbe <TIM_OC3_SetConfig+0xbe>
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	4a1c      	ldr	r2, [pc, #112]	; (8020c1c <TIM_OC3_SetConfig+0x11c>)
 8020baa:	4293      	cmp	r3, r2
 8020bac:	d007      	beq.n	8020bbe <TIM_OC3_SetConfig+0xbe>
 8020bae:	687b      	ldr	r3, [r7, #4]
 8020bb0:	4a1b      	ldr	r2, [pc, #108]	; (8020c20 <TIM_OC3_SetConfig+0x120>)
 8020bb2:	4293      	cmp	r3, r2
 8020bb4:	d003      	beq.n	8020bbe <TIM_OC3_SetConfig+0xbe>
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	4a16      	ldr	r2, [pc, #88]	; (8020c14 <TIM_OC3_SetConfig+0x114>)
 8020bba:	4293      	cmp	r3, r2
 8020bbc:	d113      	bne.n	8020be6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020bbe:	693b      	ldr	r3, [r7, #16]
 8020bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020bc6:	693b      	ldr	r3, [r7, #16]
 8020bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020bce:	683b      	ldr	r3, [r7, #0]
 8020bd0:	695b      	ldr	r3, [r3, #20]
 8020bd2:	011b      	lsls	r3, r3, #4
 8020bd4:	693a      	ldr	r2, [r7, #16]
 8020bd6:	4313      	orrs	r3, r2
 8020bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	699b      	ldr	r3, [r3, #24]
 8020bde:	011b      	lsls	r3, r3, #4
 8020be0:	693a      	ldr	r2, [r7, #16]
 8020be2:	4313      	orrs	r3, r2
 8020be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	693a      	ldr	r2, [r7, #16]
 8020bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	68fa      	ldr	r2, [r7, #12]
 8020bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	685a      	ldr	r2, [r3, #4]
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	697a      	ldr	r2, [r7, #20]
 8020bfe:	621a      	str	r2, [r3, #32]
}
 8020c00:	bf00      	nop
 8020c02:	371c      	adds	r7, #28
 8020c04:	46bd      	mov	sp, r7
 8020c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0a:	4770      	bx	lr
 8020c0c:	40012c00 	.word	0x40012c00
 8020c10:	40013400 	.word	0x40013400
 8020c14:	40015000 	.word	0x40015000
 8020c18:	40014000 	.word	0x40014000
 8020c1c:	40014400 	.word	0x40014400
 8020c20:	40014800 	.word	0x40014800

08020c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020c24:	b480      	push	{r7}
 8020c26:	b087      	sub	sp, #28
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	6078      	str	r0, [r7, #4]
 8020c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	6a1b      	ldr	r3, [r3, #32]
 8020c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	6a1b      	ldr	r3, [r3, #32]
 8020c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	685b      	ldr	r3, [r3, #4]
 8020c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	69db      	ldr	r3, [r3, #28]
 8020c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8020c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020c58:	68fb      	ldr	r3, [r7, #12]
 8020c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020c60:	683b      	ldr	r3, [r7, #0]
 8020c62:	681b      	ldr	r3, [r3, #0]
 8020c64:	021b      	lsls	r3, r3, #8
 8020c66:	68fa      	ldr	r2, [r7, #12]
 8020c68:	4313      	orrs	r3, r2
 8020c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020c6c:	697b      	ldr	r3, [r7, #20]
 8020c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020c74:	683b      	ldr	r3, [r7, #0]
 8020c76:	689b      	ldr	r3, [r3, #8]
 8020c78:	031b      	lsls	r3, r3, #12
 8020c7a:	697a      	ldr	r2, [r7, #20]
 8020c7c:	4313      	orrs	r3, r2
 8020c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	4a2c      	ldr	r2, [pc, #176]	; (8020d34 <TIM_OC4_SetConfig+0x110>)
 8020c84:	4293      	cmp	r3, r2
 8020c86:	d007      	beq.n	8020c98 <TIM_OC4_SetConfig+0x74>
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	4a2b      	ldr	r2, [pc, #172]	; (8020d38 <TIM_OC4_SetConfig+0x114>)
 8020c8c:	4293      	cmp	r3, r2
 8020c8e:	d003      	beq.n	8020c98 <TIM_OC4_SetConfig+0x74>
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	4a2a      	ldr	r2, [pc, #168]	; (8020d3c <TIM_OC4_SetConfig+0x118>)
 8020c94:	4293      	cmp	r3, r2
 8020c96:	d10d      	bne.n	8020cb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8020c98:	697b      	ldr	r3, [r7, #20]
 8020c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8020c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8020ca0:	683b      	ldr	r3, [r7, #0]
 8020ca2:	68db      	ldr	r3, [r3, #12]
 8020ca4:	031b      	lsls	r3, r3, #12
 8020ca6:	697a      	ldr	r2, [r7, #20]
 8020ca8:	4313      	orrs	r3, r2
 8020caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8020cac:	697b      	ldr	r3, [r7, #20]
 8020cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	4a1f      	ldr	r2, [pc, #124]	; (8020d34 <TIM_OC4_SetConfig+0x110>)
 8020cb8:	4293      	cmp	r3, r2
 8020cba:	d013      	beq.n	8020ce4 <TIM_OC4_SetConfig+0xc0>
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	4a1e      	ldr	r2, [pc, #120]	; (8020d38 <TIM_OC4_SetConfig+0x114>)
 8020cc0:	4293      	cmp	r3, r2
 8020cc2:	d00f      	beq.n	8020ce4 <TIM_OC4_SetConfig+0xc0>
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	4a1e      	ldr	r2, [pc, #120]	; (8020d40 <TIM_OC4_SetConfig+0x11c>)
 8020cc8:	4293      	cmp	r3, r2
 8020cca:	d00b      	beq.n	8020ce4 <TIM_OC4_SetConfig+0xc0>
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	4a1d      	ldr	r2, [pc, #116]	; (8020d44 <TIM_OC4_SetConfig+0x120>)
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	d007      	beq.n	8020ce4 <TIM_OC4_SetConfig+0xc0>
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	4a1c      	ldr	r2, [pc, #112]	; (8020d48 <TIM_OC4_SetConfig+0x124>)
 8020cd8:	4293      	cmp	r3, r2
 8020cda:	d003      	beq.n	8020ce4 <TIM_OC4_SetConfig+0xc0>
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	4a17      	ldr	r2, [pc, #92]	; (8020d3c <TIM_OC4_SetConfig+0x118>)
 8020ce0:	4293      	cmp	r3, r2
 8020ce2:	d113      	bne.n	8020d0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020ce4:	693b      	ldr	r3, [r7, #16]
 8020ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020cea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8020cec:	693b      	ldr	r3, [r7, #16]
 8020cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8020cf2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020cf4:	683b      	ldr	r3, [r7, #0]
 8020cf6:	695b      	ldr	r3, [r3, #20]
 8020cf8:	019b      	lsls	r3, r3, #6
 8020cfa:	693a      	ldr	r2, [r7, #16]
 8020cfc:	4313      	orrs	r3, r2
 8020cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8020d00:	683b      	ldr	r3, [r7, #0]
 8020d02:	699b      	ldr	r3, [r3, #24]
 8020d04:	019b      	lsls	r3, r3, #6
 8020d06:	693a      	ldr	r2, [r7, #16]
 8020d08:	4313      	orrs	r3, r2
 8020d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d0c:	687b      	ldr	r3, [r7, #4]
 8020d0e:	693a      	ldr	r2, [r7, #16]
 8020d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020d12:	687b      	ldr	r3, [r7, #4]
 8020d14:	68fa      	ldr	r2, [r7, #12]
 8020d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020d18:	683b      	ldr	r3, [r7, #0]
 8020d1a:	685a      	ldr	r2, [r3, #4]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	697a      	ldr	r2, [r7, #20]
 8020d24:	621a      	str	r2, [r3, #32]
}
 8020d26:	bf00      	nop
 8020d28:	371c      	adds	r7, #28
 8020d2a:	46bd      	mov	sp, r7
 8020d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d30:	4770      	bx	lr
 8020d32:	bf00      	nop
 8020d34:	40012c00 	.word	0x40012c00
 8020d38:	40013400 	.word	0x40013400
 8020d3c:	40015000 	.word	0x40015000
 8020d40:	40014000 	.word	0x40014000
 8020d44:	40014400 	.word	0x40014400
 8020d48:	40014800 	.word	0x40014800

08020d4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020d4c:	b480      	push	{r7}
 8020d4e:	b087      	sub	sp, #28
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	6078      	str	r0, [r7, #4]
 8020d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	6a1b      	ldr	r3, [r3, #32]
 8020d5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020d5e:	687b      	ldr	r3, [r7, #4]
 8020d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	6a1b      	ldr	r3, [r3, #32]
 8020d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020d74:	68fb      	ldr	r3, [r7, #12]
 8020d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	68fa      	ldr	r2, [r7, #12]
 8020d86:	4313      	orrs	r3, r2
 8020d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020d90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8020d92:	683b      	ldr	r3, [r7, #0]
 8020d94:	689b      	ldr	r3, [r3, #8]
 8020d96:	041b      	lsls	r3, r3, #16
 8020d98:	693a      	ldr	r2, [r7, #16]
 8020d9a:	4313      	orrs	r3, r2
 8020d9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	4a19      	ldr	r2, [pc, #100]	; (8020e08 <TIM_OC5_SetConfig+0xbc>)
 8020da2:	4293      	cmp	r3, r2
 8020da4:	d013      	beq.n	8020dce <TIM_OC5_SetConfig+0x82>
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	4a18      	ldr	r2, [pc, #96]	; (8020e0c <TIM_OC5_SetConfig+0xc0>)
 8020daa:	4293      	cmp	r3, r2
 8020dac:	d00f      	beq.n	8020dce <TIM_OC5_SetConfig+0x82>
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	4a17      	ldr	r2, [pc, #92]	; (8020e10 <TIM_OC5_SetConfig+0xc4>)
 8020db2:	4293      	cmp	r3, r2
 8020db4:	d00b      	beq.n	8020dce <TIM_OC5_SetConfig+0x82>
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	4a16      	ldr	r2, [pc, #88]	; (8020e14 <TIM_OC5_SetConfig+0xc8>)
 8020dba:	4293      	cmp	r3, r2
 8020dbc:	d007      	beq.n	8020dce <TIM_OC5_SetConfig+0x82>
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	4a15      	ldr	r2, [pc, #84]	; (8020e18 <TIM_OC5_SetConfig+0xcc>)
 8020dc2:	4293      	cmp	r3, r2
 8020dc4:	d003      	beq.n	8020dce <TIM_OC5_SetConfig+0x82>
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	4a14      	ldr	r2, [pc, #80]	; (8020e1c <TIM_OC5_SetConfig+0xd0>)
 8020dca:	4293      	cmp	r3, r2
 8020dcc:	d109      	bne.n	8020de2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020dce:	697b      	ldr	r3, [r7, #20]
 8020dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8020dd6:	683b      	ldr	r3, [r7, #0]
 8020dd8:	695b      	ldr	r3, [r3, #20]
 8020dda:	021b      	lsls	r3, r3, #8
 8020ddc:	697a      	ldr	r2, [r7, #20]
 8020dde:	4313      	orrs	r3, r2
 8020de0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	697a      	ldr	r2, [r7, #20]
 8020de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	68fa      	ldr	r2, [r7, #12]
 8020dec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020dee:	683b      	ldr	r3, [r7, #0]
 8020df0:	685a      	ldr	r2, [r3, #4]
 8020df2:	687b      	ldr	r3, [r7, #4]
 8020df4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	693a      	ldr	r2, [r7, #16]
 8020dfa:	621a      	str	r2, [r3, #32]
}
 8020dfc:	bf00      	nop
 8020dfe:	371c      	adds	r7, #28
 8020e00:	46bd      	mov	sp, r7
 8020e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e06:	4770      	bx	lr
 8020e08:	40012c00 	.word	0x40012c00
 8020e0c:	40013400 	.word	0x40013400
 8020e10:	40014000 	.word	0x40014000
 8020e14:	40014400 	.word	0x40014400
 8020e18:	40014800 	.word	0x40014800
 8020e1c:	40015000 	.word	0x40015000

08020e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020e20:	b480      	push	{r7}
 8020e22:	b087      	sub	sp, #28
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	6078      	str	r0, [r7, #4]
 8020e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	6a1b      	ldr	r3, [r3, #32]
 8020e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	6a1b      	ldr	r3, [r3, #32]
 8020e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	685b      	ldr	r3, [r3, #4]
 8020e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8020e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020e54:	683b      	ldr	r3, [r7, #0]
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	021b      	lsls	r3, r3, #8
 8020e5a:	68fa      	ldr	r2, [r7, #12]
 8020e5c:	4313      	orrs	r3, r2
 8020e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020e60:	693b      	ldr	r3, [r7, #16]
 8020e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8020e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020e68:	683b      	ldr	r3, [r7, #0]
 8020e6a:	689b      	ldr	r3, [r3, #8]
 8020e6c:	051b      	lsls	r3, r3, #20
 8020e6e:	693a      	ldr	r2, [r7, #16]
 8020e70:	4313      	orrs	r3, r2
 8020e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	4a1a      	ldr	r2, [pc, #104]	; (8020ee0 <TIM_OC6_SetConfig+0xc0>)
 8020e78:	4293      	cmp	r3, r2
 8020e7a:	d013      	beq.n	8020ea4 <TIM_OC6_SetConfig+0x84>
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	4a19      	ldr	r2, [pc, #100]	; (8020ee4 <TIM_OC6_SetConfig+0xc4>)
 8020e80:	4293      	cmp	r3, r2
 8020e82:	d00f      	beq.n	8020ea4 <TIM_OC6_SetConfig+0x84>
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	4a18      	ldr	r2, [pc, #96]	; (8020ee8 <TIM_OC6_SetConfig+0xc8>)
 8020e88:	4293      	cmp	r3, r2
 8020e8a:	d00b      	beq.n	8020ea4 <TIM_OC6_SetConfig+0x84>
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	4a17      	ldr	r2, [pc, #92]	; (8020eec <TIM_OC6_SetConfig+0xcc>)
 8020e90:	4293      	cmp	r3, r2
 8020e92:	d007      	beq.n	8020ea4 <TIM_OC6_SetConfig+0x84>
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	4a16      	ldr	r2, [pc, #88]	; (8020ef0 <TIM_OC6_SetConfig+0xd0>)
 8020e98:	4293      	cmp	r3, r2
 8020e9a:	d003      	beq.n	8020ea4 <TIM_OC6_SetConfig+0x84>
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	4a15      	ldr	r2, [pc, #84]	; (8020ef4 <TIM_OC6_SetConfig+0xd4>)
 8020ea0:	4293      	cmp	r3, r2
 8020ea2:	d109      	bne.n	8020eb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020ea4:	697b      	ldr	r3, [r7, #20]
 8020ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020eac:	683b      	ldr	r3, [r7, #0]
 8020eae:	695b      	ldr	r3, [r3, #20]
 8020eb0:	029b      	lsls	r3, r3, #10
 8020eb2:	697a      	ldr	r2, [r7, #20]
 8020eb4:	4313      	orrs	r3, r2
 8020eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	697a      	ldr	r2, [r7, #20]
 8020ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	68fa      	ldr	r2, [r7, #12]
 8020ec2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020ec4:	683b      	ldr	r3, [r7, #0]
 8020ec6:	685a      	ldr	r2, [r3, #4]
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	693a      	ldr	r2, [r7, #16]
 8020ed0:	621a      	str	r2, [r3, #32]
}
 8020ed2:	bf00      	nop
 8020ed4:	371c      	adds	r7, #28
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020edc:	4770      	bx	lr
 8020ede:	bf00      	nop
 8020ee0:	40012c00 	.word	0x40012c00
 8020ee4:	40013400 	.word	0x40013400
 8020ee8:	40014000 	.word	0x40014000
 8020eec:	40014400 	.word	0x40014400
 8020ef0:	40014800 	.word	0x40014800
 8020ef4:	40015000 	.word	0x40015000

08020ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020ef8:	b480      	push	{r7}
 8020efa:	b087      	sub	sp, #28
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	60f8      	str	r0, [r7, #12]
 8020f00:	60b9      	str	r1, [r7, #8]
 8020f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020f04:	68bb      	ldr	r3, [r7, #8]
 8020f06:	f003 031f 	and.w	r3, r3, #31
 8020f0a:	2201      	movs	r2, #1
 8020f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8020f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	6a1a      	ldr	r2, [r3, #32]
 8020f16:	697b      	ldr	r3, [r7, #20]
 8020f18:	43db      	mvns	r3, r3
 8020f1a:	401a      	ands	r2, r3
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	6a1a      	ldr	r2, [r3, #32]
 8020f24:	68bb      	ldr	r3, [r7, #8]
 8020f26:	f003 031f 	and.w	r3, r3, #31
 8020f2a:	6879      	ldr	r1, [r7, #4]
 8020f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8020f30:	431a      	orrs	r2, r3
 8020f32:	68fb      	ldr	r3, [r7, #12]
 8020f34:	621a      	str	r2, [r3, #32]
}
 8020f36:	bf00      	nop
 8020f38:	371c      	adds	r7, #28
 8020f3a:	46bd      	mov	sp, r7
 8020f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f40:	4770      	bx	lr
	...

08020f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020f44:	b480      	push	{r7}
 8020f46:	b085      	sub	sp, #20
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
 8020f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020f54:	2b01      	cmp	r3, #1
 8020f56:	d101      	bne.n	8020f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020f58:	2302      	movs	r3, #2
 8020f5a:	e06f      	b.n	802103c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	2201      	movs	r2, #1
 8020f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	2202      	movs	r2, #2
 8020f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	685b      	ldr	r3, [r3, #4]
 8020f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	689b      	ldr	r3, [r3, #8]
 8020f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	4a31      	ldr	r2, [pc, #196]	; (8021048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020f82:	4293      	cmp	r3, r2
 8020f84:	d009      	beq.n	8020f9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	681b      	ldr	r3, [r3, #0]
 8020f8a:	4a30      	ldr	r2, [pc, #192]	; (802104c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8020f8c:	4293      	cmp	r3, r2
 8020f8e:	d004      	beq.n	8020f9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	4a2e      	ldr	r2, [pc, #184]	; (8021050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020f96:	4293      	cmp	r3, r2
 8020f98:	d108      	bne.n	8020fac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020f9a:	68fb      	ldr	r3, [r7, #12]
 8020f9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8020fa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	685b      	ldr	r3, [r3, #4]
 8020fa6:	68fa      	ldr	r2, [r7, #12]
 8020fa8:	4313      	orrs	r3, r2
 8020faa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8020fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020fb8:	683b      	ldr	r3, [r7, #0]
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	68fa      	ldr	r2, [r7, #12]
 8020fbe:	4313      	orrs	r3, r2
 8020fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	68fa      	ldr	r2, [r7, #12]
 8020fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	4a1e      	ldr	r2, [pc, #120]	; (8021048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020fd0:	4293      	cmp	r3, r2
 8020fd2:	d01d      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020fdc:	d018      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	4a1c      	ldr	r2, [pc, #112]	; (8021054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020fe4:	4293      	cmp	r3, r2
 8020fe6:	d013      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	4a1a      	ldr	r2, [pc, #104]	; (8021058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020fee:	4293      	cmp	r3, r2
 8020ff0:	d00e      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	681b      	ldr	r3, [r3, #0]
 8020ff6:	4a15      	ldr	r2, [pc, #84]	; (802104c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8020ff8:	4293      	cmp	r3, r2
 8020ffa:	d009      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	681b      	ldr	r3, [r3, #0]
 8021000:	4a16      	ldr	r2, [pc, #88]	; (802105c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8021002:	4293      	cmp	r3, r2
 8021004:	d004      	beq.n	8021010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	681b      	ldr	r3, [r3, #0]
 802100a:	4a11      	ldr	r2, [pc, #68]	; (8021050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802100c:	4293      	cmp	r3, r2
 802100e:	d10c      	bne.n	802102a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021010:	68bb      	ldr	r3, [r7, #8]
 8021012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021018:	683b      	ldr	r3, [r7, #0]
 802101a:	689b      	ldr	r3, [r3, #8]
 802101c:	68ba      	ldr	r2, [r7, #8]
 802101e:	4313      	orrs	r3, r2
 8021020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	68ba      	ldr	r2, [r7, #8]
 8021028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	2201      	movs	r2, #1
 802102e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	2200      	movs	r2, #0
 8021036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802103a:	2300      	movs	r3, #0
}
 802103c:	4618      	mov	r0, r3
 802103e:	3714      	adds	r7, #20
 8021040:	46bd      	mov	sp, r7
 8021042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021046:	4770      	bx	lr
 8021048:	40012c00 	.word	0x40012c00
 802104c:	40013400 	.word	0x40013400
 8021050:	40015000 	.word	0x40015000
 8021054:	40000400 	.word	0x40000400
 8021058:	40000800 	.word	0x40000800
 802105c:	40014000 	.word	0x40014000

08021060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8021060:	b480      	push	{r7}
 8021062:	b085      	sub	sp, #20
 8021064:	af00      	add	r7, sp, #0
 8021066:	6078      	str	r0, [r7, #4]
 8021068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802106a:	2300      	movs	r3, #0
 802106c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021074:	2b01      	cmp	r3, #1
 8021076:	d101      	bne.n	802107c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8021078:	2302      	movs	r3, #2
 802107a:	e096      	b.n	80211aa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	2201      	movs	r2, #1
 8021080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8021084:	68fb      	ldr	r3, [r7, #12]
 8021086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802108a:	683b      	ldr	r3, [r7, #0]
 802108c:	68db      	ldr	r3, [r3, #12]
 802108e:	4313      	orrs	r3, r2
 8021090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8021098:	683b      	ldr	r3, [r7, #0]
 802109a:	689b      	ldr	r3, [r3, #8]
 802109c:	4313      	orrs	r3, r2
 802109e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80210a6:	683b      	ldr	r3, [r7, #0]
 80210a8:	685b      	ldr	r3, [r3, #4]
 80210aa:	4313      	orrs	r3, r2
 80210ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80210ae:	68fb      	ldr	r3, [r7, #12]
 80210b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80210b4:	683b      	ldr	r3, [r7, #0]
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	4313      	orrs	r3, r2
 80210ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80210c2:	683b      	ldr	r3, [r7, #0]
 80210c4:	691b      	ldr	r3, [r3, #16]
 80210c6:	4313      	orrs	r3, r2
 80210c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80210ca:	68fb      	ldr	r3, [r7, #12]
 80210cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80210d0:	683b      	ldr	r3, [r7, #0]
 80210d2:	695b      	ldr	r3, [r3, #20]
 80210d4:	4313      	orrs	r3, r2
 80210d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80210de:	683b      	ldr	r3, [r7, #0]
 80210e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210e2:	4313      	orrs	r3, r2
 80210e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80210e6:	68fb      	ldr	r3, [r7, #12]
 80210e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80210ec:	683b      	ldr	r3, [r7, #0]
 80210ee:	699b      	ldr	r3, [r3, #24]
 80210f0:	041b      	lsls	r3, r3, #16
 80210f2:	4313      	orrs	r3, r2
 80210f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	4a2f      	ldr	r2, [pc, #188]	; (80211b8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80210fc:	4293      	cmp	r3, r2
 80210fe:	d009      	beq.n	8021114 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	4a2d      	ldr	r2, [pc, #180]	; (80211bc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8021106:	4293      	cmp	r3, r2
 8021108:	d004      	beq.n	8021114 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	4a2c      	ldr	r2, [pc, #176]	; (80211c0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8021110:	4293      	cmp	r3, r2
 8021112:	d106      	bne.n	8021122 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8021114:	68fb      	ldr	r3, [r7, #12]
 8021116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 802111a:	683b      	ldr	r3, [r7, #0]
 802111c:	69db      	ldr	r3, [r3, #28]
 802111e:	4313      	orrs	r3, r2
 8021120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	4a24      	ldr	r2, [pc, #144]	; (80211b8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8021128:	4293      	cmp	r3, r2
 802112a:	d009      	beq.n	8021140 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	4a22      	ldr	r2, [pc, #136]	; (80211bc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8021132:	4293      	cmp	r3, r2
 8021134:	d004      	beq.n	8021140 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	4a21      	ldr	r2, [pc, #132]	; (80211c0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 802113c:	4293      	cmp	r3, r2
 802113e:	d12b      	bne.n	8021198 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8021140:	68fb      	ldr	r3, [r7, #12]
 8021142:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8021146:	683b      	ldr	r3, [r7, #0]
 8021148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802114a:	051b      	lsls	r3, r3, #20
 802114c:	4313      	orrs	r3, r2
 802114e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8021150:	68fb      	ldr	r3, [r7, #12]
 8021152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8021156:	683b      	ldr	r3, [r7, #0]
 8021158:	6a1b      	ldr	r3, [r3, #32]
 802115a:	4313      	orrs	r3, r2
 802115c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8021164:	683b      	ldr	r3, [r7, #0]
 8021166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021168:	4313      	orrs	r3, r2
 802116a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	4a11      	ldr	r2, [pc, #68]	; (80211b8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8021172:	4293      	cmp	r3, r2
 8021174:	d009      	beq.n	802118a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	4a10      	ldr	r2, [pc, #64]	; (80211bc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 802117c:	4293      	cmp	r3, r2
 802117e:	d004      	beq.n	802118a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	4a0e      	ldr	r2, [pc, #56]	; (80211c0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8021186:	4293      	cmp	r3, r2
 8021188:	d106      	bne.n	8021198 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8021190:	683b      	ldr	r3, [r7, #0]
 8021192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021194:	4313      	orrs	r3, r2
 8021196:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	68fa      	ldr	r2, [r7, #12]
 802119e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	2200      	movs	r2, #0
 80211a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80211a8:	2300      	movs	r3, #0
}
 80211aa:	4618      	mov	r0, r3
 80211ac:	3714      	adds	r7, #20
 80211ae:	46bd      	mov	sp, r7
 80211b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b4:	4770      	bx	lr
 80211b6:	bf00      	nop
 80211b8:	40012c00 	.word	0x40012c00
 80211bc:	40013400 	.word	0x40013400
 80211c0:	40015000 	.word	0x40015000

080211c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80211c4:	b480      	push	{r7}
 80211c6:	b083      	sub	sp, #12
 80211c8:	af00      	add	r7, sp, #0
 80211ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80211cc:	bf00      	nop
 80211ce:	370c      	adds	r7, #12
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr

080211d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80211d8:	b480      	push	{r7}
 80211da:	b083      	sub	sp, #12
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80211e0:	bf00      	nop
 80211e2:	370c      	adds	r7, #12
 80211e4:	46bd      	mov	sp, r7
 80211e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ea:	4770      	bx	lr

080211ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80211ec:	b480      	push	{r7}
 80211ee:	b083      	sub	sp, #12
 80211f0:	af00      	add	r7, sp, #0
 80211f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80211f4:	bf00      	nop
 80211f6:	370c      	adds	r7, #12
 80211f8:	46bd      	mov	sp, r7
 80211fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211fe:	4770      	bx	lr

08021200 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8021200:	b480      	push	{r7}
 8021202:	b083      	sub	sp, #12
 8021204:	af00      	add	r7, sp, #0
 8021206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8021208:	bf00      	nop
 802120a:	370c      	adds	r7, #12
 802120c:	46bd      	mov	sp, r7
 802120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021212:	4770      	bx	lr

08021214 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8021214:	b480      	push	{r7}
 8021216:	b083      	sub	sp, #12
 8021218:	af00      	add	r7, sp, #0
 802121a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 802121c:	bf00      	nop
 802121e:	370c      	adds	r7, #12
 8021220:	46bd      	mov	sp, r7
 8021222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021226:	4770      	bx	lr

08021228 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8021228:	b480      	push	{r7}
 802122a:	b083      	sub	sp, #12
 802122c:	af00      	add	r7, sp, #0
 802122e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8021230:	bf00      	nop
 8021232:	370c      	adds	r7, #12
 8021234:	46bd      	mov	sp, r7
 8021236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802123a:	4770      	bx	lr

0802123c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 802123c:	b480      	push	{r7}
 802123e:	b083      	sub	sp, #12
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8021244:	bf00      	nop
 8021246:	370c      	adds	r7, #12
 8021248:	46bd      	mov	sp, r7
 802124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802124e:	4770      	bx	lr

08021250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021250:	b580      	push	{r7, lr}
 8021252:	b082      	sub	sp, #8
 8021254:	af00      	add	r7, sp, #0
 8021256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	2b00      	cmp	r3, #0
 802125c:	d101      	bne.n	8021262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802125e:	2301      	movs	r3, #1
 8021260:	e042      	b.n	80212e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021268:	2b00      	cmp	r3, #0
 802126a:	d106      	bne.n	802127a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	2200      	movs	r2, #0
 8021270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021274:	6878      	ldr	r0, [r7, #4]
 8021276:	f7f9 fae3 	bl	801a840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	2224      	movs	r2, #36	; 0x24
 802127e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	681a      	ldr	r2, [r3, #0]
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	681b      	ldr	r3, [r3, #0]
 802128c:	f022 0201 	bic.w	r2, r2, #1
 8021290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021292:	6878      	ldr	r0, [r7, #4]
 8021294:	f000 f8c2 	bl	802141c <UART_SetConfig>
 8021298:	4603      	mov	r3, r0
 802129a:	2b01      	cmp	r3, #1
 802129c:	d101      	bne.n	80212a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802129e:	2301      	movs	r3, #1
 80212a0:	e022      	b.n	80212e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d002      	beq.n	80212b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80212aa:	6878      	ldr	r0, [r7, #4]
 80212ac:	f000 fbb2 	bl	8021a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	685a      	ldr	r2, [r3, #4]
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	681b      	ldr	r3, [r3, #0]
 80212ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80212be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	689a      	ldr	r2, [r3, #8]
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80212ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	681a      	ldr	r2, [r3, #0]
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	681b      	ldr	r3, [r3, #0]
 80212da:	f042 0201 	orr.w	r2, r2, #1
 80212de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80212e0:	6878      	ldr	r0, [r7, #4]
 80212e2:	f000 fc39 	bl	8021b58 <UART_CheckIdleState>
 80212e6:	4603      	mov	r3, r0
}
 80212e8:	4618      	mov	r0, r3
 80212ea:	3708      	adds	r7, #8
 80212ec:	46bd      	mov	sp, r7
 80212ee:	bd80      	pop	{r7, pc}

080212f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80212f0:	b580      	push	{r7, lr}
 80212f2:	b08a      	sub	sp, #40	; 0x28
 80212f4:	af02      	add	r7, sp, #8
 80212f6:	60f8      	str	r0, [r7, #12]
 80212f8:	60b9      	str	r1, [r7, #8]
 80212fa:	603b      	str	r3, [r7, #0]
 80212fc:	4613      	mov	r3, r2
 80212fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021300:	68fb      	ldr	r3, [r7, #12]
 8021302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021306:	2b20      	cmp	r3, #32
 8021308:	f040 8083 	bne.w	8021412 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 802130c:	68bb      	ldr	r3, [r7, #8]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d002      	beq.n	8021318 <HAL_UART_Transmit+0x28>
 8021312:	88fb      	ldrh	r3, [r7, #6]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d101      	bne.n	802131c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8021318:	2301      	movs	r3, #1
 802131a:	e07b      	b.n	8021414 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 802131c:	68fb      	ldr	r3, [r7, #12]
 802131e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021322:	2b01      	cmp	r3, #1
 8021324:	d101      	bne.n	802132a <HAL_UART_Transmit+0x3a>
 8021326:	2302      	movs	r3, #2
 8021328:	e074      	b.n	8021414 <HAL_UART_Transmit+0x124>
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	2201      	movs	r2, #1
 802132e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021332:	68fb      	ldr	r3, [r7, #12]
 8021334:	2200      	movs	r2, #0
 8021336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802133a:	68fb      	ldr	r3, [r7, #12]
 802133c:	2221      	movs	r2, #33	; 0x21
 802133e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021342:	f7f9 fb6b 	bl	801aa1c <HAL_GetTick>
 8021346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8021348:	68fb      	ldr	r3, [r7, #12]
 802134a:	88fa      	ldrh	r2, [r7, #6]
 802134c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	88fa      	ldrh	r2, [r7, #6]
 8021354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021358:	68fb      	ldr	r3, [r7, #12]
 802135a:	689b      	ldr	r3, [r3, #8]
 802135c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021360:	d108      	bne.n	8021374 <HAL_UART_Transmit+0x84>
 8021362:	68fb      	ldr	r3, [r7, #12]
 8021364:	691b      	ldr	r3, [r3, #16]
 8021366:	2b00      	cmp	r3, #0
 8021368:	d104      	bne.n	8021374 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 802136a:	2300      	movs	r3, #0
 802136c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802136e:	68bb      	ldr	r3, [r7, #8]
 8021370:	61bb      	str	r3, [r7, #24]
 8021372:	e003      	b.n	802137c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8021374:	68bb      	ldr	r3, [r7, #8]
 8021376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021378:	2300      	movs	r3, #0
 802137a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 802137c:	68fb      	ldr	r3, [r7, #12]
 802137e:	2200      	movs	r2, #0
 8021380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8021384:	e02c      	b.n	80213e0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021386:	683b      	ldr	r3, [r7, #0]
 8021388:	9300      	str	r3, [sp, #0]
 802138a:	697b      	ldr	r3, [r7, #20]
 802138c:	2200      	movs	r2, #0
 802138e:	2180      	movs	r1, #128	; 0x80
 8021390:	68f8      	ldr	r0, [r7, #12]
 8021392:	f000 fc2c 	bl	8021bee <UART_WaitOnFlagUntilTimeout>
 8021396:	4603      	mov	r3, r0
 8021398:	2b00      	cmp	r3, #0
 802139a:	d001      	beq.n	80213a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 802139c:	2303      	movs	r3, #3
 802139e:	e039      	b.n	8021414 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80213a0:	69fb      	ldr	r3, [r7, #28]
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d10b      	bne.n	80213be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80213a6:	69bb      	ldr	r3, [r7, #24]
 80213a8:	881b      	ldrh	r3, [r3, #0]
 80213aa:	461a      	mov	r2, r3
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	681b      	ldr	r3, [r3, #0]
 80213b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80213b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80213b6:	69bb      	ldr	r3, [r7, #24]
 80213b8:	3302      	adds	r3, #2
 80213ba:	61bb      	str	r3, [r7, #24]
 80213bc:	e007      	b.n	80213ce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80213be:	69fb      	ldr	r3, [r7, #28]
 80213c0:	781a      	ldrb	r2, [r3, #0]
 80213c2:	68fb      	ldr	r3, [r7, #12]
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80213c8:	69fb      	ldr	r3, [r7, #28]
 80213ca:	3301      	adds	r3, #1
 80213cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80213ce:	68fb      	ldr	r3, [r7, #12]
 80213d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80213d4:	b29b      	uxth	r3, r3
 80213d6:	3b01      	subs	r3, #1
 80213d8:	b29a      	uxth	r2, r3
 80213da:	68fb      	ldr	r3, [r7, #12]
 80213dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80213e0:	68fb      	ldr	r3, [r7, #12]
 80213e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80213e6:	b29b      	uxth	r3, r3
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d1cc      	bne.n	8021386 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80213ec:	683b      	ldr	r3, [r7, #0]
 80213ee:	9300      	str	r3, [sp, #0]
 80213f0:	697b      	ldr	r3, [r7, #20]
 80213f2:	2200      	movs	r2, #0
 80213f4:	2140      	movs	r1, #64	; 0x40
 80213f6:	68f8      	ldr	r0, [r7, #12]
 80213f8:	f000 fbf9 	bl	8021bee <UART_WaitOnFlagUntilTimeout>
 80213fc:	4603      	mov	r3, r0
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d001      	beq.n	8021406 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8021402:	2303      	movs	r3, #3
 8021404:	e006      	b.n	8021414 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	2220      	movs	r2, #32
 802140a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 802140e:	2300      	movs	r3, #0
 8021410:	e000      	b.n	8021414 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8021412:	2302      	movs	r3, #2
  }
}
 8021414:	4618      	mov	r0, r3
 8021416:	3720      	adds	r7, #32
 8021418:	46bd      	mov	sp, r7
 802141a:	bd80      	pop	{r7, pc}

0802141c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802141c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021420:	b08c      	sub	sp, #48	; 0x30
 8021422:	af00      	add	r7, sp, #0
 8021424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8021426:	2300      	movs	r3, #0
 8021428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802142c:	697b      	ldr	r3, [r7, #20]
 802142e:	689a      	ldr	r2, [r3, #8]
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	691b      	ldr	r3, [r3, #16]
 8021434:	431a      	orrs	r2, r3
 8021436:	697b      	ldr	r3, [r7, #20]
 8021438:	695b      	ldr	r3, [r3, #20]
 802143a:	431a      	orrs	r2, r3
 802143c:	697b      	ldr	r3, [r7, #20]
 802143e:	69db      	ldr	r3, [r3, #28]
 8021440:	4313      	orrs	r3, r2
 8021442:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	681a      	ldr	r2, [r3, #0]
 802144a:	4baa      	ldr	r3, [pc, #680]	; (80216f4 <UART_SetConfig+0x2d8>)
 802144c:	4013      	ands	r3, r2
 802144e:	697a      	ldr	r2, [r7, #20]
 8021450:	6812      	ldr	r2, [r2, #0]
 8021452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021454:	430b      	orrs	r3, r1
 8021456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021458:	697b      	ldr	r3, [r7, #20]
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	685b      	ldr	r3, [r3, #4]
 802145e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8021462:	697b      	ldr	r3, [r7, #20]
 8021464:	68da      	ldr	r2, [r3, #12]
 8021466:	697b      	ldr	r3, [r7, #20]
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	430a      	orrs	r2, r1
 802146c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802146e:	697b      	ldr	r3, [r7, #20]
 8021470:	699b      	ldr	r3, [r3, #24]
 8021472:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8021474:	697b      	ldr	r3, [r7, #20]
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4a9f      	ldr	r2, [pc, #636]	; (80216f8 <UART_SetConfig+0x2dc>)
 802147a:	4293      	cmp	r3, r2
 802147c:	d004      	beq.n	8021488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802147e:	697b      	ldr	r3, [r7, #20]
 8021480:	6a1b      	ldr	r3, [r3, #32]
 8021482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021484:	4313      	orrs	r3, r2
 8021486:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021488:	697b      	ldr	r3, [r7, #20]
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	689b      	ldr	r3, [r3, #8]
 802148e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8021492:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8021496:	697a      	ldr	r2, [r7, #20]
 8021498:	6812      	ldr	r2, [r2, #0]
 802149a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802149c:	430b      	orrs	r3, r1
 802149e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80214a0:	697b      	ldr	r3, [r7, #20]
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80214a6:	f023 010f 	bic.w	r1, r3, #15
 80214aa:	697b      	ldr	r3, [r7, #20]
 80214ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80214ae:	697b      	ldr	r3, [r7, #20]
 80214b0:	681b      	ldr	r3, [r3, #0]
 80214b2:	430a      	orrs	r2, r1
 80214b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80214b6:	697b      	ldr	r3, [r7, #20]
 80214b8:	681b      	ldr	r3, [r3, #0]
 80214ba:	4a90      	ldr	r2, [pc, #576]	; (80216fc <UART_SetConfig+0x2e0>)
 80214bc:	4293      	cmp	r3, r2
 80214be:	d125      	bne.n	802150c <UART_SetConfig+0xf0>
 80214c0:	4b8f      	ldr	r3, [pc, #572]	; (8021700 <UART_SetConfig+0x2e4>)
 80214c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80214c6:	f003 0303 	and.w	r3, r3, #3
 80214ca:	2b03      	cmp	r3, #3
 80214cc:	d81a      	bhi.n	8021504 <UART_SetConfig+0xe8>
 80214ce:	a201      	add	r2, pc, #4	; (adr r2, 80214d4 <UART_SetConfig+0xb8>)
 80214d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214d4:	080214e5 	.word	0x080214e5
 80214d8:	080214f5 	.word	0x080214f5
 80214dc:	080214ed 	.word	0x080214ed
 80214e0:	080214fd 	.word	0x080214fd
 80214e4:	2301      	movs	r3, #1
 80214e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214ea:	e116      	b.n	802171a <UART_SetConfig+0x2fe>
 80214ec:	2302      	movs	r3, #2
 80214ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214f2:	e112      	b.n	802171a <UART_SetConfig+0x2fe>
 80214f4:	2304      	movs	r3, #4
 80214f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214fa:	e10e      	b.n	802171a <UART_SetConfig+0x2fe>
 80214fc:	2308      	movs	r3, #8
 80214fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021502:	e10a      	b.n	802171a <UART_SetConfig+0x2fe>
 8021504:	2310      	movs	r3, #16
 8021506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802150a:	e106      	b.n	802171a <UART_SetConfig+0x2fe>
 802150c:	697b      	ldr	r3, [r7, #20]
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	4a7c      	ldr	r2, [pc, #496]	; (8021704 <UART_SetConfig+0x2e8>)
 8021512:	4293      	cmp	r3, r2
 8021514:	d138      	bne.n	8021588 <UART_SetConfig+0x16c>
 8021516:	4b7a      	ldr	r3, [pc, #488]	; (8021700 <UART_SetConfig+0x2e4>)
 8021518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802151c:	f003 030c 	and.w	r3, r3, #12
 8021520:	2b0c      	cmp	r3, #12
 8021522:	d82d      	bhi.n	8021580 <UART_SetConfig+0x164>
 8021524:	a201      	add	r2, pc, #4	; (adr r2, 802152c <UART_SetConfig+0x110>)
 8021526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802152a:	bf00      	nop
 802152c:	08021561 	.word	0x08021561
 8021530:	08021581 	.word	0x08021581
 8021534:	08021581 	.word	0x08021581
 8021538:	08021581 	.word	0x08021581
 802153c:	08021571 	.word	0x08021571
 8021540:	08021581 	.word	0x08021581
 8021544:	08021581 	.word	0x08021581
 8021548:	08021581 	.word	0x08021581
 802154c:	08021569 	.word	0x08021569
 8021550:	08021581 	.word	0x08021581
 8021554:	08021581 	.word	0x08021581
 8021558:	08021581 	.word	0x08021581
 802155c:	08021579 	.word	0x08021579
 8021560:	2300      	movs	r3, #0
 8021562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021566:	e0d8      	b.n	802171a <UART_SetConfig+0x2fe>
 8021568:	2302      	movs	r3, #2
 802156a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802156e:	e0d4      	b.n	802171a <UART_SetConfig+0x2fe>
 8021570:	2304      	movs	r3, #4
 8021572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021576:	e0d0      	b.n	802171a <UART_SetConfig+0x2fe>
 8021578:	2308      	movs	r3, #8
 802157a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802157e:	e0cc      	b.n	802171a <UART_SetConfig+0x2fe>
 8021580:	2310      	movs	r3, #16
 8021582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021586:	e0c8      	b.n	802171a <UART_SetConfig+0x2fe>
 8021588:	697b      	ldr	r3, [r7, #20]
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	4a5e      	ldr	r2, [pc, #376]	; (8021708 <UART_SetConfig+0x2ec>)
 802158e:	4293      	cmp	r3, r2
 8021590:	d125      	bne.n	80215de <UART_SetConfig+0x1c2>
 8021592:	4b5b      	ldr	r3, [pc, #364]	; (8021700 <UART_SetConfig+0x2e4>)
 8021594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802159c:	2b30      	cmp	r3, #48	; 0x30
 802159e:	d016      	beq.n	80215ce <UART_SetConfig+0x1b2>
 80215a0:	2b30      	cmp	r3, #48	; 0x30
 80215a2:	d818      	bhi.n	80215d6 <UART_SetConfig+0x1ba>
 80215a4:	2b20      	cmp	r3, #32
 80215a6:	d00a      	beq.n	80215be <UART_SetConfig+0x1a2>
 80215a8:	2b20      	cmp	r3, #32
 80215aa:	d814      	bhi.n	80215d6 <UART_SetConfig+0x1ba>
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d002      	beq.n	80215b6 <UART_SetConfig+0x19a>
 80215b0:	2b10      	cmp	r3, #16
 80215b2:	d008      	beq.n	80215c6 <UART_SetConfig+0x1aa>
 80215b4:	e00f      	b.n	80215d6 <UART_SetConfig+0x1ba>
 80215b6:	2300      	movs	r3, #0
 80215b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215bc:	e0ad      	b.n	802171a <UART_SetConfig+0x2fe>
 80215be:	2302      	movs	r3, #2
 80215c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215c4:	e0a9      	b.n	802171a <UART_SetConfig+0x2fe>
 80215c6:	2304      	movs	r3, #4
 80215c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215cc:	e0a5      	b.n	802171a <UART_SetConfig+0x2fe>
 80215ce:	2308      	movs	r3, #8
 80215d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215d4:	e0a1      	b.n	802171a <UART_SetConfig+0x2fe>
 80215d6:	2310      	movs	r3, #16
 80215d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215dc:	e09d      	b.n	802171a <UART_SetConfig+0x2fe>
 80215de:	697b      	ldr	r3, [r7, #20]
 80215e0:	681b      	ldr	r3, [r3, #0]
 80215e2:	4a4a      	ldr	r2, [pc, #296]	; (802170c <UART_SetConfig+0x2f0>)
 80215e4:	4293      	cmp	r3, r2
 80215e6:	d125      	bne.n	8021634 <UART_SetConfig+0x218>
 80215e8:	4b45      	ldr	r3, [pc, #276]	; (8021700 <UART_SetConfig+0x2e4>)
 80215ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80215ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80215f2:	2bc0      	cmp	r3, #192	; 0xc0
 80215f4:	d016      	beq.n	8021624 <UART_SetConfig+0x208>
 80215f6:	2bc0      	cmp	r3, #192	; 0xc0
 80215f8:	d818      	bhi.n	802162c <UART_SetConfig+0x210>
 80215fa:	2b80      	cmp	r3, #128	; 0x80
 80215fc:	d00a      	beq.n	8021614 <UART_SetConfig+0x1f8>
 80215fe:	2b80      	cmp	r3, #128	; 0x80
 8021600:	d814      	bhi.n	802162c <UART_SetConfig+0x210>
 8021602:	2b00      	cmp	r3, #0
 8021604:	d002      	beq.n	802160c <UART_SetConfig+0x1f0>
 8021606:	2b40      	cmp	r3, #64	; 0x40
 8021608:	d008      	beq.n	802161c <UART_SetConfig+0x200>
 802160a:	e00f      	b.n	802162c <UART_SetConfig+0x210>
 802160c:	2300      	movs	r3, #0
 802160e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021612:	e082      	b.n	802171a <UART_SetConfig+0x2fe>
 8021614:	2302      	movs	r3, #2
 8021616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802161a:	e07e      	b.n	802171a <UART_SetConfig+0x2fe>
 802161c:	2304      	movs	r3, #4
 802161e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021622:	e07a      	b.n	802171a <UART_SetConfig+0x2fe>
 8021624:	2308      	movs	r3, #8
 8021626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802162a:	e076      	b.n	802171a <UART_SetConfig+0x2fe>
 802162c:	2310      	movs	r3, #16
 802162e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021632:	e072      	b.n	802171a <UART_SetConfig+0x2fe>
 8021634:	697b      	ldr	r3, [r7, #20]
 8021636:	681b      	ldr	r3, [r3, #0]
 8021638:	4a35      	ldr	r2, [pc, #212]	; (8021710 <UART_SetConfig+0x2f4>)
 802163a:	4293      	cmp	r3, r2
 802163c:	d12a      	bne.n	8021694 <UART_SetConfig+0x278>
 802163e:	4b30      	ldr	r3, [pc, #192]	; (8021700 <UART_SetConfig+0x2e4>)
 8021640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802164c:	d01a      	beq.n	8021684 <UART_SetConfig+0x268>
 802164e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8021652:	d81b      	bhi.n	802168c <UART_SetConfig+0x270>
 8021654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021658:	d00c      	beq.n	8021674 <UART_SetConfig+0x258>
 802165a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802165e:	d815      	bhi.n	802168c <UART_SetConfig+0x270>
 8021660:	2b00      	cmp	r3, #0
 8021662:	d003      	beq.n	802166c <UART_SetConfig+0x250>
 8021664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021668:	d008      	beq.n	802167c <UART_SetConfig+0x260>
 802166a:	e00f      	b.n	802168c <UART_SetConfig+0x270>
 802166c:	2300      	movs	r3, #0
 802166e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021672:	e052      	b.n	802171a <UART_SetConfig+0x2fe>
 8021674:	2302      	movs	r3, #2
 8021676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802167a:	e04e      	b.n	802171a <UART_SetConfig+0x2fe>
 802167c:	2304      	movs	r3, #4
 802167e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021682:	e04a      	b.n	802171a <UART_SetConfig+0x2fe>
 8021684:	2308      	movs	r3, #8
 8021686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802168a:	e046      	b.n	802171a <UART_SetConfig+0x2fe>
 802168c:	2310      	movs	r3, #16
 802168e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021692:	e042      	b.n	802171a <UART_SetConfig+0x2fe>
 8021694:	697b      	ldr	r3, [r7, #20]
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	4a17      	ldr	r2, [pc, #92]	; (80216f8 <UART_SetConfig+0x2dc>)
 802169a:	4293      	cmp	r3, r2
 802169c:	d13a      	bne.n	8021714 <UART_SetConfig+0x2f8>
 802169e:	4b18      	ldr	r3, [pc, #96]	; (8021700 <UART_SetConfig+0x2e4>)
 80216a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80216a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80216a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80216ac:	d01a      	beq.n	80216e4 <UART_SetConfig+0x2c8>
 80216ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80216b2:	d81b      	bhi.n	80216ec <UART_SetConfig+0x2d0>
 80216b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80216b8:	d00c      	beq.n	80216d4 <UART_SetConfig+0x2b8>
 80216ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80216be:	d815      	bhi.n	80216ec <UART_SetConfig+0x2d0>
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d003      	beq.n	80216cc <UART_SetConfig+0x2b0>
 80216c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80216c8:	d008      	beq.n	80216dc <UART_SetConfig+0x2c0>
 80216ca:	e00f      	b.n	80216ec <UART_SetConfig+0x2d0>
 80216cc:	2300      	movs	r3, #0
 80216ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216d2:	e022      	b.n	802171a <UART_SetConfig+0x2fe>
 80216d4:	2302      	movs	r3, #2
 80216d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216da:	e01e      	b.n	802171a <UART_SetConfig+0x2fe>
 80216dc:	2304      	movs	r3, #4
 80216de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216e2:	e01a      	b.n	802171a <UART_SetConfig+0x2fe>
 80216e4:	2308      	movs	r3, #8
 80216e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216ea:	e016      	b.n	802171a <UART_SetConfig+0x2fe>
 80216ec:	2310      	movs	r3, #16
 80216ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216f2:	e012      	b.n	802171a <UART_SetConfig+0x2fe>
 80216f4:	cfff69f3 	.word	0xcfff69f3
 80216f8:	40008000 	.word	0x40008000
 80216fc:	40013800 	.word	0x40013800
 8021700:	40021000 	.word	0x40021000
 8021704:	40004400 	.word	0x40004400
 8021708:	40004800 	.word	0x40004800
 802170c:	40004c00 	.word	0x40004c00
 8021710:	40005000 	.word	0x40005000
 8021714:	2310      	movs	r3, #16
 8021716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802171a:	697b      	ldr	r3, [r7, #20]
 802171c:	681b      	ldr	r3, [r3, #0]
 802171e:	4aae      	ldr	r2, [pc, #696]	; (80219d8 <UART_SetConfig+0x5bc>)
 8021720:	4293      	cmp	r3, r2
 8021722:	f040 8097 	bne.w	8021854 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802172a:	2b08      	cmp	r3, #8
 802172c:	d823      	bhi.n	8021776 <UART_SetConfig+0x35a>
 802172e:	a201      	add	r2, pc, #4	; (adr r2, 8021734 <UART_SetConfig+0x318>)
 8021730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021734:	08021759 	.word	0x08021759
 8021738:	08021777 	.word	0x08021777
 802173c:	08021761 	.word	0x08021761
 8021740:	08021777 	.word	0x08021777
 8021744:	08021767 	.word	0x08021767
 8021748:	08021777 	.word	0x08021777
 802174c:	08021777 	.word	0x08021777
 8021750:	08021777 	.word	0x08021777
 8021754:	0802176f 	.word	0x0802176f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021758:	f7fd f8b4 	bl	801e8c4 <HAL_RCC_GetPCLK1Freq>
 802175c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802175e:	e010      	b.n	8021782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8021760:	4b9e      	ldr	r3, [pc, #632]	; (80219dc <UART_SetConfig+0x5c0>)
 8021762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8021764:	e00d      	b.n	8021782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8021766:	f7fd f841 	bl	801e7ec <HAL_RCC_GetSysClockFreq>
 802176a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802176c:	e009      	b.n	8021782 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802176e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8021774:	e005      	b.n	8021782 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8021776:	2300      	movs	r3, #0
 8021778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802177a:	2301      	movs	r3, #1
 802177c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8021780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021784:	2b00      	cmp	r3, #0
 8021786:	f000 8130 	beq.w	80219ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802178a:	697b      	ldr	r3, [r7, #20]
 802178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802178e:	4a94      	ldr	r2, [pc, #592]	; (80219e0 <UART_SetConfig+0x5c4>)
 8021790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021794:	461a      	mov	r2, r3
 8021796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021798:	fbb3 f3f2 	udiv	r3, r3, r2
 802179c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802179e:	697b      	ldr	r3, [r7, #20]
 80217a0:	685a      	ldr	r2, [r3, #4]
 80217a2:	4613      	mov	r3, r2
 80217a4:	005b      	lsls	r3, r3, #1
 80217a6:	4413      	add	r3, r2
 80217a8:	69ba      	ldr	r2, [r7, #24]
 80217aa:	429a      	cmp	r2, r3
 80217ac:	d305      	bcc.n	80217ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80217ae:	697b      	ldr	r3, [r7, #20]
 80217b0:	685b      	ldr	r3, [r3, #4]
 80217b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80217b4:	69ba      	ldr	r2, [r7, #24]
 80217b6:	429a      	cmp	r2, r3
 80217b8:	d903      	bls.n	80217c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80217ba:	2301      	movs	r3, #1
 80217bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80217c0:	e113      	b.n	80219ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80217c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217c4:	2200      	movs	r2, #0
 80217c6:	60bb      	str	r3, [r7, #8]
 80217c8:	60fa      	str	r2, [r7, #12]
 80217ca:	697b      	ldr	r3, [r7, #20]
 80217cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217ce:	4a84      	ldr	r2, [pc, #528]	; (80219e0 <UART_SetConfig+0x5c4>)
 80217d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80217d4:	b29b      	uxth	r3, r3
 80217d6:	2200      	movs	r2, #0
 80217d8:	603b      	str	r3, [r7, #0]
 80217da:	607a      	str	r2, [r7, #4]
 80217dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80217e4:	f7df fa58 	bl	8000c98 <__aeabi_uldivmod>
 80217e8:	4602      	mov	r2, r0
 80217ea:	460b      	mov	r3, r1
 80217ec:	4610      	mov	r0, r2
 80217ee:	4619      	mov	r1, r3
 80217f0:	f04f 0200 	mov.w	r2, #0
 80217f4:	f04f 0300 	mov.w	r3, #0
 80217f8:	020b      	lsls	r3, r1, #8
 80217fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80217fe:	0202      	lsls	r2, r0, #8
 8021800:	6979      	ldr	r1, [r7, #20]
 8021802:	6849      	ldr	r1, [r1, #4]
 8021804:	0849      	lsrs	r1, r1, #1
 8021806:	2000      	movs	r0, #0
 8021808:	460c      	mov	r4, r1
 802180a:	4605      	mov	r5, r0
 802180c:	eb12 0804 	adds.w	r8, r2, r4
 8021810:	eb43 0905 	adc.w	r9, r3, r5
 8021814:	697b      	ldr	r3, [r7, #20]
 8021816:	685b      	ldr	r3, [r3, #4]
 8021818:	2200      	movs	r2, #0
 802181a:	469a      	mov	sl, r3
 802181c:	4693      	mov	fp, r2
 802181e:	4652      	mov	r2, sl
 8021820:	465b      	mov	r3, fp
 8021822:	4640      	mov	r0, r8
 8021824:	4649      	mov	r1, r9
 8021826:	f7df fa37 	bl	8000c98 <__aeabi_uldivmod>
 802182a:	4602      	mov	r2, r0
 802182c:	460b      	mov	r3, r1
 802182e:	4613      	mov	r3, r2
 8021830:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021832:	6a3b      	ldr	r3, [r7, #32]
 8021834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8021838:	d308      	bcc.n	802184c <UART_SetConfig+0x430>
 802183a:	6a3b      	ldr	r3, [r7, #32]
 802183c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021840:	d204      	bcs.n	802184c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8021842:	697b      	ldr	r3, [r7, #20]
 8021844:	681b      	ldr	r3, [r3, #0]
 8021846:	6a3a      	ldr	r2, [r7, #32]
 8021848:	60da      	str	r2, [r3, #12]
 802184a:	e0ce      	b.n	80219ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 802184c:	2301      	movs	r3, #1
 802184e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8021852:	e0ca      	b.n	80219ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021854:	697b      	ldr	r3, [r7, #20]
 8021856:	69db      	ldr	r3, [r3, #28]
 8021858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802185c:	d166      	bne.n	802192c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 802185e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021862:	2b08      	cmp	r3, #8
 8021864:	d827      	bhi.n	80218b6 <UART_SetConfig+0x49a>
 8021866:	a201      	add	r2, pc, #4	; (adr r2, 802186c <UART_SetConfig+0x450>)
 8021868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802186c:	08021891 	.word	0x08021891
 8021870:	08021899 	.word	0x08021899
 8021874:	080218a1 	.word	0x080218a1
 8021878:	080218b7 	.word	0x080218b7
 802187c:	080218a7 	.word	0x080218a7
 8021880:	080218b7 	.word	0x080218b7
 8021884:	080218b7 	.word	0x080218b7
 8021888:	080218b7 	.word	0x080218b7
 802188c:	080218af 	.word	0x080218af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021890:	f7fd f818 	bl	801e8c4 <HAL_RCC_GetPCLK1Freq>
 8021894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021896:	e014      	b.n	80218c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021898:	f7fd f82a 	bl	801e8f0 <HAL_RCC_GetPCLK2Freq>
 802189c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802189e:	e010      	b.n	80218c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80218a0:	4b4e      	ldr	r3, [pc, #312]	; (80219dc <UART_SetConfig+0x5c0>)
 80218a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80218a4:	e00d      	b.n	80218c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80218a6:	f7fc ffa1 	bl	801e7ec <HAL_RCC_GetSysClockFreq>
 80218aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80218ac:	e009      	b.n	80218c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80218ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80218b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80218b4:	e005      	b.n	80218c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80218b6:	2300      	movs	r3, #0
 80218b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80218ba:	2301      	movs	r3, #1
 80218bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80218c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80218c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	f000 8090 	beq.w	80219ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80218ca:	697b      	ldr	r3, [r7, #20]
 80218cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80218ce:	4a44      	ldr	r2, [pc, #272]	; (80219e0 <UART_SetConfig+0x5c4>)
 80218d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80218d4:	461a      	mov	r2, r3
 80218d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80218dc:	005a      	lsls	r2, r3, #1
 80218de:	697b      	ldr	r3, [r7, #20]
 80218e0:	685b      	ldr	r3, [r3, #4]
 80218e2:	085b      	lsrs	r3, r3, #1
 80218e4:	441a      	add	r2, r3
 80218e6:	697b      	ldr	r3, [r7, #20]
 80218e8:	685b      	ldr	r3, [r3, #4]
 80218ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80218ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80218f0:	6a3b      	ldr	r3, [r7, #32]
 80218f2:	2b0f      	cmp	r3, #15
 80218f4:	d916      	bls.n	8021924 <UART_SetConfig+0x508>
 80218f6:	6a3b      	ldr	r3, [r7, #32]
 80218f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80218fc:	d212      	bcs.n	8021924 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80218fe:	6a3b      	ldr	r3, [r7, #32]
 8021900:	b29b      	uxth	r3, r3
 8021902:	f023 030f 	bic.w	r3, r3, #15
 8021906:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021908:	6a3b      	ldr	r3, [r7, #32]
 802190a:	085b      	lsrs	r3, r3, #1
 802190c:	b29b      	uxth	r3, r3
 802190e:	f003 0307 	and.w	r3, r3, #7
 8021912:	b29a      	uxth	r2, r3
 8021914:	8bfb      	ldrh	r3, [r7, #30]
 8021916:	4313      	orrs	r3, r2
 8021918:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 802191a:	697b      	ldr	r3, [r7, #20]
 802191c:	681b      	ldr	r3, [r3, #0]
 802191e:	8bfa      	ldrh	r2, [r7, #30]
 8021920:	60da      	str	r2, [r3, #12]
 8021922:	e062      	b.n	80219ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8021924:	2301      	movs	r3, #1
 8021926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 802192a:	e05e      	b.n	80219ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 802192c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021930:	2b08      	cmp	r3, #8
 8021932:	d828      	bhi.n	8021986 <UART_SetConfig+0x56a>
 8021934:	a201      	add	r2, pc, #4	; (adr r2, 802193c <UART_SetConfig+0x520>)
 8021936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802193a:	bf00      	nop
 802193c:	08021961 	.word	0x08021961
 8021940:	08021969 	.word	0x08021969
 8021944:	08021971 	.word	0x08021971
 8021948:	08021987 	.word	0x08021987
 802194c:	08021977 	.word	0x08021977
 8021950:	08021987 	.word	0x08021987
 8021954:	08021987 	.word	0x08021987
 8021958:	08021987 	.word	0x08021987
 802195c:	0802197f 	.word	0x0802197f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021960:	f7fc ffb0 	bl	801e8c4 <HAL_RCC_GetPCLK1Freq>
 8021964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021966:	e014      	b.n	8021992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021968:	f7fc ffc2 	bl	801e8f0 <HAL_RCC_GetPCLK2Freq>
 802196c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802196e:	e010      	b.n	8021992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8021970:	4b1a      	ldr	r3, [pc, #104]	; (80219dc <UART_SetConfig+0x5c0>)
 8021972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8021974:	e00d      	b.n	8021992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8021976:	f7fc ff39 	bl	801e7ec <HAL_RCC_GetSysClockFreq>
 802197a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802197c:	e009      	b.n	8021992 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802197e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8021984:	e005      	b.n	8021992 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8021986:	2300      	movs	r3, #0
 8021988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 802198a:	2301      	movs	r3, #1
 802198c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8021990:	bf00      	nop
    }

    if (pclk != 0U)
 8021992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021994:	2b00      	cmp	r3, #0
 8021996:	d028      	beq.n	80219ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021998:	697b      	ldr	r3, [r7, #20]
 802199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802199c:	4a10      	ldr	r2, [pc, #64]	; (80219e0 <UART_SetConfig+0x5c4>)
 802199e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80219a2:	461a      	mov	r2, r3
 80219a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80219aa:	697b      	ldr	r3, [r7, #20]
 80219ac:	685b      	ldr	r3, [r3, #4]
 80219ae:	085b      	lsrs	r3, r3, #1
 80219b0:	441a      	add	r2, r3
 80219b2:	697b      	ldr	r3, [r7, #20]
 80219b4:	685b      	ldr	r3, [r3, #4]
 80219b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80219ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80219bc:	6a3b      	ldr	r3, [r7, #32]
 80219be:	2b0f      	cmp	r3, #15
 80219c0:	d910      	bls.n	80219e4 <UART_SetConfig+0x5c8>
 80219c2:	6a3b      	ldr	r3, [r7, #32]
 80219c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219c8:	d20c      	bcs.n	80219e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80219ca:	6a3b      	ldr	r3, [r7, #32]
 80219cc:	b29a      	uxth	r2, r3
 80219ce:	697b      	ldr	r3, [r7, #20]
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	60da      	str	r2, [r3, #12]
 80219d4:	e009      	b.n	80219ea <UART_SetConfig+0x5ce>
 80219d6:	bf00      	nop
 80219d8:	40008000 	.word	0x40008000
 80219dc:	00f42400 	.word	0x00f42400
 80219e0:	0802657c 	.word	0x0802657c
      }
      else
      {
        ret = HAL_ERROR;
 80219e4:	2301      	movs	r3, #1
 80219e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80219ea:	697b      	ldr	r3, [r7, #20]
 80219ec:	2201      	movs	r2, #1
 80219ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80219f2:	697b      	ldr	r3, [r7, #20]
 80219f4:	2201      	movs	r2, #1
 80219f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80219fa:	697b      	ldr	r3, [r7, #20]
 80219fc:	2200      	movs	r2, #0
 80219fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8021a00:	697b      	ldr	r3, [r7, #20]
 8021a02:	2200      	movs	r2, #0
 8021a04:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8021a06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8021a0a:	4618      	mov	r0, r3
 8021a0c:	3730      	adds	r7, #48	; 0x30
 8021a0e:	46bd      	mov	sp, r7
 8021a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08021a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021a14:	b480      	push	{r7}
 8021a16:	b083      	sub	sp, #12
 8021a18:	af00      	add	r7, sp, #0
 8021a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021a1c:	687b      	ldr	r3, [r7, #4]
 8021a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a20:	f003 0301 	and.w	r3, r3, #1
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d00a      	beq.n	8021a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	685b      	ldr	r3, [r3, #4]
 8021a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	430a      	orrs	r2, r1
 8021a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a42:	f003 0302 	and.w	r3, r3, #2
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d00a      	beq.n	8021a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	685b      	ldr	r3, [r3, #4]
 8021a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	430a      	orrs	r2, r1
 8021a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a64:	f003 0304 	and.w	r3, r3, #4
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d00a      	beq.n	8021a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	681b      	ldr	r3, [r3, #0]
 8021a70:	685b      	ldr	r3, [r3, #4]
 8021a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	681b      	ldr	r3, [r3, #0]
 8021a7e:	430a      	orrs	r2, r1
 8021a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a86:	f003 0308 	and.w	r3, r3, #8
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d00a      	beq.n	8021aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	685b      	ldr	r3, [r3, #4]
 8021a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	430a      	orrs	r2, r1
 8021aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aa8:	f003 0310 	and.w	r3, r3, #16
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d00a      	beq.n	8021ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	681b      	ldr	r3, [r3, #0]
 8021ab4:	689b      	ldr	r3, [r3, #8]
 8021ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	681b      	ldr	r3, [r3, #0]
 8021ac2:	430a      	orrs	r2, r1
 8021ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aca:	f003 0320 	and.w	r3, r3, #32
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d00a      	beq.n	8021ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	689b      	ldr	r3, [r3, #8]
 8021ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	430a      	orrs	r2, r1
 8021ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d01a      	beq.n	8021b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	681b      	ldr	r3, [r3, #0]
 8021af8:	685b      	ldr	r3, [r3, #4]
 8021afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	430a      	orrs	r2, r1
 8021b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021b12:	d10a      	bne.n	8021b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	685b      	ldr	r3, [r3, #4]
 8021b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	430a      	orrs	r2, r1
 8021b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d00a      	beq.n	8021b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	681b      	ldr	r3, [r3, #0]
 8021b3a:	685b      	ldr	r3, [r3, #4]
 8021b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	430a      	orrs	r2, r1
 8021b4a:	605a      	str	r2, [r3, #4]
  }
}
 8021b4c:	bf00      	nop
 8021b4e:	370c      	adds	r7, #12
 8021b50:	46bd      	mov	sp, r7
 8021b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b56:	4770      	bx	lr

08021b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8021b58:	b580      	push	{r7, lr}
 8021b5a:	b086      	sub	sp, #24
 8021b5c:	af02      	add	r7, sp, #8
 8021b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	2200      	movs	r2, #0
 8021b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8021b68:	f7f8 ff58 	bl	801aa1c <HAL_GetTick>
 8021b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	681b      	ldr	r3, [r3, #0]
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	f003 0308 	and.w	r3, r3, #8
 8021b78:	2b08      	cmp	r3, #8
 8021b7a:	d10e      	bne.n	8021b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021b80:	9300      	str	r3, [sp, #0]
 8021b82:	68fb      	ldr	r3, [r7, #12]
 8021b84:	2200      	movs	r2, #0
 8021b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021b8a:	6878      	ldr	r0, [r7, #4]
 8021b8c:	f000 f82f 	bl	8021bee <UART_WaitOnFlagUntilTimeout>
 8021b90:	4603      	mov	r3, r0
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d001      	beq.n	8021b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021b96:	2303      	movs	r3, #3
 8021b98:	e025      	b.n	8021be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	681b      	ldr	r3, [r3, #0]
 8021b9e:	681b      	ldr	r3, [r3, #0]
 8021ba0:	f003 0304 	and.w	r3, r3, #4
 8021ba4:	2b04      	cmp	r3, #4
 8021ba6:	d10e      	bne.n	8021bc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021bac:	9300      	str	r3, [sp, #0]
 8021bae:	68fb      	ldr	r3, [r7, #12]
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8021bb6:	6878      	ldr	r0, [r7, #4]
 8021bb8:	f000 f819 	bl	8021bee <UART_WaitOnFlagUntilTimeout>
 8021bbc:	4603      	mov	r3, r0
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d001      	beq.n	8021bc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021bc2:	2303      	movs	r3, #3
 8021bc4:	e00f      	b.n	8021be6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	2220      	movs	r2, #32
 8021bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	2220      	movs	r2, #32
 8021bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	2200      	movs	r2, #0
 8021bda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	2200      	movs	r2, #0
 8021be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8021be4:	2300      	movs	r3, #0
}
 8021be6:	4618      	mov	r0, r3
 8021be8:	3710      	adds	r7, #16
 8021bea:	46bd      	mov	sp, r7
 8021bec:	bd80      	pop	{r7, pc}

08021bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021bee:	b580      	push	{r7, lr}
 8021bf0:	b09c      	sub	sp, #112	; 0x70
 8021bf2:	af00      	add	r7, sp, #0
 8021bf4:	60f8      	str	r0, [r7, #12]
 8021bf6:	60b9      	str	r1, [r7, #8]
 8021bf8:	603b      	str	r3, [r7, #0]
 8021bfa:	4613      	mov	r3, r2
 8021bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021bfe:	e0a9      	b.n	8021d54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c06:	f000 80a5 	beq.w	8021d54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021c0a:	f7f8 ff07 	bl	801aa1c <HAL_GetTick>
 8021c0e:	4602      	mov	r2, r0
 8021c10:	683b      	ldr	r3, [r7, #0]
 8021c12:	1ad3      	subs	r3, r2, r3
 8021c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8021c16:	429a      	cmp	r2, r3
 8021c18:	d302      	bcc.n	8021c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8021c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d140      	bne.n	8021ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8021c20:	68fb      	ldr	r3, [r7, #12]
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021c28:	e853 3f00 	ldrex	r3, [r3]
 8021c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8021c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8021c34:	667b      	str	r3, [r7, #100]	; 0x64
 8021c36:	68fb      	ldr	r3, [r7, #12]
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	461a      	mov	r2, r3
 8021c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8021c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021c46:	e841 2300 	strex	r3, r2, [r1]
 8021c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8021c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d1e6      	bne.n	8021c20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021c52:	68fb      	ldr	r3, [r7, #12]
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	3308      	adds	r3, #8
 8021c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021c5c:	e853 3f00 	ldrex	r3, [r3]
 8021c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021c64:	f023 0301 	bic.w	r3, r3, #1
 8021c68:	663b      	str	r3, [r7, #96]	; 0x60
 8021c6a:	68fb      	ldr	r3, [r7, #12]
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	3308      	adds	r3, #8
 8021c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8021c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8021c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8021c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021c7a:	e841 2300 	strex	r3, r2, [r1]
 8021c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8021c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d1e5      	bne.n	8021c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8021c86:	68fb      	ldr	r3, [r7, #12]
 8021c88:	2220      	movs	r2, #32
 8021c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8021c8e:	68fb      	ldr	r3, [r7, #12]
 8021c90:	2220      	movs	r2, #32
 8021c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8021c96:	68fb      	ldr	r3, [r7, #12]
 8021c98:	2200      	movs	r2, #0
 8021c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8021c9e:	2303      	movs	r3, #3
 8021ca0:	e069      	b.n	8021d76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8021ca2:	68fb      	ldr	r3, [r7, #12]
 8021ca4:	681b      	ldr	r3, [r3, #0]
 8021ca6:	681b      	ldr	r3, [r3, #0]
 8021ca8:	f003 0304 	and.w	r3, r3, #4
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d051      	beq.n	8021d54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	681b      	ldr	r3, [r3, #0]
 8021cb4:	69db      	ldr	r3, [r3, #28]
 8021cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021cbe:	d149      	bne.n	8021d54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021cc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd2:	e853 3f00 	ldrex	r3, [r3]
 8021cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8021cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021ce0:	68fb      	ldr	r3, [r7, #12]
 8021ce2:	681b      	ldr	r3, [r3, #0]
 8021ce4:	461a      	mov	r2, r3
 8021ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8021cea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021cf0:	e841 2300 	strex	r3, r2, [r1]
 8021cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8021cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cf8:	2b00      	cmp	r3, #0
 8021cfa:	d1e6      	bne.n	8021cca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	681b      	ldr	r3, [r3, #0]
 8021d00:	3308      	adds	r3, #8
 8021d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	e853 3f00 	ldrex	r3, [r3]
 8021d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8021d0c:	693b      	ldr	r3, [r7, #16]
 8021d0e:	f023 0301 	bic.w	r3, r3, #1
 8021d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	681b      	ldr	r3, [r3, #0]
 8021d18:	3308      	adds	r3, #8
 8021d1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021d1c:	623a      	str	r2, [r7, #32]
 8021d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021d20:	69f9      	ldr	r1, [r7, #28]
 8021d22:	6a3a      	ldr	r2, [r7, #32]
 8021d24:	e841 2300 	strex	r3, r2, [r1]
 8021d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8021d2a:	69bb      	ldr	r3, [r7, #24]
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d1e5      	bne.n	8021cfc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8021d30:	68fb      	ldr	r3, [r7, #12]
 8021d32:	2220      	movs	r2, #32
 8021d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8021d38:	68fb      	ldr	r3, [r7, #12]
 8021d3a:	2220      	movs	r2, #32
 8021d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8021d40:	68fb      	ldr	r3, [r7, #12]
 8021d42:	2220      	movs	r2, #32
 8021d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	2200      	movs	r2, #0
 8021d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8021d50:	2303      	movs	r3, #3
 8021d52:	e010      	b.n	8021d76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	681b      	ldr	r3, [r3, #0]
 8021d58:	69da      	ldr	r2, [r3, #28]
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	4013      	ands	r3, r2
 8021d5e:	68ba      	ldr	r2, [r7, #8]
 8021d60:	429a      	cmp	r2, r3
 8021d62:	bf0c      	ite	eq
 8021d64:	2301      	moveq	r3, #1
 8021d66:	2300      	movne	r3, #0
 8021d68:	b2db      	uxtb	r3, r3
 8021d6a:	461a      	mov	r2, r3
 8021d6c:	79fb      	ldrb	r3, [r7, #7]
 8021d6e:	429a      	cmp	r2, r3
 8021d70:	f43f af46 	beq.w	8021c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021d74:	2300      	movs	r3, #0
}
 8021d76:	4618      	mov	r0, r3
 8021d78:	3770      	adds	r7, #112	; 0x70
 8021d7a:	46bd      	mov	sp, r7
 8021d7c:	bd80      	pop	{r7, pc}

08021d7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021d7e:	b480      	push	{r7}
 8021d80:	b085      	sub	sp, #20
 8021d82:	af00      	add	r7, sp, #0
 8021d84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021d8c:	2b01      	cmp	r3, #1
 8021d8e:	d101      	bne.n	8021d94 <HAL_UARTEx_DisableFifoMode+0x16>
 8021d90:	2302      	movs	r3, #2
 8021d92:	e027      	b.n	8021de4 <HAL_UARTEx_DisableFifoMode+0x66>
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	2201      	movs	r2, #1
 8021d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	2224      	movs	r2, #36	; 0x24
 8021da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	681a      	ldr	r2, [r3, #0]
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	681b      	ldr	r3, [r3, #0]
 8021db6:	f022 0201 	bic.w	r2, r2, #1
 8021dba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021dbc:	68fb      	ldr	r3, [r7, #12]
 8021dbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8021dc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	681b      	ldr	r3, [r3, #0]
 8021dce:	68fa      	ldr	r2, [r7, #12]
 8021dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021dd2:	687b      	ldr	r3, [r7, #4]
 8021dd4:	2220      	movs	r2, #32
 8021dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021dda:	687b      	ldr	r3, [r7, #4]
 8021ddc:	2200      	movs	r2, #0
 8021dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8021de2:	2300      	movs	r3, #0
}
 8021de4:	4618      	mov	r0, r3
 8021de6:	3714      	adds	r7, #20
 8021de8:	46bd      	mov	sp, r7
 8021dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dee:	4770      	bx	lr

08021df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021df0:	b580      	push	{r7, lr}
 8021df2:	b084      	sub	sp, #16
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	6078      	str	r0, [r7, #4]
 8021df8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021e00:	2b01      	cmp	r3, #1
 8021e02:	d101      	bne.n	8021e08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8021e04:	2302      	movs	r3, #2
 8021e06:	e02d      	b.n	8021e64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	2201      	movs	r2, #1
 8021e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	2224      	movs	r2, #36	; 0x24
 8021e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	681b      	ldr	r3, [r3, #0]
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021e20:	687b      	ldr	r3, [r7, #4]
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	681a      	ldr	r2, [r3, #0]
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	681b      	ldr	r3, [r3, #0]
 8021e2a:	f022 0201 	bic.w	r2, r2, #1
 8021e2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	689b      	ldr	r3, [r3, #8]
 8021e36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	683a      	ldr	r2, [r7, #0]
 8021e40:	430a      	orrs	r2, r1
 8021e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021e44:	6878      	ldr	r0, [r7, #4]
 8021e46:	f000 f84f 	bl	8021ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	68fa      	ldr	r2, [r7, #12]
 8021e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	2220      	movs	r2, #32
 8021e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	2200      	movs	r2, #0
 8021e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8021e62:	2300      	movs	r3, #0
}
 8021e64:	4618      	mov	r0, r3
 8021e66:	3710      	adds	r7, #16
 8021e68:	46bd      	mov	sp, r7
 8021e6a:	bd80      	pop	{r7, pc}

08021e6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b084      	sub	sp, #16
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
 8021e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8021e7c:	2b01      	cmp	r3, #1
 8021e7e:	d101      	bne.n	8021e84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8021e80:	2302      	movs	r3, #2
 8021e82:	e02d      	b.n	8021ee0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	2201      	movs	r2, #1
 8021e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	2224      	movs	r2, #36	; 0x24
 8021e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	681a      	ldr	r2, [r3, #0]
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	f022 0201 	bic.w	r2, r2, #1
 8021eaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	689b      	ldr	r3, [r3, #8]
 8021eb2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	683a      	ldr	r2, [r7, #0]
 8021ebc:	430a      	orrs	r2, r1
 8021ebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021ec0:	6878      	ldr	r0, [r7, #4]
 8021ec2:	f000 f811 	bl	8021ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	68fa      	ldr	r2, [r7, #12]
 8021ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	2220      	movs	r2, #32
 8021ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	2200      	movs	r2, #0
 8021eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8021ede:	2300      	movs	r3, #0
}
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	3710      	adds	r7, #16
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	bd80      	pop	{r7, pc}

08021ee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8021ee8:	b480      	push	{r7}
 8021eea:	b085      	sub	sp, #20
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d108      	bne.n	8021f0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	2201      	movs	r2, #1
 8021efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	2201      	movs	r2, #1
 8021f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8021f08:	e031      	b.n	8021f6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8021f0a:	2308      	movs	r3, #8
 8021f0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8021f0e:	2308      	movs	r3, #8
 8021f10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	689b      	ldr	r3, [r3, #8]
 8021f18:	0e5b      	lsrs	r3, r3, #25
 8021f1a:	b2db      	uxtb	r3, r3
 8021f1c:	f003 0307 	and.w	r3, r3, #7
 8021f20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	689b      	ldr	r3, [r3, #8]
 8021f28:	0f5b      	lsrs	r3, r3, #29
 8021f2a:	b2db      	uxtb	r3, r3
 8021f2c:	f003 0307 	and.w	r3, r3, #7
 8021f30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021f32:	7bbb      	ldrb	r3, [r7, #14]
 8021f34:	7b3a      	ldrb	r2, [r7, #12]
 8021f36:	4911      	ldr	r1, [pc, #68]	; (8021f7c <UARTEx_SetNbDataToProcess+0x94>)
 8021f38:	5c8a      	ldrb	r2, [r1, r2]
 8021f3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8021f3e:	7b3a      	ldrb	r2, [r7, #12]
 8021f40:	490f      	ldr	r1, [pc, #60]	; (8021f80 <UARTEx_SetNbDataToProcess+0x98>)
 8021f42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8021f48:	b29a      	uxth	r2, r3
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021f50:	7bfb      	ldrb	r3, [r7, #15]
 8021f52:	7b7a      	ldrb	r2, [r7, #13]
 8021f54:	4909      	ldr	r1, [pc, #36]	; (8021f7c <UARTEx_SetNbDataToProcess+0x94>)
 8021f56:	5c8a      	ldrb	r2, [r1, r2]
 8021f58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021f5c:	7b7a      	ldrb	r2, [r7, #13]
 8021f5e:	4908      	ldr	r1, [pc, #32]	; (8021f80 <UARTEx_SetNbDataToProcess+0x98>)
 8021f60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021f62:	fb93 f3f2 	sdiv	r3, r3, r2
 8021f66:	b29a      	uxth	r2, r3
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8021f6e:	bf00      	nop
 8021f70:	3714      	adds	r7, #20
 8021f72:	46bd      	mov	sp, r7
 8021f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f78:	4770      	bx	lr
 8021f7a:	bf00      	nop
 8021f7c:	08026594 	.word	0x08026594
 8021f80:	0802659c 	.word	0x0802659c

08021f84 <__errno>:
 8021f84:	4b01      	ldr	r3, [pc, #4]	; (8021f8c <__errno+0x8>)
 8021f86:	6818      	ldr	r0, [r3, #0]
 8021f88:	4770      	bx	lr
 8021f8a:	bf00      	nop
 8021f8c:	2000002c 	.word	0x2000002c

08021f90 <__libc_init_array>:
 8021f90:	b570      	push	{r4, r5, r6, lr}
 8021f92:	4d0d      	ldr	r5, [pc, #52]	; (8021fc8 <__libc_init_array+0x38>)
 8021f94:	4c0d      	ldr	r4, [pc, #52]	; (8021fcc <__libc_init_array+0x3c>)
 8021f96:	1b64      	subs	r4, r4, r5
 8021f98:	10a4      	asrs	r4, r4, #2
 8021f9a:	2600      	movs	r6, #0
 8021f9c:	42a6      	cmp	r6, r4
 8021f9e:	d109      	bne.n	8021fb4 <__libc_init_array+0x24>
 8021fa0:	4d0b      	ldr	r5, [pc, #44]	; (8021fd0 <__libc_init_array+0x40>)
 8021fa2:	4c0c      	ldr	r4, [pc, #48]	; (8021fd4 <__libc_init_array+0x44>)
 8021fa4:	f004 f94a 	bl	802623c <_init>
 8021fa8:	1b64      	subs	r4, r4, r5
 8021faa:	10a4      	asrs	r4, r4, #2
 8021fac:	2600      	movs	r6, #0
 8021fae:	42a6      	cmp	r6, r4
 8021fb0:	d105      	bne.n	8021fbe <__libc_init_array+0x2e>
 8021fb2:	bd70      	pop	{r4, r5, r6, pc}
 8021fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fb8:	4798      	blx	r3
 8021fba:	3601      	adds	r6, #1
 8021fbc:	e7ee      	b.n	8021f9c <__libc_init_array+0xc>
 8021fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fc2:	4798      	blx	r3
 8021fc4:	3601      	adds	r6, #1
 8021fc6:	e7f2      	b.n	8021fae <__libc_init_array+0x1e>
 8021fc8:	08026b90 	.word	0x08026b90
 8021fcc:	08026b90 	.word	0x08026b90
 8021fd0:	08026b90 	.word	0x08026b90
 8021fd4:	08026b94 	.word	0x08026b94

08021fd8 <memcpy>:
 8021fd8:	440a      	add	r2, r1
 8021fda:	4291      	cmp	r1, r2
 8021fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8021fe0:	d100      	bne.n	8021fe4 <memcpy+0xc>
 8021fe2:	4770      	bx	lr
 8021fe4:	b510      	push	{r4, lr}
 8021fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021fee:	4291      	cmp	r1, r2
 8021ff0:	d1f9      	bne.n	8021fe6 <memcpy+0xe>
 8021ff2:	bd10      	pop	{r4, pc}

08021ff4 <memset>:
 8021ff4:	4402      	add	r2, r0
 8021ff6:	4603      	mov	r3, r0
 8021ff8:	4293      	cmp	r3, r2
 8021ffa:	d100      	bne.n	8021ffe <memset+0xa>
 8021ffc:	4770      	bx	lr
 8021ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8022002:	e7f9      	b.n	8021ff8 <memset+0x4>

08022004 <__cvt>:
 8022004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022008:	ec55 4b10 	vmov	r4, r5, d0
 802200c:	2d00      	cmp	r5, #0
 802200e:	460e      	mov	r6, r1
 8022010:	4619      	mov	r1, r3
 8022012:	462b      	mov	r3, r5
 8022014:	bfbb      	ittet	lt
 8022016:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802201a:	461d      	movlt	r5, r3
 802201c:	2300      	movge	r3, #0
 802201e:	232d      	movlt	r3, #45	; 0x2d
 8022020:	700b      	strb	r3, [r1, #0]
 8022022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022024:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022028:	4691      	mov	r9, r2
 802202a:	f023 0820 	bic.w	r8, r3, #32
 802202e:	bfbc      	itt	lt
 8022030:	4622      	movlt	r2, r4
 8022032:	4614      	movlt	r4, r2
 8022034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022038:	d005      	beq.n	8022046 <__cvt+0x42>
 802203a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802203e:	d100      	bne.n	8022042 <__cvt+0x3e>
 8022040:	3601      	adds	r6, #1
 8022042:	2102      	movs	r1, #2
 8022044:	e000      	b.n	8022048 <__cvt+0x44>
 8022046:	2103      	movs	r1, #3
 8022048:	ab03      	add	r3, sp, #12
 802204a:	9301      	str	r3, [sp, #4]
 802204c:	ab02      	add	r3, sp, #8
 802204e:	9300      	str	r3, [sp, #0]
 8022050:	ec45 4b10 	vmov	d0, r4, r5
 8022054:	4653      	mov	r3, sl
 8022056:	4632      	mov	r2, r6
 8022058:	f000 fe2e 	bl	8022cb8 <_dtoa_r>
 802205c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022060:	4607      	mov	r7, r0
 8022062:	d102      	bne.n	802206a <__cvt+0x66>
 8022064:	f019 0f01 	tst.w	r9, #1
 8022068:	d022      	beq.n	80220b0 <__cvt+0xac>
 802206a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802206e:	eb07 0906 	add.w	r9, r7, r6
 8022072:	d110      	bne.n	8022096 <__cvt+0x92>
 8022074:	783b      	ldrb	r3, [r7, #0]
 8022076:	2b30      	cmp	r3, #48	; 0x30
 8022078:	d10a      	bne.n	8022090 <__cvt+0x8c>
 802207a:	2200      	movs	r2, #0
 802207c:	2300      	movs	r3, #0
 802207e:	4620      	mov	r0, r4
 8022080:	4629      	mov	r1, r5
 8022082:	f7de fd49 	bl	8000b18 <__aeabi_dcmpeq>
 8022086:	b918      	cbnz	r0, 8022090 <__cvt+0x8c>
 8022088:	f1c6 0601 	rsb	r6, r6, #1
 802208c:	f8ca 6000 	str.w	r6, [sl]
 8022090:	f8da 3000 	ldr.w	r3, [sl]
 8022094:	4499      	add	r9, r3
 8022096:	2200      	movs	r2, #0
 8022098:	2300      	movs	r3, #0
 802209a:	4620      	mov	r0, r4
 802209c:	4629      	mov	r1, r5
 802209e:	f7de fd3b 	bl	8000b18 <__aeabi_dcmpeq>
 80220a2:	b108      	cbz	r0, 80220a8 <__cvt+0xa4>
 80220a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80220a8:	2230      	movs	r2, #48	; 0x30
 80220aa:	9b03      	ldr	r3, [sp, #12]
 80220ac:	454b      	cmp	r3, r9
 80220ae:	d307      	bcc.n	80220c0 <__cvt+0xbc>
 80220b0:	9b03      	ldr	r3, [sp, #12]
 80220b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220b4:	1bdb      	subs	r3, r3, r7
 80220b6:	4638      	mov	r0, r7
 80220b8:	6013      	str	r3, [r2, #0]
 80220ba:	b004      	add	sp, #16
 80220bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220c0:	1c59      	adds	r1, r3, #1
 80220c2:	9103      	str	r1, [sp, #12]
 80220c4:	701a      	strb	r2, [r3, #0]
 80220c6:	e7f0      	b.n	80220aa <__cvt+0xa6>

080220c8 <__exponent>:
 80220c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80220ca:	4603      	mov	r3, r0
 80220cc:	2900      	cmp	r1, #0
 80220ce:	bfb8      	it	lt
 80220d0:	4249      	neglt	r1, r1
 80220d2:	f803 2b02 	strb.w	r2, [r3], #2
 80220d6:	bfb4      	ite	lt
 80220d8:	222d      	movlt	r2, #45	; 0x2d
 80220da:	222b      	movge	r2, #43	; 0x2b
 80220dc:	2909      	cmp	r1, #9
 80220de:	7042      	strb	r2, [r0, #1]
 80220e0:	dd2a      	ble.n	8022138 <__exponent+0x70>
 80220e2:	f10d 0407 	add.w	r4, sp, #7
 80220e6:	46a4      	mov	ip, r4
 80220e8:	270a      	movs	r7, #10
 80220ea:	46a6      	mov	lr, r4
 80220ec:	460a      	mov	r2, r1
 80220ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80220f2:	fb07 1516 	mls	r5, r7, r6, r1
 80220f6:	3530      	adds	r5, #48	; 0x30
 80220f8:	2a63      	cmp	r2, #99	; 0x63
 80220fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80220fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022102:	4631      	mov	r1, r6
 8022104:	dcf1      	bgt.n	80220ea <__exponent+0x22>
 8022106:	3130      	adds	r1, #48	; 0x30
 8022108:	f1ae 0502 	sub.w	r5, lr, #2
 802210c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022110:	1c44      	adds	r4, r0, #1
 8022112:	4629      	mov	r1, r5
 8022114:	4561      	cmp	r1, ip
 8022116:	d30a      	bcc.n	802212e <__exponent+0x66>
 8022118:	f10d 0209 	add.w	r2, sp, #9
 802211c:	eba2 020e 	sub.w	r2, r2, lr
 8022120:	4565      	cmp	r5, ip
 8022122:	bf88      	it	hi
 8022124:	2200      	movhi	r2, #0
 8022126:	4413      	add	r3, r2
 8022128:	1a18      	subs	r0, r3, r0
 802212a:	b003      	add	sp, #12
 802212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802212e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022132:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022136:	e7ed      	b.n	8022114 <__exponent+0x4c>
 8022138:	2330      	movs	r3, #48	; 0x30
 802213a:	3130      	adds	r1, #48	; 0x30
 802213c:	7083      	strb	r3, [r0, #2]
 802213e:	70c1      	strb	r1, [r0, #3]
 8022140:	1d03      	adds	r3, r0, #4
 8022142:	e7f1      	b.n	8022128 <__exponent+0x60>

08022144 <_printf_float>:
 8022144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022148:	ed2d 8b02 	vpush	{d8}
 802214c:	b08d      	sub	sp, #52	; 0x34
 802214e:	460c      	mov	r4, r1
 8022150:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022154:	4616      	mov	r6, r2
 8022156:	461f      	mov	r7, r3
 8022158:	4605      	mov	r5, r0
 802215a:	f001 fd53 	bl	8023c04 <_localeconv_r>
 802215e:	f8d0 a000 	ldr.w	sl, [r0]
 8022162:	4650      	mov	r0, sl
 8022164:	f7de f85c 	bl	8000220 <strlen>
 8022168:	2300      	movs	r3, #0
 802216a:	930a      	str	r3, [sp, #40]	; 0x28
 802216c:	6823      	ldr	r3, [r4, #0]
 802216e:	9305      	str	r3, [sp, #20]
 8022170:	f8d8 3000 	ldr.w	r3, [r8]
 8022174:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022178:	3307      	adds	r3, #7
 802217a:	f023 0307 	bic.w	r3, r3, #7
 802217e:	f103 0208 	add.w	r2, r3, #8
 8022182:	f8c8 2000 	str.w	r2, [r8]
 8022186:	e9d3 2300 	ldrd	r2, r3, [r3]
 802218a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802218e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022192:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022196:	9307      	str	r3, [sp, #28]
 8022198:	f8cd 8018 	str.w	r8, [sp, #24]
 802219c:	ee08 0a10 	vmov	s16, r0
 80221a0:	4b9f      	ldr	r3, [pc, #636]	; (8022420 <_printf_float+0x2dc>)
 80221a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80221a6:	f04f 32ff 	mov.w	r2, #4294967295
 80221aa:	f7de fce7 	bl	8000b7c <__aeabi_dcmpun>
 80221ae:	bb88      	cbnz	r0, 8022214 <_printf_float+0xd0>
 80221b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80221b4:	4b9a      	ldr	r3, [pc, #616]	; (8022420 <_printf_float+0x2dc>)
 80221b6:	f04f 32ff 	mov.w	r2, #4294967295
 80221ba:	f7de fcc1 	bl	8000b40 <__aeabi_dcmple>
 80221be:	bb48      	cbnz	r0, 8022214 <_printf_float+0xd0>
 80221c0:	2200      	movs	r2, #0
 80221c2:	2300      	movs	r3, #0
 80221c4:	4640      	mov	r0, r8
 80221c6:	4649      	mov	r1, r9
 80221c8:	f7de fcb0 	bl	8000b2c <__aeabi_dcmplt>
 80221cc:	b110      	cbz	r0, 80221d4 <_printf_float+0x90>
 80221ce:	232d      	movs	r3, #45	; 0x2d
 80221d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221d4:	4b93      	ldr	r3, [pc, #588]	; (8022424 <_printf_float+0x2e0>)
 80221d6:	4894      	ldr	r0, [pc, #592]	; (8022428 <_printf_float+0x2e4>)
 80221d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80221dc:	bf94      	ite	ls
 80221de:	4698      	movls	r8, r3
 80221e0:	4680      	movhi	r8, r0
 80221e2:	2303      	movs	r3, #3
 80221e4:	6123      	str	r3, [r4, #16]
 80221e6:	9b05      	ldr	r3, [sp, #20]
 80221e8:	f023 0204 	bic.w	r2, r3, #4
 80221ec:	6022      	str	r2, [r4, #0]
 80221ee:	f04f 0900 	mov.w	r9, #0
 80221f2:	9700      	str	r7, [sp, #0]
 80221f4:	4633      	mov	r3, r6
 80221f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80221f8:	4621      	mov	r1, r4
 80221fa:	4628      	mov	r0, r5
 80221fc:	f000 f9d8 	bl	80225b0 <_printf_common>
 8022200:	3001      	adds	r0, #1
 8022202:	f040 8090 	bne.w	8022326 <_printf_float+0x1e2>
 8022206:	f04f 30ff 	mov.w	r0, #4294967295
 802220a:	b00d      	add	sp, #52	; 0x34
 802220c:	ecbd 8b02 	vpop	{d8}
 8022210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022214:	4642      	mov	r2, r8
 8022216:	464b      	mov	r3, r9
 8022218:	4640      	mov	r0, r8
 802221a:	4649      	mov	r1, r9
 802221c:	f7de fcae 	bl	8000b7c <__aeabi_dcmpun>
 8022220:	b140      	cbz	r0, 8022234 <_printf_float+0xf0>
 8022222:	464b      	mov	r3, r9
 8022224:	2b00      	cmp	r3, #0
 8022226:	bfbc      	itt	lt
 8022228:	232d      	movlt	r3, #45	; 0x2d
 802222a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802222e:	487f      	ldr	r0, [pc, #508]	; (802242c <_printf_float+0x2e8>)
 8022230:	4b7f      	ldr	r3, [pc, #508]	; (8022430 <_printf_float+0x2ec>)
 8022232:	e7d1      	b.n	80221d8 <_printf_float+0x94>
 8022234:	6863      	ldr	r3, [r4, #4]
 8022236:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802223a:	9206      	str	r2, [sp, #24]
 802223c:	1c5a      	adds	r2, r3, #1
 802223e:	d13f      	bne.n	80222c0 <_printf_float+0x17c>
 8022240:	2306      	movs	r3, #6
 8022242:	6063      	str	r3, [r4, #4]
 8022244:	9b05      	ldr	r3, [sp, #20]
 8022246:	6861      	ldr	r1, [r4, #4]
 8022248:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802224c:	2300      	movs	r3, #0
 802224e:	9303      	str	r3, [sp, #12]
 8022250:	ab0a      	add	r3, sp, #40	; 0x28
 8022252:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022256:	ab09      	add	r3, sp, #36	; 0x24
 8022258:	ec49 8b10 	vmov	d0, r8, r9
 802225c:	9300      	str	r3, [sp, #0]
 802225e:	6022      	str	r2, [r4, #0]
 8022260:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022264:	4628      	mov	r0, r5
 8022266:	f7ff fecd 	bl	8022004 <__cvt>
 802226a:	9b06      	ldr	r3, [sp, #24]
 802226c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802226e:	2b47      	cmp	r3, #71	; 0x47
 8022270:	4680      	mov	r8, r0
 8022272:	d108      	bne.n	8022286 <_printf_float+0x142>
 8022274:	1cc8      	adds	r0, r1, #3
 8022276:	db02      	blt.n	802227e <_printf_float+0x13a>
 8022278:	6863      	ldr	r3, [r4, #4]
 802227a:	4299      	cmp	r1, r3
 802227c:	dd41      	ble.n	8022302 <_printf_float+0x1be>
 802227e:	f1ab 0b02 	sub.w	fp, fp, #2
 8022282:	fa5f fb8b 	uxtb.w	fp, fp
 8022286:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802228a:	d820      	bhi.n	80222ce <_printf_float+0x18a>
 802228c:	3901      	subs	r1, #1
 802228e:	465a      	mov	r2, fp
 8022290:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022294:	9109      	str	r1, [sp, #36]	; 0x24
 8022296:	f7ff ff17 	bl	80220c8 <__exponent>
 802229a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802229c:	1813      	adds	r3, r2, r0
 802229e:	2a01      	cmp	r2, #1
 80222a0:	4681      	mov	r9, r0
 80222a2:	6123      	str	r3, [r4, #16]
 80222a4:	dc02      	bgt.n	80222ac <_printf_float+0x168>
 80222a6:	6822      	ldr	r2, [r4, #0]
 80222a8:	07d2      	lsls	r2, r2, #31
 80222aa:	d501      	bpl.n	80222b0 <_printf_float+0x16c>
 80222ac:	3301      	adds	r3, #1
 80222ae:	6123      	str	r3, [r4, #16]
 80222b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	d09c      	beq.n	80221f2 <_printf_float+0xae>
 80222b8:	232d      	movs	r3, #45	; 0x2d
 80222ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80222be:	e798      	b.n	80221f2 <_printf_float+0xae>
 80222c0:	9a06      	ldr	r2, [sp, #24]
 80222c2:	2a47      	cmp	r2, #71	; 0x47
 80222c4:	d1be      	bne.n	8022244 <_printf_float+0x100>
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d1bc      	bne.n	8022244 <_printf_float+0x100>
 80222ca:	2301      	movs	r3, #1
 80222cc:	e7b9      	b.n	8022242 <_printf_float+0xfe>
 80222ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80222d2:	d118      	bne.n	8022306 <_printf_float+0x1c2>
 80222d4:	2900      	cmp	r1, #0
 80222d6:	6863      	ldr	r3, [r4, #4]
 80222d8:	dd0b      	ble.n	80222f2 <_printf_float+0x1ae>
 80222da:	6121      	str	r1, [r4, #16]
 80222dc:	b913      	cbnz	r3, 80222e4 <_printf_float+0x1a0>
 80222de:	6822      	ldr	r2, [r4, #0]
 80222e0:	07d0      	lsls	r0, r2, #31
 80222e2:	d502      	bpl.n	80222ea <_printf_float+0x1a6>
 80222e4:	3301      	adds	r3, #1
 80222e6:	440b      	add	r3, r1
 80222e8:	6123      	str	r3, [r4, #16]
 80222ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80222ec:	f04f 0900 	mov.w	r9, #0
 80222f0:	e7de      	b.n	80222b0 <_printf_float+0x16c>
 80222f2:	b913      	cbnz	r3, 80222fa <_printf_float+0x1b6>
 80222f4:	6822      	ldr	r2, [r4, #0]
 80222f6:	07d2      	lsls	r2, r2, #31
 80222f8:	d501      	bpl.n	80222fe <_printf_float+0x1ba>
 80222fa:	3302      	adds	r3, #2
 80222fc:	e7f4      	b.n	80222e8 <_printf_float+0x1a4>
 80222fe:	2301      	movs	r3, #1
 8022300:	e7f2      	b.n	80222e8 <_printf_float+0x1a4>
 8022302:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8022306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022308:	4299      	cmp	r1, r3
 802230a:	db05      	blt.n	8022318 <_printf_float+0x1d4>
 802230c:	6823      	ldr	r3, [r4, #0]
 802230e:	6121      	str	r1, [r4, #16]
 8022310:	07d8      	lsls	r0, r3, #31
 8022312:	d5ea      	bpl.n	80222ea <_printf_float+0x1a6>
 8022314:	1c4b      	adds	r3, r1, #1
 8022316:	e7e7      	b.n	80222e8 <_printf_float+0x1a4>
 8022318:	2900      	cmp	r1, #0
 802231a:	bfd4      	ite	le
 802231c:	f1c1 0202 	rsble	r2, r1, #2
 8022320:	2201      	movgt	r2, #1
 8022322:	4413      	add	r3, r2
 8022324:	e7e0      	b.n	80222e8 <_printf_float+0x1a4>
 8022326:	6823      	ldr	r3, [r4, #0]
 8022328:	055a      	lsls	r2, r3, #21
 802232a:	d407      	bmi.n	802233c <_printf_float+0x1f8>
 802232c:	6923      	ldr	r3, [r4, #16]
 802232e:	4642      	mov	r2, r8
 8022330:	4631      	mov	r1, r6
 8022332:	4628      	mov	r0, r5
 8022334:	47b8      	blx	r7
 8022336:	3001      	adds	r0, #1
 8022338:	d12c      	bne.n	8022394 <_printf_float+0x250>
 802233a:	e764      	b.n	8022206 <_printf_float+0xc2>
 802233c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022340:	f240 80e0 	bls.w	8022504 <_printf_float+0x3c0>
 8022344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022348:	2200      	movs	r2, #0
 802234a:	2300      	movs	r3, #0
 802234c:	f7de fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8022350:	2800      	cmp	r0, #0
 8022352:	d034      	beq.n	80223be <_printf_float+0x27a>
 8022354:	4a37      	ldr	r2, [pc, #220]	; (8022434 <_printf_float+0x2f0>)
 8022356:	2301      	movs	r3, #1
 8022358:	4631      	mov	r1, r6
 802235a:	4628      	mov	r0, r5
 802235c:	47b8      	blx	r7
 802235e:	3001      	adds	r0, #1
 8022360:	f43f af51 	beq.w	8022206 <_printf_float+0xc2>
 8022364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022368:	429a      	cmp	r2, r3
 802236a:	db02      	blt.n	8022372 <_printf_float+0x22e>
 802236c:	6823      	ldr	r3, [r4, #0]
 802236e:	07d8      	lsls	r0, r3, #31
 8022370:	d510      	bpl.n	8022394 <_printf_float+0x250>
 8022372:	ee18 3a10 	vmov	r3, s16
 8022376:	4652      	mov	r2, sl
 8022378:	4631      	mov	r1, r6
 802237a:	4628      	mov	r0, r5
 802237c:	47b8      	blx	r7
 802237e:	3001      	adds	r0, #1
 8022380:	f43f af41 	beq.w	8022206 <_printf_float+0xc2>
 8022384:	f04f 0800 	mov.w	r8, #0
 8022388:	f104 091a 	add.w	r9, r4, #26
 802238c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802238e:	3b01      	subs	r3, #1
 8022390:	4543      	cmp	r3, r8
 8022392:	dc09      	bgt.n	80223a8 <_printf_float+0x264>
 8022394:	6823      	ldr	r3, [r4, #0]
 8022396:	079b      	lsls	r3, r3, #30
 8022398:	f100 8105 	bmi.w	80225a6 <_printf_float+0x462>
 802239c:	68e0      	ldr	r0, [r4, #12]
 802239e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223a0:	4298      	cmp	r0, r3
 80223a2:	bfb8      	it	lt
 80223a4:	4618      	movlt	r0, r3
 80223a6:	e730      	b.n	802220a <_printf_float+0xc6>
 80223a8:	2301      	movs	r3, #1
 80223aa:	464a      	mov	r2, r9
 80223ac:	4631      	mov	r1, r6
 80223ae:	4628      	mov	r0, r5
 80223b0:	47b8      	blx	r7
 80223b2:	3001      	adds	r0, #1
 80223b4:	f43f af27 	beq.w	8022206 <_printf_float+0xc2>
 80223b8:	f108 0801 	add.w	r8, r8, #1
 80223bc:	e7e6      	b.n	802238c <_printf_float+0x248>
 80223be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	dc39      	bgt.n	8022438 <_printf_float+0x2f4>
 80223c4:	4a1b      	ldr	r2, [pc, #108]	; (8022434 <_printf_float+0x2f0>)
 80223c6:	2301      	movs	r3, #1
 80223c8:	4631      	mov	r1, r6
 80223ca:	4628      	mov	r0, r5
 80223cc:	47b8      	blx	r7
 80223ce:	3001      	adds	r0, #1
 80223d0:	f43f af19 	beq.w	8022206 <_printf_float+0xc2>
 80223d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80223d8:	4313      	orrs	r3, r2
 80223da:	d102      	bne.n	80223e2 <_printf_float+0x29e>
 80223dc:	6823      	ldr	r3, [r4, #0]
 80223de:	07d9      	lsls	r1, r3, #31
 80223e0:	d5d8      	bpl.n	8022394 <_printf_float+0x250>
 80223e2:	ee18 3a10 	vmov	r3, s16
 80223e6:	4652      	mov	r2, sl
 80223e8:	4631      	mov	r1, r6
 80223ea:	4628      	mov	r0, r5
 80223ec:	47b8      	blx	r7
 80223ee:	3001      	adds	r0, #1
 80223f0:	f43f af09 	beq.w	8022206 <_printf_float+0xc2>
 80223f4:	f04f 0900 	mov.w	r9, #0
 80223f8:	f104 0a1a 	add.w	sl, r4, #26
 80223fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223fe:	425b      	negs	r3, r3
 8022400:	454b      	cmp	r3, r9
 8022402:	dc01      	bgt.n	8022408 <_printf_float+0x2c4>
 8022404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022406:	e792      	b.n	802232e <_printf_float+0x1ea>
 8022408:	2301      	movs	r3, #1
 802240a:	4652      	mov	r2, sl
 802240c:	4631      	mov	r1, r6
 802240e:	4628      	mov	r0, r5
 8022410:	47b8      	blx	r7
 8022412:	3001      	adds	r0, #1
 8022414:	f43f aef7 	beq.w	8022206 <_printf_float+0xc2>
 8022418:	f109 0901 	add.w	r9, r9, #1
 802241c:	e7ee      	b.n	80223fc <_printf_float+0x2b8>
 802241e:	bf00      	nop
 8022420:	7fefffff 	.word	0x7fefffff
 8022424:	080265a8 	.word	0x080265a8
 8022428:	080265ac 	.word	0x080265ac
 802242c:	080265b4 	.word	0x080265b4
 8022430:	080265b0 	.word	0x080265b0
 8022434:	080265b8 	.word	0x080265b8
 8022438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802243a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802243c:	429a      	cmp	r2, r3
 802243e:	bfa8      	it	ge
 8022440:	461a      	movge	r2, r3
 8022442:	2a00      	cmp	r2, #0
 8022444:	4691      	mov	r9, r2
 8022446:	dc37      	bgt.n	80224b8 <_printf_float+0x374>
 8022448:	f04f 0b00 	mov.w	fp, #0
 802244c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022450:	f104 021a 	add.w	r2, r4, #26
 8022454:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022456:	9305      	str	r3, [sp, #20]
 8022458:	eba3 0309 	sub.w	r3, r3, r9
 802245c:	455b      	cmp	r3, fp
 802245e:	dc33      	bgt.n	80224c8 <_printf_float+0x384>
 8022460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022464:	429a      	cmp	r2, r3
 8022466:	db3b      	blt.n	80224e0 <_printf_float+0x39c>
 8022468:	6823      	ldr	r3, [r4, #0]
 802246a:	07da      	lsls	r2, r3, #31
 802246c:	d438      	bmi.n	80224e0 <_printf_float+0x39c>
 802246e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022470:	9a05      	ldr	r2, [sp, #20]
 8022472:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022474:	1a9a      	subs	r2, r3, r2
 8022476:	eba3 0901 	sub.w	r9, r3, r1
 802247a:	4591      	cmp	r9, r2
 802247c:	bfa8      	it	ge
 802247e:	4691      	movge	r9, r2
 8022480:	f1b9 0f00 	cmp.w	r9, #0
 8022484:	dc35      	bgt.n	80224f2 <_printf_float+0x3ae>
 8022486:	f04f 0800 	mov.w	r8, #0
 802248a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802248e:	f104 0a1a 	add.w	sl, r4, #26
 8022492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022496:	1a9b      	subs	r3, r3, r2
 8022498:	eba3 0309 	sub.w	r3, r3, r9
 802249c:	4543      	cmp	r3, r8
 802249e:	f77f af79 	ble.w	8022394 <_printf_float+0x250>
 80224a2:	2301      	movs	r3, #1
 80224a4:	4652      	mov	r2, sl
 80224a6:	4631      	mov	r1, r6
 80224a8:	4628      	mov	r0, r5
 80224aa:	47b8      	blx	r7
 80224ac:	3001      	adds	r0, #1
 80224ae:	f43f aeaa 	beq.w	8022206 <_printf_float+0xc2>
 80224b2:	f108 0801 	add.w	r8, r8, #1
 80224b6:	e7ec      	b.n	8022492 <_printf_float+0x34e>
 80224b8:	4613      	mov	r3, r2
 80224ba:	4631      	mov	r1, r6
 80224bc:	4642      	mov	r2, r8
 80224be:	4628      	mov	r0, r5
 80224c0:	47b8      	blx	r7
 80224c2:	3001      	adds	r0, #1
 80224c4:	d1c0      	bne.n	8022448 <_printf_float+0x304>
 80224c6:	e69e      	b.n	8022206 <_printf_float+0xc2>
 80224c8:	2301      	movs	r3, #1
 80224ca:	4631      	mov	r1, r6
 80224cc:	4628      	mov	r0, r5
 80224ce:	9205      	str	r2, [sp, #20]
 80224d0:	47b8      	blx	r7
 80224d2:	3001      	adds	r0, #1
 80224d4:	f43f ae97 	beq.w	8022206 <_printf_float+0xc2>
 80224d8:	9a05      	ldr	r2, [sp, #20]
 80224da:	f10b 0b01 	add.w	fp, fp, #1
 80224de:	e7b9      	b.n	8022454 <_printf_float+0x310>
 80224e0:	ee18 3a10 	vmov	r3, s16
 80224e4:	4652      	mov	r2, sl
 80224e6:	4631      	mov	r1, r6
 80224e8:	4628      	mov	r0, r5
 80224ea:	47b8      	blx	r7
 80224ec:	3001      	adds	r0, #1
 80224ee:	d1be      	bne.n	802246e <_printf_float+0x32a>
 80224f0:	e689      	b.n	8022206 <_printf_float+0xc2>
 80224f2:	9a05      	ldr	r2, [sp, #20]
 80224f4:	464b      	mov	r3, r9
 80224f6:	4442      	add	r2, r8
 80224f8:	4631      	mov	r1, r6
 80224fa:	4628      	mov	r0, r5
 80224fc:	47b8      	blx	r7
 80224fe:	3001      	adds	r0, #1
 8022500:	d1c1      	bne.n	8022486 <_printf_float+0x342>
 8022502:	e680      	b.n	8022206 <_printf_float+0xc2>
 8022504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022506:	2a01      	cmp	r2, #1
 8022508:	dc01      	bgt.n	802250e <_printf_float+0x3ca>
 802250a:	07db      	lsls	r3, r3, #31
 802250c:	d538      	bpl.n	8022580 <_printf_float+0x43c>
 802250e:	2301      	movs	r3, #1
 8022510:	4642      	mov	r2, r8
 8022512:	4631      	mov	r1, r6
 8022514:	4628      	mov	r0, r5
 8022516:	47b8      	blx	r7
 8022518:	3001      	adds	r0, #1
 802251a:	f43f ae74 	beq.w	8022206 <_printf_float+0xc2>
 802251e:	ee18 3a10 	vmov	r3, s16
 8022522:	4652      	mov	r2, sl
 8022524:	4631      	mov	r1, r6
 8022526:	4628      	mov	r0, r5
 8022528:	47b8      	blx	r7
 802252a:	3001      	adds	r0, #1
 802252c:	f43f ae6b 	beq.w	8022206 <_printf_float+0xc2>
 8022530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022534:	2200      	movs	r2, #0
 8022536:	2300      	movs	r3, #0
 8022538:	f7de faee 	bl	8000b18 <__aeabi_dcmpeq>
 802253c:	b9d8      	cbnz	r0, 8022576 <_printf_float+0x432>
 802253e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022540:	f108 0201 	add.w	r2, r8, #1
 8022544:	3b01      	subs	r3, #1
 8022546:	4631      	mov	r1, r6
 8022548:	4628      	mov	r0, r5
 802254a:	47b8      	blx	r7
 802254c:	3001      	adds	r0, #1
 802254e:	d10e      	bne.n	802256e <_printf_float+0x42a>
 8022550:	e659      	b.n	8022206 <_printf_float+0xc2>
 8022552:	2301      	movs	r3, #1
 8022554:	4652      	mov	r2, sl
 8022556:	4631      	mov	r1, r6
 8022558:	4628      	mov	r0, r5
 802255a:	47b8      	blx	r7
 802255c:	3001      	adds	r0, #1
 802255e:	f43f ae52 	beq.w	8022206 <_printf_float+0xc2>
 8022562:	f108 0801 	add.w	r8, r8, #1
 8022566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022568:	3b01      	subs	r3, #1
 802256a:	4543      	cmp	r3, r8
 802256c:	dcf1      	bgt.n	8022552 <_printf_float+0x40e>
 802256e:	464b      	mov	r3, r9
 8022570:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022574:	e6dc      	b.n	8022330 <_printf_float+0x1ec>
 8022576:	f04f 0800 	mov.w	r8, #0
 802257a:	f104 0a1a 	add.w	sl, r4, #26
 802257e:	e7f2      	b.n	8022566 <_printf_float+0x422>
 8022580:	2301      	movs	r3, #1
 8022582:	4642      	mov	r2, r8
 8022584:	e7df      	b.n	8022546 <_printf_float+0x402>
 8022586:	2301      	movs	r3, #1
 8022588:	464a      	mov	r2, r9
 802258a:	4631      	mov	r1, r6
 802258c:	4628      	mov	r0, r5
 802258e:	47b8      	blx	r7
 8022590:	3001      	adds	r0, #1
 8022592:	f43f ae38 	beq.w	8022206 <_printf_float+0xc2>
 8022596:	f108 0801 	add.w	r8, r8, #1
 802259a:	68e3      	ldr	r3, [r4, #12]
 802259c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802259e:	1a5b      	subs	r3, r3, r1
 80225a0:	4543      	cmp	r3, r8
 80225a2:	dcf0      	bgt.n	8022586 <_printf_float+0x442>
 80225a4:	e6fa      	b.n	802239c <_printf_float+0x258>
 80225a6:	f04f 0800 	mov.w	r8, #0
 80225aa:	f104 0919 	add.w	r9, r4, #25
 80225ae:	e7f4      	b.n	802259a <_printf_float+0x456>

080225b0 <_printf_common>:
 80225b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225b4:	4616      	mov	r6, r2
 80225b6:	4699      	mov	r9, r3
 80225b8:	688a      	ldr	r2, [r1, #8]
 80225ba:	690b      	ldr	r3, [r1, #16]
 80225bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80225c0:	4293      	cmp	r3, r2
 80225c2:	bfb8      	it	lt
 80225c4:	4613      	movlt	r3, r2
 80225c6:	6033      	str	r3, [r6, #0]
 80225c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80225cc:	4607      	mov	r7, r0
 80225ce:	460c      	mov	r4, r1
 80225d0:	b10a      	cbz	r2, 80225d6 <_printf_common+0x26>
 80225d2:	3301      	adds	r3, #1
 80225d4:	6033      	str	r3, [r6, #0]
 80225d6:	6823      	ldr	r3, [r4, #0]
 80225d8:	0699      	lsls	r1, r3, #26
 80225da:	bf42      	ittt	mi
 80225dc:	6833      	ldrmi	r3, [r6, #0]
 80225de:	3302      	addmi	r3, #2
 80225e0:	6033      	strmi	r3, [r6, #0]
 80225e2:	6825      	ldr	r5, [r4, #0]
 80225e4:	f015 0506 	ands.w	r5, r5, #6
 80225e8:	d106      	bne.n	80225f8 <_printf_common+0x48>
 80225ea:	f104 0a19 	add.w	sl, r4, #25
 80225ee:	68e3      	ldr	r3, [r4, #12]
 80225f0:	6832      	ldr	r2, [r6, #0]
 80225f2:	1a9b      	subs	r3, r3, r2
 80225f4:	42ab      	cmp	r3, r5
 80225f6:	dc26      	bgt.n	8022646 <_printf_common+0x96>
 80225f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80225fc:	1e13      	subs	r3, r2, #0
 80225fe:	6822      	ldr	r2, [r4, #0]
 8022600:	bf18      	it	ne
 8022602:	2301      	movne	r3, #1
 8022604:	0692      	lsls	r2, r2, #26
 8022606:	d42b      	bmi.n	8022660 <_printf_common+0xb0>
 8022608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802260c:	4649      	mov	r1, r9
 802260e:	4638      	mov	r0, r7
 8022610:	47c0      	blx	r8
 8022612:	3001      	adds	r0, #1
 8022614:	d01e      	beq.n	8022654 <_printf_common+0xa4>
 8022616:	6823      	ldr	r3, [r4, #0]
 8022618:	68e5      	ldr	r5, [r4, #12]
 802261a:	6832      	ldr	r2, [r6, #0]
 802261c:	f003 0306 	and.w	r3, r3, #6
 8022620:	2b04      	cmp	r3, #4
 8022622:	bf08      	it	eq
 8022624:	1aad      	subeq	r5, r5, r2
 8022626:	68a3      	ldr	r3, [r4, #8]
 8022628:	6922      	ldr	r2, [r4, #16]
 802262a:	bf0c      	ite	eq
 802262c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022630:	2500      	movne	r5, #0
 8022632:	4293      	cmp	r3, r2
 8022634:	bfc4      	itt	gt
 8022636:	1a9b      	subgt	r3, r3, r2
 8022638:	18ed      	addgt	r5, r5, r3
 802263a:	2600      	movs	r6, #0
 802263c:	341a      	adds	r4, #26
 802263e:	42b5      	cmp	r5, r6
 8022640:	d11a      	bne.n	8022678 <_printf_common+0xc8>
 8022642:	2000      	movs	r0, #0
 8022644:	e008      	b.n	8022658 <_printf_common+0xa8>
 8022646:	2301      	movs	r3, #1
 8022648:	4652      	mov	r2, sl
 802264a:	4649      	mov	r1, r9
 802264c:	4638      	mov	r0, r7
 802264e:	47c0      	blx	r8
 8022650:	3001      	adds	r0, #1
 8022652:	d103      	bne.n	802265c <_printf_common+0xac>
 8022654:	f04f 30ff 	mov.w	r0, #4294967295
 8022658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802265c:	3501      	adds	r5, #1
 802265e:	e7c6      	b.n	80225ee <_printf_common+0x3e>
 8022660:	18e1      	adds	r1, r4, r3
 8022662:	1c5a      	adds	r2, r3, #1
 8022664:	2030      	movs	r0, #48	; 0x30
 8022666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802266a:	4422      	add	r2, r4
 802266c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022674:	3302      	adds	r3, #2
 8022676:	e7c7      	b.n	8022608 <_printf_common+0x58>
 8022678:	2301      	movs	r3, #1
 802267a:	4622      	mov	r2, r4
 802267c:	4649      	mov	r1, r9
 802267e:	4638      	mov	r0, r7
 8022680:	47c0      	blx	r8
 8022682:	3001      	adds	r0, #1
 8022684:	d0e6      	beq.n	8022654 <_printf_common+0xa4>
 8022686:	3601      	adds	r6, #1
 8022688:	e7d9      	b.n	802263e <_printf_common+0x8e>
	...

0802268c <_printf_i>:
 802268c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022690:	7e0f      	ldrb	r7, [r1, #24]
 8022692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022694:	2f78      	cmp	r7, #120	; 0x78
 8022696:	4691      	mov	r9, r2
 8022698:	4680      	mov	r8, r0
 802269a:	460c      	mov	r4, r1
 802269c:	469a      	mov	sl, r3
 802269e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80226a2:	d807      	bhi.n	80226b4 <_printf_i+0x28>
 80226a4:	2f62      	cmp	r7, #98	; 0x62
 80226a6:	d80a      	bhi.n	80226be <_printf_i+0x32>
 80226a8:	2f00      	cmp	r7, #0
 80226aa:	f000 80d8 	beq.w	802285e <_printf_i+0x1d2>
 80226ae:	2f58      	cmp	r7, #88	; 0x58
 80226b0:	f000 80a3 	beq.w	80227fa <_printf_i+0x16e>
 80226b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80226b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80226bc:	e03a      	b.n	8022734 <_printf_i+0xa8>
 80226be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80226c2:	2b15      	cmp	r3, #21
 80226c4:	d8f6      	bhi.n	80226b4 <_printf_i+0x28>
 80226c6:	a101      	add	r1, pc, #4	; (adr r1, 80226cc <_printf_i+0x40>)
 80226c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80226cc:	08022725 	.word	0x08022725
 80226d0:	08022739 	.word	0x08022739
 80226d4:	080226b5 	.word	0x080226b5
 80226d8:	080226b5 	.word	0x080226b5
 80226dc:	080226b5 	.word	0x080226b5
 80226e0:	080226b5 	.word	0x080226b5
 80226e4:	08022739 	.word	0x08022739
 80226e8:	080226b5 	.word	0x080226b5
 80226ec:	080226b5 	.word	0x080226b5
 80226f0:	080226b5 	.word	0x080226b5
 80226f4:	080226b5 	.word	0x080226b5
 80226f8:	08022845 	.word	0x08022845
 80226fc:	08022769 	.word	0x08022769
 8022700:	08022827 	.word	0x08022827
 8022704:	080226b5 	.word	0x080226b5
 8022708:	080226b5 	.word	0x080226b5
 802270c:	08022867 	.word	0x08022867
 8022710:	080226b5 	.word	0x080226b5
 8022714:	08022769 	.word	0x08022769
 8022718:	080226b5 	.word	0x080226b5
 802271c:	080226b5 	.word	0x080226b5
 8022720:	0802282f 	.word	0x0802282f
 8022724:	682b      	ldr	r3, [r5, #0]
 8022726:	1d1a      	adds	r2, r3, #4
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	602a      	str	r2, [r5, #0]
 802272c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022734:	2301      	movs	r3, #1
 8022736:	e0a3      	b.n	8022880 <_printf_i+0x1f4>
 8022738:	6820      	ldr	r0, [r4, #0]
 802273a:	6829      	ldr	r1, [r5, #0]
 802273c:	0606      	lsls	r6, r0, #24
 802273e:	f101 0304 	add.w	r3, r1, #4
 8022742:	d50a      	bpl.n	802275a <_printf_i+0xce>
 8022744:	680e      	ldr	r6, [r1, #0]
 8022746:	602b      	str	r3, [r5, #0]
 8022748:	2e00      	cmp	r6, #0
 802274a:	da03      	bge.n	8022754 <_printf_i+0xc8>
 802274c:	232d      	movs	r3, #45	; 0x2d
 802274e:	4276      	negs	r6, r6
 8022750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022754:	485e      	ldr	r0, [pc, #376]	; (80228d0 <_printf_i+0x244>)
 8022756:	230a      	movs	r3, #10
 8022758:	e019      	b.n	802278e <_printf_i+0x102>
 802275a:	680e      	ldr	r6, [r1, #0]
 802275c:	602b      	str	r3, [r5, #0]
 802275e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022762:	bf18      	it	ne
 8022764:	b236      	sxthne	r6, r6
 8022766:	e7ef      	b.n	8022748 <_printf_i+0xbc>
 8022768:	682b      	ldr	r3, [r5, #0]
 802276a:	6820      	ldr	r0, [r4, #0]
 802276c:	1d19      	adds	r1, r3, #4
 802276e:	6029      	str	r1, [r5, #0]
 8022770:	0601      	lsls	r1, r0, #24
 8022772:	d501      	bpl.n	8022778 <_printf_i+0xec>
 8022774:	681e      	ldr	r6, [r3, #0]
 8022776:	e002      	b.n	802277e <_printf_i+0xf2>
 8022778:	0646      	lsls	r6, r0, #25
 802277a:	d5fb      	bpl.n	8022774 <_printf_i+0xe8>
 802277c:	881e      	ldrh	r6, [r3, #0]
 802277e:	4854      	ldr	r0, [pc, #336]	; (80228d0 <_printf_i+0x244>)
 8022780:	2f6f      	cmp	r7, #111	; 0x6f
 8022782:	bf0c      	ite	eq
 8022784:	2308      	moveq	r3, #8
 8022786:	230a      	movne	r3, #10
 8022788:	2100      	movs	r1, #0
 802278a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802278e:	6865      	ldr	r5, [r4, #4]
 8022790:	60a5      	str	r5, [r4, #8]
 8022792:	2d00      	cmp	r5, #0
 8022794:	bfa2      	ittt	ge
 8022796:	6821      	ldrge	r1, [r4, #0]
 8022798:	f021 0104 	bicge.w	r1, r1, #4
 802279c:	6021      	strge	r1, [r4, #0]
 802279e:	b90e      	cbnz	r6, 80227a4 <_printf_i+0x118>
 80227a0:	2d00      	cmp	r5, #0
 80227a2:	d04d      	beq.n	8022840 <_printf_i+0x1b4>
 80227a4:	4615      	mov	r5, r2
 80227a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80227aa:	fb03 6711 	mls	r7, r3, r1, r6
 80227ae:	5dc7      	ldrb	r7, [r0, r7]
 80227b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80227b4:	4637      	mov	r7, r6
 80227b6:	42bb      	cmp	r3, r7
 80227b8:	460e      	mov	r6, r1
 80227ba:	d9f4      	bls.n	80227a6 <_printf_i+0x11a>
 80227bc:	2b08      	cmp	r3, #8
 80227be:	d10b      	bne.n	80227d8 <_printf_i+0x14c>
 80227c0:	6823      	ldr	r3, [r4, #0]
 80227c2:	07de      	lsls	r6, r3, #31
 80227c4:	d508      	bpl.n	80227d8 <_printf_i+0x14c>
 80227c6:	6923      	ldr	r3, [r4, #16]
 80227c8:	6861      	ldr	r1, [r4, #4]
 80227ca:	4299      	cmp	r1, r3
 80227cc:	bfde      	ittt	le
 80227ce:	2330      	movle	r3, #48	; 0x30
 80227d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80227d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80227d8:	1b52      	subs	r2, r2, r5
 80227da:	6122      	str	r2, [r4, #16]
 80227dc:	f8cd a000 	str.w	sl, [sp]
 80227e0:	464b      	mov	r3, r9
 80227e2:	aa03      	add	r2, sp, #12
 80227e4:	4621      	mov	r1, r4
 80227e6:	4640      	mov	r0, r8
 80227e8:	f7ff fee2 	bl	80225b0 <_printf_common>
 80227ec:	3001      	adds	r0, #1
 80227ee:	d14c      	bne.n	802288a <_printf_i+0x1fe>
 80227f0:	f04f 30ff 	mov.w	r0, #4294967295
 80227f4:	b004      	add	sp, #16
 80227f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227fa:	4835      	ldr	r0, [pc, #212]	; (80228d0 <_printf_i+0x244>)
 80227fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022800:	6829      	ldr	r1, [r5, #0]
 8022802:	6823      	ldr	r3, [r4, #0]
 8022804:	f851 6b04 	ldr.w	r6, [r1], #4
 8022808:	6029      	str	r1, [r5, #0]
 802280a:	061d      	lsls	r5, r3, #24
 802280c:	d514      	bpl.n	8022838 <_printf_i+0x1ac>
 802280e:	07df      	lsls	r7, r3, #31
 8022810:	bf44      	itt	mi
 8022812:	f043 0320 	orrmi.w	r3, r3, #32
 8022816:	6023      	strmi	r3, [r4, #0]
 8022818:	b91e      	cbnz	r6, 8022822 <_printf_i+0x196>
 802281a:	6823      	ldr	r3, [r4, #0]
 802281c:	f023 0320 	bic.w	r3, r3, #32
 8022820:	6023      	str	r3, [r4, #0]
 8022822:	2310      	movs	r3, #16
 8022824:	e7b0      	b.n	8022788 <_printf_i+0xfc>
 8022826:	6823      	ldr	r3, [r4, #0]
 8022828:	f043 0320 	orr.w	r3, r3, #32
 802282c:	6023      	str	r3, [r4, #0]
 802282e:	2378      	movs	r3, #120	; 0x78
 8022830:	4828      	ldr	r0, [pc, #160]	; (80228d4 <_printf_i+0x248>)
 8022832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022836:	e7e3      	b.n	8022800 <_printf_i+0x174>
 8022838:	0659      	lsls	r1, r3, #25
 802283a:	bf48      	it	mi
 802283c:	b2b6      	uxthmi	r6, r6
 802283e:	e7e6      	b.n	802280e <_printf_i+0x182>
 8022840:	4615      	mov	r5, r2
 8022842:	e7bb      	b.n	80227bc <_printf_i+0x130>
 8022844:	682b      	ldr	r3, [r5, #0]
 8022846:	6826      	ldr	r6, [r4, #0]
 8022848:	6961      	ldr	r1, [r4, #20]
 802284a:	1d18      	adds	r0, r3, #4
 802284c:	6028      	str	r0, [r5, #0]
 802284e:	0635      	lsls	r5, r6, #24
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	d501      	bpl.n	8022858 <_printf_i+0x1cc>
 8022854:	6019      	str	r1, [r3, #0]
 8022856:	e002      	b.n	802285e <_printf_i+0x1d2>
 8022858:	0670      	lsls	r0, r6, #25
 802285a:	d5fb      	bpl.n	8022854 <_printf_i+0x1c8>
 802285c:	8019      	strh	r1, [r3, #0]
 802285e:	2300      	movs	r3, #0
 8022860:	6123      	str	r3, [r4, #16]
 8022862:	4615      	mov	r5, r2
 8022864:	e7ba      	b.n	80227dc <_printf_i+0x150>
 8022866:	682b      	ldr	r3, [r5, #0]
 8022868:	1d1a      	adds	r2, r3, #4
 802286a:	602a      	str	r2, [r5, #0]
 802286c:	681d      	ldr	r5, [r3, #0]
 802286e:	6862      	ldr	r2, [r4, #4]
 8022870:	2100      	movs	r1, #0
 8022872:	4628      	mov	r0, r5
 8022874:	f7dd fcdc 	bl	8000230 <memchr>
 8022878:	b108      	cbz	r0, 802287e <_printf_i+0x1f2>
 802287a:	1b40      	subs	r0, r0, r5
 802287c:	6060      	str	r0, [r4, #4]
 802287e:	6863      	ldr	r3, [r4, #4]
 8022880:	6123      	str	r3, [r4, #16]
 8022882:	2300      	movs	r3, #0
 8022884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022888:	e7a8      	b.n	80227dc <_printf_i+0x150>
 802288a:	6923      	ldr	r3, [r4, #16]
 802288c:	462a      	mov	r2, r5
 802288e:	4649      	mov	r1, r9
 8022890:	4640      	mov	r0, r8
 8022892:	47d0      	blx	sl
 8022894:	3001      	adds	r0, #1
 8022896:	d0ab      	beq.n	80227f0 <_printf_i+0x164>
 8022898:	6823      	ldr	r3, [r4, #0]
 802289a:	079b      	lsls	r3, r3, #30
 802289c:	d413      	bmi.n	80228c6 <_printf_i+0x23a>
 802289e:	68e0      	ldr	r0, [r4, #12]
 80228a0:	9b03      	ldr	r3, [sp, #12]
 80228a2:	4298      	cmp	r0, r3
 80228a4:	bfb8      	it	lt
 80228a6:	4618      	movlt	r0, r3
 80228a8:	e7a4      	b.n	80227f4 <_printf_i+0x168>
 80228aa:	2301      	movs	r3, #1
 80228ac:	4632      	mov	r2, r6
 80228ae:	4649      	mov	r1, r9
 80228b0:	4640      	mov	r0, r8
 80228b2:	47d0      	blx	sl
 80228b4:	3001      	adds	r0, #1
 80228b6:	d09b      	beq.n	80227f0 <_printf_i+0x164>
 80228b8:	3501      	adds	r5, #1
 80228ba:	68e3      	ldr	r3, [r4, #12]
 80228bc:	9903      	ldr	r1, [sp, #12]
 80228be:	1a5b      	subs	r3, r3, r1
 80228c0:	42ab      	cmp	r3, r5
 80228c2:	dcf2      	bgt.n	80228aa <_printf_i+0x21e>
 80228c4:	e7eb      	b.n	802289e <_printf_i+0x212>
 80228c6:	2500      	movs	r5, #0
 80228c8:	f104 0619 	add.w	r6, r4, #25
 80228cc:	e7f5      	b.n	80228ba <_printf_i+0x22e>
 80228ce:	bf00      	nop
 80228d0:	080265ba 	.word	0x080265ba
 80228d4:	080265cb 	.word	0x080265cb

080228d8 <iprintf>:
 80228d8:	b40f      	push	{r0, r1, r2, r3}
 80228da:	4b0a      	ldr	r3, [pc, #40]	; (8022904 <iprintf+0x2c>)
 80228dc:	b513      	push	{r0, r1, r4, lr}
 80228de:	681c      	ldr	r4, [r3, #0]
 80228e0:	b124      	cbz	r4, 80228ec <iprintf+0x14>
 80228e2:	69a3      	ldr	r3, [r4, #24]
 80228e4:	b913      	cbnz	r3, 80228ec <iprintf+0x14>
 80228e6:	4620      	mov	r0, r4
 80228e8:	f001 f8ee 	bl	8023ac8 <__sinit>
 80228ec:	ab05      	add	r3, sp, #20
 80228ee:	9a04      	ldr	r2, [sp, #16]
 80228f0:	68a1      	ldr	r1, [r4, #8]
 80228f2:	9301      	str	r3, [sp, #4]
 80228f4:	4620      	mov	r0, r4
 80228f6:	f001 fe9d 	bl	8024634 <_vfiprintf_r>
 80228fa:	b002      	add	sp, #8
 80228fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022900:	b004      	add	sp, #16
 8022902:	4770      	bx	lr
 8022904:	2000002c 	.word	0x2000002c

08022908 <putchar>:
 8022908:	4b09      	ldr	r3, [pc, #36]	; (8022930 <putchar+0x28>)
 802290a:	b513      	push	{r0, r1, r4, lr}
 802290c:	681c      	ldr	r4, [r3, #0]
 802290e:	4601      	mov	r1, r0
 8022910:	b134      	cbz	r4, 8022920 <putchar+0x18>
 8022912:	69a3      	ldr	r3, [r4, #24]
 8022914:	b923      	cbnz	r3, 8022920 <putchar+0x18>
 8022916:	9001      	str	r0, [sp, #4]
 8022918:	4620      	mov	r0, r4
 802291a:	f001 f8d5 	bl	8023ac8 <__sinit>
 802291e:	9901      	ldr	r1, [sp, #4]
 8022920:	68a2      	ldr	r2, [r4, #8]
 8022922:	4620      	mov	r0, r4
 8022924:	b002      	add	sp, #8
 8022926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802292a:	f001 bfb3 	b.w	8024894 <_putc_r>
 802292e:	bf00      	nop
 8022930:	2000002c 	.word	0x2000002c

08022934 <_puts_r>:
 8022934:	b570      	push	{r4, r5, r6, lr}
 8022936:	460e      	mov	r6, r1
 8022938:	4605      	mov	r5, r0
 802293a:	b118      	cbz	r0, 8022944 <_puts_r+0x10>
 802293c:	6983      	ldr	r3, [r0, #24]
 802293e:	b90b      	cbnz	r3, 8022944 <_puts_r+0x10>
 8022940:	f001 f8c2 	bl	8023ac8 <__sinit>
 8022944:	69ab      	ldr	r3, [r5, #24]
 8022946:	68ac      	ldr	r4, [r5, #8]
 8022948:	b913      	cbnz	r3, 8022950 <_puts_r+0x1c>
 802294a:	4628      	mov	r0, r5
 802294c:	f001 f8bc 	bl	8023ac8 <__sinit>
 8022950:	4b2c      	ldr	r3, [pc, #176]	; (8022a04 <_puts_r+0xd0>)
 8022952:	429c      	cmp	r4, r3
 8022954:	d120      	bne.n	8022998 <_puts_r+0x64>
 8022956:	686c      	ldr	r4, [r5, #4]
 8022958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802295a:	07db      	lsls	r3, r3, #31
 802295c:	d405      	bmi.n	802296a <_puts_r+0x36>
 802295e:	89a3      	ldrh	r3, [r4, #12]
 8022960:	0598      	lsls	r0, r3, #22
 8022962:	d402      	bmi.n	802296a <_puts_r+0x36>
 8022964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022966:	f001 f952 	bl	8023c0e <__retarget_lock_acquire_recursive>
 802296a:	89a3      	ldrh	r3, [r4, #12]
 802296c:	0719      	lsls	r1, r3, #28
 802296e:	d51d      	bpl.n	80229ac <_puts_r+0x78>
 8022970:	6923      	ldr	r3, [r4, #16]
 8022972:	b1db      	cbz	r3, 80229ac <_puts_r+0x78>
 8022974:	3e01      	subs	r6, #1
 8022976:	68a3      	ldr	r3, [r4, #8]
 8022978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802297c:	3b01      	subs	r3, #1
 802297e:	60a3      	str	r3, [r4, #8]
 8022980:	bb39      	cbnz	r1, 80229d2 <_puts_r+0x9e>
 8022982:	2b00      	cmp	r3, #0
 8022984:	da38      	bge.n	80229f8 <_puts_r+0xc4>
 8022986:	4622      	mov	r2, r4
 8022988:	210a      	movs	r1, #10
 802298a:	4628      	mov	r0, r5
 802298c:	f000 f848 	bl	8022a20 <__swbuf_r>
 8022990:	3001      	adds	r0, #1
 8022992:	d011      	beq.n	80229b8 <_puts_r+0x84>
 8022994:	250a      	movs	r5, #10
 8022996:	e011      	b.n	80229bc <_puts_r+0x88>
 8022998:	4b1b      	ldr	r3, [pc, #108]	; (8022a08 <_puts_r+0xd4>)
 802299a:	429c      	cmp	r4, r3
 802299c:	d101      	bne.n	80229a2 <_puts_r+0x6e>
 802299e:	68ac      	ldr	r4, [r5, #8]
 80229a0:	e7da      	b.n	8022958 <_puts_r+0x24>
 80229a2:	4b1a      	ldr	r3, [pc, #104]	; (8022a0c <_puts_r+0xd8>)
 80229a4:	429c      	cmp	r4, r3
 80229a6:	bf08      	it	eq
 80229a8:	68ec      	ldreq	r4, [r5, #12]
 80229aa:	e7d5      	b.n	8022958 <_puts_r+0x24>
 80229ac:	4621      	mov	r1, r4
 80229ae:	4628      	mov	r0, r5
 80229b0:	f000 f888 	bl	8022ac4 <__swsetup_r>
 80229b4:	2800      	cmp	r0, #0
 80229b6:	d0dd      	beq.n	8022974 <_puts_r+0x40>
 80229b8:	f04f 35ff 	mov.w	r5, #4294967295
 80229bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80229be:	07da      	lsls	r2, r3, #31
 80229c0:	d405      	bmi.n	80229ce <_puts_r+0x9a>
 80229c2:	89a3      	ldrh	r3, [r4, #12]
 80229c4:	059b      	lsls	r3, r3, #22
 80229c6:	d402      	bmi.n	80229ce <_puts_r+0x9a>
 80229c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229ca:	f001 f921 	bl	8023c10 <__retarget_lock_release_recursive>
 80229ce:	4628      	mov	r0, r5
 80229d0:	bd70      	pop	{r4, r5, r6, pc}
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	da04      	bge.n	80229e0 <_puts_r+0xac>
 80229d6:	69a2      	ldr	r2, [r4, #24]
 80229d8:	429a      	cmp	r2, r3
 80229da:	dc06      	bgt.n	80229ea <_puts_r+0xb6>
 80229dc:	290a      	cmp	r1, #10
 80229de:	d004      	beq.n	80229ea <_puts_r+0xb6>
 80229e0:	6823      	ldr	r3, [r4, #0]
 80229e2:	1c5a      	adds	r2, r3, #1
 80229e4:	6022      	str	r2, [r4, #0]
 80229e6:	7019      	strb	r1, [r3, #0]
 80229e8:	e7c5      	b.n	8022976 <_puts_r+0x42>
 80229ea:	4622      	mov	r2, r4
 80229ec:	4628      	mov	r0, r5
 80229ee:	f000 f817 	bl	8022a20 <__swbuf_r>
 80229f2:	3001      	adds	r0, #1
 80229f4:	d1bf      	bne.n	8022976 <_puts_r+0x42>
 80229f6:	e7df      	b.n	80229b8 <_puts_r+0x84>
 80229f8:	6823      	ldr	r3, [r4, #0]
 80229fa:	250a      	movs	r5, #10
 80229fc:	1c5a      	adds	r2, r3, #1
 80229fe:	6022      	str	r2, [r4, #0]
 8022a00:	701d      	strb	r5, [r3, #0]
 8022a02:	e7db      	b.n	80229bc <_puts_r+0x88>
 8022a04:	0802668c 	.word	0x0802668c
 8022a08:	080266ac 	.word	0x080266ac
 8022a0c:	0802666c 	.word	0x0802666c

08022a10 <puts>:
 8022a10:	4b02      	ldr	r3, [pc, #8]	; (8022a1c <puts+0xc>)
 8022a12:	4601      	mov	r1, r0
 8022a14:	6818      	ldr	r0, [r3, #0]
 8022a16:	f7ff bf8d 	b.w	8022934 <_puts_r>
 8022a1a:	bf00      	nop
 8022a1c:	2000002c 	.word	0x2000002c

08022a20 <__swbuf_r>:
 8022a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a22:	460e      	mov	r6, r1
 8022a24:	4614      	mov	r4, r2
 8022a26:	4605      	mov	r5, r0
 8022a28:	b118      	cbz	r0, 8022a32 <__swbuf_r+0x12>
 8022a2a:	6983      	ldr	r3, [r0, #24]
 8022a2c:	b90b      	cbnz	r3, 8022a32 <__swbuf_r+0x12>
 8022a2e:	f001 f84b 	bl	8023ac8 <__sinit>
 8022a32:	4b21      	ldr	r3, [pc, #132]	; (8022ab8 <__swbuf_r+0x98>)
 8022a34:	429c      	cmp	r4, r3
 8022a36:	d12b      	bne.n	8022a90 <__swbuf_r+0x70>
 8022a38:	686c      	ldr	r4, [r5, #4]
 8022a3a:	69a3      	ldr	r3, [r4, #24]
 8022a3c:	60a3      	str	r3, [r4, #8]
 8022a3e:	89a3      	ldrh	r3, [r4, #12]
 8022a40:	071a      	lsls	r2, r3, #28
 8022a42:	d52f      	bpl.n	8022aa4 <__swbuf_r+0x84>
 8022a44:	6923      	ldr	r3, [r4, #16]
 8022a46:	b36b      	cbz	r3, 8022aa4 <__swbuf_r+0x84>
 8022a48:	6923      	ldr	r3, [r4, #16]
 8022a4a:	6820      	ldr	r0, [r4, #0]
 8022a4c:	1ac0      	subs	r0, r0, r3
 8022a4e:	6963      	ldr	r3, [r4, #20]
 8022a50:	b2f6      	uxtb	r6, r6
 8022a52:	4283      	cmp	r3, r0
 8022a54:	4637      	mov	r7, r6
 8022a56:	dc04      	bgt.n	8022a62 <__swbuf_r+0x42>
 8022a58:	4621      	mov	r1, r4
 8022a5a:	4628      	mov	r0, r5
 8022a5c:	f000 ffa0 	bl	80239a0 <_fflush_r>
 8022a60:	bb30      	cbnz	r0, 8022ab0 <__swbuf_r+0x90>
 8022a62:	68a3      	ldr	r3, [r4, #8]
 8022a64:	3b01      	subs	r3, #1
 8022a66:	60a3      	str	r3, [r4, #8]
 8022a68:	6823      	ldr	r3, [r4, #0]
 8022a6a:	1c5a      	adds	r2, r3, #1
 8022a6c:	6022      	str	r2, [r4, #0]
 8022a6e:	701e      	strb	r6, [r3, #0]
 8022a70:	6963      	ldr	r3, [r4, #20]
 8022a72:	3001      	adds	r0, #1
 8022a74:	4283      	cmp	r3, r0
 8022a76:	d004      	beq.n	8022a82 <__swbuf_r+0x62>
 8022a78:	89a3      	ldrh	r3, [r4, #12]
 8022a7a:	07db      	lsls	r3, r3, #31
 8022a7c:	d506      	bpl.n	8022a8c <__swbuf_r+0x6c>
 8022a7e:	2e0a      	cmp	r6, #10
 8022a80:	d104      	bne.n	8022a8c <__swbuf_r+0x6c>
 8022a82:	4621      	mov	r1, r4
 8022a84:	4628      	mov	r0, r5
 8022a86:	f000 ff8b 	bl	80239a0 <_fflush_r>
 8022a8a:	b988      	cbnz	r0, 8022ab0 <__swbuf_r+0x90>
 8022a8c:	4638      	mov	r0, r7
 8022a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a90:	4b0a      	ldr	r3, [pc, #40]	; (8022abc <__swbuf_r+0x9c>)
 8022a92:	429c      	cmp	r4, r3
 8022a94:	d101      	bne.n	8022a9a <__swbuf_r+0x7a>
 8022a96:	68ac      	ldr	r4, [r5, #8]
 8022a98:	e7cf      	b.n	8022a3a <__swbuf_r+0x1a>
 8022a9a:	4b09      	ldr	r3, [pc, #36]	; (8022ac0 <__swbuf_r+0xa0>)
 8022a9c:	429c      	cmp	r4, r3
 8022a9e:	bf08      	it	eq
 8022aa0:	68ec      	ldreq	r4, [r5, #12]
 8022aa2:	e7ca      	b.n	8022a3a <__swbuf_r+0x1a>
 8022aa4:	4621      	mov	r1, r4
 8022aa6:	4628      	mov	r0, r5
 8022aa8:	f000 f80c 	bl	8022ac4 <__swsetup_r>
 8022aac:	2800      	cmp	r0, #0
 8022aae:	d0cb      	beq.n	8022a48 <__swbuf_r+0x28>
 8022ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8022ab4:	e7ea      	b.n	8022a8c <__swbuf_r+0x6c>
 8022ab6:	bf00      	nop
 8022ab8:	0802668c 	.word	0x0802668c
 8022abc:	080266ac 	.word	0x080266ac
 8022ac0:	0802666c 	.word	0x0802666c

08022ac4 <__swsetup_r>:
 8022ac4:	4b32      	ldr	r3, [pc, #200]	; (8022b90 <__swsetup_r+0xcc>)
 8022ac6:	b570      	push	{r4, r5, r6, lr}
 8022ac8:	681d      	ldr	r5, [r3, #0]
 8022aca:	4606      	mov	r6, r0
 8022acc:	460c      	mov	r4, r1
 8022ace:	b125      	cbz	r5, 8022ada <__swsetup_r+0x16>
 8022ad0:	69ab      	ldr	r3, [r5, #24]
 8022ad2:	b913      	cbnz	r3, 8022ada <__swsetup_r+0x16>
 8022ad4:	4628      	mov	r0, r5
 8022ad6:	f000 fff7 	bl	8023ac8 <__sinit>
 8022ada:	4b2e      	ldr	r3, [pc, #184]	; (8022b94 <__swsetup_r+0xd0>)
 8022adc:	429c      	cmp	r4, r3
 8022ade:	d10f      	bne.n	8022b00 <__swsetup_r+0x3c>
 8022ae0:	686c      	ldr	r4, [r5, #4]
 8022ae2:	89a3      	ldrh	r3, [r4, #12]
 8022ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ae8:	0719      	lsls	r1, r3, #28
 8022aea:	d42c      	bmi.n	8022b46 <__swsetup_r+0x82>
 8022aec:	06dd      	lsls	r5, r3, #27
 8022aee:	d411      	bmi.n	8022b14 <__swsetup_r+0x50>
 8022af0:	2309      	movs	r3, #9
 8022af2:	6033      	str	r3, [r6, #0]
 8022af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022af8:	81a3      	strh	r3, [r4, #12]
 8022afa:	f04f 30ff 	mov.w	r0, #4294967295
 8022afe:	e03e      	b.n	8022b7e <__swsetup_r+0xba>
 8022b00:	4b25      	ldr	r3, [pc, #148]	; (8022b98 <__swsetup_r+0xd4>)
 8022b02:	429c      	cmp	r4, r3
 8022b04:	d101      	bne.n	8022b0a <__swsetup_r+0x46>
 8022b06:	68ac      	ldr	r4, [r5, #8]
 8022b08:	e7eb      	b.n	8022ae2 <__swsetup_r+0x1e>
 8022b0a:	4b24      	ldr	r3, [pc, #144]	; (8022b9c <__swsetup_r+0xd8>)
 8022b0c:	429c      	cmp	r4, r3
 8022b0e:	bf08      	it	eq
 8022b10:	68ec      	ldreq	r4, [r5, #12]
 8022b12:	e7e6      	b.n	8022ae2 <__swsetup_r+0x1e>
 8022b14:	0758      	lsls	r0, r3, #29
 8022b16:	d512      	bpl.n	8022b3e <__swsetup_r+0x7a>
 8022b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b1a:	b141      	cbz	r1, 8022b2e <__swsetup_r+0x6a>
 8022b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022b20:	4299      	cmp	r1, r3
 8022b22:	d002      	beq.n	8022b2a <__swsetup_r+0x66>
 8022b24:	4630      	mov	r0, r6
 8022b26:	f001 fc7b 	bl	8024420 <_free_r>
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8022b2e:	89a3      	ldrh	r3, [r4, #12]
 8022b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022b34:	81a3      	strh	r3, [r4, #12]
 8022b36:	2300      	movs	r3, #0
 8022b38:	6063      	str	r3, [r4, #4]
 8022b3a:	6923      	ldr	r3, [r4, #16]
 8022b3c:	6023      	str	r3, [r4, #0]
 8022b3e:	89a3      	ldrh	r3, [r4, #12]
 8022b40:	f043 0308 	orr.w	r3, r3, #8
 8022b44:	81a3      	strh	r3, [r4, #12]
 8022b46:	6923      	ldr	r3, [r4, #16]
 8022b48:	b94b      	cbnz	r3, 8022b5e <__swsetup_r+0x9a>
 8022b4a:	89a3      	ldrh	r3, [r4, #12]
 8022b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022b54:	d003      	beq.n	8022b5e <__swsetup_r+0x9a>
 8022b56:	4621      	mov	r1, r4
 8022b58:	4630      	mov	r0, r6
 8022b5a:	f001 f87f 	bl	8023c5c <__smakebuf_r>
 8022b5e:	89a0      	ldrh	r0, [r4, #12]
 8022b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022b64:	f010 0301 	ands.w	r3, r0, #1
 8022b68:	d00a      	beq.n	8022b80 <__swsetup_r+0xbc>
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	60a3      	str	r3, [r4, #8]
 8022b6e:	6963      	ldr	r3, [r4, #20]
 8022b70:	425b      	negs	r3, r3
 8022b72:	61a3      	str	r3, [r4, #24]
 8022b74:	6923      	ldr	r3, [r4, #16]
 8022b76:	b943      	cbnz	r3, 8022b8a <__swsetup_r+0xc6>
 8022b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022b7c:	d1ba      	bne.n	8022af4 <__swsetup_r+0x30>
 8022b7e:	bd70      	pop	{r4, r5, r6, pc}
 8022b80:	0781      	lsls	r1, r0, #30
 8022b82:	bf58      	it	pl
 8022b84:	6963      	ldrpl	r3, [r4, #20]
 8022b86:	60a3      	str	r3, [r4, #8]
 8022b88:	e7f4      	b.n	8022b74 <__swsetup_r+0xb0>
 8022b8a:	2000      	movs	r0, #0
 8022b8c:	e7f7      	b.n	8022b7e <__swsetup_r+0xba>
 8022b8e:	bf00      	nop
 8022b90:	2000002c 	.word	0x2000002c
 8022b94:	0802668c 	.word	0x0802668c
 8022b98:	080266ac 	.word	0x080266ac
 8022b9c:	0802666c 	.word	0x0802666c

08022ba0 <quorem>:
 8022ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba4:	6903      	ldr	r3, [r0, #16]
 8022ba6:	690c      	ldr	r4, [r1, #16]
 8022ba8:	42a3      	cmp	r3, r4
 8022baa:	4607      	mov	r7, r0
 8022bac:	f2c0 8081 	blt.w	8022cb2 <quorem+0x112>
 8022bb0:	3c01      	subs	r4, #1
 8022bb2:	f101 0814 	add.w	r8, r1, #20
 8022bb6:	f100 0514 	add.w	r5, r0, #20
 8022bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022bbe:	9301      	str	r3, [sp, #4]
 8022bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022bc8:	3301      	adds	r3, #1
 8022bca:	429a      	cmp	r2, r3
 8022bcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8022bd8:	d331      	bcc.n	8022c3e <quorem+0x9e>
 8022bda:	f04f 0e00 	mov.w	lr, #0
 8022bde:	4640      	mov	r0, r8
 8022be0:	46ac      	mov	ip, r5
 8022be2:	46f2      	mov	sl, lr
 8022be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8022be8:	b293      	uxth	r3, r2
 8022bea:	fb06 e303 	mla	r3, r6, r3, lr
 8022bee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022bf2:	b29b      	uxth	r3, r3
 8022bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8022bf8:	f8dc a000 	ldr.w	sl, [ip]
 8022bfc:	0c12      	lsrs	r2, r2, #16
 8022bfe:	fa13 f38a 	uxtah	r3, r3, sl
 8022c02:	fb06 e202 	mla	r2, r6, r2, lr
 8022c06:	9300      	str	r3, [sp, #0]
 8022c08:	9b00      	ldr	r3, [sp, #0]
 8022c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022c0e:	b292      	uxth	r2, r2
 8022c10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8022c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022c18:	f8bd 3000 	ldrh.w	r3, [sp]
 8022c1c:	4581      	cmp	r9, r0
 8022c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022c22:	f84c 3b04 	str.w	r3, [ip], #4
 8022c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8022c2a:	d2db      	bcs.n	8022be4 <quorem+0x44>
 8022c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8022c30:	b92b      	cbnz	r3, 8022c3e <quorem+0x9e>
 8022c32:	9b01      	ldr	r3, [sp, #4]
 8022c34:	3b04      	subs	r3, #4
 8022c36:	429d      	cmp	r5, r3
 8022c38:	461a      	mov	r2, r3
 8022c3a:	d32e      	bcc.n	8022c9a <quorem+0xfa>
 8022c3c:	613c      	str	r4, [r7, #16]
 8022c3e:	4638      	mov	r0, r7
 8022c40:	f001 fad6 	bl	80241f0 <__mcmp>
 8022c44:	2800      	cmp	r0, #0
 8022c46:	db24      	blt.n	8022c92 <quorem+0xf2>
 8022c48:	3601      	adds	r6, #1
 8022c4a:	4628      	mov	r0, r5
 8022c4c:	f04f 0c00 	mov.w	ip, #0
 8022c50:	f858 2b04 	ldr.w	r2, [r8], #4
 8022c54:	f8d0 e000 	ldr.w	lr, [r0]
 8022c58:	b293      	uxth	r3, r2
 8022c5a:	ebac 0303 	sub.w	r3, ip, r3
 8022c5e:	0c12      	lsrs	r2, r2, #16
 8022c60:	fa13 f38e 	uxtah	r3, r3, lr
 8022c64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022c6c:	b29b      	uxth	r3, r3
 8022c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022c72:	45c1      	cmp	r9, r8
 8022c74:	f840 3b04 	str.w	r3, [r0], #4
 8022c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022c7c:	d2e8      	bcs.n	8022c50 <quorem+0xb0>
 8022c7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022c86:	b922      	cbnz	r2, 8022c92 <quorem+0xf2>
 8022c88:	3b04      	subs	r3, #4
 8022c8a:	429d      	cmp	r5, r3
 8022c8c:	461a      	mov	r2, r3
 8022c8e:	d30a      	bcc.n	8022ca6 <quorem+0x106>
 8022c90:	613c      	str	r4, [r7, #16]
 8022c92:	4630      	mov	r0, r6
 8022c94:	b003      	add	sp, #12
 8022c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c9a:	6812      	ldr	r2, [r2, #0]
 8022c9c:	3b04      	subs	r3, #4
 8022c9e:	2a00      	cmp	r2, #0
 8022ca0:	d1cc      	bne.n	8022c3c <quorem+0x9c>
 8022ca2:	3c01      	subs	r4, #1
 8022ca4:	e7c7      	b.n	8022c36 <quorem+0x96>
 8022ca6:	6812      	ldr	r2, [r2, #0]
 8022ca8:	3b04      	subs	r3, #4
 8022caa:	2a00      	cmp	r2, #0
 8022cac:	d1f0      	bne.n	8022c90 <quorem+0xf0>
 8022cae:	3c01      	subs	r4, #1
 8022cb0:	e7eb      	b.n	8022c8a <quorem+0xea>
 8022cb2:	2000      	movs	r0, #0
 8022cb4:	e7ee      	b.n	8022c94 <quorem+0xf4>
	...

08022cb8 <_dtoa_r>:
 8022cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cbc:	ed2d 8b04 	vpush	{d8-d9}
 8022cc0:	ec57 6b10 	vmov	r6, r7, d0
 8022cc4:	b093      	sub	sp, #76	; 0x4c
 8022cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8022ccc:	9106      	str	r1, [sp, #24]
 8022cce:	ee10 aa10 	vmov	sl, s0
 8022cd2:	4604      	mov	r4, r0
 8022cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8022cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8022cd8:	46bb      	mov	fp, r7
 8022cda:	b975      	cbnz	r5, 8022cfa <_dtoa_r+0x42>
 8022cdc:	2010      	movs	r0, #16
 8022cde:	f000 fffd 	bl	8023cdc <malloc>
 8022ce2:	4602      	mov	r2, r0
 8022ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8022ce6:	b920      	cbnz	r0, 8022cf2 <_dtoa_r+0x3a>
 8022ce8:	4ba7      	ldr	r3, [pc, #668]	; (8022f88 <_dtoa_r+0x2d0>)
 8022cea:	21ea      	movs	r1, #234	; 0xea
 8022cec:	48a7      	ldr	r0, [pc, #668]	; (8022f8c <_dtoa_r+0x2d4>)
 8022cee:	f001 fe7f 	bl	80249f0 <__assert_func>
 8022cf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8022cf6:	6005      	str	r5, [r0, #0]
 8022cf8:	60c5      	str	r5, [r0, #12]
 8022cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022cfc:	6819      	ldr	r1, [r3, #0]
 8022cfe:	b151      	cbz	r1, 8022d16 <_dtoa_r+0x5e>
 8022d00:	685a      	ldr	r2, [r3, #4]
 8022d02:	604a      	str	r2, [r1, #4]
 8022d04:	2301      	movs	r3, #1
 8022d06:	4093      	lsls	r3, r2
 8022d08:	608b      	str	r3, [r1, #8]
 8022d0a:	4620      	mov	r0, r4
 8022d0c:	f001 f82e 	bl	8023d6c <_Bfree>
 8022d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022d12:	2200      	movs	r2, #0
 8022d14:	601a      	str	r2, [r3, #0]
 8022d16:	1e3b      	subs	r3, r7, #0
 8022d18:	bfaa      	itet	ge
 8022d1a:	2300      	movge	r3, #0
 8022d1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8022d20:	f8c8 3000 	strge.w	r3, [r8]
 8022d24:	4b9a      	ldr	r3, [pc, #616]	; (8022f90 <_dtoa_r+0x2d8>)
 8022d26:	bfbc      	itt	lt
 8022d28:	2201      	movlt	r2, #1
 8022d2a:	f8c8 2000 	strlt.w	r2, [r8]
 8022d2e:	ea33 030b 	bics.w	r3, r3, fp
 8022d32:	d11b      	bne.n	8022d6c <_dtoa_r+0xb4>
 8022d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d36:	f242 730f 	movw	r3, #9999	; 0x270f
 8022d3a:	6013      	str	r3, [r2, #0]
 8022d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022d40:	4333      	orrs	r3, r6
 8022d42:	f000 8592 	beq.w	802386a <_dtoa_r+0xbb2>
 8022d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d48:	b963      	cbnz	r3, 8022d64 <_dtoa_r+0xac>
 8022d4a:	4b92      	ldr	r3, [pc, #584]	; (8022f94 <_dtoa_r+0x2dc>)
 8022d4c:	e022      	b.n	8022d94 <_dtoa_r+0xdc>
 8022d4e:	4b92      	ldr	r3, [pc, #584]	; (8022f98 <_dtoa_r+0x2e0>)
 8022d50:	9301      	str	r3, [sp, #4]
 8022d52:	3308      	adds	r3, #8
 8022d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022d56:	6013      	str	r3, [r2, #0]
 8022d58:	9801      	ldr	r0, [sp, #4]
 8022d5a:	b013      	add	sp, #76	; 0x4c
 8022d5c:	ecbd 8b04 	vpop	{d8-d9}
 8022d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d64:	4b8b      	ldr	r3, [pc, #556]	; (8022f94 <_dtoa_r+0x2dc>)
 8022d66:	9301      	str	r3, [sp, #4]
 8022d68:	3303      	adds	r3, #3
 8022d6a:	e7f3      	b.n	8022d54 <_dtoa_r+0x9c>
 8022d6c:	2200      	movs	r2, #0
 8022d6e:	2300      	movs	r3, #0
 8022d70:	4650      	mov	r0, sl
 8022d72:	4659      	mov	r1, fp
 8022d74:	f7dd fed0 	bl	8000b18 <__aeabi_dcmpeq>
 8022d78:	ec4b ab19 	vmov	d9, sl, fp
 8022d7c:	4680      	mov	r8, r0
 8022d7e:	b158      	cbz	r0, 8022d98 <_dtoa_r+0xe0>
 8022d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d82:	2301      	movs	r3, #1
 8022d84:	6013      	str	r3, [r2, #0]
 8022d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	f000 856b 	beq.w	8023864 <_dtoa_r+0xbac>
 8022d8e:	4883      	ldr	r0, [pc, #524]	; (8022f9c <_dtoa_r+0x2e4>)
 8022d90:	6018      	str	r0, [r3, #0]
 8022d92:	1e43      	subs	r3, r0, #1
 8022d94:	9301      	str	r3, [sp, #4]
 8022d96:	e7df      	b.n	8022d58 <_dtoa_r+0xa0>
 8022d98:	ec4b ab10 	vmov	d0, sl, fp
 8022d9c:	aa10      	add	r2, sp, #64	; 0x40
 8022d9e:	a911      	add	r1, sp, #68	; 0x44
 8022da0:	4620      	mov	r0, r4
 8022da2:	f001 facb 	bl	802433c <__d2b>
 8022da6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8022daa:	ee08 0a10 	vmov	s16, r0
 8022dae:	2d00      	cmp	r5, #0
 8022db0:	f000 8084 	beq.w	8022ebc <_dtoa_r+0x204>
 8022db4:	ee19 3a90 	vmov	r3, s19
 8022db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022dbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8022dc0:	4656      	mov	r6, sl
 8022dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8022dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8022dca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022dce:	4b74      	ldr	r3, [pc, #464]	; (8022fa0 <_dtoa_r+0x2e8>)
 8022dd0:	2200      	movs	r2, #0
 8022dd2:	4630      	mov	r0, r6
 8022dd4:	4639      	mov	r1, r7
 8022dd6:	f7dd fa7f 	bl	80002d8 <__aeabi_dsub>
 8022dda:	a365      	add	r3, pc, #404	; (adr r3, 8022f70 <_dtoa_r+0x2b8>)
 8022ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022de0:	f7dd fc32 	bl	8000648 <__aeabi_dmul>
 8022de4:	a364      	add	r3, pc, #400	; (adr r3, 8022f78 <_dtoa_r+0x2c0>)
 8022de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dea:	f7dd fa77 	bl	80002dc <__adddf3>
 8022dee:	4606      	mov	r6, r0
 8022df0:	4628      	mov	r0, r5
 8022df2:	460f      	mov	r7, r1
 8022df4:	f7dd fbbe 	bl	8000574 <__aeabi_i2d>
 8022df8:	a361      	add	r3, pc, #388	; (adr r3, 8022f80 <_dtoa_r+0x2c8>)
 8022dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dfe:	f7dd fc23 	bl	8000648 <__aeabi_dmul>
 8022e02:	4602      	mov	r2, r0
 8022e04:	460b      	mov	r3, r1
 8022e06:	4630      	mov	r0, r6
 8022e08:	4639      	mov	r1, r7
 8022e0a:	f7dd fa67 	bl	80002dc <__adddf3>
 8022e0e:	4606      	mov	r6, r0
 8022e10:	460f      	mov	r7, r1
 8022e12:	f7dd fec9 	bl	8000ba8 <__aeabi_d2iz>
 8022e16:	2200      	movs	r2, #0
 8022e18:	9000      	str	r0, [sp, #0]
 8022e1a:	2300      	movs	r3, #0
 8022e1c:	4630      	mov	r0, r6
 8022e1e:	4639      	mov	r1, r7
 8022e20:	f7dd fe84 	bl	8000b2c <__aeabi_dcmplt>
 8022e24:	b150      	cbz	r0, 8022e3c <_dtoa_r+0x184>
 8022e26:	9800      	ldr	r0, [sp, #0]
 8022e28:	f7dd fba4 	bl	8000574 <__aeabi_i2d>
 8022e2c:	4632      	mov	r2, r6
 8022e2e:	463b      	mov	r3, r7
 8022e30:	f7dd fe72 	bl	8000b18 <__aeabi_dcmpeq>
 8022e34:	b910      	cbnz	r0, 8022e3c <_dtoa_r+0x184>
 8022e36:	9b00      	ldr	r3, [sp, #0]
 8022e38:	3b01      	subs	r3, #1
 8022e3a:	9300      	str	r3, [sp, #0]
 8022e3c:	9b00      	ldr	r3, [sp, #0]
 8022e3e:	2b16      	cmp	r3, #22
 8022e40:	d85a      	bhi.n	8022ef8 <_dtoa_r+0x240>
 8022e42:	9a00      	ldr	r2, [sp, #0]
 8022e44:	4b57      	ldr	r3, [pc, #348]	; (8022fa4 <_dtoa_r+0x2ec>)
 8022e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e4e:	ec51 0b19 	vmov	r0, r1, d9
 8022e52:	f7dd fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8022e56:	2800      	cmp	r0, #0
 8022e58:	d050      	beq.n	8022efc <_dtoa_r+0x244>
 8022e5a:	9b00      	ldr	r3, [sp, #0]
 8022e5c:	3b01      	subs	r3, #1
 8022e5e:	9300      	str	r3, [sp, #0]
 8022e60:	2300      	movs	r3, #0
 8022e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8022e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e66:	1b5d      	subs	r5, r3, r5
 8022e68:	1e6b      	subs	r3, r5, #1
 8022e6a:	9305      	str	r3, [sp, #20]
 8022e6c:	bf45      	ittet	mi
 8022e6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8022e72:	9304      	strmi	r3, [sp, #16]
 8022e74:	2300      	movpl	r3, #0
 8022e76:	2300      	movmi	r3, #0
 8022e78:	bf4c      	ite	mi
 8022e7a:	9305      	strmi	r3, [sp, #20]
 8022e7c:	9304      	strpl	r3, [sp, #16]
 8022e7e:	9b00      	ldr	r3, [sp, #0]
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	db3d      	blt.n	8022f00 <_dtoa_r+0x248>
 8022e84:	9b05      	ldr	r3, [sp, #20]
 8022e86:	9a00      	ldr	r2, [sp, #0]
 8022e88:	920a      	str	r2, [sp, #40]	; 0x28
 8022e8a:	4413      	add	r3, r2
 8022e8c:	9305      	str	r3, [sp, #20]
 8022e8e:	2300      	movs	r3, #0
 8022e90:	9307      	str	r3, [sp, #28]
 8022e92:	9b06      	ldr	r3, [sp, #24]
 8022e94:	2b09      	cmp	r3, #9
 8022e96:	f200 8089 	bhi.w	8022fac <_dtoa_r+0x2f4>
 8022e9a:	2b05      	cmp	r3, #5
 8022e9c:	bfc4      	itt	gt
 8022e9e:	3b04      	subgt	r3, #4
 8022ea0:	9306      	strgt	r3, [sp, #24]
 8022ea2:	9b06      	ldr	r3, [sp, #24]
 8022ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8022ea8:	bfcc      	ite	gt
 8022eaa:	2500      	movgt	r5, #0
 8022eac:	2501      	movle	r5, #1
 8022eae:	2b03      	cmp	r3, #3
 8022eb0:	f200 8087 	bhi.w	8022fc2 <_dtoa_r+0x30a>
 8022eb4:	e8df f003 	tbb	[pc, r3]
 8022eb8:	59383a2d 	.word	0x59383a2d
 8022ebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8022ec0:	441d      	add	r5, r3
 8022ec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8022ec6:	2b20      	cmp	r3, #32
 8022ec8:	bfc1      	itttt	gt
 8022eca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8022ece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8022ed2:	fa0b f303 	lslgt.w	r3, fp, r3
 8022ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8022eda:	bfda      	itte	le
 8022edc:	f1c3 0320 	rsble	r3, r3, #32
 8022ee0:	fa06 f003 	lslle.w	r0, r6, r3
 8022ee4:	4318      	orrgt	r0, r3
 8022ee6:	f7dd fb35 	bl	8000554 <__aeabi_ui2d>
 8022eea:	2301      	movs	r3, #1
 8022eec:	4606      	mov	r6, r0
 8022eee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8022ef2:	3d01      	subs	r5, #1
 8022ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8022ef6:	e76a      	b.n	8022dce <_dtoa_r+0x116>
 8022ef8:	2301      	movs	r3, #1
 8022efa:	e7b2      	b.n	8022e62 <_dtoa_r+0x1aa>
 8022efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8022efe:	e7b1      	b.n	8022e64 <_dtoa_r+0x1ac>
 8022f00:	9b04      	ldr	r3, [sp, #16]
 8022f02:	9a00      	ldr	r2, [sp, #0]
 8022f04:	1a9b      	subs	r3, r3, r2
 8022f06:	9304      	str	r3, [sp, #16]
 8022f08:	4253      	negs	r3, r2
 8022f0a:	9307      	str	r3, [sp, #28]
 8022f0c:	2300      	movs	r3, #0
 8022f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8022f10:	e7bf      	b.n	8022e92 <_dtoa_r+0x1da>
 8022f12:	2300      	movs	r3, #0
 8022f14:	9308      	str	r3, [sp, #32]
 8022f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	dc55      	bgt.n	8022fc8 <_dtoa_r+0x310>
 8022f1c:	2301      	movs	r3, #1
 8022f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022f22:	461a      	mov	r2, r3
 8022f24:	9209      	str	r2, [sp, #36]	; 0x24
 8022f26:	e00c      	b.n	8022f42 <_dtoa_r+0x28a>
 8022f28:	2301      	movs	r3, #1
 8022f2a:	e7f3      	b.n	8022f14 <_dtoa_r+0x25c>
 8022f2c:	2300      	movs	r3, #0
 8022f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f30:	9308      	str	r3, [sp, #32]
 8022f32:	9b00      	ldr	r3, [sp, #0]
 8022f34:	4413      	add	r3, r2
 8022f36:	9302      	str	r3, [sp, #8]
 8022f38:	3301      	adds	r3, #1
 8022f3a:	2b01      	cmp	r3, #1
 8022f3c:	9303      	str	r3, [sp, #12]
 8022f3e:	bfb8      	it	lt
 8022f40:	2301      	movlt	r3, #1
 8022f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8022f44:	2200      	movs	r2, #0
 8022f46:	6042      	str	r2, [r0, #4]
 8022f48:	2204      	movs	r2, #4
 8022f4a:	f102 0614 	add.w	r6, r2, #20
 8022f4e:	429e      	cmp	r6, r3
 8022f50:	6841      	ldr	r1, [r0, #4]
 8022f52:	d93d      	bls.n	8022fd0 <_dtoa_r+0x318>
 8022f54:	4620      	mov	r0, r4
 8022f56:	f000 fec9 	bl	8023cec <_Balloc>
 8022f5a:	9001      	str	r0, [sp, #4]
 8022f5c:	2800      	cmp	r0, #0
 8022f5e:	d13b      	bne.n	8022fd8 <_dtoa_r+0x320>
 8022f60:	4b11      	ldr	r3, [pc, #68]	; (8022fa8 <_dtoa_r+0x2f0>)
 8022f62:	4602      	mov	r2, r0
 8022f64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8022f68:	e6c0      	b.n	8022cec <_dtoa_r+0x34>
 8022f6a:	2301      	movs	r3, #1
 8022f6c:	e7df      	b.n	8022f2e <_dtoa_r+0x276>
 8022f6e:	bf00      	nop
 8022f70:	636f4361 	.word	0x636f4361
 8022f74:	3fd287a7 	.word	0x3fd287a7
 8022f78:	8b60c8b3 	.word	0x8b60c8b3
 8022f7c:	3fc68a28 	.word	0x3fc68a28
 8022f80:	509f79fb 	.word	0x509f79fb
 8022f84:	3fd34413 	.word	0x3fd34413
 8022f88:	080265e9 	.word	0x080265e9
 8022f8c:	08026600 	.word	0x08026600
 8022f90:	7ff00000 	.word	0x7ff00000
 8022f94:	080265e5 	.word	0x080265e5
 8022f98:	080265dc 	.word	0x080265dc
 8022f9c:	080265b9 	.word	0x080265b9
 8022fa0:	3ff80000 	.word	0x3ff80000
 8022fa4:	08026750 	.word	0x08026750
 8022fa8:	0802665b 	.word	0x0802665b
 8022fac:	2501      	movs	r5, #1
 8022fae:	2300      	movs	r3, #0
 8022fb0:	9306      	str	r3, [sp, #24]
 8022fb2:	9508      	str	r5, [sp, #32]
 8022fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8022fb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022fbc:	2200      	movs	r2, #0
 8022fbe:	2312      	movs	r3, #18
 8022fc0:	e7b0      	b.n	8022f24 <_dtoa_r+0x26c>
 8022fc2:	2301      	movs	r3, #1
 8022fc4:	9308      	str	r3, [sp, #32]
 8022fc6:	e7f5      	b.n	8022fb4 <_dtoa_r+0x2fc>
 8022fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022fce:	e7b8      	b.n	8022f42 <_dtoa_r+0x28a>
 8022fd0:	3101      	adds	r1, #1
 8022fd2:	6041      	str	r1, [r0, #4]
 8022fd4:	0052      	lsls	r2, r2, #1
 8022fd6:	e7b8      	b.n	8022f4a <_dtoa_r+0x292>
 8022fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022fda:	9a01      	ldr	r2, [sp, #4]
 8022fdc:	601a      	str	r2, [r3, #0]
 8022fde:	9b03      	ldr	r3, [sp, #12]
 8022fe0:	2b0e      	cmp	r3, #14
 8022fe2:	f200 809d 	bhi.w	8023120 <_dtoa_r+0x468>
 8022fe6:	2d00      	cmp	r5, #0
 8022fe8:	f000 809a 	beq.w	8023120 <_dtoa_r+0x468>
 8022fec:	9b00      	ldr	r3, [sp, #0]
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	dd32      	ble.n	8023058 <_dtoa_r+0x3a0>
 8022ff2:	4ab7      	ldr	r2, [pc, #732]	; (80232d0 <_dtoa_r+0x618>)
 8022ff4:	f003 030f 	and.w	r3, r3, #15
 8022ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023000:	9b00      	ldr	r3, [sp, #0]
 8023002:	05d8      	lsls	r0, r3, #23
 8023004:	ea4f 1723 	mov.w	r7, r3, asr #4
 8023008:	d516      	bpl.n	8023038 <_dtoa_r+0x380>
 802300a:	4bb2      	ldr	r3, [pc, #712]	; (80232d4 <_dtoa_r+0x61c>)
 802300c:	ec51 0b19 	vmov	r0, r1, d9
 8023010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023014:	f7dd fc42 	bl	800089c <__aeabi_ddiv>
 8023018:	f007 070f 	and.w	r7, r7, #15
 802301c:	4682      	mov	sl, r0
 802301e:	468b      	mov	fp, r1
 8023020:	2503      	movs	r5, #3
 8023022:	4eac      	ldr	r6, [pc, #688]	; (80232d4 <_dtoa_r+0x61c>)
 8023024:	b957      	cbnz	r7, 802303c <_dtoa_r+0x384>
 8023026:	4642      	mov	r2, r8
 8023028:	464b      	mov	r3, r9
 802302a:	4650      	mov	r0, sl
 802302c:	4659      	mov	r1, fp
 802302e:	f7dd fc35 	bl	800089c <__aeabi_ddiv>
 8023032:	4682      	mov	sl, r0
 8023034:	468b      	mov	fp, r1
 8023036:	e028      	b.n	802308a <_dtoa_r+0x3d2>
 8023038:	2502      	movs	r5, #2
 802303a:	e7f2      	b.n	8023022 <_dtoa_r+0x36a>
 802303c:	07f9      	lsls	r1, r7, #31
 802303e:	d508      	bpl.n	8023052 <_dtoa_r+0x39a>
 8023040:	4640      	mov	r0, r8
 8023042:	4649      	mov	r1, r9
 8023044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023048:	f7dd fafe 	bl	8000648 <__aeabi_dmul>
 802304c:	3501      	adds	r5, #1
 802304e:	4680      	mov	r8, r0
 8023050:	4689      	mov	r9, r1
 8023052:	107f      	asrs	r7, r7, #1
 8023054:	3608      	adds	r6, #8
 8023056:	e7e5      	b.n	8023024 <_dtoa_r+0x36c>
 8023058:	f000 809b 	beq.w	8023192 <_dtoa_r+0x4da>
 802305c:	9b00      	ldr	r3, [sp, #0]
 802305e:	4f9d      	ldr	r7, [pc, #628]	; (80232d4 <_dtoa_r+0x61c>)
 8023060:	425e      	negs	r6, r3
 8023062:	4b9b      	ldr	r3, [pc, #620]	; (80232d0 <_dtoa_r+0x618>)
 8023064:	f006 020f 	and.w	r2, r6, #15
 8023068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023070:	ec51 0b19 	vmov	r0, r1, d9
 8023074:	f7dd fae8 	bl	8000648 <__aeabi_dmul>
 8023078:	1136      	asrs	r6, r6, #4
 802307a:	4682      	mov	sl, r0
 802307c:	468b      	mov	fp, r1
 802307e:	2300      	movs	r3, #0
 8023080:	2502      	movs	r5, #2
 8023082:	2e00      	cmp	r6, #0
 8023084:	d17a      	bne.n	802317c <_dtoa_r+0x4c4>
 8023086:	2b00      	cmp	r3, #0
 8023088:	d1d3      	bne.n	8023032 <_dtoa_r+0x37a>
 802308a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802308c:	2b00      	cmp	r3, #0
 802308e:	f000 8082 	beq.w	8023196 <_dtoa_r+0x4de>
 8023092:	4b91      	ldr	r3, [pc, #580]	; (80232d8 <_dtoa_r+0x620>)
 8023094:	2200      	movs	r2, #0
 8023096:	4650      	mov	r0, sl
 8023098:	4659      	mov	r1, fp
 802309a:	f7dd fd47 	bl	8000b2c <__aeabi_dcmplt>
 802309e:	2800      	cmp	r0, #0
 80230a0:	d079      	beq.n	8023196 <_dtoa_r+0x4de>
 80230a2:	9b03      	ldr	r3, [sp, #12]
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d076      	beq.n	8023196 <_dtoa_r+0x4de>
 80230a8:	9b02      	ldr	r3, [sp, #8]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	dd36      	ble.n	802311c <_dtoa_r+0x464>
 80230ae:	9b00      	ldr	r3, [sp, #0]
 80230b0:	4650      	mov	r0, sl
 80230b2:	4659      	mov	r1, fp
 80230b4:	1e5f      	subs	r7, r3, #1
 80230b6:	2200      	movs	r2, #0
 80230b8:	4b88      	ldr	r3, [pc, #544]	; (80232dc <_dtoa_r+0x624>)
 80230ba:	f7dd fac5 	bl	8000648 <__aeabi_dmul>
 80230be:	9e02      	ldr	r6, [sp, #8]
 80230c0:	4682      	mov	sl, r0
 80230c2:	468b      	mov	fp, r1
 80230c4:	3501      	adds	r5, #1
 80230c6:	4628      	mov	r0, r5
 80230c8:	f7dd fa54 	bl	8000574 <__aeabi_i2d>
 80230cc:	4652      	mov	r2, sl
 80230ce:	465b      	mov	r3, fp
 80230d0:	f7dd faba 	bl	8000648 <__aeabi_dmul>
 80230d4:	4b82      	ldr	r3, [pc, #520]	; (80232e0 <_dtoa_r+0x628>)
 80230d6:	2200      	movs	r2, #0
 80230d8:	f7dd f900 	bl	80002dc <__adddf3>
 80230dc:	46d0      	mov	r8, sl
 80230de:	46d9      	mov	r9, fp
 80230e0:	4682      	mov	sl, r0
 80230e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80230e6:	2e00      	cmp	r6, #0
 80230e8:	d158      	bne.n	802319c <_dtoa_r+0x4e4>
 80230ea:	4b7e      	ldr	r3, [pc, #504]	; (80232e4 <_dtoa_r+0x62c>)
 80230ec:	2200      	movs	r2, #0
 80230ee:	4640      	mov	r0, r8
 80230f0:	4649      	mov	r1, r9
 80230f2:	f7dd f8f1 	bl	80002d8 <__aeabi_dsub>
 80230f6:	4652      	mov	r2, sl
 80230f8:	465b      	mov	r3, fp
 80230fa:	4680      	mov	r8, r0
 80230fc:	4689      	mov	r9, r1
 80230fe:	f7dd fd33 	bl	8000b68 <__aeabi_dcmpgt>
 8023102:	2800      	cmp	r0, #0
 8023104:	f040 8295 	bne.w	8023632 <_dtoa_r+0x97a>
 8023108:	4652      	mov	r2, sl
 802310a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802310e:	4640      	mov	r0, r8
 8023110:	4649      	mov	r1, r9
 8023112:	f7dd fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8023116:	2800      	cmp	r0, #0
 8023118:	f040 8289 	bne.w	802362e <_dtoa_r+0x976>
 802311c:	ec5b ab19 	vmov	sl, fp, d9
 8023120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023122:	2b00      	cmp	r3, #0
 8023124:	f2c0 8148 	blt.w	80233b8 <_dtoa_r+0x700>
 8023128:	9a00      	ldr	r2, [sp, #0]
 802312a:	2a0e      	cmp	r2, #14
 802312c:	f300 8144 	bgt.w	80233b8 <_dtoa_r+0x700>
 8023130:	4b67      	ldr	r3, [pc, #412]	; (80232d0 <_dtoa_r+0x618>)
 8023132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023136:	e9d3 8900 	ldrd	r8, r9, [r3]
 802313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802313c:	2b00      	cmp	r3, #0
 802313e:	f280 80d5 	bge.w	80232ec <_dtoa_r+0x634>
 8023142:	9b03      	ldr	r3, [sp, #12]
 8023144:	2b00      	cmp	r3, #0
 8023146:	f300 80d1 	bgt.w	80232ec <_dtoa_r+0x634>
 802314a:	f040 826f 	bne.w	802362c <_dtoa_r+0x974>
 802314e:	4b65      	ldr	r3, [pc, #404]	; (80232e4 <_dtoa_r+0x62c>)
 8023150:	2200      	movs	r2, #0
 8023152:	4640      	mov	r0, r8
 8023154:	4649      	mov	r1, r9
 8023156:	f7dd fa77 	bl	8000648 <__aeabi_dmul>
 802315a:	4652      	mov	r2, sl
 802315c:	465b      	mov	r3, fp
 802315e:	f7dd fcf9 	bl	8000b54 <__aeabi_dcmpge>
 8023162:	9e03      	ldr	r6, [sp, #12]
 8023164:	4637      	mov	r7, r6
 8023166:	2800      	cmp	r0, #0
 8023168:	f040 8245 	bne.w	80235f6 <_dtoa_r+0x93e>
 802316c:	9d01      	ldr	r5, [sp, #4]
 802316e:	2331      	movs	r3, #49	; 0x31
 8023170:	f805 3b01 	strb.w	r3, [r5], #1
 8023174:	9b00      	ldr	r3, [sp, #0]
 8023176:	3301      	adds	r3, #1
 8023178:	9300      	str	r3, [sp, #0]
 802317a:	e240      	b.n	80235fe <_dtoa_r+0x946>
 802317c:	07f2      	lsls	r2, r6, #31
 802317e:	d505      	bpl.n	802318c <_dtoa_r+0x4d4>
 8023180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023184:	f7dd fa60 	bl	8000648 <__aeabi_dmul>
 8023188:	3501      	adds	r5, #1
 802318a:	2301      	movs	r3, #1
 802318c:	1076      	asrs	r6, r6, #1
 802318e:	3708      	adds	r7, #8
 8023190:	e777      	b.n	8023082 <_dtoa_r+0x3ca>
 8023192:	2502      	movs	r5, #2
 8023194:	e779      	b.n	802308a <_dtoa_r+0x3d2>
 8023196:	9f00      	ldr	r7, [sp, #0]
 8023198:	9e03      	ldr	r6, [sp, #12]
 802319a:	e794      	b.n	80230c6 <_dtoa_r+0x40e>
 802319c:	9901      	ldr	r1, [sp, #4]
 802319e:	4b4c      	ldr	r3, [pc, #304]	; (80232d0 <_dtoa_r+0x618>)
 80231a0:	4431      	add	r1, r6
 80231a2:	910d      	str	r1, [sp, #52]	; 0x34
 80231a4:	9908      	ldr	r1, [sp, #32]
 80231a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80231aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80231ae:	2900      	cmp	r1, #0
 80231b0:	d043      	beq.n	802323a <_dtoa_r+0x582>
 80231b2:	494d      	ldr	r1, [pc, #308]	; (80232e8 <_dtoa_r+0x630>)
 80231b4:	2000      	movs	r0, #0
 80231b6:	f7dd fb71 	bl	800089c <__aeabi_ddiv>
 80231ba:	4652      	mov	r2, sl
 80231bc:	465b      	mov	r3, fp
 80231be:	f7dd f88b 	bl	80002d8 <__aeabi_dsub>
 80231c2:	9d01      	ldr	r5, [sp, #4]
 80231c4:	4682      	mov	sl, r0
 80231c6:	468b      	mov	fp, r1
 80231c8:	4649      	mov	r1, r9
 80231ca:	4640      	mov	r0, r8
 80231cc:	f7dd fcec 	bl	8000ba8 <__aeabi_d2iz>
 80231d0:	4606      	mov	r6, r0
 80231d2:	f7dd f9cf 	bl	8000574 <__aeabi_i2d>
 80231d6:	4602      	mov	r2, r0
 80231d8:	460b      	mov	r3, r1
 80231da:	4640      	mov	r0, r8
 80231dc:	4649      	mov	r1, r9
 80231de:	f7dd f87b 	bl	80002d8 <__aeabi_dsub>
 80231e2:	3630      	adds	r6, #48	; 0x30
 80231e4:	f805 6b01 	strb.w	r6, [r5], #1
 80231e8:	4652      	mov	r2, sl
 80231ea:	465b      	mov	r3, fp
 80231ec:	4680      	mov	r8, r0
 80231ee:	4689      	mov	r9, r1
 80231f0:	f7dd fc9c 	bl	8000b2c <__aeabi_dcmplt>
 80231f4:	2800      	cmp	r0, #0
 80231f6:	d163      	bne.n	80232c0 <_dtoa_r+0x608>
 80231f8:	4642      	mov	r2, r8
 80231fa:	464b      	mov	r3, r9
 80231fc:	4936      	ldr	r1, [pc, #216]	; (80232d8 <_dtoa_r+0x620>)
 80231fe:	2000      	movs	r0, #0
 8023200:	f7dd f86a 	bl	80002d8 <__aeabi_dsub>
 8023204:	4652      	mov	r2, sl
 8023206:	465b      	mov	r3, fp
 8023208:	f7dd fc90 	bl	8000b2c <__aeabi_dcmplt>
 802320c:	2800      	cmp	r0, #0
 802320e:	f040 80b5 	bne.w	802337c <_dtoa_r+0x6c4>
 8023212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023214:	429d      	cmp	r5, r3
 8023216:	d081      	beq.n	802311c <_dtoa_r+0x464>
 8023218:	4b30      	ldr	r3, [pc, #192]	; (80232dc <_dtoa_r+0x624>)
 802321a:	2200      	movs	r2, #0
 802321c:	4650      	mov	r0, sl
 802321e:	4659      	mov	r1, fp
 8023220:	f7dd fa12 	bl	8000648 <__aeabi_dmul>
 8023224:	4b2d      	ldr	r3, [pc, #180]	; (80232dc <_dtoa_r+0x624>)
 8023226:	4682      	mov	sl, r0
 8023228:	468b      	mov	fp, r1
 802322a:	4640      	mov	r0, r8
 802322c:	4649      	mov	r1, r9
 802322e:	2200      	movs	r2, #0
 8023230:	f7dd fa0a 	bl	8000648 <__aeabi_dmul>
 8023234:	4680      	mov	r8, r0
 8023236:	4689      	mov	r9, r1
 8023238:	e7c6      	b.n	80231c8 <_dtoa_r+0x510>
 802323a:	4650      	mov	r0, sl
 802323c:	4659      	mov	r1, fp
 802323e:	f7dd fa03 	bl	8000648 <__aeabi_dmul>
 8023242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023244:	9d01      	ldr	r5, [sp, #4]
 8023246:	930f      	str	r3, [sp, #60]	; 0x3c
 8023248:	4682      	mov	sl, r0
 802324a:	468b      	mov	fp, r1
 802324c:	4649      	mov	r1, r9
 802324e:	4640      	mov	r0, r8
 8023250:	f7dd fcaa 	bl	8000ba8 <__aeabi_d2iz>
 8023254:	4606      	mov	r6, r0
 8023256:	f7dd f98d 	bl	8000574 <__aeabi_i2d>
 802325a:	3630      	adds	r6, #48	; 0x30
 802325c:	4602      	mov	r2, r0
 802325e:	460b      	mov	r3, r1
 8023260:	4640      	mov	r0, r8
 8023262:	4649      	mov	r1, r9
 8023264:	f7dd f838 	bl	80002d8 <__aeabi_dsub>
 8023268:	f805 6b01 	strb.w	r6, [r5], #1
 802326c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802326e:	429d      	cmp	r5, r3
 8023270:	4680      	mov	r8, r0
 8023272:	4689      	mov	r9, r1
 8023274:	f04f 0200 	mov.w	r2, #0
 8023278:	d124      	bne.n	80232c4 <_dtoa_r+0x60c>
 802327a:	4b1b      	ldr	r3, [pc, #108]	; (80232e8 <_dtoa_r+0x630>)
 802327c:	4650      	mov	r0, sl
 802327e:	4659      	mov	r1, fp
 8023280:	f7dd f82c 	bl	80002dc <__adddf3>
 8023284:	4602      	mov	r2, r0
 8023286:	460b      	mov	r3, r1
 8023288:	4640      	mov	r0, r8
 802328a:	4649      	mov	r1, r9
 802328c:	f7dd fc6c 	bl	8000b68 <__aeabi_dcmpgt>
 8023290:	2800      	cmp	r0, #0
 8023292:	d173      	bne.n	802337c <_dtoa_r+0x6c4>
 8023294:	4652      	mov	r2, sl
 8023296:	465b      	mov	r3, fp
 8023298:	4913      	ldr	r1, [pc, #76]	; (80232e8 <_dtoa_r+0x630>)
 802329a:	2000      	movs	r0, #0
 802329c:	f7dd f81c 	bl	80002d8 <__aeabi_dsub>
 80232a0:	4602      	mov	r2, r0
 80232a2:	460b      	mov	r3, r1
 80232a4:	4640      	mov	r0, r8
 80232a6:	4649      	mov	r1, r9
 80232a8:	f7dd fc40 	bl	8000b2c <__aeabi_dcmplt>
 80232ac:	2800      	cmp	r0, #0
 80232ae:	f43f af35 	beq.w	802311c <_dtoa_r+0x464>
 80232b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80232b4:	1e6b      	subs	r3, r5, #1
 80232b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80232b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80232bc:	2b30      	cmp	r3, #48	; 0x30
 80232be:	d0f8      	beq.n	80232b2 <_dtoa_r+0x5fa>
 80232c0:	9700      	str	r7, [sp, #0]
 80232c2:	e049      	b.n	8023358 <_dtoa_r+0x6a0>
 80232c4:	4b05      	ldr	r3, [pc, #20]	; (80232dc <_dtoa_r+0x624>)
 80232c6:	f7dd f9bf 	bl	8000648 <__aeabi_dmul>
 80232ca:	4680      	mov	r8, r0
 80232cc:	4689      	mov	r9, r1
 80232ce:	e7bd      	b.n	802324c <_dtoa_r+0x594>
 80232d0:	08026750 	.word	0x08026750
 80232d4:	08026728 	.word	0x08026728
 80232d8:	3ff00000 	.word	0x3ff00000
 80232dc:	40240000 	.word	0x40240000
 80232e0:	401c0000 	.word	0x401c0000
 80232e4:	40140000 	.word	0x40140000
 80232e8:	3fe00000 	.word	0x3fe00000
 80232ec:	9d01      	ldr	r5, [sp, #4]
 80232ee:	4656      	mov	r6, sl
 80232f0:	465f      	mov	r7, fp
 80232f2:	4642      	mov	r2, r8
 80232f4:	464b      	mov	r3, r9
 80232f6:	4630      	mov	r0, r6
 80232f8:	4639      	mov	r1, r7
 80232fa:	f7dd facf 	bl	800089c <__aeabi_ddiv>
 80232fe:	f7dd fc53 	bl	8000ba8 <__aeabi_d2iz>
 8023302:	4682      	mov	sl, r0
 8023304:	f7dd f936 	bl	8000574 <__aeabi_i2d>
 8023308:	4642      	mov	r2, r8
 802330a:	464b      	mov	r3, r9
 802330c:	f7dd f99c 	bl	8000648 <__aeabi_dmul>
 8023310:	4602      	mov	r2, r0
 8023312:	460b      	mov	r3, r1
 8023314:	4630      	mov	r0, r6
 8023316:	4639      	mov	r1, r7
 8023318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802331c:	f7dc ffdc 	bl	80002d8 <__aeabi_dsub>
 8023320:	f805 6b01 	strb.w	r6, [r5], #1
 8023324:	9e01      	ldr	r6, [sp, #4]
 8023326:	9f03      	ldr	r7, [sp, #12]
 8023328:	1bae      	subs	r6, r5, r6
 802332a:	42b7      	cmp	r7, r6
 802332c:	4602      	mov	r2, r0
 802332e:	460b      	mov	r3, r1
 8023330:	d135      	bne.n	802339e <_dtoa_r+0x6e6>
 8023332:	f7dc ffd3 	bl	80002dc <__adddf3>
 8023336:	4642      	mov	r2, r8
 8023338:	464b      	mov	r3, r9
 802333a:	4606      	mov	r6, r0
 802333c:	460f      	mov	r7, r1
 802333e:	f7dd fc13 	bl	8000b68 <__aeabi_dcmpgt>
 8023342:	b9d0      	cbnz	r0, 802337a <_dtoa_r+0x6c2>
 8023344:	4642      	mov	r2, r8
 8023346:	464b      	mov	r3, r9
 8023348:	4630      	mov	r0, r6
 802334a:	4639      	mov	r1, r7
 802334c:	f7dd fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8023350:	b110      	cbz	r0, 8023358 <_dtoa_r+0x6a0>
 8023352:	f01a 0f01 	tst.w	sl, #1
 8023356:	d110      	bne.n	802337a <_dtoa_r+0x6c2>
 8023358:	4620      	mov	r0, r4
 802335a:	ee18 1a10 	vmov	r1, s16
 802335e:	f000 fd05 	bl	8023d6c <_Bfree>
 8023362:	2300      	movs	r3, #0
 8023364:	9800      	ldr	r0, [sp, #0]
 8023366:	702b      	strb	r3, [r5, #0]
 8023368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802336a:	3001      	adds	r0, #1
 802336c:	6018      	str	r0, [r3, #0]
 802336e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023370:	2b00      	cmp	r3, #0
 8023372:	f43f acf1 	beq.w	8022d58 <_dtoa_r+0xa0>
 8023376:	601d      	str	r5, [r3, #0]
 8023378:	e4ee      	b.n	8022d58 <_dtoa_r+0xa0>
 802337a:	9f00      	ldr	r7, [sp, #0]
 802337c:	462b      	mov	r3, r5
 802337e:	461d      	mov	r5, r3
 8023380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023384:	2a39      	cmp	r2, #57	; 0x39
 8023386:	d106      	bne.n	8023396 <_dtoa_r+0x6de>
 8023388:	9a01      	ldr	r2, [sp, #4]
 802338a:	429a      	cmp	r2, r3
 802338c:	d1f7      	bne.n	802337e <_dtoa_r+0x6c6>
 802338e:	9901      	ldr	r1, [sp, #4]
 8023390:	2230      	movs	r2, #48	; 0x30
 8023392:	3701      	adds	r7, #1
 8023394:	700a      	strb	r2, [r1, #0]
 8023396:	781a      	ldrb	r2, [r3, #0]
 8023398:	3201      	adds	r2, #1
 802339a:	701a      	strb	r2, [r3, #0]
 802339c:	e790      	b.n	80232c0 <_dtoa_r+0x608>
 802339e:	4ba6      	ldr	r3, [pc, #664]	; (8023638 <_dtoa_r+0x980>)
 80233a0:	2200      	movs	r2, #0
 80233a2:	f7dd f951 	bl	8000648 <__aeabi_dmul>
 80233a6:	2200      	movs	r2, #0
 80233a8:	2300      	movs	r3, #0
 80233aa:	4606      	mov	r6, r0
 80233ac:	460f      	mov	r7, r1
 80233ae:	f7dd fbb3 	bl	8000b18 <__aeabi_dcmpeq>
 80233b2:	2800      	cmp	r0, #0
 80233b4:	d09d      	beq.n	80232f2 <_dtoa_r+0x63a>
 80233b6:	e7cf      	b.n	8023358 <_dtoa_r+0x6a0>
 80233b8:	9a08      	ldr	r2, [sp, #32]
 80233ba:	2a00      	cmp	r2, #0
 80233bc:	f000 80d7 	beq.w	802356e <_dtoa_r+0x8b6>
 80233c0:	9a06      	ldr	r2, [sp, #24]
 80233c2:	2a01      	cmp	r2, #1
 80233c4:	f300 80ba 	bgt.w	802353c <_dtoa_r+0x884>
 80233c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80233ca:	2a00      	cmp	r2, #0
 80233cc:	f000 80b2 	beq.w	8023534 <_dtoa_r+0x87c>
 80233d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80233d4:	9e07      	ldr	r6, [sp, #28]
 80233d6:	9d04      	ldr	r5, [sp, #16]
 80233d8:	9a04      	ldr	r2, [sp, #16]
 80233da:	441a      	add	r2, r3
 80233dc:	9204      	str	r2, [sp, #16]
 80233de:	9a05      	ldr	r2, [sp, #20]
 80233e0:	2101      	movs	r1, #1
 80233e2:	441a      	add	r2, r3
 80233e4:	4620      	mov	r0, r4
 80233e6:	9205      	str	r2, [sp, #20]
 80233e8:	f000 fd78 	bl	8023edc <__i2b>
 80233ec:	4607      	mov	r7, r0
 80233ee:	2d00      	cmp	r5, #0
 80233f0:	dd0c      	ble.n	802340c <_dtoa_r+0x754>
 80233f2:	9b05      	ldr	r3, [sp, #20]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	dd09      	ble.n	802340c <_dtoa_r+0x754>
 80233f8:	42ab      	cmp	r3, r5
 80233fa:	9a04      	ldr	r2, [sp, #16]
 80233fc:	bfa8      	it	ge
 80233fe:	462b      	movge	r3, r5
 8023400:	1ad2      	subs	r2, r2, r3
 8023402:	9204      	str	r2, [sp, #16]
 8023404:	9a05      	ldr	r2, [sp, #20]
 8023406:	1aed      	subs	r5, r5, r3
 8023408:	1ad3      	subs	r3, r2, r3
 802340a:	9305      	str	r3, [sp, #20]
 802340c:	9b07      	ldr	r3, [sp, #28]
 802340e:	b31b      	cbz	r3, 8023458 <_dtoa_r+0x7a0>
 8023410:	9b08      	ldr	r3, [sp, #32]
 8023412:	2b00      	cmp	r3, #0
 8023414:	f000 80af 	beq.w	8023576 <_dtoa_r+0x8be>
 8023418:	2e00      	cmp	r6, #0
 802341a:	dd13      	ble.n	8023444 <_dtoa_r+0x78c>
 802341c:	4639      	mov	r1, r7
 802341e:	4632      	mov	r2, r6
 8023420:	4620      	mov	r0, r4
 8023422:	f000 fe1b 	bl	802405c <__pow5mult>
 8023426:	ee18 2a10 	vmov	r2, s16
 802342a:	4601      	mov	r1, r0
 802342c:	4607      	mov	r7, r0
 802342e:	4620      	mov	r0, r4
 8023430:	f000 fd6a 	bl	8023f08 <__multiply>
 8023434:	ee18 1a10 	vmov	r1, s16
 8023438:	4680      	mov	r8, r0
 802343a:	4620      	mov	r0, r4
 802343c:	f000 fc96 	bl	8023d6c <_Bfree>
 8023440:	ee08 8a10 	vmov	s16, r8
 8023444:	9b07      	ldr	r3, [sp, #28]
 8023446:	1b9a      	subs	r2, r3, r6
 8023448:	d006      	beq.n	8023458 <_dtoa_r+0x7a0>
 802344a:	ee18 1a10 	vmov	r1, s16
 802344e:	4620      	mov	r0, r4
 8023450:	f000 fe04 	bl	802405c <__pow5mult>
 8023454:	ee08 0a10 	vmov	s16, r0
 8023458:	2101      	movs	r1, #1
 802345a:	4620      	mov	r0, r4
 802345c:	f000 fd3e 	bl	8023edc <__i2b>
 8023460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023462:	2b00      	cmp	r3, #0
 8023464:	4606      	mov	r6, r0
 8023466:	f340 8088 	ble.w	802357a <_dtoa_r+0x8c2>
 802346a:	461a      	mov	r2, r3
 802346c:	4601      	mov	r1, r0
 802346e:	4620      	mov	r0, r4
 8023470:	f000 fdf4 	bl	802405c <__pow5mult>
 8023474:	9b06      	ldr	r3, [sp, #24]
 8023476:	2b01      	cmp	r3, #1
 8023478:	4606      	mov	r6, r0
 802347a:	f340 8081 	ble.w	8023580 <_dtoa_r+0x8c8>
 802347e:	f04f 0800 	mov.w	r8, #0
 8023482:	6933      	ldr	r3, [r6, #16]
 8023484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8023488:	6918      	ldr	r0, [r3, #16]
 802348a:	f000 fcd7 	bl	8023e3c <__hi0bits>
 802348e:	f1c0 0020 	rsb	r0, r0, #32
 8023492:	9b05      	ldr	r3, [sp, #20]
 8023494:	4418      	add	r0, r3
 8023496:	f010 001f 	ands.w	r0, r0, #31
 802349a:	f000 8092 	beq.w	80235c2 <_dtoa_r+0x90a>
 802349e:	f1c0 0320 	rsb	r3, r0, #32
 80234a2:	2b04      	cmp	r3, #4
 80234a4:	f340 808a 	ble.w	80235bc <_dtoa_r+0x904>
 80234a8:	f1c0 001c 	rsb	r0, r0, #28
 80234ac:	9b04      	ldr	r3, [sp, #16]
 80234ae:	4403      	add	r3, r0
 80234b0:	9304      	str	r3, [sp, #16]
 80234b2:	9b05      	ldr	r3, [sp, #20]
 80234b4:	4403      	add	r3, r0
 80234b6:	4405      	add	r5, r0
 80234b8:	9305      	str	r3, [sp, #20]
 80234ba:	9b04      	ldr	r3, [sp, #16]
 80234bc:	2b00      	cmp	r3, #0
 80234be:	dd07      	ble.n	80234d0 <_dtoa_r+0x818>
 80234c0:	ee18 1a10 	vmov	r1, s16
 80234c4:	461a      	mov	r2, r3
 80234c6:	4620      	mov	r0, r4
 80234c8:	f000 fe22 	bl	8024110 <__lshift>
 80234cc:	ee08 0a10 	vmov	s16, r0
 80234d0:	9b05      	ldr	r3, [sp, #20]
 80234d2:	2b00      	cmp	r3, #0
 80234d4:	dd05      	ble.n	80234e2 <_dtoa_r+0x82a>
 80234d6:	4631      	mov	r1, r6
 80234d8:	461a      	mov	r2, r3
 80234da:	4620      	mov	r0, r4
 80234dc:	f000 fe18 	bl	8024110 <__lshift>
 80234e0:	4606      	mov	r6, r0
 80234e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d06e      	beq.n	80235c6 <_dtoa_r+0x90e>
 80234e8:	ee18 0a10 	vmov	r0, s16
 80234ec:	4631      	mov	r1, r6
 80234ee:	f000 fe7f 	bl	80241f0 <__mcmp>
 80234f2:	2800      	cmp	r0, #0
 80234f4:	da67      	bge.n	80235c6 <_dtoa_r+0x90e>
 80234f6:	9b00      	ldr	r3, [sp, #0]
 80234f8:	3b01      	subs	r3, #1
 80234fa:	ee18 1a10 	vmov	r1, s16
 80234fe:	9300      	str	r3, [sp, #0]
 8023500:	220a      	movs	r2, #10
 8023502:	2300      	movs	r3, #0
 8023504:	4620      	mov	r0, r4
 8023506:	f000 fc53 	bl	8023db0 <__multadd>
 802350a:	9b08      	ldr	r3, [sp, #32]
 802350c:	ee08 0a10 	vmov	s16, r0
 8023510:	2b00      	cmp	r3, #0
 8023512:	f000 81b1 	beq.w	8023878 <_dtoa_r+0xbc0>
 8023516:	2300      	movs	r3, #0
 8023518:	4639      	mov	r1, r7
 802351a:	220a      	movs	r2, #10
 802351c:	4620      	mov	r0, r4
 802351e:	f000 fc47 	bl	8023db0 <__multadd>
 8023522:	9b02      	ldr	r3, [sp, #8]
 8023524:	2b00      	cmp	r3, #0
 8023526:	4607      	mov	r7, r0
 8023528:	f300 808e 	bgt.w	8023648 <_dtoa_r+0x990>
 802352c:	9b06      	ldr	r3, [sp, #24]
 802352e:	2b02      	cmp	r3, #2
 8023530:	dc51      	bgt.n	80235d6 <_dtoa_r+0x91e>
 8023532:	e089      	b.n	8023648 <_dtoa_r+0x990>
 8023534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802353a:	e74b      	b.n	80233d4 <_dtoa_r+0x71c>
 802353c:	9b03      	ldr	r3, [sp, #12]
 802353e:	1e5e      	subs	r6, r3, #1
 8023540:	9b07      	ldr	r3, [sp, #28]
 8023542:	42b3      	cmp	r3, r6
 8023544:	bfbf      	itttt	lt
 8023546:	9b07      	ldrlt	r3, [sp, #28]
 8023548:	9607      	strlt	r6, [sp, #28]
 802354a:	1af2      	sublt	r2, r6, r3
 802354c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802354e:	bfb6      	itet	lt
 8023550:	189b      	addlt	r3, r3, r2
 8023552:	1b9e      	subge	r6, r3, r6
 8023554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8023556:	9b03      	ldr	r3, [sp, #12]
 8023558:	bfb8      	it	lt
 802355a:	2600      	movlt	r6, #0
 802355c:	2b00      	cmp	r3, #0
 802355e:	bfb7      	itett	lt
 8023560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8023564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8023568:	1a9d      	sublt	r5, r3, r2
 802356a:	2300      	movlt	r3, #0
 802356c:	e734      	b.n	80233d8 <_dtoa_r+0x720>
 802356e:	9e07      	ldr	r6, [sp, #28]
 8023570:	9d04      	ldr	r5, [sp, #16]
 8023572:	9f08      	ldr	r7, [sp, #32]
 8023574:	e73b      	b.n	80233ee <_dtoa_r+0x736>
 8023576:	9a07      	ldr	r2, [sp, #28]
 8023578:	e767      	b.n	802344a <_dtoa_r+0x792>
 802357a:	9b06      	ldr	r3, [sp, #24]
 802357c:	2b01      	cmp	r3, #1
 802357e:	dc18      	bgt.n	80235b2 <_dtoa_r+0x8fa>
 8023580:	f1ba 0f00 	cmp.w	sl, #0
 8023584:	d115      	bne.n	80235b2 <_dtoa_r+0x8fa>
 8023586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802358a:	b993      	cbnz	r3, 80235b2 <_dtoa_r+0x8fa>
 802358c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023590:	0d1b      	lsrs	r3, r3, #20
 8023592:	051b      	lsls	r3, r3, #20
 8023594:	b183      	cbz	r3, 80235b8 <_dtoa_r+0x900>
 8023596:	9b04      	ldr	r3, [sp, #16]
 8023598:	3301      	adds	r3, #1
 802359a:	9304      	str	r3, [sp, #16]
 802359c:	9b05      	ldr	r3, [sp, #20]
 802359e:	3301      	adds	r3, #1
 80235a0:	9305      	str	r3, [sp, #20]
 80235a2:	f04f 0801 	mov.w	r8, #1
 80235a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	f47f af6a 	bne.w	8023482 <_dtoa_r+0x7ca>
 80235ae:	2001      	movs	r0, #1
 80235b0:	e76f      	b.n	8023492 <_dtoa_r+0x7da>
 80235b2:	f04f 0800 	mov.w	r8, #0
 80235b6:	e7f6      	b.n	80235a6 <_dtoa_r+0x8ee>
 80235b8:	4698      	mov	r8, r3
 80235ba:	e7f4      	b.n	80235a6 <_dtoa_r+0x8ee>
 80235bc:	f43f af7d 	beq.w	80234ba <_dtoa_r+0x802>
 80235c0:	4618      	mov	r0, r3
 80235c2:	301c      	adds	r0, #28
 80235c4:	e772      	b.n	80234ac <_dtoa_r+0x7f4>
 80235c6:	9b03      	ldr	r3, [sp, #12]
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	dc37      	bgt.n	802363c <_dtoa_r+0x984>
 80235cc:	9b06      	ldr	r3, [sp, #24]
 80235ce:	2b02      	cmp	r3, #2
 80235d0:	dd34      	ble.n	802363c <_dtoa_r+0x984>
 80235d2:	9b03      	ldr	r3, [sp, #12]
 80235d4:	9302      	str	r3, [sp, #8]
 80235d6:	9b02      	ldr	r3, [sp, #8]
 80235d8:	b96b      	cbnz	r3, 80235f6 <_dtoa_r+0x93e>
 80235da:	4631      	mov	r1, r6
 80235dc:	2205      	movs	r2, #5
 80235de:	4620      	mov	r0, r4
 80235e0:	f000 fbe6 	bl	8023db0 <__multadd>
 80235e4:	4601      	mov	r1, r0
 80235e6:	4606      	mov	r6, r0
 80235e8:	ee18 0a10 	vmov	r0, s16
 80235ec:	f000 fe00 	bl	80241f0 <__mcmp>
 80235f0:	2800      	cmp	r0, #0
 80235f2:	f73f adbb 	bgt.w	802316c <_dtoa_r+0x4b4>
 80235f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235f8:	9d01      	ldr	r5, [sp, #4]
 80235fa:	43db      	mvns	r3, r3
 80235fc:	9300      	str	r3, [sp, #0]
 80235fe:	f04f 0800 	mov.w	r8, #0
 8023602:	4631      	mov	r1, r6
 8023604:	4620      	mov	r0, r4
 8023606:	f000 fbb1 	bl	8023d6c <_Bfree>
 802360a:	2f00      	cmp	r7, #0
 802360c:	f43f aea4 	beq.w	8023358 <_dtoa_r+0x6a0>
 8023610:	f1b8 0f00 	cmp.w	r8, #0
 8023614:	d005      	beq.n	8023622 <_dtoa_r+0x96a>
 8023616:	45b8      	cmp	r8, r7
 8023618:	d003      	beq.n	8023622 <_dtoa_r+0x96a>
 802361a:	4641      	mov	r1, r8
 802361c:	4620      	mov	r0, r4
 802361e:	f000 fba5 	bl	8023d6c <_Bfree>
 8023622:	4639      	mov	r1, r7
 8023624:	4620      	mov	r0, r4
 8023626:	f000 fba1 	bl	8023d6c <_Bfree>
 802362a:	e695      	b.n	8023358 <_dtoa_r+0x6a0>
 802362c:	2600      	movs	r6, #0
 802362e:	4637      	mov	r7, r6
 8023630:	e7e1      	b.n	80235f6 <_dtoa_r+0x93e>
 8023632:	9700      	str	r7, [sp, #0]
 8023634:	4637      	mov	r7, r6
 8023636:	e599      	b.n	802316c <_dtoa_r+0x4b4>
 8023638:	40240000 	.word	0x40240000
 802363c:	9b08      	ldr	r3, [sp, #32]
 802363e:	2b00      	cmp	r3, #0
 8023640:	f000 80ca 	beq.w	80237d8 <_dtoa_r+0xb20>
 8023644:	9b03      	ldr	r3, [sp, #12]
 8023646:	9302      	str	r3, [sp, #8]
 8023648:	2d00      	cmp	r5, #0
 802364a:	dd05      	ble.n	8023658 <_dtoa_r+0x9a0>
 802364c:	4639      	mov	r1, r7
 802364e:	462a      	mov	r2, r5
 8023650:	4620      	mov	r0, r4
 8023652:	f000 fd5d 	bl	8024110 <__lshift>
 8023656:	4607      	mov	r7, r0
 8023658:	f1b8 0f00 	cmp.w	r8, #0
 802365c:	d05b      	beq.n	8023716 <_dtoa_r+0xa5e>
 802365e:	6879      	ldr	r1, [r7, #4]
 8023660:	4620      	mov	r0, r4
 8023662:	f000 fb43 	bl	8023cec <_Balloc>
 8023666:	4605      	mov	r5, r0
 8023668:	b928      	cbnz	r0, 8023676 <_dtoa_r+0x9be>
 802366a:	4b87      	ldr	r3, [pc, #540]	; (8023888 <_dtoa_r+0xbd0>)
 802366c:	4602      	mov	r2, r0
 802366e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8023672:	f7ff bb3b 	b.w	8022cec <_dtoa_r+0x34>
 8023676:	693a      	ldr	r2, [r7, #16]
 8023678:	3202      	adds	r2, #2
 802367a:	0092      	lsls	r2, r2, #2
 802367c:	f107 010c 	add.w	r1, r7, #12
 8023680:	300c      	adds	r0, #12
 8023682:	f7fe fca9 	bl	8021fd8 <memcpy>
 8023686:	2201      	movs	r2, #1
 8023688:	4629      	mov	r1, r5
 802368a:	4620      	mov	r0, r4
 802368c:	f000 fd40 	bl	8024110 <__lshift>
 8023690:	9b01      	ldr	r3, [sp, #4]
 8023692:	f103 0901 	add.w	r9, r3, #1
 8023696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802369a:	4413      	add	r3, r2
 802369c:	9305      	str	r3, [sp, #20]
 802369e:	f00a 0301 	and.w	r3, sl, #1
 80236a2:	46b8      	mov	r8, r7
 80236a4:	9304      	str	r3, [sp, #16]
 80236a6:	4607      	mov	r7, r0
 80236a8:	4631      	mov	r1, r6
 80236aa:	ee18 0a10 	vmov	r0, s16
 80236ae:	f7ff fa77 	bl	8022ba0 <quorem>
 80236b2:	4641      	mov	r1, r8
 80236b4:	9002      	str	r0, [sp, #8]
 80236b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80236ba:	ee18 0a10 	vmov	r0, s16
 80236be:	f000 fd97 	bl	80241f0 <__mcmp>
 80236c2:	463a      	mov	r2, r7
 80236c4:	9003      	str	r0, [sp, #12]
 80236c6:	4631      	mov	r1, r6
 80236c8:	4620      	mov	r0, r4
 80236ca:	f000 fdad 	bl	8024228 <__mdiff>
 80236ce:	68c2      	ldr	r2, [r0, #12]
 80236d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80236d4:	4605      	mov	r5, r0
 80236d6:	bb02      	cbnz	r2, 802371a <_dtoa_r+0xa62>
 80236d8:	4601      	mov	r1, r0
 80236da:	ee18 0a10 	vmov	r0, s16
 80236de:	f000 fd87 	bl	80241f0 <__mcmp>
 80236e2:	4602      	mov	r2, r0
 80236e4:	4629      	mov	r1, r5
 80236e6:	4620      	mov	r0, r4
 80236e8:	9207      	str	r2, [sp, #28]
 80236ea:	f000 fb3f 	bl	8023d6c <_Bfree>
 80236ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80236f2:	ea43 0102 	orr.w	r1, r3, r2
 80236f6:	9b04      	ldr	r3, [sp, #16]
 80236f8:	430b      	orrs	r3, r1
 80236fa:	464d      	mov	r5, r9
 80236fc:	d10f      	bne.n	802371e <_dtoa_r+0xa66>
 80236fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023702:	d02a      	beq.n	802375a <_dtoa_r+0xaa2>
 8023704:	9b03      	ldr	r3, [sp, #12]
 8023706:	2b00      	cmp	r3, #0
 8023708:	dd02      	ble.n	8023710 <_dtoa_r+0xa58>
 802370a:	9b02      	ldr	r3, [sp, #8]
 802370c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8023710:	f88b a000 	strb.w	sl, [fp]
 8023714:	e775      	b.n	8023602 <_dtoa_r+0x94a>
 8023716:	4638      	mov	r0, r7
 8023718:	e7ba      	b.n	8023690 <_dtoa_r+0x9d8>
 802371a:	2201      	movs	r2, #1
 802371c:	e7e2      	b.n	80236e4 <_dtoa_r+0xa2c>
 802371e:	9b03      	ldr	r3, [sp, #12]
 8023720:	2b00      	cmp	r3, #0
 8023722:	db04      	blt.n	802372e <_dtoa_r+0xa76>
 8023724:	9906      	ldr	r1, [sp, #24]
 8023726:	430b      	orrs	r3, r1
 8023728:	9904      	ldr	r1, [sp, #16]
 802372a:	430b      	orrs	r3, r1
 802372c:	d122      	bne.n	8023774 <_dtoa_r+0xabc>
 802372e:	2a00      	cmp	r2, #0
 8023730:	ddee      	ble.n	8023710 <_dtoa_r+0xa58>
 8023732:	ee18 1a10 	vmov	r1, s16
 8023736:	2201      	movs	r2, #1
 8023738:	4620      	mov	r0, r4
 802373a:	f000 fce9 	bl	8024110 <__lshift>
 802373e:	4631      	mov	r1, r6
 8023740:	ee08 0a10 	vmov	s16, r0
 8023744:	f000 fd54 	bl	80241f0 <__mcmp>
 8023748:	2800      	cmp	r0, #0
 802374a:	dc03      	bgt.n	8023754 <_dtoa_r+0xa9c>
 802374c:	d1e0      	bne.n	8023710 <_dtoa_r+0xa58>
 802374e:	f01a 0f01 	tst.w	sl, #1
 8023752:	d0dd      	beq.n	8023710 <_dtoa_r+0xa58>
 8023754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023758:	d1d7      	bne.n	802370a <_dtoa_r+0xa52>
 802375a:	2339      	movs	r3, #57	; 0x39
 802375c:	f88b 3000 	strb.w	r3, [fp]
 8023760:	462b      	mov	r3, r5
 8023762:	461d      	mov	r5, r3
 8023764:	3b01      	subs	r3, #1
 8023766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802376a:	2a39      	cmp	r2, #57	; 0x39
 802376c:	d071      	beq.n	8023852 <_dtoa_r+0xb9a>
 802376e:	3201      	adds	r2, #1
 8023770:	701a      	strb	r2, [r3, #0]
 8023772:	e746      	b.n	8023602 <_dtoa_r+0x94a>
 8023774:	2a00      	cmp	r2, #0
 8023776:	dd07      	ble.n	8023788 <_dtoa_r+0xad0>
 8023778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802377c:	d0ed      	beq.n	802375a <_dtoa_r+0xaa2>
 802377e:	f10a 0301 	add.w	r3, sl, #1
 8023782:	f88b 3000 	strb.w	r3, [fp]
 8023786:	e73c      	b.n	8023602 <_dtoa_r+0x94a>
 8023788:	9b05      	ldr	r3, [sp, #20]
 802378a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802378e:	4599      	cmp	r9, r3
 8023790:	d047      	beq.n	8023822 <_dtoa_r+0xb6a>
 8023792:	ee18 1a10 	vmov	r1, s16
 8023796:	2300      	movs	r3, #0
 8023798:	220a      	movs	r2, #10
 802379a:	4620      	mov	r0, r4
 802379c:	f000 fb08 	bl	8023db0 <__multadd>
 80237a0:	45b8      	cmp	r8, r7
 80237a2:	ee08 0a10 	vmov	s16, r0
 80237a6:	f04f 0300 	mov.w	r3, #0
 80237aa:	f04f 020a 	mov.w	r2, #10
 80237ae:	4641      	mov	r1, r8
 80237b0:	4620      	mov	r0, r4
 80237b2:	d106      	bne.n	80237c2 <_dtoa_r+0xb0a>
 80237b4:	f000 fafc 	bl	8023db0 <__multadd>
 80237b8:	4680      	mov	r8, r0
 80237ba:	4607      	mov	r7, r0
 80237bc:	f109 0901 	add.w	r9, r9, #1
 80237c0:	e772      	b.n	80236a8 <_dtoa_r+0x9f0>
 80237c2:	f000 faf5 	bl	8023db0 <__multadd>
 80237c6:	4639      	mov	r1, r7
 80237c8:	4680      	mov	r8, r0
 80237ca:	2300      	movs	r3, #0
 80237cc:	220a      	movs	r2, #10
 80237ce:	4620      	mov	r0, r4
 80237d0:	f000 faee 	bl	8023db0 <__multadd>
 80237d4:	4607      	mov	r7, r0
 80237d6:	e7f1      	b.n	80237bc <_dtoa_r+0xb04>
 80237d8:	9b03      	ldr	r3, [sp, #12]
 80237da:	9302      	str	r3, [sp, #8]
 80237dc:	9d01      	ldr	r5, [sp, #4]
 80237de:	ee18 0a10 	vmov	r0, s16
 80237e2:	4631      	mov	r1, r6
 80237e4:	f7ff f9dc 	bl	8022ba0 <quorem>
 80237e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80237ec:	9b01      	ldr	r3, [sp, #4]
 80237ee:	f805 ab01 	strb.w	sl, [r5], #1
 80237f2:	1aea      	subs	r2, r5, r3
 80237f4:	9b02      	ldr	r3, [sp, #8]
 80237f6:	4293      	cmp	r3, r2
 80237f8:	dd09      	ble.n	802380e <_dtoa_r+0xb56>
 80237fa:	ee18 1a10 	vmov	r1, s16
 80237fe:	2300      	movs	r3, #0
 8023800:	220a      	movs	r2, #10
 8023802:	4620      	mov	r0, r4
 8023804:	f000 fad4 	bl	8023db0 <__multadd>
 8023808:	ee08 0a10 	vmov	s16, r0
 802380c:	e7e7      	b.n	80237de <_dtoa_r+0xb26>
 802380e:	9b02      	ldr	r3, [sp, #8]
 8023810:	2b00      	cmp	r3, #0
 8023812:	bfc8      	it	gt
 8023814:	461d      	movgt	r5, r3
 8023816:	9b01      	ldr	r3, [sp, #4]
 8023818:	bfd8      	it	le
 802381a:	2501      	movle	r5, #1
 802381c:	441d      	add	r5, r3
 802381e:	f04f 0800 	mov.w	r8, #0
 8023822:	ee18 1a10 	vmov	r1, s16
 8023826:	2201      	movs	r2, #1
 8023828:	4620      	mov	r0, r4
 802382a:	f000 fc71 	bl	8024110 <__lshift>
 802382e:	4631      	mov	r1, r6
 8023830:	ee08 0a10 	vmov	s16, r0
 8023834:	f000 fcdc 	bl	80241f0 <__mcmp>
 8023838:	2800      	cmp	r0, #0
 802383a:	dc91      	bgt.n	8023760 <_dtoa_r+0xaa8>
 802383c:	d102      	bne.n	8023844 <_dtoa_r+0xb8c>
 802383e:	f01a 0f01 	tst.w	sl, #1
 8023842:	d18d      	bne.n	8023760 <_dtoa_r+0xaa8>
 8023844:	462b      	mov	r3, r5
 8023846:	461d      	mov	r5, r3
 8023848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802384c:	2a30      	cmp	r2, #48	; 0x30
 802384e:	d0fa      	beq.n	8023846 <_dtoa_r+0xb8e>
 8023850:	e6d7      	b.n	8023602 <_dtoa_r+0x94a>
 8023852:	9a01      	ldr	r2, [sp, #4]
 8023854:	429a      	cmp	r2, r3
 8023856:	d184      	bne.n	8023762 <_dtoa_r+0xaaa>
 8023858:	9b00      	ldr	r3, [sp, #0]
 802385a:	3301      	adds	r3, #1
 802385c:	9300      	str	r3, [sp, #0]
 802385e:	2331      	movs	r3, #49	; 0x31
 8023860:	7013      	strb	r3, [r2, #0]
 8023862:	e6ce      	b.n	8023602 <_dtoa_r+0x94a>
 8023864:	4b09      	ldr	r3, [pc, #36]	; (802388c <_dtoa_r+0xbd4>)
 8023866:	f7ff ba95 	b.w	8022d94 <_dtoa_r+0xdc>
 802386a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802386c:	2b00      	cmp	r3, #0
 802386e:	f47f aa6e 	bne.w	8022d4e <_dtoa_r+0x96>
 8023872:	4b07      	ldr	r3, [pc, #28]	; (8023890 <_dtoa_r+0xbd8>)
 8023874:	f7ff ba8e 	b.w	8022d94 <_dtoa_r+0xdc>
 8023878:	9b02      	ldr	r3, [sp, #8]
 802387a:	2b00      	cmp	r3, #0
 802387c:	dcae      	bgt.n	80237dc <_dtoa_r+0xb24>
 802387e:	9b06      	ldr	r3, [sp, #24]
 8023880:	2b02      	cmp	r3, #2
 8023882:	f73f aea8 	bgt.w	80235d6 <_dtoa_r+0x91e>
 8023886:	e7a9      	b.n	80237dc <_dtoa_r+0xb24>
 8023888:	0802665b 	.word	0x0802665b
 802388c:	080265b8 	.word	0x080265b8
 8023890:	080265dc 	.word	0x080265dc

08023894 <__sflush_r>:
 8023894:	898a      	ldrh	r2, [r1, #12]
 8023896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802389a:	4605      	mov	r5, r0
 802389c:	0710      	lsls	r0, r2, #28
 802389e:	460c      	mov	r4, r1
 80238a0:	d458      	bmi.n	8023954 <__sflush_r+0xc0>
 80238a2:	684b      	ldr	r3, [r1, #4]
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	dc05      	bgt.n	80238b4 <__sflush_r+0x20>
 80238a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	dc02      	bgt.n	80238b4 <__sflush_r+0x20>
 80238ae:	2000      	movs	r0, #0
 80238b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80238b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80238b6:	2e00      	cmp	r6, #0
 80238b8:	d0f9      	beq.n	80238ae <__sflush_r+0x1a>
 80238ba:	2300      	movs	r3, #0
 80238bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80238c0:	682f      	ldr	r7, [r5, #0]
 80238c2:	602b      	str	r3, [r5, #0]
 80238c4:	d032      	beq.n	802392c <__sflush_r+0x98>
 80238c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80238c8:	89a3      	ldrh	r3, [r4, #12]
 80238ca:	075a      	lsls	r2, r3, #29
 80238cc:	d505      	bpl.n	80238da <__sflush_r+0x46>
 80238ce:	6863      	ldr	r3, [r4, #4]
 80238d0:	1ac0      	subs	r0, r0, r3
 80238d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80238d4:	b10b      	cbz	r3, 80238da <__sflush_r+0x46>
 80238d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80238d8:	1ac0      	subs	r0, r0, r3
 80238da:	2300      	movs	r3, #0
 80238dc:	4602      	mov	r2, r0
 80238de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80238e0:	6a21      	ldr	r1, [r4, #32]
 80238e2:	4628      	mov	r0, r5
 80238e4:	47b0      	blx	r6
 80238e6:	1c43      	adds	r3, r0, #1
 80238e8:	89a3      	ldrh	r3, [r4, #12]
 80238ea:	d106      	bne.n	80238fa <__sflush_r+0x66>
 80238ec:	6829      	ldr	r1, [r5, #0]
 80238ee:	291d      	cmp	r1, #29
 80238f0:	d82c      	bhi.n	802394c <__sflush_r+0xb8>
 80238f2:	4a2a      	ldr	r2, [pc, #168]	; (802399c <__sflush_r+0x108>)
 80238f4:	40ca      	lsrs	r2, r1
 80238f6:	07d6      	lsls	r6, r2, #31
 80238f8:	d528      	bpl.n	802394c <__sflush_r+0xb8>
 80238fa:	2200      	movs	r2, #0
 80238fc:	6062      	str	r2, [r4, #4]
 80238fe:	04d9      	lsls	r1, r3, #19
 8023900:	6922      	ldr	r2, [r4, #16]
 8023902:	6022      	str	r2, [r4, #0]
 8023904:	d504      	bpl.n	8023910 <__sflush_r+0x7c>
 8023906:	1c42      	adds	r2, r0, #1
 8023908:	d101      	bne.n	802390e <__sflush_r+0x7a>
 802390a:	682b      	ldr	r3, [r5, #0]
 802390c:	b903      	cbnz	r3, 8023910 <__sflush_r+0x7c>
 802390e:	6560      	str	r0, [r4, #84]	; 0x54
 8023910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023912:	602f      	str	r7, [r5, #0]
 8023914:	2900      	cmp	r1, #0
 8023916:	d0ca      	beq.n	80238ae <__sflush_r+0x1a>
 8023918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802391c:	4299      	cmp	r1, r3
 802391e:	d002      	beq.n	8023926 <__sflush_r+0x92>
 8023920:	4628      	mov	r0, r5
 8023922:	f000 fd7d 	bl	8024420 <_free_r>
 8023926:	2000      	movs	r0, #0
 8023928:	6360      	str	r0, [r4, #52]	; 0x34
 802392a:	e7c1      	b.n	80238b0 <__sflush_r+0x1c>
 802392c:	6a21      	ldr	r1, [r4, #32]
 802392e:	2301      	movs	r3, #1
 8023930:	4628      	mov	r0, r5
 8023932:	47b0      	blx	r6
 8023934:	1c41      	adds	r1, r0, #1
 8023936:	d1c7      	bne.n	80238c8 <__sflush_r+0x34>
 8023938:	682b      	ldr	r3, [r5, #0]
 802393a:	2b00      	cmp	r3, #0
 802393c:	d0c4      	beq.n	80238c8 <__sflush_r+0x34>
 802393e:	2b1d      	cmp	r3, #29
 8023940:	d001      	beq.n	8023946 <__sflush_r+0xb2>
 8023942:	2b16      	cmp	r3, #22
 8023944:	d101      	bne.n	802394a <__sflush_r+0xb6>
 8023946:	602f      	str	r7, [r5, #0]
 8023948:	e7b1      	b.n	80238ae <__sflush_r+0x1a>
 802394a:	89a3      	ldrh	r3, [r4, #12]
 802394c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023950:	81a3      	strh	r3, [r4, #12]
 8023952:	e7ad      	b.n	80238b0 <__sflush_r+0x1c>
 8023954:	690f      	ldr	r7, [r1, #16]
 8023956:	2f00      	cmp	r7, #0
 8023958:	d0a9      	beq.n	80238ae <__sflush_r+0x1a>
 802395a:	0793      	lsls	r3, r2, #30
 802395c:	680e      	ldr	r6, [r1, #0]
 802395e:	bf08      	it	eq
 8023960:	694b      	ldreq	r3, [r1, #20]
 8023962:	600f      	str	r7, [r1, #0]
 8023964:	bf18      	it	ne
 8023966:	2300      	movne	r3, #0
 8023968:	eba6 0807 	sub.w	r8, r6, r7
 802396c:	608b      	str	r3, [r1, #8]
 802396e:	f1b8 0f00 	cmp.w	r8, #0
 8023972:	dd9c      	ble.n	80238ae <__sflush_r+0x1a>
 8023974:	6a21      	ldr	r1, [r4, #32]
 8023976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023978:	4643      	mov	r3, r8
 802397a:	463a      	mov	r2, r7
 802397c:	4628      	mov	r0, r5
 802397e:	47b0      	blx	r6
 8023980:	2800      	cmp	r0, #0
 8023982:	dc06      	bgt.n	8023992 <__sflush_r+0xfe>
 8023984:	89a3      	ldrh	r3, [r4, #12]
 8023986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802398a:	81a3      	strh	r3, [r4, #12]
 802398c:	f04f 30ff 	mov.w	r0, #4294967295
 8023990:	e78e      	b.n	80238b0 <__sflush_r+0x1c>
 8023992:	4407      	add	r7, r0
 8023994:	eba8 0800 	sub.w	r8, r8, r0
 8023998:	e7e9      	b.n	802396e <__sflush_r+0xda>
 802399a:	bf00      	nop
 802399c:	20400001 	.word	0x20400001

080239a0 <_fflush_r>:
 80239a0:	b538      	push	{r3, r4, r5, lr}
 80239a2:	690b      	ldr	r3, [r1, #16]
 80239a4:	4605      	mov	r5, r0
 80239a6:	460c      	mov	r4, r1
 80239a8:	b913      	cbnz	r3, 80239b0 <_fflush_r+0x10>
 80239aa:	2500      	movs	r5, #0
 80239ac:	4628      	mov	r0, r5
 80239ae:	bd38      	pop	{r3, r4, r5, pc}
 80239b0:	b118      	cbz	r0, 80239ba <_fflush_r+0x1a>
 80239b2:	6983      	ldr	r3, [r0, #24]
 80239b4:	b90b      	cbnz	r3, 80239ba <_fflush_r+0x1a>
 80239b6:	f000 f887 	bl	8023ac8 <__sinit>
 80239ba:	4b14      	ldr	r3, [pc, #80]	; (8023a0c <_fflush_r+0x6c>)
 80239bc:	429c      	cmp	r4, r3
 80239be:	d11b      	bne.n	80239f8 <_fflush_r+0x58>
 80239c0:	686c      	ldr	r4, [r5, #4]
 80239c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d0ef      	beq.n	80239aa <_fflush_r+0xa>
 80239ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80239cc:	07d0      	lsls	r0, r2, #31
 80239ce:	d404      	bmi.n	80239da <_fflush_r+0x3a>
 80239d0:	0599      	lsls	r1, r3, #22
 80239d2:	d402      	bmi.n	80239da <_fflush_r+0x3a>
 80239d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80239d6:	f000 f91a 	bl	8023c0e <__retarget_lock_acquire_recursive>
 80239da:	4628      	mov	r0, r5
 80239dc:	4621      	mov	r1, r4
 80239de:	f7ff ff59 	bl	8023894 <__sflush_r>
 80239e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80239e4:	07da      	lsls	r2, r3, #31
 80239e6:	4605      	mov	r5, r0
 80239e8:	d4e0      	bmi.n	80239ac <_fflush_r+0xc>
 80239ea:	89a3      	ldrh	r3, [r4, #12]
 80239ec:	059b      	lsls	r3, r3, #22
 80239ee:	d4dd      	bmi.n	80239ac <_fflush_r+0xc>
 80239f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80239f2:	f000 f90d 	bl	8023c10 <__retarget_lock_release_recursive>
 80239f6:	e7d9      	b.n	80239ac <_fflush_r+0xc>
 80239f8:	4b05      	ldr	r3, [pc, #20]	; (8023a10 <_fflush_r+0x70>)
 80239fa:	429c      	cmp	r4, r3
 80239fc:	d101      	bne.n	8023a02 <_fflush_r+0x62>
 80239fe:	68ac      	ldr	r4, [r5, #8]
 8023a00:	e7df      	b.n	80239c2 <_fflush_r+0x22>
 8023a02:	4b04      	ldr	r3, [pc, #16]	; (8023a14 <_fflush_r+0x74>)
 8023a04:	429c      	cmp	r4, r3
 8023a06:	bf08      	it	eq
 8023a08:	68ec      	ldreq	r4, [r5, #12]
 8023a0a:	e7da      	b.n	80239c2 <_fflush_r+0x22>
 8023a0c:	0802668c 	.word	0x0802668c
 8023a10:	080266ac 	.word	0x080266ac
 8023a14:	0802666c 	.word	0x0802666c

08023a18 <std>:
 8023a18:	2300      	movs	r3, #0
 8023a1a:	b510      	push	{r4, lr}
 8023a1c:	4604      	mov	r4, r0
 8023a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8023a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023a26:	6083      	str	r3, [r0, #8]
 8023a28:	8181      	strh	r1, [r0, #12]
 8023a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8023a2c:	81c2      	strh	r2, [r0, #14]
 8023a2e:	6183      	str	r3, [r0, #24]
 8023a30:	4619      	mov	r1, r3
 8023a32:	2208      	movs	r2, #8
 8023a34:	305c      	adds	r0, #92	; 0x5c
 8023a36:	f7fe fadd 	bl	8021ff4 <memset>
 8023a3a:	4b05      	ldr	r3, [pc, #20]	; (8023a50 <std+0x38>)
 8023a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8023a3e:	4b05      	ldr	r3, [pc, #20]	; (8023a54 <std+0x3c>)
 8023a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8023a42:	4b05      	ldr	r3, [pc, #20]	; (8023a58 <std+0x40>)
 8023a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023a46:	4b05      	ldr	r3, [pc, #20]	; (8023a5c <std+0x44>)
 8023a48:	6224      	str	r4, [r4, #32]
 8023a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8023a4c:	bd10      	pop	{r4, pc}
 8023a4e:	bf00      	nop
 8023a50:	08024945 	.word	0x08024945
 8023a54:	08024967 	.word	0x08024967
 8023a58:	0802499f 	.word	0x0802499f
 8023a5c:	080249c3 	.word	0x080249c3

08023a60 <_cleanup_r>:
 8023a60:	4901      	ldr	r1, [pc, #4]	; (8023a68 <_cleanup_r+0x8>)
 8023a62:	f000 b8af 	b.w	8023bc4 <_fwalk_reent>
 8023a66:	bf00      	nop
 8023a68:	080239a1 	.word	0x080239a1

08023a6c <__sfmoreglue>:
 8023a6c:	b570      	push	{r4, r5, r6, lr}
 8023a6e:	2268      	movs	r2, #104	; 0x68
 8023a70:	1e4d      	subs	r5, r1, #1
 8023a72:	4355      	muls	r5, r2
 8023a74:	460e      	mov	r6, r1
 8023a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023a7a:	f000 fd3d 	bl	80244f8 <_malloc_r>
 8023a7e:	4604      	mov	r4, r0
 8023a80:	b140      	cbz	r0, 8023a94 <__sfmoreglue+0x28>
 8023a82:	2100      	movs	r1, #0
 8023a84:	e9c0 1600 	strd	r1, r6, [r0]
 8023a88:	300c      	adds	r0, #12
 8023a8a:	60a0      	str	r0, [r4, #8]
 8023a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023a90:	f7fe fab0 	bl	8021ff4 <memset>
 8023a94:	4620      	mov	r0, r4
 8023a96:	bd70      	pop	{r4, r5, r6, pc}

08023a98 <__sfp_lock_acquire>:
 8023a98:	4801      	ldr	r0, [pc, #4]	; (8023aa0 <__sfp_lock_acquire+0x8>)
 8023a9a:	f000 b8b8 	b.w	8023c0e <__retarget_lock_acquire_recursive>
 8023a9e:	bf00      	nop
 8023aa0:	2000fdd1 	.word	0x2000fdd1

08023aa4 <__sfp_lock_release>:
 8023aa4:	4801      	ldr	r0, [pc, #4]	; (8023aac <__sfp_lock_release+0x8>)
 8023aa6:	f000 b8b3 	b.w	8023c10 <__retarget_lock_release_recursive>
 8023aaa:	bf00      	nop
 8023aac:	2000fdd1 	.word	0x2000fdd1

08023ab0 <__sinit_lock_acquire>:
 8023ab0:	4801      	ldr	r0, [pc, #4]	; (8023ab8 <__sinit_lock_acquire+0x8>)
 8023ab2:	f000 b8ac 	b.w	8023c0e <__retarget_lock_acquire_recursive>
 8023ab6:	bf00      	nop
 8023ab8:	2000fdd2 	.word	0x2000fdd2

08023abc <__sinit_lock_release>:
 8023abc:	4801      	ldr	r0, [pc, #4]	; (8023ac4 <__sinit_lock_release+0x8>)
 8023abe:	f000 b8a7 	b.w	8023c10 <__retarget_lock_release_recursive>
 8023ac2:	bf00      	nop
 8023ac4:	2000fdd2 	.word	0x2000fdd2

08023ac8 <__sinit>:
 8023ac8:	b510      	push	{r4, lr}
 8023aca:	4604      	mov	r4, r0
 8023acc:	f7ff fff0 	bl	8023ab0 <__sinit_lock_acquire>
 8023ad0:	69a3      	ldr	r3, [r4, #24]
 8023ad2:	b11b      	cbz	r3, 8023adc <__sinit+0x14>
 8023ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ad8:	f7ff bff0 	b.w	8023abc <__sinit_lock_release>
 8023adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8023ae2:	4b13      	ldr	r3, [pc, #76]	; (8023b30 <__sinit+0x68>)
 8023ae4:	4a13      	ldr	r2, [pc, #76]	; (8023b34 <__sinit+0x6c>)
 8023ae6:	681b      	ldr	r3, [r3, #0]
 8023ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8023aea:	42a3      	cmp	r3, r4
 8023aec:	bf04      	itt	eq
 8023aee:	2301      	moveq	r3, #1
 8023af0:	61a3      	streq	r3, [r4, #24]
 8023af2:	4620      	mov	r0, r4
 8023af4:	f000 f820 	bl	8023b38 <__sfp>
 8023af8:	6060      	str	r0, [r4, #4]
 8023afa:	4620      	mov	r0, r4
 8023afc:	f000 f81c 	bl	8023b38 <__sfp>
 8023b00:	60a0      	str	r0, [r4, #8]
 8023b02:	4620      	mov	r0, r4
 8023b04:	f000 f818 	bl	8023b38 <__sfp>
 8023b08:	2200      	movs	r2, #0
 8023b0a:	60e0      	str	r0, [r4, #12]
 8023b0c:	2104      	movs	r1, #4
 8023b0e:	6860      	ldr	r0, [r4, #4]
 8023b10:	f7ff ff82 	bl	8023a18 <std>
 8023b14:	68a0      	ldr	r0, [r4, #8]
 8023b16:	2201      	movs	r2, #1
 8023b18:	2109      	movs	r1, #9
 8023b1a:	f7ff ff7d 	bl	8023a18 <std>
 8023b1e:	68e0      	ldr	r0, [r4, #12]
 8023b20:	2202      	movs	r2, #2
 8023b22:	2112      	movs	r1, #18
 8023b24:	f7ff ff78 	bl	8023a18 <std>
 8023b28:	2301      	movs	r3, #1
 8023b2a:	61a3      	str	r3, [r4, #24]
 8023b2c:	e7d2      	b.n	8023ad4 <__sinit+0xc>
 8023b2e:	bf00      	nop
 8023b30:	080265a4 	.word	0x080265a4
 8023b34:	08023a61 	.word	0x08023a61

08023b38 <__sfp>:
 8023b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b3a:	4607      	mov	r7, r0
 8023b3c:	f7ff ffac 	bl	8023a98 <__sfp_lock_acquire>
 8023b40:	4b1e      	ldr	r3, [pc, #120]	; (8023bbc <__sfp+0x84>)
 8023b42:	681e      	ldr	r6, [r3, #0]
 8023b44:	69b3      	ldr	r3, [r6, #24]
 8023b46:	b913      	cbnz	r3, 8023b4e <__sfp+0x16>
 8023b48:	4630      	mov	r0, r6
 8023b4a:	f7ff ffbd 	bl	8023ac8 <__sinit>
 8023b4e:	3648      	adds	r6, #72	; 0x48
 8023b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023b54:	3b01      	subs	r3, #1
 8023b56:	d503      	bpl.n	8023b60 <__sfp+0x28>
 8023b58:	6833      	ldr	r3, [r6, #0]
 8023b5a:	b30b      	cbz	r3, 8023ba0 <__sfp+0x68>
 8023b5c:	6836      	ldr	r6, [r6, #0]
 8023b5e:	e7f7      	b.n	8023b50 <__sfp+0x18>
 8023b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023b64:	b9d5      	cbnz	r5, 8023b9c <__sfp+0x64>
 8023b66:	4b16      	ldr	r3, [pc, #88]	; (8023bc0 <__sfp+0x88>)
 8023b68:	60e3      	str	r3, [r4, #12]
 8023b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8023b70:	f000 f84c 	bl	8023c0c <__retarget_lock_init_recursive>
 8023b74:	f7ff ff96 	bl	8023aa4 <__sfp_lock_release>
 8023b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023b80:	6025      	str	r5, [r4, #0]
 8023b82:	61a5      	str	r5, [r4, #24]
 8023b84:	2208      	movs	r2, #8
 8023b86:	4629      	mov	r1, r5
 8023b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023b8c:	f7fe fa32 	bl	8021ff4 <memset>
 8023b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023b98:	4620      	mov	r0, r4
 8023b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023b9c:	3468      	adds	r4, #104	; 0x68
 8023b9e:	e7d9      	b.n	8023b54 <__sfp+0x1c>
 8023ba0:	2104      	movs	r1, #4
 8023ba2:	4638      	mov	r0, r7
 8023ba4:	f7ff ff62 	bl	8023a6c <__sfmoreglue>
 8023ba8:	4604      	mov	r4, r0
 8023baa:	6030      	str	r0, [r6, #0]
 8023bac:	2800      	cmp	r0, #0
 8023bae:	d1d5      	bne.n	8023b5c <__sfp+0x24>
 8023bb0:	f7ff ff78 	bl	8023aa4 <__sfp_lock_release>
 8023bb4:	230c      	movs	r3, #12
 8023bb6:	603b      	str	r3, [r7, #0]
 8023bb8:	e7ee      	b.n	8023b98 <__sfp+0x60>
 8023bba:	bf00      	nop
 8023bbc:	080265a4 	.word	0x080265a4
 8023bc0:	ffff0001 	.word	0xffff0001

08023bc4 <_fwalk_reent>:
 8023bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023bc8:	4606      	mov	r6, r0
 8023bca:	4688      	mov	r8, r1
 8023bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023bd0:	2700      	movs	r7, #0
 8023bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8023bda:	d505      	bpl.n	8023be8 <_fwalk_reent+0x24>
 8023bdc:	6824      	ldr	r4, [r4, #0]
 8023bde:	2c00      	cmp	r4, #0
 8023be0:	d1f7      	bne.n	8023bd2 <_fwalk_reent+0xe>
 8023be2:	4638      	mov	r0, r7
 8023be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023be8:	89ab      	ldrh	r3, [r5, #12]
 8023bea:	2b01      	cmp	r3, #1
 8023bec:	d907      	bls.n	8023bfe <_fwalk_reent+0x3a>
 8023bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023bf2:	3301      	adds	r3, #1
 8023bf4:	d003      	beq.n	8023bfe <_fwalk_reent+0x3a>
 8023bf6:	4629      	mov	r1, r5
 8023bf8:	4630      	mov	r0, r6
 8023bfa:	47c0      	blx	r8
 8023bfc:	4307      	orrs	r7, r0
 8023bfe:	3568      	adds	r5, #104	; 0x68
 8023c00:	e7e9      	b.n	8023bd6 <_fwalk_reent+0x12>
	...

08023c04 <_localeconv_r>:
 8023c04:	4800      	ldr	r0, [pc, #0]	; (8023c08 <_localeconv_r+0x4>)
 8023c06:	4770      	bx	lr
 8023c08:	20000180 	.word	0x20000180

08023c0c <__retarget_lock_init_recursive>:
 8023c0c:	4770      	bx	lr

08023c0e <__retarget_lock_acquire_recursive>:
 8023c0e:	4770      	bx	lr

08023c10 <__retarget_lock_release_recursive>:
 8023c10:	4770      	bx	lr

08023c12 <__swhatbuf_r>:
 8023c12:	b570      	push	{r4, r5, r6, lr}
 8023c14:	460e      	mov	r6, r1
 8023c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c1a:	2900      	cmp	r1, #0
 8023c1c:	b096      	sub	sp, #88	; 0x58
 8023c1e:	4614      	mov	r4, r2
 8023c20:	461d      	mov	r5, r3
 8023c22:	da08      	bge.n	8023c36 <__swhatbuf_r+0x24>
 8023c24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023c28:	2200      	movs	r2, #0
 8023c2a:	602a      	str	r2, [r5, #0]
 8023c2c:	061a      	lsls	r2, r3, #24
 8023c2e:	d410      	bmi.n	8023c52 <__swhatbuf_r+0x40>
 8023c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023c34:	e00e      	b.n	8023c54 <__swhatbuf_r+0x42>
 8023c36:	466a      	mov	r2, sp
 8023c38:	f000 ff1a 	bl	8024a70 <_fstat_r>
 8023c3c:	2800      	cmp	r0, #0
 8023c3e:	dbf1      	blt.n	8023c24 <__swhatbuf_r+0x12>
 8023c40:	9a01      	ldr	r2, [sp, #4]
 8023c42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023c46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023c4a:	425a      	negs	r2, r3
 8023c4c:	415a      	adcs	r2, r3
 8023c4e:	602a      	str	r2, [r5, #0]
 8023c50:	e7ee      	b.n	8023c30 <__swhatbuf_r+0x1e>
 8023c52:	2340      	movs	r3, #64	; 0x40
 8023c54:	2000      	movs	r0, #0
 8023c56:	6023      	str	r3, [r4, #0]
 8023c58:	b016      	add	sp, #88	; 0x58
 8023c5a:	bd70      	pop	{r4, r5, r6, pc}

08023c5c <__smakebuf_r>:
 8023c5c:	898b      	ldrh	r3, [r1, #12]
 8023c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023c60:	079d      	lsls	r5, r3, #30
 8023c62:	4606      	mov	r6, r0
 8023c64:	460c      	mov	r4, r1
 8023c66:	d507      	bpl.n	8023c78 <__smakebuf_r+0x1c>
 8023c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023c6c:	6023      	str	r3, [r4, #0]
 8023c6e:	6123      	str	r3, [r4, #16]
 8023c70:	2301      	movs	r3, #1
 8023c72:	6163      	str	r3, [r4, #20]
 8023c74:	b002      	add	sp, #8
 8023c76:	bd70      	pop	{r4, r5, r6, pc}
 8023c78:	ab01      	add	r3, sp, #4
 8023c7a:	466a      	mov	r2, sp
 8023c7c:	f7ff ffc9 	bl	8023c12 <__swhatbuf_r>
 8023c80:	9900      	ldr	r1, [sp, #0]
 8023c82:	4605      	mov	r5, r0
 8023c84:	4630      	mov	r0, r6
 8023c86:	f000 fc37 	bl	80244f8 <_malloc_r>
 8023c8a:	b948      	cbnz	r0, 8023ca0 <__smakebuf_r+0x44>
 8023c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c90:	059a      	lsls	r2, r3, #22
 8023c92:	d4ef      	bmi.n	8023c74 <__smakebuf_r+0x18>
 8023c94:	f023 0303 	bic.w	r3, r3, #3
 8023c98:	f043 0302 	orr.w	r3, r3, #2
 8023c9c:	81a3      	strh	r3, [r4, #12]
 8023c9e:	e7e3      	b.n	8023c68 <__smakebuf_r+0xc>
 8023ca0:	4b0d      	ldr	r3, [pc, #52]	; (8023cd8 <__smakebuf_r+0x7c>)
 8023ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8023ca4:	89a3      	ldrh	r3, [r4, #12]
 8023ca6:	6020      	str	r0, [r4, #0]
 8023ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023cac:	81a3      	strh	r3, [r4, #12]
 8023cae:	9b00      	ldr	r3, [sp, #0]
 8023cb0:	6163      	str	r3, [r4, #20]
 8023cb2:	9b01      	ldr	r3, [sp, #4]
 8023cb4:	6120      	str	r0, [r4, #16]
 8023cb6:	b15b      	cbz	r3, 8023cd0 <__smakebuf_r+0x74>
 8023cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023cbc:	4630      	mov	r0, r6
 8023cbe:	f000 fee9 	bl	8024a94 <_isatty_r>
 8023cc2:	b128      	cbz	r0, 8023cd0 <__smakebuf_r+0x74>
 8023cc4:	89a3      	ldrh	r3, [r4, #12]
 8023cc6:	f023 0303 	bic.w	r3, r3, #3
 8023cca:	f043 0301 	orr.w	r3, r3, #1
 8023cce:	81a3      	strh	r3, [r4, #12]
 8023cd0:	89a0      	ldrh	r0, [r4, #12]
 8023cd2:	4305      	orrs	r5, r0
 8023cd4:	81a5      	strh	r5, [r4, #12]
 8023cd6:	e7cd      	b.n	8023c74 <__smakebuf_r+0x18>
 8023cd8:	08023a61 	.word	0x08023a61

08023cdc <malloc>:
 8023cdc:	4b02      	ldr	r3, [pc, #8]	; (8023ce8 <malloc+0xc>)
 8023cde:	4601      	mov	r1, r0
 8023ce0:	6818      	ldr	r0, [r3, #0]
 8023ce2:	f000 bc09 	b.w	80244f8 <_malloc_r>
 8023ce6:	bf00      	nop
 8023ce8:	2000002c 	.word	0x2000002c

08023cec <_Balloc>:
 8023cec:	b570      	push	{r4, r5, r6, lr}
 8023cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023cf0:	4604      	mov	r4, r0
 8023cf2:	460d      	mov	r5, r1
 8023cf4:	b976      	cbnz	r6, 8023d14 <_Balloc+0x28>
 8023cf6:	2010      	movs	r0, #16
 8023cf8:	f7ff fff0 	bl	8023cdc <malloc>
 8023cfc:	4602      	mov	r2, r0
 8023cfe:	6260      	str	r0, [r4, #36]	; 0x24
 8023d00:	b920      	cbnz	r0, 8023d0c <_Balloc+0x20>
 8023d02:	4b18      	ldr	r3, [pc, #96]	; (8023d64 <_Balloc+0x78>)
 8023d04:	4818      	ldr	r0, [pc, #96]	; (8023d68 <_Balloc+0x7c>)
 8023d06:	2166      	movs	r1, #102	; 0x66
 8023d08:	f000 fe72 	bl	80249f0 <__assert_func>
 8023d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023d10:	6006      	str	r6, [r0, #0]
 8023d12:	60c6      	str	r6, [r0, #12]
 8023d14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023d16:	68f3      	ldr	r3, [r6, #12]
 8023d18:	b183      	cbz	r3, 8023d3c <_Balloc+0x50>
 8023d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d1c:	68db      	ldr	r3, [r3, #12]
 8023d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023d22:	b9b8      	cbnz	r0, 8023d54 <_Balloc+0x68>
 8023d24:	2101      	movs	r1, #1
 8023d26:	fa01 f605 	lsl.w	r6, r1, r5
 8023d2a:	1d72      	adds	r2, r6, #5
 8023d2c:	0092      	lsls	r2, r2, #2
 8023d2e:	4620      	mov	r0, r4
 8023d30:	f000 fb60 	bl	80243f4 <_calloc_r>
 8023d34:	b160      	cbz	r0, 8023d50 <_Balloc+0x64>
 8023d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023d3a:	e00e      	b.n	8023d5a <_Balloc+0x6e>
 8023d3c:	2221      	movs	r2, #33	; 0x21
 8023d3e:	2104      	movs	r1, #4
 8023d40:	4620      	mov	r0, r4
 8023d42:	f000 fb57 	bl	80243f4 <_calloc_r>
 8023d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023d48:	60f0      	str	r0, [r6, #12]
 8023d4a:	68db      	ldr	r3, [r3, #12]
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d1e4      	bne.n	8023d1a <_Balloc+0x2e>
 8023d50:	2000      	movs	r0, #0
 8023d52:	bd70      	pop	{r4, r5, r6, pc}
 8023d54:	6802      	ldr	r2, [r0, #0]
 8023d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023d5a:	2300      	movs	r3, #0
 8023d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023d60:	e7f7      	b.n	8023d52 <_Balloc+0x66>
 8023d62:	bf00      	nop
 8023d64:	080265e9 	.word	0x080265e9
 8023d68:	080266cc 	.word	0x080266cc

08023d6c <_Bfree>:
 8023d6c:	b570      	push	{r4, r5, r6, lr}
 8023d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023d70:	4605      	mov	r5, r0
 8023d72:	460c      	mov	r4, r1
 8023d74:	b976      	cbnz	r6, 8023d94 <_Bfree+0x28>
 8023d76:	2010      	movs	r0, #16
 8023d78:	f7ff ffb0 	bl	8023cdc <malloc>
 8023d7c:	4602      	mov	r2, r0
 8023d7e:	6268      	str	r0, [r5, #36]	; 0x24
 8023d80:	b920      	cbnz	r0, 8023d8c <_Bfree+0x20>
 8023d82:	4b09      	ldr	r3, [pc, #36]	; (8023da8 <_Bfree+0x3c>)
 8023d84:	4809      	ldr	r0, [pc, #36]	; (8023dac <_Bfree+0x40>)
 8023d86:	218a      	movs	r1, #138	; 0x8a
 8023d88:	f000 fe32 	bl	80249f0 <__assert_func>
 8023d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023d90:	6006      	str	r6, [r0, #0]
 8023d92:	60c6      	str	r6, [r0, #12]
 8023d94:	b13c      	cbz	r4, 8023da6 <_Bfree+0x3a>
 8023d96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023d98:	6862      	ldr	r2, [r4, #4]
 8023d9a:	68db      	ldr	r3, [r3, #12]
 8023d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023da0:	6021      	str	r1, [r4, #0]
 8023da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023da6:	bd70      	pop	{r4, r5, r6, pc}
 8023da8:	080265e9 	.word	0x080265e9
 8023dac:	080266cc 	.word	0x080266cc

08023db0 <__multadd>:
 8023db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023db4:	690d      	ldr	r5, [r1, #16]
 8023db6:	4607      	mov	r7, r0
 8023db8:	460c      	mov	r4, r1
 8023dba:	461e      	mov	r6, r3
 8023dbc:	f101 0c14 	add.w	ip, r1, #20
 8023dc0:	2000      	movs	r0, #0
 8023dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8023dc6:	b299      	uxth	r1, r3
 8023dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8023dcc:	0c1e      	lsrs	r6, r3, #16
 8023dce:	0c0b      	lsrs	r3, r1, #16
 8023dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8023dd4:	b289      	uxth	r1, r1
 8023dd6:	3001      	adds	r0, #1
 8023dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023ddc:	4285      	cmp	r5, r0
 8023dde:	f84c 1b04 	str.w	r1, [ip], #4
 8023de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023de6:	dcec      	bgt.n	8023dc2 <__multadd+0x12>
 8023de8:	b30e      	cbz	r6, 8023e2e <__multadd+0x7e>
 8023dea:	68a3      	ldr	r3, [r4, #8]
 8023dec:	42ab      	cmp	r3, r5
 8023dee:	dc19      	bgt.n	8023e24 <__multadd+0x74>
 8023df0:	6861      	ldr	r1, [r4, #4]
 8023df2:	4638      	mov	r0, r7
 8023df4:	3101      	adds	r1, #1
 8023df6:	f7ff ff79 	bl	8023cec <_Balloc>
 8023dfa:	4680      	mov	r8, r0
 8023dfc:	b928      	cbnz	r0, 8023e0a <__multadd+0x5a>
 8023dfe:	4602      	mov	r2, r0
 8023e00:	4b0c      	ldr	r3, [pc, #48]	; (8023e34 <__multadd+0x84>)
 8023e02:	480d      	ldr	r0, [pc, #52]	; (8023e38 <__multadd+0x88>)
 8023e04:	21b5      	movs	r1, #181	; 0xb5
 8023e06:	f000 fdf3 	bl	80249f0 <__assert_func>
 8023e0a:	6922      	ldr	r2, [r4, #16]
 8023e0c:	3202      	adds	r2, #2
 8023e0e:	f104 010c 	add.w	r1, r4, #12
 8023e12:	0092      	lsls	r2, r2, #2
 8023e14:	300c      	adds	r0, #12
 8023e16:	f7fe f8df 	bl	8021fd8 <memcpy>
 8023e1a:	4621      	mov	r1, r4
 8023e1c:	4638      	mov	r0, r7
 8023e1e:	f7ff ffa5 	bl	8023d6c <_Bfree>
 8023e22:	4644      	mov	r4, r8
 8023e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023e28:	3501      	adds	r5, #1
 8023e2a:	615e      	str	r6, [r3, #20]
 8023e2c:	6125      	str	r5, [r4, #16]
 8023e2e:	4620      	mov	r0, r4
 8023e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e34:	0802665b 	.word	0x0802665b
 8023e38:	080266cc 	.word	0x080266cc

08023e3c <__hi0bits>:
 8023e3c:	0c03      	lsrs	r3, r0, #16
 8023e3e:	041b      	lsls	r3, r3, #16
 8023e40:	b9d3      	cbnz	r3, 8023e78 <__hi0bits+0x3c>
 8023e42:	0400      	lsls	r0, r0, #16
 8023e44:	2310      	movs	r3, #16
 8023e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023e4a:	bf04      	itt	eq
 8023e4c:	0200      	lsleq	r0, r0, #8
 8023e4e:	3308      	addeq	r3, #8
 8023e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023e54:	bf04      	itt	eq
 8023e56:	0100      	lsleq	r0, r0, #4
 8023e58:	3304      	addeq	r3, #4
 8023e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023e5e:	bf04      	itt	eq
 8023e60:	0080      	lsleq	r0, r0, #2
 8023e62:	3302      	addeq	r3, #2
 8023e64:	2800      	cmp	r0, #0
 8023e66:	db05      	blt.n	8023e74 <__hi0bits+0x38>
 8023e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023e6c:	f103 0301 	add.w	r3, r3, #1
 8023e70:	bf08      	it	eq
 8023e72:	2320      	moveq	r3, #32
 8023e74:	4618      	mov	r0, r3
 8023e76:	4770      	bx	lr
 8023e78:	2300      	movs	r3, #0
 8023e7a:	e7e4      	b.n	8023e46 <__hi0bits+0xa>

08023e7c <__lo0bits>:
 8023e7c:	6803      	ldr	r3, [r0, #0]
 8023e7e:	f013 0207 	ands.w	r2, r3, #7
 8023e82:	4601      	mov	r1, r0
 8023e84:	d00b      	beq.n	8023e9e <__lo0bits+0x22>
 8023e86:	07da      	lsls	r2, r3, #31
 8023e88:	d423      	bmi.n	8023ed2 <__lo0bits+0x56>
 8023e8a:	0798      	lsls	r0, r3, #30
 8023e8c:	bf49      	itett	mi
 8023e8e:	085b      	lsrmi	r3, r3, #1
 8023e90:	089b      	lsrpl	r3, r3, #2
 8023e92:	2001      	movmi	r0, #1
 8023e94:	600b      	strmi	r3, [r1, #0]
 8023e96:	bf5c      	itt	pl
 8023e98:	600b      	strpl	r3, [r1, #0]
 8023e9a:	2002      	movpl	r0, #2
 8023e9c:	4770      	bx	lr
 8023e9e:	b298      	uxth	r0, r3
 8023ea0:	b9a8      	cbnz	r0, 8023ece <__lo0bits+0x52>
 8023ea2:	0c1b      	lsrs	r3, r3, #16
 8023ea4:	2010      	movs	r0, #16
 8023ea6:	b2da      	uxtb	r2, r3
 8023ea8:	b90a      	cbnz	r2, 8023eae <__lo0bits+0x32>
 8023eaa:	3008      	adds	r0, #8
 8023eac:	0a1b      	lsrs	r3, r3, #8
 8023eae:	071a      	lsls	r2, r3, #28
 8023eb0:	bf04      	itt	eq
 8023eb2:	091b      	lsreq	r3, r3, #4
 8023eb4:	3004      	addeq	r0, #4
 8023eb6:	079a      	lsls	r2, r3, #30
 8023eb8:	bf04      	itt	eq
 8023eba:	089b      	lsreq	r3, r3, #2
 8023ebc:	3002      	addeq	r0, #2
 8023ebe:	07da      	lsls	r2, r3, #31
 8023ec0:	d403      	bmi.n	8023eca <__lo0bits+0x4e>
 8023ec2:	085b      	lsrs	r3, r3, #1
 8023ec4:	f100 0001 	add.w	r0, r0, #1
 8023ec8:	d005      	beq.n	8023ed6 <__lo0bits+0x5a>
 8023eca:	600b      	str	r3, [r1, #0]
 8023ecc:	4770      	bx	lr
 8023ece:	4610      	mov	r0, r2
 8023ed0:	e7e9      	b.n	8023ea6 <__lo0bits+0x2a>
 8023ed2:	2000      	movs	r0, #0
 8023ed4:	4770      	bx	lr
 8023ed6:	2020      	movs	r0, #32
 8023ed8:	4770      	bx	lr
	...

08023edc <__i2b>:
 8023edc:	b510      	push	{r4, lr}
 8023ede:	460c      	mov	r4, r1
 8023ee0:	2101      	movs	r1, #1
 8023ee2:	f7ff ff03 	bl	8023cec <_Balloc>
 8023ee6:	4602      	mov	r2, r0
 8023ee8:	b928      	cbnz	r0, 8023ef6 <__i2b+0x1a>
 8023eea:	4b05      	ldr	r3, [pc, #20]	; (8023f00 <__i2b+0x24>)
 8023eec:	4805      	ldr	r0, [pc, #20]	; (8023f04 <__i2b+0x28>)
 8023eee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023ef2:	f000 fd7d 	bl	80249f0 <__assert_func>
 8023ef6:	2301      	movs	r3, #1
 8023ef8:	6144      	str	r4, [r0, #20]
 8023efa:	6103      	str	r3, [r0, #16]
 8023efc:	bd10      	pop	{r4, pc}
 8023efe:	bf00      	nop
 8023f00:	0802665b 	.word	0x0802665b
 8023f04:	080266cc 	.word	0x080266cc

08023f08 <__multiply>:
 8023f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f0c:	4691      	mov	r9, r2
 8023f0e:	690a      	ldr	r2, [r1, #16]
 8023f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8023f14:	429a      	cmp	r2, r3
 8023f16:	bfb8      	it	lt
 8023f18:	460b      	movlt	r3, r1
 8023f1a:	460c      	mov	r4, r1
 8023f1c:	bfbc      	itt	lt
 8023f1e:	464c      	movlt	r4, r9
 8023f20:	4699      	movlt	r9, r3
 8023f22:	6927      	ldr	r7, [r4, #16]
 8023f24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023f28:	68a3      	ldr	r3, [r4, #8]
 8023f2a:	6861      	ldr	r1, [r4, #4]
 8023f2c:	eb07 060a 	add.w	r6, r7, sl
 8023f30:	42b3      	cmp	r3, r6
 8023f32:	b085      	sub	sp, #20
 8023f34:	bfb8      	it	lt
 8023f36:	3101      	addlt	r1, #1
 8023f38:	f7ff fed8 	bl	8023cec <_Balloc>
 8023f3c:	b930      	cbnz	r0, 8023f4c <__multiply+0x44>
 8023f3e:	4602      	mov	r2, r0
 8023f40:	4b44      	ldr	r3, [pc, #272]	; (8024054 <__multiply+0x14c>)
 8023f42:	4845      	ldr	r0, [pc, #276]	; (8024058 <__multiply+0x150>)
 8023f44:	f240 115d 	movw	r1, #349	; 0x15d
 8023f48:	f000 fd52 	bl	80249f0 <__assert_func>
 8023f4c:	f100 0514 	add.w	r5, r0, #20
 8023f50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023f54:	462b      	mov	r3, r5
 8023f56:	2200      	movs	r2, #0
 8023f58:	4543      	cmp	r3, r8
 8023f5a:	d321      	bcc.n	8023fa0 <__multiply+0x98>
 8023f5c:	f104 0314 	add.w	r3, r4, #20
 8023f60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8023f64:	f109 0314 	add.w	r3, r9, #20
 8023f68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8023f6c:	9202      	str	r2, [sp, #8]
 8023f6e:	1b3a      	subs	r2, r7, r4
 8023f70:	3a15      	subs	r2, #21
 8023f72:	f022 0203 	bic.w	r2, r2, #3
 8023f76:	3204      	adds	r2, #4
 8023f78:	f104 0115 	add.w	r1, r4, #21
 8023f7c:	428f      	cmp	r7, r1
 8023f7e:	bf38      	it	cc
 8023f80:	2204      	movcc	r2, #4
 8023f82:	9201      	str	r2, [sp, #4]
 8023f84:	9a02      	ldr	r2, [sp, #8]
 8023f86:	9303      	str	r3, [sp, #12]
 8023f88:	429a      	cmp	r2, r3
 8023f8a:	d80c      	bhi.n	8023fa6 <__multiply+0x9e>
 8023f8c:	2e00      	cmp	r6, #0
 8023f8e:	dd03      	ble.n	8023f98 <__multiply+0x90>
 8023f90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d05a      	beq.n	802404e <__multiply+0x146>
 8023f98:	6106      	str	r6, [r0, #16]
 8023f9a:	b005      	add	sp, #20
 8023f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa0:	f843 2b04 	str.w	r2, [r3], #4
 8023fa4:	e7d8      	b.n	8023f58 <__multiply+0x50>
 8023fa6:	f8b3 a000 	ldrh.w	sl, [r3]
 8023faa:	f1ba 0f00 	cmp.w	sl, #0
 8023fae:	d024      	beq.n	8023ffa <__multiply+0xf2>
 8023fb0:	f104 0e14 	add.w	lr, r4, #20
 8023fb4:	46a9      	mov	r9, r5
 8023fb6:	f04f 0c00 	mov.w	ip, #0
 8023fba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8023fbe:	f8d9 1000 	ldr.w	r1, [r9]
 8023fc2:	fa1f fb82 	uxth.w	fp, r2
 8023fc6:	b289      	uxth	r1, r1
 8023fc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8023fcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8023fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8023fd4:	4461      	add	r1, ip
 8023fd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023fda:	fb0a c20b 	mla	r2, sl, fp, ip
 8023fde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8023fe2:	b289      	uxth	r1, r1
 8023fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8023fe8:	4577      	cmp	r7, lr
 8023fea:	f849 1b04 	str.w	r1, [r9], #4
 8023fee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023ff2:	d8e2      	bhi.n	8023fba <__multiply+0xb2>
 8023ff4:	9a01      	ldr	r2, [sp, #4]
 8023ff6:	f845 c002 	str.w	ip, [r5, r2]
 8023ffa:	9a03      	ldr	r2, [sp, #12]
 8023ffc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8024000:	3304      	adds	r3, #4
 8024002:	f1b9 0f00 	cmp.w	r9, #0
 8024006:	d020      	beq.n	802404a <__multiply+0x142>
 8024008:	6829      	ldr	r1, [r5, #0]
 802400a:	f104 0c14 	add.w	ip, r4, #20
 802400e:	46ae      	mov	lr, r5
 8024010:	f04f 0a00 	mov.w	sl, #0
 8024014:	f8bc b000 	ldrh.w	fp, [ip]
 8024018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802401c:	fb09 220b 	mla	r2, r9, fp, r2
 8024020:	4492      	add	sl, r2
 8024022:	b289      	uxth	r1, r1
 8024024:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8024028:	f84e 1b04 	str.w	r1, [lr], #4
 802402c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8024030:	f8be 1000 	ldrh.w	r1, [lr]
 8024034:	0c12      	lsrs	r2, r2, #16
 8024036:	fb09 1102 	mla	r1, r9, r2, r1
 802403a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802403e:	4567      	cmp	r7, ip
 8024040:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8024044:	d8e6      	bhi.n	8024014 <__multiply+0x10c>
 8024046:	9a01      	ldr	r2, [sp, #4]
 8024048:	50a9      	str	r1, [r5, r2]
 802404a:	3504      	adds	r5, #4
 802404c:	e79a      	b.n	8023f84 <__multiply+0x7c>
 802404e:	3e01      	subs	r6, #1
 8024050:	e79c      	b.n	8023f8c <__multiply+0x84>
 8024052:	bf00      	nop
 8024054:	0802665b 	.word	0x0802665b
 8024058:	080266cc 	.word	0x080266cc

0802405c <__pow5mult>:
 802405c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024060:	4615      	mov	r5, r2
 8024062:	f012 0203 	ands.w	r2, r2, #3
 8024066:	4606      	mov	r6, r0
 8024068:	460f      	mov	r7, r1
 802406a:	d007      	beq.n	802407c <__pow5mult+0x20>
 802406c:	4c25      	ldr	r4, [pc, #148]	; (8024104 <__pow5mult+0xa8>)
 802406e:	3a01      	subs	r2, #1
 8024070:	2300      	movs	r3, #0
 8024072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024076:	f7ff fe9b 	bl	8023db0 <__multadd>
 802407a:	4607      	mov	r7, r0
 802407c:	10ad      	asrs	r5, r5, #2
 802407e:	d03d      	beq.n	80240fc <__pow5mult+0xa0>
 8024080:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8024082:	b97c      	cbnz	r4, 80240a4 <__pow5mult+0x48>
 8024084:	2010      	movs	r0, #16
 8024086:	f7ff fe29 	bl	8023cdc <malloc>
 802408a:	4602      	mov	r2, r0
 802408c:	6270      	str	r0, [r6, #36]	; 0x24
 802408e:	b928      	cbnz	r0, 802409c <__pow5mult+0x40>
 8024090:	4b1d      	ldr	r3, [pc, #116]	; (8024108 <__pow5mult+0xac>)
 8024092:	481e      	ldr	r0, [pc, #120]	; (802410c <__pow5mult+0xb0>)
 8024094:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8024098:	f000 fcaa 	bl	80249f0 <__assert_func>
 802409c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80240a0:	6004      	str	r4, [r0, #0]
 80240a2:	60c4      	str	r4, [r0, #12]
 80240a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80240a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80240ac:	b94c      	cbnz	r4, 80240c2 <__pow5mult+0x66>
 80240ae:	f240 2171 	movw	r1, #625	; 0x271
 80240b2:	4630      	mov	r0, r6
 80240b4:	f7ff ff12 	bl	8023edc <__i2b>
 80240b8:	2300      	movs	r3, #0
 80240ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80240be:	4604      	mov	r4, r0
 80240c0:	6003      	str	r3, [r0, #0]
 80240c2:	f04f 0900 	mov.w	r9, #0
 80240c6:	07eb      	lsls	r3, r5, #31
 80240c8:	d50a      	bpl.n	80240e0 <__pow5mult+0x84>
 80240ca:	4639      	mov	r1, r7
 80240cc:	4622      	mov	r2, r4
 80240ce:	4630      	mov	r0, r6
 80240d0:	f7ff ff1a 	bl	8023f08 <__multiply>
 80240d4:	4639      	mov	r1, r7
 80240d6:	4680      	mov	r8, r0
 80240d8:	4630      	mov	r0, r6
 80240da:	f7ff fe47 	bl	8023d6c <_Bfree>
 80240de:	4647      	mov	r7, r8
 80240e0:	106d      	asrs	r5, r5, #1
 80240e2:	d00b      	beq.n	80240fc <__pow5mult+0xa0>
 80240e4:	6820      	ldr	r0, [r4, #0]
 80240e6:	b938      	cbnz	r0, 80240f8 <__pow5mult+0x9c>
 80240e8:	4622      	mov	r2, r4
 80240ea:	4621      	mov	r1, r4
 80240ec:	4630      	mov	r0, r6
 80240ee:	f7ff ff0b 	bl	8023f08 <__multiply>
 80240f2:	6020      	str	r0, [r4, #0]
 80240f4:	f8c0 9000 	str.w	r9, [r0]
 80240f8:	4604      	mov	r4, r0
 80240fa:	e7e4      	b.n	80240c6 <__pow5mult+0x6a>
 80240fc:	4638      	mov	r0, r7
 80240fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024102:	bf00      	nop
 8024104:	08026818 	.word	0x08026818
 8024108:	080265e9 	.word	0x080265e9
 802410c:	080266cc 	.word	0x080266cc

08024110 <__lshift>:
 8024110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024114:	460c      	mov	r4, r1
 8024116:	6849      	ldr	r1, [r1, #4]
 8024118:	6923      	ldr	r3, [r4, #16]
 802411a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802411e:	68a3      	ldr	r3, [r4, #8]
 8024120:	4607      	mov	r7, r0
 8024122:	4691      	mov	r9, r2
 8024124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024128:	f108 0601 	add.w	r6, r8, #1
 802412c:	42b3      	cmp	r3, r6
 802412e:	db0b      	blt.n	8024148 <__lshift+0x38>
 8024130:	4638      	mov	r0, r7
 8024132:	f7ff fddb 	bl	8023cec <_Balloc>
 8024136:	4605      	mov	r5, r0
 8024138:	b948      	cbnz	r0, 802414e <__lshift+0x3e>
 802413a:	4602      	mov	r2, r0
 802413c:	4b2a      	ldr	r3, [pc, #168]	; (80241e8 <__lshift+0xd8>)
 802413e:	482b      	ldr	r0, [pc, #172]	; (80241ec <__lshift+0xdc>)
 8024140:	f240 11d9 	movw	r1, #473	; 0x1d9
 8024144:	f000 fc54 	bl	80249f0 <__assert_func>
 8024148:	3101      	adds	r1, #1
 802414a:	005b      	lsls	r3, r3, #1
 802414c:	e7ee      	b.n	802412c <__lshift+0x1c>
 802414e:	2300      	movs	r3, #0
 8024150:	f100 0114 	add.w	r1, r0, #20
 8024154:	f100 0210 	add.w	r2, r0, #16
 8024158:	4618      	mov	r0, r3
 802415a:	4553      	cmp	r3, sl
 802415c:	db37      	blt.n	80241ce <__lshift+0xbe>
 802415e:	6920      	ldr	r0, [r4, #16]
 8024160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8024164:	f104 0314 	add.w	r3, r4, #20
 8024168:	f019 091f 	ands.w	r9, r9, #31
 802416c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8024174:	d02f      	beq.n	80241d6 <__lshift+0xc6>
 8024176:	f1c9 0e20 	rsb	lr, r9, #32
 802417a:	468a      	mov	sl, r1
 802417c:	f04f 0c00 	mov.w	ip, #0
 8024180:	681a      	ldr	r2, [r3, #0]
 8024182:	fa02 f209 	lsl.w	r2, r2, r9
 8024186:	ea42 020c 	orr.w	r2, r2, ip
 802418a:	f84a 2b04 	str.w	r2, [sl], #4
 802418e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024192:	4298      	cmp	r0, r3
 8024194:	fa22 fc0e 	lsr.w	ip, r2, lr
 8024198:	d8f2      	bhi.n	8024180 <__lshift+0x70>
 802419a:	1b03      	subs	r3, r0, r4
 802419c:	3b15      	subs	r3, #21
 802419e:	f023 0303 	bic.w	r3, r3, #3
 80241a2:	3304      	adds	r3, #4
 80241a4:	f104 0215 	add.w	r2, r4, #21
 80241a8:	4290      	cmp	r0, r2
 80241aa:	bf38      	it	cc
 80241ac:	2304      	movcc	r3, #4
 80241ae:	f841 c003 	str.w	ip, [r1, r3]
 80241b2:	f1bc 0f00 	cmp.w	ip, #0
 80241b6:	d001      	beq.n	80241bc <__lshift+0xac>
 80241b8:	f108 0602 	add.w	r6, r8, #2
 80241bc:	3e01      	subs	r6, #1
 80241be:	4638      	mov	r0, r7
 80241c0:	612e      	str	r6, [r5, #16]
 80241c2:	4621      	mov	r1, r4
 80241c4:	f7ff fdd2 	bl	8023d6c <_Bfree>
 80241c8:	4628      	mov	r0, r5
 80241ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80241d2:	3301      	adds	r3, #1
 80241d4:	e7c1      	b.n	802415a <__lshift+0x4a>
 80241d6:	3904      	subs	r1, #4
 80241d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80241dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80241e0:	4298      	cmp	r0, r3
 80241e2:	d8f9      	bhi.n	80241d8 <__lshift+0xc8>
 80241e4:	e7ea      	b.n	80241bc <__lshift+0xac>
 80241e6:	bf00      	nop
 80241e8:	0802665b 	.word	0x0802665b
 80241ec:	080266cc 	.word	0x080266cc

080241f0 <__mcmp>:
 80241f0:	b530      	push	{r4, r5, lr}
 80241f2:	6902      	ldr	r2, [r0, #16]
 80241f4:	690c      	ldr	r4, [r1, #16]
 80241f6:	1b12      	subs	r2, r2, r4
 80241f8:	d10e      	bne.n	8024218 <__mcmp+0x28>
 80241fa:	f100 0314 	add.w	r3, r0, #20
 80241fe:	3114      	adds	r1, #20
 8024200:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8024204:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024208:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802420c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024210:	42a5      	cmp	r5, r4
 8024212:	d003      	beq.n	802421c <__mcmp+0x2c>
 8024214:	d305      	bcc.n	8024222 <__mcmp+0x32>
 8024216:	2201      	movs	r2, #1
 8024218:	4610      	mov	r0, r2
 802421a:	bd30      	pop	{r4, r5, pc}
 802421c:	4283      	cmp	r3, r0
 802421e:	d3f3      	bcc.n	8024208 <__mcmp+0x18>
 8024220:	e7fa      	b.n	8024218 <__mcmp+0x28>
 8024222:	f04f 32ff 	mov.w	r2, #4294967295
 8024226:	e7f7      	b.n	8024218 <__mcmp+0x28>

08024228 <__mdiff>:
 8024228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802422c:	460c      	mov	r4, r1
 802422e:	4606      	mov	r6, r0
 8024230:	4611      	mov	r1, r2
 8024232:	4620      	mov	r0, r4
 8024234:	4690      	mov	r8, r2
 8024236:	f7ff ffdb 	bl	80241f0 <__mcmp>
 802423a:	1e05      	subs	r5, r0, #0
 802423c:	d110      	bne.n	8024260 <__mdiff+0x38>
 802423e:	4629      	mov	r1, r5
 8024240:	4630      	mov	r0, r6
 8024242:	f7ff fd53 	bl	8023cec <_Balloc>
 8024246:	b930      	cbnz	r0, 8024256 <__mdiff+0x2e>
 8024248:	4b3a      	ldr	r3, [pc, #232]	; (8024334 <__mdiff+0x10c>)
 802424a:	4602      	mov	r2, r0
 802424c:	f240 2132 	movw	r1, #562	; 0x232
 8024250:	4839      	ldr	r0, [pc, #228]	; (8024338 <__mdiff+0x110>)
 8024252:	f000 fbcd 	bl	80249f0 <__assert_func>
 8024256:	2301      	movs	r3, #1
 8024258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802425c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024260:	bfa4      	itt	ge
 8024262:	4643      	movge	r3, r8
 8024264:	46a0      	movge	r8, r4
 8024266:	4630      	mov	r0, r6
 8024268:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802426c:	bfa6      	itte	ge
 802426e:	461c      	movge	r4, r3
 8024270:	2500      	movge	r5, #0
 8024272:	2501      	movlt	r5, #1
 8024274:	f7ff fd3a 	bl	8023cec <_Balloc>
 8024278:	b920      	cbnz	r0, 8024284 <__mdiff+0x5c>
 802427a:	4b2e      	ldr	r3, [pc, #184]	; (8024334 <__mdiff+0x10c>)
 802427c:	4602      	mov	r2, r0
 802427e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8024282:	e7e5      	b.n	8024250 <__mdiff+0x28>
 8024284:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8024288:	6926      	ldr	r6, [r4, #16]
 802428a:	60c5      	str	r5, [r0, #12]
 802428c:	f104 0914 	add.w	r9, r4, #20
 8024290:	f108 0514 	add.w	r5, r8, #20
 8024294:	f100 0e14 	add.w	lr, r0, #20
 8024298:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802429c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80242a0:	f108 0210 	add.w	r2, r8, #16
 80242a4:	46f2      	mov	sl, lr
 80242a6:	2100      	movs	r1, #0
 80242a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80242ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80242b0:	fa1f f883 	uxth.w	r8, r3
 80242b4:	fa11 f18b 	uxtah	r1, r1, fp
 80242b8:	0c1b      	lsrs	r3, r3, #16
 80242ba:	eba1 0808 	sub.w	r8, r1, r8
 80242be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80242c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80242c6:	fa1f f888 	uxth.w	r8, r8
 80242ca:	1419      	asrs	r1, r3, #16
 80242cc:	454e      	cmp	r6, r9
 80242ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80242d2:	f84a 3b04 	str.w	r3, [sl], #4
 80242d6:	d8e7      	bhi.n	80242a8 <__mdiff+0x80>
 80242d8:	1b33      	subs	r3, r6, r4
 80242da:	3b15      	subs	r3, #21
 80242dc:	f023 0303 	bic.w	r3, r3, #3
 80242e0:	3304      	adds	r3, #4
 80242e2:	3415      	adds	r4, #21
 80242e4:	42a6      	cmp	r6, r4
 80242e6:	bf38      	it	cc
 80242e8:	2304      	movcc	r3, #4
 80242ea:	441d      	add	r5, r3
 80242ec:	4473      	add	r3, lr
 80242ee:	469e      	mov	lr, r3
 80242f0:	462e      	mov	r6, r5
 80242f2:	4566      	cmp	r6, ip
 80242f4:	d30e      	bcc.n	8024314 <__mdiff+0xec>
 80242f6:	f10c 0203 	add.w	r2, ip, #3
 80242fa:	1b52      	subs	r2, r2, r5
 80242fc:	f022 0203 	bic.w	r2, r2, #3
 8024300:	3d03      	subs	r5, #3
 8024302:	45ac      	cmp	ip, r5
 8024304:	bf38      	it	cc
 8024306:	2200      	movcc	r2, #0
 8024308:	441a      	add	r2, r3
 802430a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802430e:	b17b      	cbz	r3, 8024330 <__mdiff+0x108>
 8024310:	6107      	str	r7, [r0, #16]
 8024312:	e7a3      	b.n	802425c <__mdiff+0x34>
 8024314:	f856 8b04 	ldr.w	r8, [r6], #4
 8024318:	fa11 f288 	uxtah	r2, r1, r8
 802431c:	1414      	asrs	r4, r2, #16
 802431e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8024322:	b292      	uxth	r2, r2
 8024324:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8024328:	f84e 2b04 	str.w	r2, [lr], #4
 802432c:	1421      	asrs	r1, r4, #16
 802432e:	e7e0      	b.n	80242f2 <__mdiff+0xca>
 8024330:	3f01      	subs	r7, #1
 8024332:	e7ea      	b.n	802430a <__mdiff+0xe2>
 8024334:	0802665b 	.word	0x0802665b
 8024338:	080266cc 	.word	0x080266cc

0802433c <__d2b>:
 802433c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024340:	4689      	mov	r9, r1
 8024342:	2101      	movs	r1, #1
 8024344:	ec57 6b10 	vmov	r6, r7, d0
 8024348:	4690      	mov	r8, r2
 802434a:	f7ff fccf 	bl	8023cec <_Balloc>
 802434e:	4604      	mov	r4, r0
 8024350:	b930      	cbnz	r0, 8024360 <__d2b+0x24>
 8024352:	4602      	mov	r2, r0
 8024354:	4b25      	ldr	r3, [pc, #148]	; (80243ec <__d2b+0xb0>)
 8024356:	4826      	ldr	r0, [pc, #152]	; (80243f0 <__d2b+0xb4>)
 8024358:	f240 310a 	movw	r1, #778	; 0x30a
 802435c:	f000 fb48 	bl	80249f0 <__assert_func>
 8024360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8024364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024368:	bb35      	cbnz	r5, 80243b8 <__d2b+0x7c>
 802436a:	2e00      	cmp	r6, #0
 802436c:	9301      	str	r3, [sp, #4]
 802436e:	d028      	beq.n	80243c2 <__d2b+0x86>
 8024370:	4668      	mov	r0, sp
 8024372:	9600      	str	r6, [sp, #0]
 8024374:	f7ff fd82 	bl	8023e7c <__lo0bits>
 8024378:	9900      	ldr	r1, [sp, #0]
 802437a:	b300      	cbz	r0, 80243be <__d2b+0x82>
 802437c:	9a01      	ldr	r2, [sp, #4]
 802437e:	f1c0 0320 	rsb	r3, r0, #32
 8024382:	fa02 f303 	lsl.w	r3, r2, r3
 8024386:	430b      	orrs	r3, r1
 8024388:	40c2      	lsrs	r2, r0
 802438a:	6163      	str	r3, [r4, #20]
 802438c:	9201      	str	r2, [sp, #4]
 802438e:	9b01      	ldr	r3, [sp, #4]
 8024390:	61a3      	str	r3, [r4, #24]
 8024392:	2b00      	cmp	r3, #0
 8024394:	bf14      	ite	ne
 8024396:	2202      	movne	r2, #2
 8024398:	2201      	moveq	r2, #1
 802439a:	6122      	str	r2, [r4, #16]
 802439c:	b1d5      	cbz	r5, 80243d4 <__d2b+0x98>
 802439e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80243a2:	4405      	add	r5, r0
 80243a4:	f8c9 5000 	str.w	r5, [r9]
 80243a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80243ac:	f8c8 0000 	str.w	r0, [r8]
 80243b0:	4620      	mov	r0, r4
 80243b2:	b003      	add	sp, #12
 80243b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80243b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80243bc:	e7d5      	b.n	802436a <__d2b+0x2e>
 80243be:	6161      	str	r1, [r4, #20]
 80243c0:	e7e5      	b.n	802438e <__d2b+0x52>
 80243c2:	a801      	add	r0, sp, #4
 80243c4:	f7ff fd5a 	bl	8023e7c <__lo0bits>
 80243c8:	9b01      	ldr	r3, [sp, #4]
 80243ca:	6163      	str	r3, [r4, #20]
 80243cc:	2201      	movs	r2, #1
 80243ce:	6122      	str	r2, [r4, #16]
 80243d0:	3020      	adds	r0, #32
 80243d2:	e7e3      	b.n	802439c <__d2b+0x60>
 80243d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80243d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80243dc:	f8c9 0000 	str.w	r0, [r9]
 80243e0:	6918      	ldr	r0, [r3, #16]
 80243e2:	f7ff fd2b 	bl	8023e3c <__hi0bits>
 80243e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80243ea:	e7df      	b.n	80243ac <__d2b+0x70>
 80243ec:	0802665b 	.word	0x0802665b
 80243f0:	080266cc 	.word	0x080266cc

080243f4 <_calloc_r>:
 80243f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80243f6:	fba1 2402 	umull	r2, r4, r1, r2
 80243fa:	b94c      	cbnz	r4, 8024410 <_calloc_r+0x1c>
 80243fc:	4611      	mov	r1, r2
 80243fe:	9201      	str	r2, [sp, #4]
 8024400:	f000 f87a 	bl	80244f8 <_malloc_r>
 8024404:	9a01      	ldr	r2, [sp, #4]
 8024406:	4605      	mov	r5, r0
 8024408:	b930      	cbnz	r0, 8024418 <_calloc_r+0x24>
 802440a:	4628      	mov	r0, r5
 802440c:	b003      	add	sp, #12
 802440e:	bd30      	pop	{r4, r5, pc}
 8024410:	220c      	movs	r2, #12
 8024412:	6002      	str	r2, [r0, #0]
 8024414:	2500      	movs	r5, #0
 8024416:	e7f8      	b.n	802440a <_calloc_r+0x16>
 8024418:	4621      	mov	r1, r4
 802441a:	f7fd fdeb 	bl	8021ff4 <memset>
 802441e:	e7f4      	b.n	802440a <_calloc_r+0x16>

08024420 <_free_r>:
 8024420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024422:	2900      	cmp	r1, #0
 8024424:	d044      	beq.n	80244b0 <_free_r+0x90>
 8024426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802442a:	9001      	str	r0, [sp, #4]
 802442c:	2b00      	cmp	r3, #0
 802442e:	f1a1 0404 	sub.w	r4, r1, #4
 8024432:	bfb8      	it	lt
 8024434:	18e4      	addlt	r4, r4, r3
 8024436:	f000 fb61 	bl	8024afc <__malloc_lock>
 802443a:	4a1e      	ldr	r2, [pc, #120]	; (80244b4 <_free_r+0x94>)
 802443c:	9801      	ldr	r0, [sp, #4]
 802443e:	6813      	ldr	r3, [r2, #0]
 8024440:	b933      	cbnz	r3, 8024450 <_free_r+0x30>
 8024442:	6063      	str	r3, [r4, #4]
 8024444:	6014      	str	r4, [r2, #0]
 8024446:	b003      	add	sp, #12
 8024448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802444c:	f000 bb5c 	b.w	8024b08 <__malloc_unlock>
 8024450:	42a3      	cmp	r3, r4
 8024452:	d908      	bls.n	8024466 <_free_r+0x46>
 8024454:	6825      	ldr	r5, [r4, #0]
 8024456:	1961      	adds	r1, r4, r5
 8024458:	428b      	cmp	r3, r1
 802445a:	bf01      	itttt	eq
 802445c:	6819      	ldreq	r1, [r3, #0]
 802445e:	685b      	ldreq	r3, [r3, #4]
 8024460:	1949      	addeq	r1, r1, r5
 8024462:	6021      	streq	r1, [r4, #0]
 8024464:	e7ed      	b.n	8024442 <_free_r+0x22>
 8024466:	461a      	mov	r2, r3
 8024468:	685b      	ldr	r3, [r3, #4]
 802446a:	b10b      	cbz	r3, 8024470 <_free_r+0x50>
 802446c:	42a3      	cmp	r3, r4
 802446e:	d9fa      	bls.n	8024466 <_free_r+0x46>
 8024470:	6811      	ldr	r1, [r2, #0]
 8024472:	1855      	adds	r5, r2, r1
 8024474:	42a5      	cmp	r5, r4
 8024476:	d10b      	bne.n	8024490 <_free_r+0x70>
 8024478:	6824      	ldr	r4, [r4, #0]
 802447a:	4421      	add	r1, r4
 802447c:	1854      	adds	r4, r2, r1
 802447e:	42a3      	cmp	r3, r4
 8024480:	6011      	str	r1, [r2, #0]
 8024482:	d1e0      	bne.n	8024446 <_free_r+0x26>
 8024484:	681c      	ldr	r4, [r3, #0]
 8024486:	685b      	ldr	r3, [r3, #4]
 8024488:	6053      	str	r3, [r2, #4]
 802448a:	4421      	add	r1, r4
 802448c:	6011      	str	r1, [r2, #0]
 802448e:	e7da      	b.n	8024446 <_free_r+0x26>
 8024490:	d902      	bls.n	8024498 <_free_r+0x78>
 8024492:	230c      	movs	r3, #12
 8024494:	6003      	str	r3, [r0, #0]
 8024496:	e7d6      	b.n	8024446 <_free_r+0x26>
 8024498:	6825      	ldr	r5, [r4, #0]
 802449a:	1961      	adds	r1, r4, r5
 802449c:	428b      	cmp	r3, r1
 802449e:	bf04      	itt	eq
 80244a0:	6819      	ldreq	r1, [r3, #0]
 80244a2:	685b      	ldreq	r3, [r3, #4]
 80244a4:	6063      	str	r3, [r4, #4]
 80244a6:	bf04      	itt	eq
 80244a8:	1949      	addeq	r1, r1, r5
 80244aa:	6021      	streq	r1, [r4, #0]
 80244ac:	6054      	str	r4, [r2, #4]
 80244ae:	e7ca      	b.n	8024446 <_free_r+0x26>
 80244b0:	b003      	add	sp, #12
 80244b2:	bd30      	pop	{r4, r5, pc}
 80244b4:	2000fdd4 	.word	0x2000fdd4

080244b8 <sbrk_aligned>:
 80244b8:	b570      	push	{r4, r5, r6, lr}
 80244ba:	4e0e      	ldr	r6, [pc, #56]	; (80244f4 <sbrk_aligned+0x3c>)
 80244bc:	460c      	mov	r4, r1
 80244be:	6831      	ldr	r1, [r6, #0]
 80244c0:	4605      	mov	r5, r0
 80244c2:	b911      	cbnz	r1, 80244ca <sbrk_aligned+0x12>
 80244c4:	f000 fa2e 	bl	8024924 <_sbrk_r>
 80244c8:	6030      	str	r0, [r6, #0]
 80244ca:	4621      	mov	r1, r4
 80244cc:	4628      	mov	r0, r5
 80244ce:	f000 fa29 	bl	8024924 <_sbrk_r>
 80244d2:	1c43      	adds	r3, r0, #1
 80244d4:	d00a      	beq.n	80244ec <sbrk_aligned+0x34>
 80244d6:	1cc4      	adds	r4, r0, #3
 80244d8:	f024 0403 	bic.w	r4, r4, #3
 80244dc:	42a0      	cmp	r0, r4
 80244de:	d007      	beq.n	80244f0 <sbrk_aligned+0x38>
 80244e0:	1a21      	subs	r1, r4, r0
 80244e2:	4628      	mov	r0, r5
 80244e4:	f000 fa1e 	bl	8024924 <_sbrk_r>
 80244e8:	3001      	adds	r0, #1
 80244ea:	d101      	bne.n	80244f0 <sbrk_aligned+0x38>
 80244ec:	f04f 34ff 	mov.w	r4, #4294967295
 80244f0:	4620      	mov	r0, r4
 80244f2:	bd70      	pop	{r4, r5, r6, pc}
 80244f4:	2000fdd8 	.word	0x2000fdd8

080244f8 <_malloc_r>:
 80244f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244fc:	1ccd      	adds	r5, r1, #3
 80244fe:	f025 0503 	bic.w	r5, r5, #3
 8024502:	3508      	adds	r5, #8
 8024504:	2d0c      	cmp	r5, #12
 8024506:	bf38      	it	cc
 8024508:	250c      	movcc	r5, #12
 802450a:	2d00      	cmp	r5, #0
 802450c:	4607      	mov	r7, r0
 802450e:	db01      	blt.n	8024514 <_malloc_r+0x1c>
 8024510:	42a9      	cmp	r1, r5
 8024512:	d905      	bls.n	8024520 <_malloc_r+0x28>
 8024514:	230c      	movs	r3, #12
 8024516:	603b      	str	r3, [r7, #0]
 8024518:	2600      	movs	r6, #0
 802451a:	4630      	mov	r0, r6
 802451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024520:	4e2e      	ldr	r6, [pc, #184]	; (80245dc <_malloc_r+0xe4>)
 8024522:	f000 faeb 	bl	8024afc <__malloc_lock>
 8024526:	6833      	ldr	r3, [r6, #0]
 8024528:	461c      	mov	r4, r3
 802452a:	bb34      	cbnz	r4, 802457a <_malloc_r+0x82>
 802452c:	4629      	mov	r1, r5
 802452e:	4638      	mov	r0, r7
 8024530:	f7ff ffc2 	bl	80244b8 <sbrk_aligned>
 8024534:	1c43      	adds	r3, r0, #1
 8024536:	4604      	mov	r4, r0
 8024538:	d14d      	bne.n	80245d6 <_malloc_r+0xde>
 802453a:	6834      	ldr	r4, [r6, #0]
 802453c:	4626      	mov	r6, r4
 802453e:	2e00      	cmp	r6, #0
 8024540:	d140      	bne.n	80245c4 <_malloc_r+0xcc>
 8024542:	6823      	ldr	r3, [r4, #0]
 8024544:	4631      	mov	r1, r6
 8024546:	4638      	mov	r0, r7
 8024548:	eb04 0803 	add.w	r8, r4, r3
 802454c:	f000 f9ea 	bl	8024924 <_sbrk_r>
 8024550:	4580      	cmp	r8, r0
 8024552:	d13a      	bne.n	80245ca <_malloc_r+0xd2>
 8024554:	6821      	ldr	r1, [r4, #0]
 8024556:	3503      	adds	r5, #3
 8024558:	1a6d      	subs	r5, r5, r1
 802455a:	f025 0503 	bic.w	r5, r5, #3
 802455e:	3508      	adds	r5, #8
 8024560:	2d0c      	cmp	r5, #12
 8024562:	bf38      	it	cc
 8024564:	250c      	movcc	r5, #12
 8024566:	4629      	mov	r1, r5
 8024568:	4638      	mov	r0, r7
 802456a:	f7ff ffa5 	bl	80244b8 <sbrk_aligned>
 802456e:	3001      	adds	r0, #1
 8024570:	d02b      	beq.n	80245ca <_malloc_r+0xd2>
 8024572:	6823      	ldr	r3, [r4, #0]
 8024574:	442b      	add	r3, r5
 8024576:	6023      	str	r3, [r4, #0]
 8024578:	e00e      	b.n	8024598 <_malloc_r+0xa0>
 802457a:	6822      	ldr	r2, [r4, #0]
 802457c:	1b52      	subs	r2, r2, r5
 802457e:	d41e      	bmi.n	80245be <_malloc_r+0xc6>
 8024580:	2a0b      	cmp	r2, #11
 8024582:	d916      	bls.n	80245b2 <_malloc_r+0xba>
 8024584:	1961      	adds	r1, r4, r5
 8024586:	42a3      	cmp	r3, r4
 8024588:	6025      	str	r5, [r4, #0]
 802458a:	bf18      	it	ne
 802458c:	6059      	strne	r1, [r3, #4]
 802458e:	6863      	ldr	r3, [r4, #4]
 8024590:	bf08      	it	eq
 8024592:	6031      	streq	r1, [r6, #0]
 8024594:	5162      	str	r2, [r4, r5]
 8024596:	604b      	str	r3, [r1, #4]
 8024598:	4638      	mov	r0, r7
 802459a:	f104 060b 	add.w	r6, r4, #11
 802459e:	f000 fab3 	bl	8024b08 <__malloc_unlock>
 80245a2:	f026 0607 	bic.w	r6, r6, #7
 80245a6:	1d23      	adds	r3, r4, #4
 80245a8:	1af2      	subs	r2, r6, r3
 80245aa:	d0b6      	beq.n	802451a <_malloc_r+0x22>
 80245ac:	1b9b      	subs	r3, r3, r6
 80245ae:	50a3      	str	r3, [r4, r2]
 80245b0:	e7b3      	b.n	802451a <_malloc_r+0x22>
 80245b2:	6862      	ldr	r2, [r4, #4]
 80245b4:	42a3      	cmp	r3, r4
 80245b6:	bf0c      	ite	eq
 80245b8:	6032      	streq	r2, [r6, #0]
 80245ba:	605a      	strne	r2, [r3, #4]
 80245bc:	e7ec      	b.n	8024598 <_malloc_r+0xa0>
 80245be:	4623      	mov	r3, r4
 80245c0:	6864      	ldr	r4, [r4, #4]
 80245c2:	e7b2      	b.n	802452a <_malloc_r+0x32>
 80245c4:	4634      	mov	r4, r6
 80245c6:	6876      	ldr	r6, [r6, #4]
 80245c8:	e7b9      	b.n	802453e <_malloc_r+0x46>
 80245ca:	230c      	movs	r3, #12
 80245cc:	603b      	str	r3, [r7, #0]
 80245ce:	4638      	mov	r0, r7
 80245d0:	f000 fa9a 	bl	8024b08 <__malloc_unlock>
 80245d4:	e7a1      	b.n	802451a <_malloc_r+0x22>
 80245d6:	6025      	str	r5, [r4, #0]
 80245d8:	e7de      	b.n	8024598 <_malloc_r+0xa0>
 80245da:	bf00      	nop
 80245dc:	2000fdd4 	.word	0x2000fdd4

080245e0 <__sfputc_r>:
 80245e0:	6893      	ldr	r3, [r2, #8]
 80245e2:	3b01      	subs	r3, #1
 80245e4:	2b00      	cmp	r3, #0
 80245e6:	b410      	push	{r4}
 80245e8:	6093      	str	r3, [r2, #8]
 80245ea:	da08      	bge.n	80245fe <__sfputc_r+0x1e>
 80245ec:	6994      	ldr	r4, [r2, #24]
 80245ee:	42a3      	cmp	r3, r4
 80245f0:	db01      	blt.n	80245f6 <__sfputc_r+0x16>
 80245f2:	290a      	cmp	r1, #10
 80245f4:	d103      	bne.n	80245fe <__sfputc_r+0x1e>
 80245f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80245fa:	f7fe ba11 	b.w	8022a20 <__swbuf_r>
 80245fe:	6813      	ldr	r3, [r2, #0]
 8024600:	1c58      	adds	r0, r3, #1
 8024602:	6010      	str	r0, [r2, #0]
 8024604:	7019      	strb	r1, [r3, #0]
 8024606:	4608      	mov	r0, r1
 8024608:	f85d 4b04 	ldr.w	r4, [sp], #4
 802460c:	4770      	bx	lr

0802460e <__sfputs_r>:
 802460e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024610:	4606      	mov	r6, r0
 8024612:	460f      	mov	r7, r1
 8024614:	4614      	mov	r4, r2
 8024616:	18d5      	adds	r5, r2, r3
 8024618:	42ac      	cmp	r4, r5
 802461a:	d101      	bne.n	8024620 <__sfputs_r+0x12>
 802461c:	2000      	movs	r0, #0
 802461e:	e007      	b.n	8024630 <__sfputs_r+0x22>
 8024620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024624:	463a      	mov	r2, r7
 8024626:	4630      	mov	r0, r6
 8024628:	f7ff ffda 	bl	80245e0 <__sfputc_r>
 802462c:	1c43      	adds	r3, r0, #1
 802462e:	d1f3      	bne.n	8024618 <__sfputs_r+0xa>
 8024630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024634 <_vfiprintf_r>:
 8024634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024638:	460d      	mov	r5, r1
 802463a:	b09d      	sub	sp, #116	; 0x74
 802463c:	4614      	mov	r4, r2
 802463e:	4698      	mov	r8, r3
 8024640:	4606      	mov	r6, r0
 8024642:	b118      	cbz	r0, 802464c <_vfiprintf_r+0x18>
 8024644:	6983      	ldr	r3, [r0, #24]
 8024646:	b90b      	cbnz	r3, 802464c <_vfiprintf_r+0x18>
 8024648:	f7ff fa3e 	bl	8023ac8 <__sinit>
 802464c:	4b89      	ldr	r3, [pc, #548]	; (8024874 <_vfiprintf_r+0x240>)
 802464e:	429d      	cmp	r5, r3
 8024650:	d11b      	bne.n	802468a <_vfiprintf_r+0x56>
 8024652:	6875      	ldr	r5, [r6, #4]
 8024654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024656:	07d9      	lsls	r1, r3, #31
 8024658:	d405      	bmi.n	8024666 <_vfiprintf_r+0x32>
 802465a:	89ab      	ldrh	r3, [r5, #12]
 802465c:	059a      	lsls	r2, r3, #22
 802465e:	d402      	bmi.n	8024666 <_vfiprintf_r+0x32>
 8024660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024662:	f7ff fad4 	bl	8023c0e <__retarget_lock_acquire_recursive>
 8024666:	89ab      	ldrh	r3, [r5, #12]
 8024668:	071b      	lsls	r3, r3, #28
 802466a:	d501      	bpl.n	8024670 <_vfiprintf_r+0x3c>
 802466c:	692b      	ldr	r3, [r5, #16]
 802466e:	b9eb      	cbnz	r3, 80246ac <_vfiprintf_r+0x78>
 8024670:	4629      	mov	r1, r5
 8024672:	4630      	mov	r0, r6
 8024674:	f7fe fa26 	bl	8022ac4 <__swsetup_r>
 8024678:	b1c0      	cbz	r0, 80246ac <_vfiprintf_r+0x78>
 802467a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802467c:	07dc      	lsls	r4, r3, #31
 802467e:	d50e      	bpl.n	802469e <_vfiprintf_r+0x6a>
 8024680:	f04f 30ff 	mov.w	r0, #4294967295
 8024684:	b01d      	add	sp, #116	; 0x74
 8024686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802468a:	4b7b      	ldr	r3, [pc, #492]	; (8024878 <_vfiprintf_r+0x244>)
 802468c:	429d      	cmp	r5, r3
 802468e:	d101      	bne.n	8024694 <_vfiprintf_r+0x60>
 8024690:	68b5      	ldr	r5, [r6, #8]
 8024692:	e7df      	b.n	8024654 <_vfiprintf_r+0x20>
 8024694:	4b79      	ldr	r3, [pc, #484]	; (802487c <_vfiprintf_r+0x248>)
 8024696:	429d      	cmp	r5, r3
 8024698:	bf08      	it	eq
 802469a:	68f5      	ldreq	r5, [r6, #12]
 802469c:	e7da      	b.n	8024654 <_vfiprintf_r+0x20>
 802469e:	89ab      	ldrh	r3, [r5, #12]
 80246a0:	0598      	lsls	r0, r3, #22
 80246a2:	d4ed      	bmi.n	8024680 <_vfiprintf_r+0x4c>
 80246a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80246a6:	f7ff fab3 	bl	8023c10 <__retarget_lock_release_recursive>
 80246aa:	e7e9      	b.n	8024680 <_vfiprintf_r+0x4c>
 80246ac:	2300      	movs	r3, #0
 80246ae:	9309      	str	r3, [sp, #36]	; 0x24
 80246b0:	2320      	movs	r3, #32
 80246b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80246b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80246ba:	2330      	movs	r3, #48	; 0x30
 80246bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024880 <_vfiprintf_r+0x24c>
 80246c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80246c4:	f04f 0901 	mov.w	r9, #1
 80246c8:	4623      	mov	r3, r4
 80246ca:	469a      	mov	sl, r3
 80246cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80246d0:	b10a      	cbz	r2, 80246d6 <_vfiprintf_r+0xa2>
 80246d2:	2a25      	cmp	r2, #37	; 0x25
 80246d4:	d1f9      	bne.n	80246ca <_vfiprintf_r+0x96>
 80246d6:	ebba 0b04 	subs.w	fp, sl, r4
 80246da:	d00b      	beq.n	80246f4 <_vfiprintf_r+0xc0>
 80246dc:	465b      	mov	r3, fp
 80246de:	4622      	mov	r2, r4
 80246e0:	4629      	mov	r1, r5
 80246e2:	4630      	mov	r0, r6
 80246e4:	f7ff ff93 	bl	802460e <__sfputs_r>
 80246e8:	3001      	adds	r0, #1
 80246ea:	f000 80aa 	beq.w	8024842 <_vfiprintf_r+0x20e>
 80246ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80246f0:	445a      	add	r2, fp
 80246f2:	9209      	str	r2, [sp, #36]	; 0x24
 80246f4:	f89a 3000 	ldrb.w	r3, [sl]
 80246f8:	2b00      	cmp	r3, #0
 80246fa:	f000 80a2 	beq.w	8024842 <_vfiprintf_r+0x20e>
 80246fe:	2300      	movs	r3, #0
 8024700:	f04f 32ff 	mov.w	r2, #4294967295
 8024704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024708:	f10a 0a01 	add.w	sl, sl, #1
 802470c:	9304      	str	r3, [sp, #16]
 802470e:	9307      	str	r3, [sp, #28]
 8024710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024714:	931a      	str	r3, [sp, #104]	; 0x68
 8024716:	4654      	mov	r4, sl
 8024718:	2205      	movs	r2, #5
 802471a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802471e:	4858      	ldr	r0, [pc, #352]	; (8024880 <_vfiprintf_r+0x24c>)
 8024720:	f7db fd86 	bl	8000230 <memchr>
 8024724:	9a04      	ldr	r2, [sp, #16]
 8024726:	b9d8      	cbnz	r0, 8024760 <_vfiprintf_r+0x12c>
 8024728:	06d1      	lsls	r1, r2, #27
 802472a:	bf44      	itt	mi
 802472c:	2320      	movmi	r3, #32
 802472e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024732:	0713      	lsls	r3, r2, #28
 8024734:	bf44      	itt	mi
 8024736:	232b      	movmi	r3, #43	; 0x2b
 8024738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802473c:	f89a 3000 	ldrb.w	r3, [sl]
 8024740:	2b2a      	cmp	r3, #42	; 0x2a
 8024742:	d015      	beq.n	8024770 <_vfiprintf_r+0x13c>
 8024744:	9a07      	ldr	r2, [sp, #28]
 8024746:	4654      	mov	r4, sl
 8024748:	2000      	movs	r0, #0
 802474a:	f04f 0c0a 	mov.w	ip, #10
 802474e:	4621      	mov	r1, r4
 8024750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024754:	3b30      	subs	r3, #48	; 0x30
 8024756:	2b09      	cmp	r3, #9
 8024758:	d94e      	bls.n	80247f8 <_vfiprintf_r+0x1c4>
 802475a:	b1b0      	cbz	r0, 802478a <_vfiprintf_r+0x156>
 802475c:	9207      	str	r2, [sp, #28]
 802475e:	e014      	b.n	802478a <_vfiprintf_r+0x156>
 8024760:	eba0 0308 	sub.w	r3, r0, r8
 8024764:	fa09 f303 	lsl.w	r3, r9, r3
 8024768:	4313      	orrs	r3, r2
 802476a:	9304      	str	r3, [sp, #16]
 802476c:	46a2      	mov	sl, r4
 802476e:	e7d2      	b.n	8024716 <_vfiprintf_r+0xe2>
 8024770:	9b03      	ldr	r3, [sp, #12]
 8024772:	1d19      	adds	r1, r3, #4
 8024774:	681b      	ldr	r3, [r3, #0]
 8024776:	9103      	str	r1, [sp, #12]
 8024778:	2b00      	cmp	r3, #0
 802477a:	bfbb      	ittet	lt
 802477c:	425b      	neglt	r3, r3
 802477e:	f042 0202 	orrlt.w	r2, r2, #2
 8024782:	9307      	strge	r3, [sp, #28]
 8024784:	9307      	strlt	r3, [sp, #28]
 8024786:	bfb8      	it	lt
 8024788:	9204      	strlt	r2, [sp, #16]
 802478a:	7823      	ldrb	r3, [r4, #0]
 802478c:	2b2e      	cmp	r3, #46	; 0x2e
 802478e:	d10c      	bne.n	80247aa <_vfiprintf_r+0x176>
 8024790:	7863      	ldrb	r3, [r4, #1]
 8024792:	2b2a      	cmp	r3, #42	; 0x2a
 8024794:	d135      	bne.n	8024802 <_vfiprintf_r+0x1ce>
 8024796:	9b03      	ldr	r3, [sp, #12]
 8024798:	1d1a      	adds	r2, r3, #4
 802479a:	681b      	ldr	r3, [r3, #0]
 802479c:	9203      	str	r2, [sp, #12]
 802479e:	2b00      	cmp	r3, #0
 80247a0:	bfb8      	it	lt
 80247a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80247a6:	3402      	adds	r4, #2
 80247a8:	9305      	str	r3, [sp, #20]
 80247aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024890 <_vfiprintf_r+0x25c>
 80247ae:	7821      	ldrb	r1, [r4, #0]
 80247b0:	2203      	movs	r2, #3
 80247b2:	4650      	mov	r0, sl
 80247b4:	f7db fd3c 	bl	8000230 <memchr>
 80247b8:	b140      	cbz	r0, 80247cc <_vfiprintf_r+0x198>
 80247ba:	2340      	movs	r3, #64	; 0x40
 80247bc:	eba0 000a 	sub.w	r0, r0, sl
 80247c0:	fa03 f000 	lsl.w	r0, r3, r0
 80247c4:	9b04      	ldr	r3, [sp, #16]
 80247c6:	4303      	orrs	r3, r0
 80247c8:	3401      	adds	r4, #1
 80247ca:	9304      	str	r3, [sp, #16]
 80247cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80247d0:	482c      	ldr	r0, [pc, #176]	; (8024884 <_vfiprintf_r+0x250>)
 80247d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80247d6:	2206      	movs	r2, #6
 80247d8:	f7db fd2a 	bl	8000230 <memchr>
 80247dc:	2800      	cmp	r0, #0
 80247de:	d03f      	beq.n	8024860 <_vfiprintf_r+0x22c>
 80247e0:	4b29      	ldr	r3, [pc, #164]	; (8024888 <_vfiprintf_r+0x254>)
 80247e2:	bb1b      	cbnz	r3, 802482c <_vfiprintf_r+0x1f8>
 80247e4:	9b03      	ldr	r3, [sp, #12]
 80247e6:	3307      	adds	r3, #7
 80247e8:	f023 0307 	bic.w	r3, r3, #7
 80247ec:	3308      	adds	r3, #8
 80247ee:	9303      	str	r3, [sp, #12]
 80247f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247f2:	443b      	add	r3, r7
 80247f4:	9309      	str	r3, [sp, #36]	; 0x24
 80247f6:	e767      	b.n	80246c8 <_vfiprintf_r+0x94>
 80247f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80247fc:	460c      	mov	r4, r1
 80247fe:	2001      	movs	r0, #1
 8024800:	e7a5      	b.n	802474e <_vfiprintf_r+0x11a>
 8024802:	2300      	movs	r3, #0
 8024804:	3401      	adds	r4, #1
 8024806:	9305      	str	r3, [sp, #20]
 8024808:	4619      	mov	r1, r3
 802480a:	f04f 0c0a 	mov.w	ip, #10
 802480e:	4620      	mov	r0, r4
 8024810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024814:	3a30      	subs	r2, #48	; 0x30
 8024816:	2a09      	cmp	r2, #9
 8024818:	d903      	bls.n	8024822 <_vfiprintf_r+0x1ee>
 802481a:	2b00      	cmp	r3, #0
 802481c:	d0c5      	beq.n	80247aa <_vfiprintf_r+0x176>
 802481e:	9105      	str	r1, [sp, #20]
 8024820:	e7c3      	b.n	80247aa <_vfiprintf_r+0x176>
 8024822:	fb0c 2101 	mla	r1, ip, r1, r2
 8024826:	4604      	mov	r4, r0
 8024828:	2301      	movs	r3, #1
 802482a:	e7f0      	b.n	802480e <_vfiprintf_r+0x1da>
 802482c:	ab03      	add	r3, sp, #12
 802482e:	9300      	str	r3, [sp, #0]
 8024830:	462a      	mov	r2, r5
 8024832:	4b16      	ldr	r3, [pc, #88]	; (802488c <_vfiprintf_r+0x258>)
 8024834:	a904      	add	r1, sp, #16
 8024836:	4630      	mov	r0, r6
 8024838:	f7fd fc84 	bl	8022144 <_printf_float>
 802483c:	4607      	mov	r7, r0
 802483e:	1c78      	adds	r0, r7, #1
 8024840:	d1d6      	bne.n	80247f0 <_vfiprintf_r+0x1bc>
 8024842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024844:	07d9      	lsls	r1, r3, #31
 8024846:	d405      	bmi.n	8024854 <_vfiprintf_r+0x220>
 8024848:	89ab      	ldrh	r3, [r5, #12]
 802484a:	059a      	lsls	r2, r3, #22
 802484c:	d402      	bmi.n	8024854 <_vfiprintf_r+0x220>
 802484e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024850:	f7ff f9de 	bl	8023c10 <__retarget_lock_release_recursive>
 8024854:	89ab      	ldrh	r3, [r5, #12]
 8024856:	065b      	lsls	r3, r3, #25
 8024858:	f53f af12 	bmi.w	8024680 <_vfiprintf_r+0x4c>
 802485c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802485e:	e711      	b.n	8024684 <_vfiprintf_r+0x50>
 8024860:	ab03      	add	r3, sp, #12
 8024862:	9300      	str	r3, [sp, #0]
 8024864:	462a      	mov	r2, r5
 8024866:	4b09      	ldr	r3, [pc, #36]	; (802488c <_vfiprintf_r+0x258>)
 8024868:	a904      	add	r1, sp, #16
 802486a:	4630      	mov	r0, r6
 802486c:	f7fd ff0e 	bl	802268c <_printf_i>
 8024870:	e7e4      	b.n	802483c <_vfiprintf_r+0x208>
 8024872:	bf00      	nop
 8024874:	0802668c 	.word	0x0802668c
 8024878:	080266ac 	.word	0x080266ac
 802487c:	0802666c 	.word	0x0802666c
 8024880:	08026824 	.word	0x08026824
 8024884:	0802682e 	.word	0x0802682e
 8024888:	08022145 	.word	0x08022145
 802488c:	0802460f 	.word	0x0802460f
 8024890:	0802682a 	.word	0x0802682a

08024894 <_putc_r>:
 8024894:	b570      	push	{r4, r5, r6, lr}
 8024896:	460d      	mov	r5, r1
 8024898:	4614      	mov	r4, r2
 802489a:	4606      	mov	r6, r0
 802489c:	b118      	cbz	r0, 80248a6 <_putc_r+0x12>
 802489e:	6983      	ldr	r3, [r0, #24]
 80248a0:	b90b      	cbnz	r3, 80248a6 <_putc_r+0x12>
 80248a2:	f7ff f911 	bl	8023ac8 <__sinit>
 80248a6:	4b1c      	ldr	r3, [pc, #112]	; (8024918 <_putc_r+0x84>)
 80248a8:	429c      	cmp	r4, r3
 80248aa:	d124      	bne.n	80248f6 <_putc_r+0x62>
 80248ac:	6874      	ldr	r4, [r6, #4]
 80248ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80248b0:	07d8      	lsls	r0, r3, #31
 80248b2:	d405      	bmi.n	80248c0 <_putc_r+0x2c>
 80248b4:	89a3      	ldrh	r3, [r4, #12]
 80248b6:	0599      	lsls	r1, r3, #22
 80248b8:	d402      	bmi.n	80248c0 <_putc_r+0x2c>
 80248ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80248bc:	f7ff f9a7 	bl	8023c0e <__retarget_lock_acquire_recursive>
 80248c0:	68a3      	ldr	r3, [r4, #8]
 80248c2:	3b01      	subs	r3, #1
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	60a3      	str	r3, [r4, #8]
 80248c8:	da05      	bge.n	80248d6 <_putc_r+0x42>
 80248ca:	69a2      	ldr	r2, [r4, #24]
 80248cc:	4293      	cmp	r3, r2
 80248ce:	db1c      	blt.n	802490a <_putc_r+0x76>
 80248d0:	b2eb      	uxtb	r3, r5
 80248d2:	2b0a      	cmp	r3, #10
 80248d4:	d019      	beq.n	802490a <_putc_r+0x76>
 80248d6:	6823      	ldr	r3, [r4, #0]
 80248d8:	1c5a      	adds	r2, r3, #1
 80248da:	6022      	str	r2, [r4, #0]
 80248dc:	701d      	strb	r5, [r3, #0]
 80248de:	b2ed      	uxtb	r5, r5
 80248e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80248e2:	07da      	lsls	r2, r3, #31
 80248e4:	d405      	bmi.n	80248f2 <_putc_r+0x5e>
 80248e6:	89a3      	ldrh	r3, [r4, #12]
 80248e8:	059b      	lsls	r3, r3, #22
 80248ea:	d402      	bmi.n	80248f2 <_putc_r+0x5e>
 80248ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80248ee:	f7ff f98f 	bl	8023c10 <__retarget_lock_release_recursive>
 80248f2:	4628      	mov	r0, r5
 80248f4:	bd70      	pop	{r4, r5, r6, pc}
 80248f6:	4b09      	ldr	r3, [pc, #36]	; (802491c <_putc_r+0x88>)
 80248f8:	429c      	cmp	r4, r3
 80248fa:	d101      	bne.n	8024900 <_putc_r+0x6c>
 80248fc:	68b4      	ldr	r4, [r6, #8]
 80248fe:	e7d6      	b.n	80248ae <_putc_r+0x1a>
 8024900:	4b07      	ldr	r3, [pc, #28]	; (8024920 <_putc_r+0x8c>)
 8024902:	429c      	cmp	r4, r3
 8024904:	bf08      	it	eq
 8024906:	68f4      	ldreq	r4, [r6, #12]
 8024908:	e7d1      	b.n	80248ae <_putc_r+0x1a>
 802490a:	4629      	mov	r1, r5
 802490c:	4622      	mov	r2, r4
 802490e:	4630      	mov	r0, r6
 8024910:	f7fe f886 	bl	8022a20 <__swbuf_r>
 8024914:	4605      	mov	r5, r0
 8024916:	e7e3      	b.n	80248e0 <_putc_r+0x4c>
 8024918:	0802668c 	.word	0x0802668c
 802491c:	080266ac 	.word	0x080266ac
 8024920:	0802666c 	.word	0x0802666c

08024924 <_sbrk_r>:
 8024924:	b538      	push	{r3, r4, r5, lr}
 8024926:	4d06      	ldr	r5, [pc, #24]	; (8024940 <_sbrk_r+0x1c>)
 8024928:	2300      	movs	r3, #0
 802492a:	4604      	mov	r4, r0
 802492c:	4608      	mov	r0, r1
 802492e:	602b      	str	r3, [r5, #0]
 8024930:	f7f4 fd2a 	bl	8019388 <_sbrk>
 8024934:	1c43      	adds	r3, r0, #1
 8024936:	d102      	bne.n	802493e <_sbrk_r+0x1a>
 8024938:	682b      	ldr	r3, [r5, #0]
 802493a:	b103      	cbz	r3, 802493e <_sbrk_r+0x1a>
 802493c:	6023      	str	r3, [r4, #0]
 802493e:	bd38      	pop	{r3, r4, r5, pc}
 8024940:	2000fddc 	.word	0x2000fddc

08024944 <__sread>:
 8024944:	b510      	push	{r4, lr}
 8024946:	460c      	mov	r4, r1
 8024948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802494c:	f000 f8e2 	bl	8024b14 <_read_r>
 8024950:	2800      	cmp	r0, #0
 8024952:	bfab      	itete	ge
 8024954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024956:	89a3      	ldrhlt	r3, [r4, #12]
 8024958:	181b      	addge	r3, r3, r0
 802495a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802495e:	bfac      	ite	ge
 8024960:	6563      	strge	r3, [r4, #84]	; 0x54
 8024962:	81a3      	strhlt	r3, [r4, #12]
 8024964:	bd10      	pop	{r4, pc}

08024966 <__swrite>:
 8024966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802496a:	461f      	mov	r7, r3
 802496c:	898b      	ldrh	r3, [r1, #12]
 802496e:	05db      	lsls	r3, r3, #23
 8024970:	4605      	mov	r5, r0
 8024972:	460c      	mov	r4, r1
 8024974:	4616      	mov	r6, r2
 8024976:	d505      	bpl.n	8024984 <__swrite+0x1e>
 8024978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802497c:	2302      	movs	r3, #2
 802497e:	2200      	movs	r2, #0
 8024980:	f000 f898 	bl	8024ab4 <_lseek_r>
 8024984:	89a3      	ldrh	r3, [r4, #12]
 8024986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802498a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802498e:	81a3      	strh	r3, [r4, #12]
 8024990:	4632      	mov	r2, r6
 8024992:	463b      	mov	r3, r7
 8024994:	4628      	mov	r0, r5
 8024996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802499a:	f000 b817 	b.w	80249cc <_write_r>

0802499e <__sseek>:
 802499e:	b510      	push	{r4, lr}
 80249a0:	460c      	mov	r4, r1
 80249a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80249a6:	f000 f885 	bl	8024ab4 <_lseek_r>
 80249aa:	1c43      	adds	r3, r0, #1
 80249ac:	89a3      	ldrh	r3, [r4, #12]
 80249ae:	bf15      	itete	ne
 80249b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80249b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80249b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80249ba:	81a3      	strheq	r3, [r4, #12]
 80249bc:	bf18      	it	ne
 80249be:	81a3      	strhne	r3, [r4, #12]
 80249c0:	bd10      	pop	{r4, pc}

080249c2 <__sclose>:
 80249c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80249c6:	f000 b831 	b.w	8024a2c <_close_r>
	...

080249cc <_write_r>:
 80249cc:	b538      	push	{r3, r4, r5, lr}
 80249ce:	4d07      	ldr	r5, [pc, #28]	; (80249ec <_write_r+0x20>)
 80249d0:	4604      	mov	r4, r0
 80249d2:	4608      	mov	r0, r1
 80249d4:	4611      	mov	r1, r2
 80249d6:	2200      	movs	r2, #0
 80249d8:	602a      	str	r2, [r5, #0]
 80249da:	461a      	mov	r2, r3
 80249dc:	f7f4 fc80 	bl	80192e0 <_write>
 80249e0:	1c43      	adds	r3, r0, #1
 80249e2:	d102      	bne.n	80249ea <_write_r+0x1e>
 80249e4:	682b      	ldr	r3, [r5, #0]
 80249e6:	b103      	cbz	r3, 80249ea <_write_r+0x1e>
 80249e8:	6023      	str	r3, [r4, #0]
 80249ea:	bd38      	pop	{r3, r4, r5, pc}
 80249ec:	2000fddc 	.word	0x2000fddc

080249f0 <__assert_func>:
 80249f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80249f2:	4614      	mov	r4, r2
 80249f4:	461a      	mov	r2, r3
 80249f6:	4b09      	ldr	r3, [pc, #36]	; (8024a1c <__assert_func+0x2c>)
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	4605      	mov	r5, r0
 80249fc:	68d8      	ldr	r0, [r3, #12]
 80249fe:	b14c      	cbz	r4, 8024a14 <__assert_func+0x24>
 8024a00:	4b07      	ldr	r3, [pc, #28]	; (8024a20 <__assert_func+0x30>)
 8024a02:	9100      	str	r1, [sp, #0]
 8024a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024a08:	4906      	ldr	r1, [pc, #24]	; (8024a24 <__assert_func+0x34>)
 8024a0a:	462b      	mov	r3, r5
 8024a0c:	f000 f81e 	bl	8024a4c <fiprintf>
 8024a10:	f000 f89f 	bl	8024b52 <abort>
 8024a14:	4b04      	ldr	r3, [pc, #16]	; (8024a28 <__assert_func+0x38>)
 8024a16:	461c      	mov	r4, r3
 8024a18:	e7f3      	b.n	8024a02 <__assert_func+0x12>
 8024a1a:	bf00      	nop
 8024a1c:	2000002c 	.word	0x2000002c
 8024a20:	08026835 	.word	0x08026835
 8024a24:	08026842 	.word	0x08026842
 8024a28:	08026870 	.word	0x08026870

08024a2c <_close_r>:
 8024a2c:	b538      	push	{r3, r4, r5, lr}
 8024a2e:	4d06      	ldr	r5, [pc, #24]	; (8024a48 <_close_r+0x1c>)
 8024a30:	2300      	movs	r3, #0
 8024a32:	4604      	mov	r4, r0
 8024a34:	4608      	mov	r0, r1
 8024a36:	602b      	str	r3, [r5, #0]
 8024a38:	f7f4 fc72 	bl	8019320 <_close>
 8024a3c:	1c43      	adds	r3, r0, #1
 8024a3e:	d102      	bne.n	8024a46 <_close_r+0x1a>
 8024a40:	682b      	ldr	r3, [r5, #0]
 8024a42:	b103      	cbz	r3, 8024a46 <_close_r+0x1a>
 8024a44:	6023      	str	r3, [r4, #0]
 8024a46:	bd38      	pop	{r3, r4, r5, pc}
 8024a48:	2000fddc 	.word	0x2000fddc

08024a4c <fiprintf>:
 8024a4c:	b40e      	push	{r1, r2, r3}
 8024a4e:	b503      	push	{r0, r1, lr}
 8024a50:	4601      	mov	r1, r0
 8024a52:	ab03      	add	r3, sp, #12
 8024a54:	4805      	ldr	r0, [pc, #20]	; (8024a6c <fiprintf+0x20>)
 8024a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a5a:	6800      	ldr	r0, [r0, #0]
 8024a5c:	9301      	str	r3, [sp, #4]
 8024a5e:	f7ff fde9 	bl	8024634 <_vfiprintf_r>
 8024a62:	b002      	add	sp, #8
 8024a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8024a68:	b003      	add	sp, #12
 8024a6a:	4770      	bx	lr
 8024a6c:	2000002c 	.word	0x2000002c

08024a70 <_fstat_r>:
 8024a70:	b538      	push	{r3, r4, r5, lr}
 8024a72:	4d07      	ldr	r5, [pc, #28]	; (8024a90 <_fstat_r+0x20>)
 8024a74:	2300      	movs	r3, #0
 8024a76:	4604      	mov	r4, r0
 8024a78:	4608      	mov	r0, r1
 8024a7a:	4611      	mov	r1, r2
 8024a7c:	602b      	str	r3, [r5, #0]
 8024a7e:	f7f4 fc5b 	bl	8019338 <_fstat>
 8024a82:	1c43      	adds	r3, r0, #1
 8024a84:	d102      	bne.n	8024a8c <_fstat_r+0x1c>
 8024a86:	682b      	ldr	r3, [r5, #0]
 8024a88:	b103      	cbz	r3, 8024a8c <_fstat_r+0x1c>
 8024a8a:	6023      	str	r3, [r4, #0]
 8024a8c:	bd38      	pop	{r3, r4, r5, pc}
 8024a8e:	bf00      	nop
 8024a90:	2000fddc 	.word	0x2000fddc

08024a94 <_isatty_r>:
 8024a94:	b538      	push	{r3, r4, r5, lr}
 8024a96:	4d06      	ldr	r5, [pc, #24]	; (8024ab0 <_isatty_r+0x1c>)
 8024a98:	2300      	movs	r3, #0
 8024a9a:	4604      	mov	r4, r0
 8024a9c:	4608      	mov	r0, r1
 8024a9e:	602b      	str	r3, [r5, #0]
 8024aa0:	f7f4 fc5a 	bl	8019358 <_isatty>
 8024aa4:	1c43      	adds	r3, r0, #1
 8024aa6:	d102      	bne.n	8024aae <_isatty_r+0x1a>
 8024aa8:	682b      	ldr	r3, [r5, #0]
 8024aaa:	b103      	cbz	r3, 8024aae <_isatty_r+0x1a>
 8024aac:	6023      	str	r3, [r4, #0]
 8024aae:	bd38      	pop	{r3, r4, r5, pc}
 8024ab0:	2000fddc 	.word	0x2000fddc

08024ab4 <_lseek_r>:
 8024ab4:	b538      	push	{r3, r4, r5, lr}
 8024ab6:	4d07      	ldr	r5, [pc, #28]	; (8024ad4 <_lseek_r+0x20>)
 8024ab8:	4604      	mov	r4, r0
 8024aba:	4608      	mov	r0, r1
 8024abc:	4611      	mov	r1, r2
 8024abe:	2200      	movs	r2, #0
 8024ac0:	602a      	str	r2, [r5, #0]
 8024ac2:	461a      	mov	r2, r3
 8024ac4:	f7f4 fc53 	bl	801936e <_lseek>
 8024ac8:	1c43      	adds	r3, r0, #1
 8024aca:	d102      	bne.n	8024ad2 <_lseek_r+0x1e>
 8024acc:	682b      	ldr	r3, [r5, #0]
 8024ace:	b103      	cbz	r3, 8024ad2 <_lseek_r+0x1e>
 8024ad0:	6023      	str	r3, [r4, #0]
 8024ad2:	bd38      	pop	{r3, r4, r5, pc}
 8024ad4:	2000fddc 	.word	0x2000fddc

08024ad8 <__ascii_mbtowc>:
 8024ad8:	b082      	sub	sp, #8
 8024ada:	b901      	cbnz	r1, 8024ade <__ascii_mbtowc+0x6>
 8024adc:	a901      	add	r1, sp, #4
 8024ade:	b142      	cbz	r2, 8024af2 <__ascii_mbtowc+0x1a>
 8024ae0:	b14b      	cbz	r3, 8024af6 <__ascii_mbtowc+0x1e>
 8024ae2:	7813      	ldrb	r3, [r2, #0]
 8024ae4:	600b      	str	r3, [r1, #0]
 8024ae6:	7812      	ldrb	r2, [r2, #0]
 8024ae8:	1e10      	subs	r0, r2, #0
 8024aea:	bf18      	it	ne
 8024aec:	2001      	movne	r0, #1
 8024aee:	b002      	add	sp, #8
 8024af0:	4770      	bx	lr
 8024af2:	4610      	mov	r0, r2
 8024af4:	e7fb      	b.n	8024aee <__ascii_mbtowc+0x16>
 8024af6:	f06f 0001 	mvn.w	r0, #1
 8024afa:	e7f8      	b.n	8024aee <__ascii_mbtowc+0x16>

08024afc <__malloc_lock>:
 8024afc:	4801      	ldr	r0, [pc, #4]	; (8024b04 <__malloc_lock+0x8>)
 8024afe:	f7ff b886 	b.w	8023c0e <__retarget_lock_acquire_recursive>
 8024b02:	bf00      	nop
 8024b04:	2000fdd0 	.word	0x2000fdd0

08024b08 <__malloc_unlock>:
 8024b08:	4801      	ldr	r0, [pc, #4]	; (8024b10 <__malloc_unlock+0x8>)
 8024b0a:	f7ff b881 	b.w	8023c10 <__retarget_lock_release_recursive>
 8024b0e:	bf00      	nop
 8024b10:	2000fdd0 	.word	0x2000fdd0

08024b14 <_read_r>:
 8024b14:	b538      	push	{r3, r4, r5, lr}
 8024b16:	4d07      	ldr	r5, [pc, #28]	; (8024b34 <_read_r+0x20>)
 8024b18:	4604      	mov	r4, r0
 8024b1a:	4608      	mov	r0, r1
 8024b1c:	4611      	mov	r1, r2
 8024b1e:	2200      	movs	r2, #0
 8024b20:	602a      	str	r2, [r5, #0]
 8024b22:	461a      	mov	r2, r3
 8024b24:	f7f4 fbbe 	bl	80192a4 <_read>
 8024b28:	1c43      	adds	r3, r0, #1
 8024b2a:	d102      	bne.n	8024b32 <_read_r+0x1e>
 8024b2c:	682b      	ldr	r3, [r5, #0]
 8024b2e:	b103      	cbz	r3, 8024b32 <_read_r+0x1e>
 8024b30:	6023      	str	r3, [r4, #0]
 8024b32:	bd38      	pop	{r3, r4, r5, pc}
 8024b34:	2000fddc 	.word	0x2000fddc

08024b38 <__ascii_wctomb>:
 8024b38:	b149      	cbz	r1, 8024b4e <__ascii_wctomb+0x16>
 8024b3a:	2aff      	cmp	r2, #255	; 0xff
 8024b3c:	bf85      	ittet	hi
 8024b3e:	238a      	movhi	r3, #138	; 0x8a
 8024b40:	6003      	strhi	r3, [r0, #0]
 8024b42:	700a      	strbls	r2, [r1, #0]
 8024b44:	f04f 30ff 	movhi.w	r0, #4294967295
 8024b48:	bf98      	it	ls
 8024b4a:	2001      	movls	r0, #1
 8024b4c:	4770      	bx	lr
 8024b4e:	4608      	mov	r0, r1
 8024b50:	4770      	bx	lr

08024b52 <abort>:
 8024b52:	b508      	push	{r3, lr}
 8024b54:	2006      	movs	r0, #6
 8024b56:	f000 f82b 	bl	8024bb0 <raise>
 8024b5a:	2001      	movs	r0, #1
 8024b5c:	f7f4 fb98 	bl	8019290 <_exit>

08024b60 <_raise_r>:
 8024b60:	291f      	cmp	r1, #31
 8024b62:	b538      	push	{r3, r4, r5, lr}
 8024b64:	4604      	mov	r4, r0
 8024b66:	460d      	mov	r5, r1
 8024b68:	d904      	bls.n	8024b74 <_raise_r+0x14>
 8024b6a:	2316      	movs	r3, #22
 8024b6c:	6003      	str	r3, [r0, #0]
 8024b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8024b72:	bd38      	pop	{r3, r4, r5, pc}
 8024b74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024b76:	b112      	cbz	r2, 8024b7e <_raise_r+0x1e>
 8024b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024b7c:	b94b      	cbnz	r3, 8024b92 <_raise_r+0x32>
 8024b7e:	4620      	mov	r0, r4
 8024b80:	f000 f830 	bl	8024be4 <_getpid_r>
 8024b84:	462a      	mov	r2, r5
 8024b86:	4601      	mov	r1, r0
 8024b88:	4620      	mov	r0, r4
 8024b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024b8e:	f000 b817 	b.w	8024bc0 <_kill_r>
 8024b92:	2b01      	cmp	r3, #1
 8024b94:	d00a      	beq.n	8024bac <_raise_r+0x4c>
 8024b96:	1c59      	adds	r1, r3, #1
 8024b98:	d103      	bne.n	8024ba2 <_raise_r+0x42>
 8024b9a:	2316      	movs	r3, #22
 8024b9c:	6003      	str	r3, [r0, #0]
 8024b9e:	2001      	movs	r0, #1
 8024ba0:	e7e7      	b.n	8024b72 <_raise_r+0x12>
 8024ba2:	2400      	movs	r4, #0
 8024ba4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024ba8:	4628      	mov	r0, r5
 8024baa:	4798      	blx	r3
 8024bac:	2000      	movs	r0, #0
 8024bae:	e7e0      	b.n	8024b72 <_raise_r+0x12>

08024bb0 <raise>:
 8024bb0:	4b02      	ldr	r3, [pc, #8]	; (8024bbc <raise+0xc>)
 8024bb2:	4601      	mov	r1, r0
 8024bb4:	6818      	ldr	r0, [r3, #0]
 8024bb6:	f7ff bfd3 	b.w	8024b60 <_raise_r>
 8024bba:	bf00      	nop
 8024bbc:	2000002c 	.word	0x2000002c

08024bc0 <_kill_r>:
 8024bc0:	b538      	push	{r3, r4, r5, lr}
 8024bc2:	4d07      	ldr	r5, [pc, #28]	; (8024be0 <_kill_r+0x20>)
 8024bc4:	2300      	movs	r3, #0
 8024bc6:	4604      	mov	r4, r0
 8024bc8:	4608      	mov	r0, r1
 8024bca:	4611      	mov	r1, r2
 8024bcc:	602b      	str	r3, [r5, #0]
 8024bce:	f7f4 fb4f 	bl	8019270 <_kill>
 8024bd2:	1c43      	adds	r3, r0, #1
 8024bd4:	d102      	bne.n	8024bdc <_kill_r+0x1c>
 8024bd6:	682b      	ldr	r3, [r5, #0]
 8024bd8:	b103      	cbz	r3, 8024bdc <_kill_r+0x1c>
 8024bda:	6023      	str	r3, [r4, #0]
 8024bdc:	bd38      	pop	{r3, r4, r5, pc}
 8024bde:	bf00      	nop
 8024be0:	2000fddc 	.word	0x2000fddc

08024be4 <_getpid_r>:
 8024be4:	f7f4 bb3c 	b.w	8019260 <_getpid>

08024be8 <ceil>:
 8024be8:	ec51 0b10 	vmov	r0, r1, d0
 8024bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024bf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024bf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024bf8:	2e13      	cmp	r6, #19
 8024bfa:	ee10 5a10 	vmov	r5, s0
 8024bfe:	ee10 8a10 	vmov	r8, s0
 8024c02:	460c      	mov	r4, r1
 8024c04:	dc30      	bgt.n	8024c68 <ceil+0x80>
 8024c06:	2e00      	cmp	r6, #0
 8024c08:	da12      	bge.n	8024c30 <ceil+0x48>
 8024c0a:	a335      	add	r3, pc, #212	; (adr r3, 8024ce0 <ceil+0xf8>)
 8024c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c10:	f7db fb64 	bl	80002dc <__adddf3>
 8024c14:	2200      	movs	r2, #0
 8024c16:	2300      	movs	r3, #0
 8024c18:	f7db ffa6 	bl	8000b68 <__aeabi_dcmpgt>
 8024c1c:	b128      	cbz	r0, 8024c2a <ceil+0x42>
 8024c1e:	2c00      	cmp	r4, #0
 8024c20:	db55      	blt.n	8024cce <ceil+0xe6>
 8024c22:	432c      	orrs	r4, r5
 8024c24:	d057      	beq.n	8024cd6 <ceil+0xee>
 8024c26:	4c30      	ldr	r4, [pc, #192]	; (8024ce8 <ceil+0x100>)
 8024c28:	2500      	movs	r5, #0
 8024c2a:	4621      	mov	r1, r4
 8024c2c:	4628      	mov	r0, r5
 8024c2e:	e025      	b.n	8024c7c <ceil+0x94>
 8024c30:	4f2e      	ldr	r7, [pc, #184]	; (8024cec <ceil+0x104>)
 8024c32:	4137      	asrs	r7, r6
 8024c34:	ea01 0307 	and.w	r3, r1, r7
 8024c38:	4303      	orrs	r3, r0
 8024c3a:	d01f      	beq.n	8024c7c <ceil+0x94>
 8024c3c:	a328      	add	r3, pc, #160	; (adr r3, 8024ce0 <ceil+0xf8>)
 8024c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c42:	f7db fb4b 	bl	80002dc <__adddf3>
 8024c46:	2200      	movs	r2, #0
 8024c48:	2300      	movs	r3, #0
 8024c4a:	f7db ff8d 	bl	8000b68 <__aeabi_dcmpgt>
 8024c4e:	2800      	cmp	r0, #0
 8024c50:	d0eb      	beq.n	8024c2a <ceil+0x42>
 8024c52:	2c00      	cmp	r4, #0
 8024c54:	bfc2      	ittt	gt
 8024c56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8024c5a:	fa43 f606 	asrgt.w	r6, r3, r6
 8024c5e:	19a4      	addgt	r4, r4, r6
 8024c60:	ea24 0407 	bic.w	r4, r4, r7
 8024c64:	2500      	movs	r5, #0
 8024c66:	e7e0      	b.n	8024c2a <ceil+0x42>
 8024c68:	2e33      	cmp	r6, #51	; 0x33
 8024c6a:	dd0b      	ble.n	8024c84 <ceil+0x9c>
 8024c6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024c70:	d104      	bne.n	8024c7c <ceil+0x94>
 8024c72:	ee10 2a10 	vmov	r2, s0
 8024c76:	460b      	mov	r3, r1
 8024c78:	f7db fb30 	bl	80002dc <__adddf3>
 8024c7c:	ec41 0b10 	vmov	d0, r0, r1
 8024c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024c88:	f04f 33ff 	mov.w	r3, #4294967295
 8024c8c:	fa23 f707 	lsr.w	r7, r3, r7
 8024c90:	4207      	tst	r7, r0
 8024c92:	d0f3      	beq.n	8024c7c <ceil+0x94>
 8024c94:	a312      	add	r3, pc, #72	; (adr r3, 8024ce0 <ceil+0xf8>)
 8024c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c9a:	f7db fb1f 	bl	80002dc <__adddf3>
 8024c9e:	2200      	movs	r2, #0
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	f7db ff61 	bl	8000b68 <__aeabi_dcmpgt>
 8024ca6:	2800      	cmp	r0, #0
 8024ca8:	d0bf      	beq.n	8024c2a <ceil+0x42>
 8024caa:	2c00      	cmp	r4, #0
 8024cac:	dd02      	ble.n	8024cb4 <ceil+0xcc>
 8024cae:	2e14      	cmp	r6, #20
 8024cb0:	d103      	bne.n	8024cba <ceil+0xd2>
 8024cb2:	3401      	adds	r4, #1
 8024cb4:	ea25 0507 	bic.w	r5, r5, r7
 8024cb8:	e7b7      	b.n	8024c2a <ceil+0x42>
 8024cba:	2301      	movs	r3, #1
 8024cbc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024cc0:	fa03 f606 	lsl.w	r6, r3, r6
 8024cc4:	4435      	add	r5, r6
 8024cc6:	4545      	cmp	r5, r8
 8024cc8:	bf38      	it	cc
 8024cca:	18e4      	addcc	r4, r4, r3
 8024ccc:	e7f2      	b.n	8024cb4 <ceil+0xcc>
 8024cce:	2500      	movs	r5, #0
 8024cd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8024cd4:	e7a9      	b.n	8024c2a <ceil+0x42>
 8024cd6:	4625      	mov	r5, r4
 8024cd8:	e7a7      	b.n	8024c2a <ceil+0x42>
 8024cda:	bf00      	nop
 8024cdc:	f3af 8000 	nop.w
 8024ce0:	8800759c 	.word	0x8800759c
 8024ce4:	7e37e43c 	.word	0x7e37e43c
 8024ce8:	3ff00000 	.word	0x3ff00000
 8024cec:	000fffff 	.word	0x000fffff

08024cf0 <cos>:
 8024cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024cf2:	ec53 2b10 	vmov	r2, r3, d0
 8024cf6:	4826      	ldr	r0, [pc, #152]	; (8024d90 <cos+0xa0>)
 8024cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024cfc:	4281      	cmp	r1, r0
 8024cfe:	dc06      	bgt.n	8024d0e <cos+0x1e>
 8024d00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8024d88 <cos+0x98>
 8024d04:	b005      	add	sp, #20
 8024d06:	f85d eb04 	ldr.w	lr, [sp], #4
 8024d0a:	f000 bc75 	b.w	80255f8 <__kernel_cos>
 8024d0e:	4821      	ldr	r0, [pc, #132]	; (8024d94 <cos+0xa4>)
 8024d10:	4281      	cmp	r1, r0
 8024d12:	dd09      	ble.n	8024d28 <cos+0x38>
 8024d14:	ee10 0a10 	vmov	r0, s0
 8024d18:	4619      	mov	r1, r3
 8024d1a:	f7db fadd 	bl	80002d8 <__aeabi_dsub>
 8024d1e:	ec41 0b10 	vmov	d0, r0, r1
 8024d22:	b005      	add	sp, #20
 8024d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8024d28:	4668      	mov	r0, sp
 8024d2a:	f000 fa59 	bl	80251e0 <__ieee754_rem_pio2>
 8024d2e:	f000 0003 	and.w	r0, r0, #3
 8024d32:	2801      	cmp	r0, #1
 8024d34:	d00b      	beq.n	8024d4e <cos+0x5e>
 8024d36:	2802      	cmp	r0, #2
 8024d38:	d016      	beq.n	8024d68 <cos+0x78>
 8024d3a:	b9e0      	cbnz	r0, 8024d76 <cos+0x86>
 8024d3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d40:	ed9d 0b00 	vldr	d0, [sp]
 8024d44:	f000 fc58 	bl	80255f8 <__kernel_cos>
 8024d48:	ec51 0b10 	vmov	r0, r1, d0
 8024d4c:	e7e7      	b.n	8024d1e <cos+0x2e>
 8024d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d52:	ed9d 0b00 	vldr	d0, [sp]
 8024d56:	f001 f867 	bl	8025e28 <__kernel_sin>
 8024d5a:	ec53 2b10 	vmov	r2, r3, d0
 8024d5e:	ee10 0a10 	vmov	r0, s0
 8024d62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024d66:	e7da      	b.n	8024d1e <cos+0x2e>
 8024d68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d6c:	ed9d 0b00 	vldr	d0, [sp]
 8024d70:	f000 fc42 	bl	80255f8 <__kernel_cos>
 8024d74:	e7f1      	b.n	8024d5a <cos+0x6a>
 8024d76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024d7a:	ed9d 0b00 	vldr	d0, [sp]
 8024d7e:	2001      	movs	r0, #1
 8024d80:	f001 f852 	bl	8025e28 <__kernel_sin>
 8024d84:	e7e0      	b.n	8024d48 <cos+0x58>
 8024d86:	bf00      	nop
	...
 8024d90:	3fe921fb 	.word	0x3fe921fb
 8024d94:	7fefffff 	.word	0x7fefffff

08024d98 <sin>:
 8024d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024d9a:	ec53 2b10 	vmov	r2, r3, d0
 8024d9e:	4828      	ldr	r0, [pc, #160]	; (8024e40 <sin+0xa8>)
 8024da0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024da4:	4281      	cmp	r1, r0
 8024da6:	dc07      	bgt.n	8024db8 <sin+0x20>
 8024da8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8024e38 <sin+0xa0>
 8024dac:	2000      	movs	r0, #0
 8024dae:	b005      	add	sp, #20
 8024db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8024db4:	f001 b838 	b.w	8025e28 <__kernel_sin>
 8024db8:	4822      	ldr	r0, [pc, #136]	; (8024e44 <sin+0xac>)
 8024dba:	4281      	cmp	r1, r0
 8024dbc:	dd09      	ble.n	8024dd2 <sin+0x3a>
 8024dbe:	ee10 0a10 	vmov	r0, s0
 8024dc2:	4619      	mov	r1, r3
 8024dc4:	f7db fa88 	bl	80002d8 <__aeabi_dsub>
 8024dc8:	ec41 0b10 	vmov	d0, r0, r1
 8024dcc:	b005      	add	sp, #20
 8024dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8024dd2:	4668      	mov	r0, sp
 8024dd4:	f000 fa04 	bl	80251e0 <__ieee754_rem_pio2>
 8024dd8:	f000 0003 	and.w	r0, r0, #3
 8024ddc:	2801      	cmp	r0, #1
 8024dde:	d00c      	beq.n	8024dfa <sin+0x62>
 8024de0:	2802      	cmp	r0, #2
 8024de2:	d011      	beq.n	8024e08 <sin+0x70>
 8024de4:	b9f0      	cbnz	r0, 8024e24 <sin+0x8c>
 8024de6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024dea:	ed9d 0b00 	vldr	d0, [sp]
 8024dee:	2001      	movs	r0, #1
 8024df0:	f001 f81a 	bl	8025e28 <__kernel_sin>
 8024df4:	ec51 0b10 	vmov	r0, r1, d0
 8024df8:	e7e6      	b.n	8024dc8 <sin+0x30>
 8024dfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024dfe:	ed9d 0b00 	vldr	d0, [sp]
 8024e02:	f000 fbf9 	bl	80255f8 <__kernel_cos>
 8024e06:	e7f5      	b.n	8024df4 <sin+0x5c>
 8024e08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024e0c:	ed9d 0b00 	vldr	d0, [sp]
 8024e10:	2001      	movs	r0, #1
 8024e12:	f001 f809 	bl	8025e28 <__kernel_sin>
 8024e16:	ec53 2b10 	vmov	r2, r3, d0
 8024e1a:	ee10 0a10 	vmov	r0, s0
 8024e1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024e22:	e7d1      	b.n	8024dc8 <sin+0x30>
 8024e24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024e28:	ed9d 0b00 	vldr	d0, [sp]
 8024e2c:	f000 fbe4 	bl	80255f8 <__kernel_cos>
 8024e30:	e7f1      	b.n	8024e16 <sin+0x7e>
 8024e32:	bf00      	nop
 8024e34:	f3af 8000 	nop.w
	...
 8024e40:	3fe921fb 	.word	0x3fe921fb
 8024e44:	7fefffff 	.word	0x7fefffff

08024e48 <exp>:
 8024e48:	b538      	push	{r3, r4, r5, lr}
 8024e4a:	ed2d 8b02 	vpush	{d8}
 8024e4e:	ec55 4b10 	vmov	r4, r5, d0
 8024e52:	f000 f841 	bl	8024ed8 <__ieee754_exp>
 8024e56:	eeb0 8a40 	vmov.f32	s16, s0
 8024e5a:	eef0 8a60 	vmov.f32	s17, s1
 8024e5e:	ec45 4b10 	vmov	d0, r4, r5
 8024e62:	f001 f8d8 	bl	8026016 <finite>
 8024e66:	b168      	cbz	r0, 8024e84 <exp+0x3c>
 8024e68:	a317      	add	r3, pc, #92	; (adr r3, 8024ec8 <exp+0x80>)
 8024e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e6e:	4620      	mov	r0, r4
 8024e70:	4629      	mov	r1, r5
 8024e72:	f7db fe79 	bl	8000b68 <__aeabi_dcmpgt>
 8024e76:	b160      	cbz	r0, 8024e92 <exp+0x4a>
 8024e78:	f7fd f884 	bl	8021f84 <__errno>
 8024e7c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8024eb8 <exp+0x70>
 8024e80:	2322      	movs	r3, #34	; 0x22
 8024e82:	6003      	str	r3, [r0, #0]
 8024e84:	eeb0 0a48 	vmov.f32	s0, s16
 8024e88:	eef0 0a68 	vmov.f32	s1, s17
 8024e8c:	ecbd 8b02 	vpop	{d8}
 8024e90:	bd38      	pop	{r3, r4, r5, pc}
 8024e92:	a30f      	add	r3, pc, #60	; (adr r3, 8024ed0 <exp+0x88>)
 8024e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e98:	4620      	mov	r0, r4
 8024e9a:	4629      	mov	r1, r5
 8024e9c:	f7db fe46 	bl	8000b2c <__aeabi_dcmplt>
 8024ea0:	2800      	cmp	r0, #0
 8024ea2:	d0ef      	beq.n	8024e84 <exp+0x3c>
 8024ea4:	f7fd f86e 	bl	8021f84 <__errno>
 8024ea8:	2322      	movs	r3, #34	; 0x22
 8024eaa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8024ec0 <exp+0x78>
 8024eae:	6003      	str	r3, [r0, #0]
 8024eb0:	e7e8      	b.n	8024e84 <exp+0x3c>
 8024eb2:	bf00      	nop
 8024eb4:	f3af 8000 	nop.w
 8024eb8:	00000000 	.word	0x00000000
 8024ebc:	7ff00000 	.word	0x7ff00000
	...
 8024ec8:	fefa39ef 	.word	0xfefa39ef
 8024ecc:	40862e42 	.word	0x40862e42
 8024ed0:	d52d3051 	.word	0xd52d3051
 8024ed4:	c0874910 	.word	0xc0874910

08024ed8 <__ieee754_exp>:
 8024ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024edc:	ec55 4b10 	vmov	r4, r5, d0
 8024ee0:	49b5      	ldr	r1, [pc, #724]	; (80251b8 <__ieee754_exp+0x2e0>)
 8024ee2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024ee6:	428b      	cmp	r3, r1
 8024ee8:	ed2d 8b04 	vpush	{d8-d9}
 8024eec:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8024ef0:	d93d      	bls.n	8024f6e <__ieee754_exp+0x96>
 8024ef2:	49b2      	ldr	r1, [pc, #712]	; (80251bc <__ieee754_exp+0x2e4>)
 8024ef4:	428b      	cmp	r3, r1
 8024ef6:	d918      	bls.n	8024f2a <__ieee754_exp+0x52>
 8024ef8:	ee10 3a10 	vmov	r3, s0
 8024efc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8024f00:	4313      	orrs	r3, r2
 8024f02:	d009      	beq.n	8024f18 <__ieee754_exp+0x40>
 8024f04:	ee10 2a10 	vmov	r2, s0
 8024f08:	462b      	mov	r3, r5
 8024f0a:	4620      	mov	r0, r4
 8024f0c:	4629      	mov	r1, r5
 8024f0e:	f7db f9e5 	bl	80002dc <__adddf3>
 8024f12:	4604      	mov	r4, r0
 8024f14:	460d      	mov	r5, r1
 8024f16:	e002      	b.n	8024f1e <__ieee754_exp+0x46>
 8024f18:	b10e      	cbz	r6, 8024f1e <__ieee754_exp+0x46>
 8024f1a:	2400      	movs	r4, #0
 8024f1c:	2500      	movs	r5, #0
 8024f1e:	ecbd 8b04 	vpop	{d8-d9}
 8024f22:	ec45 4b10 	vmov	d0, r4, r5
 8024f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024f2a:	a38d      	add	r3, pc, #564	; (adr r3, 8025160 <__ieee754_exp+0x288>)
 8024f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f30:	ee10 0a10 	vmov	r0, s0
 8024f34:	4629      	mov	r1, r5
 8024f36:	f7db fe17 	bl	8000b68 <__aeabi_dcmpgt>
 8024f3a:	4607      	mov	r7, r0
 8024f3c:	b130      	cbz	r0, 8024f4c <__ieee754_exp+0x74>
 8024f3e:	ecbd 8b04 	vpop	{d8-d9}
 8024f42:	2000      	movs	r0, #0
 8024f44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024f48:	f001 b853 	b.w	8025ff2 <__math_oflow>
 8024f4c:	a386      	add	r3, pc, #536	; (adr r3, 8025168 <__ieee754_exp+0x290>)
 8024f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f52:	4620      	mov	r0, r4
 8024f54:	4629      	mov	r1, r5
 8024f56:	f7db fde9 	bl	8000b2c <__aeabi_dcmplt>
 8024f5a:	2800      	cmp	r0, #0
 8024f5c:	f000 808b 	beq.w	8025076 <__ieee754_exp+0x19e>
 8024f60:	ecbd 8b04 	vpop	{d8-d9}
 8024f64:	4638      	mov	r0, r7
 8024f66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024f6a:	f001 b839 	b.w	8025fe0 <__math_uflow>
 8024f6e:	4a94      	ldr	r2, [pc, #592]	; (80251c0 <__ieee754_exp+0x2e8>)
 8024f70:	4293      	cmp	r3, r2
 8024f72:	f240 80ac 	bls.w	80250ce <__ieee754_exp+0x1f6>
 8024f76:	4a93      	ldr	r2, [pc, #588]	; (80251c4 <__ieee754_exp+0x2ec>)
 8024f78:	4293      	cmp	r3, r2
 8024f7a:	d87c      	bhi.n	8025076 <__ieee754_exp+0x19e>
 8024f7c:	4b92      	ldr	r3, [pc, #584]	; (80251c8 <__ieee754_exp+0x2f0>)
 8024f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f86:	ee10 0a10 	vmov	r0, s0
 8024f8a:	4629      	mov	r1, r5
 8024f8c:	f7db f9a4 	bl	80002d8 <__aeabi_dsub>
 8024f90:	4b8e      	ldr	r3, [pc, #568]	; (80251cc <__ieee754_exp+0x2f4>)
 8024f92:	00f7      	lsls	r7, r6, #3
 8024f94:	443b      	add	r3, r7
 8024f96:	ed93 7b00 	vldr	d7, [r3]
 8024f9a:	f1c6 0a01 	rsb	sl, r6, #1
 8024f9e:	4680      	mov	r8, r0
 8024fa0:	4689      	mov	r9, r1
 8024fa2:	ebaa 0a06 	sub.w	sl, sl, r6
 8024fa6:	eeb0 8a47 	vmov.f32	s16, s14
 8024faa:	eef0 8a67 	vmov.f32	s17, s15
 8024fae:	ec53 2b18 	vmov	r2, r3, d8
 8024fb2:	4640      	mov	r0, r8
 8024fb4:	4649      	mov	r1, r9
 8024fb6:	f7db f98f 	bl	80002d8 <__aeabi_dsub>
 8024fba:	4604      	mov	r4, r0
 8024fbc:	460d      	mov	r5, r1
 8024fbe:	4622      	mov	r2, r4
 8024fc0:	462b      	mov	r3, r5
 8024fc2:	4620      	mov	r0, r4
 8024fc4:	4629      	mov	r1, r5
 8024fc6:	f7db fb3f 	bl	8000648 <__aeabi_dmul>
 8024fca:	a369      	add	r3, pc, #420	; (adr r3, 8025170 <__ieee754_exp+0x298>)
 8024fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fd0:	4606      	mov	r6, r0
 8024fd2:	460f      	mov	r7, r1
 8024fd4:	f7db fb38 	bl	8000648 <__aeabi_dmul>
 8024fd8:	a367      	add	r3, pc, #412	; (adr r3, 8025178 <__ieee754_exp+0x2a0>)
 8024fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fde:	f7db f97b 	bl	80002d8 <__aeabi_dsub>
 8024fe2:	4632      	mov	r2, r6
 8024fe4:	463b      	mov	r3, r7
 8024fe6:	f7db fb2f 	bl	8000648 <__aeabi_dmul>
 8024fea:	a365      	add	r3, pc, #404	; (adr r3, 8025180 <__ieee754_exp+0x2a8>)
 8024fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ff0:	f7db f974 	bl	80002dc <__adddf3>
 8024ff4:	4632      	mov	r2, r6
 8024ff6:	463b      	mov	r3, r7
 8024ff8:	f7db fb26 	bl	8000648 <__aeabi_dmul>
 8024ffc:	a362      	add	r3, pc, #392	; (adr r3, 8025188 <__ieee754_exp+0x2b0>)
 8024ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025002:	f7db f969 	bl	80002d8 <__aeabi_dsub>
 8025006:	4632      	mov	r2, r6
 8025008:	463b      	mov	r3, r7
 802500a:	f7db fb1d 	bl	8000648 <__aeabi_dmul>
 802500e:	a360      	add	r3, pc, #384	; (adr r3, 8025190 <__ieee754_exp+0x2b8>)
 8025010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025014:	f7db f962 	bl	80002dc <__adddf3>
 8025018:	4632      	mov	r2, r6
 802501a:	463b      	mov	r3, r7
 802501c:	f7db fb14 	bl	8000648 <__aeabi_dmul>
 8025020:	4602      	mov	r2, r0
 8025022:	460b      	mov	r3, r1
 8025024:	4620      	mov	r0, r4
 8025026:	4629      	mov	r1, r5
 8025028:	f7db f956 	bl	80002d8 <__aeabi_dsub>
 802502c:	4602      	mov	r2, r0
 802502e:	460b      	mov	r3, r1
 8025030:	4606      	mov	r6, r0
 8025032:	460f      	mov	r7, r1
 8025034:	4620      	mov	r0, r4
 8025036:	4629      	mov	r1, r5
 8025038:	f7db fb06 	bl	8000648 <__aeabi_dmul>
 802503c:	ec41 0b19 	vmov	d9, r0, r1
 8025040:	f1ba 0f00 	cmp.w	sl, #0
 8025044:	d15d      	bne.n	8025102 <__ieee754_exp+0x22a>
 8025046:	2200      	movs	r2, #0
 8025048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802504c:	4630      	mov	r0, r6
 802504e:	4639      	mov	r1, r7
 8025050:	f7db f942 	bl	80002d8 <__aeabi_dsub>
 8025054:	4602      	mov	r2, r0
 8025056:	460b      	mov	r3, r1
 8025058:	ec51 0b19 	vmov	r0, r1, d9
 802505c:	f7db fc1e 	bl	800089c <__aeabi_ddiv>
 8025060:	4622      	mov	r2, r4
 8025062:	462b      	mov	r3, r5
 8025064:	f7db f938 	bl	80002d8 <__aeabi_dsub>
 8025068:	4602      	mov	r2, r0
 802506a:	460b      	mov	r3, r1
 802506c:	2000      	movs	r0, #0
 802506e:	4958      	ldr	r1, [pc, #352]	; (80251d0 <__ieee754_exp+0x2f8>)
 8025070:	f7db f932 	bl	80002d8 <__aeabi_dsub>
 8025074:	e74d      	b.n	8024f12 <__ieee754_exp+0x3a>
 8025076:	4857      	ldr	r0, [pc, #348]	; (80251d4 <__ieee754_exp+0x2fc>)
 8025078:	a347      	add	r3, pc, #284	; (adr r3, 8025198 <__ieee754_exp+0x2c0>)
 802507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802507e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8025082:	4629      	mov	r1, r5
 8025084:	4620      	mov	r0, r4
 8025086:	f7db fadf 	bl	8000648 <__aeabi_dmul>
 802508a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802508e:	f7db f925 	bl	80002dc <__adddf3>
 8025092:	f7db fd89 	bl	8000ba8 <__aeabi_d2iz>
 8025096:	4682      	mov	sl, r0
 8025098:	f7db fa6c 	bl	8000574 <__aeabi_i2d>
 802509c:	a340      	add	r3, pc, #256	; (adr r3, 80251a0 <__ieee754_exp+0x2c8>)
 802509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250a2:	4606      	mov	r6, r0
 80250a4:	460f      	mov	r7, r1
 80250a6:	f7db facf 	bl	8000648 <__aeabi_dmul>
 80250aa:	4602      	mov	r2, r0
 80250ac:	460b      	mov	r3, r1
 80250ae:	4620      	mov	r0, r4
 80250b0:	4629      	mov	r1, r5
 80250b2:	f7db f911 	bl	80002d8 <__aeabi_dsub>
 80250b6:	a33c      	add	r3, pc, #240	; (adr r3, 80251a8 <__ieee754_exp+0x2d0>)
 80250b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250bc:	4680      	mov	r8, r0
 80250be:	4689      	mov	r9, r1
 80250c0:	4630      	mov	r0, r6
 80250c2:	4639      	mov	r1, r7
 80250c4:	f7db fac0 	bl	8000648 <__aeabi_dmul>
 80250c8:	ec41 0b18 	vmov	d8, r0, r1
 80250cc:	e76f      	b.n	8024fae <__ieee754_exp+0xd6>
 80250ce:	4a42      	ldr	r2, [pc, #264]	; (80251d8 <__ieee754_exp+0x300>)
 80250d0:	4293      	cmp	r3, r2
 80250d2:	d811      	bhi.n	80250f8 <__ieee754_exp+0x220>
 80250d4:	a336      	add	r3, pc, #216	; (adr r3, 80251b0 <__ieee754_exp+0x2d8>)
 80250d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250da:	ee10 0a10 	vmov	r0, s0
 80250de:	4629      	mov	r1, r5
 80250e0:	f7db f8fc 	bl	80002dc <__adddf3>
 80250e4:	4b3a      	ldr	r3, [pc, #232]	; (80251d0 <__ieee754_exp+0x2f8>)
 80250e6:	2200      	movs	r2, #0
 80250e8:	f7db fd3e 	bl	8000b68 <__aeabi_dcmpgt>
 80250ec:	b138      	cbz	r0, 80250fe <__ieee754_exp+0x226>
 80250ee:	4b38      	ldr	r3, [pc, #224]	; (80251d0 <__ieee754_exp+0x2f8>)
 80250f0:	2200      	movs	r2, #0
 80250f2:	4620      	mov	r0, r4
 80250f4:	4629      	mov	r1, r5
 80250f6:	e70a      	b.n	8024f0e <__ieee754_exp+0x36>
 80250f8:	f04f 0a00 	mov.w	sl, #0
 80250fc:	e75f      	b.n	8024fbe <__ieee754_exp+0xe6>
 80250fe:	4682      	mov	sl, r0
 8025100:	e75d      	b.n	8024fbe <__ieee754_exp+0xe6>
 8025102:	4632      	mov	r2, r6
 8025104:	463b      	mov	r3, r7
 8025106:	2000      	movs	r0, #0
 8025108:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802510c:	f7db f8e4 	bl	80002d8 <__aeabi_dsub>
 8025110:	4602      	mov	r2, r0
 8025112:	460b      	mov	r3, r1
 8025114:	ec51 0b19 	vmov	r0, r1, d9
 8025118:	f7db fbc0 	bl	800089c <__aeabi_ddiv>
 802511c:	4602      	mov	r2, r0
 802511e:	460b      	mov	r3, r1
 8025120:	ec51 0b18 	vmov	r0, r1, d8
 8025124:	f7db f8d8 	bl	80002d8 <__aeabi_dsub>
 8025128:	4642      	mov	r2, r8
 802512a:	464b      	mov	r3, r9
 802512c:	f7db f8d4 	bl	80002d8 <__aeabi_dsub>
 8025130:	4602      	mov	r2, r0
 8025132:	460b      	mov	r3, r1
 8025134:	2000      	movs	r0, #0
 8025136:	4926      	ldr	r1, [pc, #152]	; (80251d0 <__ieee754_exp+0x2f8>)
 8025138:	f7db f8ce 	bl	80002d8 <__aeabi_dsub>
 802513c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8025140:	4592      	cmp	sl, r2
 8025142:	db02      	blt.n	802514a <__ieee754_exp+0x272>
 8025144:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8025148:	e6e3      	b.n	8024f12 <__ieee754_exp+0x3a>
 802514a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802514e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8025152:	2200      	movs	r2, #0
 8025154:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8025158:	f7db fa76 	bl	8000648 <__aeabi_dmul>
 802515c:	e6d9      	b.n	8024f12 <__ieee754_exp+0x3a>
 802515e:	bf00      	nop
 8025160:	fefa39ef 	.word	0xfefa39ef
 8025164:	40862e42 	.word	0x40862e42
 8025168:	d52d3051 	.word	0xd52d3051
 802516c:	c0874910 	.word	0xc0874910
 8025170:	72bea4d0 	.word	0x72bea4d0
 8025174:	3e663769 	.word	0x3e663769
 8025178:	c5d26bf1 	.word	0xc5d26bf1
 802517c:	3ebbbd41 	.word	0x3ebbbd41
 8025180:	af25de2c 	.word	0xaf25de2c
 8025184:	3f11566a 	.word	0x3f11566a
 8025188:	16bebd93 	.word	0x16bebd93
 802518c:	3f66c16c 	.word	0x3f66c16c
 8025190:	5555553e 	.word	0x5555553e
 8025194:	3fc55555 	.word	0x3fc55555
 8025198:	652b82fe 	.word	0x652b82fe
 802519c:	3ff71547 	.word	0x3ff71547
 80251a0:	fee00000 	.word	0xfee00000
 80251a4:	3fe62e42 	.word	0x3fe62e42
 80251a8:	35793c76 	.word	0x35793c76
 80251ac:	3dea39ef 	.word	0x3dea39ef
 80251b0:	8800759c 	.word	0x8800759c
 80251b4:	7e37e43c 	.word	0x7e37e43c
 80251b8:	40862e41 	.word	0x40862e41
 80251bc:	7fefffff 	.word	0x7fefffff
 80251c0:	3fd62e42 	.word	0x3fd62e42
 80251c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80251c8:	08026990 	.word	0x08026990
 80251cc:	080269a0 	.word	0x080269a0
 80251d0:	3ff00000 	.word	0x3ff00000
 80251d4:	08026980 	.word	0x08026980
 80251d8:	3defffff 	.word	0x3defffff
 80251dc:	00000000 	.word	0x00000000

080251e0 <__ieee754_rem_pio2>:
 80251e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251e4:	ed2d 8b02 	vpush	{d8}
 80251e8:	ec55 4b10 	vmov	r4, r5, d0
 80251ec:	4bca      	ldr	r3, [pc, #808]	; (8025518 <__ieee754_rem_pio2+0x338>)
 80251ee:	b08b      	sub	sp, #44	; 0x2c
 80251f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80251f4:	4598      	cmp	r8, r3
 80251f6:	4682      	mov	sl, r0
 80251f8:	9502      	str	r5, [sp, #8]
 80251fa:	dc08      	bgt.n	802520e <__ieee754_rem_pio2+0x2e>
 80251fc:	2200      	movs	r2, #0
 80251fe:	2300      	movs	r3, #0
 8025200:	ed80 0b00 	vstr	d0, [r0]
 8025204:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8025208:	f04f 0b00 	mov.w	fp, #0
 802520c:	e028      	b.n	8025260 <__ieee754_rem_pio2+0x80>
 802520e:	4bc3      	ldr	r3, [pc, #780]	; (802551c <__ieee754_rem_pio2+0x33c>)
 8025210:	4598      	cmp	r8, r3
 8025212:	dc78      	bgt.n	8025306 <__ieee754_rem_pio2+0x126>
 8025214:	9b02      	ldr	r3, [sp, #8]
 8025216:	4ec2      	ldr	r6, [pc, #776]	; (8025520 <__ieee754_rem_pio2+0x340>)
 8025218:	2b00      	cmp	r3, #0
 802521a:	ee10 0a10 	vmov	r0, s0
 802521e:	a3b0      	add	r3, pc, #704	; (adr r3, 80254e0 <__ieee754_rem_pio2+0x300>)
 8025220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025224:	4629      	mov	r1, r5
 8025226:	dd39      	ble.n	802529c <__ieee754_rem_pio2+0xbc>
 8025228:	f7db f856 	bl	80002d8 <__aeabi_dsub>
 802522c:	45b0      	cmp	r8, r6
 802522e:	4604      	mov	r4, r0
 8025230:	460d      	mov	r5, r1
 8025232:	d01b      	beq.n	802526c <__ieee754_rem_pio2+0x8c>
 8025234:	a3ac      	add	r3, pc, #688	; (adr r3, 80254e8 <__ieee754_rem_pio2+0x308>)
 8025236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802523a:	f7db f84d 	bl	80002d8 <__aeabi_dsub>
 802523e:	4602      	mov	r2, r0
 8025240:	460b      	mov	r3, r1
 8025242:	e9ca 2300 	strd	r2, r3, [sl]
 8025246:	4620      	mov	r0, r4
 8025248:	4629      	mov	r1, r5
 802524a:	f7db f845 	bl	80002d8 <__aeabi_dsub>
 802524e:	a3a6      	add	r3, pc, #664	; (adr r3, 80254e8 <__ieee754_rem_pio2+0x308>)
 8025250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025254:	f7db f840 	bl	80002d8 <__aeabi_dsub>
 8025258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802525c:	f04f 0b01 	mov.w	fp, #1
 8025260:	4658      	mov	r0, fp
 8025262:	b00b      	add	sp, #44	; 0x2c
 8025264:	ecbd 8b02 	vpop	{d8}
 8025268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802526c:	a3a0      	add	r3, pc, #640	; (adr r3, 80254f0 <__ieee754_rem_pio2+0x310>)
 802526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025272:	f7db f831 	bl	80002d8 <__aeabi_dsub>
 8025276:	a3a0      	add	r3, pc, #640	; (adr r3, 80254f8 <__ieee754_rem_pio2+0x318>)
 8025278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527c:	4604      	mov	r4, r0
 802527e:	460d      	mov	r5, r1
 8025280:	f7db f82a 	bl	80002d8 <__aeabi_dsub>
 8025284:	4602      	mov	r2, r0
 8025286:	460b      	mov	r3, r1
 8025288:	e9ca 2300 	strd	r2, r3, [sl]
 802528c:	4620      	mov	r0, r4
 802528e:	4629      	mov	r1, r5
 8025290:	f7db f822 	bl	80002d8 <__aeabi_dsub>
 8025294:	a398      	add	r3, pc, #608	; (adr r3, 80254f8 <__ieee754_rem_pio2+0x318>)
 8025296:	e9d3 2300 	ldrd	r2, r3, [r3]
 802529a:	e7db      	b.n	8025254 <__ieee754_rem_pio2+0x74>
 802529c:	f7db f81e 	bl	80002dc <__adddf3>
 80252a0:	45b0      	cmp	r8, r6
 80252a2:	4604      	mov	r4, r0
 80252a4:	460d      	mov	r5, r1
 80252a6:	d016      	beq.n	80252d6 <__ieee754_rem_pio2+0xf6>
 80252a8:	a38f      	add	r3, pc, #572	; (adr r3, 80254e8 <__ieee754_rem_pio2+0x308>)
 80252aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ae:	f7db f815 	bl	80002dc <__adddf3>
 80252b2:	4602      	mov	r2, r0
 80252b4:	460b      	mov	r3, r1
 80252b6:	e9ca 2300 	strd	r2, r3, [sl]
 80252ba:	4620      	mov	r0, r4
 80252bc:	4629      	mov	r1, r5
 80252be:	f7db f80b 	bl	80002d8 <__aeabi_dsub>
 80252c2:	a389      	add	r3, pc, #548	; (adr r3, 80254e8 <__ieee754_rem_pio2+0x308>)
 80252c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252c8:	f7db f808 	bl	80002dc <__adddf3>
 80252cc:	f04f 3bff 	mov.w	fp, #4294967295
 80252d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80252d4:	e7c4      	b.n	8025260 <__ieee754_rem_pio2+0x80>
 80252d6:	a386      	add	r3, pc, #536	; (adr r3, 80254f0 <__ieee754_rem_pio2+0x310>)
 80252d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252dc:	f7da fffe 	bl	80002dc <__adddf3>
 80252e0:	a385      	add	r3, pc, #532	; (adr r3, 80254f8 <__ieee754_rem_pio2+0x318>)
 80252e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252e6:	4604      	mov	r4, r0
 80252e8:	460d      	mov	r5, r1
 80252ea:	f7da fff7 	bl	80002dc <__adddf3>
 80252ee:	4602      	mov	r2, r0
 80252f0:	460b      	mov	r3, r1
 80252f2:	e9ca 2300 	strd	r2, r3, [sl]
 80252f6:	4620      	mov	r0, r4
 80252f8:	4629      	mov	r1, r5
 80252fa:	f7da ffed 	bl	80002d8 <__aeabi_dsub>
 80252fe:	a37e      	add	r3, pc, #504	; (adr r3, 80254f8 <__ieee754_rem_pio2+0x318>)
 8025300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025304:	e7e0      	b.n	80252c8 <__ieee754_rem_pio2+0xe8>
 8025306:	4b87      	ldr	r3, [pc, #540]	; (8025524 <__ieee754_rem_pio2+0x344>)
 8025308:	4598      	cmp	r8, r3
 802530a:	f300 80d9 	bgt.w	80254c0 <__ieee754_rem_pio2+0x2e0>
 802530e:	f000 fe79 	bl	8026004 <fabs>
 8025312:	ec55 4b10 	vmov	r4, r5, d0
 8025316:	ee10 0a10 	vmov	r0, s0
 802531a:	a379      	add	r3, pc, #484	; (adr r3, 8025500 <__ieee754_rem_pio2+0x320>)
 802531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025320:	4629      	mov	r1, r5
 8025322:	f7db f991 	bl	8000648 <__aeabi_dmul>
 8025326:	4b80      	ldr	r3, [pc, #512]	; (8025528 <__ieee754_rem_pio2+0x348>)
 8025328:	2200      	movs	r2, #0
 802532a:	f7da ffd7 	bl	80002dc <__adddf3>
 802532e:	f7db fc3b 	bl	8000ba8 <__aeabi_d2iz>
 8025332:	4683      	mov	fp, r0
 8025334:	f7db f91e 	bl	8000574 <__aeabi_i2d>
 8025338:	4602      	mov	r2, r0
 802533a:	460b      	mov	r3, r1
 802533c:	ec43 2b18 	vmov	d8, r2, r3
 8025340:	a367      	add	r3, pc, #412	; (adr r3, 80254e0 <__ieee754_rem_pio2+0x300>)
 8025342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025346:	f7db f97f 	bl	8000648 <__aeabi_dmul>
 802534a:	4602      	mov	r2, r0
 802534c:	460b      	mov	r3, r1
 802534e:	4620      	mov	r0, r4
 8025350:	4629      	mov	r1, r5
 8025352:	f7da ffc1 	bl	80002d8 <__aeabi_dsub>
 8025356:	a364      	add	r3, pc, #400	; (adr r3, 80254e8 <__ieee754_rem_pio2+0x308>)
 8025358:	e9d3 2300 	ldrd	r2, r3, [r3]
 802535c:	4606      	mov	r6, r0
 802535e:	460f      	mov	r7, r1
 8025360:	ec51 0b18 	vmov	r0, r1, d8
 8025364:	f7db f970 	bl	8000648 <__aeabi_dmul>
 8025368:	f1bb 0f1f 	cmp.w	fp, #31
 802536c:	4604      	mov	r4, r0
 802536e:	460d      	mov	r5, r1
 8025370:	dc0d      	bgt.n	802538e <__ieee754_rem_pio2+0x1ae>
 8025372:	4b6e      	ldr	r3, [pc, #440]	; (802552c <__ieee754_rem_pio2+0x34c>)
 8025374:	f10b 32ff 	add.w	r2, fp, #4294967295
 8025378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802537c:	4543      	cmp	r3, r8
 802537e:	d006      	beq.n	802538e <__ieee754_rem_pio2+0x1ae>
 8025380:	4622      	mov	r2, r4
 8025382:	462b      	mov	r3, r5
 8025384:	4630      	mov	r0, r6
 8025386:	4639      	mov	r1, r7
 8025388:	f7da ffa6 	bl	80002d8 <__aeabi_dsub>
 802538c:	e00f      	b.n	80253ae <__ieee754_rem_pio2+0x1ce>
 802538e:	462b      	mov	r3, r5
 8025390:	4622      	mov	r2, r4
 8025392:	4630      	mov	r0, r6
 8025394:	4639      	mov	r1, r7
 8025396:	f7da ff9f 	bl	80002d8 <__aeabi_dsub>
 802539a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802539e:	9303      	str	r3, [sp, #12]
 80253a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80253a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80253a8:	f1b8 0f10 	cmp.w	r8, #16
 80253ac:	dc02      	bgt.n	80253b4 <__ieee754_rem_pio2+0x1d4>
 80253ae:	e9ca 0100 	strd	r0, r1, [sl]
 80253b2:	e039      	b.n	8025428 <__ieee754_rem_pio2+0x248>
 80253b4:	a34e      	add	r3, pc, #312	; (adr r3, 80254f0 <__ieee754_rem_pio2+0x310>)
 80253b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253ba:	ec51 0b18 	vmov	r0, r1, d8
 80253be:	f7db f943 	bl	8000648 <__aeabi_dmul>
 80253c2:	4604      	mov	r4, r0
 80253c4:	460d      	mov	r5, r1
 80253c6:	4602      	mov	r2, r0
 80253c8:	460b      	mov	r3, r1
 80253ca:	4630      	mov	r0, r6
 80253cc:	4639      	mov	r1, r7
 80253ce:	f7da ff83 	bl	80002d8 <__aeabi_dsub>
 80253d2:	4602      	mov	r2, r0
 80253d4:	460b      	mov	r3, r1
 80253d6:	4680      	mov	r8, r0
 80253d8:	4689      	mov	r9, r1
 80253da:	4630      	mov	r0, r6
 80253dc:	4639      	mov	r1, r7
 80253de:	f7da ff7b 	bl	80002d8 <__aeabi_dsub>
 80253e2:	4622      	mov	r2, r4
 80253e4:	462b      	mov	r3, r5
 80253e6:	f7da ff77 	bl	80002d8 <__aeabi_dsub>
 80253ea:	a343      	add	r3, pc, #268	; (adr r3, 80254f8 <__ieee754_rem_pio2+0x318>)
 80253ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253f0:	4604      	mov	r4, r0
 80253f2:	460d      	mov	r5, r1
 80253f4:	ec51 0b18 	vmov	r0, r1, d8
 80253f8:	f7db f926 	bl	8000648 <__aeabi_dmul>
 80253fc:	4622      	mov	r2, r4
 80253fe:	462b      	mov	r3, r5
 8025400:	f7da ff6a 	bl	80002d8 <__aeabi_dsub>
 8025404:	4602      	mov	r2, r0
 8025406:	460b      	mov	r3, r1
 8025408:	4604      	mov	r4, r0
 802540a:	460d      	mov	r5, r1
 802540c:	4640      	mov	r0, r8
 802540e:	4649      	mov	r1, r9
 8025410:	f7da ff62 	bl	80002d8 <__aeabi_dsub>
 8025414:	9a03      	ldr	r2, [sp, #12]
 8025416:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802541a:	1ad3      	subs	r3, r2, r3
 802541c:	2b31      	cmp	r3, #49	; 0x31
 802541e:	dc24      	bgt.n	802546a <__ieee754_rem_pio2+0x28a>
 8025420:	e9ca 0100 	strd	r0, r1, [sl]
 8025424:	4646      	mov	r6, r8
 8025426:	464f      	mov	r7, r9
 8025428:	e9da 8900 	ldrd	r8, r9, [sl]
 802542c:	4630      	mov	r0, r6
 802542e:	4642      	mov	r2, r8
 8025430:	464b      	mov	r3, r9
 8025432:	4639      	mov	r1, r7
 8025434:	f7da ff50 	bl	80002d8 <__aeabi_dsub>
 8025438:	462b      	mov	r3, r5
 802543a:	4622      	mov	r2, r4
 802543c:	f7da ff4c 	bl	80002d8 <__aeabi_dsub>
 8025440:	9b02      	ldr	r3, [sp, #8]
 8025442:	2b00      	cmp	r3, #0
 8025444:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8025448:	f6bf af0a 	bge.w	8025260 <__ieee754_rem_pio2+0x80>
 802544c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8025450:	f8ca 3004 	str.w	r3, [sl, #4]
 8025454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025458:	f8ca 8000 	str.w	r8, [sl]
 802545c:	f8ca 0008 	str.w	r0, [sl, #8]
 8025460:	f8ca 300c 	str.w	r3, [sl, #12]
 8025464:	f1cb 0b00 	rsb	fp, fp, #0
 8025468:	e6fa      	b.n	8025260 <__ieee754_rem_pio2+0x80>
 802546a:	a327      	add	r3, pc, #156	; (adr r3, 8025508 <__ieee754_rem_pio2+0x328>)
 802546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025470:	ec51 0b18 	vmov	r0, r1, d8
 8025474:	f7db f8e8 	bl	8000648 <__aeabi_dmul>
 8025478:	4604      	mov	r4, r0
 802547a:	460d      	mov	r5, r1
 802547c:	4602      	mov	r2, r0
 802547e:	460b      	mov	r3, r1
 8025480:	4640      	mov	r0, r8
 8025482:	4649      	mov	r1, r9
 8025484:	f7da ff28 	bl	80002d8 <__aeabi_dsub>
 8025488:	4602      	mov	r2, r0
 802548a:	460b      	mov	r3, r1
 802548c:	4606      	mov	r6, r0
 802548e:	460f      	mov	r7, r1
 8025490:	4640      	mov	r0, r8
 8025492:	4649      	mov	r1, r9
 8025494:	f7da ff20 	bl	80002d8 <__aeabi_dsub>
 8025498:	4622      	mov	r2, r4
 802549a:	462b      	mov	r3, r5
 802549c:	f7da ff1c 	bl	80002d8 <__aeabi_dsub>
 80254a0:	a31b      	add	r3, pc, #108	; (adr r3, 8025510 <__ieee754_rem_pio2+0x330>)
 80254a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254a6:	4604      	mov	r4, r0
 80254a8:	460d      	mov	r5, r1
 80254aa:	ec51 0b18 	vmov	r0, r1, d8
 80254ae:	f7db f8cb 	bl	8000648 <__aeabi_dmul>
 80254b2:	4622      	mov	r2, r4
 80254b4:	462b      	mov	r3, r5
 80254b6:	f7da ff0f 	bl	80002d8 <__aeabi_dsub>
 80254ba:	4604      	mov	r4, r0
 80254bc:	460d      	mov	r5, r1
 80254be:	e75f      	b.n	8025380 <__ieee754_rem_pio2+0x1a0>
 80254c0:	4b1b      	ldr	r3, [pc, #108]	; (8025530 <__ieee754_rem_pio2+0x350>)
 80254c2:	4598      	cmp	r8, r3
 80254c4:	dd36      	ble.n	8025534 <__ieee754_rem_pio2+0x354>
 80254c6:	ee10 2a10 	vmov	r2, s0
 80254ca:	462b      	mov	r3, r5
 80254cc:	4620      	mov	r0, r4
 80254ce:	4629      	mov	r1, r5
 80254d0:	f7da ff02 	bl	80002d8 <__aeabi_dsub>
 80254d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80254d8:	e9ca 0100 	strd	r0, r1, [sl]
 80254dc:	e694      	b.n	8025208 <__ieee754_rem_pio2+0x28>
 80254de:	bf00      	nop
 80254e0:	54400000 	.word	0x54400000
 80254e4:	3ff921fb 	.word	0x3ff921fb
 80254e8:	1a626331 	.word	0x1a626331
 80254ec:	3dd0b461 	.word	0x3dd0b461
 80254f0:	1a600000 	.word	0x1a600000
 80254f4:	3dd0b461 	.word	0x3dd0b461
 80254f8:	2e037073 	.word	0x2e037073
 80254fc:	3ba3198a 	.word	0x3ba3198a
 8025500:	6dc9c883 	.word	0x6dc9c883
 8025504:	3fe45f30 	.word	0x3fe45f30
 8025508:	2e000000 	.word	0x2e000000
 802550c:	3ba3198a 	.word	0x3ba3198a
 8025510:	252049c1 	.word	0x252049c1
 8025514:	397b839a 	.word	0x397b839a
 8025518:	3fe921fb 	.word	0x3fe921fb
 802551c:	4002d97b 	.word	0x4002d97b
 8025520:	3ff921fb 	.word	0x3ff921fb
 8025524:	413921fb 	.word	0x413921fb
 8025528:	3fe00000 	.word	0x3fe00000
 802552c:	080269b0 	.word	0x080269b0
 8025530:	7fefffff 	.word	0x7fefffff
 8025534:	ea4f 5428 	mov.w	r4, r8, asr #20
 8025538:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802553c:	ee10 0a10 	vmov	r0, s0
 8025540:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8025544:	ee10 6a10 	vmov	r6, s0
 8025548:	460f      	mov	r7, r1
 802554a:	f7db fb2d 	bl	8000ba8 <__aeabi_d2iz>
 802554e:	f7db f811 	bl	8000574 <__aeabi_i2d>
 8025552:	4602      	mov	r2, r0
 8025554:	460b      	mov	r3, r1
 8025556:	4630      	mov	r0, r6
 8025558:	4639      	mov	r1, r7
 802555a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802555e:	f7da febb 	bl	80002d8 <__aeabi_dsub>
 8025562:	4b23      	ldr	r3, [pc, #140]	; (80255f0 <__ieee754_rem_pio2+0x410>)
 8025564:	2200      	movs	r2, #0
 8025566:	f7db f86f 	bl	8000648 <__aeabi_dmul>
 802556a:	460f      	mov	r7, r1
 802556c:	4606      	mov	r6, r0
 802556e:	f7db fb1b 	bl	8000ba8 <__aeabi_d2iz>
 8025572:	f7da ffff 	bl	8000574 <__aeabi_i2d>
 8025576:	4602      	mov	r2, r0
 8025578:	460b      	mov	r3, r1
 802557a:	4630      	mov	r0, r6
 802557c:	4639      	mov	r1, r7
 802557e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025582:	f7da fea9 	bl	80002d8 <__aeabi_dsub>
 8025586:	4b1a      	ldr	r3, [pc, #104]	; (80255f0 <__ieee754_rem_pio2+0x410>)
 8025588:	2200      	movs	r2, #0
 802558a:	f7db f85d 	bl	8000648 <__aeabi_dmul>
 802558e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025592:	ad04      	add	r5, sp, #16
 8025594:	f04f 0803 	mov.w	r8, #3
 8025598:	46a9      	mov	r9, r5
 802559a:	2600      	movs	r6, #0
 802559c:	2700      	movs	r7, #0
 802559e:	4632      	mov	r2, r6
 80255a0:	463b      	mov	r3, r7
 80255a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80255a6:	46c3      	mov	fp, r8
 80255a8:	3d08      	subs	r5, #8
 80255aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80255ae:	f7db fab3 	bl	8000b18 <__aeabi_dcmpeq>
 80255b2:	2800      	cmp	r0, #0
 80255b4:	d1f3      	bne.n	802559e <__ieee754_rem_pio2+0x3be>
 80255b6:	4b0f      	ldr	r3, [pc, #60]	; (80255f4 <__ieee754_rem_pio2+0x414>)
 80255b8:	9301      	str	r3, [sp, #4]
 80255ba:	2302      	movs	r3, #2
 80255bc:	9300      	str	r3, [sp, #0]
 80255be:	4622      	mov	r2, r4
 80255c0:	465b      	mov	r3, fp
 80255c2:	4651      	mov	r1, sl
 80255c4:	4648      	mov	r0, r9
 80255c6:	f000 f8df 	bl	8025788 <__kernel_rem_pio2>
 80255ca:	9b02      	ldr	r3, [sp, #8]
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	4683      	mov	fp, r0
 80255d0:	f6bf ae46 	bge.w	8025260 <__ieee754_rem_pio2+0x80>
 80255d4:	e9da 2100 	ldrd	r2, r1, [sl]
 80255d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80255dc:	e9ca 2300 	strd	r2, r3, [sl]
 80255e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80255e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80255e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80255ec:	e73a      	b.n	8025464 <__ieee754_rem_pio2+0x284>
 80255ee:	bf00      	nop
 80255f0:	41700000 	.word	0x41700000
 80255f4:	08026a30 	.word	0x08026a30

080255f8 <__kernel_cos>:
 80255f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255fc:	ec57 6b10 	vmov	r6, r7, d0
 8025600:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8025604:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8025608:	ed8d 1b00 	vstr	d1, [sp]
 802560c:	da07      	bge.n	802561e <__kernel_cos+0x26>
 802560e:	ee10 0a10 	vmov	r0, s0
 8025612:	4639      	mov	r1, r7
 8025614:	f7db fac8 	bl	8000ba8 <__aeabi_d2iz>
 8025618:	2800      	cmp	r0, #0
 802561a:	f000 8088 	beq.w	802572e <__kernel_cos+0x136>
 802561e:	4632      	mov	r2, r6
 8025620:	463b      	mov	r3, r7
 8025622:	4630      	mov	r0, r6
 8025624:	4639      	mov	r1, r7
 8025626:	f7db f80f 	bl	8000648 <__aeabi_dmul>
 802562a:	4b51      	ldr	r3, [pc, #324]	; (8025770 <__kernel_cos+0x178>)
 802562c:	2200      	movs	r2, #0
 802562e:	4604      	mov	r4, r0
 8025630:	460d      	mov	r5, r1
 8025632:	f7db f809 	bl	8000648 <__aeabi_dmul>
 8025636:	a340      	add	r3, pc, #256	; (adr r3, 8025738 <__kernel_cos+0x140>)
 8025638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802563c:	4682      	mov	sl, r0
 802563e:	468b      	mov	fp, r1
 8025640:	4620      	mov	r0, r4
 8025642:	4629      	mov	r1, r5
 8025644:	f7db f800 	bl	8000648 <__aeabi_dmul>
 8025648:	a33d      	add	r3, pc, #244	; (adr r3, 8025740 <__kernel_cos+0x148>)
 802564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802564e:	f7da fe45 	bl	80002dc <__adddf3>
 8025652:	4622      	mov	r2, r4
 8025654:	462b      	mov	r3, r5
 8025656:	f7da fff7 	bl	8000648 <__aeabi_dmul>
 802565a:	a33b      	add	r3, pc, #236	; (adr r3, 8025748 <__kernel_cos+0x150>)
 802565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025660:	f7da fe3a 	bl	80002d8 <__aeabi_dsub>
 8025664:	4622      	mov	r2, r4
 8025666:	462b      	mov	r3, r5
 8025668:	f7da ffee 	bl	8000648 <__aeabi_dmul>
 802566c:	a338      	add	r3, pc, #224	; (adr r3, 8025750 <__kernel_cos+0x158>)
 802566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025672:	f7da fe33 	bl	80002dc <__adddf3>
 8025676:	4622      	mov	r2, r4
 8025678:	462b      	mov	r3, r5
 802567a:	f7da ffe5 	bl	8000648 <__aeabi_dmul>
 802567e:	a336      	add	r3, pc, #216	; (adr r3, 8025758 <__kernel_cos+0x160>)
 8025680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025684:	f7da fe28 	bl	80002d8 <__aeabi_dsub>
 8025688:	4622      	mov	r2, r4
 802568a:	462b      	mov	r3, r5
 802568c:	f7da ffdc 	bl	8000648 <__aeabi_dmul>
 8025690:	a333      	add	r3, pc, #204	; (adr r3, 8025760 <__kernel_cos+0x168>)
 8025692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025696:	f7da fe21 	bl	80002dc <__adddf3>
 802569a:	4622      	mov	r2, r4
 802569c:	462b      	mov	r3, r5
 802569e:	f7da ffd3 	bl	8000648 <__aeabi_dmul>
 80256a2:	4622      	mov	r2, r4
 80256a4:	462b      	mov	r3, r5
 80256a6:	f7da ffcf 	bl	8000648 <__aeabi_dmul>
 80256aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80256ae:	4604      	mov	r4, r0
 80256b0:	460d      	mov	r5, r1
 80256b2:	4630      	mov	r0, r6
 80256b4:	4639      	mov	r1, r7
 80256b6:	f7da ffc7 	bl	8000648 <__aeabi_dmul>
 80256ba:	460b      	mov	r3, r1
 80256bc:	4602      	mov	r2, r0
 80256be:	4629      	mov	r1, r5
 80256c0:	4620      	mov	r0, r4
 80256c2:	f7da fe09 	bl	80002d8 <__aeabi_dsub>
 80256c6:	4b2b      	ldr	r3, [pc, #172]	; (8025774 <__kernel_cos+0x17c>)
 80256c8:	4598      	cmp	r8, r3
 80256ca:	4606      	mov	r6, r0
 80256cc:	460f      	mov	r7, r1
 80256ce:	dc10      	bgt.n	80256f2 <__kernel_cos+0xfa>
 80256d0:	4602      	mov	r2, r0
 80256d2:	460b      	mov	r3, r1
 80256d4:	4650      	mov	r0, sl
 80256d6:	4659      	mov	r1, fp
 80256d8:	f7da fdfe 	bl	80002d8 <__aeabi_dsub>
 80256dc:	460b      	mov	r3, r1
 80256de:	4926      	ldr	r1, [pc, #152]	; (8025778 <__kernel_cos+0x180>)
 80256e0:	4602      	mov	r2, r0
 80256e2:	2000      	movs	r0, #0
 80256e4:	f7da fdf8 	bl	80002d8 <__aeabi_dsub>
 80256e8:	ec41 0b10 	vmov	d0, r0, r1
 80256ec:	b003      	add	sp, #12
 80256ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256f2:	4b22      	ldr	r3, [pc, #136]	; (802577c <__kernel_cos+0x184>)
 80256f4:	4920      	ldr	r1, [pc, #128]	; (8025778 <__kernel_cos+0x180>)
 80256f6:	4598      	cmp	r8, r3
 80256f8:	bfcc      	ite	gt
 80256fa:	4d21      	ldrgt	r5, [pc, #132]	; (8025780 <__kernel_cos+0x188>)
 80256fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8025700:	2400      	movs	r4, #0
 8025702:	4622      	mov	r2, r4
 8025704:	462b      	mov	r3, r5
 8025706:	2000      	movs	r0, #0
 8025708:	f7da fde6 	bl	80002d8 <__aeabi_dsub>
 802570c:	4622      	mov	r2, r4
 802570e:	4680      	mov	r8, r0
 8025710:	4689      	mov	r9, r1
 8025712:	462b      	mov	r3, r5
 8025714:	4650      	mov	r0, sl
 8025716:	4659      	mov	r1, fp
 8025718:	f7da fdde 	bl	80002d8 <__aeabi_dsub>
 802571c:	4632      	mov	r2, r6
 802571e:	463b      	mov	r3, r7
 8025720:	f7da fdda 	bl	80002d8 <__aeabi_dsub>
 8025724:	4602      	mov	r2, r0
 8025726:	460b      	mov	r3, r1
 8025728:	4640      	mov	r0, r8
 802572a:	4649      	mov	r1, r9
 802572c:	e7da      	b.n	80256e4 <__kernel_cos+0xec>
 802572e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8025768 <__kernel_cos+0x170>
 8025732:	e7db      	b.n	80256ec <__kernel_cos+0xf4>
 8025734:	f3af 8000 	nop.w
 8025738:	be8838d4 	.word	0xbe8838d4
 802573c:	bda8fae9 	.word	0xbda8fae9
 8025740:	bdb4b1c4 	.word	0xbdb4b1c4
 8025744:	3e21ee9e 	.word	0x3e21ee9e
 8025748:	809c52ad 	.word	0x809c52ad
 802574c:	3e927e4f 	.word	0x3e927e4f
 8025750:	19cb1590 	.word	0x19cb1590
 8025754:	3efa01a0 	.word	0x3efa01a0
 8025758:	16c15177 	.word	0x16c15177
 802575c:	3f56c16c 	.word	0x3f56c16c
 8025760:	5555554c 	.word	0x5555554c
 8025764:	3fa55555 	.word	0x3fa55555
 8025768:	00000000 	.word	0x00000000
 802576c:	3ff00000 	.word	0x3ff00000
 8025770:	3fe00000 	.word	0x3fe00000
 8025774:	3fd33332 	.word	0x3fd33332
 8025778:	3ff00000 	.word	0x3ff00000
 802577c:	3fe90000 	.word	0x3fe90000
 8025780:	3fd20000 	.word	0x3fd20000
 8025784:	00000000 	.word	0x00000000

08025788 <__kernel_rem_pio2>:
 8025788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802578c:	ed2d 8b02 	vpush	{d8}
 8025790:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8025794:	f112 0f14 	cmn.w	r2, #20
 8025798:	9308      	str	r3, [sp, #32]
 802579a:	9101      	str	r1, [sp, #4]
 802579c:	4bc4      	ldr	r3, [pc, #784]	; (8025ab0 <__kernel_rem_pio2+0x328>)
 802579e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80257a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80257a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80257a6:	9302      	str	r3, [sp, #8]
 80257a8:	9b08      	ldr	r3, [sp, #32]
 80257aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80257ae:	bfa8      	it	ge
 80257b0:	1ed4      	subge	r4, r2, #3
 80257b2:	9306      	str	r3, [sp, #24]
 80257b4:	bfb2      	itee	lt
 80257b6:	2400      	movlt	r4, #0
 80257b8:	2318      	movge	r3, #24
 80257ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80257be:	f06f 0317 	mvn.w	r3, #23
 80257c2:	fb04 3303 	mla	r3, r4, r3, r3
 80257c6:	eb03 0a02 	add.w	sl, r3, r2
 80257ca:	9b02      	ldr	r3, [sp, #8]
 80257cc:	9a06      	ldr	r2, [sp, #24]
 80257ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8025aa0 <__kernel_rem_pio2+0x318>
 80257d2:	eb03 0802 	add.w	r8, r3, r2
 80257d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80257d8:	1aa7      	subs	r7, r4, r2
 80257da:	ae22      	add	r6, sp, #136	; 0x88
 80257dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80257e0:	2500      	movs	r5, #0
 80257e2:	4545      	cmp	r5, r8
 80257e4:	dd13      	ble.n	802580e <__kernel_rem_pio2+0x86>
 80257e6:	9b08      	ldr	r3, [sp, #32]
 80257e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8025aa0 <__kernel_rem_pio2+0x318>
 80257ec:	aa22      	add	r2, sp, #136	; 0x88
 80257ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80257f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80257f6:	f04f 0800 	mov.w	r8, #0
 80257fa:	9b02      	ldr	r3, [sp, #8]
 80257fc:	4598      	cmp	r8, r3
 80257fe:	dc2f      	bgt.n	8025860 <__kernel_rem_pio2+0xd8>
 8025800:	ed8d 8b04 	vstr	d8, [sp, #16]
 8025804:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8025808:	462f      	mov	r7, r5
 802580a:	2600      	movs	r6, #0
 802580c:	e01b      	b.n	8025846 <__kernel_rem_pio2+0xbe>
 802580e:	42ef      	cmn	r7, r5
 8025810:	d407      	bmi.n	8025822 <__kernel_rem_pio2+0x9a>
 8025812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8025816:	f7da fead 	bl	8000574 <__aeabi_i2d>
 802581a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802581e:	3501      	adds	r5, #1
 8025820:	e7df      	b.n	80257e2 <__kernel_rem_pio2+0x5a>
 8025822:	ec51 0b18 	vmov	r0, r1, d8
 8025826:	e7f8      	b.n	802581a <__kernel_rem_pio2+0x92>
 8025828:	e9d7 2300 	ldrd	r2, r3, [r7]
 802582c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8025830:	f7da ff0a 	bl	8000648 <__aeabi_dmul>
 8025834:	4602      	mov	r2, r0
 8025836:	460b      	mov	r3, r1
 8025838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802583c:	f7da fd4e 	bl	80002dc <__adddf3>
 8025840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025844:	3601      	adds	r6, #1
 8025846:	9b06      	ldr	r3, [sp, #24]
 8025848:	429e      	cmp	r6, r3
 802584a:	f1a7 0708 	sub.w	r7, r7, #8
 802584e:	ddeb      	ble.n	8025828 <__kernel_rem_pio2+0xa0>
 8025850:	ed9d 7b04 	vldr	d7, [sp, #16]
 8025854:	f108 0801 	add.w	r8, r8, #1
 8025858:	ecab 7b02 	vstmia	fp!, {d7}
 802585c:	3508      	adds	r5, #8
 802585e:	e7cc      	b.n	80257fa <__kernel_rem_pio2+0x72>
 8025860:	9b02      	ldr	r3, [sp, #8]
 8025862:	aa0e      	add	r2, sp, #56	; 0x38
 8025864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025868:	930d      	str	r3, [sp, #52]	; 0x34
 802586a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802586c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025870:	9c02      	ldr	r4, [sp, #8]
 8025872:	930c      	str	r3, [sp, #48]	; 0x30
 8025874:	00e3      	lsls	r3, r4, #3
 8025876:	930a      	str	r3, [sp, #40]	; 0x28
 8025878:	ab9a      	add	r3, sp, #616	; 0x268
 802587a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802587e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8025882:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8025886:	ab72      	add	r3, sp, #456	; 0x1c8
 8025888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802588c:	46c3      	mov	fp, r8
 802588e:	46a1      	mov	r9, r4
 8025890:	f1b9 0f00 	cmp.w	r9, #0
 8025894:	f1a5 0508 	sub.w	r5, r5, #8
 8025898:	dc77      	bgt.n	802598a <__kernel_rem_pio2+0x202>
 802589a:	ec47 6b10 	vmov	d0, r6, r7
 802589e:	4650      	mov	r0, sl
 80258a0:	f000 fc46 	bl	8026130 <scalbn>
 80258a4:	ec57 6b10 	vmov	r6, r7, d0
 80258a8:	2200      	movs	r2, #0
 80258aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80258ae:	ee10 0a10 	vmov	r0, s0
 80258b2:	4639      	mov	r1, r7
 80258b4:	f7da fec8 	bl	8000648 <__aeabi_dmul>
 80258b8:	ec41 0b10 	vmov	d0, r0, r1
 80258bc:	f000 fbb8 	bl	8026030 <floor>
 80258c0:	4b7c      	ldr	r3, [pc, #496]	; (8025ab4 <__kernel_rem_pio2+0x32c>)
 80258c2:	ec51 0b10 	vmov	r0, r1, d0
 80258c6:	2200      	movs	r2, #0
 80258c8:	f7da febe 	bl	8000648 <__aeabi_dmul>
 80258cc:	4602      	mov	r2, r0
 80258ce:	460b      	mov	r3, r1
 80258d0:	4630      	mov	r0, r6
 80258d2:	4639      	mov	r1, r7
 80258d4:	f7da fd00 	bl	80002d8 <__aeabi_dsub>
 80258d8:	460f      	mov	r7, r1
 80258da:	4606      	mov	r6, r0
 80258dc:	f7db f964 	bl	8000ba8 <__aeabi_d2iz>
 80258e0:	9004      	str	r0, [sp, #16]
 80258e2:	f7da fe47 	bl	8000574 <__aeabi_i2d>
 80258e6:	4602      	mov	r2, r0
 80258e8:	460b      	mov	r3, r1
 80258ea:	4630      	mov	r0, r6
 80258ec:	4639      	mov	r1, r7
 80258ee:	f7da fcf3 	bl	80002d8 <__aeabi_dsub>
 80258f2:	f1ba 0f00 	cmp.w	sl, #0
 80258f6:	4606      	mov	r6, r0
 80258f8:	460f      	mov	r7, r1
 80258fa:	dd6d      	ble.n	80259d8 <__kernel_rem_pio2+0x250>
 80258fc:	1e62      	subs	r2, r4, #1
 80258fe:	ab0e      	add	r3, sp, #56	; 0x38
 8025900:	9d04      	ldr	r5, [sp, #16]
 8025902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025906:	f1ca 0118 	rsb	r1, sl, #24
 802590a:	fa40 f301 	asr.w	r3, r0, r1
 802590e:	441d      	add	r5, r3
 8025910:	408b      	lsls	r3, r1
 8025912:	1ac0      	subs	r0, r0, r3
 8025914:	ab0e      	add	r3, sp, #56	; 0x38
 8025916:	9504      	str	r5, [sp, #16]
 8025918:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802591c:	f1ca 0317 	rsb	r3, sl, #23
 8025920:	fa40 fb03 	asr.w	fp, r0, r3
 8025924:	f1bb 0f00 	cmp.w	fp, #0
 8025928:	dd65      	ble.n	80259f6 <__kernel_rem_pio2+0x26e>
 802592a:	9b04      	ldr	r3, [sp, #16]
 802592c:	2200      	movs	r2, #0
 802592e:	3301      	adds	r3, #1
 8025930:	9304      	str	r3, [sp, #16]
 8025932:	4615      	mov	r5, r2
 8025934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8025938:	4294      	cmp	r4, r2
 802593a:	f300 809c 	bgt.w	8025a76 <__kernel_rem_pio2+0x2ee>
 802593e:	f1ba 0f00 	cmp.w	sl, #0
 8025942:	dd07      	ble.n	8025954 <__kernel_rem_pio2+0x1cc>
 8025944:	f1ba 0f01 	cmp.w	sl, #1
 8025948:	f000 80c0 	beq.w	8025acc <__kernel_rem_pio2+0x344>
 802594c:	f1ba 0f02 	cmp.w	sl, #2
 8025950:	f000 80c6 	beq.w	8025ae0 <__kernel_rem_pio2+0x358>
 8025954:	f1bb 0f02 	cmp.w	fp, #2
 8025958:	d14d      	bne.n	80259f6 <__kernel_rem_pio2+0x26e>
 802595a:	4632      	mov	r2, r6
 802595c:	463b      	mov	r3, r7
 802595e:	4956      	ldr	r1, [pc, #344]	; (8025ab8 <__kernel_rem_pio2+0x330>)
 8025960:	2000      	movs	r0, #0
 8025962:	f7da fcb9 	bl	80002d8 <__aeabi_dsub>
 8025966:	4606      	mov	r6, r0
 8025968:	460f      	mov	r7, r1
 802596a:	2d00      	cmp	r5, #0
 802596c:	d043      	beq.n	80259f6 <__kernel_rem_pio2+0x26e>
 802596e:	4650      	mov	r0, sl
 8025970:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8025aa8 <__kernel_rem_pio2+0x320>
 8025974:	f000 fbdc 	bl	8026130 <scalbn>
 8025978:	4630      	mov	r0, r6
 802597a:	4639      	mov	r1, r7
 802597c:	ec53 2b10 	vmov	r2, r3, d0
 8025980:	f7da fcaa 	bl	80002d8 <__aeabi_dsub>
 8025984:	4606      	mov	r6, r0
 8025986:	460f      	mov	r7, r1
 8025988:	e035      	b.n	80259f6 <__kernel_rem_pio2+0x26e>
 802598a:	4b4c      	ldr	r3, [pc, #304]	; (8025abc <__kernel_rem_pio2+0x334>)
 802598c:	2200      	movs	r2, #0
 802598e:	4630      	mov	r0, r6
 8025990:	4639      	mov	r1, r7
 8025992:	f7da fe59 	bl	8000648 <__aeabi_dmul>
 8025996:	f7db f907 	bl	8000ba8 <__aeabi_d2iz>
 802599a:	f7da fdeb 	bl	8000574 <__aeabi_i2d>
 802599e:	4602      	mov	r2, r0
 80259a0:	460b      	mov	r3, r1
 80259a2:	ec43 2b18 	vmov	d8, r2, r3
 80259a6:	4b46      	ldr	r3, [pc, #280]	; (8025ac0 <__kernel_rem_pio2+0x338>)
 80259a8:	2200      	movs	r2, #0
 80259aa:	f7da fe4d 	bl	8000648 <__aeabi_dmul>
 80259ae:	4602      	mov	r2, r0
 80259b0:	460b      	mov	r3, r1
 80259b2:	4630      	mov	r0, r6
 80259b4:	4639      	mov	r1, r7
 80259b6:	f7da fc8f 	bl	80002d8 <__aeabi_dsub>
 80259ba:	f7db f8f5 	bl	8000ba8 <__aeabi_d2iz>
 80259be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80259c2:	f84b 0b04 	str.w	r0, [fp], #4
 80259c6:	ec51 0b18 	vmov	r0, r1, d8
 80259ca:	f7da fc87 	bl	80002dc <__adddf3>
 80259ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80259d2:	4606      	mov	r6, r0
 80259d4:	460f      	mov	r7, r1
 80259d6:	e75b      	b.n	8025890 <__kernel_rem_pio2+0x108>
 80259d8:	d106      	bne.n	80259e8 <__kernel_rem_pio2+0x260>
 80259da:	1e63      	subs	r3, r4, #1
 80259dc:	aa0e      	add	r2, sp, #56	; 0x38
 80259de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80259e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80259e6:	e79d      	b.n	8025924 <__kernel_rem_pio2+0x19c>
 80259e8:	4b36      	ldr	r3, [pc, #216]	; (8025ac4 <__kernel_rem_pio2+0x33c>)
 80259ea:	2200      	movs	r2, #0
 80259ec:	f7db f8b2 	bl	8000b54 <__aeabi_dcmpge>
 80259f0:	2800      	cmp	r0, #0
 80259f2:	d13d      	bne.n	8025a70 <__kernel_rem_pio2+0x2e8>
 80259f4:	4683      	mov	fp, r0
 80259f6:	2200      	movs	r2, #0
 80259f8:	2300      	movs	r3, #0
 80259fa:	4630      	mov	r0, r6
 80259fc:	4639      	mov	r1, r7
 80259fe:	f7db f88b 	bl	8000b18 <__aeabi_dcmpeq>
 8025a02:	2800      	cmp	r0, #0
 8025a04:	f000 80c0 	beq.w	8025b88 <__kernel_rem_pio2+0x400>
 8025a08:	1e65      	subs	r5, r4, #1
 8025a0a:	462b      	mov	r3, r5
 8025a0c:	2200      	movs	r2, #0
 8025a0e:	9902      	ldr	r1, [sp, #8]
 8025a10:	428b      	cmp	r3, r1
 8025a12:	da6c      	bge.n	8025aee <__kernel_rem_pio2+0x366>
 8025a14:	2a00      	cmp	r2, #0
 8025a16:	f000 8089 	beq.w	8025b2c <__kernel_rem_pio2+0x3a4>
 8025a1a:	ab0e      	add	r3, sp, #56	; 0x38
 8025a1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8025a20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	f000 80ad 	beq.w	8025b84 <__kernel_rem_pio2+0x3fc>
 8025a2a:	4650      	mov	r0, sl
 8025a2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8025aa8 <__kernel_rem_pio2+0x320>
 8025a30:	f000 fb7e 	bl	8026130 <scalbn>
 8025a34:	ab9a      	add	r3, sp, #616	; 0x268
 8025a36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025a3a:	ec57 6b10 	vmov	r6, r7, d0
 8025a3e:	00ec      	lsls	r4, r5, #3
 8025a40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8025a44:	46aa      	mov	sl, r5
 8025a46:	f1ba 0f00 	cmp.w	sl, #0
 8025a4a:	f280 80d6 	bge.w	8025bfa <__kernel_rem_pio2+0x472>
 8025a4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8025aa0 <__kernel_rem_pio2+0x318>
 8025a52:	462e      	mov	r6, r5
 8025a54:	2e00      	cmp	r6, #0
 8025a56:	f2c0 8104 	blt.w	8025c62 <__kernel_rem_pio2+0x4da>
 8025a5a:	ab72      	add	r3, sp, #456	; 0x1c8
 8025a5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8025a60:	f8df a064 	ldr.w	sl, [pc, #100]	; 8025ac8 <__kernel_rem_pio2+0x340>
 8025a64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8025a68:	f04f 0800 	mov.w	r8, #0
 8025a6c:	1baf      	subs	r7, r5, r6
 8025a6e:	e0ea      	b.n	8025c46 <__kernel_rem_pio2+0x4be>
 8025a70:	f04f 0b02 	mov.w	fp, #2
 8025a74:	e759      	b.n	802592a <__kernel_rem_pio2+0x1a2>
 8025a76:	f8d8 3000 	ldr.w	r3, [r8]
 8025a7a:	b955      	cbnz	r5, 8025a92 <__kernel_rem_pio2+0x30a>
 8025a7c:	b123      	cbz	r3, 8025a88 <__kernel_rem_pio2+0x300>
 8025a7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8025a82:	f8c8 3000 	str.w	r3, [r8]
 8025a86:	2301      	movs	r3, #1
 8025a88:	3201      	adds	r2, #1
 8025a8a:	f108 0804 	add.w	r8, r8, #4
 8025a8e:	461d      	mov	r5, r3
 8025a90:	e752      	b.n	8025938 <__kernel_rem_pio2+0x1b0>
 8025a92:	1acb      	subs	r3, r1, r3
 8025a94:	f8c8 3000 	str.w	r3, [r8]
 8025a98:	462b      	mov	r3, r5
 8025a9a:	e7f5      	b.n	8025a88 <__kernel_rem_pio2+0x300>
 8025a9c:	f3af 8000 	nop.w
	...
 8025aac:	3ff00000 	.word	0x3ff00000
 8025ab0:	08026b78 	.word	0x08026b78
 8025ab4:	40200000 	.word	0x40200000
 8025ab8:	3ff00000 	.word	0x3ff00000
 8025abc:	3e700000 	.word	0x3e700000
 8025ac0:	41700000 	.word	0x41700000
 8025ac4:	3fe00000 	.word	0x3fe00000
 8025ac8:	08026b38 	.word	0x08026b38
 8025acc:	1e62      	subs	r2, r4, #1
 8025ace:	ab0e      	add	r3, sp, #56	; 0x38
 8025ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025ad4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8025ad8:	a90e      	add	r1, sp, #56	; 0x38
 8025ada:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8025ade:	e739      	b.n	8025954 <__kernel_rem_pio2+0x1cc>
 8025ae0:	1e62      	subs	r2, r4, #1
 8025ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8025ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025ae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8025aec:	e7f4      	b.n	8025ad8 <__kernel_rem_pio2+0x350>
 8025aee:	a90e      	add	r1, sp, #56	; 0x38
 8025af0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8025af4:	3b01      	subs	r3, #1
 8025af6:	430a      	orrs	r2, r1
 8025af8:	e789      	b.n	8025a0e <__kernel_rem_pio2+0x286>
 8025afa:	3301      	adds	r3, #1
 8025afc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8025b00:	2900      	cmp	r1, #0
 8025b02:	d0fa      	beq.n	8025afa <__kernel_rem_pio2+0x372>
 8025b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025b06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8025b0a:	446a      	add	r2, sp
 8025b0c:	3a98      	subs	r2, #152	; 0x98
 8025b0e:	920a      	str	r2, [sp, #40]	; 0x28
 8025b10:	9a08      	ldr	r2, [sp, #32]
 8025b12:	18e3      	adds	r3, r4, r3
 8025b14:	18a5      	adds	r5, r4, r2
 8025b16:	aa22      	add	r2, sp, #136	; 0x88
 8025b18:	f104 0801 	add.w	r8, r4, #1
 8025b1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8025b20:	9304      	str	r3, [sp, #16]
 8025b22:	9b04      	ldr	r3, [sp, #16]
 8025b24:	4543      	cmp	r3, r8
 8025b26:	da04      	bge.n	8025b32 <__kernel_rem_pio2+0x3aa>
 8025b28:	461c      	mov	r4, r3
 8025b2a:	e6a3      	b.n	8025874 <__kernel_rem_pio2+0xec>
 8025b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025b2e:	2301      	movs	r3, #1
 8025b30:	e7e4      	b.n	8025afc <__kernel_rem_pio2+0x374>
 8025b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8025b38:	f7da fd1c 	bl	8000574 <__aeabi_i2d>
 8025b3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8025b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b42:	46ab      	mov	fp, r5
 8025b44:	461c      	mov	r4, r3
 8025b46:	f04f 0900 	mov.w	r9, #0
 8025b4a:	2600      	movs	r6, #0
 8025b4c:	2700      	movs	r7, #0
 8025b4e:	9b06      	ldr	r3, [sp, #24]
 8025b50:	4599      	cmp	r9, r3
 8025b52:	dd06      	ble.n	8025b62 <__kernel_rem_pio2+0x3da>
 8025b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b56:	e8e3 6702 	strd	r6, r7, [r3], #8
 8025b5a:	f108 0801 	add.w	r8, r8, #1
 8025b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8025b60:	e7df      	b.n	8025b22 <__kernel_rem_pio2+0x39a>
 8025b62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8025b66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8025b6a:	f7da fd6d 	bl	8000648 <__aeabi_dmul>
 8025b6e:	4602      	mov	r2, r0
 8025b70:	460b      	mov	r3, r1
 8025b72:	4630      	mov	r0, r6
 8025b74:	4639      	mov	r1, r7
 8025b76:	f7da fbb1 	bl	80002dc <__adddf3>
 8025b7a:	f109 0901 	add.w	r9, r9, #1
 8025b7e:	4606      	mov	r6, r0
 8025b80:	460f      	mov	r7, r1
 8025b82:	e7e4      	b.n	8025b4e <__kernel_rem_pio2+0x3c6>
 8025b84:	3d01      	subs	r5, #1
 8025b86:	e748      	b.n	8025a1a <__kernel_rem_pio2+0x292>
 8025b88:	ec47 6b10 	vmov	d0, r6, r7
 8025b8c:	f1ca 0000 	rsb	r0, sl, #0
 8025b90:	f000 face 	bl	8026130 <scalbn>
 8025b94:	ec57 6b10 	vmov	r6, r7, d0
 8025b98:	4ba0      	ldr	r3, [pc, #640]	; (8025e1c <__kernel_rem_pio2+0x694>)
 8025b9a:	ee10 0a10 	vmov	r0, s0
 8025b9e:	2200      	movs	r2, #0
 8025ba0:	4639      	mov	r1, r7
 8025ba2:	f7da ffd7 	bl	8000b54 <__aeabi_dcmpge>
 8025ba6:	b1f8      	cbz	r0, 8025be8 <__kernel_rem_pio2+0x460>
 8025ba8:	4b9d      	ldr	r3, [pc, #628]	; (8025e20 <__kernel_rem_pio2+0x698>)
 8025baa:	2200      	movs	r2, #0
 8025bac:	4630      	mov	r0, r6
 8025bae:	4639      	mov	r1, r7
 8025bb0:	f7da fd4a 	bl	8000648 <__aeabi_dmul>
 8025bb4:	f7da fff8 	bl	8000ba8 <__aeabi_d2iz>
 8025bb8:	4680      	mov	r8, r0
 8025bba:	f7da fcdb 	bl	8000574 <__aeabi_i2d>
 8025bbe:	4b97      	ldr	r3, [pc, #604]	; (8025e1c <__kernel_rem_pio2+0x694>)
 8025bc0:	2200      	movs	r2, #0
 8025bc2:	f7da fd41 	bl	8000648 <__aeabi_dmul>
 8025bc6:	460b      	mov	r3, r1
 8025bc8:	4602      	mov	r2, r0
 8025bca:	4639      	mov	r1, r7
 8025bcc:	4630      	mov	r0, r6
 8025bce:	f7da fb83 	bl	80002d8 <__aeabi_dsub>
 8025bd2:	f7da ffe9 	bl	8000ba8 <__aeabi_d2iz>
 8025bd6:	1c65      	adds	r5, r4, #1
 8025bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8025bda:	f10a 0a18 	add.w	sl, sl, #24
 8025bde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8025be2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8025be6:	e720      	b.n	8025a2a <__kernel_rem_pio2+0x2a2>
 8025be8:	4630      	mov	r0, r6
 8025bea:	4639      	mov	r1, r7
 8025bec:	f7da ffdc 	bl	8000ba8 <__aeabi_d2iz>
 8025bf0:	ab0e      	add	r3, sp, #56	; 0x38
 8025bf2:	4625      	mov	r5, r4
 8025bf4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8025bf8:	e717      	b.n	8025a2a <__kernel_rem_pio2+0x2a2>
 8025bfa:	ab0e      	add	r3, sp, #56	; 0x38
 8025bfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8025c00:	f7da fcb8 	bl	8000574 <__aeabi_i2d>
 8025c04:	4632      	mov	r2, r6
 8025c06:	463b      	mov	r3, r7
 8025c08:	f7da fd1e 	bl	8000648 <__aeabi_dmul>
 8025c0c:	4b84      	ldr	r3, [pc, #528]	; (8025e20 <__kernel_rem_pio2+0x698>)
 8025c0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8025c12:	2200      	movs	r2, #0
 8025c14:	4630      	mov	r0, r6
 8025c16:	4639      	mov	r1, r7
 8025c18:	f7da fd16 	bl	8000648 <__aeabi_dmul>
 8025c1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025c20:	4606      	mov	r6, r0
 8025c22:	460f      	mov	r7, r1
 8025c24:	e70f      	b.n	8025a46 <__kernel_rem_pio2+0x2be>
 8025c26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8025c2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8025c2e:	f7da fd0b 	bl	8000648 <__aeabi_dmul>
 8025c32:	4602      	mov	r2, r0
 8025c34:	460b      	mov	r3, r1
 8025c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025c3a:	f7da fb4f 	bl	80002dc <__adddf3>
 8025c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025c42:	f108 0801 	add.w	r8, r8, #1
 8025c46:	9b02      	ldr	r3, [sp, #8]
 8025c48:	4598      	cmp	r8, r3
 8025c4a:	dc01      	bgt.n	8025c50 <__kernel_rem_pio2+0x4c8>
 8025c4c:	45b8      	cmp	r8, r7
 8025c4e:	ddea      	ble.n	8025c26 <__kernel_rem_pio2+0x49e>
 8025c50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8025c54:	ab4a      	add	r3, sp, #296	; 0x128
 8025c56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8025c5a:	ed87 7b00 	vstr	d7, [r7]
 8025c5e:	3e01      	subs	r6, #1
 8025c60:	e6f8      	b.n	8025a54 <__kernel_rem_pio2+0x2cc>
 8025c62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025c64:	2b02      	cmp	r3, #2
 8025c66:	dc0b      	bgt.n	8025c80 <__kernel_rem_pio2+0x4f8>
 8025c68:	2b00      	cmp	r3, #0
 8025c6a:	dc35      	bgt.n	8025cd8 <__kernel_rem_pio2+0x550>
 8025c6c:	d059      	beq.n	8025d22 <__kernel_rem_pio2+0x59a>
 8025c6e:	9b04      	ldr	r3, [sp, #16]
 8025c70:	f003 0007 	and.w	r0, r3, #7
 8025c74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025c78:	ecbd 8b02 	vpop	{d8}
 8025c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025c82:	2b03      	cmp	r3, #3
 8025c84:	d1f3      	bne.n	8025c6e <__kernel_rem_pio2+0x4e6>
 8025c86:	ab4a      	add	r3, sp, #296	; 0x128
 8025c88:	4423      	add	r3, r4
 8025c8a:	9306      	str	r3, [sp, #24]
 8025c8c:	461c      	mov	r4, r3
 8025c8e:	469a      	mov	sl, r3
 8025c90:	9502      	str	r5, [sp, #8]
 8025c92:	9b02      	ldr	r3, [sp, #8]
 8025c94:	2b00      	cmp	r3, #0
 8025c96:	f1aa 0a08 	sub.w	sl, sl, #8
 8025c9a:	dc6b      	bgt.n	8025d74 <__kernel_rem_pio2+0x5ec>
 8025c9c:	46aa      	mov	sl, r5
 8025c9e:	f1ba 0f01 	cmp.w	sl, #1
 8025ca2:	f1a4 0408 	sub.w	r4, r4, #8
 8025ca6:	f300 8085 	bgt.w	8025db4 <__kernel_rem_pio2+0x62c>
 8025caa:	9c06      	ldr	r4, [sp, #24]
 8025cac:	2000      	movs	r0, #0
 8025cae:	3408      	adds	r4, #8
 8025cb0:	2100      	movs	r1, #0
 8025cb2:	2d01      	cmp	r5, #1
 8025cb4:	f300 809d 	bgt.w	8025df2 <__kernel_rem_pio2+0x66a>
 8025cb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8025cbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8025cc0:	f1bb 0f00 	cmp.w	fp, #0
 8025cc4:	f040 809b 	bne.w	8025dfe <__kernel_rem_pio2+0x676>
 8025cc8:	9b01      	ldr	r3, [sp, #4]
 8025cca:	e9c3 5600 	strd	r5, r6, [r3]
 8025cce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8025cd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8025cd6:	e7ca      	b.n	8025c6e <__kernel_rem_pio2+0x4e6>
 8025cd8:	3408      	adds	r4, #8
 8025cda:	ab4a      	add	r3, sp, #296	; 0x128
 8025cdc:	441c      	add	r4, r3
 8025cde:	462e      	mov	r6, r5
 8025ce0:	2000      	movs	r0, #0
 8025ce2:	2100      	movs	r1, #0
 8025ce4:	2e00      	cmp	r6, #0
 8025ce6:	da36      	bge.n	8025d56 <__kernel_rem_pio2+0x5ce>
 8025ce8:	f1bb 0f00 	cmp.w	fp, #0
 8025cec:	d039      	beq.n	8025d62 <__kernel_rem_pio2+0x5da>
 8025cee:	4602      	mov	r2, r0
 8025cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025cf4:	9c01      	ldr	r4, [sp, #4]
 8025cf6:	e9c4 2300 	strd	r2, r3, [r4]
 8025cfa:	4602      	mov	r2, r0
 8025cfc:	460b      	mov	r3, r1
 8025cfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8025d02:	f7da fae9 	bl	80002d8 <__aeabi_dsub>
 8025d06:	ae4c      	add	r6, sp, #304	; 0x130
 8025d08:	2401      	movs	r4, #1
 8025d0a:	42a5      	cmp	r5, r4
 8025d0c:	da2c      	bge.n	8025d68 <__kernel_rem_pio2+0x5e0>
 8025d0e:	f1bb 0f00 	cmp.w	fp, #0
 8025d12:	d002      	beq.n	8025d1a <__kernel_rem_pio2+0x592>
 8025d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025d18:	4619      	mov	r1, r3
 8025d1a:	9b01      	ldr	r3, [sp, #4]
 8025d1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025d20:	e7a5      	b.n	8025c6e <__kernel_rem_pio2+0x4e6>
 8025d22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8025d26:	eb0d 0403 	add.w	r4, sp, r3
 8025d2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8025d2e:	2000      	movs	r0, #0
 8025d30:	2100      	movs	r1, #0
 8025d32:	2d00      	cmp	r5, #0
 8025d34:	da09      	bge.n	8025d4a <__kernel_rem_pio2+0x5c2>
 8025d36:	f1bb 0f00 	cmp.w	fp, #0
 8025d3a:	d002      	beq.n	8025d42 <__kernel_rem_pio2+0x5ba>
 8025d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025d40:	4619      	mov	r1, r3
 8025d42:	9b01      	ldr	r3, [sp, #4]
 8025d44:	e9c3 0100 	strd	r0, r1, [r3]
 8025d48:	e791      	b.n	8025c6e <__kernel_rem_pio2+0x4e6>
 8025d4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025d4e:	f7da fac5 	bl	80002dc <__adddf3>
 8025d52:	3d01      	subs	r5, #1
 8025d54:	e7ed      	b.n	8025d32 <__kernel_rem_pio2+0x5aa>
 8025d56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025d5a:	f7da fabf 	bl	80002dc <__adddf3>
 8025d5e:	3e01      	subs	r6, #1
 8025d60:	e7c0      	b.n	8025ce4 <__kernel_rem_pio2+0x55c>
 8025d62:	4602      	mov	r2, r0
 8025d64:	460b      	mov	r3, r1
 8025d66:	e7c5      	b.n	8025cf4 <__kernel_rem_pio2+0x56c>
 8025d68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8025d6c:	f7da fab6 	bl	80002dc <__adddf3>
 8025d70:	3401      	adds	r4, #1
 8025d72:	e7ca      	b.n	8025d0a <__kernel_rem_pio2+0x582>
 8025d74:	e9da 8900 	ldrd	r8, r9, [sl]
 8025d78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8025d7c:	9b02      	ldr	r3, [sp, #8]
 8025d7e:	3b01      	subs	r3, #1
 8025d80:	9302      	str	r3, [sp, #8]
 8025d82:	4632      	mov	r2, r6
 8025d84:	463b      	mov	r3, r7
 8025d86:	4640      	mov	r0, r8
 8025d88:	4649      	mov	r1, r9
 8025d8a:	f7da faa7 	bl	80002dc <__adddf3>
 8025d8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025d92:	4602      	mov	r2, r0
 8025d94:	460b      	mov	r3, r1
 8025d96:	4640      	mov	r0, r8
 8025d98:	4649      	mov	r1, r9
 8025d9a:	f7da fa9d 	bl	80002d8 <__aeabi_dsub>
 8025d9e:	4632      	mov	r2, r6
 8025da0:	463b      	mov	r3, r7
 8025da2:	f7da fa9b 	bl	80002dc <__adddf3>
 8025da6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8025daa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8025dae:	ed8a 7b00 	vstr	d7, [sl]
 8025db2:	e76e      	b.n	8025c92 <__kernel_rem_pio2+0x50a>
 8025db4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025db8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8025dbc:	4640      	mov	r0, r8
 8025dbe:	4632      	mov	r2, r6
 8025dc0:	463b      	mov	r3, r7
 8025dc2:	4649      	mov	r1, r9
 8025dc4:	f7da fa8a 	bl	80002dc <__adddf3>
 8025dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025dcc:	4602      	mov	r2, r0
 8025dce:	460b      	mov	r3, r1
 8025dd0:	4640      	mov	r0, r8
 8025dd2:	4649      	mov	r1, r9
 8025dd4:	f7da fa80 	bl	80002d8 <__aeabi_dsub>
 8025dd8:	4632      	mov	r2, r6
 8025dda:	463b      	mov	r3, r7
 8025ddc:	f7da fa7e 	bl	80002dc <__adddf3>
 8025de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025de4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025de8:	ed84 7b00 	vstr	d7, [r4]
 8025dec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025df0:	e755      	b.n	8025c9e <__kernel_rem_pio2+0x516>
 8025df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025df6:	f7da fa71 	bl	80002dc <__adddf3>
 8025dfa:	3d01      	subs	r5, #1
 8025dfc:	e759      	b.n	8025cb2 <__kernel_rem_pio2+0x52a>
 8025dfe:	9b01      	ldr	r3, [sp, #4]
 8025e00:	9a01      	ldr	r2, [sp, #4]
 8025e02:	601d      	str	r5, [r3, #0]
 8025e04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8025e08:	605c      	str	r4, [r3, #4]
 8025e0a:	609f      	str	r7, [r3, #8]
 8025e0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8025e10:	60d3      	str	r3, [r2, #12]
 8025e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025e16:	6110      	str	r0, [r2, #16]
 8025e18:	6153      	str	r3, [r2, #20]
 8025e1a:	e728      	b.n	8025c6e <__kernel_rem_pio2+0x4e6>
 8025e1c:	41700000 	.word	0x41700000
 8025e20:	3e700000 	.word	0x3e700000
 8025e24:	00000000 	.word	0x00000000

08025e28 <__kernel_sin>:
 8025e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e2c:	ed2d 8b04 	vpush	{d8-d9}
 8025e30:	eeb0 8a41 	vmov.f32	s16, s2
 8025e34:	eef0 8a61 	vmov.f32	s17, s3
 8025e38:	ec55 4b10 	vmov	r4, r5, d0
 8025e3c:	b083      	sub	sp, #12
 8025e3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025e42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8025e46:	9001      	str	r0, [sp, #4]
 8025e48:	da06      	bge.n	8025e58 <__kernel_sin+0x30>
 8025e4a:	ee10 0a10 	vmov	r0, s0
 8025e4e:	4629      	mov	r1, r5
 8025e50:	f7da feaa 	bl	8000ba8 <__aeabi_d2iz>
 8025e54:	2800      	cmp	r0, #0
 8025e56:	d051      	beq.n	8025efc <__kernel_sin+0xd4>
 8025e58:	4622      	mov	r2, r4
 8025e5a:	462b      	mov	r3, r5
 8025e5c:	4620      	mov	r0, r4
 8025e5e:	4629      	mov	r1, r5
 8025e60:	f7da fbf2 	bl	8000648 <__aeabi_dmul>
 8025e64:	4682      	mov	sl, r0
 8025e66:	468b      	mov	fp, r1
 8025e68:	4602      	mov	r2, r0
 8025e6a:	460b      	mov	r3, r1
 8025e6c:	4620      	mov	r0, r4
 8025e6e:	4629      	mov	r1, r5
 8025e70:	f7da fbea 	bl	8000648 <__aeabi_dmul>
 8025e74:	a341      	add	r3, pc, #260	; (adr r3, 8025f7c <__kernel_sin+0x154>)
 8025e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e7a:	4680      	mov	r8, r0
 8025e7c:	4689      	mov	r9, r1
 8025e7e:	4650      	mov	r0, sl
 8025e80:	4659      	mov	r1, fp
 8025e82:	f7da fbe1 	bl	8000648 <__aeabi_dmul>
 8025e86:	a33f      	add	r3, pc, #252	; (adr r3, 8025f84 <__kernel_sin+0x15c>)
 8025e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e8c:	f7da fa24 	bl	80002d8 <__aeabi_dsub>
 8025e90:	4652      	mov	r2, sl
 8025e92:	465b      	mov	r3, fp
 8025e94:	f7da fbd8 	bl	8000648 <__aeabi_dmul>
 8025e98:	a33c      	add	r3, pc, #240	; (adr r3, 8025f8c <__kernel_sin+0x164>)
 8025e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e9e:	f7da fa1d 	bl	80002dc <__adddf3>
 8025ea2:	4652      	mov	r2, sl
 8025ea4:	465b      	mov	r3, fp
 8025ea6:	f7da fbcf 	bl	8000648 <__aeabi_dmul>
 8025eaa:	a33a      	add	r3, pc, #232	; (adr r3, 8025f94 <__kernel_sin+0x16c>)
 8025eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025eb0:	f7da fa12 	bl	80002d8 <__aeabi_dsub>
 8025eb4:	4652      	mov	r2, sl
 8025eb6:	465b      	mov	r3, fp
 8025eb8:	f7da fbc6 	bl	8000648 <__aeabi_dmul>
 8025ebc:	a337      	add	r3, pc, #220	; (adr r3, 8025f9c <__kernel_sin+0x174>)
 8025ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ec2:	f7da fa0b 	bl	80002dc <__adddf3>
 8025ec6:	9b01      	ldr	r3, [sp, #4]
 8025ec8:	4606      	mov	r6, r0
 8025eca:	460f      	mov	r7, r1
 8025ecc:	b9eb      	cbnz	r3, 8025f0a <__kernel_sin+0xe2>
 8025ece:	4602      	mov	r2, r0
 8025ed0:	460b      	mov	r3, r1
 8025ed2:	4650      	mov	r0, sl
 8025ed4:	4659      	mov	r1, fp
 8025ed6:	f7da fbb7 	bl	8000648 <__aeabi_dmul>
 8025eda:	a325      	add	r3, pc, #148	; (adr r3, 8025f70 <__kernel_sin+0x148>)
 8025edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ee0:	f7da f9fa 	bl	80002d8 <__aeabi_dsub>
 8025ee4:	4642      	mov	r2, r8
 8025ee6:	464b      	mov	r3, r9
 8025ee8:	f7da fbae 	bl	8000648 <__aeabi_dmul>
 8025eec:	4602      	mov	r2, r0
 8025eee:	460b      	mov	r3, r1
 8025ef0:	4620      	mov	r0, r4
 8025ef2:	4629      	mov	r1, r5
 8025ef4:	f7da f9f2 	bl	80002dc <__adddf3>
 8025ef8:	4604      	mov	r4, r0
 8025efa:	460d      	mov	r5, r1
 8025efc:	ec45 4b10 	vmov	d0, r4, r5
 8025f00:	b003      	add	sp, #12
 8025f02:	ecbd 8b04 	vpop	{d8-d9}
 8025f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f0a:	4b1b      	ldr	r3, [pc, #108]	; (8025f78 <__kernel_sin+0x150>)
 8025f0c:	ec51 0b18 	vmov	r0, r1, d8
 8025f10:	2200      	movs	r2, #0
 8025f12:	f7da fb99 	bl	8000648 <__aeabi_dmul>
 8025f16:	4632      	mov	r2, r6
 8025f18:	ec41 0b19 	vmov	d9, r0, r1
 8025f1c:	463b      	mov	r3, r7
 8025f1e:	4640      	mov	r0, r8
 8025f20:	4649      	mov	r1, r9
 8025f22:	f7da fb91 	bl	8000648 <__aeabi_dmul>
 8025f26:	4602      	mov	r2, r0
 8025f28:	460b      	mov	r3, r1
 8025f2a:	ec51 0b19 	vmov	r0, r1, d9
 8025f2e:	f7da f9d3 	bl	80002d8 <__aeabi_dsub>
 8025f32:	4652      	mov	r2, sl
 8025f34:	465b      	mov	r3, fp
 8025f36:	f7da fb87 	bl	8000648 <__aeabi_dmul>
 8025f3a:	ec53 2b18 	vmov	r2, r3, d8
 8025f3e:	f7da f9cb 	bl	80002d8 <__aeabi_dsub>
 8025f42:	a30b      	add	r3, pc, #44	; (adr r3, 8025f70 <__kernel_sin+0x148>)
 8025f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f48:	4606      	mov	r6, r0
 8025f4a:	460f      	mov	r7, r1
 8025f4c:	4640      	mov	r0, r8
 8025f4e:	4649      	mov	r1, r9
 8025f50:	f7da fb7a 	bl	8000648 <__aeabi_dmul>
 8025f54:	4602      	mov	r2, r0
 8025f56:	460b      	mov	r3, r1
 8025f58:	4630      	mov	r0, r6
 8025f5a:	4639      	mov	r1, r7
 8025f5c:	f7da f9be 	bl	80002dc <__adddf3>
 8025f60:	4602      	mov	r2, r0
 8025f62:	460b      	mov	r3, r1
 8025f64:	4620      	mov	r0, r4
 8025f66:	4629      	mov	r1, r5
 8025f68:	f7da f9b6 	bl	80002d8 <__aeabi_dsub>
 8025f6c:	e7c4      	b.n	8025ef8 <__kernel_sin+0xd0>
 8025f6e:	bf00      	nop
 8025f70:	55555549 	.word	0x55555549
 8025f74:	3fc55555 	.word	0x3fc55555
 8025f78:	3fe00000 	.word	0x3fe00000
 8025f7c:	5acfd57c 	.word	0x5acfd57c
 8025f80:	3de5d93a 	.word	0x3de5d93a
 8025f84:	8a2b9ceb 	.word	0x8a2b9ceb
 8025f88:	3e5ae5e6 	.word	0x3e5ae5e6
 8025f8c:	57b1fe7d 	.word	0x57b1fe7d
 8025f90:	3ec71de3 	.word	0x3ec71de3
 8025f94:	19c161d5 	.word	0x19c161d5
 8025f98:	3f2a01a0 	.word	0x3f2a01a0
 8025f9c:	1110f8a6 	.word	0x1110f8a6
 8025fa0:	3f811111 	.word	0x3f811111

08025fa4 <with_errno>:
 8025fa4:	b570      	push	{r4, r5, r6, lr}
 8025fa6:	4604      	mov	r4, r0
 8025fa8:	460d      	mov	r5, r1
 8025faa:	4616      	mov	r6, r2
 8025fac:	f7fb ffea 	bl	8021f84 <__errno>
 8025fb0:	4629      	mov	r1, r5
 8025fb2:	6006      	str	r6, [r0, #0]
 8025fb4:	4620      	mov	r0, r4
 8025fb6:	bd70      	pop	{r4, r5, r6, pc}

08025fb8 <xflow>:
 8025fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025fba:	4614      	mov	r4, r2
 8025fbc:	461d      	mov	r5, r3
 8025fbe:	b108      	cbz	r0, 8025fc4 <xflow+0xc>
 8025fc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8025fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025fcc:	4620      	mov	r0, r4
 8025fce:	4629      	mov	r1, r5
 8025fd0:	f7da fb3a 	bl	8000648 <__aeabi_dmul>
 8025fd4:	2222      	movs	r2, #34	; 0x22
 8025fd6:	b003      	add	sp, #12
 8025fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025fdc:	f7ff bfe2 	b.w	8025fa4 <with_errno>

08025fe0 <__math_uflow>:
 8025fe0:	b508      	push	{r3, lr}
 8025fe2:	2200      	movs	r2, #0
 8025fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8025fe8:	f7ff ffe6 	bl	8025fb8 <xflow>
 8025fec:	ec41 0b10 	vmov	d0, r0, r1
 8025ff0:	bd08      	pop	{r3, pc}

08025ff2 <__math_oflow>:
 8025ff2:	b508      	push	{r3, lr}
 8025ff4:	2200      	movs	r2, #0
 8025ff6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8025ffa:	f7ff ffdd 	bl	8025fb8 <xflow>
 8025ffe:	ec41 0b10 	vmov	d0, r0, r1
 8026002:	bd08      	pop	{r3, pc}

08026004 <fabs>:
 8026004:	ec51 0b10 	vmov	r0, r1, d0
 8026008:	ee10 2a10 	vmov	r2, s0
 802600c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8026010:	ec43 2b10 	vmov	d0, r2, r3
 8026014:	4770      	bx	lr

08026016 <finite>:
 8026016:	b082      	sub	sp, #8
 8026018:	ed8d 0b00 	vstr	d0, [sp]
 802601c:	9801      	ldr	r0, [sp, #4]
 802601e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8026022:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8026026:	0fc0      	lsrs	r0, r0, #31
 8026028:	b002      	add	sp, #8
 802602a:	4770      	bx	lr
 802602c:	0000      	movs	r0, r0
	...

08026030 <floor>:
 8026030:	ec51 0b10 	vmov	r0, r1, d0
 8026034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026038:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802603c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8026040:	2e13      	cmp	r6, #19
 8026042:	ee10 5a10 	vmov	r5, s0
 8026046:	ee10 8a10 	vmov	r8, s0
 802604a:	460c      	mov	r4, r1
 802604c:	dc32      	bgt.n	80260b4 <floor+0x84>
 802604e:	2e00      	cmp	r6, #0
 8026050:	da14      	bge.n	802607c <floor+0x4c>
 8026052:	a333      	add	r3, pc, #204	; (adr r3, 8026120 <floor+0xf0>)
 8026054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026058:	f7da f940 	bl	80002dc <__adddf3>
 802605c:	2200      	movs	r2, #0
 802605e:	2300      	movs	r3, #0
 8026060:	f7da fd82 	bl	8000b68 <__aeabi_dcmpgt>
 8026064:	b138      	cbz	r0, 8026076 <floor+0x46>
 8026066:	2c00      	cmp	r4, #0
 8026068:	da57      	bge.n	802611a <floor+0xea>
 802606a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802606e:	431d      	orrs	r5, r3
 8026070:	d001      	beq.n	8026076 <floor+0x46>
 8026072:	4c2d      	ldr	r4, [pc, #180]	; (8026128 <floor+0xf8>)
 8026074:	2500      	movs	r5, #0
 8026076:	4621      	mov	r1, r4
 8026078:	4628      	mov	r0, r5
 802607a:	e025      	b.n	80260c8 <floor+0x98>
 802607c:	4f2b      	ldr	r7, [pc, #172]	; (802612c <floor+0xfc>)
 802607e:	4137      	asrs	r7, r6
 8026080:	ea01 0307 	and.w	r3, r1, r7
 8026084:	4303      	orrs	r3, r0
 8026086:	d01f      	beq.n	80260c8 <floor+0x98>
 8026088:	a325      	add	r3, pc, #148	; (adr r3, 8026120 <floor+0xf0>)
 802608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802608e:	f7da f925 	bl	80002dc <__adddf3>
 8026092:	2200      	movs	r2, #0
 8026094:	2300      	movs	r3, #0
 8026096:	f7da fd67 	bl	8000b68 <__aeabi_dcmpgt>
 802609a:	2800      	cmp	r0, #0
 802609c:	d0eb      	beq.n	8026076 <floor+0x46>
 802609e:	2c00      	cmp	r4, #0
 80260a0:	bfbe      	ittt	lt
 80260a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80260a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80260aa:	19a4      	addlt	r4, r4, r6
 80260ac:	ea24 0407 	bic.w	r4, r4, r7
 80260b0:	2500      	movs	r5, #0
 80260b2:	e7e0      	b.n	8026076 <floor+0x46>
 80260b4:	2e33      	cmp	r6, #51	; 0x33
 80260b6:	dd0b      	ble.n	80260d0 <floor+0xa0>
 80260b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80260bc:	d104      	bne.n	80260c8 <floor+0x98>
 80260be:	ee10 2a10 	vmov	r2, s0
 80260c2:	460b      	mov	r3, r1
 80260c4:	f7da f90a 	bl	80002dc <__adddf3>
 80260c8:	ec41 0b10 	vmov	d0, r0, r1
 80260cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80260d4:	f04f 33ff 	mov.w	r3, #4294967295
 80260d8:	fa23 f707 	lsr.w	r7, r3, r7
 80260dc:	4207      	tst	r7, r0
 80260de:	d0f3      	beq.n	80260c8 <floor+0x98>
 80260e0:	a30f      	add	r3, pc, #60	; (adr r3, 8026120 <floor+0xf0>)
 80260e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260e6:	f7da f8f9 	bl	80002dc <__adddf3>
 80260ea:	2200      	movs	r2, #0
 80260ec:	2300      	movs	r3, #0
 80260ee:	f7da fd3b 	bl	8000b68 <__aeabi_dcmpgt>
 80260f2:	2800      	cmp	r0, #0
 80260f4:	d0bf      	beq.n	8026076 <floor+0x46>
 80260f6:	2c00      	cmp	r4, #0
 80260f8:	da02      	bge.n	8026100 <floor+0xd0>
 80260fa:	2e14      	cmp	r6, #20
 80260fc:	d103      	bne.n	8026106 <floor+0xd6>
 80260fe:	3401      	adds	r4, #1
 8026100:	ea25 0507 	bic.w	r5, r5, r7
 8026104:	e7b7      	b.n	8026076 <floor+0x46>
 8026106:	2301      	movs	r3, #1
 8026108:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802610c:	fa03 f606 	lsl.w	r6, r3, r6
 8026110:	4435      	add	r5, r6
 8026112:	4545      	cmp	r5, r8
 8026114:	bf38      	it	cc
 8026116:	18e4      	addcc	r4, r4, r3
 8026118:	e7f2      	b.n	8026100 <floor+0xd0>
 802611a:	2500      	movs	r5, #0
 802611c:	462c      	mov	r4, r5
 802611e:	e7aa      	b.n	8026076 <floor+0x46>
 8026120:	8800759c 	.word	0x8800759c
 8026124:	7e37e43c 	.word	0x7e37e43c
 8026128:	bff00000 	.word	0xbff00000
 802612c:	000fffff 	.word	0x000fffff

08026130 <scalbn>:
 8026130:	b570      	push	{r4, r5, r6, lr}
 8026132:	ec55 4b10 	vmov	r4, r5, d0
 8026136:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802613a:	4606      	mov	r6, r0
 802613c:	462b      	mov	r3, r5
 802613e:	b99a      	cbnz	r2, 8026168 <scalbn+0x38>
 8026140:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026144:	4323      	orrs	r3, r4
 8026146:	d036      	beq.n	80261b6 <scalbn+0x86>
 8026148:	4b39      	ldr	r3, [pc, #228]	; (8026230 <scalbn+0x100>)
 802614a:	4629      	mov	r1, r5
 802614c:	ee10 0a10 	vmov	r0, s0
 8026150:	2200      	movs	r2, #0
 8026152:	f7da fa79 	bl	8000648 <__aeabi_dmul>
 8026156:	4b37      	ldr	r3, [pc, #220]	; (8026234 <scalbn+0x104>)
 8026158:	429e      	cmp	r6, r3
 802615a:	4604      	mov	r4, r0
 802615c:	460d      	mov	r5, r1
 802615e:	da10      	bge.n	8026182 <scalbn+0x52>
 8026160:	a32b      	add	r3, pc, #172	; (adr r3, 8026210 <scalbn+0xe0>)
 8026162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026166:	e03a      	b.n	80261de <scalbn+0xae>
 8026168:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802616c:	428a      	cmp	r2, r1
 802616e:	d10c      	bne.n	802618a <scalbn+0x5a>
 8026170:	ee10 2a10 	vmov	r2, s0
 8026174:	4620      	mov	r0, r4
 8026176:	4629      	mov	r1, r5
 8026178:	f7da f8b0 	bl	80002dc <__adddf3>
 802617c:	4604      	mov	r4, r0
 802617e:	460d      	mov	r5, r1
 8026180:	e019      	b.n	80261b6 <scalbn+0x86>
 8026182:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8026186:	460b      	mov	r3, r1
 8026188:	3a36      	subs	r2, #54	; 0x36
 802618a:	4432      	add	r2, r6
 802618c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8026190:	428a      	cmp	r2, r1
 8026192:	dd08      	ble.n	80261a6 <scalbn+0x76>
 8026194:	2d00      	cmp	r5, #0
 8026196:	a120      	add	r1, pc, #128	; (adr r1, 8026218 <scalbn+0xe8>)
 8026198:	e9d1 0100 	ldrd	r0, r1, [r1]
 802619c:	da1c      	bge.n	80261d8 <scalbn+0xa8>
 802619e:	a120      	add	r1, pc, #128	; (adr r1, 8026220 <scalbn+0xf0>)
 80261a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80261a4:	e018      	b.n	80261d8 <scalbn+0xa8>
 80261a6:	2a00      	cmp	r2, #0
 80261a8:	dd08      	ble.n	80261bc <scalbn+0x8c>
 80261aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80261ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80261b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80261b6:	ec45 4b10 	vmov	d0, r4, r5
 80261ba:	bd70      	pop	{r4, r5, r6, pc}
 80261bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80261c0:	da19      	bge.n	80261f6 <scalbn+0xc6>
 80261c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80261c6:	429e      	cmp	r6, r3
 80261c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80261cc:	dd0a      	ble.n	80261e4 <scalbn+0xb4>
 80261ce:	a112      	add	r1, pc, #72	; (adr r1, 8026218 <scalbn+0xe8>)
 80261d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80261d4:	2b00      	cmp	r3, #0
 80261d6:	d1e2      	bne.n	802619e <scalbn+0x6e>
 80261d8:	a30f      	add	r3, pc, #60	; (adr r3, 8026218 <scalbn+0xe8>)
 80261da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261de:	f7da fa33 	bl	8000648 <__aeabi_dmul>
 80261e2:	e7cb      	b.n	802617c <scalbn+0x4c>
 80261e4:	a10a      	add	r1, pc, #40	; (adr r1, 8026210 <scalbn+0xe0>)
 80261e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	d0b8      	beq.n	8026160 <scalbn+0x30>
 80261ee:	a10e      	add	r1, pc, #56	; (adr r1, 8026228 <scalbn+0xf8>)
 80261f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80261f4:	e7b4      	b.n	8026160 <scalbn+0x30>
 80261f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80261fa:	3236      	adds	r2, #54	; 0x36
 80261fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8026200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8026204:	4620      	mov	r0, r4
 8026206:	4b0c      	ldr	r3, [pc, #48]	; (8026238 <scalbn+0x108>)
 8026208:	2200      	movs	r2, #0
 802620a:	e7e8      	b.n	80261de <scalbn+0xae>
 802620c:	f3af 8000 	nop.w
 8026210:	c2f8f359 	.word	0xc2f8f359
 8026214:	01a56e1f 	.word	0x01a56e1f
 8026218:	8800759c 	.word	0x8800759c
 802621c:	7e37e43c 	.word	0x7e37e43c
 8026220:	8800759c 	.word	0x8800759c
 8026224:	fe37e43c 	.word	0xfe37e43c
 8026228:	c2f8f359 	.word	0xc2f8f359
 802622c:	81a56e1f 	.word	0x81a56e1f
 8026230:	43500000 	.word	0x43500000
 8026234:	ffff3cb0 	.word	0xffff3cb0
 8026238:	3c900000 	.word	0x3c900000

0802623c <_init>:
 802623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802623e:	bf00      	nop
 8026240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026242:	bc08      	pop	{r3}
 8026244:	469e      	mov	lr, r3
 8026246:	4770      	bx	lr

08026248 <_fini>:
 8026248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802624a:	bf00      	nop
 802624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802624e:	bc08      	pop	{r3}
 8026250:	469e      	mov	lr, r3
 8026252:	4770      	bx	lr
