
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800e288  0800e288  0001e288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e77c  0800e77c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e77c  0800e77c  0001e77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e784  0800e784  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e788  0800e788  0001e788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800e78c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c188  200001fc  0800e988  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c384  0800e988  0002c384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022cc1  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005048  00000000  00000000  00042eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c38  00000000  00000000  00047f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  00049b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025639  00000000  00000000  0004b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258f0  00000000  00000000  00070b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8cb3  00000000  00000000  00096479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f12c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000859c  00000000  00000000  0017f17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e270 	.word	0x0800e270

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800e270 	.word	0x0800e270

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000238 	.word	0x20000238
 8001004:	2000023c 	.word	0x2000023c
 8001008:	20000248 	.word	0x20000248
 800100c:	2000024c 	.word	0x2000024c
 8001010:	20000258 	.word	0x20000258
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000240 	.word	0x20000240
 8001050:	20000244 	.word	0x20000244
 8001054:	20000250 	.word	0x20000250
 8001058:	20000254 	.word	0x20000254
 800105c:	20000258 	.word	0x20000258
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bdc      	ldr	r3, [pc, #880]	; (80013e0 <interupt_calEncoder+0x378>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bdb      	ldr	r3, [pc, #876]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 80013e8 <interupt_calEncoder+0x380>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 80013ec <interupt_calEncoder+0x384>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 80013f0 <interupt_calEncoder+0x388>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013ec <interupt_calEncoder+0x384>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bcb      	ldr	r3, [pc, #812]	; (80013f4 <interupt_calEncoder+0x38c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bca      	ldr	r3, [pc, #808]	; (80013f8 <interupt_calEncoder+0x390>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80013e8 <interupt_calEncoder+0x380>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80013ec <interupt_calEncoder+0x384>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80013f0 <interupt_calEncoder+0x388>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013ec <interupt_calEncoder+0x384>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * TIRE_DIAMETER * 1000 * pi / 180 / 39 * 9 / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a3a7      	add	r3, pc, #668	; (adr r3, 80013c8 <interupt_calEncoder+0x360>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4baf      	ldr	r3, [pc, #700]	; (80013fc <interupt_calEncoder+0x394>)
 8001140:	f7ff fa82 	bl	8000648 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4bab      	ldr	r3, [pc, #684]	; (8001400 <interupt_calEncoder+0x398>)
 8001152:	f7ff fba3 	bl	800089c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4ba8      	ldr	r3, [pc, #672]	; (8001404 <interupt_calEncoder+0x39c>)
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <interupt_calEncoder+0x398>)
 8001176:	f7ff fb91 	bl	800089c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b9f      	ldr	r3, [pc, #636]	; (8001404 <interupt_calEncoder+0x39c>)
 8001188:	f7ff fa5e 	bl	8000648 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b99      	ldr	r3, [pc, #612]	; (8001400 <interupt_calEncoder+0x398>)
 800119a:	f7ff fb7f 	bl	800089c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <interupt_calEncoder+0x3a0>)
 80011ac:	f7ff fa4c 	bl	8000648 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b90      	ldr	r3, [pc, #576]	; (8001400 <interupt_calEncoder+0x398>)
 80011be:	f7ff fb6d 	bl	800089c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b8f      	ldr	r3, [pc, #572]	; (800140c <interupt_calEncoder+0x3a4>)
 80011d0:	f7ff fa3a 	bl	8000648 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	a37c      	add	r3, pc, #496	; (adr r3, 80013d0 <interupt_calEncoder+0x368>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa31 	bl	8000648 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b87      	ldr	r3, [pc, #540]	; (8001410 <interupt_calEncoder+0x3a8>)
 80011f4:	f7ff fb52 	bl	800089c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b83      	ldr	r3, [pc, #524]	; (8001414 <interupt_calEncoder+0x3ac>)
 8001206:	f7ff fb49 	bl	800089c <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b80      	ldr	r3, [pc, #512]	; (8001418 <interupt_calEncoder+0x3b0>)
 8001218:	f7ff fa16 	bl	8000648 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a36c      	add	r3, pc, #432	; (adr r3, 80013d8 <interupt_calEncoder+0x370>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fb37 	bl	800089c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcdf 	bl	8000bf8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	4a77      	ldr	r2, [pc, #476]	; (800141c <interupt_calEncoder+0x3b4>)
 800123e:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * TIRE_DIAMETER * 1000 * pi / 180 / 39 * 9 / INTERRUPT_TIME;
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f9a9 	bl	8000598 <__aeabi_f2d>
 8001246:	a360      	add	r3, pc, #384	; (adr r3, 80013c8 <interupt_calEncoder+0x360>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9fc 	bl	8000648 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <interupt_calEncoder+0x394>)
 800125e:	f7ff f9f3 	bl	8000648 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b64      	ldr	r3, [pc, #400]	; (8001400 <interupt_calEncoder+0x398>)
 8001270:	f7ff fb14 	bl	800089c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b60      	ldr	r3, [pc, #384]	; (8001404 <interupt_calEncoder+0x39c>)
 8001282:	f7ff f9e1 	bl	8000648 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <interupt_calEncoder+0x398>)
 8001294:	f7ff fb02 	bl	800089c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <interupt_calEncoder+0x39c>)
 80012a6:	f7ff f9cf 	bl	8000648 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <interupt_calEncoder+0x398>)
 80012b8:	f7ff faf0 	bl	800089c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <interupt_calEncoder+0x3a0>)
 80012ca:	f7ff f9bd 	bl	8000648 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <interupt_calEncoder+0x398>)
 80012dc:	f7ff fade 	bl	800089c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <interupt_calEncoder+0x3a4>)
 80012ee:	f7ff f9ab 	bl	8000648 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a335      	add	r3, pc, #212	; (adr r3, 80013d0 <interupt_calEncoder+0x368>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f9a2 	bl	8000648 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <interupt_calEncoder+0x3a8>)
 8001312:	f7ff fac3 	bl	800089c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <interupt_calEncoder+0x3ac>)
 8001324:	f7ff faba 	bl	800089c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <interupt_calEncoder+0x3b0>)
 8001336:	f7ff f987 	bl	8000648 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	a325      	add	r3, pc, #148	; (adr r3, 80013d8 <interupt_calEncoder+0x370>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff faa8 	bl	800089c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc50 	bl	8000bf8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a31      	ldr	r2, [pc, #196]	; (8001420 <interupt_calEncoder+0x3b8>)
 800135c:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <interupt_calEncoder+0x3bc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f918 	bl	8000598 <__aeabi_f2d>
 8001368:	4604      	mov	r4, r0
 800136a:	460d      	mov	r5, r1
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <interupt_calEncoder+0x3b4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f911 	bl	8000598 <__aeabi_f2d>
 8001376:	a318      	add	r3, pc, #96	; (adr r3, 80013d8 <interupt_calEncoder+0x370>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f964 	bl	8000648 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7fe ffa8 	bl	80002dc <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc30 	bl	8000bf8 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <interupt_calEncoder+0x3bc>)
 800139c:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <interupt_calEncoder+0x3c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8f8 	bl	8000598 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <interupt_calEncoder+0x3b8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8f1 	bl	8000598 <__aeabi_f2d>
 80013b6:	a308      	add	r3, pc, #32	; (adr r3, 80013d8 <interupt_calEncoder+0x370>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f944 	bl	8000648 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e032      	b.n	800142c <interupt_calEncoder+0x3c4>
 80013c6:	bf00      	nop
 80013c8:	4e70a65b 	.word	0x4e70a65b
 80013cc:	3f882f36 	.word	0x3f882f36
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013dc:	3f50624d 	.word	0x3f50624d
 80013e0:	20000478 	.word	0x20000478
 80013e4:	20000218 	.word	0x20000218
 80013e8:	43340000 	.word	0x43340000
 80013ec:	43b40000 	.word	0x43b40000
 80013f0:	c3340000 	.word	0xc3340000
 80013f4:	2000047c 	.word	0x2000047c
 80013f8:	2000021c 	.word	0x2000021c
 80013fc:	40819000 	.word	0x40819000
 8001400:	4080e000 	.word	0x4080e000
 8001404:	4080b800 	.word	0x4080b800
 8001408:	40804000 	.word	0x40804000
 800140c:	408f4000 	.word	0x408f4000
 8001410:	40668000 	.word	0x40668000
 8001414:	40438000 	.word	0x40438000
 8001418:	40220000 	.word	0x40220000
 800141c:	20000228 	.word	0x20000228
 8001420:	2000022c 	.word	0x2000022c
 8001424:	20000220 	.word	0x20000220
 8001428:	20000224 	.word	0x20000224
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff54 	bl	80002dc <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbdc 	bl	8000bf8 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <interupt_calEncoder+0x3f8>)
 8001444:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <interupt_calEncoder+0x3fc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <interupt_calEncoder+0x400>)
 800144c:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <interupt_calEncoder+0x404>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <interupt_calEncoder+0x408>)
 8001454:	6013      	str	r3, [r2, #0]

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000224 	.word	0x20000224
 8001464:	2000047c 	.word	0x2000047c
 8001468:	2000021c 	.word	0x2000021c
 800146c:	20000478 	.word	0x20000478
 8001470:	20000218 	.word	0x20000218

08001474 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	int s = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
	angle = 0;
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <reset_gyro+0xfc>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <reset_gyro+0x100>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800148e:	2301      	movs	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e026      	b.n	80014e2 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <reset_gyro+0x104>)
 8001496:	ed93 7a02 	vldr	s14, [r3, #8]
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <reset_gyro+0x100>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <reset_gyro+0x100>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <reset_gyro+0x104>)
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <reset_gyro+0x108>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <reset_gyro+0x108>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <reset_gyro+0x104>)
 80014c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <reset_gyro+0x10c>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <reset_gyro+0x10c>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f001 f902 	bl	80026e0 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e8:	ddd4      	ble.n	8001494 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <reset_gyro+0x100>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001584 <reset_gyro+0x110>
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <reset_gyro+0x100>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <reset_gyro+0x108>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001584 <reset_gyro+0x110>
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <reset_gyro+0x108>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <reset_gyro+0x10c>)
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001584 <reset_gyro+0x110>
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <reset_gyro+0x10c>)
 8001522:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <reset_gyro+0xfc>)
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	anglex = 0;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <reset_gyro+0x114>)
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <reset_gyro+0x118>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <reset_gyro+0x11c>)
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e009      	b.n	8001560 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <reset_gyro+0x120>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b09      	cmp	r3, #9
 8001564:	ddf2      	ble.n	800154c <reset_gyro+0xd8>
	}
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000025c 	.word	0x2000025c
 8001574:	2000027c 	.word	0x2000027c
 8001578:	20000484 	.word	0x20000484
 800157c:	20000278 	.word	0x20000278
 8001580:	20000280 	.word	0x20000280
 8001584:	447a0000 	.word	0x447a0000
 8001588:	20000264 	.word	0x20000264
 800158c:	2000026c 	.word	0x2000026c
 8001590:	20000270 	.word	0x20000270
 8001594:	20000284 	.word	0x20000284

08001598 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	int j = 9;
 800159e:	2309      	movs	r3, #9
 80015a0:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 80015a2:	2309      	movs	r3, #9
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e00d      	b.n	80015c4 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a9c      	ldr	r2, [pc, #624]	; (8001820 <interrupt_calGyro+0x288>)
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	499a      	ldr	r1, [pc, #616]	; (8001820 <interrupt_calGyro+0x288>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dcee      	bgt.n	80015a8 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80015ca:	4b96      	ldr	r3, [pc, #600]	; (8001824 <interrupt_calGyro+0x28c>)
 80015cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d0:	4b95      	ldr	r3, [pc, #596]	; (8001828 <interrupt_calGyro+0x290>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	ee17 0a90 	vmov	r0, s15
 80015de:	f7fe ffdb 	bl	8000598 <__aeabi_f2d>
 80015e2:	a383      	add	r3, pc, #524	; (adr r3, 80017f0 <interrupt_calGyro+0x258>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f82e 	bl	8000648 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <interrupt_calGyro+0x294>)
 80015fa:	f7ff f825 	bl	8000648 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a37c      	add	r3, pc, #496	; (adr r3, 80017f8 <interrupt_calGyro+0x260>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f946 	bl	800089c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <interrupt_calGyro+0x298>)
 800161e:	f7ff f813 	bl	8000648 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b81      	ldr	r3, [pc, #516]	; (8001834 <interrupt_calGyro+0x29c>)
 8001630:	f7ff f934 	bl	800089c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	a370      	add	r3, pc, #448	; (adr r3, 8001800 <interrupt_calGyro+0x268>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7ff f801 	bl	8000648 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	a36a      	add	r3, pc, #424	; (adr r3, 80017f8 <interrupt_calGyro+0x260>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f922 	bl	800089c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faca 	bl	8000bf8 <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <interrupt_calGyro+0x288>)
 8001668:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <interrupt_calGyro+0x288>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a72      	ldr	r2, [pc, #456]	; (8001838 <interrupt_calGyro+0x2a0>)
 8001670:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001672:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <interrupt_calGyro+0x28c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a71      	ldr	r2, [pc, #452]	; (800183c <interrupt_calGyro+0x2a4>)
 8001678:	6013      	str	r3, [r2, #0]
	angle += 0.001 * angle_speed; //deg
 800167a:	4b71      	ldr	r3, [pc, #452]	; (8001840 <interrupt_calGyro+0x2a8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff8a 	bl	8000598 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <interrupt_calGyro+0x2a0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff83 	bl	8000598 <__aeabi_f2d>
 8001692:	a35d      	add	r3, pc, #372	; (adr r3, 8001808 <interrupt_calGyro+0x270>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffd6 	bl	8000648 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fe1a 	bl	80002dc <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff faa2 	bl	8000bf8 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a62      	ldr	r2, [pc, #392]	; (8001840 <interrupt_calGyro+0x2a8>)
 80016b8:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 80016ba:	4b62      	ldr	r3, [pc, #392]	; (8001844 <interrupt_calGyro+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff6a 	bl	8000598 <__aeabi_f2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b56      	ldr	r3, [pc, #344]	; (8001824 <interrupt_calGyro+0x28c>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <interrupt_calGyro+0x2b0>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d8:	ee17 0a90 	vmov	r0, s15
 80016dc:	f7fe ff5c 	bl	8000598 <__aeabi_f2d>
 80016e0:	a349      	add	r3, pc, #292	; (adr r3, 8001808 <interrupt_calGyro+0x270>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ffaf 	bl	8000648 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4620      	mov	r0, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	f7fe fdf3 	bl	80002dc <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa7b 	bl	8000bf8 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <interrupt_calGyro+0x2ac>)
 8001706:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = -(gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000;
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <interrupt_calGyro+0x28c>)
 800170a:	ed93 7a04 	vldr	s14, [r3, #16]
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <interrupt_calGyro+0x2b4>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	eef1 7a67 	vneg.f32	s15, s15
 800171c:	ee17 3a90 	vmov	r3, s15
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff39 	bl	8000598 <__aeabi_f2d>
 8001726:	a33a      	add	r3, pc, #232	; (adr r3, 8001810 <interrupt_calGyro+0x278>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff8c 	bl	8000648 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a337      	add	r3, pc, #220	; (adr r3, 8001818 <interrupt_calGyro+0x280>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff83 	bl	8000648 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <interrupt_calGyro+0x2b8>)
 8001750:	f7fe ff7a 	bl	8000648 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa4c 	bl	8000bf8 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <interrupt_calGyro+0x2bc>)
 8001764:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <interrupt_calGyro+0x2c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ff14 	bl	8000598 <__aeabi_f2d>
 8001770:	4604      	mov	r4, r0
 8001772:	460d      	mov	r5, r1
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <interrupt_calGyro+0x2bc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe ff0d 	bl	8000598 <__aeabi_f2d>
 800177e:	a322      	add	r3, pc, #136	; (adr r3, 8001808 <interrupt_calGyro+0x270>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff60 	bl	8000648 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fda4 	bl	80002dc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa2c 	bl	8000bf8 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <interrupt_calGyro+0x2c0>)
 80017a4:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <interrupt_calGyro+0x2c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fef4 	bl	8000598 <__aeabi_f2d>
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <interrupt_calGyro+0x2c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feed 	bl	8000598 <__aeabi_f2d>
 80017be:	a312      	add	r3, pc, #72	; (adr r3, 8001808 <interrupt_calGyro+0x270>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff40 	bl	8000648 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fd84 	bl	80002dc <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff fa0c 	bl	8000bf8 <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <interrupt_calGyro+0x2c4>)
 80017e4:	6013      	str	r3, [r2, #0]




}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20253975 	.word	0x20253975
 80017f4:	3fee6126 	.word	0x3fee6126
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40ac2000 	.word	0x40ac2000
 8001800:	00000000 	.word	0x00000000
 8001804:	40abc600 	.word	0x40abc600
 8001808:	d2f1a9fc 	.word	0xd2f1a9fc
 800180c:	3f50624d 	.word	0x3f50624d
 8001810:	7ae147ae 	.word	0x7ae147ae
 8001814:	3ff3ae14 	.word	0x3ff3ae14
 8001818:	9999999a 	.word	0x9999999a
 800181c:	3ff19999 	.word	0x3ff19999
 8001820:	20000284 	.word	0x20000284
 8001824:	20000484 	.word	0x20000484
 8001828:	2000027c 	.word	0x2000027c
 800182c:	40ab8000 	.word	0x40ab8000
 8001830:	4086e000 	.word	0x4086e000
 8001834:	40868000 	.word	0x40868000
 8001838:	20000260 	.word	0x20000260
 800183c:	20000268 	.word	0x20000268
 8001840:	2000025c 	.word	0x2000025c
 8001844:	20000264 	.word	0x20000264
 8001848:	20000278 	.word	0x20000278
 800184c:	20000280 	.word	0x20000280
 8001850:	408f4000 	.word	0x408f4000
 8001854:	20000274 	.word	0x20000274
 8001858:	2000026c 	.word	0x2000026c
 800185c:	20000270 	.word	0x20000270

08001860 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001866:	f000 fea9 	bl	80025bc <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 800186a:	2313      	movs	r3, #19
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e037      	b.n	80018e0 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a61      	ldr	r2, [pc, #388]	; (80019fc <interupt_calSensor+0x19c>)
 8001876:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800187a:	4960      	ldr	r1, [pc, #384]	; (80019fc <interupt_calSensor+0x19c>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <interupt_calSensor+0x19c>)
 8001888:	3314      	adds	r3, #20
 800188a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188e:	495b      	ldr	r1, [pc, #364]	; (80019fc <interupt_calSensor+0x19c>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3314      	adds	r3, #20
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a57      	ldr	r2, [pc, #348]	; (80019fc <interupt_calSensor+0x19c>)
 800189e:	3328      	adds	r3, #40	; 0x28
 80018a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018a4:	4955      	ldr	r1, [pc, #340]	; (80019fc <interupt_calSensor+0x19c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3328      	adds	r3, #40	; 0x28
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a52      	ldr	r2, [pc, #328]	; (80019fc <interupt_calSensor+0x19c>)
 80018b4:	333c      	adds	r3, #60	; 0x3c
 80018b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ba:	4950      	ldr	r1, [pc, #320]	; (80019fc <interupt_calSensor+0x19c>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	333c      	adds	r3, #60	; 0x3c
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <interupt_calSensor+0x19c>)
 80018ca:	3350      	adds	r3, #80	; 0x50
 80018cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d0:	494a      	ldr	r1, [pc, #296]	; (80019fc <interupt_calSensor+0x19c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3350      	adds	r3, #80	; 0x50
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3b01      	subs	r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dcc4      	bgt.n	8001870 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <interupt_calSensor+0x1a0>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <interupt_calSensor+0x1a4>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4a42      	ldr	r2, [pc, #264]	; (80019fc <interupt_calSensor+0x19c>)
 80018f4:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <interupt_calSensor+0x1a0>)
 80018f8:	885b      	ldrh	r3, [r3, #2]
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <interupt_calSensor+0x1a4>)
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <interupt_calSensor+0x19c>)
 8001904:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <interupt_calSensor+0x1a0>)
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <interupt_calSensor+0x1a4>)
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <interupt_calSensor+0x19c>)
 8001914:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <interupt_calSensor+0x1a0>)
 800191a:	88db      	ldrh	r3, [r3, #6]
 800191c:	461a      	mov	r2, r3
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <interupt_calSensor+0x1a4>)
 8001920:	88db      	ldrh	r3, [r3, #6]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a35      	ldr	r2, [pc, #212]	; (80019fc <interupt_calSensor+0x19c>)
 8001926:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <interupt_calSensor+0x1a0>)
 800192c:	891b      	ldrh	r3, [r3, #8]
 800192e:	461a      	mov	r2, r3
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <interupt_calSensor+0x1a4>)
 8001932:	891b      	ldrh	r3, [r3, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <interupt_calSensor+0x19c>)
 8001938:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	e053      	b.n	80019ea <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001942:	492e      	ldr	r1, [pc, #184]	; (80019fc <interupt_calSensor+0x19c>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	440b      	add	r3, r1
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	482a      	ldr	r0, [pc, #168]	; (80019fc <interupt_calSensor+0x19c>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4403      	add	r3, r0
 8001960:	332c      	adds	r3, #44	; 0x2c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1aca      	subs	r2, r1, r3
 8001966:	4928      	ldr	r1, [pc, #160]	; (8001a08 <interupt_calSensor+0x1a8>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][3];
 800196e:	4923      	ldr	r1, [pc, #140]	; (80019fc <interupt_calSensor+0x19c>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	440b      	add	r3, r1
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	481f      	ldr	r0, [pc, #124]	; (80019fc <interupt_calSensor+0x19c>)
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4403      	add	r3, r0
 800198c:	330c      	adds	r3, #12
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1aca      	subs	r2, r1, r3
 8001992:	491e      	ldr	r1, [pc, #120]	; (8001a0c <interupt_calSensor+0x1ac>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 800199a:	4918      	ldr	r1, [pc, #96]	; (80019fc <interupt_calSensor+0x19c>)
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	440b      	add	r3, r1
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <interupt_calSensor+0x19c>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4403      	add	r3, r0
 80019b8:	3304      	adds	r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4419      	add	r1, r3
 80019be:	480f      	ldr	r0, [pc, #60]	; (80019fc <interupt_calSensor+0x19c>)
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	440b      	add	r3, r1
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <interupt_calSensor+0x1b0>)
 80019d4:	fb82 1203 	smull	r1, r2, r2, r3
 80019d8:	17db      	asrs	r3, r3, #31
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	490d      	ldr	r1, [pc, #52]	; (8001a14 <interupt_calSensor+0x1b4>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	dda8      	ble.n	8001942 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002ac 	.word	0x200002ac
 8001a00:	200004ac 	.word	0x200004ac
 8001a04:	200004b8 	.word	0x200004b8
 8001a08:	2000043c 	.word	0x2000043c
 8001a0c:	20000450 	.word	0x20000450
 8001a10:	55555556 	.word	0x55555556
 8001a14:	20000464 	.word	0x20000464

08001a18 <pl_yellow_LED_off>:
}




void pl_yellow_LED_off(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f005 fd79 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f005 fd72 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <pl_yellow_LED_off+0x6c>)
 8001a3e:	f005 fd6d 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <pl_yellow_LED_off+0x70>)
 8001a4a:	f005 fd67 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <pl_yellow_LED_off+0x70>)
 8001a56:	f005 fd61 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <pl_yellow_LED_off+0x70>)
 8001a62:	f005 fd5b 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <pl_yellow_LED_off+0x70>)
 8001a6e:	f005 fd55 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <pl_yellow_LED_off+0x70>)
 8001a7a:	f005 fd4f 	bl	800751c <HAL_GPIO_WritePin>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	48000800 	.word	0x48000800
 8001a88:	48000400 	.word	0x48000400

08001a8c <pl_yellow_LED_on>:

void pl_yellow_LED_on(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f005 fd3f 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa8:	f005 fd38 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <pl_yellow_LED_on+0x6c>)
 8001ab2:	f005 fd33 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abc:	480f      	ldr	r0, [pc, #60]	; (8001afc <pl_yellow_LED_on+0x70>)
 8001abe:	f005 fd2d 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <pl_yellow_LED_on+0x70>)
 8001aca:	f005 fd27 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <pl_yellow_LED_on+0x70>)
 8001ad6:	f005 fd21 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <pl_yellow_LED_on+0x70>)
 8001ae2:	f005 fd1b 	bl	800751c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <pl_yellow_LED_on+0x70>)
 8001aee:	f005 fd15 	bl	800751c <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000400 	.word	0x48000400

08001b00 <pl_yellow_LED_count>:


void pl_yellow_LED_count(unsigned char yy){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b48:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5a:	f005 fcdf 	bl	800751c <HAL_GPIO_WritePin>
 8001b5e:	e006      	b.n	8001b6e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f005 fcd7 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f005 fccd 	bl	800751c <HAL_GPIO_WritePin>
 8001b82:	e006      	b.n	8001b92 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f005 fcc5 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8001b92:	7b7b      	ldrb	r3, [r7, #13]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2140      	movs	r1, #64	; 0x40
 8001b9c:	482e      	ldr	r0, [pc, #184]	; (8001c58 <pl_yellow_LED_count+0x158>)
 8001b9e:	f005 fcbd 	bl	800751c <HAL_GPIO_WritePin>
 8001ba2:	e004      	b.n	8001bae <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	482b      	ldr	r0, [pc, #172]	; (8001c58 <pl_yellow_LED_count+0x158>)
 8001baa:	f005 fcb7 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bba:	4828      	ldr	r0, [pc, #160]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001bbc:	f005 fcae 	bl	800751c <HAL_GPIO_WritePin>
 8001bc0:	e005      	b.n	8001bce <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc8:	4824      	ldr	r0, [pc, #144]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001bca:	f005 fca7 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bda:	4820      	ldr	r0, [pc, #128]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001bdc:	f005 fc9e 	bl	800751c <HAL_GPIO_WritePin>
 8001be0:	e005      	b.n	8001bee <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be8:	481c      	ldr	r0, [pc, #112]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001bea:	f005 fc97 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8001bee:	7abb      	ldrb	r3, [r7, #10]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	4818      	ldr	r0, [pc, #96]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001bfc:	f005 fc8e 	bl	800751c <HAL_GPIO_WritePin>
 8001c00:	e005      	b.n	8001c0e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c08:	4814      	ldr	r0, [pc, #80]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001c0a:	f005 fc87 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8001c0e:	7a7b      	ldrb	r3, [r7, #9]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1a:	4810      	ldr	r0, [pc, #64]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001c1c:	f005 fc7e 	bl	800751c <HAL_GPIO_WritePin>
 8001c20:	e005      	b.n	8001c2e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001c2a:	f005 fc77 	bl	800751c <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8001c2e:	7a3b      	ldrb	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	4808      	ldr	r0, [pc, #32]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001c3c:	f005 fc6e 	bl	800751c <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8001c40:	e005      	b.n	8001c4e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <pl_yellow_LED_count+0x15c>)
 8001c4a:	f005 fc67 	bl	800751c <HAL_GPIO_WritePin>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	48000400 	.word	0x48000400

08001c60 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c72:	4803      	ldr	r0, [pc, #12]	; (8001c80 <pl_r_blue_LED+0x20>)
 8001c74:	f005 fc52 	bl	800751c <HAL_GPIO_WritePin>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	48000800 	.word	0x48000800

08001c84 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	2104      	movs	r1, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <pl_l_blue_LED+0x20>)
 8001c96:	f005 fc41 	bl	800751c <HAL_GPIO_WritePin>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	80fb      	strh	r3, [r7, #6]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2110      	movs	r1, #16
 8001cbc:	4833      	ldr	r0, [pc, #204]	; (8001d8c <encoder_read_byte_R+0xe4>)
 8001cbe:	f005 fc2d 	bl	800751c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e00d      	b.n	8001cf0 <encoder_read_byte_R+0x48>
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	fa42 f303 	asr.w	r3, r2, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	8bfb      	ldrh	r3, [r7, #30]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	83fb      	strh	r3, [r7, #30]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b0e      	cmp	r3, #14
 8001cf4:	ddee      	ble.n	8001cd4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8001cf6:	8bfb      	ldrh	r3, [r7, #30]
 8001cf8:	03db      	lsls	r3, r3, #15
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8001d16:	f107 0110 	add.w	r1, r7, #16
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	481c      	ldr	r0, [pc, #112]	; (8001d90 <encoder_read_byte_R+0xe8>)
 8001d20:	f006 fcdf 	bl	80086e2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8001d24:	2201      	movs	r2, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <encoder_read_byte_R+0xe4>)
 8001d2a:	f005 fbf7 	bl	800751c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e002      	b.n	8001d3a <encoder_read_byte_R+0x92>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b95      	cmp	r3, #149	; 0x95
 8001d3e:	ddf9      	ble.n	8001d34 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8001d40:	2200      	movs	r2, #0
 8001d42:	2110      	movs	r1, #16
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <encoder_read_byte_R+0xe4>)
 8001d46:	f005 fbe9 	bl	800751c <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8001d5a:	f107 010c 	add.w	r1, r7, #12
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	2202      	movs	r2, #2
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <encoder_read_byte_R+0xe8>)
 8001d64:	f006 fe2b 	bl	80089be <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <encoder_read_byte_R+0xe4>)
 8001d7e:	f005 fbcd 	bl	800751c <HAL_GPIO_WritePin>

	return data;
 8001d82:	88bb      	ldrh	r3, [r7, #4]

}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	2000c194 	.word	0x2000c194

08001d94 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4613      	mov	r3, r2
 8001da2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f005 fbb5 	bl	800751c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	e00d      	b.n	8001de0 <encoder_read_byte_L+0x4c>
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	fa42 f303 	asr.w	r3, r2, r3
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	8bfb      	ldrh	r3, [r7, #30]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	83fb      	strh	r3, [r7, #30]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b0e      	cmp	r3, #14
 8001de4:	ddee      	ble.n	8001dc4 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8001de6:	8bfb      	ldrh	r3, [r7, #30]
 8001de8:	03db      	lsls	r3, r3, #15
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8001e06:	f107 0110 	add.w	r1, r7, #16
 8001e0a:	2364      	movs	r3, #100	; 0x64
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	481e      	ldr	r0, [pc, #120]	; (8001e88 <encoder_read_byte_L+0xf4>)
 8001e10:	f006 fc67 	bl	80086e2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f005 fb7d 	bl	800751c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e002      	b.n	8001e2e <encoder_read_byte_L+0x9a>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b95      	cmp	r3, #149	; 0x95
 8001e32:	ddf9      	ble.n	8001e28 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f005 fb6d 	bl	800751c <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8001e4c:	88bb      	ldrh	r3, [r7, #4]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8001e52:	f107 010c 	add.w	r1, r7, #12
 8001e56:	2364      	movs	r3, #100	; 0x64
 8001e58:	2202      	movs	r2, #2
 8001e5a:	480b      	ldr	r0, [pc, #44]	; (8001e88 <encoder_read_byte_L+0xf4>)
 8001e5c:	f006 fdaf 	bl	80089be <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	7b7b      	ldrb	r3, [r7, #13]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f005 fb4f 	bl	800751c <HAL_GPIO_WritePin>

	return data;
 8001e7e:	88bb      	ldrh	r3, [r7, #4]

}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000c194 	.word	0x2000c194

08001e8c <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8001e90:	2100      	movs	r1, #0
 8001e92:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001e96:	f7ff ff07 	bl	8001ca8 <encoder_read_byte_R>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ef0 <AS5047_DataUpdate+0x64>
 8001eac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eb0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ef4 <AS5047_DataUpdate+0x68>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <AS5047_DataUpdate+0x6c>)
 8001eba:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001ec4:	f7ff ff66 	bl	8001d94 <encoder_read_byte_L>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ef0 <AS5047_DataUpdate+0x64>
 8001eda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ede:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001ef4 <AS5047_DataUpdate+0x68>
 8001ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <AS5047_DataUpdate+0x70>)
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	43b40000 	.word	0x43b40000
 8001ef4:	46800000 	.word	0x46800000
 8001ef8:	20000478 	.word	0x20000478
 8001efc:	2000047c 	.word	0x2000047c

08001f00 <eraseFlash>:

FLASH_TEST *flash_test;


void eraseFlash( void )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select sector
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank2
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
	erase.Page = 127;//319;
 8001f0e:	237f      	movs	r3, #127	; 0x7f
 8001f10:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8001f1a:	1d3a      	adds	r2, r7, #4
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 f852 	bl	8006fcc <HAL_FLASHEx_Erase>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <writeFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data write data
 * @param uint32_t size write data size
*/
void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8001f3e:	f004 ff59 	bl	8006df4 <HAL_FLASH_Unlock>
	if(erasemode==1){
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <writeFlash+0x1c>
	eraseFlash();
 8001f48:	f7ff ffda 	bl	8001f00 <eraseFlash>
	}			// erease sector11

  for ( uint32_t add = address; add < (address + size); add+=2 ){
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00c      	b.n	8001f6c <writeFlash+0x3c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, *data); // write byte
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f004 fef4 	bl	8006d48 <HAL_FLASH_Program>
    data++;  // add data pointer
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3308      	adds	r3, #8
 8001f64:	60bb      	str	r3, [r7, #8]
  for ( uint32_t add = address; add < (address + size); add+=2 ){
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3ec      	bcc.n	8001f52 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8001f78:	f004 ff5e 	bl	8006e38 <HAL_FLASH_Lock>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <loadFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data read data
 * @param uint32_t size read data size
*/
void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8001f90:	f004 ff30 	bl	8006df4 <HAL_FLASH_Unlock>
	eraseFlash();
 8001f94:	f7ff ffb4 	bl	8001f00 <eraseFlash>
	HAL_FLASH_Lock();//そもそもイレースできない
 8001f98:	f004 ff4e 	bl	8006e38 <HAL_FLASH_Lock>

	memcpy(data, (uint64_t*)address, size); // copy data
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f009 fbd0 	bl	800b748 <memcpy>
//	}




}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <gyro_read_byte+0x50>)
 8001fc0:	f005 faac 	bl	800751c <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8001fce:	f107 010f 	add.w	r1, r7, #15
 8001fd2:	2364      	movs	r3, #100	; 0x64
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <gyro_read_byte+0x54>)
 8001fd8:	f006 fb83 	bl	80086e2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8001fdc:	f107 010e 	add.w	r1, r7, #14
 8001fe0:	2364      	movs	r3, #100	; 0x64
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <gyro_read_byte+0x54>)
 8001fe6:	f006 fcea 	bl	80089be <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8001fea:	2201      	movs	r2, #1
 8001fec:	2110      	movs	r1, #16
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <gyro_read_byte+0x50>)
 8001ff0:	f005 fa94 	bl	800751c <HAL_GPIO_WritePin>

	return val;
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]

}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	48000800 	.word	0x48000800
 8002004:	2000c130 	.word	0x2000c130

08002008 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2110      	movs	r1, #16
 8002026:	480c      	ldr	r0, [pc, #48]	; (8002058 <gyro_write_byte+0x50>)
 8002028:	f005 fa78 	bl	800751c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	2201      	movs	r2, #1
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <gyro_write_byte+0x54>)
 8002036:	f006 fb54 	bl	80086e2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 800203a:	1db9      	adds	r1, r7, #6
 800203c:	2364      	movs	r3, #100	; 0x64
 800203e:	2201      	movs	r2, #1
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <gyro_write_byte+0x54>)
 8002042:	f006 fb4e 	bl	80086e2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	2110      	movs	r1, #16
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <gyro_write_byte+0x50>)
 800204c:	f005 fa66 	bl	800751c <HAL_GPIO_WritePin>

}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	48000800 	.word	0x48000800
 800205c:	2000c130 	.word	0x2000c130

08002060 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 800206a:	2075      	movs	r0, #117	; 0x75
 800206c:	f7ff ffa0 	bl	8001fb0 <gyro_read_byte>
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	481b      	ldr	r0, [pc, #108]	; (80020e8 <pl_gyro_init+0x88>)
 800207a:	f009 ffe5 	bl	800c048 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b98      	cmp	r3, #152	; 0x98
 8002082:	d00e      	beq.n	80020a2 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8002084:	2064      	movs	r0, #100	; 0x64
 8002086:	f002 f88d 	bl	80041a4 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 800208a:	2075      	movs	r0, #117	; 0x75
 800208c:	f7ff ff90 	bl	8001fb0 <gyro_read_byte>
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b98      	cmp	r3, #152	; 0x98
 8002098:	d003      	beq.n	80020a2 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800209a:	4814      	ldr	r0, [pc, #80]	; (80020ec <pl_gyro_init+0x8c>)
 800209c:	f009 ffd4 	bl	800c048 <iprintf>
 80020a0:	e7fb      	b.n	800209a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 80020a2:	2100      	movs	r1, #0
 80020a4:	206b      	movs	r0, #107	; 0x6b
 80020a6:	f7ff ffaf 	bl	8002008 <gyro_write_byte>

	HAL_Delay(50);
 80020aa:	2032      	movs	r0, #50	; 0x32
 80020ac:	f002 f87a 	bl	80041a4 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 80020b0:	2100      	movs	r1, #0
 80020b2:	206c      	movs	r0, #108	; 0x6c
 80020b4:	f7ff ffa8 	bl	8002008 <gyro_write_byte>

	HAL_Delay(50);
 80020b8:	2032      	movs	r0, #50	; 0x32
 80020ba:	f002 f873 	bl	80041a4 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 80020be:	2118      	movs	r1, #24
 80020c0:	201b      	movs	r0, #27
 80020c2:	f7ff ffa1 	bl	8002008 <gyro_write_byte>

	HAL_Delay(50);
 80020c6:	2032      	movs	r0, #50	; 0x32
 80020c8:	f002 f86c 	bl	80041a4 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 80020cc:	2118      	movs	r1, #24
 80020ce:	201c      	movs	r0, #28
 80020d0:	f7ff ff9a 	bl	8002008 <gyro_write_byte>

	HAL_Delay(50);
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f002 f865 	bl	80041a4 <HAL_Delay>

	set_flag = 1;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <pl_gyro_init+0x90>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]

}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	0800e288 	.word	0x0800e288
 80020ec:	0800e29c 	.word	0x0800e29c
 80020f0:	20000480 	.word	0x20000480

080020f4 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff55 	bl	8001fb0 <gyro_read_byte>
 8002106:	4603      	mov	r3, r0
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	3301      	adds	r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff4c 	bl	8001fb0 <gyro_read_byte>
 8002118:	4603      	mov	r3, r0
 800211a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800211c:	4323      	orrs	r3, r4
 800211e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8002120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002148 <ICM20602_GYRO_READ+0x54>
 8002130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002134:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	ee07 3a90 	vmov	s15, r3

}
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	41833333 	.word	0x41833333

0800214c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff29 	bl	8001fb0 <gyro_read_byte>
 800215e:	4603      	mov	r3, r0
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff20 	bl	8001fb0 <gyro_read_byte>
 8002170:	4603      	mov	r3, r0
 8002172:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8002174:	4323      	orrs	r3, r4
 8002176:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8002178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002184:	eddf 6a06 	vldr	s13, [pc, #24]	; 80021a0 <ICM20602_ACCEL_READ+0x54>
 8002188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218c:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	ee07 3a90 	vmov	s15, r3

}
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	45000000 	.word	0x45000000

080021a4 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <ICM20602_DataUpdate+0x70>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d12f      	bne.n	8002210 <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_x = ICM20602_GYRO_READ(0x43);
 80021b0:	2043      	movs	r0, #67	; 0x43
 80021b2:	f7ff ff9f 	bl	80020f4 <ICM20602_GYRO_READ>
 80021b6:	eef0 7a40 	vmov.f32	s15, s0
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <ICM20602_DataUpdate+0x74>)
 80021bc:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_y = ICM20602_GYRO_READ(0x45);
 80021c0:	2045      	movs	r0, #69	; 0x45
 80021c2:	f7ff ff97 	bl	80020f4 <ICM20602_GYRO_READ>
 80021c6:	eef0 7a40 	vmov.f32	s15, s0
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <ICM20602_DataUpdate+0x74>)
 80021cc:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 80021d0:	2047      	movs	r0, #71	; 0x47
 80021d2:	f7ff ff8f 	bl	80020f4 <ICM20602_GYRO_READ>
 80021d6:	eef0 7a40 	vmov.f32	s15, s0
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <ICM20602_DataUpdate+0x74>)
 80021dc:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_x = ICM20602_ACCEL_READ(0x3B);
 80021e0:	203b      	movs	r0, #59	; 0x3b
 80021e2:	f7ff ffb3 	bl	800214c <ICM20602_ACCEL_READ>
 80021e6:	eef0 7a40 	vmov.f32	s15, s0
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <ICM20602_DataUpdate+0x74>)
 80021ec:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_y = ICM20602_ACCEL_READ(0x3D);
 80021f0:	203d      	movs	r0, #61	; 0x3d
 80021f2:	f7ff ffab 	bl	800214c <ICM20602_ACCEL_READ>
 80021f6:	eef0 7a40 	vmov.f32	s15, s0
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <ICM20602_DataUpdate+0x74>)
 80021fc:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8002200:	203f      	movs	r0, #63	; 0x3f
 8002202:	f7ff ffa3 	bl	800214c <ICM20602_ACCEL_READ>
 8002206:	eef0 7a40 	vmov.f32	s15, s0
 800220a:	4b03      	ldr	r3, [pc, #12]	; (8002218 <ICM20602_DataUpdate+0x74>)
 800220c:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000480 	.word	0x20000480
 8002218:	20000484 	.word	0x20000484

0800221c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8002220:	480f      	ldr	r0, [pc, #60]	; (8002260 <pl_motor_init+0x44>)
 8002222:	f007 f923 	bl	800946c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8002226:	480e      	ldr	r0, [pc, #56]	; (8002260 <pl_motor_init+0x44>)
 8002228:	f001 fdf0 	bl	8003e0c <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <pl_motor_init+0x48>)
 800222e:	f007 f91d 	bl	800946c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <pl_motor_init+0x48>)
 8002234:	f001 fdea 	bl	8003e0c <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8002238:	2001      	movs	r0, #1
 800223a:	f000 f815 	bl	8002268 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <pl_motor_init+0x44>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	225a      	movs	r2, #90	; 0x5a
 8002244:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 f836 	bl	80022b8 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <pl_motor_init+0x44>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	225a      	movs	r2, #90	; 0x5a
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <pl_motor_init+0x48>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	221e      	movs	r2, #30
 800225a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000c248 	.word	0x2000c248
 8002264:	2000c294 	.word	0x2000c294

08002268 <pl_L_DriveMotor_mode>:

void pl_DriveMotor_standby(int pin){
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}

void pl_L_DriveMotor_mode(int l_motor_mode){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d819      	bhi.n	80022aa <pl_L_DriveMotor_mode+0x42>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <pl_L_DriveMotor_mode+0x14>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	080022a9 	.word	0x080022a9
 8002280:	0800228d 	.word	0x0800228d
 8002284:	0800229b 	.word	0x0800229b
 8002288:	080022a9 	.word	0x080022a9
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002292:	4808      	ldr	r0, [pc, #32]	; (80022b4 <pl_L_DriveMotor_mode+0x4c>)
 8002294:	f005 f942 	bl	800751c <HAL_GPIO_WritePin>
break;
 8002298:	e007      	b.n	80022aa <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <pl_L_DriveMotor_mode+0x4c>)
 80022a2:	f005 f93b 	bl	800751c <HAL_GPIO_WritePin>
break;
 80022a6:	e000      	b.n	80022aa <pl_L_DriveMotor_mode+0x42>
break;
 80022a8:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	48000800 	.word	0x48000800

080022b8 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d817      	bhi.n	80022f6 <pl_R_DriveMotor_mode+0x3e>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <pl_R_DriveMotor_mode+0x14>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	080022dd 	.word	0x080022dd
 80022d4:	080022e9 	.word	0x080022e9
 80022d8:	080022f5 	.word	0x080022f5
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 80022dc:	2201      	movs	r2, #1
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <pl_R_DriveMotor_mode+0x48>)
 80022e2:	f005 f91b 	bl	800751c <HAL_GPIO_WritePin>
break;
 80022e6:	e006      	b.n	80022f6 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <pl_R_DriveMotor_mode+0x48>)
 80022ee:	f005 f915 	bl	800751c <HAL_GPIO_WritePin>
break;
 80022f2:	e000      	b.n	80022f6 <pl_R_DriveMotor_mode+0x3e>
break;
 80022f4:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	48000400 	.word	0x48000400

08002304 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002308:	2108      	movs	r1, #8
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <pl_DriveMotor_start+0x18>)
 800230c:	f007 f976 	bl	80095fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002310:	2100      	movs	r1, #0
 8002312:	4802      	ldr	r0, [pc, #8]	; (800231c <pl_DriveMotor_start+0x18>)
 8002314:	f007 f972 	bl	80095fc <HAL_TIM_PWM_Start>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000c248 	.word	0x2000c248

08002320 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002324:	2108      	movs	r1, #8
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <pl_DriveMotor_stop+0x18>)
 8002328:	f007 fa74 	bl	8009814 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	4802      	ldr	r0, [pc, #8]	; (8002338 <pl_DriveMotor_stop+0x18>)
 8002330:	f007 fa70 	bl	8009814 <HAL_TIM_PWM_Stop>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000c248 	.word	0x2000c248

0800233c <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <pl_DriveMotor_duty+0x28>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <pl_DriveMotor_duty+0x28>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000c248 	.word	0x2000c248

08002368 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	AD_step=0;
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <pl_sensor_init+0x18>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002372:	217f      	movs	r1, #127	; 0x7f
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <pl_sensor_init+0x1c>)
 8002376:	f003 ff8f 	bl	8006298 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200004a8 	.word	0x200004a8
 8002384:	200004d4 	.word	0x200004d4

08002388 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800238e:	4882      	ldr	r0, [pc, #520]	; (8002598 <pl_callback_getSensor+0x210>)
 8002390:	f002 fe2c 	bl	8004fec <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <pl_callback_getSensor+0x214>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b04      	cmp	r3, #4
 800239a:	f200 80da 	bhi.w	8002552 <pl_callback_getSensor+0x1ca>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <pl_callback_getSensor+0x1c>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b9 	.word	0x080023b9
 80023a8:	080023f1 	.word	0x080023f1
 80023ac:	08002439 	.word	0x08002439
 80023b0:	08002479 	.word	0x08002479
 80023b4:	08002529 	.word	0x08002529
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	2102      	movs	r1, #2
 80023bc:	4878      	ldr	r0, [pc, #480]	; (80025a0 <pl_callback_getSensor+0x218>)
 80023be:	f005 f8ad 	bl	800751c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80023c2:	2200      	movs	r2, #0
 80023c4:	2110      	movs	r1, #16
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ca:	f005 f8a7 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d4:	4873      	ldr	r0, [pc, #460]	; (80025a4 <pl_callback_getSensor+0x21c>)
 80023d6:	f005 f8a1 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80023de:	e002      	b.n	80023e6 <pl_callback_getSensor+0x5e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3301      	adds	r3, #1
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ec:	ddf8      	ble.n	80023e0 <pl_callback_getSensor+0x58>
		break;
 80023ee:	e0b0      	b.n	8002552 <pl_callback_getSensor+0x1ca>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <pl_callback_getSensor+0x220>)
 80023f2:	885a      	ldrh	r2, [r3, #2]
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <pl_callback_getSensor+0x224>)
 80023f6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <pl_callback_getSensor+0x220>)
 80023fa:	889a      	ldrh	r2, [r3, #4]
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <pl_callback_getSensor+0x224>)
 80023fe:	805a      	strh	r2, [r3, #2]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4866      	ldr	r0, [pc, #408]	; (80025a0 <pl_callback_getSensor+0x218>)
 8002406:	f005 f889 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	2110      	movs	r1, #16
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f005 f883 	bl	800751c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800241c:	4861      	ldr	r0, [pc, #388]	; (80025a4 <pl_callback_getSensor+0x21c>)
 800241e:	f005 f87d 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8002426:	e002      	b.n	800242e <pl_callback_getSensor+0xa6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3301      	adds	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002434:	ddf8      	ble.n	8002428 <pl_callback_getSensor+0xa0>
		break;
 8002436:	e08c      	b.n	8002552 <pl_callback_getSensor+0x1ca>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <pl_callback_getSensor+0x220>)
 800243a:	88da      	ldrh	r2, [r3, #6]
 800243c:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <pl_callback_getSensor+0x224>)
 800243e:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8002440:	2200      	movs	r2, #0
 8002442:	2102      	movs	r1, #2
 8002444:	4856      	ldr	r0, [pc, #344]	; (80025a0 <pl_callback_getSensor+0x218>)
 8002446:	f005 f869 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800244a:	2200      	movs	r2, #0
 800244c:	2110      	movs	r1, #16
 800244e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002452:	f005 f863 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245c:	4851      	ldr	r0, [pc, #324]	; (80025a4 <pl_callback_getSensor+0x21c>)
 800245e:	f005 f85d 	bl	800751c <HAL_GPIO_WritePin>
		j=0;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8002466:	e002      	b.n	800246e <pl_callback_getSensor+0xe6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002474:	ddf8      	ble.n	8002468 <pl_callback_getSensor+0xe0>
		break;
 8002476:	e06c      	b.n	8002552 <pl_callback_getSensor+0x1ca>
	case 3:
		g_sensor_on[3] = g_ADCBuffer[4];
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <pl_callback_getSensor+0x220>)
 800247a:	891a      	ldrh	r2, [r3, #8]
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <pl_callback_getSensor+0x224>)
 800247e:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <pl_callback_getSensor+0x220>)
 8002482:	895a      	ldrh	r2, [r3, #10]
 8002484:	4b49      	ldr	r3, [pc, #292]	; (80025ac <pl_callback_getSensor+0x224>)
 8002486:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8002488:	2200      	movs	r2, #0
 800248a:	2102      	movs	r1, #2
 800248c:	4844      	ldr	r0, [pc, #272]	; (80025a0 <pl_callback_getSensor+0x218>)
 800248e:	f005 f845 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8002492:	2200      	movs	r2, #0
 8002494:	2110      	movs	r1, #16
 8002496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249a:	f005 f83f 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a4:	483f      	ldr	r0, [pc, #252]	; (80025a4 <pl_callback_getSensor+0x21c>)
 80024a6:	f005 f839 	bl	800751c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 80024ae:	e002      	b.n	80024b6 <pl_callback_getSensor+0x12e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3301      	adds	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b32      	cmp	r3, #50	; 0x32
 80024ba:	ddf9      	ble.n	80024b0 <pl_callback_getSensor+0x128>
		V_battAD = g_ADCBuffer[0];
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <pl_callback_getSensor+0x220>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024cc:	ee17 0a90 	vmov	r0, s15
 80024d0:	f7fe f862 	bl	8000598 <__aeabi_f2d>
 80024d4:	a32a      	add	r3, pc, #168	; (adr r3, 8002580 <pl_callback_getSensor+0x1f8>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f8b5 	bl	8000648 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	a328      	add	r3, pc, #160	; (adr r3, 8002588 <pl_callback_getSensor+0x200>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f9d6 	bl	800089c <__aeabi_ddiv>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	a325      	add	r3, pc, #148	; (adr r3, 8002590 <pl_callback_getSensor+0x208>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f8a3 	bl	8000648 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <pl_callback_getSensor+0x228>)
 8002510:	f7fe f9c4 	bl	800089c <__aeabi_ddiv>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb6c 	bl	8000bf8 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <pl_callback_getSensor+0x22c>)
 8002524:	6013      	str	r3, [r2, #0]
		break;
 8002526:	e014      	b.n	8002552 <pl_callback_getSensor+0x1ca>
	case 4:
		g_sensor_off[0] = g_ADCBuffer[1];
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <pl_callback_getSensor+0x220>)
 800252a:	885a      	ldrh	r2, [r3, #2]
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <pl_callback_getSensor+0x230>)
 800252e:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <pl_callback_getSensor+0x220>)
 8002532:	889a      	ldrh	r2, [r3, #4]
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <pl_callback_getSensor+0x230>)
 8002536:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <pl_callback_getSensor+0x220>)
 800253a:	88da      	ldrh	r2, [r3, #6]
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <pl_callback_getSensor+0x230>)
 800253e:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <pl_callback_getSensor+0x220>)
 8002542:	891a      	ldrh	r2, [r3, #8]
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <pl_callback_getSensor+0x230>)
 8002546:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <pl_callback_getSensor+0x220>)
 800254a:	895a      	ldrh	r2, [r3, #10]
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <pl_callback_getSensor+0x230>)
 800254e:	811a      	strh	r2, [r3, #8]

		break;
 8002550:	bf00      	nop
	}


	AD_step++;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <pl_callback_getSensor+0x214>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <pl_callback_getSensor+0x214>)
 800255c:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <pl_callback_getSensor+0x214>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d005      	beq.n	8002572 <pl_callback_getSensor+0x1ea>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8002566:	2206      	movs	r2, #6
 8002568:	490f      	ldr	r1, [pc, #60]	; (80025a8 <pl_callback_getSensor+0x220>)
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <pl_callback_getSensor+0x210>)
 800256c:	f002 fc74 	bl	8004e58 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8002570:	e002      	b.n	8002578 <pl_callback_getSensor+0x1f0>
		AD_step = 0;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <pl_callback_getSensor+0x214>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	66666666 	.word	0x66666666
 8002584:	400a6666 	.word	0x400a6666
 8002588:	00000000 	.word	0x00000000
 800258c:	40affe00 	.word	0x40affe00
 8002590:	00000000 	.word	0x00000000
 8002594:	4062c000 	.word	0x4062c000
 8002598:	200004d4 	.word	0x200004d4
 800259c:	200004a8 	.word	0x200004a8
 80025a0:	48000400 	.word	0x48000400
 80025a4:	48000800 	.word	0x48000800
 80025a8:	2000049c 	.word	0x2000049c
 80025ac:	200004ac 	.word	0x200004ac
 80025b0:	40490000 	.word	0x40490000
 80025b4:	200004c4 	.word	0x200004c4
 80025b8:	200004b8 	.word	0x200004b8

080025bc <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80025c0:	2206      	movs	r2, #6
 80025c2:	4903      	ldr	r1, [pc, #12]	; (80025d0 <pl_interupt_getSensor+0x14>)
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <pl_interupt_getSensor+0x18>)
 80025c6:	f002 fc47 	bl	8004e58 <HAL_ADC_Start_DMA>

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000049c 	.word	0x2000049c
 80025d4:	200004d4 	.word	0x200004d4

080025d8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	count_mode=0;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <pl_timer_init+0x1c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <pl_timer_init+0x20>)
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 80025ea:	4804      	ldr	r0, [pc, #16]	; (80025fc <pl_timer_init+0x24>)
 80025ec:	f006 ff3e 	bl	800946c <HAL_TIM_Base_Start_IT>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200004d0 	.word	0x200004d0
 80025f8:	200004cc 	.word	0x200004cc
 80025fc:	2000c1fc 	.word	0x2000c1fc

08002600 <interrupt_timer>:

void interrupt_timer(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	g_timCount++;
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <interrupt_timer+0x48>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <interrupt_timer+0x48>)
 800260c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <interrupt_timer+0x4c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d112      	bne.n	800263c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <interrupt_timer+0x50>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ffbc 	bl	8000598 <__aeabi_f2d>
 8002620:	a307      	add	r3, pc, #28	; (adr r3, 8002640 <interrupt_timer+0x40>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd fe59 	bl	80002dc <__adddf3>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fae1 	bl	8000bf8 <__aeabi_d2f>
 8002636:	4603      	mov	r3, r0
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <interrupt_timer+0x50>)
 800263a:	6013      	str	r3, [r2, #0]
	}

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	d2f1a9fc 	.word	0xd2f1a9fc
 8002644:	3f50624d 	.word	0x3f50624d
 8002648:	200004c8 	.word	0x200004c8
 800264c:	200004d0 	.word	0x200004d0
 8002650:	200004cc 	.word	0x200004cc
 8002654:	00000000 	.word	0x00000000

08002658 <wait_ms>:
	count_mode=0;
	g_timCount_sec=0;
	return timer;
}

void wait_ms(uint32_t waitTime) {
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <wait_ms+0x80>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <wait_ms+0x84>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 800266e:	bf00      	nop
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <wait_ms+0x80>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267c:	ee17 0a90 	vmov	r0, s15
 8002680:	f7fd ff8a 	bl	8000598 <__aeabi_f2d>
 8002684:	a312      	add	r3, pc, #72	; (adr r3, 80026d0 <wait_ms+0x78>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd ffdd 	bl	8000648 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	a30e      	add	r3, pc, #56	; (adr r3, 80026d0 <wait_ms+0x78>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe f8fe 	bl	800089c <__aeabi_ddiv>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7fd ff53 	bl	8000554 <__aeabi_ui2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4620      	mov	r0, r4
 80026b4:	4629      	mov	r1, r5
 80026b6:	f7fe fa39 	bl	8000b2c <__aeabi_dcmplt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1d7      	bne.n	8002670 <wait_ms+0x18>
        }

}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	f3af 8000 	nop.w
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004c8 	.word	0x200004c8
 80026dc:	2000c1fc 	.word	0x2000c1fc

080026e0 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <wait_ms_NoReset+0x78>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80026ee:	bf00      	nop
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <wait_ms_NoReset+0x78>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fc:	ee17 0a90 	vmov	r0, s15
 8002700:	f7fd ff4a 	bl	8000598 <__aeabi_f2d>
 8002704:	a312      	add	r3, pc, #72	; (adr r3, 8002750 <wait_ms_NoReset+0x70>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fd ff9d 	bl	8000648 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	a30e      	add	r3, pc, #56	; (adr r3, 8002750 <wait_ms_NoReset+0x70>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f8be 	bl	800089c <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fd ff13 	bl	8000554 <__aeabi_ui2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4620      	mov	r0, r4
 8002734:	4629      	mov	r1, r5
 8002736:	f7fe f9f9 	bl	8000b2c <__aeabi_dcmplt>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1d7      	bne.n	80026f0 <wait_ms_NoReset+0x10>
        }

}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bdb0      	pop	{r4, r5, r7, pc}
 800274a:	bf00      	nop
 800274c:	f3af 8000 	nop.w
 8002750:	d2f1a9fc 	.word	0xd2f1a9fc
 8002754:	3f50624d 	.word	0x3f50624d
 8002758:	200004c8 	.word	0x200004c8

0800275c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2220      	movs	r2, #32
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f008 fff5 	bl	800b764 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <MX_ADC1_Init+0x178>)
 800277c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002782:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <MX_ADC1_Init+0x178>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <MX_ADC1_Init+0x178>)
 800279e:	2201      	movs	r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027a4:	2208      	movs	r2, #8
 80027a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027a8:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027b6:	2206      	movs	r2, #6
 80027b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ba:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c2:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027d8:	2200      	movs	r2, #0
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80027dc:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e4:	483b      	ldr	r0, [pc, #236]	; (80028d4 <MX_ADC1_Init+0x178>)
 80027e6:	f001 ff91 	bl	800470c <HAL_ADC_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80027f0:	f000 fbf1 	bl	8002fd6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	4835      	ldr	r0, [pc, #212]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002800:	f003 fdde 	bl	80063c0 <HAL_ADCEx_MultiModeConfigChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800280a:	f000 fbe4 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <MX_ADC1_Init+0x17c>)
 8002810:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002812:	2306      	movs	r3, #6
 8002814:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002816:	2301      	movs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800281a:	237f      	movs	r3, #127	; 0x7f
 800281c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800281e:	2304      	movs	r3, #4
 8002820:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	4619      	mov	r1, r3
 800282a:	482a      	ldr	r0, [pc, #168]	; (80028d4 <MX_ADC1_Init+0x178>)
 800282c:	f002 fea4 	bl	8005578 <HAL_ADC_ConfigChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002836:	f000 fbce 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <MX_ADC1_Init+0x180>)
 800283c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800283e:	230c      	movs	r3, #12
 8002840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4823      	ldr	r0, [pc, #140]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002848:	f002 fe96 	bl	8005578 <HAL_ADC_ConfigChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002852:	f000 fbc0 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <MX_ADC1_Init+0x184>)
 8002858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800285a:	2312      	movs	r3, #18
 800285c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4619      	mov	r1, r3
 8002862:	481c      	ldr	r0, [pc, #112]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002864:	f002 fe88 	bl	8005578 <HAL_ADC_ConfigChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800286e:	f000 fbb2 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_ADC1_Init+0x188>)
 8002874:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002876:	2318      	movs	r3, #24
 8002878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4815      	ldr	r0, [pc, #84]	; (80028d4 <MX_ADC1_Init+0x178>)
 8002880:	f002 fe7a 	bl	8005578 <HAL_ADC_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800288a:	f000 fba4 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <MX_ADC1_Init+0x18c>)
 8002890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	4619      	mov	r1, r3
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <MX_ADC1_Init+0x178>)
 800289e:	f002 fe6b 	bl	8005578 <HAL_ADC_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80028a8:	f000 fb95 	bl	8002fd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <MX_ADC1_Init+0x190>)
 80028ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80028b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4806      	ldr	r0, [pc, #24]	; (80028d4 <MX_ADC1_Init+0x178>)
 80028bc:	f002 fe5c 	bl	8005578 <HAL_ADC_ConfigChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80028c6:	f000 fb86 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ca:	bf00      	nop
 80028cc:	3730      	adds	r7, #48	; 0x30
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004d4 	.word	0x200004d4
 80028d8:	2e300800 	.word	0x2e300800
 80028dc:	3ef08000 	.word	0x3ef08000
 80028e0:	10c00010 	.word	0x10c00010
 80028e4:	0c900008 	.word	0x0c900008
 80028e8:	08600004 	.word	0x08600004
 80028ec:	04300002 	.word	0x04300002

080028f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09e      	sub	sp, #120	; 0x78
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2250      	movs	r2, #80	; 0x50
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f008 ff27 	bl	800b764 <memset>
  if(adcHandle->Instance==ADC1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291e:	f040 8082 	bne.w	8002a26 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002928:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fbee 	bl	8008114 <HAL_RCCEx_PeriphCLKConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800293e:	f000 fb4a 	bl	8002fd6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800294c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_ADC_MspInit+0x140>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800298a:	230f      	movs	r3, #15
 800298c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298e:	2303      	movs	r3, #3
 8002990:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f004 fc3a 	bl	8007218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80029a4:	f241 0301 	movw	r3, #4097	; 0x1001
 80029a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029aa:	2303      	movs	r3, #3
 80029ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029b6:	4619      	mov	r1, r3
 80029b8:	481e      	ldr	r0, [pc, #120]	; (8002a34 <HAL_ADC_MspInit+0x144>)
 80029ba:	f004 fc2d 	bl	8007218 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_ADC_MspInit+0x14c>)
 80029c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029c6:	2205      	movs	r2, #5
 80029c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029ee:	2220      	movs	r2, #32
 80029f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029fa:	480f      	ldr	r0, [pc, #60]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 80029fc:	f003 fed8 	bl	80067b0 <HAL_DMA_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8002a06:	f000 fae6 	bl	8002fd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a10:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_ADC_MspInit+0x148>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2012      	movs	r0, #18
 8002a1c:	f003 fe93 	bl	8006746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a20:	2012      	movs	r0, #18
 8002a22:	f003 feaa 	bl	800677a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a26:	bf00      	nop
 8002a28:	3778      	adds	r7, #120	; 0x78
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000400 	.word	0x48000400
 8002a38:	20000540 	.word	0x20000540
 8002a3c:	40020008 	.word	0x40020008

08002a40 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8002a48:	f7ff fc9e 	bl	8002388 <pl_callback_getSensor>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6493      	str	r3, [r2, #72]	; 0x48
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6493      	str	r3, [r2, #72]	; 0x48
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <MX_DMA_Init+0x60>)
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	200b      	movs	r0, #11
 8002a90:	f003 fe59 	bl	8006746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a94:	200b      	movs	r0, #11
 8002a96:	f003 fe70 	bl	800677a <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	205e      	movs	r0, #94	; 0x5e
 8002aa0:	f003 fe51 	bl	8006746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8002aa4:	205e      	movs	r0, #94	; 0x5e
 8002aa6:	f003 fe68 	bl	800677a <HAL_NVIC_EnableIRQ>

}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a39      	ldr	r2, [pc, #228]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	4a33      	ldr	r2, [pc, #204]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <MX_GPIO_Init+0x100>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f24e 0150 	movw	r1, #57424	; 0xe050
 8002b34:	4821      	ldr	r0, [pc, #132]	; (8002bbc <MX_GPIO_Init+0x104>)
 8002b36:	f004 fcf1 	bl	800751c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f648 1110 	movw	r1, #35088	; 0x8910
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b44:	f004 fcea 	bl	800751c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f64e 4196 	movw	r1, #60566	; 0xec96
 8002b4e:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <MX_GPIO_Init+0x108>)
 8002b50:	f004 fce4 	bl	800751c <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8002b54:	f24e 0350 	movw	r3, #57424	; 0xe050
 8002b58:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4813      	ldr	r0, [pc, #76]	; (8002bbc <MX_GPIO_Init+0x104>)
 8002b6e:	f004 fb53 	bl	8007218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8002b72:	f648 1310 	movw	r3, #35088	; 0x8910
 8002b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f004 fb43 	bl	8007218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8002b92:	f64e 4396 	movw	r3, #60566	; 0xec96
 8002b96:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <MX_GPIO_Init+0x108>)
 8002bac:	f004 fb34 	bl	8007218 <HAL_GPIO_Init>

}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b08f      	sub	sp, #60	; 0x3c
 8002bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bce:	f001 fa78 	bl	80040c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd2:	f000 f9b5 	bl	8002f40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8002bd6:	f7ff ff3d 	bl	8002a54 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bda:	f7ff ff6d 	bl	8002ab8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002bde:	f7ff fdbd 	bl	800275c <MX_ADC1_Init>
  MX_SPI1_Init();
 8002be2:	f000 fd1f 	bl	8003624 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002be6:	f000 ff89 	bl	8003afc <MX_TIM6_Init>
  MX_TIM8_Init();
 8002bea:	f000 ffbd 	bl	8003b68 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002bee:	f001 f99b 	bl	8003f28 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8002bf2:	f7ff ff2f 	bl	8002a54 <MX_DMA_Init>
  MX_SPI3_Init();
 8002bf6:	f000 fd53 	bl	80036a0 <MX_SPI3_Init>
  MX_TIM16_Init();
 8002bfa:	f001 f855 	bl	8003ca8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8002bfe:	f7ff fceb 	bl	80025d8 <pl_timer_init>
  pl_gyro_init();
 8002c02:	f7ff fa2d 	bl	8002060 <pl_gyro_init>
  pl_sensor_init();
 8002c06:	f7ff fbaf 	bl	8002368 <pl_sensor_init>
  reset_distance();
 8002c0a:	f7fe f9c7 	bl	8000f9c <reset_distance>
  reset_gyro();
 8002c0e:	f7fe fc31 	bl	8001474 <reset_gyro>
  reset_speed();
 8002c12:	f7fe fa01 	bl	8001018 <reset_speed>
  record_reset();
 8002c16:	f000 fbe1 	bl	80033dc <record_reset>
  pl_motor_init();
 8002c1a:	f7ff faff 	bl	800221c <pl_motor_init>

	uint8_t hello[] = "Hello World\n\r";
 8002c1e:	4bb8      	ldr	r3, [pc, #736]	; (8002f00 <main+0x338>)
 8002c20:	1d3c      	adds	r4, r7, #4
 8002c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c24:	c407      	stmia	r4!, {r0, r1, r2}
 8002c26:	8023      	strh	r3, [r4, #0]
	float PI=3.14;
 8002c28:	4bb6      	ldr	r3, [pc, #728]	; (8002f04 <main+0x33c>)
 8002c2a:	61fb      	str	r3, [r7, #28]
	uint8_t hoge = 3;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	76fb      	strb	r3, [r7, #27]
	float batf;
	uint16_t bat;
	HAL_ADC_Start(&hadc1);
 8002c30:	48b5      	ldr	r0, [pc, #724]	; (8002f08 <main+0x340>)
 8002c32:	f001 ff1f 	bl	8004a74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002c36:	2164      	movs	r1, #100	; 0x64
 8002c38:	48b3      	ldr	r0, [pc, #716]	; (8002f08 <main+0x340>)
 8002c3a:	f002 f819 	bl	8004c70 <HAL_ADC_PollForConversion>
	bat = HAL_ADC_GetValue(&hadc1);
 8002c3e:	48b2      	ldr	r0, [pc, #712]	; (8002f08 <main+0x340>)
 8002c40:	f002 fa35 	bl	80050ae <HAL_ADC_GetValue>
 8002c44:	4603      	mov	r3, r0
 8002c46:	833b      	strh	r3, [r7, #24]
	HAL_ADC_Stop(&hadc1);
 8002c48:	48af      	ldr	r0, [pc, #700]	; (8002f08 <main+0x340>)
 8002c4a:	f001 ffdd 	bl	8004c08 <HAL_ADC_Stop>
	batf = 3.3 * (float) bat / 4096 * (10.0 + 10.0) / 10.0*1.15;//* 1.2975
 8002c4e:	8b3b      	ldrh	r3, [r7, #24]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c58:	ee17 0a90 	vmov	r0, s15
 8002c5c:	f7fd fc9c 	bl	8000598 <__aeabi_f2d>
 8002c60:	a3a3      	add	r3, pc, #652	; (adr r3, 8002ef0 <main+0x328>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fcef 	bl	8000648 <__aeabi_dmul>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4ba5      	ldr	r3, [pc, #660]	; (8002f0c <main+0x344>)
 8002c78:	f7fd fe10 	bl	800089c <__aeabi_ddiv>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	4ba1      	ldr	r3, [pc, #644]	; (8002f10 <main+0x348>)
 8002c8a:	f7fd fcdd 	bl	8000648 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4b9e      	ldr	r3, [pc, #632]	; (8002f14 <main+0x34c>)
 8002c9c:	f7fd fdfe 	bl	800089c <__aeabi_ddiv>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	a393      	add	r3, pc, #588	; (adr r3, 8002ef8 <main+0x330>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd fccb 	bl	8000648 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd ff9d 	bl	8000bf8 <__aeabi_d2f>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	617b      	str	r3, [r7, #20]
	printf("BATT=%f\n",batf);
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7fd fc68 	bl	8000598 <__aeabi_f2d>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4892      	ldr	r0, [pc, #584]	; (8002f18 <main+0x350>)
 8002cce:	f009 f9bb 	bl	800c048 <iprintf>

	int mode=0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	//起動�?�確�?
	int yellow_count=1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=0;i<8;i++){
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e00b      	b.n	8002cf8 <main+0x130>
		pl_yellow_LED_count(yellow_count);
 8002ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce2:	f7fe ff0d 	bl	8001b00 <pl_yellow_LED_count>
		HAL_Delay(50);
 8002ce6:	2032      	movs	r0, #50	; 0x32
 8002ce8:	f001 fa5c 	bl	80041a4 <HAL_Delay>
		yellow_count=yellow_count*2;
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=0;i<8;i++){
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	2b07      	cmp	r3, #7
 8002cfc:	ddf0      	ble.n	8002ce0 <main+0x118>
	}
	for(int i=0;i<9;i++){
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	e00d      	b.n	8002d20 <main+0x158>
			pl_yellow_LED_count(yellow_count);
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f7fe fefb 	bl	8001b00 <pl_yellow_LED_count>
			HAL_Delay(50);
 8002d0a:	2032      	movs	r0, #50	; 0x32
 8002d0c:	f001 fa4a 	bl	80041a4 <HAL_Delay>
			yellow_count=yellow_count/2;
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	0fda      	lsrs	r2, r3, #31
 8002d14:	4413      	add	r3, r2
 8002d16:	105b      	asrs	r3, r3, #1
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=0;i<9;i++){
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	ddee      	ble.n	8002d04 <main+0x13c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loadFlash(start_address, (uint64_t*) mode, sizeof((uint64_t)mode));
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <main+0x354>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f928 	bl	8001f84 <loadFlash>
	  	  printf("mode=%d\n\r", mode);
 8002d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d36:	487a      	ldr	r0, [pc, #488]	; (8002f20 <main+0x358>)
 8002d38:	f009 f986 	bl	800c048 <iprintf>
	  		mode=mode_decision(mode);
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f94d 	bl	8002fe0 <mode_decision>
 8002d46:	4603      	mov	r3, r0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
//	  		clear_Ierror();
	  		reset_distance();
 8002d4a:	f7fe f927 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8002d4e:	f7fe fb91 	bl	8001474 <reset_gyro>
	  		reset_speed();
 8002d52:	f7fe f961 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fa3a 	bl	80031d4 <mode_execution>
	  		writeFlash(start_address, (uint64_t*) mode, sizeof((uint64_t)mode), 1);
 8002d60:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <main+0x354>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d66:	2301      	movs	r3, #1
 8002d68:	2208      	movs	r2, #8
 8002d6a:	f7ff f8e1 	bl	8001f30 <writeFlash>

//	  		error_mode = 0;
	  // test LED
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d78:	f004 fbd0 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d86:	f004 fbc9 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4865      	ldr	r0, [pc, #404]	; (8002f24 <main+0x35c>)
 8002d90:	f004 fbc4 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9a:	4863      	ldr	r0, [pc, #396]	; (8002f28 <main+0x360>)
 8002d9c:	f004 fbbe 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8002da0:	2200      	movs	r2, #0
 8002da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002da6:	4860      	ldr	r0, [pc, #384]	; (8002f28 <main+0x360>)
 8002da8:	f004 fbb8 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db2:	485d      	ldr	r0, [pc, #372]	; (8002f28 <main+0x360>)
 8002db4:	f004 fbb2 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dbe:	485a      	ldr	r0, [pc, #360]	; (8002f28 <main+0x360>)
 8002dc0:	f004 fbac 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dca:	4857      	ldr	r0, [pc, #348]	; (8002f28 <main+0x360>)
 8002dcc:	f004 fba6 	bl	800751c <HAL_GPIO_WritePin>
//	  	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,GPIO_PIN_RESET);
//	  	HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port,SENSOR_LED1_Pin,GPIO_PIN_RESET);
//	  	HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port,SENSOR_LED2_Pin,GPIO_PIN_RESET);
//	  	HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port,SENSOR_LED3_Pin,GPIO_PIN_RESET);
	  	//HAL_Delay(500);
	  	wait_ms(500);
 8002dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dd4:	f7ff fc40 	bl	8002658 <wait_ms>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f004 fb9b 	bl	800751c <HAL_GPIO_WritePin>
	  	//HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
	  	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	484e      	ldr	r0, [pc, #312]	; (8002f24 <main+0x35c>)
 8002dec:	f004 fb96 	bl	800751c <HAL_GPIO_WritePin>
	  	//HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
	  	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df6:	484c      	ldr	r0, [pc, #304]	; (8002f28 <main+0x360>)
 8002df8:	f004 fb90 	bl	800751c <HAL_GPIO_WritePin>
	  	//HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
	  	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e02:	4849      	ldr	r0, [pc, #292]	; (8002f28 <main+0x360>)
 8002e04:	f004 fb8a 	bl	800751c <HAL_GPIO_WritePin>

	  	//HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
//	  	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,GPIO_PIN_SET);
//	  	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,GPIO_PIN_SET);
	  	HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port,SENSOR_LED1_Pin,GPIO_PIN_SET);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4846      	ldr	r0, [pc, #280]	; (8002f28 <main+0x360>)
 8002e0e:	f004 fb85 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port,SENSOR_LED2_Pin,GPIO_PIN_SET);
 8002e12:	2201      	movs	r2, #1
 8002e14:	2110      	movs	r1, #16
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1a:	f004 fb7f 	bl	800751c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port,SENSOR_LED3_Pin,GPIO_PIN_SET);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e24:	483f      	ldr	r0, [pc, #252]	; (8002f24 <main+0x35c>)
 8002e26:	f004 fb79 	bl	800751c <HAL_GPIO_WritePin>
	  	//HAL_Delay(500);
	  	wait_ms(500);
 8002e2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2e:	f7ff fc13 	bl	8002658 <wait_ms>
//		  }

//		printf("BATT=%d,SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_ADCBuffer[0],
//				g_ADCBuffer[1], g_ADCBuffer[2], g_ADCBuffer[3], g_ADCBuffer[4], g_ADCBuffer[5]);

		printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <main+0x364>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
								g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <main+0x364>)
 8002e3a:	885b      	ldrh	r3, [r3, #2]
		printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8002e3c:	4618      	mov	r0, r3
								g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <main+0x364>)
 8002e40:	889b      	ldrh	r3, [r3, #4]
		printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8002e42:	461c      	mov	r4, r3
								g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8002e44:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <main+0x364>)
 8002e46:	88db      	ldrh	r3, [r3, #6]
		printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8002e48:	461a      	mov	r2, r3
								g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8002e4a:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <main+0x364>)
 8002e4c:	891b      	ldrh	r3, [r3, #8]
		printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	4623      	mov	r3, r4
 8002e54:	4602      	mov	r2, r0
 8002e56:	4836      	ldr	r0, [pc, #216]	; (8002f30 <main+0x368>)
 8002e58:	f009 f8f6 	bl	800c048 <iprintf>
		printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <main+0x36c>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
								g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8002e62:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <main+0x36c>)
 8002e64:	885b      	ldrh	r3, [r3, #2]
		printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8002e66:	4618      	mov	r0, r3
								g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <main+0x36c>)
 8002e6a:	889b      	ldrh	r3, [r3, #4]
		printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8002e6c:	461c      	mov	r4, r3
								g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <main+0x36c>)
 8002e70:	88db      	ldrh	r3, [r3, #6]
		printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8002e72:	461a      	mov	r2, r3
								g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8002e74:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <main+0x36c>)
 8002e76:	891b      	ldrh	r3, [r3, #8]
		printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	4602      	mov	r2, r0
 8002e80:	482d      	ldr	r0, [pc, #180]	; (8002f38 <main+0x370>)
 8002e82:	f009 f8e1 	bl	800c048 <iprintf>
		if(g_sensor_on[0]>800 && g_sensor_on[2]>800 && g_sensor_on[4]>800){
 8002e86:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <main+0x364>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002e8e:	f67f af4a 	bls.w	8002d26 <main+0x15e>
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <main+0x364>)
 8002e94:	889b      	ldrh	r3, [r3, #4]
 8002e96:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002e9a:	f67f af44 	bls.w	8002d26 <main+0x15e>
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <main+0x364>)
 8002ea0:	891b      	ldrh	r3, [r3, #8]
 8002ea2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002ea6:	f67f af3e 	bls.w	8002d26 <main+0x15e>
					HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb0:	481c      	ldr	r0, [pc, #112]	; (8002f24 <main+0x35c>)
 8002eb2:	f004 fb33 	bl	800751c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	481b      	ldr	r0, [pc, #108]	; (8002f28 <main+0x360>)
 8002ebc:	f004 fb2e 	bl	800751c <HAL_GPIO_WritePin>
					HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	481e      	ldr	r0, [pc, #120]	; (8002f3c <main+0x374>)
 8002ec4:	f006 fb9a 	bl	80095fc <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002ec8:	2108      	movs	r1, #8
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <main+0x374>)
 8002ecc:	f006 fb96 	bl	80095fc <HAL_TIM_PWM_Start>
					wait_ms(2000);
 8002ed0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ed4:	f7ff fbc0 	bl	8002658 <wait_ms>
					HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4818      	ldr	r0, [pc, #96]	; (8002f3c <main+0x374>)
 8002edc:	f006 fc9a 	bl	8009814 <HAL_TIM_PWM_Stop>
					HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002ee0:	2108      	movs	r1, #8
 8002ee2:	4816      	ldr	r0, [pc, #88]	; (8002f3c <main+0x374>)
 8002ee4:	f006 fc96 	bl	8009814 <HAL_TIM_PWM_Stop>
	  loadFlash(start_address, (uint64_t*) mode, sizeof((uint64_t)mode));
 8002ee8:	e71d      	b.n	8002d26 <main+0x15e>
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w
 8002ef0:	66666666 	.word	0x66666666
 8002ef4:	400a6666 	.word	0x400a6666
 8002ef8:	66666666 	.word	0x66666666
 8002efc:	3ff26666 	.word	0x3ff26666
 8002f00:	0800e31c 	.word	0x0800e31c
 8002f04:	4048f5c3 	.word	0x4048f5c3
 8002f08:	200004d4 	.word	0x200004d4
 8002f0c:	40b00000 	.word	0x40b00000
 8002f10:	40340000 	.word	0x40340000
 8002f14:	40240000 	.word	0x40240000
 8002f18:	0800e2a8 	.word	0x0800e2a8
 8002f1c:	0800e360 	.word	0x0800e360
 8002f20:	0800e2b4 	.word	0x0800e2b4
 8002f24:	48000800 	.word	0x48000800
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	200004ac 	.word	0x200004ac
 8002f30:	0800e2c0 	.word	0x0800e2c0
 8002f34:	200004b8 	.word	0x200004b8
 8002f38:	0800e2ec 	.word	0x0800e2ec
 8002f3c:	2000c248 	.word	0x2000c248

08002f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b094      	sub	sp, #80	; 0x50
 8002f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f46:	f107 0318 	add.w	r3, r7, #24
 8002f4a:	2238      	movs	r2, #56	; 0x38
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f008 fc08 	bl	800b764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f004 faf2 	bl	800754c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f72:	2302      	movs	r3, #2
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f76:	2303      	movs	r3, #3
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f7e:	2355      	movs	r3, #85	; 0x55
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f82:	2302      	movs	r3, #2
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f86:	2302      	movs	r3, #2
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f8e:	f107 0318 	add.w	r3, r7, #24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fb8e 	bl	80076b4 <HAL_RCC_OscConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002f9e:	f000 f81a 	bl	8002fd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002fb4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002fb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fe90 	bl	8007ce4 <HAL_RCC_ClockConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002fca:	f000 f804 	bl	8002fd6 <Error_Handler>
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3750      	adds	r7, #80	; 0x50
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fda:	b672      	cpsid	i
}
 8002fdc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fde:	e7fe      	b.n	8002fde <Error_Handler+0x8>

08002fe0 <mode_decision>:
//#include "fail_safe.h"




unsigned char mode_decision(unsigned char now_mode){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8002ff6:	4b71      	ldr	r3, [pc, #452]	; (80031bc <mode_decision+0x1dc>)
 8002ff8:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	b2da      	uxtb	r2, r3
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	4413      	add	r3, r2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fd73 	bl	8001b00 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 200) {
 800301a:	e07f      	b.n	800311c <mode_decision+0x13c>
				HAL_Delay(1);
 800301c:	2001      	movs	r0, #1
 800301e:	f001 f8c1 	bl	80041a4 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <mode_decision+0x1e0>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ed97 7a02 	vldr	s14, [r7, #8]
 800302c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003034:	d813      	bhi.n	800305e <mode_decision+0x7e>
					if (main_modeR == 15) {
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d102      	bne.n	8003042 <mode_decision+0x62>
						main_modeR = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e002      	b.n	8003048 <mode_decision+0x68>
					} else {
						main_modeR++;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3301      	adds	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8003048:	f7fd ffa8 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	b2da      	uxtb	r2, r3
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4413      	add	r3, r2
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fd51 	bl	8001b00 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 800305e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003062:	eeb1 7a67 	vneg.f32	s14, s15
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <mode_decision+0x1e0>)
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003074:	db13      	blt.n	800309e <mode_decision+0xbe>
					if (main_modeR == 0) {
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <mode_decision+0xa2>
						main_modeR = 15;
 800307c:	230f      	movs	r3, #15
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	e002      	b.n	8003088 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3b01      	subs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8003088:	f7fd ff88 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	b2da      	uxtb	r2, r3
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	4413      	add	r3, r2
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fd31 	bl	8001b00 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <mode_decision+0x1e4>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80030a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d813      	bhi.n	80030da <mode_decision+0xfa>
					if (main_modeL == 15) {
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d102      	bne.n	80030be <mode_decision+0xde>
						main_modeL = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73bb      	strb	r3, [r7, #14]
 80030bc:	e002      	b.n	80030c4 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 80030be:	7bbb      	ldrb	r3, [r7, #14]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 80030c4:	f7fd ff6a 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	4413      	add	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fd13 	bl	8001b00 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 80030da:	edd7 7a02 	vldr	s15, [r7, #8]
 80030de:	eeb1 7a67 	vneg.f32	s14, s15
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <mode_decision+0x1e4>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	da00      	bge.n	80030f4 <mode_decision+0x114>
 80030f2:	e013      	b.n	800311c <mode_decision+0x13c>
					if (main_modeL == 0) {
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <mode_decision+0x120>
						main_modeL = 15;
 80030fa:	230f      	movs	r3, #15
 80030fc:	73bb      	strb	r3, [r7, #14]
 80030fe:	e002      	b.n	8003106 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	3b01      	subs	r3, #1
 8003104:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8003106:	f7fd ff49 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800310a:	7bbb      	ldrb	r3, [r7, #14]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	b2da      	uxtb	r2, r3
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	4413      	add	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fcf2 	bl	8001b00 <pl_yellow_LED_count>
			while (angle_speedx <= 200) {
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <mode_decision+0x1e8>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80031cc <mode_decision+0x1ec>
 8003126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	f67f af75 	bls.w	800301c <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_on();
 8003132:	f7fe fcab 	bl	8001a8c <pl_yellow_LED_on>
			pl_r_blue_LED(ON);
 8003136:	2001      	movs	r0, #1
 8003138:	f7fe fd92 	bl	8001c60 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800313c:	2001      	movs	r0, #1
 800313e:	f7fe fda1 	bl	8001c84 <pl_l_blue_LED>
			HAL_Delay(1000);
 8003142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003146:	f001 f82d 	bl	80041a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800314a:	e011      	b.n	8003170 <mode_decision+0x190>

				if (angle_speedx >= 200) {
 800314c:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <mode_decision+0x1e8>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80031cc <mode_decision+0x1ec>
 8003156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	db04      	blt.n	800316a <mode_decision+0x18a>
					main_modeL = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
					break;
 8003168:	e013      	b.n	8003192 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 800316a:	2001      	movs	r0, #1
 800316c:	f001 f81a 	bl	80041a4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <mode_decision+0x1f0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003178:	dde8      	ble.n	800314c <mode_decision+0x16c>
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <mode_decision+0x1f0>)
 800317c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003180:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003184:	dde2      	ble.n	800314c <mode_decision+0x16c>
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <mode_decision+0x1f0>)
 8003188:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800318c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003190:	dddc      	ble.n	800314c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fe fd64 	bl	8001c60 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fe fd73 	bl	8001c84 <pl_l_blue_LED>
			pl_yellow_LED_off();
 800319e:	f7fe fc3b 	bl	8001a18 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	b25a      	sxtb	r2, r3
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	737b      	strb	r3, [r7, #13]

return main_mode;
 80031b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	41200000 	.word	0x41200000
 80031c0:	20000224 	.word	0x20000224
 80031c4:	20000220 	.word	0x20000220
 80031c8:	20000268 	.word	0x20000268
 80031cc:	43480000 	.word	0x43480000
 80031d0:	200002ac 	.word	0x200002ac

080031d4 <mode_execution>:


void mode_execution(unsigned char now_mode){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d828      	bhi.n	800324c <mode_execution+0x78>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <mode_execution+0x2c>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003241 	.word	0x08003241
 8003204:	0800324b 	.word	0x0800324b
 8003208:	0800324b 	.word	0x0800324b
 800320c:	0800324b 	.word	0x0800324b
 8003210:	0800324b 	.word	0x0800324b
 8003214:	0800324b 	.word	0x0800324b
 8003218:	0800324b 	.word	0x0800324b
 800321c:	0800324b 	.word	0x0800324b
 8003220:	0800324b 	.word	0x0800324b
 8003224:	0800324b 	.word	0x0800324b
 8003228:	0800324b 	.word	0x0800324b
 800322c:	0800324b 	.word	0x0800324b
 8003230:	0800324b 	.word	0x0800324b
 8003234:	0800324b 	.word	0x0800324b
 8003238:	0800324b 	.word	0x0800324b
 800323c:	0800324b 	.word	0x0800324b
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f806 	bl	8003254 <mode_PLtest>
	break;
 8003248:	e000      	b.n	800324c <mode_execution+0x78>
	case 0b0001://実行モード1

	break;
 800324a:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af02      	add	r7, sp, #8
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]

	switch (main_modeR) {
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	f200 80b0 	bhi.w	80033c6 <mode_PLtest+0x172>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <mode_PLtest+0x18>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080033c5 	.word	0x080033c5
 8003270:	080032ad 	.word	0x080032ad
 8003274:	080032df 	.word	0x080032df
 8003278:	0800335b 	.word	0x0800335b
 800327c:	080033c7 	.word	0x080033c7
 8003280:	080033c7 	.word	0x080033c7
 8003284:	080033c7 	.word	0x080033c7
 8003288:	080033c7 	.word	0x080033c7
 800328c:	080033c7 	.word	0x080033c7
 8003290:	080033c7 	.word	0x080033c7
 8003294:	080033c7 	.word	0x080033c7
 8003298:	080033c7 	.word	0x080033c7
 800329c:	080033c7 	.word	0x080033c7
 80032a0:	080033c7 	.word	0x080033c7
 80032a4:	080033c7 	.word	0x080033c7
 80032a8:	080033bf 	.word	0x080033bf
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <mode_PLtest+0x17c>)
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <mode_PLtest+0x17c>)
 80032b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <mode_PLtest+0x17c>)
 80032b6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <mode_PLtest+0x17c>)
 80032bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c0:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <mode_PLtest+0x17c>)
 80032c2:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 80032c6:	9201      	str	r2, [sp, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4623      	mov	r3, r4
 80032cc:	4602      	mov	r2, r0
 80032ce:	4841      	ldr	r0, [pc, #260]	; (80033d4 <mode_PLtest+0x180>)
 80032d0:	f008 feba 	bl	800c048 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80032d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032d8:	f7ff f9be 	bl	8002658 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80032dc:	e7e6      	b.n	80032ac <mode_PLtest+0x58>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80032de:	2001      	movs	r0, #1
 80032e0:	f7fe fcbe 	bl	8001c60 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fe fccd 	bl	8001c84 <pl_l_blue_LED>
		record_mode = 1;
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <mode_PLtest+0x184>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(500, 500);
 80032f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032f8:	f7ff f820 	bl	800233c <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f7fe ffdb 	bl	80022b8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8003302:	2001      	movs	r0, #1
 8003304:	f7fe ffb0 	bl	8002268 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8003308:	f7fe fffc 	bl	8002304 <pl_DriveMotor_start>
		wait_ms(2500);
 800330c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003310:	f7ff f9a2 	bl	8002658 <wait_ms>
		pl_DriveMotor_stop();
 8003314:	f7ff f804 	bl	8002320 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fe fca1 	bl	8001c60 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fe fcb0 	bl	8001c84 <pl_l_blue_LED>
		record_mode = 0;
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <mode_PLtest+0x184>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800332a:	e002      	b.n	8003332 <mode_PLtest+0xde>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 800332c:	2001      	movs	r0, #1
 800332e:	f7ff f993 	bl	8002658 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <mode_PLtest+0x17c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800333a:	ddf7      	ble.n	800332c <mode_PLtest+0xd8>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <mode_PLtest+0x17c>)
 800333e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003342:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003346:	ddf1      	ble.n	800332c <mode_PLtest+0xd8>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <mode_PLtest+0x17c>)
 800334a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800334e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003352:	ddeb      	ble.n	800332c <mode_PLtest+0xd8>
		}
		record_print();
 8003354:	f000 f89e 	bl	8003494 <record_print>
		break;
 8003358:	e035      	b.n	80033c6 <mode_PLtest+0x172>
	case 0b0011:	//gyro
		reset_gyro();
 800335a:	f7fe f88b 	bl	8001474 <reset_gyro>
		reset_speed();
 800335e:	f7fd fe5b 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8003362:	2001      	movs	r0, #1
 8003364:	f7fe fc7c 	bl	8001c60 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8003368:	2001      	movs	r0, #1
 800336a:	f7fe fc8b 	bl	8001c84 <pl_l_blue_LED>
		record_mode = 2;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <mode_PLtest+0x184>)
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8003374:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003378:	f7ff f96e 	bl	8002658 <wait_ms>
		pl_r_blue_LED(OFF);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe fc6f 	bl	8001c60 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fe fc7e 	bl	8001c84 <pl_l_blue_LED>
		record_mode = 0;
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <mode_PLtest+0x184>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800338e:	e002      	b.n	8003396 <mode_PLtest+0x142>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8003390:	2001      	movs	r0, #1
 8003392:	f7ff f961 	bl	8002658 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <mode_PLtest+0x17c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800339e:	ddf7      	ble.n	8003390 <mode_PLtest+0x13c>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <mode_PLtest+0x17c>)
 80033a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033aa:	ddf1      	ble.n	8003390 <mode_PLtest+0x13c>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <mode_PLtest+0x17c>)
 80033ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033b6:	ddeb      	ble.n	8003390 <mode_PLtest+0x13c>
		}
		record_print();
 80033b8:	f000 f86c 	bl	8003494 <record_print>
		break;
 80033bc:	e003      	b.n	80033c6 <mode_PLtest+0x172>
	case 0b1111:	//record_out
		record_print();
 80033be:	f000 f869 	bl	8003494 <record_print>
		break;
 80033c2:	e000      	b.n	80033c6 <mode_PLtest+0x172>
		break;
 80033c4:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200002ac 	.word	0x200002ac
 80033d4:	0800e32c 	.word	0x0800e32c
 80033d8:	2000c120 	.word	0x2000c120

080033dc <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
	record_mode = 0;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <record_reset+0x20>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <record_reset+0x24>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <record_reset+0x28>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	2000c120 	.word	0x2000c120
 8003400:	2000c124 	.word	0x2000c124
 8003404:	2000c12c 	.word	0x2000c12c

08003408 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8003408:	b490      	push	{r4, r7}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e013      	b.n	8003440 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <record_data+0x7c>)
 8003422:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8003424:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8003426:	4818      	ldr	r0, [pc, #96]	; (8003488 <record_data+0x80>)
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800342e:	fb04 f101 	mul.w	r1, r4, r1
 8003432:	440b      	add	r3, r1
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	dbe7      	blt.n	8003418 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <record_data+0x84>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d103      	bne.n	8003458 <record_data+0x50>
		record_end_point = record_time;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <record_data+0x7c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <record_data+0x88>)
 8003456:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <record_data+0x7c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <record_data+0x7c>)
 8003460:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <record_data+0x7c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800346a:	4293      	cmp	r3, r2
 800346c:	dd05      	ble.n	800347a <record_data+0x72>
		record_time = 0;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <record_data+0x7c>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <record_data+0x84>)
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
	}

}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bc90      	pop	{r4, r7}
 8003482:	4770      	bx	lr
 8003484:	2000c124 	.word	0x2000c124
 8003488:	200005a0 	.word	0x200005a0
 800348c:	2000c12c 	.word	0x2000c12c
 8003490:	2000c128 	.word	0x2000c128

08003494 <record_print>:

void record_print(void) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <record_print+0xf0>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d12e      	bne.n	8003500 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e025      	b.n	80034f4 <record_print+0x60>

			printf("%d", a);
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4837      	ldr	r0, [pc, #220]	; (8003588 <record_print+0xf4>)
 80034ac:	f008 fdcc 	bl	800c048 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80034b0:	2300      	movs	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	e015      	b.n	80034e2 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 80034b6:	4935      	ldr	r1, [pc, #212]	; (800358c <record_print+0xf8>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80034be:	fb03 f202 	mul.w	r2, r3, r2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f863 	bl	8000598 <__aeabi_f2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	482e      	ldr	r0, [pc, #184]	; (8003590 <record_print+0xfc>)
 80034d8:	f008 fdb6 	bl	800c048 <iprintf>
					record_count++) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3301      	adds	r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	dde6      	ble.n	80034b6 <record_print+0x22>
			}
			printf("\n");
 80034e8:	200a      	movs	r0, #10
 80034ea:	f008 fdc5 	bl	800c078 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <record_print+0x100>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	dbd4      	blt.n	80034a8 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 80034fe:	e03c      	b.n	800357a <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e034      	b.n	8003570 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <record_print+0x104>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003518:	4293      	cmp	r3, r2
 800351a:	dd03      	ble.n	8003524 <record_print+0x90>
				time_index -= max_record_time;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8003522:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4818      	ldr	r0, [pc, #96]	; (8003588 <record_print+0xf4>)
 8003528:	f008 fd8e 	bl	800c048 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	e015      	b.n	800355e <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8003532:	4916      	ldr	r1, [pc, #88]	; (800358c <record_print+0xf8>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f825 	bl	8000598 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	480f      	ldr	r0, [pc, #60]	; (8003590 <record_print+0xfc>)
 8003554:	f008 fd78 	bl	800c048 <iprintf>
					record_count++) {
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b03      	cmp	r3, #3
 8003562:	dde6      	ble.n	8003532 <record_print+0x9e>
			printf("\n");
 8003564:	200a      	movs	r0, #10
 8003566:	f008 fd87 	bl	800c078 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003576:	4293      	cmp	r3, r2
 8003578:	ddc5      	ble.n	8003506 <record_print+0x72>
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000c12c 	.word	0x2000c12c
 8003588:	0800e358 	.word	0x0800e358
 800358c:	200005a0 	.word	0x200005a0
 8003590:	0800e35c 	.word	0x0800e35c
 8003594:	2000c124 	.word	0x2000c124
 8003598:	2000c128 	.word	0x2000c128

0800359c <interrupt_record>:

void interrupt_record(void) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <interrupt_record+0x64>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d110      	bne.n	80035cc <interrupt_record+0x30>
			r_data[0] = E_speedR;
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <interrupt_record+0x68>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <interrupt_record+0x6c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <interrupt_record+0x70>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <interrupt_record+0x74>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80035c2:	463b      	mov	r3, r7
 80035c4:	2104      	movs	r1, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff1e 	bl	8003408 <record_data>
		}
	if (record_mode == 2) {
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <interrupt_record+0x64>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d110      	bne.n	80035f6 <interrupt_record+0x5a>
				r_data[0] = angle_speed;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <interrupt_record+0x78>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	603b      	str	r3, [r7, #0]
				r_data[1] = angle;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <interrupt_record+0x7c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	607b      	str	r3, [r7, #4]
				r_data[2] = gf_speed;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <interrupt_record+0x80>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_distance;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <interrupt_record+0x84>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80035ec:	463b      	mov	r3, r7
 80035ee:	2104      	movs	r1, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff09 	bl	8003408 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000c120 	.word	0x2000c120
 8003604:	2000022c 	.word	0x2000022c
 8003608:	20000228 	.word	0x20000228
 800360c:	20000224 	.word	0x20000224
 8003610:	20000220 	.word	0x20000220
 8003614:	20000260 	.word	0x20000260
 8003618:	2000025c 	.word	0x2000025c
 800361c:	2000026c 	.word	0x2000026c
 8003620:	20000270 	.word	0x20000270

08003624 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003628:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <MX_SPI1_Init+0x74>)
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <MX_SPI1_Init+0x78>)
 800362c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <MX_SPI1_Init+0x74>)
 8003630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <MX_SPI1_Init+0x74>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <MX_SPI1_Init+0x74>)
 800363e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003642:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <MX_SPI1_Init+0x74>)
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <MX_SPI1_Init+0x74>)
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <MX_SPI1_Init+0x74>)
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <MX_SPI1_Init+0x74>)
 800365a:	2218      	movs	r2, #24
 800365c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <MX_SPI1_Init+0x74>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <MX_SPI1_Init+0x74>)
 8003666:	2200      	movs	r2, #0
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <MX_SPI1_Init+0x74>)
 800366c:	2200      	movs	r2, #0
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <MX_SPI1_Init+0x74>)
 8003672:	2207      	movs	r2, #7
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <MX_SPI1_Init+0x74>)
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <MX_SPI1_Init+0x74>)
 800367e:	2208      	movs	r2, #8
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003682:	4805      	ldr	r0, [pc, #20]	; (8003698 <MX_SPI1_Init+0x74>)
 8003684:	f004 ff82 	bl	800858c <HAL_SPI_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800368e:	f7ff fca2 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	2000c130 	.word	0x2000c130
 800369c:	40013000 	.word	0x40013000

080036a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <MX_SPI3_Init+0x74>)
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <MX_SPI3_Init+0x78>)
 80036a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <MX_SPI3_Init+0x74>)
 80036ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <MX_SPI3_Init+0x74>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <MX_SPI3_Init+0x74>)
 80036ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <MX_SPI3_Init+0x74>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <MX_SPI3_Init+0x74>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <MX_SPI3_Init+0x74>)
 80036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <MX_SPI3_Init+0x74>)
 80036d6:	2218      	movs	r2, #24
 80036d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <MX_SPI3_Init+0x74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <MX_SPI3_Init+0x74>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <MX_SPI3_Init+0x74>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <MX_SPI3_Init+0x74>)
 80036ee:	2207      	movs	r2, #7
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <MX_SPI3_Init+0x74>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <MX_SPI3_Init+0x74>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036fe:	4805      	ldr	r0, [pc, #20]	; (8003714 <MX_SPI3_Init+0x74>)
 8003700:	f004 ff44 	bl	800858c <HAL_SPI_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800370a:	f7ff fc64 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000c194 	.word	0x2000c194
 8003718:	40003c00 	.word	0x40003c00

0800371c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3d      	ldr	r2, [pc, #244]	; (8003830 <HAL_SPI_MspInit+0x114>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d129      	bne.n	8003792 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_SPI_MspInit+0x118>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_SPI_MspInit+0x118>)
 8003744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003748:	6613      	str	r3, [r2, #96]	; 0x60
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_SPI_MspInit+0x118>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_SPI_MspInit+0x118>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	4a36      	ldr	r2, [pc, #216]	; (8003834 <HAL_SPI_MspInit+0x118>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <HAL_SPI_MspInit+0x118>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800376e:	23e0      	movs	r3, #224	; 0xe0
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800377e:	2305      	movs	r3, #5
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	4619      	mov	r1, r3
 8003788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378c:	f003 fd44 	bl	8007218 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003790:	e049      	b.n	8003826 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_SPI_MspInit+0x11c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d144      	bne.n	8003826 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_SPI_MspInit+0x118>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a24      	ldr	r2, [pc, #144]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d8:	4b16      	ldr	r3, [pc, #88]	; (8003834 <HAL_SPI_MspInit+0x118>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037f6:	2306      	movs	r3, #6
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	4619      	mov	r1, r3
 8003800:	480e      	ldr	r0, [pc, #56]	; (800383c <HAL_SPI_MspInit+0x120>)
 8003802:	f003 fd09 	bl	8007218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003806:	2320      	movs	r3, #32
 8003808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2300      	movs	r3, #0
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003816:	2306      	movs	r3, #6
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381a:	f107 031c 	add.w	r3, r7, #28
 800381e:	4619      	mov	r1, r3
 8003820:	4807      	ldr	r0, [pc, #28]	; (8003840 <HAL_SPI_MspInit+0x124>)
 8003822:	f003 fcf9 	bl	8007218 <HAL_GPIO_Init>
}
 8003826:	bf00      	nop
 8003828:	3730      	adds	r7, #48	; 0x30
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40013000 	.word	0x40013000
 8003834:	40021000 	.word	0x40021000
 8003838:	40003c00 	.word	0x40003c00
 800383c:	48000800 	.word	0x48000800
 8003840:	48000400 	.word	0x48000400

08003844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_MspInit+0x44>)
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <HAL_MspInit+0x44>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6613      	str	r3, [r2, #96]	; 0x60
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_MspInit+0x44>)
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_MspInit+0x44>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <HAL_MspInit+0x44>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6593      	str	r3, [r2, #88]	; 0x58
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_MspInit+0x44>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800387a:	f003 ff0b 	bl	8007694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003890:	e7fe      	b.n	8003890 <NMI_Handler+0x4>

08003892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003896:	e7fe      	b.n	8003896 <HardFault_Handler+0x4>

08003898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800389c:	e7fe      	b.n	800389c <MemManage_Handler+0x4>

0800389e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <BusFault_Handler+0x4>

080038a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <UsageFault_Handler+0x4>

080038aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d8:	f000 fc46 	bl	8004168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}

080038e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <DMA1_Channel1_IRQHandler+0x10>)
 80038e6:	f003 f8df 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000540 	.word	0x20000540

080038f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <ADC1_2_IRQHandler+0x10>)
 80038fa:	f001 fbe5 	bl	80050c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200004d4 	.word	0x200004d4

08003908 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800390c:	4809      	ldr	r0, [pc, #36]	; (8003934 <TIM6_DAC_IRQHandler+0x2c>)
 800390e:	f006 f81d 	bl	800994c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8003912:	f7fe fe75 	bl	8002600 <interrupt_timer>
  interupt_calSensor();
 8003916:	f7fd ffa3 	bl	8001860 <interupt_calSensor>
  ICM20602_DataUpdate();
 800391a:	f7fe fc43 	bl	80021a4 <ICM20602_DataUpdate>
  interrupt_calGyro();
 800391e:	f7fd fe3b 	bl	8001598 <interrupt_calGyro>
  AS5047_DataUpdate();
 8003922:	f7fe fab3 	bl	8001e8c <AS5047_DataUpdate>
  interupt_calEncoder();
 8003926:	f7fd fb9f 	bl	8001068 <interupt_calEncoder>
  interrupt_record();
 800392a:	f7ff fe37 	bl	800359c <interrupt_record>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	2000c1fc 	.word	0x2000c1fc

08003938 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
	return 1;
 800394a:	2301      	movs	r3, #1
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <_kill>:

int _kill(int pid, int sig)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003960:	f007 fec8 	bl	800b6f4 <__errno>
 8003964:	4603      	mov	r3, r0
 8003966:	2216      	movs	r2, #22
 8003968:	601a      	str	r2, [r3, #0]
	return -1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <_exit>:

void _exit (int status)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800397e:	f04f 31ff 	mov.w	r1, #4294967295
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffe7 	bl	8003956 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003988:	e7fe      	b.n	8003988 <_exit+0x12>

0800398a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e00a      	b.n	80039b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800399c:	f3af 8000 	nop.w
 80039a0:	4601      	mov	r1, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	60ba      	str	r2, [r7, #8]
 80039a8:	b2ca      	uxtb	r2, r1
 80039aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	dbf0      	blt.n	800399c <_read+0x12>
	}

return len;
 80039ba:	687b      	ldr	r3, [r7, #4]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e00a      	b.n	80039ec <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	1c4b      	adds	r3, r1, #1
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	2301      	movs	r3, #1
 80039de:	2201      	movs	r2, #1
 80039e0:	4807      	ldr	r0, [pc, #28]	; (8003a00 <_write+0x3c>)
 80039e2:	f007 f83d 	bl	800aa60 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dbf0      	blt.n	80039d6 <_write+0x12>
	}
	return len;
 80039f4:	687b      	ldr	r3, [r7, #4]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000c2e0 	.word	0x2000c2e0

08003a04 <_close>:

int _close(int file)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	return -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_isatty>:

int _isatty(int file)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	return 1;
 8003a44:	2301      	movs	r3, #1
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <_sbrk+0x5c>)
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <_sbrk+0x60>)
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <_sbrk+0x64>)
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <_sbrk+0x68>)
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <_sbrk+0x64>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a9c:	f007 fe2a 	bl	800b6f4 <__errno>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	e009      	b.n	8003ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <_sbrk+0x64>)
 8003abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	2001c000 	.word	0x2001c000
 8003acc:	00000400 	.word	0x00000400
 8003ad0:	2000c1f8 	.word	0x2000c1f8
 8003ad4:	2000c388 	.word	0x2000c388

08003ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <SystemInit+0x20>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <SystemInit+0x20>)
 8003ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <MX_TIM6_Init+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b14:	2254      	movs	r2, #84	; 0x54
 8003b16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b18:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b2e:	f005 fc45 	bl	80093bc <HAL_TIM_Base_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003b38:	f7ff fa4d 	bl	8002fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4805      	ldr	r0, [pc, #20]	; (8003b60 <MX_TIM6_Init+0x64>)
 8003b4a:	f006 fdb3 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003b54:	f7ff fa3f 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	2000c1fc 	.word	0x2000c1fc
 8003b64:	40001000 	.word	0x40001000

08003b68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b098      	sub	sp, #96	; 0x60
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	615a      	str	r2, [r3, #20]
 8003b8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	2234      	movs	r2, #52	; 0x34
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f007 fde5 	bl	800b764 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003b9c:	4a41      	ldr	r2, [pc, #260]	; (8003ca4 <MX_TIM8_Init+0x13c>)
 8003b9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8003bac:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bae:	f240 628f 	movw	r2, #1679	; 0x68f
 8003bb2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc0:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003bc6:	4836      	ldr	r0, [pc, #216]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bc8:	f005 fcc0 	bl	800954c <HAL_TIM_PWM_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003bd2:	f7ff fa00 	bl	8002fd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be6:	4619      	mov	r1, r3
 8003be8:	482d      	ldr	r0, [pc, #180]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003bea:	f006 fd63 	bl	800a6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003bf4:	f7ff f9ef 	bl	8002fd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bf8:	2360      	movs	r3, #96	; 0x60
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8003bfc:	f240 13a3 	movw	r3, #419	; 0x1a3
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c02:	2300      	movs	r3, #0
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c06:	2300      	movs	r3, #0
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4820      	ldr	r0, [pc, #128]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003c20:	f006 f814 	bl	8009c4c <HAL_TIM_PWM_ConfigChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003c2a:	f7ff f9d4 	bl	8002fd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c32:	2208      	movs	r2, #8
 8003c34:	4619      	mov	r1, r3
 8003c36:	481a      	ldr	r0, [pc, #104]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003c38:	f006 f808 	bl	8009c4c <HAL_TIM_PWM_ConfigChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8003c42:	f7ff f9c8 	bl	8002fd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c64:	2300      	movs	r3, #0
 8003c66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c76:	2300      	movs	r3, #0
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4807      	ldr	r0, [pc, #28]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003c84:	f006 fda4 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8003c8e:	f7ff f9a2 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003c92:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <MX_TIM8_Init+0x138>)
 8003c94:	f000 f8da 	bl	8003e4c <HAL_TIM_MspPostInit>

}
 8003c98:	bf00      	nop
 8003c9a:	3760      	adds	r7, #96	; 0x60
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2000c248 	.word	0x2000c248
 8003ca4:	40013400 	.word	0x40013400

08003ca8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b094      	sub	sp, #80	; 0x50
 8003cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	2234      	movs	r2, #52	; 0x34
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f007 fd4b 	bl	800b764 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003cce:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <MX_TIM16_Init+0xec>)
 8003cd2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cda:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003ce2:	2264      	movs	r2, #100	; 0x64
 8003ce4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003cf8:	4825      	ldr	r0, [pc, #148]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003cfa:	f005 fb5f 	bl	80093bc <HAL_TIM_Base_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8003d04:	f7ff f967 	bl	8002fd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003d08:	4821      	ldr	r0, [pc, #132]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003d0a:	f005 fc1f 	bl	800954c <HAL_TIM_PWM_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8003d14:	f7ff f95f 	bl	8002fd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d18:	2360      	movs	r3, #96	; 0x60
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8003d1c:	231e      	movs	r3, #30
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d20:	2300      	movs	r3, #0
 8003d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d24:	2300      	movs	r3, #0
 8003d26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4814      	ldr	r0, [pc, #80]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003d3e:	f005 ff85 	bl	8009c4c <HAL_TIM_PWM_ConfigChannel>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8003d48:	f7ff f945 	bl	8002fd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003d6e:	463b      	mov	r3, r7
 8003d70:	4619      	mov	r1, r3
 8003d72:	4807      	ldr	r0, [pc, #28]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003d74:	f006 fd2c 	bl	800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8003d7e:	f7ff f92a 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003d82:	4803      	ldr	r0, [pc, #12]	; (8003d90 <MX_TIM16_Init+0xe8>)
 8003d84:	f000 f862 	bl	8003e4c <HAL_TIM_MspPostInit>

}
 8003d88:	bf00      	nop
 8003d8a:	3750      	adds	r7, #80	; 0x50
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	2000c294 	.word	0x2000c294
 8003d94:	40014400 	.word	0x40014400

08003d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_TIM_Base_MspInit+0x68>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d114      	bne.n	8003dd4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003db0:	f043 0310 	orr.w	r3, r3, #16
 8003db4:	6593      	str	r3, [r2, #88]	; 0x58
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	2036      	movs	r0, #54	; 0x36
 8003dc8:	f002 fcbd 	bl	8006746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dcc:	2036      	movs	r0, #54	; 0x36
 8003dce:	f002 fcd4 	bl	800677a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003dd2:	e010      	b.n	8003df6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_TIM_Base_MspInit+0x70>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10b      	bne.n	8003df6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de8:	6613      	str	r3, [r2, #96]	; 0x60
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_TIM_Base_MspInit+0x6c>)
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40001000 	.word	0x40001000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40014400 	.word	0x40014400

08003e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <HAL_TIM_PWM_MspInit+0x38>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10b      	bne.n	8003e36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e28:	6613      	str	r3, [r2, #96]	; 0x60
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40021000 	.word	0x40021000

08003e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <HAL_TIM_MspPostInit+0xcc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d12d      	bne.n	8003eca <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e7a:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8003e86:	2340      	movs	r3, #64	; 0x40
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8003e96:	2305      	movs	r3, #5
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	481f      	ldr	r0, [pc, #124]	; (8003f20 <HAL_TIM_MspPostInit+0xd4>)
 8003ea2:	f003 f9b9 	bl	8007218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8003ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	2302      	movs	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003eb8:	230a      	movs	r3, #10
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4817      	ldr	r0, [pc, #92]	; (8003f20 <HAL_TIM_MspPostInit+0xd4>)
 8003ec4:	f003 f9a8 	bl	8007218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003ec8:	e022      	b.n	8003f10 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_TIM_MspPostInit+0xd8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d11d      	bne.n	8003f10 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_TIM_MspPostInit+0xd0>)
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8003eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003efe:	2301      	movs	r3, #1
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8003f02:	f107 0314 	add.w	r3, r7, #20
 8003f06:	4619      	mov	r1, r3
 8003f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f0c:	f003 f984 	bl	8007218 <HAL_GPIO_Init>
}
 8003f10:	bf00      	nop
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40013400 	.word	0x40013400
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	48000400 	.word	0x48000400
 8003f24:	40014400 	.word	0x40014400

08003f28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <MX_USART1_UART_Init+0x94>)
 8003f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f32:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f4e:	220c      	movs	r2, #12
 8003f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f52:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f70:	4811      	ldr	r0, [pc, #68]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f72:	f006 fd25 	bl	800a9c0 <HAL_UART_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f7c:	f7ff f82b 	bl	8002fd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f80:	2100      	movs	r1, #0
 8003f82:	480d      	ldr	r0, [pc, #52]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f84:	f007 faec 	bl	800b560 <HAL_UARTEx_SetTxFifoThreshold>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f8e:	f7ff f822 	bl	8002fd6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f92:	2100      	movs	r1, #0
 8003f94:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003f96:	f007 fb21 	bl	800b5dc <HAL_UARTEx_SetRxFifoThreshold>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003fa0:	f7ff f819 	bl	8002fd6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003fa4:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <MX_USART1_UART_Init+0x90>)
 8003fa6:	f007 faa2 	bl	800b4ee <HAL_UARTEx_DisableFifoMode>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003fb0:	f7ff f811 	bl	8002fd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	2000c2e0 	.word	0x2000c2e0
 8003fbc:	40013800 	.word	0x40013800

08003fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b09e      	sub	sp, #120	; 0x78
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	2250      	movs	r2, #80	; 0x50
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f007 fbbf 	bl	800b764 <memset>
  if(uartHandle->Instance==USART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_UART_MspInit+0xa8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d137      	bne.n	8004060 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 f889 	bl	8008114 <HAL_RCCEx_PeriphCLKConfig>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004008:	f7fe ffe5 	bl	8002fd6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_UART_MspInit+0xac>)
 800400e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_UART_MspInit+0xac>)
 8004012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004016:	6613      	str	r3, [r2, #96]	; 0x60
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_UART_MspInit+0xac>)
 800401a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_UART_MspInit+0xac>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_UART_MspInit+0xac>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_UART_MspInit+0xac>)
 8004032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800403c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004040:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004042:	2302      	movs	r3, #2
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404a:	2300      	movs	r3, #0
 800404c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800404e:	2307      	movs	r3, #7
 8004050:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004052:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004056:	4619      	mov	r1, r3
 8004058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800405c:	f003 f8dc 	bl	8007218 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004060:	bf00      	nop
 8004062:	3778      	adds	r7, #120	; 0x78
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40013800 	.word	0x40013800
 800406c:	40021000 	.word	0x40021000

08004070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004070:	480d      	ldr	r0, [pc, #52]	; (80040a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004072:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004074:	480d      	ldr	r0, [pc, #52]	; (80040ac <LoopForever+0x6>)
  ldr r1, =_edata
 8004076:	490e      	ldr	r1, [pc, #56]	; (80040b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004078:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <LoopForever+0xe>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800407c:	e002      	b.n	8004084 <LoopCopyDataInit>

0800407e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004082:	3304      	adds	r3, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004088:	d3f9      	bcc.n	800407e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408a:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800408c:	4c0b      	ldr	r4, [pc, #44]	; (80040bc <LoopForever+0x16>)
  movs r3, #0
 800408e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004090:	e001      	b.n	8004096 <LoopFillZerobss>

08004092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004094:	3204      	adds	r2, #4

08004096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004098:	d3fb      	bcc.n	8004092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800409a:	f7ff fd1d 	bl	8003ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800409e:	f007 fb2f 	bl	800b700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040a2:	f7fe fd91 	bl	8002bc8 <main>

080040a6 <LoopForever>:

LoopForever:
    b LoopForever
 80040a6:	e7fe      	b.n	80040a6 <LoopForever>
  ldr   r0, =_estack
 80040a8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80040ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040b0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80040b4:	0800e78c 	.word	0x0800e78c
  ldr r2, =_sbss
 80040b8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80040bc:	2000c384 	.word	0x2000c384

080040c0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC3_IRQHandler>

080040c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040cc:	2003      	movs	r0, #3
 80040ce:	f002 fb2f 	bl	8006730 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040d2:	200f      	movs	r0, #15
 80040d4:	f000 f80e 	bl	80040f4 <HAL_InitTick>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	71fb      	strb	r3, [r7, #7]
 80040e2:	e001      	b.n	80040e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040e4:	f7ff fbae 	bl	8003844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040e8:	79fb      	ldrb	r3, [r7, #7]

}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_InitTick+0x68>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_InitTick+0x6c>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_InitTick+0x68>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004114:	fbb1 f3f3 	udiv	r3, r1, r3
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	4618      	mov	r0, r3
 800411e:	f002 fb3a 	bl	8006796 <HAL_SYSTICK_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10f      	bne.n	8004148 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	d809      	bhi.n	8004142 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800412e:	2200      	movs	r2, #0
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	f002 fb06 	bl	8006746 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_InitTick+0x70>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e007      	b.n	8004152 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e004      	b.n	8004152 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	e001      	b.n	8004152 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000008 	.word	0x20000008
 8004160:	20000000 	.word	0x20000000
 8004164:	20000004 	.word	0x20000004

08004168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_IncTick+0x1c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_IncTick+0x20>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4413      	add	r3, r2
 8004176:	4a03      	ldr	r2, [pc, #12]	; (8004184 <HAL_IncTick+0x1c>)
 8004178:	6013      	str	r3, [r2, #0]
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	2000c370 	.word	0x2000c370
 8004188:	20000008 	.word	0x20000008

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000c370 	.word	0x2000c370

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d004      	beq.n	80041c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_Delay+0x40>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041c8:	bf00      	nop
 80041ca:	f7ff ffdf 	bl	800418c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d8f7      	bhi.n	80041ca <HAL_Delay+0x26>
  {
  }
}
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000008 	.word	0x20000008

080041e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <LL_ADC_SetOffset+0x44>)
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	03fff000 	.word	0x03fff000

08004298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3360      	adds	r3, #96	; 0x60
 80042a6:	461a      	mov	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3360      	adds	r3, #96	; 0x60
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3360      	adds	r3, #96	; 0x60
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	431a      	orrs	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3360      	adds	r3, #96	; 0x60
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	431a      	orrs	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	615a      	str	r2, [r3, #20]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3330      	adds	r3, #48	; 0x30
 80043c2:	461a      	mov	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	4413      	add	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	211f      	movs	r1, #31
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	f003 011f 	and.w	r1, r3, #31
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	431a      	orrs	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3314      	adds	r3, #20
 8004440:	461a      	mov	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0e5b      	lsrs	r3, r3, #25
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	4413      	add	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0d1b      	lsrs	r3, r3, #20
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2107      	movs	r1, #7
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	401a      	ands	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	0d1b      	lsrs	r3, r3, #20
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0f      	ldr	r2, [pc, #60]	; (80044d4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d10a      	bne.n	80044b2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80044b0:	e00a      	b.n	80044c8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044be:	43db      	mvns	r3, r3
 80044c0:	401a      	ands	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	407f0000 	.word	0x407f0000

080044d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 031f 	and.w	r3, r3, #31
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6093      	str	r3, [r2, #8]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004548:	d101      	bne.n	800454e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800456c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004570:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004598:	d101      	bne.n	800459e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045c0:	f043 0201 	orr.w	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e8:	f043 0202 	orr.w	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <LL_ADC_IsEnabled+0x18>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LL_ADC_IsEnabled+0x1a>
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d101      	bne.n	800463a <LL_ADC_IsDisableOngoing+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_IsDisableOngoing+0x1a>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800465c:	f043 0204 	orr.w	r2, r3, #4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004684:	f043 0210 	orr.w	r2, r3, #16
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d101      	bne.n	80046b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d101      	bne.n	80046fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e1a1      	b.n	8004a6a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fe f8db 	bl	80028f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fef1 	bl	8004534 <LL_ADC_IsDeepPowerDownEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fed7 	bl	8004510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff0c 	bl	8004584 <LL_ADC_IsInternalRegulatorEnabled>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d115      	bne.n	800479e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fef0 	bl	800455c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800477c:	4b9a      	ldr	r3, [pc, #616]	; (80049e8 <HAL_ADC_Init+0x2dc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	4a9a      	ldr	r2, [pc, #616]	; (80049ec <HAL_ADC_Init+0x2e0>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004790:	e002      	b.n	8004798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3b01      	subs	r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f9      	bne.n	8004792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff feee 	bl	8004584 <LL_ADC_IsInternalRegulatorEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f043 0210 	orr.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ff62 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 80047d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 813a 	bne.w	8004a58 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 8136 	bne.w	8004a58 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fefb 	bl	80045fc <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d137      	bne.n	800487c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004814:	d004      	beq.n	8004820 <HAL_ADC_Init+0x114>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_ADC_Init+0x2e4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10f      	bne.n	8004840 <HAL_ADC_Init+0x134>
 8004820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004824:	f7ff feea 	bl	80045fc <LL_ADC_IsEnabled>
 8004828:	4604      	mov	r4, r0
 800482a:	4871      	ldr	r0, [pc, #452]	; (80049f0 <HAL_ADC_Init+0x2e4>)
 800482c:	f7ff fee6 	bl	80045fc <LL_ADC_IsEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	4323      	orrs	r3, r4
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e008      	b.n	8004852 <HAL_ADC_Init+0x146>
 8004840:	486c      	ldr	r0, [pc, #432]	; (80049f4 <HAL_ADC_Init+0x2e8>)
 8004842:	f7ff fedb 	bl	80045fc <LL_ADC_IsEnabled>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800485e:	d004      	beq.n	800486a <HAL_ADC_Init+0x15e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a62      	ldr	r2, [pc, #392]	; (80049f0 <HAL_ADC_Init+0x2e4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_ADC_Init+0x162>
 800486a:	4a63      	ldr	r2, [pc, #396]	; (80049f8 <HAL_ADC_Init+0x2ec>)
 800486c:	e000      	b.n	8004870 <HAL_ADC_Init+0x164>
 800486e:	4a63      	ldr	r2, [pc, #396]	; (80049fc <HAL_ADC_Init+0x2f0>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7ff fcb6 	bl	80041e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	7f5b      	ldrb	r3, [r3, #29]
 8004880:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004886:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800488c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004892:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800489a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d106      	bne.n	80048b8 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	045b      	lsls	r3, r3, #17
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <HAL_ADC_Init+0x2f4>)
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	430b      	orrs	r3, r1
 80048e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fec8 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8004908:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fee9 	bl	80046e6 <LL_ADC_INJ_IsConversionOngoing>
 8004914:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d17b      	bne.n	8004a14 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d178      	bne.n	8004a14 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004926:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800492e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493e:	f023 0302 	bic.w	r3, r3, #2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	430b      	orrs	r3, r1
 800494a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004962:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800496c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6911      	ldr	r1, [r2, #16]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	430b      	orrs	r3, r1
 800497e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004982:	e013      	b.n	80049ac <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004992:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d126      	bne.n	8004a04 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80049d2:	4311      	orrs	r1, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049d8:	430a      	orrs	r2, r1
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e015      	b.n	8004a14 <HAL_ADC_Init+0x308>
 80049e8:	20000000 	.word	0x20000000
 80049ec:	053e2d63 	.word	0x053e2d63
 80049f0:	50000100 	.word	0x50000100
 80049f4:	50000400 	.word	0x50000400
 80049f8:	50000300 	.word	0x50000300
 80049fc:	50000700 	.word	0x50000700
 8004a00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10c      	bne.n	8004a36 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f023 010f 	bic.w	r1, r3, #15
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	1e5a      	subs	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
 8004a34:	e007      	b.n	8004a46 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 020f 	bic.w	r2, r2, #15
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a56:	e007      	b.n	8004a68 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3724      	adds	r7, #36	; 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd90      	pop	{r4, r7, pc}
 8004a72:	bf00      	nop

08004a74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d004      	beq.n	8004a90 <HAL_ADC_Start+0x1c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5c      	ldr	r2, [pc, #368]	; (8004bfc <HAL_ADC_Start+0x188>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_Start+0x20>
 8004a90:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_ADC_Start+0x18c>)
 8004a92:	e000      	b.n	8004a96 <HAL_ADC_Start+0x22>
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <HAL_ADC_Start+0x190>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fd1e 	bl	80044d8 <LL_ADC_GetMultimode>
 8004a9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fdf8 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 809f 	bne.w	8004bee <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_ADC_Start+0x4a>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e09a      	b.n	8004bf4 <HAL_ADC_Start+0x180>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 fa3e 	bl	8005f48 <ADC_Enable>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8086 	bne.w	8004be4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a42      	ldr	r2, [pc, #264]	; (8004bfc <HAL_ADC_Start+0x188>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d002      	beq.n	8004afc <HAL_ADC_Start+0x88>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e001      	b.n	8004b00 <HAL_ADC_Start+0x8c>
 8004afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d002      	beq.n	8004b0e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d106      	bne.n	8004b36 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2c:	f023 0206 	bic.w	r2, r3, #6
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
 8004b34:	e002      	b.n	8004b3c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	221c      	movs	r2, #28
 8004b42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_ADC_Start+0x188>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d002      	beq.n	8004b5c <HAL_ADC_Start+0xe8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	e001      	b.n	8004b60 <HAL_ADC_Start+0xec>
 8004b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d008      	beq.n	8004b7a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d002      	beq.n	8004b7a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	d114      	bne.n	8004ba4 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fd53 	bl	8004648 <LL_ADC_REG_StartConversion>
 8004ba2:	e026      	b.n	8004bf2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a11      	ldr	r2, [pc, #68]	; (8004bfc <HAL_ADC_Start+0x188>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d002      	beq.n	8004bc0 <HAL_ADC_Start+0x14c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	e001      	b.n	8004bc4 <HAL_ADC_Start+0x150>
 8004bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bc4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00f      	beq.n	8004bf2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004be2:	e006      	b.n	8004bf2 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004bec:	e001      	b.n	8004bf2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	50000100 	.word	0x50000100
 8004c00:	50000300 	.word	0x50000300
 8004c04:	50000700 	.word	0x50000700

08004c08 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_ADC_Stop+0x16>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e023      	b.n	8004c66 <HAL_ADC_Stop+0x5e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004c26:	2103      	movs	r1, #3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f001 f8d1 	bl	8005dd0 <ADC_ConversionStop>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 f9e7 	bl	800600c <ADC_Disable>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c82:	d004      	beq.n	8004c8e <HAL_ADC_PollForConversion+0x1e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a70      	ldr	r2, [pc, #448]	; (8004e4c <HAL_ADC_PollForConversion+0x1dc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADC_PollForConversion+0x22>
 8004c8e:	4b70      	ldr	r3, [pc, #448]	; (8004e50 <HAL_ADC_PollForConversion+0x1e0>)
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_PollForConversion+0x24>
 8004c92:	4b70      	ldr	r3, [pc, #448]	; (8004e54 <HAL_ADC_PollForConversion+0x1e4>)
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fc1f 	bl	80044d8 <LL_ADC_GetMultimode>
 8004c9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d102      	bne.n	8004caa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e037      	b.n	8004d1a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d002      	beq.n	8004cbc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	d111      	bne.n	8004ce0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0b3      	b.n	8004e42 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004cda:	2304      	movs	r3, #4
 8004cdc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004cde:	e01c      	b.n	8004d1a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce8:	d004      	beq.n	8004cf4 <HAL_ADC_PollForConversion+0x84>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a57      	ldr	r2, [pc, #348]	; (8004e4c <HAL_ADC_PollForConversion+0x1dc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_PollForConversion+0x88>
 8004cf4:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <HAL_ADC_PollForConversion+0x1e0>)
 8004cf6:	e000      	b.n	8004cfa <HAL_ADC_PollForConversion+0x8a>
 8004cf8:	4b56      	ldr	r3, [pc, #344]	; (8004e54 <HAL_ADC_PollForConversion+0x1e4>)
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fbfa 	bl	80044f4 <LL_ADC_GetMultiDMATransfer>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e095      	b.n	8004e42 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d16:	2304      	movs	r3, #4
 8004d18:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004d1a:	f7ff fa37 	bl	800418c <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d20:	e021      	b.n	8004d66 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d01d      	beq.n	8004d66 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004d2a:	f7ff fa2f 	bl	800418c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <HAL_ADC_PollForConversion+0xd0>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d112      	bne.n	8004d66 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	f043 0204 	orr.w	r2, r3, #4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e06d      	b.n	8004e42 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0d6      	beq.n	8004d22 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fb01 	bl	800438c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01c      	beq.n	8004dca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7f5b      	ldrb	r3, [r3, #29]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d118      	bne.n	8004dca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d111      	bne.n	8004dca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d105      	bne.n	8004dca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_ADC_PollForConversion+0x1dc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d002      	beq.n	8004dda <HAL_ADC_PollForConversion+0x16a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	e001      	b.n	8004dde <HAL_ADC_PollForConversion+0x16e>
 8004dda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d008      	beq.n	8004df8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d002      	beq.n	8004df8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	d104      	bne.n	8004e02 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e00d      	b.n	8004e1e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <HAL_ADC_PollForConversion+0x1dc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d002      	beq.n	8004e12 <HAL_ADC_PollForConversion+0x1a2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	e001      	b.n	8004e16 <HAL_ADC_PollForConversion+0x1a6>
 8004e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e16:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d104      	bne.n	8004e2e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e008      	b.n	8004e40 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	220c      	movs	r2, #12
 8004e3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	50000100 	.word	0x50000100
 8004e50:	50000300 	.word	0x50000300
 8004e54:	50000700 	.word	0x50000700

08004e58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e6c:	d004      	beq.n	8004e78 <HAL_ADC_Start_DMA+0x20>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a57      	ldr	r2, [pc, #348]	; (8004fd0 <HAL_ADC_Start_DMA+0x178>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_Start_DMA+0x24>
 8004e78:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_ADC_Start_DMA+0x17c>)
 8004e7a:	e000      	b.n	8004e7e <HAL_ADC_Start_DMA+0x26>
 8004e7c:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_ADC_Start_DMA+0x180>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fb2a 	bl	80044d8 <LL_ADC_GetMultimode>
 8004e84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fc04 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 8094 	bne.w	8004fc0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_Start_DMA+0x4e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e08f      	b.n	8004fc6 <HAL_ADC_Start_DMA+0x16e>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4a      	ldr	r2, [pc, #296]	; (8004fdc <HAL_ADC_Start_DMA+0x184>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d008      	beq.n	8004eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	d002      	beq.n	8004eca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	d173      	bne.n	8004fb2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f001 f83c 	bl	8005f48 <ADC_Enable>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d166      	bne.n	8004fa8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a37      	ldr	r2, [pc, #220]	; (8004fd0 <HAL_ADC_Start_DMA+0x178>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d002      	beq.n	8004efe <HAL_ADC_Start_DMA+0xa6>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	e001      	b.n	8004f02 <HAL_ADC_Start_DMA+0xaa>
 8004efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d002      	beq.n	8004f10 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	f023 0206 	bic.w	r2, r3, #6
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	661a      	str	r2, [r3, #96]	; 0x60
 8004f34:	e002      	b.n	8004f3c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	4a27      	ldr	r2, [pc, #156]	; (8004fe0 <HAL_ADC_Start_DMA+0x188>)
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <HAL_ADC_Start_DMA+0x18c>)
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_ADC_Start_DMA+0x190>)
 8004f52:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	221c      	movs	r2, #28
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0210 	orr.w	r2, r2, #16
 8004f72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3340      	adds	r3, #64	; 0x40
 8004f8e:	4619      	mov	r1, r3
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f001 fcb4 	bl	8006900 <HAL_DMA_Start_IT>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fb51 	bl	8004648 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fa6:	e00d      	b.n	8004fc4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004fb0:	e008      	b.n	8004fc4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004fbe:	e001      	b.n	8004fc4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	50000100 	.word	0x50000100
 8004fd4:	50000300 	.word	0x50000300
 8004fd8:	50000700 	.word	0x50000700
 8004fdc:	50000400 	.word	0x50000400
 8004fe0:	080060cb 	.word	0x080060cb
 8004fe4:	080061a3 	.word	0x080061a3
 8004fe8:	080061bf 	.word	0x080061bf

08004fec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_Stop_DMA+0x16>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e051      	b.n	80050a6 <HAL_ADC_Stop_DMA+0xba>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800500a:	2103      	movs	r1, #3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fedf 	bl	8005dd0 <ADC_ConversionStop>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d13f      	bne.n	800509c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d10f      	bne.n	800505a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fcd9 	bl	80069f6 <HAL_DMA_Abort>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0210 	bic.w	r2, r2, #16
 8005068:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d105      	bne.n	800507c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 ffcb 	bl	800600c <ADC_Disable>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e002      	b.n	8005082 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 ffc5 	bl	800600c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80050d0:	2300      	movs	r3, #0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ec:	d004      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x30>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a87      	ldr	r2, [pc, #540]	; (8005310 <HAL_ADC_IRQHandler+0x248>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_IRQHandler+0x34>
 80050f8:	4b86      	ldr	r3, [pc, #536]	; (8005314 <HAL_ADC_IRQHandler+0x24c>)
 80050fa:	e000      	b.n	80050fe <HAL_ADC_IRQHandler+0x36>
 80050fc:	4b86      	ldr	r3, [pc, #536]	; (8005318 <HAL_ADC_IRQHandler+0x250>)
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f9ea 	bl	80044d8 <LL_ADC_GetMultimode>
 8005104:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d017      	beq.n	8005140 <HAL_ADC_IRQHandler+0x78>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d012      	beq.n	8005140 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 f93a 	bl	80063ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2202      	movs	r2, #2
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_ADC_IRQHandler+0x8c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8085 	beq.w	800526a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d07f      	beq.n	800526a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff f900 	bl	800438c <LL_ADC_REG_IsTriggerSourceSWStart>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d064      	beq.n	800525c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5e      	ldr	r2, [pc, #376]	; (8005310 <HAL_ADC_IRQHandler+0x248>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d002      	beq.n	80051a2 <HAL_ADC_IRQHandler+0xda>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	e001      	b.n	80051a6 <HAL_ADC_IRQHandler+0xde>
 80051a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d008      	beq.n	80051c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d002      	beq.n	80051c0 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b09      	cmp	r3, #9
 80051be:	d104      	bne.n	80051ca <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	e00d      	b.n	80051e6 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a50      	ldr	r2, [pc, #320]	; (8005310 <HAL_ADC_IRQHandler+0x248>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d002      	beq.n	80051da <HAL_ADC_IRQHandler+0x112>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	e001      	b.n	80051de <HAL_ADC_IRQHandler+0x116>
 80051da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051de:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d135      	bne.n	800525c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d12e      	bne.n	800525c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fa48 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11a      	bne.n	8005244 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 020c 	bic.w	r2, r2, #12
 800521c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d112      	bne.n	800525c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	65da      	str	r2, [r3, #92]	; 0x5c
 8005242:	e00b      	b.n	800525c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	f043 0210 	orr.w	r2, r3, #16
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fd fbef 	bl	8002a40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	220c      	movs	r2, #12
 8005268:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <HAL_ADC_IRQHandler+0x1b6>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a1 	beq.w	80053cc <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 809b 	beq.w	80053cc <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff f8a9 	bl	800440a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80052b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f864 	bl	800438c <LL_ADC_REG_IsTriggerSourceSWStart>
 80052c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a11      	ldr	r2, [pc, #68]	; (8005310 <HAL_ADC_IRQHandler+0x248>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d002      	beq.n	80052d6 <HAL_ADC_IRQHandler+0x20e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	e001      	b.n	80052da <HAL_ADC_IRQHandler+0x212>
 80052d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	4293      	cmp	r3, r2
 80052e0:	d008      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d002      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	d104      	bne.n	80052fe <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	e014      	b.n	8005328 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <HAL_ADC_IRQHandler+0x248>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_ADC_IRQHandler+0x254>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	e008      	b.n	8005320 <HAL_ADC_IRQHandler+0x258>
 800530e:	bf00      	nop
 8005310:	50000100 	.word	0x50000100
 8005314:	50000300 	.word	0x50000300
 8005318:	50000700 	.word	0x50000700
 800531c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005320:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d047      	beq.n	80053be <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_ADC_IRQHandler+0x280>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03f      	beq.n	80053be <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005344:	2b00      	cmp	r3, #0
 8005346:	d13a      	bne.n	80053be <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d133      	bne.n	80053be <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d12e      	bne.n	80053be <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff f9be 	bl	80046e6 <LL_ADC_INJ_IsConversionOngoing>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11a      	bne.n	80053a6 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800537e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80053a4:	e00b      	b.n	80053be <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	f043 0210 	orr.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 ffcc 	bl	800635c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2260      	movs	r2, #96	; 0x60
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_ADC_IRQHandler+0x332>
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8af 	bl	8005550 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <HAL_ADC_IRQHandler+0x362>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ffb2 	bl	8006384 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_ADC_IRQHandler+0x392>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ffa4 	bl	8006398 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d043      	beq.n	80054ec <HAL_ADC_IRQHandler+0x424>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03e      	beq.n	80054ec <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8005476:	2301      	movs	r3, #1
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e021      	b.n	80054c0 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d015      	beq.n	80054ae <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800548a:	d004      	beq.n	8005496 <HAL_ADC_IRQHandler+0x3ce>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a27      	ldr	r2, [pc, #156]	; (8005530 <HAL_ADC_IRQHandler+0x468>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_ADC_IRQHandler+0x3d2>
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <HAL_ADC_IRQHandler+0x46c>)
 8005498:	e000      	b.n	800549c <HAL_ADC_IRQHandler+0x3d4>
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_ADC_IRQHandler+0x470>)
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff f829 	bl	80044f4 <LL_ADC_GetMultiDMATransfer>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80054a8:	2301      	movs	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	e008      	b.n	80054c0 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80054bc:	2301      	movs	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10e      	bne.n	80054e4 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	f043 0202 	orr.w	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f840 	bl	8005564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2210      	movs	r2, #16
 80054ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <HAL_ADC_IRQHandler+0x460>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005504:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	f043 0208 	orr.w	r2, r3, #8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005520:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 ff24 	bl	8006370 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005528:	bf00      	nop
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	50000100 	.word	0x50000100
 8005534:	50000300 	.word	0x50000300
 8005538:	50000700 	.word	0x50000700

0800553c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b0b6      	sub	sp, #216	; 0xd8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005592:	2b01      	cmp	r3, #1
 8005594:	d102      	bne.n	800559c <HAL_ADC_ConfigChannel+0x24>
 8005596:	2302      	movs	r3, #2
 8005598:	f000 bc04 	b.w	8005da4 <HAL_ADC_ConfigChannel+0x82c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f875 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f040 83e8 	bne.w	8005d86 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fe fef5 	bl	80043b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f863 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 80055d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff f883 	bl	80046e6 <LL_ADC_INJ_IsConversionOngoing>
 80055e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f040 81d9 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 81d4 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005600:	d10f      	bne.n	8005622 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	4619      	mov	r1, r3
 800560e:	f7fe ff0f 	bl	8004430 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fea3 	bl	8004366 <LL_ADC_SetSamplingTimeCommonConfig>
 8005620:	e00e      	b.n	8005640 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fe fefe 	bl	8004430 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fe93 	bl	8004366 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	08db      	lsrs	r3, r3, #3
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d022      	beq.n	80056a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6919      	ldr	r1, [r3, #16]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005672:	f7fe fded 	bl	8004250 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6919      	ldr	r1, [r3, #16]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	461a      	mov	r2, r3
 8005684:	f7fe fe39 	bl	80042fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6919      	ldr	r1, [r3, #16]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7f1b      	ldrb	r3, [r3, #28]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d102      	bne.n	800569e <HAL_ADC_ConfigChannel+0x126>
 8005698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569c:	e000      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x128>
 800569e:	2300      	movs	r3, #0
 80056a0:	461a      	mov	r2, r3
 80056a2:	f7fe fe45 	bl	8004330 <LL_ADC_SetOffsetSaturation>
 80056a6:	e17b      	b.n	80059a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fdf2 	bl	8004298 <LL_ADC_GetOffsetChannel>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x15c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2100      	movs	r1, #0
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fde7 	bl	8004298 <LL_ADC_GetOffsetChannel>
 80056ca:	4603      	mov	r3, r0
 80056cc:	0e9b      	lsrs	r3, r3, #26
 80056ce:	f003 021f 	and.w	r2, r3, #31
 80056d2:	e01e      	b.n	8005712 <HAL_ADC_ConfigChannel+0x19a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fddc 	bl	8004298 <LL_ADC_GetOffsetChannel>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056ea:	fa93 f3a3 	rbit	r3, r3
 80056ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80056fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005702:	2320      	movs	r3, #32
 8005704:	e004      	b.n	8005710 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <HAL_ADC_ConfigChannel+0x1b2>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	0e9b      	lsrs	r3, r3, #26
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	e018      	b.n	800575c <HAL_ADC_ConfigChannel+0x1e4>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005736:	fa93 f3a3 	rbit	r3, r3
 800573a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800573e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800574e:	2320      	movs	r3, #32
 8005750:	e004      	b.n	800575c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800575c:	429a      	cmp	r2, r3
 800575e:	d106      	bne.n	800576e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fdab 	bl	80042c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2101      	movs	r1, #1
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fd8f 	bl	8004298 <LL_ADC_GetOffsetChannel>
 800577a:	4603      	mov	r3, r0
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_ADC_ConfigChannel+0x222>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fd84 	bl	8004298 <LL_ADC_GetOffsetChannel>
 8005790:	4603      	mov	r3, r0
 8005792:	0e9b      	lsrs	r3, r3, #26
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	e01e      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x260>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fd79 	bl	8004298 <LL_ADC_GetOffsetChannel>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057b0:	fa93 f3a3 	rbit	r3, r3
 80057b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80057b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80057c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80057c8:	2320      	movs	r3, #32
 80057ca:	e004      	b.n	80057d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80057cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057d0:	fab3 f383 	clz	r3, r3
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x278>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0e9b      	lsrs	r3, r3, #26
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	e018      	b.n	8005822 <HAL_ADC_ConfigChannel+0x2aa>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800580c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005814:	2320      	movs	r3, #32
 8005816:	e004      	b.n	8005822 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800581c:	fab3 f383 	clz	r3, r3
 8005820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005822:	429a      	cmp	r2, r3
 8005824:	d106      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	2101      	movs	r1, #1
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fd48 	bl	80042c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2102      	movs	r1, #2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fd2c 	bl	8004298 <LL_ADC_GetOffsetChannel>
 8005840:	4603      	mov	r3, r0
 8005842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x2e8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2102      	movs	r1, #2
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fd21 	bl	8004298 <LL_ADC_GetOffsetChannel>
 8005856:	4603      	mov	r3, r0
 8005858:	0e9b      	lsrs	r3, r3, #26
 800585a:	f003 021f 	and.w	r2, r3, #31
 800585e:	e01e      	b.n	800589e <HAL_ADC_ConfigChannel+0x326>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2102      	movs	r1, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fd16 	bl	8004298 <LL_ADC_GetOffsetChannel>
 800586c:	4603      	mov	r3, r0
 800586e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005876:	fa93 f3a3 	rbit	r3, r3
 800587a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800587e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800588e:	2320      	movs	r3, #32
 8005890:	e004      	b.n	800589c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005896:	fab3 f383 	clz	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x33e>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	0e9b      	lsrs	r3, r3, #26
 80058b0:	f003 031f 	and.w	r3, r3, #31
 80058b4:	e016      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x36c>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80058c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80058ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80058d6:	2320      	movs	r3, #32
 80058d8:	e004      	b.n	80058e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80058da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d106      	bne.n	80058f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fce7 	bl	80042c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2103      	movs	r1, #3
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fccb 	bl	8004298 <LL_ADC_GetOffsetChannel>
 8005902:	4603      	mov	r3, r0
 8005904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x3aa>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2103      	movs	r1, #3
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fcc0 	bl	8004298 <LL_ADC_GetOffsetChannel>
 8005918:	4603      	mov	r3, r0
 800591a:	0e9b      	lsrs	r3, r3, #26
 800591c:	f003 021f 	and.w	r2, r3, #31
 8005920:	e017      	b.n	8005952 <HAL_ADC_ConfigChannel+0x3da>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2103      	movs	r1, #3
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fcb5 	bl	8004298 <LL_ADC_GetOffsetChannel>
 800592e:	4603      	mov	r3, r0
 8005930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	fa93 f3a3 	rbit	r3, r3
 8005938:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800593e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005944:	2320      	movs	r3, #32
 8005946:	e003      	b.n	8005950 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800594a:	fab3 f383 	clz	r3, r3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_ADC_ConfigChannel+0x3f2>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	e011      	b.n	800598e <HAL_ADC_ConfigChannel+0x416>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005972:	fa93 f3a3 	rbit	r3, r3
 8005976:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800597c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005982:	2320      	movs	r3, #32
 8005984:	e003      	b.n	800598e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005988:	fab3 f383 	clz	r3, r3
 800598c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800598e:	429a      	cmp	r2, r3
 8005990:	d106      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	2103      	movs	r1, #3
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fc92 	bl	80042c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fe29 	bl	80045fc <LL_ADC_IsEnabled>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 813d 	bne.w	8005c2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7fe fd62 	bl	8004488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4aa2      	ldr	r2, [pc, #648]	; (8005c54 <HAL_ADC_ConfigChannel+0x6dc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f040 812e 	bne.w	8005c2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <HAL_ADC_ConfigChannel+0x480>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0e9b      	lsrs	r3, r3, #26
 80059e6:	3301      	adds	r3, #1
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	bf94      	ite	ls
 80059f0:	2301      	movls	r3, #1
 80059f2:	2300      	movhi	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e019      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x4b4>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	fa93 f3a3 	rbit	r3, r3
 8005a04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005a10:	2320      	movs	r3, #32
 8005a12:	e003      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a16:	fab3 f383 	clz	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2b09      	cmp	r3, #9
 8005a24:	bf94      	ite	ls
 8005a26:	2301      	movls	r3, #1
 8005a28:	2300      	movhi	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d079      	beq.n	8005b24 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d107      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x4d4>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	0e9b      	lsrs	r3, r3, #26
 8005a42:	3301      	adds	r3, #1
 8005a44:	069b      	lsls	r3, r3, #26
 8005a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a4a:	e015      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x500>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	fa93 f3a3 	rbit	r3, r3
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005a64:	2320      	movs	r3, #32
 8005a66:	e003      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6a:	fab3 f383 	clz	r3, r3
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	3301      	adds	r3, #1
 8005a72:	069b      	lsls	r3, r3, #26
 8005a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0x520>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	0e9b      	lsrs	r3, r3, #26
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f303 	lsl.w	r3, r1, r3
 8005a96:	e017      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x550>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	e003      	b.n	8005abc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	fab3 f383 	clz	r3, r3
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	3301      	adds	r3, #1
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	ea42 0103 	orr.w	r1, r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x576>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	0e9b      	lsrs	r3, r3, #26
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f003 021f 	and.w	r2, r3, #31
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	051b      	lsls	r3, r3, #20
 8005aec:	e018      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x5a8>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005b06:	2320      	movs	r3, #32
 8005b08:	e003      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	f003 021f 	and.w	r2, r3, #31
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b20:	430b      	orrs	r3, r1
 8005b22:	e07e      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_ADC_ConfigChannel+0x5c8>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0e9b      	lsrs	r3, r3, #26
 8005b36:	3301      	adds	r3, #1
 8005b38:	069b      	lsls	r3, r3, #26
 8005b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b3e:	e015      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x5f4>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	fa93 f3a3 	rbit	r3, r3
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005b58:	2320      	movs	r3, #32
 8005b5a:	e003      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	3301      	adds	r3, #1
 8005b66:	069b      	lsls	r3, r3, #26
 8005b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x614>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0e9b      	lsrs	r3, r3, #26
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2101      	movs	r1, #1
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	e017      	b.n	8005bbc <HAL_ADC_ConfigChannel+0x644>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	fa93 f3a3 	rbit	r3, r3
 8005b98:	61fb      	str	r3, [r7, #28]
  return result;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	e003      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <HAL_ADC_ConfigChannel+0x670>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0e9b      	lsrs	r3, r3, #26
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f003 021f 	and.w	r2, r3, #31
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	3b1e      	subs	r3, #30
 8005be0:	051b      	lsls	r3, r3, #20
 8005be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005be6:	e01b      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x6a8>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	fa93 f3a3 	rbit	r3, r3
 8005bf4:	613b      	str	r3, [r7, #16]
  return result;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005c00:	2320      	movs	r3, #32
 8005c02:	e003      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	fab3 f383 	clz	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f003 021f 	and.w	r2, r3, #31
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	3b1e      	subs	r3, #30
 8005c1a:	051b      	lsls	r3, r3, #20
 8005c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c20:	430b      	orrs	r3, r1
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	6892      	ldr	r2, [r2, #8]
 8005c26:	4619      	mov	r1, r3
 8005c28:	f7fe fc02 	bl	8004430 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_ADC_ConfigChannel+0x6e0>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80af 	beq.w	8005d98 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c42:	d004      	beq.n	8005c4e <HAL_ADC_ConfigChannel+0x6d6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <HAL_ADC_ConfigChannel+0x6e4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10a      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x6ec>
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <HAL_ADC_ConfigChannel+0x6e8>)
 8005c50:	e009      	b.n	8005c66 <HAL_ADC_ConfigChannel+0x6ee>
 8005c52:	bf00      	nop
 8005c54:	407f0000 	.word	0x407f0000
 8005c58:	80080000 	.word	0x80080000
 8005c5c:	50000100 	.word	0x50000100
 8005c60:	50000300 	.word	0x50000300
 8005c64:	4b51      	ldr	r3, [pc, #324]	; (8005dac <HAL_ADC_ConfigChannel+0x834>)
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fae4 	bl	8004234 <LL_ADC_GetCommonPathInternalCh>
 8005c6c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a4e      	ldr	r2, [pc, #312]	; (8005db0 <HAL_ADC_ConfigChannel+0x838>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_ADC_ConfigChannel+0x70c>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4d      	ldr	r2, [pc, #308]	; (8005db4 <HAL_ADC_ConfigChannel+0x83c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d134      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d12e      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c98:	d17e      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ca2:	d004      	beq.n	8005cae <HAL_ADC_ConfigChannel+0x736>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a43      	ldr	r2, [pc, #268]	; (8005db8 <HAL_ADC_ConfigChannel+0x840>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d101      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x73a>
 8005cae:	4a43      	ldr	r2, [pc, #268]	; (8005dbc <HAL_ADC_ConfigChannel+0x844>)
 8005cb0:	e000      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x73c>
 8005cb2:	4a3e      	ldr	r2, [pc, #248]	; (8005dac <HAL_ADC_ConfigChannel+0x834>)
 8005cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7fe faa5 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cc4:	4b3e      	ldr	r3, [pc, #248]	; (8005dc0 <HAL_ADC_ConfigChannel+0x848>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	4a3e      	ldr	r2, [pc, #248]	; (8005dc4 <HAL_ADC_ConfigChannel+0x84c>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cde:	e002      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f9      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cec:	e054      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a35      	ldr	r2, [pc, #212]	; (8005dc8 <HAL_ADC_ConfigChannel+0x850>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d120      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x7c2>
 8005cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d11a      	bne.n	8005d3a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0c:	d144      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d16:	d004      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x7aa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <HAL_ADC_ConfigChannel+0x840>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d101      	bne.n	8005d26 <HAL_ADC_ConfigChannel+0x7ae>
 8005d22:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <HAL_ADC_ConfigChannel+0x844>)
 8005d24:	e000      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x7b0>
 8005d26:	4a21      	ldr	r2, [pc, #132]	; (8005dac <HAL_ADC_ConfigChannel+0x834>)
 8005d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fa6b 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d38:	e02e      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a23      	ldr	r2, [pc, #140]	; (8005dcc <HAL_ADC_ConfigChannel+0x854>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d129      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d123      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_ADC_ConfigChannel+0x840>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01e      	beq.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d62:	d004      	beq.n	8005d6e <HAL_ADC_ConfigChannel+0x7f6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <HAL_ADC_ConfigChannel+0x840>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_ADC_ConfigChannel+0x7fa>
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <HAL_ADC_ConfigChannel+0x844>)
 8005d70:	e000      	b.n	8005d74 <HAL_ADC_ConfigChannel+0x7fc>
 8005d72:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <HAL_ADC_ConfigChannel+0x834>)
 8005d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f7fe fa45 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
 8005d84:	e008      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	f043 0220 	orr.w	r2, r3, #32
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005da0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	37d8      	adds	r7, #216	; 0xd8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	50000700 	.word	0x50000700
 8005db0:	c3210000 	.word	0xc3210000
 8005db4:	90c00010 	.word	0x90c00010
 8005db8:	50000100 	.word	0x50000100
 8005dbc:	50000300 	.word	0x50000300
 8005dc0:	20000000 	.word	0x20000000
 8005dc4:	053e2d63 	.word	0x053e2d63
 8005dc8:	c7520000 	.word	0xc7520000
 8005dcc:	cb840000 	.word	0xcb840000

08005dd0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc56 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8005dec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fc77 	bl	80046e6 <LL_ADC_INJ_IsConversionOngoing>
 8005df8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8098 	beq.w	8005f38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02a      	beq.n	8005e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7f5b      	ldrb	r3, [r3, #29]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d126      	bne.n	8005e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	7f1b      	ldrb	r3, [r3, #28]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d122      	bne.n	8005e6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005e26:	2301      	movs	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005e2a:	e014      	b.n	8005e56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4a45      	ldr	r2, [pc, #276]	; (8005f44 <ADC_ConversionStop+0x174>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d90d      	bls.n	8005e50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f043 0210 	orr.w	r2, r3, #16
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	f043 0201 	orr.w	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e074      	b.n	8005f3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d1e3      	bne.n	8005e2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2240      	movs	r2, #64	; 0x40
 8005e6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d014      	beq.n	8005e9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fc0e 	bl	8004698 <LL_ADC_REG_IsConversionOngoing>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fbcb 	bl	8004622 <LL_ADC_IsDisableOngoing>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fbea 	bl	8004670 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d014      	beq.n	8005ecc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fc1d 	bl	80046e6 <LL_ADC_INJ_IsConversionOngoing>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fbb3 	bl	8004622 <LL_ADC_IsDisableOngoing>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fbf9 	bl	80046be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d005      	beq.n	8005ede <ADC_ConversionStop+0x10e>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d105      	bne.n	8005ee4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005ed8:	230c      	movs	r3, #12
 8005eda:	617b      	str	r3, [r7, #20]
        break;
 8005edc:	e005      	b.n	8005eea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005ede:	2308      	movs	r3, #8
 8005ee0:	617b      	str	r3, [r7, #20]
        break;
 8005ee2:	e002      	b.n	8005eea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	617b      	str	r3, [r7, #20]
        break;
 8005ee8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005eea:	f7fe f94f 	bl	800418c <HAL_GetTick>
 8005eee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ef0:	e01b      	b.n	8005f2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005ef2:	f7fe f94b 	bl	800418c <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d914      	bls.n	8005f2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e007      	b.n	8005f3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4013      	ands	r3, r2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1dc      	bne.n	8005ef2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	a33fffff 	.word	0xa33fffff

08005f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe fb51 	bl	80045fc <LL_ADC_IsEnabled>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d14d      	bne.n	8005ffc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <ADC_Enable+0xc0>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f72:	f043 0210 	orr.w	r2, r3, #16
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e039      	b.n	8005ffe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fb0c 	bl	80045ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005f94:	f7fe f8fa 	bl	800418c <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f9a:	e028      	b.n	8005fee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fb2b 	bl	80045fc <LL_ADC_IsEnabled>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fafb 	bl	80045ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fb6:	f7fe f8e9 	bl	800418c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d914      	bls.n	8005fee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d00d      	beq.n	8005fee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd6:	f043 0210 	orr.w	r2, r3, #16
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	f043 0201 	orr.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e007      	b.n	8005ffe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d1cf      	bne.n	8005f9c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	8000003f 	.word	0x8000003f

0800600c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fb02 	bl	8004622 <LL_ADC_IsDisableOngoing>
 800601e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe fae9 	bl	80045fc <LL_ADC_IsEnabled>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d047      	beq.n	80060c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d144      	bne.n	80060c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 030d 	and.w	r3, r3, #13
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10c      	bne.n	800605e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fac3 	bl	80045d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2203      	movs	r2, #3
 8006054:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006056:	f7fe f899 	bl	800418c <HAL_GetTick>
 800605a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800605c:	e029      	b.n	80060b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f043 0210 	orr.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e023      	b.n	80060c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800607a:	f7fe f887 	bl	800418c <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d914      	bls.n	80060b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609a:	f043 0210 	orr.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e007      	b.n	80060c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1dc      	bne.n	800607a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d14b      	bne.n	800617c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d021      	beq.n	8006142 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe f942 	bl	800438c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d032      	beq.n	8006174 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d12b      	bne.n	8006174 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11f      	bne.n	8006174 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	f043 0201 	orr.w	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006140:	e018      	b.n	8006174 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d111      	bne.n	8006174 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7fc fc63 	bl	8002a40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800617a:	e00e      	b.n	800619a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff f9eb 	bl	8005564 <HAL_ADC_ErrorCallback>
}
 800618e:	e004      	b.n	800619a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff f9c3 	bl	800553c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	f043 0204 	orr.w	r2, r3, #4
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff f9bd 	bl	8005564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <LL_ADC_IsEnabled>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <LL_ADC_IsEnabled+0x18>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <LL_ADC_IsEnabled+0x1a>
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_ADC_StartCalibration>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800622a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006234:	4313      	orrs	r3, r2
 8006236:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <LL_ADC_IsCalibrationOnGoing>:
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625e:	d101      	bne.n	8006264 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_ADC_REG_IsConversionOngoing>:
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d101      	bne.n	800628a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e04d      	b.n	8006350 <HAL_ADCEx_Calibration_Start+0xb8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fea5 	bl	800600c <ADC_Disable>
 80062c2:	4603      	mov	r3, r0
 80062c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d136      	bne.n	800633a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062d4:	f023 0302 	bic.w	r3, r3, #2
 80062d8:	f043 0202 	orr.w	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff ff96 	bl	8006218 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80062ec:	e014      	b.n	8006318 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <HAL_ADCEx_Calibration_Start+0xc0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d90d      	bls.n	8006318 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	f023 0312 	bic.w	r3, r3, #18
 8006304:	f043 0210 	orr.w	r2, r3, #16
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e01b      	b.n	8006350 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff94 	bl	800624a <LL_ADC_IsCalibrationOnGoing>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e2      	bne.n	80062ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	65da      	str	r2, [r3, #92]	; 0x5c
 8006338:	e005      	b.n	8006346 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	f043 0210 	orr.w	r2, r3, #16
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	0004de01 	.word	0x0004de01

0800635c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b0a1      	sub	sp, #132	; 0x84
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80063da:	2302      	movs	r3, #2
 80063dc:	e0cb      	b.n	8006576 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063e6:	2300      	movs	r3, #0
 80063e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80063ea:	2300      	movs	r3, #0
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063f6:	d102      	bne.n	80063fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80063f8:	4b61      	ldr	r3, [pc, #388]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80063fa:	60bb      	str	r3, [r7, #8]
 80063fc:	e001      	b.n	8006402 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0aa      	b.n	8006576 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff ff25 	bl	8006272 <LL_ADC_REG_IsConversionOngoing>
 8006428:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff ff1f 	bl	8006272 <LL_ADC_REG_IsConversionOngoing>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 808c 	bne.w	8006554 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 8088 	bne.w	8006554 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800644c:	d004      	beq.n	8006458 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d101      	bne.n	800645c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006458:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800645a:	e000      	b.n	800645e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800645c:	4b4a      	ldr	r3, [pc, #296]	; (8006588 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800645e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d041      	beq.n	80064ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800647a:	035b      	lsls	r3, r3, #13
 800647c:	430b      	orrs	r3, r1
 800647e:	431a      	orrs	r2, r3
 8006480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006482:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800648c:	d004      	beq.n	8006498 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3b      	ldr	r2, [pc, #236]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10f      	bne.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006498:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800649c:	f7ff fea9 	bl	80061f2 <LL_ADC_IsEnabled>
 80064a0:	4604      	mov	r4, r0
 80064a2:	4837      	ldr	r0, [pc, #220]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80064a4:	f7ff fea5 	bl	80061f2 <LL_ADC_IsEnabled>
 80064a8:	4603      	mov	r3, r0
 80064aa:	4323      	orrs	r3, r4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e008      	b.n	80064ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80064b8:	4834      	ldr	r0, [pc, #208]	; (800658c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80064ba:	f7ff fe9a 	bl	80061f2 <LL_ADC_IsEnabled>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04c      	beq.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80064ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80064d6:	f023 030f 	bic.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	6811      	ldr	r1, [r2, #0]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	6892      	ldr	r2, [r2, #8]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	431a      	orrs	r2, r3
 80064e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064ea:	e03d      	b.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80064ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006500:	d004      	beq.n	800650c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1e      	ldr	r2, [pc, #120]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10f      	bne.n	800652c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800650c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006510:	f7ff fe6f 	bl	80061f2 <LL_ADC_IsEnabled>
 8006514:	4604      	mov	r4, r0
 8006516:	481a      	ldr	r0, [pc, #104]	; (8006580 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006518:	f7ff fe6b 	bl	80061f2 <LL_ADC_IsEnabled>
 800651c:	4603      	mov	r3, r0
 800651e:	4323      	orrs	r3, r4
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e008      	b.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 800652c:	4817      	ldr	r0, [pc, #92]	; (800658c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800652e:	f7ff fe60 	bl	80061f2 <LL_ADC_IsEnabled>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d012      	beq.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800654a:	f023 030f 	bic.w	r3, r3, #15
 800654e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006550:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006552:	e009      	b.n	8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006566:	e000      	b.n	800656a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006572:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006576:	4618      	mov	r0, r3
 8006578:	3784      	adds	r7, #132	; 0x84
 800657a:	46bd      	mov	sp, r7
 800657c:	bd90      	pop	{r4, r7, pc}
 800657e:	bf00      	nop
 8006580:	50000100 	.word	0x50000100
 8006584:	50000300 	.word	0x50000300
 8006588:	50000700 	.word	0x50000700
 800658c:	50000400 	.word	0x50000400

08006590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <__NVIC_SetPriorityGrouping+0x44>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065c2:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <__NVIC_SetPriorityGrouping+0x44>)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	60d3      	str	r3, [r2, #12]
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <__NVIC_GetPriorityGrouping+0x18>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	f003 0307 	and.w	r3, r3, #7
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	e000ed00 	.word	0xe000ed00

080065f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006602:	2b00      	cmp	r3, #0
 8006604:	db0b      	blt.n	800661e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	f003 021f 	and.w	r2, r3, #31
 800660c:	4907      	ldr	r1, [pc, #28]	; (800662c <__NVIC_EnableIRQ+0x38>)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2001      	movs	r0, #1
 8006616:	fa00 f202 	lsl.w	r2, r0, r2
 800661a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	e000e100 	.word	0xe000e100

08006630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	6039      	str	r1, [r7, #0]
 800663a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800663c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006640:	2b00      	cmp	r3, #0
 8006642:	db0a      	blt.n	800665a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	490c      	ldr	r1, [pc, #48]	; (800667c <__NVIC_SetPriority+0x4c>)
 800664a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664e:	0112      	lsls	r2, r2, #4
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	440b      	add	r3, r1
 8006654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006658:	e00a      	b.n	8006670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	4908      	ldr	r1, [pc, #32]	; (8006680 <__NVIC_SetPriority+0x50>)
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	3b04      	subs	r3, #4
 8006668:	0112      	lsls	r2, r2, #4
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	440b      	add	r3, r1
 800666e:	761a      	strb	r2, [r3, #24]
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	e000e100 	.word	0xe000e100
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006684:	b480      	push	{r7}
 8006686:	b089      	sub	sp, #36	; 0x24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f1c3 0307 	rsb	r3, r3, #7
 800669e:	2b04      	cmp	r3, #4
 80066a0:	bf28      	it	cs
 80066a2:	2304      	movcs	r3, #4
 80066a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	3304      	adds	r3, #4
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	d902      	bls.n	80066b4 <NVIC_EncodePriority+0x30>
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3b03      	subs	r3, #3
 80066b2:	e000      	b.n	80066b6 <NVIC_EncodePriority+0x32>
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	fa02 f303 	lsl.w	r3, r2, r3
 80066c2:	43da      	mvns	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	401a      	ands	r2, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066cc:	f04f 31ff 	mov.w	r1, #4294967295
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	43d9      	mvns	r1, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066dc:	4313      	orrs	r3, r2
         );
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3724      	adds	r7, #36	; 0x24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066fc:	d301      	bcc.n	8006702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066fe:	2301      	movs	r3, #1
 8006700:	e00f      	b.n	8006722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006702:	4a0a      	ldr	r2, [pc, #40]	; (800672c <SysTick_Config+0x40>)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3b01      	subs	r3, #1
 8006708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800670a:	210f      	movs	r1, #15
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	f7ff ff8e 	bl	8006630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <SysTick_Config+0x40>)
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <SysTick_Config+0x40>)
 800671c:	2207      	movs	r2, #7
 800671e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	e000e010 	.word	0xe000e010

08006730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff ff29 	bl	8006590 <__NVIC_SetPriorityGrouping>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af00      	add	r7, sp, #0
 800674c:	4603      	mov	r3, r0
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006754:	f7ff ff40 	bl	80065d8 <__NVIC_GetPriorityGrouping>
 8006758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7ff ff90 	bl	8006684 <NVIC_EncodePriority>
 8006764:	4602      	mov	r2, r0
 8006766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676a:	4611      	mov	r1, r2
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff ff5f 	bl	8006630 <__NVIC_SetPriority>
}
 8006772:	bf00      	nop
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	4603      	mov	r3, r0
 8006782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff33 	bl	80065f4 <__NVIC_EnableIRQ>
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff ffa4 	bl	80066ec <SysTick_Config>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e08d      	b.n	80068de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_DMA_Init+0x138>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d80f      	bhi.n	80067ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b45      	ldr	r3, [pc, #276]	; (80068ec <HAL_DMA_Init+0x13c>)
 80067d6:	4413      	add	r3, r2
 80067d8:	4a45      	ldr	r2, [pc, #276]	; (80068f0 <HAL_DMA_Init+0x140>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	091b      	lsrs	r3, r3, #4
 80067e0:	009a      	lsls	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a42      	ldr	r2, [pc, #264]	; (80068f4 <HAL_DMA_Init+0x144>)
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40
 80067ec:	e00e      	b.n	800680c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	4b40      	ldr	r3, [pc, #256]	; (80068f8 <HAL_DMA_Init+0x148>)
 80067f6:	4413      	add	r3, r2
 80067f8:	4a3d      	ldr	r2, [pc, #244]	; (80068f0 <HAL_DMA_Init+0x140>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	009a      	lsls	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <HAL_DMA_Init+0x14c>)
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800683c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa10 	bl	8006c84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800686c:	d102      	bne.n	8006874 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006888:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d010      	beq.n	80068b4 <HAL_DMA_Init+0x104>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d80c      	bhi.n	80068b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa30 	bl	8006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	e008      	b.n	80068c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40020407 	.word	0x40020407
 80068ec:	bffdfff8 	.word	0xbffdfff8
 80068f0:	cccccccd 	.word	0xcccccccd
 80068f4:	40020000 	.word	0x40020000
 80068f8:	bffdfbf8 	.word	0xbffdfbf8
 80068fc:	40020400 	.word	0x40020400

08006900 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_DMA_Start_IT+0x20>
 800691c:	2302      	movs	r3, #2
 800691e:	e066      	b.n	80069ee <HAL_DMA_Start_IT+0xee>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d155      	bne.n	80069e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f954 	bl	8006c06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 020e 	orr.w	r2, r2, #14
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e00f      	b.n	8006998 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0204 	bic.w	r2, r2, #4
 8006986:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 020a 	orr.w	r2, r2, #10
 8006996:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e005      	b.n	80069ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
 80069ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d005      	beq.n	8006a1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2204      	movs	r2, #4
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e037      	b.n	8006a8a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 020e 	bic.w	r2, r2, #14
 8006a28:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a38:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f003 021f 	and.w	r2, r3, #31
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2101      	movs	r1, #1
 8006a58:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a66:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a7e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a88:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2204      	movs	r2, #4
 8006aca:	409a      	lsls	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d026      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x7a>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d021      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0204 	bic.w	r2, r2, #4
 8006afa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	f003 021f 	and.w	r2, r3, #31
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2104      	movs	r1, #4
 8006b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d071      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b20:	e06c      	b.n	8006bfc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d02e      	beq.n	8006b94 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d029      	beq.n	8006b94 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 020a 	bic.w	r2, r2, #10
 8006b5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	f003 021f 	and.w	r2, r3, #31
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	2102      	movs	r1, #2
 8006b74:	fa01 f202 	lsl.w	r2, r1, r2
 8006b78:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d038      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b92:	e033      	b.n	8006bfc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d02a      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d025      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 020e 	bic.w	r2, r2, #14
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f003 021f 	and.w	r2, r3, #31
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2101      	movs	r1, #1
 8006bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
}
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
 8006c12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	f003 021f 	and.w	r2, r3, #31
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d108      	bne.n	8006c66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c64:	e007      	b.n	8006c76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	60da      	str	r2, [r3, #12]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b16      	ldr	r3, [pc, #88]	; (8006cec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d802      	bhi.n	8006c9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e001      	b.n	8006ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ca0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	3b08      	subs	r3, #8
 8006cae:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbc:	089b      	lsrs	r3, r3, #2
 8006cbe:	009a      	lsls	r2, r3, #2
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006cce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40020407 	.word	0x40020407
 8006cf0:	40020800 	.word	0x40020800
 8006cf4:	40020820 	.word	0x40020820
 8006cf8:	cccccccd 	.word	0xcccccccd
 8006cfc:	40020880 	.word	0x40020880

08006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d22:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	1000823f 	.word	0x1000823f
 8006d44:	40020940 	.word	0x40020940

08006d48 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006d5a:	4b24      	ldr	r3, [pc, #144]	; (8006dec <HAL_FLASH_Program+0xa4>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_FLASH_Program+0x1e>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e03e      	b.n	8006de4 <HAL_FLASH_Program+0x9c>
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <HAL_FLASH_Program+0xa4>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d70:	f000 f87c 	bl	8006e6c <FLASH_WaitForLastOperation>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d12e      	bne.n	8006ddc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <HAL_FLASH_Program+0xa4>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8e:	68b8      	ldr	r0, [r7, #8]
 8006d90:	f000 f8c0 	bl	8006f14 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006d94:	2301      	movs	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	e010      	b.n	8006dbc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d002      	beq.n	8006da6 <HAL_FLASH_Program+0x5e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d10a      	bne.n	8006dbc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	68b8      	ldr	r0, [r7, #8]
 8006dac:	f000 f8d8 	bl	8006f60 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d102      	bne.n	8006dbc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006db6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dba:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dc0:	f000 f854 	bl	8006e6c <FLASH_WaitForLastOperation>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <HAL_FLASH_Program+0xa8>)
 8006dd0:	695a      	ldr	r2, [r3, #20]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	4906      	ldr	r1, [pc, #24]	; (8006df0 <HAL_FLASH_Program+0xa8>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ddc:	4b03      	ldr	r3, [pc, #12]	; (8006dec <HAL_FLASH_Program+0xa4>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	2000000c 	.word	0x2000000c
 8006df0:	40022000 	.word	0x40022000

08006df4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_FLASH_Unlock+0x38>)
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	da0b      	bge.n	8006e1e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_FLASH_Unlock+0x38>)
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <HAL_FLASH_Unlock+0x3c>)
 8006e0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <HAL_FLASH_Unlock+0x38>)
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <HAL_FLASH_Unlock+0x40>)
 8006e10:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_FLASH_Unlock+0x38>)
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da01      	bge.n	8006e1e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40022000 	.word	0x40022000
 8006e30:	45670123 	.word	0x45670123
 8006e34:	cdef89ab 	.word	0xcdef89ab

08006e38 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_FLASH_Lock+0x30>)
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <HAL_FLASH_Lock+0x30>)
 8006e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <HAL_FLASH_Lock+0x30>)
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da01      	bge.n	8006e5a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40022000 	.word	0x40022000

08006e6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006e74:	f7fd f98a 	bl	800418c <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006e7a:	e009      	b.n	8006e90 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006e7c:	f7fd f986 	bl	800418c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d201      	bcs.n	8006e90 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e038      	b.n	8006f02 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006e90:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d0ee      	beq.n	8006e7c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01e      	beq.n	8006eee <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8006eb0:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <FLASH_WaitForLastOperation+0xa4>)
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <FLASH_WaitForLastOperation+0xa4>)
 8006eba:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <FLASH_WaitForLastOperation+0x6a>
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ed0:	490e      	ldr	r1, [pc, #56]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	618b      	str	r3, [r1, #24]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <FLASH_WaitForLastOperation+0x7e>
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006ee8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e009      	b.n	8006f02 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d102      	bne.n	8006f00 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006efa:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <FLASH_WaitForLastOperation+0xa0>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40022000 	.word	0x40022000
 8006f10:	2000000c 	.word	0x2000000c

08006f14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <FLASH_Program_DoubleWord+0x48>)
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <FLASH_Program_DoubleWord+0x48>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006f32:	f3bf 8f6f 	isb	sy
}
 8006f36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	000a      	movs	r2, r1
 8006f46:	2300      	movs	r3, #0
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	3104      	adds	r1, #4
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40022000 	.word	0x40022000

08006f60 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b089      	sub	sp, #36	; 0x24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <FLASH_Program_Fast+0x68>)
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <FLASH_Program_Fast+0x68>)
 8006f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f82:	f3ef 8310 	mrs	r3, PRIMASK
 8006f86:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f88:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f8c:	b672      	cpsid	i
}
 8006f8e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	617b      	str	r3, [r7, #20]
    row_index--;
 8006fa4:	7ffb      	ldrb	r3, [r7, #31]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1ef      	bne.n	8006f90 <FLASH_Program_Fast+0x30>
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f383 8810 	msr	PRIMASK, r3
}
 8006fba:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006fbc:	bf00      	nop
 8006fbe:	3724      	adds	r7, #36	; 0x24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40022000 	.word	0x40022000

08006fcc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006fd6:	4b48      	ldr	r3, [pc, #288]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_FLASHEx_Erase+0x16>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e085      	b.n	80070ee <HAL_FLASHEx_Erase+0x122>
 8006fe2:	4b45      	ldr	r3, [pc, #276]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fec:	f7ff ff3e 	bl	8006e6c <FLASH_WaitForLastOperation>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d175      	bne.n	80070e6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ffa:	4b3f      	ldr	r3, [pc, #252]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007000:	4b3e      	ldr	r3, [pc, #248]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007008:	2b00      	cmp	r3, #0
 800700a:	d013      	beq.n	8007034 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800700c:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007018:	4b38      	ldr	r3, [pc, #224]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a37      	ldr	r2, [pc, #220]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 800701e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007022:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007024:	4b34      	ldr	r3, [pc, #208]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 8007026:	2203      	movs	r2, #3
 8007028:	771a      	strb	r2, [r3, #28]
 800702a:	e016      	b.n	800705a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 800702e:	2201      	movs	r2, #1
 8007030:	771a      	strb	r2, [r3, #28]
 8007032:	e012      	b.n	800705a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007034:	4b31      	ldr	r3, [pc, #196]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007040:	4b2e      	ldr	r3, [pc, #184]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2d      	ldr	r2, [pc, #180]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 8007046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800704a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800704c:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 800704e:	2202      	movs	r2, #2
 8007050:	771a      	strb	r2, [r3, #28]
 8007052:	e002      	b.n	800705a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 8007056:	2200      	movs	r2, #0
 8007058:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d111      	bne.n	8007086 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f84a 	bl	8007100 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800706c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007070:	f7ff fefc 	bl	8006e6c <FLASH_WaitForLastOperation>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007078:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 800707e:	f023 0304 	bic.w	r3, r3, #4
 8007082:	6153      	str	r3, [r2, #20]
 8007084:	e02d      	b.n	80070e2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	60bb      	str	r3, [r7, #8]
 8007094:	e01d      	b.n	80070d2 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4619      	mov	r1, r3
 800709c:	68b8      	ldr	r0, [r7, #8]
 800709e:	f000 f84d 	bl	800713c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070a6:	f7ff fee1 	bl	8006e6c <FLASH_WaitForLastOperation>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80070ae:	4b13      	ldr	r3, [pc, #76]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4a12      	ldr	r2, [pc, #72]	; (80070fc <HAL_FLASHEx_Erase+0x130>)
 80070b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070b8:	f023 0302 	bic.w	r3, r3, #2
 80070bc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	601a      	str	r2, [r3, #0]
          break;
 80070ca:	e00a      	b.n	80070e2 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3d9      	bcc.n	8007096 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80070e2:	f000 f84f 	bl	8007184 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80070e6:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <HAL_FLASHEx_Erase+0x12c>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]

  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c
 80070fc:	40022000 	.word	0x40022000

08007100 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <FLASH_MassErase+0x38>)
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <FLASH_MassErase+0x38>)
 8007118:	f043 0304 	orr.w	r3, r3, #4
 800711c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <FLASH_MassErase+0x38>)
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4a05      	ldr	r2, [pc, #20]	; (8007138 <FLASH_MassErase+0x38>)
 8007124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007128:	6153      	str	r3, [r2, #20]
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40022000 	.word	0x40022000

0800713c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <FLASH_PageErase+0x44>)
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007156:	490a      	ldr	r1, [pc, #40]	; (8007180 <FLASH_PageErase+0x44>)
 8007158:	4313      	orrs	r3, r2
 800715a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800715c:	4b08      	ldr	r3, [pc, #32]	; (8007180 <FLASH_PageErase+0x44>)
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	4a07      	ldr	r2, [pc, #28]	; (8007180 <FLASH_PageErase+0x44>)
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <FLASH_PageErase+0x44>)
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <FLASH_PageErase+0x44>)
 800716e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007172:	6153      	str	r3, [r2, #20]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40022000 	.word	0x40022000

08007184 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800718a:	4b21      	ldr	r3, [pc, #132]	; (8007210 <FLASH_FlushCaches+0x8c>)
 800718c:	7f1b      	ldrb	r3, [r3, #28]
 800718e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d002      	beq.n	800719c <FLASH_FlushCaches+0x18>
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d117      	bne.n	80071cc <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <FLASH_FlushCaches+0x90>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1c      	ldr	r2, [pc, #112]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	4b17      	ldr	r3, [pc, #92]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a16      	ldr	r2, [pc, #88]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071c0:	4b14      	ldr	r3, [pc, #80]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a13      	ldr	r2, [pc, #76]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071ca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d002      	beq.n	80071d8 <FLASH_FlushCaches+0x54>
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d111      	bne.n	80071fc <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0d      	ldr	r2, [pc, #52]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a07      	ldr	r2, [pc, #28]	; (8007214 <FLASH_FlushCaches+0x90>)
 80071f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071fa:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <FLASH_FlushCaches+0x8c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	771a      	strb	r2, [r3, #28]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	2000000c 	.word	0x2000000c
 8007214:	40022000 	.word	0x40022000

08007218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007226:	e15a      	b.n	80074de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	2101      	movs	r1, #1
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	fa01 f303 	lsl.w	r3, r1, r3
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 814c 	beq.w	80074d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d005      	beq.n	8007258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007254:	2b02      	cmp	r3, #2
 8007256:	d130      	bne.n	80072ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	2203      	movs	r2, #3
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	43db      	mvns	r3, r3
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4013      	ands	r3, r2
 800726e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800728e:	2201      	movs	r2, #1
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4013      	ands	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	091b      	lsrs	r3, r3, #4
 80072a4:	f003 0201 	and.w	r2, r3, #1
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d017      	beq.n	80072f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	2203      	movs	r2, #3
 80072d2:	fa02 f303 	lsl.w	r3, r2, r3
 80072d6:	43db      	mvns	r3, r3
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4013      	ands	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d123      	bne.n	800734a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	08da      	lsrs	r2, r3, #3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3208      	adds	r2, #8
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	220f      	movs	r2, #15
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43db      	mvns	r3, r3
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4013      	ands	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	fa02 f303 	lsl.w	r3, r2, r3
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	08da      	lsrs	r2, r3, #3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3208      	adds	r2, #8
 8007344:	6939      	ldr	r1, [r7, #16]
 8007346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	2203      	movs	r2, #3
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4013      	ands	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f003 0203 	and.w	r2, r3, #3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	fa02 f303 	lsl.w	r3, r2, r3
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a6 	beq.w	80074d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800738c:	4b5b      	ldr	r3, [pc, #364]	; (80074fc <HAL_GPIO_Init+0x2e4>)
 800738e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007390:	4a5a      	ldr	r2, [pc, #360]	; (80074fc <HAL_GPIO_Init+0x2e4>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	6613      	str	r3, [r2, #96]	; 0x60
 8007398:	4b58      	ldr	r3, [pc, #352]	; (80074fc <HAL_GPIO_Init+0x2e4>)
 800739a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073a4:	4a56      	ldr	r2, [pc, #344]	; (8007500 <HAL_GPIO_Init+0x2e8>)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	3302      	adds	r3, #2
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	220f      	movs	r2, #15
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4013      	ands	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073ce:	d01f      	beq.n	8007410 <HAL_GPIO_Init+0x1f8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a4c      	ldr	r2, [pc, #304]	; (8007504 <HAL_GPIO_Init+0x2ec>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d019      	beq.n	800740c <HAL_GPIO_Init+0x1f4>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a4b      	ldr	r2, [pc, #300]	; (8007508 <HAL_GPIO_Init+0x2f0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <HAL_GPIO_Init+0x1f0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a4a      	ldr	r2, [pc, #296]	; (800750c <HAL_GPIO_Init+0x2f4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00d      	beq.n	8007404 <HAL_GPIO_Init+0x1ec>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a49      	ldr	r2, [pc, #292]	; (8007510 <HAL_GPIO_Init+0x2f8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <HAL_GPIO_Init+0x1e8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a48      	ldr	r2, [pc, #288]	; (8007514 <HAL_GPIO_Init+0x2fc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d101      	bne.n	80073fc <HAL_GPIO_Init+0x1e4>
 80073f8:	2305      	movs	r3, #5
 80073fa:	e00a      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 80073fc:	2306      	movs	r3, #6
 80073fe:	e008      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 8007400:	2304      	movs	r3, #4
 8007402:	e006      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 8007404:	2303      	movs	r3, #3
 8007406:	e004      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 8007408:	2302      	movs	r3, #2
 800740a:	e002      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <HAL_GPIO_Init+0x1fa>
 8007410:	2300      	movs	r3, #0
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	f002 0203 	and.w	r2, r2, #3
 8007418:	0092      	lsls	r2, r2, #2
 800741a:	4093      	lsls	r3, r2
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007422:	4937      	ldr	r1, [pc, #220]	; (8007500 <HAL_GPIO_Init+0x2e8>)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	3302      	adds	r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007430:	4b39      	ldr	r3, [pc, #228]	; (8007518 <HAL_GPIO_Init+0x300>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	43db      	mvns	r3, r3
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4013      	ands	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007454:	4a30      	ldr	r2, [pc, #192]	; (8007518 <HAL_GPIO_Init+0x300>)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800745a:	4b2f      	ldr	r3, [pc, #188]	; (8007518 <HAL_GPIO_Init+0x300>)
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	43db      	mvns	r3, r3
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4013      	ands	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800747e:	4a26      	ldr	r2, [pc, #152]	; (8007518 <HAL_GPIO_Init+0x300>)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_GPIO_Init+0x300>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	43db      	mvns	r3, r3
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4013      	ands	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074a8:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_GPIO_Init+0x300>)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <HAL_GPIO_Init+0x300>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	43db      	mvns	r3, r3
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4013      	ands	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <HAL_GPIO_Init+0x300>)
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f ae9d 	bne.w	8007228 <HAL_GPIO_Init+0x10>
  }
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	40021000 	.word	0x40021000
 8007500:	40010000 	.word	0x40010000
 8007504:	48000400 	.word	0x48000400
 8007508:	48000800 	.word	0x48000800
 800750c:	48000c00 	.word	0x48000c00
 8007510:	48001000 	.word	0x48001000
 8007514:	48001400 	.word	0x48001400
 8007518:	40010400 	.word	0x40010400

0800751c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	807b      	strh	r3, [r7, #2]
 8007528:	4613      	mov	r3, r2
 800752a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800752c:	787b      	ldrb	r3, [r7, #1]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007532:	887a      	ldrh	r2, [r7, #2]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007538:	e002      	b.n	8007540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800753a:	887a      	ldrh	r2, [r7, #2]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d141      	bne.n	80075de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800755a:	4b4b      	ldr	r3, [pc, #300]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007566:	d131      	bne.n	80075cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007568:	4b47      	ldr	r3, [pc, #284]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800756a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800756e:	4a46      	ldr	r2, [pc, #280]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007578:	4b43      	ldr	r3, [pc, #268]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007580:	4a41      	ldr	r2, [pc, #260]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007588:	4b40      	ldr	r3, [pc, #256]	; (800768c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2232      	movs	r2, #50	; 0x32
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	4a3f      	ldr	r2, [pc, #252]	; (8007690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	0c9b      	lsrs	r3, r3, #18
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800759e:	e002      	b.n	80075a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075a6:	4b38      	ldr	r3, [pc, #224]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b2:	d102      	bne.n	80075ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f2      	bne.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075ba:	4b33      	ldr	r3, [pc, #204]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c6:	d158      	bne.n	800767a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e057      	b.n	800767c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075cc:	4b2e      	ldr	r3, [pc, #184]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d2:	4a2d      	ldr	r2, [pc, #180]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80075dc:	e04d      	b.n	800767a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e4:	d141      	bne.n	800766a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075e6:	4b28      	ldr	r3, [pc, #160]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f2:	d131      	bne.n	8007658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075f4:	4b24      	ldr	r3, [pc, #144]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fa:	4a23      	ldr	r2, [pc, #140]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007604:	4b20      	ldr	r3, [pc, #128]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800760e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007614:	4b1d      	ldr	r3, [pc, #116]	; (800768c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2232      	movs	r2, #50	; 0x32
 800761a:	fb02 f303 	mul.w	r3, r2, r3
 800761e:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007620:	fba2 2303 	umull	r2, r3, r2, r3
 8007624:	0c9b      	lsrs	r3, r3, #18
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800762a:	e002      	b.n	8007632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3b01      	subs	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007632:	4b15      	ldr	r3, [pc, #84]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800763a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800763e:	d102      	bne.n	8007646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f2      	bne.n	800762c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007652:	d112      	bne.n	800767a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e011      	b.n	800767c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007658:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800765a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765e:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007668:	e007      	b.n	800767a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007672:	4a05      	ldr	r2, [pc, #20]	; (8007688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40007000 	.word	0x40007000
 800768c:	20000000 	.word	0x20000000
 8007690:	431bde83 	.word	0x431bde83

08007694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	4a04      	ldr	r2, [pc, #16]	; (80076b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800769e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076a2:	6093      	str	r3, [r2, #8]
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40007000 	.word	0x40007000

080076b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e306      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d075      	beq.n	80077be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d2:	4b97      	ldr	r3, [pc, #604]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 030c 	and.w	r3, r3, #12
 80076da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076dc:	4b94      	ldr	r3, [pc, #592]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	d102      	bne.n	80076f2 <HAL_RCC_OscConfig+0x3e>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d002      	beq.n	80076f8 <HAL_RCC_OscConfig+0x44>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d10b      	bne.n	8007710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f8:	4b8d      	ldr	r3, [pc, #564]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d05b      	beq.n	80077bc <HAL_RCC_OscConfig+0x108>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d157      	bne.n	80077bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e2e1      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007718:	d106      	bne.n	8007728 <HAL_RCC_OscConfig+0x74>
 800771a:	4b85      	ldr	r3, [pc, #532]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a84      	ldr	r2, [pc, #528]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e01d      	b.n	8007764 <HAL_RCC_OscConfig+0xb0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007730:	d10c      	bne.n	800774c <HAL_RCC_OscConfig+0x98>
 8007732:	4b7f      	ldr	r3, [pc, #508]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a7e      	ldr	r2, [pc, #504]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	4b7c      	ldr	r3, [pc, #496]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a7b      	ldr	r2, [pc, #492]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e00b      	b.n	8007764 <HAL_RCC_OscConfig+0xb0>
 800774c:	4b78      	ldr	r3, [pc, #480]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a77      	ldr	r2, [pc, #476]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	4b75      	ldr	r3, [pc, #468]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a74      	ldr	r2, [pc, #464]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800775e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d013      	beq.n	8007794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776c:	f7fc fd0e 	bl	800418c <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007774:	f7fc fd0a 	bl	800418c <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b64      	cmp	r3, #100	; 0x64
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e2a6      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007786:	4b6a      	ldr	r3, [pc, #424]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0xc0>
 8007792:	e014      	b.n	80077be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007794:	f7fc fcfa 	bl	800418c <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800779c:	f7fc fcf6 	bl	800418c <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b64      	cmp	r3, #100	; 0x64
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e292      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077ae:	4b60      	ldr	r3, [pc, #384]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f0      	bne.n	800779c <HAL_RCC_OscConfig+0xe8>
 80077ba:	e000      	b.n	80077be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d075      	beq.n	80078b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ca:	4b59      	ldr	r3, [pc, #356]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 030c 	and.w	r3, r3, #12
 80077d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077d4:	4b56      	ldr	r3, [pc, #344]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	d102      	bne.n	80077ea <HAL_RCC_OscConfig+0x136>
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d002      	beq.n	80077f0 <HAL_RCC_OscConfig+0x13c>
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d11f      	bne.n	8007830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f0:	4b4f      	ldr	r3, [pc, #316]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_RCC_OscConfig+0x154>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e265      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007808:	4b49      	ldr	r3, [pc, #292]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	061b      	lsls	r3, r3, #24
 8007816:	4946      	ldr	r1, [pc, #280]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007818:	4313      	orrs	r3, r2
 800781a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800781c:	4b45      	ldr	r3, [pc, #276]	; (8007934 <HAL_RCC_OscConfig+0x280>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fc fc67 	bl	80040f4 <HAL_InitTick>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d043      	beq.n	80078b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e251      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d023      	beq.n	8007880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007838:	4b3d      	ldr	r3, [pc, #244]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a3c      	ldr	r2, [pc, #240]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800783e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fc fca2 	bl	800418c <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800784c:	f7fc fc9e 	bl	800418c <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e23a      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800785e:	4b34      	ldr	r3, [pc, #208]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	061b      	lsls	r3, r3, #24
 8007878:	492d      	ldr	r1, [pc, #180]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	604b      	str	r3, [r1, #4]
 800787e:	e01a      	b.n	80078b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007880:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800788a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788c:	f7fc fc7e 	bl	800418c <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007894:	f7fc fc7a 	bl	800418c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e216      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078a6:	4b22      	ldr	r3, [pc, #136]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f0      	bne.n	8007894 <HAL_RCC_OscConfig+0x1e0>
 80078b2:	e000      	b.n	80078b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d041      	beq.n	8007946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01c      	beq.n	8007904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ca:	4b19      	ldr	r3, [pc, #100]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80078cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d0:	4a17      	ldr	r2, [pc, #92]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078da:	f7fc fc57 	bl	800418c <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e2:	f7fc fc53 	bl	800418c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1ef      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 80078f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0ef      	beq.n	80078e2 <HAL_RCC_OscConfig+0x22e>
 8007902:	e020      	b.n	8007946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	4a09      	ldr	r2, [pc, #36]	; (8007930 <HAL_RCC_OscConfig+0x27c>)
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007914:	f7fc fc3a 	bl	800418c <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800791a:	e00d      	b.n	8007938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800791c:	f7fc fc36 	bl	800418c <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d906      	bls.n	8007938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e1d2      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
 800792e:	bf00      	nop
 8007930:	40021000 	.word	0x40021000
 8007934:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007938:	4b8c      	ldr	r3, [pc, #560]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 800793a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ea      	bne.n	800791c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80a6 	beq.w	8007aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007954:	2300      	movs	r3, #0
 8007956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007958:	4b84      	ldr	r3, [pc, #528]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_RCC_OscConfig+0x2b4>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <HAL_RCC_OscConfig+0x2b6>
 8007968:	2300      	movs	r3, #0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800796e:	4b7f      	ldr	r3, [pc, #508]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007972:	4a7e      	ldr	r2, [pc, #504]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	6593      	str	r3, [r2, #88]	; 0x58
 800797a:	4b7c      	ldr	r3, [pc, #496]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007986:	2301      	movs	r3, #1
 8007988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800798a:	4b79      	ldr	r3, [pc, #484]	; (8007b70 <HAL_RCC_OscConfig+0x4bc>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d118      	bne.n	80079c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007996:	4b76      	ldr	r3, [pc, #472]	; (8007b70 <HAL_RCC_OscConfig+0x4bc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a75      	ldr	r2, [pc, #468]	; (8007b70 <HAL_RCC_OscConfig+0x4bc>)
 800799c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a2:	f7fc fbf3 	bl	800418c <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079aa:	f7fc fbef 	bl	800418c <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e18b      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079bc:	4b6c      	ldr	r3, [pc, #432]	; (8007b70 <HAL_RCC_OscConfig+0x4bc>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d108      	bne.n	80079e2 <HAL_RCC_OscConfig+0x32e>
 80079d0:	4b66      	ldr	r3, [pc, #408]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 80079d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d6:	4a65      	ldr	r2, [pc, #404]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079e0:	e024      	b.n	8007a2c <HAL_RCC_OscConfig+0x378>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d110      	bne.n	8007a0c <HAL_RCC_OscConfig+0x358>
 80079ea:	4b60      	ldr	r3, [pc, #384]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f0:	4a5e      	ldr	r2, [pc, #376]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 80079f2:	f043 0304 	orr.w	r3, r3, #4
 80079f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079fa:	4b5c      	ldr	r3, [pc, #368]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	4a5a      	ldr	r2, [pc, #360]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a0a:	e00f      	b.n	8007a2c <HAL_RCC_OscConfig+0x378>
 8007a0c:	4b57      	ldr	r3, [pc, #348]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a12:	4a56      	ldr	r2, [pc, #344]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a1c:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	4a52      	ldr	r2, [pc, #328]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a34:	f7fc fbaa 	bl	800418c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fc fba6 	bl	800418c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e140      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a52:	4b46      	ldr	r3, [pc, #280]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0ed      	beq.n	8007a3c <HAL_RCC_OscConfig+0x388>
 8007a60:	e015      	b.n	8007a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a62:	f7fc fb93 	bl	800418c <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a68:	e00a      	b.n	8007a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a6a:	f7fc fb8f 	bl	800418c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e129      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a80:	4b3a      	ldr	r3, [pc, #232]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1ed      	bne.n	8007a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d105      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a94:	4b35      	ldr	r3, [pc, #212]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	4a34      	ldr	r2, [pc, #208]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03c      	beq.n	8007b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01c      	beq.n	8007aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ab4:	4b2d      	ldr	r3, [pc, #180]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007aba:	4a2c      	ldr	r2, [pc, #176]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fc fb62 	bl	800418c <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007acc:	f7fc fb5e 	bl	800418c <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e0fa      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ade:	4b23      	ldr	r3, [pc, #140]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0ef      	beq.n	8007acc <HAL_RCC_OscConfig+0x418>
 8007aec:	e01b      	b.n	8007b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aee:	4b1f      	ldr	r3, [pc, #124]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007af4:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afe:	f7fc fb45 	bl	800418c <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b06:	f7fc fb41 	bl	800418c <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e0dd      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b18:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1ef      	bne.n	8007b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80d1 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	2b0c      	cmp	r3, #12
 8007b3a:	f000 808b 	beq.w	8007c54 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d15e      	bne.n	8007c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <HAL_RCC_OscConfig+0x4b8>)
 8007b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7fc fb1b 	bl	800418c <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b58:	e00c      	b.n	8007b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b5a:	f7fc fb17 	bl	800418c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d905      	bls.n	8007b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e0b3      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b74:	4b59      	ldr	r3, [pc, #356]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1ec      	bne.n	8007b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b80:	4b56      	ldr	r3, [pc, #344]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	4b56      	ldr	r3, [pc, #344]	; (8007ce0 <HAL_RCC_OscConfig+0x62c>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6a11      	ldr	r1, [r2, #32]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b90:	3a01      	subs	r2, #1
 8007b92:	0112      	lsls	r2, r2, #4
 8007b94:	4311      	orrs	r1, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b9a:	0212      	lsls	r2, r2, #8
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ba2:	0852      	lsrs	r2, r2, #1
 8007ba4:	3a01      	subs	r2, #1
 8007ba6:	0552      	lsls	r2, r2, #21
 8007ba8:	4311      	orrs	r1, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bae:	0852      	lsrs	r2, r2, #1
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	0652      	lsls	r2, r2, #25
 8007bb4:	4311      	orrs	r1, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bba:	06d2      	lsls	r2, r2, #27
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	4947      	ldr	r1, [pc, #284]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc4:	4b45      	ldr	r3, [pc, #276]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a44      	ldr	r2, [pc, #272]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd0:	4b42      	ldr	r3, [pc, #264]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4a41      	ldr	r2, [pc, #260]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fc fad6 	bl	800418c <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be4:	f7fc fad2 	bl	800418c <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e06e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f0      	beq.n	8007be4 <HAL_RCC_OscConfig+0x530>
 8007c02:	e066      	b.n	8007cd2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c04:	4b35      	ldr	r3, [pc, #212]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a34      	ldr	r2, [pc, #208]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007c10:	4b32      	ldr	r3, [pc, #200]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	4a31      	ldr	r2, [pc, #196]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c1c:	4b2f      	ldr	r3, [pc, #188]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a2e      	ldr	r2, [pc, #184]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2c:	f7fc faae 	bl	800418c <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c32:	e008      	b.n	8007c46 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c34:	f7fc faaa 	bl	800418c <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e046      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c46:	4b25      	ldr	r3, [pc, #148]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1f0      	bne.n	8007c34 <HAL_RCC_OscConfig+0x580>
 8007c52:	e03e      	b.n	8007cd2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e039      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c60:	4b1e      	ldr	r3, [pc, #120]	; (8007cdc <HAL_RCC_OscConfig+0x628>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f003 0203 	and.w	r2, r3, #3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d12c      	bne.n	8007cce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d123      	bne.n	8007cce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d11b      	bne.n	8007cce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d113      	bne.n	8007cce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d109      	bne.n	8007cce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d001      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	019f800c 	.word	0x019f800c

08007ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e11e      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b91      	ldr	r3, [pc, #580]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d910      	bls.n	8007d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b8e      	ldr	r3, [pc, #568]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f023 020f 	bic.w	r2, r3, #15
 8007d12:	498c      	ldr	r1, [pc, #560]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1a:	4b8a      	ldr	r3, [pc, #552]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d001      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e106      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d073      	beq.n	8007e20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d129      	bne.n	8007d94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d40:	4b81      	ldr	r3, [pc, #516]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e0f4      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d50:	f000 f99c 	bl	800808c <RCC_GetSysClockFreqFromPLLSource>
 8007d54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	4a7c      	ldr	r2, [pc, #496]	; (8007f4c <HAL_RCC_ClockConfig+0x268>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d93f      	bls.n	8007dde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d5e:	4b7a      	ldr	r3, [pc, #488]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d033      	beq.n	8007dde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d12f      	bne.n	8007dde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d7e:	4b72      	ldr	r3, [pc, #456]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d86:	4a70      	ldr	r2, [pc, #448]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d8e:	2380      	movs	r3, #128	; 0x80
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e024      	b.n	8007dde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d9c:	4b6a      	ldr	r3, [pc, #424]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d109      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0c6      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dac:	4b66      	ldr	r3, [pc, #408]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0be      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007dbc:	f000 f8ce 	bl	8007f5c <HAL_RCC_GetSysClockFreq>
 8007dc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4a61      	ldr	r2, [pc, #388]	; (8007f4c <HAL_RCC_ClockConfig+0x268>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d909      	bls.n	8007dde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dca:	4b5f      	ldr	r3, [pc, #380]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd2:	4a5d      	ldr	r2, [pc, #372]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dde:	4b5a      	ldr	r3, [pc, #360]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f023 0203 	bic.w	r2, r3, #3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	4957      	ldr	r1, [pc, #348]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df0:	f7fc f9cc 	bl	800418c <HAL_GetTick>
 8007df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df6:	e00a      	b.n	8007e0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007df8:	f7fc f9c8 	bl	800418c <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e095      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e0e:	4b4e      	ldr	r3, [pc, #312]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 020c 	and.w	r2, r3, #12
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d1eb      	bne.n	8007df8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d023      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e38:	4b43      	ldr	r3, [pc, #268]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	4a42      	ldr	r2, [pc, #264]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e50:	4b3d      	ldr	r3, [pc, #244]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e58:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	4936      	ldr	r1, [pc, #216]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	608b      	str	r3, [r1, #8]
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d105      	bne.n	8007e86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e7a:	4b33      	ldr	r3, [pc, #204]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	4a32      	ldr	r2, [pc, #200]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e86:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d21d      	bcs.n	8007ed0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e94:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f023 020f 	bic.w	r2, r3, #15
 8007e9c:	4929      	ldr	r1, [pc, #164]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007ea4:	f7fc f972 	bl	800418c <HAL_GetTick>
 8007ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eac:	f7fc f96e 	bl	800418c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e03b      	b.n	8007f3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec2:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <HAL_RCC_ClockConfig+0x260>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d1ed      	bne.n	8007eac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4917      	ldr	r1, [pc, #92]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	490f      	ldr	r1, [pc, #60]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f0e:	f000 f825 	bl	8007f5c <HAL_RCC_GetSysClockFreq>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_RCC_ClockConfig+0x264>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	490c      	ldr	r1, [pc, #48]	; (8007f50 <HAL_RCC_ClockConfig+0x26c>)
 8007f20:	5ccb      	ldrb	r3, [r1, r3]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	; (8007f54 <HAL_RCC_ClockConfig+0x270>)
 8007f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <HAL_RCC_ClockConfig+0x274>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fc f8de 	bl	80040f4 <HAL_InitTick>
 8007f38:	4603      	mov	r3, r0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40022000 	.word	0x40022000
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	04c4b400 	.word	0x04c4b400
 8007f50:	0800e364 	.word	0x0800e364
 8007f54:	20000000 	.word	0x20000000
 8007f58:	20000004 	.word	0x20000004

08007f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f62:	4b2c      	ldr	r3, [pc, #176]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d102      	bne.n	8007f74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f6e:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e047      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f74:	4b27      	ldr	r3, [pc, #156]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 030c 	and.w	r3, r3, #12
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d102      	bne.n	8007f86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	e03e      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f86:	4b23      	ldr	r3, [pc, #140]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	d136      	bne.n	8008000 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f92:	4b20      	ldr	r3, [pc, #128]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	091b      	lsrs	r3, r3, #4
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d10c      	bne.n	8007fca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fb0:	4a19      	ldr	r2, [pc, #100]	; (8008018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb8:	4a16      	ldr	r2, [pc, #88]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fba:	68d2      	ldr	r2, [r2, #12]
 8007fbc:	0a12      	lsrs	r2, r2, #8
 8007fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fc2:	fb02 f303 	mul.w	r3, r2, r3
 8007fc6:	617b      	str	r3, [r7, #20]
      break;
 8007fc8:	e00c      	b.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fca:	4a13      	ldr	r2, [pc, #76]	; (8008018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd2:	4a10      	ldr	r2, [pc, #64]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	0a12      	lsrs	r2, r2, #8
 8007fd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fdc:	fb02 f303 	mul.w	r3, r2, r3
 8007fe0:	617b      	str	r3, [r7, #20]
      break;
 8007fe2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	0e5b      	lsrs	r3, r3, #25
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	3301      	adds	r3, #1
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e001      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008004:	693b      	ldr	r3, [r7, #16]
}
 8008006:	4618      	mov	r0, r3
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000
 8008018:	00f42400 	.word	0x00f42400

0800801c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000000 	.word	0x20000000

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a1b      	lsrs	r3, r3, #8
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4904      	ldr	r1, [pc, #16]	; (800805c <HAL_RCC_GetPCLK1Freq+0x28>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40021000 	.word	0x40021000
 800805c:	0800e374 	.word	0x0800e374

08008060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008064:	f7ff ffda 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8008068:	4602      	mov	r2, r0
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	0adb      	lsrs	r3, r3, #11
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	4904      	ldr	r1, [pc, #16]	; (8008088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008076:	5ccb      	ldrb	r3, [r1, r3]
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008080:	4618      	mov	r0, r3
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40021000 	.word	0x40021000
 8008088:	0800e374 	.word	0x0800e374

0800808c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	3301      	adds	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d10c      	bne.n	80080ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080b0:	4a17      	ldr	r2, [pc, #92]	; (8008110 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b8:	4a14      	ldr	r2, [pc, #80]	; (800810c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080ba:	68d2      	ldr	r2, [r2, #12]
 80080bc:	0a12      	lsrs	r2, r2, #8
 80080be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	617b      	str	r3, [r7, #20]
    break;
 80080c8:	e00c      	b.n	80080e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080ca:	4a11      	ldr	r2, [pc, #68]	; (8008110 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d2:	4a0e      	ldr	r2, [pc, #56]	; (800810c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080d4:	68d2      	ldr	r2, [r2, #12]
 80080d6:	0a12      	lsrs	r2, r2, #8
 80080d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080dc:	fb02 f303 	mul.w	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]
    break;
 80080e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080e4:	4b09      	ldr	r3, [pc, #36]	; (800810c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	0e5b      	lsrs	r3, r3, #25
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	3301      	adds	r3, #1
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80080fe:	687b      	ldr	r3, [r7, #4]
}
 8008100:	4618      	mov	r0, r3
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40021000 	.word	0x40021000
 8008110:	00f42400 	.word	0x00f42400

08008114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800811c:	2300      	movs	r3, #0
 800811e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008120:	2300      	movs	r3, #0
 8008122:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 8098 	beq.w	8008262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008132:	2300      	movs	r3, #0
 8008134:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008136:	4b43      	ldr	r3, [pc, #268]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10d      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008142:	4b40      	ldr	r3, [pc, #256]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	4a3f      	ldr	r2, [pc, #252]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814c:	6593      	str	r3, [r2, #88]	; 0x58
 800814e:	4b3d      	ldr	r3, [pc, #244]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008156:	60bb      	str	r3, [r7, #8]
 8008158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800815a:	2301      	movs	r3, #1
 800815c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800815e:	4b3a      	ldr	r3, [pc, #232]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a39      	ldr	r2, [pc, #228]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008168:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800816a:	f7fc f80f 	bl	800418c <HAL_GetTick>
 800816e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008170:	e009      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008172:	f7fc f80b 	bl	800418c <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d902      	bls.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	74fb      	strb	r3, [r7, #19]
        break;
 8008184:	e005      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0ef      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008192:	7cfb      	ldrb	r3, [r7, #19]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d159      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008198:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01e      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d019      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081b4:	4b23      	ldr	r3, [pc, #140]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081c0:	4b20      	ldr	r3, [pc, #128]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c6:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081d0:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d6:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d016      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f2:	f7fb ffcb 	bl	800418c <HAL_GetTick>
 80081f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081f8:	e00b      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fa:	f7fb ffc7 	bl	800418c <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f241 3288 	movw	r2, #5000	; 0x1388
 8008208:	4293      	cmp	r3, r2
 800820a:	d902      	bls.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	74fb      	strb	r3, [r7, #19]
            break;
 8008210:	e006      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008212:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0ec      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008220:	7cfb      	ldrb	r3, [r7, #19]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008226:	4b07      	ldr	r3, [pc, #28]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	4903      	ldr	r1, [pc, #12]	; (8008244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800823c:	e008      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800823e:	7cfb      	ldrb	r3, [r7, #19]
 8008240:	74bb      	strb	r3, [r7, #18]
 8008242:	e005      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008244:	40021000 	.word	0x40021000
 8008248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008250:	7c7b      	ldrb	r3, [r7, #17]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d105      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008256:	4ba7      	ldr	r3, [pc, #668]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	4aa6      	ldr	r2, [pc, #664]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800825c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008260:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800826e:	4ba1      	ldr	r3, [pc, #644]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008274:	f023 0203 	bic.w	r2, r3, #3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	499d      	ldr	r1, [pc, #628]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800827e:	4313      	orrs	r3, r2
 8008280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008290:	4b98      	ldr	r3, [pc, #608]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008296:	f023 020c 	bic.w	r2, r3, #12
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	4995      	ldr	r1, [pc, #596]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082b2:	4b90      	ldr	r3, [pc, #576]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	498c      	ldr	r1, [pc, #560]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082d4:	4b87      	ldr	r3, [pc, #540]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	4984      	ldr	r1, [pc, #528]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082f6:	4b7f      	ldr	r3, [pc, #508]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	497b      	ldr	r1, [pc, #492]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008318:	4b76      	ldr	r3, [pc, #472]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	4973      	ldr	r1, [pc, #460]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008328:	4313      	orrs	r3, r2
 800832a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800833a:	4b6e      	ldr	r3, [pc, #440]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008340:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	496a      	ldr	r1, [pc, #424]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800835c:	4b65      	ldr	r3, [pc, #404]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	4962      	ldr	r1, [pc, #392]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800836c:	4313      	orrs	r3, r2
 800836e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800837e:	4b5d      	ldr	r3, [pc, #372]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4959      	ldr	r1, [pc, #356]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800838e:	4313      	orrs	r3, r2
 8008390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083a0:	4b54      	ldr	r3, [pc, #336]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	4951      	ldr	r1, [pc, #324]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d015      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083c2:	4b4c      	ldr	r3, [pc, #304]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	4948      	ldr	r1, [pc, #288]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e0:	d105      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083e2:	4b44      	ldr	r3, [pc, #272]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	4a43      	ldr	r2, [pc, #268]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d015      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083fa:	4b3e      	ldr	r3, [pc, #248]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	493a      	ldr	r1, [pc, #232]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008418:	d105      	bne.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800841a:	4b36      	ldr	r3, [pc, #216]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	4a35      	ldr	r2, [pc, #212]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008424:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d015      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008432:	4b30      	ldr	r3, [pc, #192]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008438:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	492c      	ldr	r1, [pc, #176]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008450:	d105      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008452:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d015      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	491e      	ldr	r1, [pc, #120]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008488:	d105      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	4a19      	ldr	r2, [pc, #100]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008494:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d015      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084a2:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b0:	4910      	ldr	r1, [pc, #64]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c0:	d105      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	4a0b      	ldr	r2, [pc, #44]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d018      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80084da:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	4902      	ldr	r1, [pc, #8]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	e001      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80084f4:	40021000 	.word	0x40021000
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fe:	d105      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008500:	4b21      	ldr	r3, [pc, #132]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4a20      	ldr	r2, [pc, #128]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d015      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008518:	4b1b      	ldr	r3, [pc, #108]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800851a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	4918      	ldr	r1, [pc, #96]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d105      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008538:	4b13      	ldr	r3, [pc, #76]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	4a12      	ldr	r2, [pc, #72]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800853e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008542:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d015      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855e:	490a      	ldr	r1, [pc, #40]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800856e:	d105      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800857c:	7cbb      	ldrb	r3, [r7, #18]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40021000 	.word	0x40021000

0800858c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e09d      	b.n	80086da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d108      	bne.n	80085b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ae:	d009      	beq.n	80085c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	61da      	str	r2, [r3, #28]
 80085b6:	e005      	b.n	80085c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fb f89c 	bl	800371c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008604:	d902      	bls.n	800860c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e002      	b.n	8008612 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800860c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008610:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800861a:	d007      	beq.n	800862c <HAL_SPI_Init+0xa0>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008624:	d002      	beq.n	800862c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	ea42 0103 	orr.w	r1, r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	f003 0204 	and.w	r2, r3, #4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086a8:	ea42 0103 	orr.w	r1, r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b088      	sub	sp, #32
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_SPI_Transmit+0x22>
 8008700:	2302      	movs	r3, #2
 8008702:	e158      	b.n	80089b6 <HAL_SPI_Transmit+0x2d4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800870c:	f7fb fd3e 	bl	800418c <HAL_GetTick>
 8008710:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d002      	beq.n	8008728 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008722:	2302      	movs	r3, #2
 8008724:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008726:	e13d      	b.n	80089a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_SPI_Transmit+0x52>
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008738:	e134      	b.n	80089a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2203      	movs	r2, #3
 800873e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008784:	d10f      	bne.n	80087a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	d007      	beq.n	80087c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087cc:	d94b      	bls.n	8008866 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_SPI_Transmit+0xfa>
 80087d6:	8afb      	ldrh	r3, [r7, #22]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d13e      	bne.n	800885a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	881a      	ldrh	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	1c9a      	adds	r2, r3, #2
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008800:	e02b      	b.n	800885a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b02      	cmp	r3, #2
 800880e:	d112      	bne.n	8008836 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008834:	e011      	b.n	800885a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008836:	f7fb fca9 	bl	800418c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d803      	bhi.n	800884e <HAL_SPI_Transmit+0x16c>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	d102      	bne.n	8008854 <HAL_SPI_Transmit+0x172>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008858:	e0a4      	b.n	80089a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1ce      	bne.n	8008802 <HAL_SPI_Transmit+0x120>
 8008864:	e07c      	b.n	8008960 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_SPI_Transmit+0x192>
 800886e:	8afb      	ldrh	r3, [r7, #22]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d170      	bne.n	8008956 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d912      	bls.n	80088a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	881a      	ldrh	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	1c9a      	adds	r2, r3, #2
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b02      	subs	r3, #2
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088a2:	e058      	b.n	8008956 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	330c      	adds	r3, #12
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80088ca:	e044      	b.n	8008956 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d12b      	bne.n	8008932 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d912      	bls.n	800890a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	881a      	ldrh	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	1c9a      	adds	r2, r3, #2
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3b02      	subs	r3, #2
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008908:	e025      	b.n	8008956 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	330c      	adds	r3, #12
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008930:	e011      	b.n	8008956 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008932:	f7fb fc2b 	bl	800418c <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d803      	bhi.n	800894a <HAL_SPI_Transmit+0x268>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d102      	bne.n	8008950 <HAL_SPI_Transmit+0x26e>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008954:	e026      	b.n	80089a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1b5      	bne.n	80088cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fce3 	bl	8009330 <SPI_EndRxTxTransaction>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	77fb      	strb	r3, [r7, #31]
 80089a0:	e000      	b.n	80089a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80089a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80089b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b088      	sub	sp, #32
 80089c2:	af02      	add	r7, sp, #8
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	603b      	str	r3, [r7, #0]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089da:	d112      	bne.n	8008a02 <HAL_SPI_Receive+0x44>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10e      	bne.n	8008a02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2204      	movs	r2, #4
 80089e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4613      	mov	r3, r2
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f910 	bl	8008c1e <HAL_SPI_TransmitReceive>
 80089fe:	4603      	mov	r3, r0
 8008a00:	e109      	b.n	8008c16 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_SPI_Receive+0x52>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e102      	b.n	8008c16 <HAL_SPI_Receive+0x258>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a18:	f7fb fbb8 	bl	800418c <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d002      	beq.n	8008a30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a2e:	e0e9      	b.n	8008c04 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_SPI_Receive+0x7e>
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a40:	e0e0      	b.n	8008c04 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2204      	movs	r2, #4
 8008a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	88fa      	ldrh	r2, [r7, #6]
 8008a62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a8c:	d908      	bls.n	8008aa0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	e007      	b.n	8008ab0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008aae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab8:	d10f      	bne.n	8008ada <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	d007      	beq.n	8008af8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b00:	d867      	bhi.n	8008bd2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008b02:	e030      	b.n	8008b66 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d117      	bne.n	8008b42 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f103 020c 	add.w	r2, r3, #12
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008b40:	e011      	b.n	8008b66 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b42:	f7fb fb23 	bl	800418c <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d803      	bhi.n	8008b5a <HAL_SPI_Receive+0x19c>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d102      	bne.n	8008b60 <HAL_SPI_Receive+0x1a2>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b64:	e04e      	b.n	8008c04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1c8      	bne.n	8008b04 <HAL_SPI_Receive+0x146>
 8008b72:	e034      	b.n	8008bde <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d115      	bne.n	8008bae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8c:	b292      	uxth	r2, r2
 8008b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	1c9a      	adds	r2, r3, #2
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008bac:	e011      	b.n	8008bd2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bae:	f7fb faed 	bl	800418c <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d803      	bhi.n	8008bc6 <HAL_SPI_Receive+0x208>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d102      	bne.n	8008bcc <HAL_SPI_Receive+0x20e>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008bd0:	e018      	b.n	8008c04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1ca      	bne.n	8008b74 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fb4c 	bl	8009280 <SPI_EndRxTransaction>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]
 8008c00:	e000      	b.n	8008c04 <HAL_SPI_Receive+0x246>
  }

error :
 8008c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b08a      	sub	sp, #40	; 0x28
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d101      	bne.n	8008c44 <HAL_SPI_TransmitReceive+0x26>
 8008c40:	2302      	movs	r3, #2
 8008c42:	e1fb      	b.n	800903c <HAL_SPI_TransmitReceive+0x41e>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c4c:	f7fb fa9e 	bl	800418c <HAL_GetTick>
 8008c50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008c60:	887b      	ldrh	r3, [r7, #2]
 8008c62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008c64:	887b      	ldrh	r3, [r7, #2]
 8008c66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c68:	7efb      	ldrb	r3, [r7, #27]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d00e      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x6e>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c74:	d106      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x66>
 8008c7e:	7efb      	ldrb	r3, [r7, #27]
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d003      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008c84:	2302      	movs	r3, #2
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008c8a:	e1cd      	b.n	8009028 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_SPI_TransmitReceive+0x80>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <HAL_SPI_TransmitReceive+0x80>
 8008c98:	887b      	ldrh	r3, [r7, #2]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008ca4:	e1c0      	b.n	8009028 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d003      	beq.n	8008cba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	887a      	ldrh	r2, [r7, #2]
 8008cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	887a      	ldrh	r2, [r7, #2]
 8008cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	887a      	ldrh	r2, [r7, #2]
 8008ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	887a      	ldrh	r2, [r7, #2]
 8008ce6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cfc:	d802      	bhi.n	8008d04 <HAL_SPI_TransmitReceive+0xe6>
 8008cfe:	8a3b      	ldrh	r3, [r7, #16]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d908      	bls.n	8008d16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d12:	605a      	str	r2, [r3, #4]
 8008d14:	e007      	b.n	8008d26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d007      	beq.n	8008d44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d4c:	d97c      	bls.n	8008e48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <HAL_SPI_TransmitReceive+0x13e>
 8008d56:	8a7b      	ldrh	r3, [r7, #18]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d169      	bne.n	8008e30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	881a      	ldrh	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	1c9a      	adds	r2, r3, #2
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d80:	e056      	b.n	8008e30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d11b      	bne.n	8008dc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d016      	beq.n	8008dc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d113      	bne.n	8008dc8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	881a      	ldrh	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	1c9a      	adds	r2, r3, #2
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d11c      	bne.n	8008e10 <HAL_SPI_TransmitReceive+0x1f2>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	b292      	uxth	r2, r2
 8008dee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	1c9a      	adds	r2, r3, #2
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e10:	f7fb f9bc 	bl	800418c <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d807      	bhi.n	8008e30 <HAL_SPI_TransmitReceive+0x212>
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d003      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008e2e:	e0fb      	b.n	8009028 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1a3      	bne.n	8008d82 <HAL_SPI_TransmitReceive+0x164>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d19d      	bne.n	8008d82 <HAL_SPI_TransmitReceive+0x164>
 8008e46:	e0df      	b.n	8009008 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_SPI_TransmitReceive+0x23a>
 8008e50:	8a7b      	ldrh	r3, [r7, #18]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	f040 80cb 	bne.w	8008fee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d912      	bls.n	8008e88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	881a      	ldrh	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	1c9a      	adds	r2, r3, #2
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3b02      	subs	r3, #2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e86:	e0b2      	b.n	8008fee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eae:	e09e      	b.n	8008fee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d134      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x30a>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d02f      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x30a>
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d12c      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d912      	bls.n	8008efe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	881a      	ldrh	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	1c9a      	adds	r2, r3, #2
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b02      	subs	r3, #2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008efc:	e012      	b.n	8008f24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	330c      	adds	r3, #12
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d148      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x3aa>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d042      	beq.n	8008fc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d923      	bls.n	8008f96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	b292      	uxth	r2, r2
 8008f5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	1c9a      	adds	r2, r3, #2
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b02      	subs	r3, #2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d81f      	bhi.n	8008fc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	e016      	b.n	8008fc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f103 020c 	add.w	r2, r3, #12
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fc8:	f7fb f8e0 	bl	800418c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d803      	bhi.n	8008fe0 <HAL_SPI_TransmitReceive+0x3c2>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d102      	bne.n	8008fe6 <HAL_SPI_TransmitReceive+0x3c8>
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008fec:	e01c      	b.n	8009028 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f47f af5b 	bne.w	8008eb0 <HAL_SPI_TransmitReceive+0x292>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	f47f af54 	bne.w	8008eb0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f98f 	bl	8009330 <SPI_EndRxTxTransaction>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	661a      	str	r2, [r3, #96]	; 0x60
 8009024:	e000      	b.n	8009028 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009054:	f7fb f89a 	bl	800418c <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	4413      	add	r3, r2
 8009062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009064:	f7fb f892 	bl	800418c <HAL_GetTick>
 8009068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800906a:	4b39      	ldr	r3, [pc, #228]	; (8009150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	015b      	lsls	r3, r3, #5
 8009070:	0d1b      	lsrs	r3, r3, #20
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	fb02 f303 	mul.w	r3, r2, r3
 8009078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800907a:	e054      	b.n	8009126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009082:	d050      	beq.n	8009126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009084:	f7fb f882 	bl	800418c <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	429a      	cmp	r2, r3
 8009092:	d902      	bls.n	800909a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d13d      	bne.n	8009116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b2:	d111      	bne.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090bc:	d004      	beq.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c6:	d107      	bne.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e0:	d10f      	bne.n	8009102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e017      	b.n	8009146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	3b01      	subs	r3, #1
 8009124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	bf0c      	ite	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	2300      	movne	r3, #0
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	429a      	cmp	r2, r3
 8009142:	d19b      	bne.n	800907c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000000 	.word	0x20000000

08009154 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	; 0x28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009166:	f7fb f811 	bl	800418c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4413      	add	r3, r2
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009176:	f7fb f809 	bl	800418c <HAL_GetTick>
 800917a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009184:	4b3d      	ldr	r3, [pc, #244]	; (800927c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	00da      	lsls	r2, r3, #3
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	0d1b      	lsrs	r3, r3, #20
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	fb02 f303 	mul.w	r3, r2, r3
 800919a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800919c:	e060      	b.n	8009260 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80091a4:	d107      	bne.n	80091b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d050      	beq.n	8009260 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091be:	f7fa ffe5 	bl	800418c <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d902      	bls.n	80091d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d13d      	bne.n	8009250 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ec:	d111      	bne.n	8009212 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f6:	d004      	beq.n	8009202 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009200:	d107      	bne.n	8009212 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921a:	d10f      	bne.n	800923c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800923a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e010      	b.n	8009272 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	3b01      	subs	r3, #1
 800925e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	4013      	ands	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d196      	bne.n	800919e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3728      	adds	r7, #40	; 0x28
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000000 	.word	0x20000000

08009280 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af02      	add	r7, sp, #8
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009294:	d111      	bne.n	80092ba <SPI_EndRxTransaction+0x3a>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800929e:	d004      	beq.n	80092aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a8:	d107      	bne.n	80092ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2200      	movs	r2, #0
 80092c2:	2180      	movs	r1, #128	; 0x80
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff febd 	bl	8009044 <SPI_WaitFlagStateUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d007      	beq.n	80092e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d4:	f043 0220 	orr.w	r2, r3, #32
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e023      	b.n	8009328 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e8:	d11d      	bne.n	8009326 <SPI_EndRxTransaction+0xa6>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f2:	d004      	beq.n	80092fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fc:	d113      	bne.n	8009326 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2200      	movs	r2, #0
 8009306:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff ff22 	bl	8009154 <SPI_WaitFifoStateUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931a:	f043 0220 	orr.w	r2, r3, #32
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e000      	b.n	8009328 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af02      	add	r7, sp, #8
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2200      	movs	r2, #0
 8009344:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff ff03 	bl	8009154 <SPI_WaitFifoStateUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009358:	f043 0220 	orr.w	r2, r3, #32
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e027      	b.n	80093b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2200      	movs	r2, #0
 800936c:	2180      	movs	r1, #128	; 0x80
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fe68 	bl	8009044 <SPI_WaitFlagStateUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937e:	f043 0220 	orr.w	r2, r3, #32
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e014      	b.n	80093b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff fedc 	bl	8009154 <SPI_WaitFifoStateUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e000      	b.n	80093b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e049      	b.n	8009462 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fa fcd8 	bl	8003d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f000 fd6c 	bl	8009ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b01      	cmp	r3, #1
 800947e:	d001      	beq.n	8009484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e04f      	b.n	8009524 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a23      	ldr	r2, [pc, #140]	; (8009530 <HAL_TIM_Base_Start_IT+0xc4>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d01d      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ae:	d018      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a1f      	ldr	r2, [pc, #124]	; (8009534 <HAL_TIM_Base_Start_IT+0xc8>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d013      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1e      	ldr	r2, [pc, #120]	; (8009538 <HAL_TIM_Base_Start_IT+0xcc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00e      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1c      	ldr	r2, [pc, #112]	; (800953c <HAL_TIM_Base_Start_IT+0xd0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d009      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <HAL_TIM_Base_Start_IT+0xd4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d004      	beq.n	80094e2 <HAL_TIM_Base_Start_IT+0x76>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a19      	ldr	r2, [pc, #100]	; (8009544 <HAL_TIM_Base_Start_IT+0xd8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d115      	bne.n	800950e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	4b17      	ldr	r3, [pc, #92]	; (8009548 <HAL_TIM_Base_Start_IT+0xdc>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b06      	cmp	r3, #6
 80094f2:	d015      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0xb4>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fa:	d011      	beq.n	8009520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f042 0201 	orr.w	r2, r2, #1
 800950a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800950c:	e008      	b.n	8009520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0201 	orr.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e000      	b.n	8009522 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009520:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40013400 	.word	0x40013400
 8009540:	40014000 	.word	0x40014000
 8009544:	40015000 	.word	0x40015000
 8009548:	00010007 	.word	0x00010007

0800954c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e049      	b.n	80095f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fa fc4a 	bl	8003e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f000 fca4 	bl	8009ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d109      	bne.n	8009620 <HAL_TIM_PWM_Start+0x24>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b01      	cmp	r3, #1
 8009616:	bf14      	ite	ne
 8009618:	2301      	movne	r3, #1
 800961a:	2300      	moveq	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	e03c      	b.n	800969a <HAL_TIM_PWM_Start+0x9e>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b04      	cmp	r3, #4
 8009624:	d109      	bne.n	800963a <HAL_TIM_PWM_Start+0x3e>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b01      	cmp	r3, #1
 8009630:	bf14      	ite	ne
 8009632:	2301      	movne	r3, #1
 8009634:	2300      	moveq	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	e02f      	b.n	800969a <HAL_TIM_PWM_Start+0x9e>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b08      	cmp	r3, #8
 800963e:	d109      	bne.n	8009654 <HAL_TIM_PWM_Start+0x58>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	bf14      	ite	ne
 800964c:	2301      	movne	r3, #1
 800964e:	2300      	moveq	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	e022      	b.n	800969a <HAL_TIM_PWM_Start+0x9e>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b0c      	cmp	r3, #12
 8009658:	d109      	bne.n	800966e <HAL_TIM_PWM_Start+0x72>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b01      	cmp	r3, #1
 8009664:	bf14      	ite	ne
 8009666:	2301      	movne	r3, #1
 8009668:	2300      	moveq	r3, #0
 800966a:	b2db      	uxtb	r3, r3
 800966c:	e015      	b.n	800969a <HAL_TIM_PWM_Start+0x9e>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b10      	cmp	r3, #16
 8009672:	d109      	bne.n	8009688 <HAL_TIM_PWM_Start+0x8c>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	bf14      	ite	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2300      	moveq	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	e008      	b.n	800969a <HAL_TIM_PWM_Start+0x9e>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b01      	cmp	r3, #1
 8009692:	bf14      	ite	ne
 8009694:	2301      	movne	r3, #1
 8009696:	2300      	moveq	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e0a1      	b.n	80097e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <HAL_TIM_PWM_Start+0xb6>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096b0:	e023      	b.n	80096fa <HAL_TIM_PWM_Start+0xfe>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d104      	bne.n	80096c2 <HAL_TIM_PWM_Start+0xc6>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096c0:	e01b      	b.n	80096fa <HAL_TIM_PWM_Start+0xfe>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d104      	bne.n	80096d2 <HAL_TIM_PWM_Start+0xd6>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096d0:	e013      	b.n	80096fa <HAL_TIM_PWM_Start+0xfe>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b0c      	cmp	r3, #12
 80096d6:	d104      	bne.n	80096e2 <HAL_TIM_PWM_Start+0xe6>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096e0:	e00b      	b.n	80096fa <HAL_TIM_PWM_Start+0xfe>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b10      	cmp	r3, #16
 80096e6:	d104      	bne.n	80096f2 <HAL_TIM_PWM_Start+0xf6>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f0:	e003      	b.n	80096fa <HAL_TIM_PWM_Start+0xfe>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2201      	movs	r2, #1
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 ffb0 	bl	800a668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a38      	ldr	r2, [pc, #224]	; (80097f0 <HAL_TIM_PWM_Start+0x1f4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d018      	beq.n	8009744 <HAL_TIM_PWM_Start+0x148>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a37      	ldr	r2, [pc, #220]	; (80097f4 <HAL_TIM_PWM_Start+0x1f8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d013      	beq.n	8009744 <HAL_TIM_PWM_Start+0x148>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a35      	ldr	r2, [pc, #212]	; (80097f8 <HAL_TIM_PWM_Start+0x1fc>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00e      	beq.n	8009744 <HAL_TIM_PWM_Start+0x148>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a34      	ldr	r2, [pc, #208]	; (80097fc <HAL_TIM_PWM_Start+0x200>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d009      	beq.n	8009744 <HAL_TIM_PWM_Start+0x148>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a32      	ldr	r2, [pc, #200]	; (8009800 <HAL_TIM_PWM_Start+0x204>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d004      	beq.n	8009744 <HAL_TIM_PWM_Start+0x148>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a31      	ldr	r2, [pc, #196]	; (8009804 <HAL_TIM_PWM_Start+0x208>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d101      	bne.n	8009748 <HAL_TIM_PWM_Start+0x14c>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <HAL_TIM_PWM_Start+0x14e>
 8009748:	2300      	movs	r3, #0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800975c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a23      	ldr	r2, [pc, #140]	; (80097f0 <HAL_TIM_PWM_Start+0x1f4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d01d      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009770:	d018      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a24      	ldr	r2, [pc, #144]	; (8009808 <HAL_TIM_PWM_Start+0x20c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a22      	ldr	r2, [pc, #136]	; (800980c <HAL_TIM_PWM_Start+0x210>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00e      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a1a      	ldr	r2, [pc, #104]	; (80097f4 <HAL_TIM_PWM_Start+0x1f8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <HAL_TIM_PWM_Start+0x1fc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIM_PWM_Start+0x1a8>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a19      	ldr	r2, [pc, #100]	; (8009804 <HAL_TIM_PWM_Start+0x208>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d115      	bne.n	80097d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <HAL_TIM_PWM_Start+0x214>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d015      	beq.n	80097e2 <HAL_TIM_PWM_Start+0x1e6>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097bc:	d011      	beq.n	80097e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ce:	e008      	b.n	80097e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	e000      	b.n	80097e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40013400 	.word	0x40013400
 80097f8:	40014000 	.word	0x40014000
 80097fc:	40014400 	.word	0x40014400
 8009800:	40014800 	.word	0x40014800
 8009804:	40015000 	.word	0x40015000
 8009808:	40000400 	.word	0x40000400
 800980c:	40000800 	.word	0x40000800
 8009810:	00010007 	.word	0x00010007

08009814 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 ff1e 	bl	800a668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a40      	ldr	r2, [pc, #256]	; (8009934 <HAL_TIM_PWM_Stop+0x120>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_TIM_PWM_Stop+0x54>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a3f      	ldr	r2, [pc, #252]	; (8009938 <HAL_TIM_PWM_Stop+0x124>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_TIM_PWM_Stop+0x54>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a3d      	ldr	r2, [pc, #244]	; (800993c <HAL_TIM_PWM_Stop+0x128>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_TIM_PWM_Stop+0x54>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <HAL_TIM_PWM_Stop+0x12c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_TIM_PWM_Stop+0x54>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a3a      	ldr	r2, [pc, #232]	; (8009944 <HAL_TIM_PWM_Stop+0x130>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_TIM_PWM_Stop+0x54>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a39      	ldr	r2, [pc, #228]	; (8009948 <HAL_TIM_PWM_Stop+0x134>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d101      	bne.n	800986c <HAL_TIM_PWM_Stop+0x58>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <HAL_TIM_PWM_Stop+0x5a>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a1a      	ldr	r2, [r3, #32]
 8009878:	f241 1311 	movw	r3, #4369	; 0x1111
 800987c:	4013      	ands	r3, r2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10f      	bne.n	80098a2 <HAL_TIM_PWM_Stop+0x8e>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6a1a      	ldr	r2, [r3, #32]
 8009888:	f244 4344 	movw	r3, #17476	; 0x4444
 800988c:	4013      	ands	r3, r2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d107      	bne.n	80098a2 <HAL_TIM_PWM_Stop+0x8e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6a1a      	ldr	r2, [r3, #32]
 80098a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80098ac:	4013      	ands	r3, r2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10f      	bne.n	80098d2 <HAL_TIM_PWM_Stop+0xbe>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6a1a      	ldr	r2, [r3, #32]
 80098b8:	f244 4344 	movw	r3, #17476	; 0x4444
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d107      	bne.n	80098d2 <HAL_TIM_PWM_Stop+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <HAL_TIM_PWM_Stop+0xce>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098e0:	e023      	b.n	800992a <HAL_TIM_PWM_Stop+0x116>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d104      	bne.n	80098f2 <HAL_TIM_PWM_Stop+0xde>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098f0:	e01b      	b.n	800992a <HAL_TIM_PWM_Stop+0x116>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d104      	bne.n	8009902 <HAL_TIM_PWM_Stop+0xee>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009900:	e013      	b.n	800992a <HAL_TIM_PWM_Stop+0x116>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b0c      	cmp	r3, #12
 8009906:	d104      	bne.n	8009912 <HAL_TIM_PWM_Stop+0xfe>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009910:	e00b      	b.n	800992a <HAL_TIM_PWM_Stop+0x116>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b10      	cmp	r3, #16
 8009916:	d104      	bne.n	8009922 <HAL_TIM_PWM_Stop+0x10e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009920:	e003      	b.n	800992a <HAL_TIM_PWM_Stop+0x116>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40012c00 	.word	0x40012c00
 8009938:	40013400 	.word	0x40013400
 800993c:	40014000 	.word	0x40014000
 8009940:	40014400 	.word	0x40014400
 8009944:	40014800 	.word	0x40014800
 8009948:	40015000 	.word	0x40015000

0800994c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b02      	cmp	r3, #2
 8009960:	d122      	bne.n	80099a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b02      	cmp	r3, #2
 800996e:	d11b      	bne.n	80099a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f06f 0202 	mvn.w	r2, #2
 8009978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa84 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009994:	e005      	b.n	80099a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa76 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa87 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d122      	bne.n	80099fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f003 0304 	and.w	r3, r3, #4
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d11b      	bne.n	80099fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f06f 0204 	mvn.w	r2, #4
 80099cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2202      	movs	r2, #2
 80099d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa5a 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 80099e8:	e005      	b.n	80099f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa4c 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa5d 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b08      	cmp	r3, #8
 8009a08:	d122      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d11b      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0208 	mvn.w	r2, #8
 8009a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2204      	movs	r2, #4
 8009a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa30 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009a3c:	e005      	b.n	8009a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa22 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa33 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0310 	and.w	r3, r3, #16
 8009a5a:	2b10      	cmp	r3, #16
 8009a5c:	d122      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f003 0310 	and.w	r3, r3, #16
 8009a68:	2b10      	cmp	r3, #16
 8009a6a:	d11b      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0210 	mvn.w	r2, #16
 8009a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa06 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 8009a90:	e005      	b.n	8009a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f9f8 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa09 	bl	8009eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10e      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d107      	bne.n	8009ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f06f 0201 	mvn.w	r2, #1
 8009ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9d2 	bl	8009e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ada:	2b80      	cmp	r3, #128	; 0x80
 8009adc:	d10e      	bne.n	8009afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae8:	2b80      	cmp	r3, #128	; 0x80
 8009aea:	d107      	bne.n	8009afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 ff26 	bl	800a948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b0a:	d10e      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b16:	2b80      	cmp	r3, #128	; 0x80
 8009b18:	d107      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 ff19 	bl	800a95c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b34:	2b40      	cmp	r3, #64	; 0x40
 8009b36:	d10e      	bne.n	8009b56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b40      	cmp	r3, #64	; 0x40
 8009b44:	d107      	bne.n	8009b56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f9b7 	bl	8009ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b20      	cmp	r3, #32
 8009b62:	d10e      	bne.n	8009b82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d107      	bne.n	8009b82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f06f 0220 	mvn.w	r2, #32
 8009b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fed9 	bl	800a934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b90:	d10f      	bne.n	8009bb2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba0:	d107      	bne.n	8009bb2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fedf 	bl	800a970 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc0:	d10f      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bd0:	d107      	bne.n	8009be2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fed1 	bl	800a984 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bf0:	d10f      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c00:	d107      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fec3 	bl	800a998 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c20:	d10f      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c30:	d107      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 feb5 	bl	800a9ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e0ff      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b14      	cmp	r3, #20
 8009c76:	f200 80f0 	bhi.w	8009e5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c7a:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009e5b 	.word	0x08009e5b
 8009c88:	08009e5b 	.word	0x08009e5b
 8009c8c:	08009e5b 	.word	0x08009e5b
 8009c90:	08009d15 	.word	0x08009d15
 8009c94:	08009e5b 	.word	0x08009e5b
 8009c98:	08009e5b 	.word	0x08009e5b
 8009c9c:	08009e5b 	.word	0x08009e5b
 8009ca0:	08009d57 	.word	0x08009d57
 8009ca4:	08009e5b 	.word	0x08009e5b
 8009ca8:	08009e5b 	.word	0x08009e5b
 8009cac:	08009e5b 	.word	0x08009e5b
 8009cb0:	08009d97 	.word	0x08009d97
 8009cb4:	08009e5b 	.word	0x08009e5b
 8009cb8:	08009e5b 	.word	0x08009e5b
 8009cbc:	08009e5b 	.word	0x08009e5b
 8009cc0:	08009dd9 	.word	0x08009dd9
 8009cc4:	08009e5b 	.word	0x08009e5b
 8009cc8:	08009e5b 	.word	0x08009e5b
 8009ccc:	08009e5b 	.word	0x08009e5b
 8009cd0:	08009e19 	.word	0x08009e19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f99a 	bl	800a014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0208 	orr.w	r2, r2, #8
 8009cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699a      	ldr	r2, [r3, #24]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0204 	bic.w	r2, r2, #4
 8009cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6999      	ldr	r1, [r3, #24]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	619a      	str	r2, [r3, #24]
      break;
 8009d12:	e0a5      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 fa14 	bl	800a148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6999      	ldr	r1, [r3, #24]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	021a      	lsls	r2, r3, #8
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	619a      	str	r2, [r3, #24]
      break;
 8009d54:	e084      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fa87 	bl	800a270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f042 0208 	orr.w	r2, r2, #8
 8009d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69da      	ldr	r2, [r3, #28]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0204 	bic.w	r2, r2, #4
 8009d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69d9      	ldr	r1, [r3, #28]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	691a      	ldr	r2, [r3, #16]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	61da      	str	r2, [r3, #28]
      break;
 8009d94:	e064      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 faf9 	bl	800a394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69da      	ldr	r2, [r3, #28]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69d9      	ldr	r1, [r3, #28]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	021a      	lsls	r2, r3, #8
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	61da      	str	r2, [r3, #28]
      break;
 8009dd6:	e043      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fb6c 	bl	800a4bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0208 	orr.w	r2, r2, #8
 8009df2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0204 	bic.w	r2, r2, #4
 8009e02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	691a      	ldr	r2, [r3, #16]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e16:	e023      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68b9      	ldr	r1, [r7, #8]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fbb6 	bl	800a590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	021a      	lsls	r2, r3, #8
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009e58:	e002      	b.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop

08009e74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a42      	ldr	r2, [pc, #264]	; (8009ff4 <TIM_Base_SetConfig+0x11c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d00f      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a3f      	ldr	r2, [pc, #252]	; (8009ff8 <TIM_Base_SetConfig+0x120>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a3e      	ldr	r2, [pc, #248]	; (8009ffc <TIM_Base_SetConfig+0x124>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d007      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a3d      	ldr	r2, [pc, #244]	; (800a000 <TIM_Base_SetConfig+0x128>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_Base_SetConfig+0x40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a3c      	ldr	r2, [pc, #240]	; (800a004 <TIM_Base_SetConfig+0x12c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d108      	bne.n	8009f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a31      	ldr	r2, [pc, #196]	; (8009ff4 <TIM_Base_SetConfig+0x11c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d01f      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f38:	d01b      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2e      	ldr	r2, [pc, #184]	; (8009ff8 <TIM_Base_SetConfig+0x120>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d017      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a2d      	ldr	r2, [pc, #180]	; (8009ffc <TIM_Base_SetConfig+0x124>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d013      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a2c      	ldr	r2, [pc, #176]	; (800a000 <TIM_Base_SetConfig+0x128>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00f      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2c      	ldr	r2, [pc, #176]	; (800a008 <TIM_Base_SetConfig+0x130>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00b      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a2b      	ldr	r2, [pc, #172]	; (800a00c <TIM_Base_SetConfig+0x134>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d007      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a2a      	ldr	r2, [pc, #168]	; (800a010 <TIM_Base_SetConfig+0x138>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_Base_SetConfig+0x9a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a25      	ldr	r2, [pc, #148]	; (800a004 <TIM_Base_SetConfig+0x12c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d108      	bne.n	8009f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a12      	ldr	r2, [pc, #72]	; (8009ff4 <TIM_Base_SetConfig+0x11c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d013      	beq.n	8009fd8 <TIM_Base_SetConfig+0x100>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a13      	ldr	r2, [pc, #76]	; (800a000 <TIM_Base_SetConfig+0x128>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00f      	beq.n	8009fd8 <TIM_Base_SetConfig+0x100>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a13      	ldr	r2, [pc, #76]	; (800a008 <TIM_Base_SetConfig+0x130>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00b      	beq.n	8009fd8 <TIM_Base_SetConfig+0x100>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a12      	ldr	r2, [pc, #72]	; (800a00c <TIM_Base_SetConfig+0x134>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d007      	beq.n	8009fd8 <TIM_Base_SetConfig+0x100>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a11      	ldr	r2, [pc, #68]	; (800a010 <TIM_Base_SetConfig+0x138>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d003      	beq.n	8009fd8 <TIM_Base_SetConfig+0x100>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a0c      	ldr	r2, [pc, #48]	; (800a004 <TIM_Base_SetConfig+0x12c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d103      	bne.n	8009fe0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	691a      	ldr	r2, [r3, #16]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	615a      	str	r2, [r3, #20]
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40012c00 	.word	0x40012c00
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800
 800a000:	40013400 	.word	0x40013400
 800a004:	40015000 	.word	0x40015000
 800a008:	40014000 	.word	0x40014000
 800a00c:	40014400 	.word	0x40014400
 800a010:	40014800 	.word	0x40014800

0800a014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	f023 0201 	bic.w	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 0302 	bic.w	r3, r3, #2
 800a060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a30      	ldr	r2, [pc, #192]	; (800a130 <TIM_OC1_SetConfig+0x11c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d013      	beq.n	800a09c <TIM_OC1_SetConfig+0x88>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a2f      	ldr	r2, [pc, #188]	; (800a134 <TIM_OC1_SetConfig+0x120>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00f      	beq.n	800a09c <TIM_OC1_SetConfig+0x88>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a2e      	ldr	r2, [pc, #184]	; (800a138 <TIM_OC1_SetConfig+0x124>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d00b      	beq.n	800a09c <TIM_OC1_SetConfig+0x88>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a2d      	ldr	r2, [pc, #180]	; (800a13c <TIM_OC1_SetConfig+0x128>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d007      	beq.n	800a09c <TIM_OC1_SetConfig+0x88>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a2c      	ldr	r2, [pc, #176]	; (800a140 <TIM_OC1_SetConfig+0x12c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d003      	beq.n	800a09c <TIM_OC1_SetConfig+0x88>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a2b      	ldr	r2, [pc, #172]	; (800a144 <TIM_OC1_SetConfig+0x130>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d10c      	bne.n	800a0b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f023 0308 	bic.w	r3, r3, #8
 800a0a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f023 0304 	bic.w	r3, r3, #4
 800a0b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a1d      	ldr	r2, [pc, #116]	; (800a130 <TIM_OC1_SetConfig+0x11c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d013      	beq.n	800a0e6 <TIM_OC1_SetConfig+0xd2>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a1c      	ldr	r2, [pc, #112]	; (800a134 <TIM_OC1_SetConfig+0x120>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d00f      	beq.n	800a0e6 <TIM_OC1_SetConfig+0xd2>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a1b      	ldr	r2, [pc, #108]	; (800a138 <TIM_OC1_SetConfig+0x124>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d00b      	beq.n	800a0e6 <TIM_OC1_SetConfig+0xd2>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a1a      	ldr	r2, [pc, #104]	; (800a13c <TIM_OC1_SetConfig+0x128>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d007      	beq.n	800a0e6 <TIM_OC1_SetConfig+0xd2>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a19      	ldr	r2, [pc, #100]	; (800a140 <TIM_OC1_SetConfig+0x12c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d003      	beq.n	800a0e6 <TIM_OC1_SetConfig+0xd2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a18      	ldr	r2, [pc, #96]	; (800a144 <TIM_OC1_SetConfig+0x130>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d111      	bne.n	800a10a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40013400 	.word	0x40013400
 800a138:	40014000 	.word	0x40014000
 800a13c:	40014400 	.word	0x40014400
 800a140:	40014800 	.word	0x40014800
 800a144:	40015000 	.word	0x40015000

0800a148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a148:	b480      	push	{r7}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	f023 0210 	bic.w	r2, r3, #16
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0320 	bic.w	r3, r3, #32
 800a196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a2c      	ldr	r2, [pc, #176]	; (800a258 <TIM_OC2_SetConfig+0x110>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d007      	beq.n	800a1bc <TIM_OC2_SetConfig+0x74>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a2b      	ldr	r2, [pc, #172]	; (800a25c <TIM_OC2_SetConfig+0x114>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d003      	beq.n	800a1bc <TIM_OC2_SetConfig+0x74>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a2a      	ldr	r2, [pc, #168]	; (800a260 <TIM_OC2_SetConfig+0x118>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d10d      	bne.n	800a1d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <TIM_OC2_SetConfig+0x110>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d013      	beq.n	800a208 <TIM_OC2_SetConfig+0xc0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1e      	ldr	r2, [pc, #120]	; (800a25c <TIM_OC2_SetConfig+0x114>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00f      	beq.n	800a208 <TIM_OC2_SetConfig+0xc0>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	; (800a264 <TIM_OC2_SetConfig+0x11c>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d00b      	beq.n	800a208 <TIM_OC2_SetConfig+0xc0>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a1d      	ldr	r2, [pc, #116]	; (800a268 <TIM_OC2_SetConfig+0x120>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d007      	beq.n	800a208 <TIM_OC2_SetConfig+0xc0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a1c      	ldr	r2, [pc, #112]	; (800a26c <TIM_OC2_SetConfig+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d003      	beq.n	800a208 <TIM_OC2_SetConfig+0xc0>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a17      	ldr	r2, [pc, #92]	; (800a260 <TIM_OC2_SetConfig+0x118>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d113      	bne.n	800a230 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a20e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40012c00 	.word	0x40012c00
 800a25c:	40013400 	.word	0x40013400
 800a260:	40015000 	.word	0x40015000
 800a264:	40014000 	.word	0x40014000
 800a268:	40014400 	.word	0x40014400
 800a26c:	40014800 	.word	0x40014800

0800a270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a2b      	ldr	r2, [pc, #172]	; (800a37c <TIM_OC3_SetConfig+0x10c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d007      	beq.n	800a2e2 <TIM_OC3_SetConfig+0x72>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <TIM_OC3_SetConfig+0x110>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d003      	beq.n	800a2e2 <TIM_OC3_SetConfig+0x72>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a29      	ldr	r2, [pc, #164]	; (800a384 <TIM_OC3_SetConfig+0x114>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d10d      	bne.n	800a2fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <TIM_OC3_SetConfig+0x10c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d013      	beq.n	800a32e <TIM_OC3_SetConfig+0xbe>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <TIM_OC3_SetConfig+0x110>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00f      	beq.n	800a32e <TIM_OC3_SetConfig+0xbe>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1d      	ldr	r2, [pc, #116]	; (800a388 <TIM_OC3_SetConfig+0x118>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00b      	beq.n	800a32e <TIM_OC3_SetConfig+0xbe>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a1c      	ldr	r2, [pc, #112]	; (800a38c <TIM_OC3_SetConfig+0x11c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d007      	beq.n	800a32e <TIM_OC3_SetConfig+0xbe>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a1b      	ldr	r2, [pc, #108]	; (800a390 <TIM_OC3_SetConfig+0x120>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d003      	beq.n	800a32e <TIM_OC3_SetConfig+0xbe>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a16      	ldr	r2, [pc, #88]	; (800a384 <TIM_OC3_SetConfig+0x114>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d113      	bne.n	800a356 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	011b      	lsls	r3, r3, #4
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	621a      	str	r2, [r3, #32]
}
 800a370:	bf00      	nop
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	40012c00 	.word	0x40012c00
 800a380:	40013400 	.word	0x40013400
 800a384:	40015000 	.word	0x40015000
 800a388:	40014000 	.word	0x40014000
 800a38c:	40014400 	.word	0x40014400
 800a390:	40014800 	.word	0x40014800

0800a394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	031b      	lsls	r3, r3, #12
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a2c      	ldr	r2, [pc, #176]	; (800a4a4 <TIM_OC4_SetConfig+0x110>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d007      	beq.n	800a408 <TIM_OC4_SetConfig+0x74>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a2b      	ldr	r2, [pc, #172]	; (800a4a8 <TIM_OC4_SetConfig+0x114>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d003      	beq.n	800a408 <TIM_OC4_SetConfig+0x74>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <TIM_OC4_SetConfig+0x118>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d10d      	bne.n	800a424 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a40e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	031b      	lsls	r3, r3, #12
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a422:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <TIM_OC4_SetConfig+0x110>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d013      	beq.n	800a454 <TIM_OC4_SetConfig+0xc0>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <TIM_OC4_SetConfig+0x114>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00f      	beq.n	800a454 <TIM_OC4_SetConfig+0xc0>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a1e      	ldr	r2, [pc, #120]	; (800a4b0 <TIM_OC4_SetConfig+0x11c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00b      	beq.n	800a454 <TIM_OC4_SetConfig+0xc0>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <TIM_OC4_SetConfig+0x120>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d007      	beq.n	800a454 <TIM_OC4_SetConfig+0xc0>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1c      	ldr	r2, [pc, #112]	; (800a4b8 <TIM_OC4_SetConfig+0x124>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d003      	beq.n	800a454 <TIM_OC4_SetConfig+0xc0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a17      	ldr	r2, [pc, #92]	; (800a4ac <TIM_OC4_SetConfig+0x118>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d113      	bne.n	800a47c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a462:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	019b      	lsls	r3, r3, #6
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	019b      	lsls	r3, r3, #6
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	621a      	str	r2, [r3, #32]
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40013400 	.word	0x40013400
 800a4ac:	40015000 	.word	0x40015000
 800a4b0:	40014000 	.word	0x40014000
 800a4b4:	40014400 	.word	0x40014400
 800a4b8:	40014800 	.word	0x40014800

0800a4bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	041b      	lsls	r3, r3, #16
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a19      	ldr	r2, [pc, #100]	; (800a578 <TIM_OC5_SetConfig+0xbc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d013      	beq.n	800a53e <TIM_OC5_SetConfig+0x82>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a18      	ldr	r2, [pc, #96]	; (800a57c <TIM_OC5_SetConfig+0xc0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00f      	beq.n	800a53e <TIM_OC5_SetConfig+0x82>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a17      	ldr	r2, [pc, #92]	; (800a580 <TIM_OC5_SetConfig+0xc4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00b      	beq.n	800a53e <TIM_OC5_SetConfig+0x82>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a16      	ldr	r2, [pc, #88]	; (800a584 <TIM_OC5_SetConfig+0xc8>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d007      	beq.n	800a53e <TIM_OC5_SetConfig+0x82>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a15      	ldr	r2, [pc, #84]	; (800a588 <TIM_OC5_SetConfig+0xcc>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_OC5_SetConfig+0x82>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a14      	ldr	r2, [pc, #80]	; (800a58c <TIM_OC5_SetConfig+0xd0>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d109      	bne.n	800a552 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a544:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	021b      	lsls	r3, r3, #8
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	4313      	orrs	r3, r2
 800a550:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	621a      	str	r2, [r3, #32]
}
 800a56c:	bf00      	nop
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	40012c00 	.word	0x40012c00
 800a57c:	40013400 	.word	0x40013400
 800a580:	40014000 	.word	0x40014000
 800a584:	40014400 	.word	0x40014400
 800a588:	40014800 	.word	0x40014800
 800a58c:	40015000 	.word	0x40015000

0800a590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	021b      	lsls	r3, r3, #8
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	051b      	lsls	r3, r3, #20
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a1a      	ldr	r2, [pc, #104]	; (800a650 <TIM_OC6_SetConfig+0xc0>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d013      	beq.n	800a614 <TIM_OC6_SetConfig+0x84>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a19      	ldr	r2, [pc, #100]	; (800a654 <TIM_OC6_SetConfig+0xc4>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00f      	beq.n	800a614 <TIM_OC6_SetConfig+0x84>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	; (800a658 <TIM_OC6_SetConfig+0xc8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d00b      	beq.n	800a614 <TIM_OC6_SetConfig+0x84>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a17      	ldr	r2, [pc, #92]	; (800a65c <TIM_OC6_SetConfig+0xcc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d007      	beq.n	800a614 <TIM_OC6_SetConfig+0x84>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a16      	ldr	r2, [pc, #88]	; (800a660 <TIM_OC6_SetConfig+0xd0>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d003      	beq.n	800a614 <TIM_OC6_SetConfig+0x84>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <TIM_OC6_SetConfig+0xd4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d109      	bne.n	800a628 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a61a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	029b      	lsls	r3, r3, #10
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	621a      	str	r2, [r3, #32]
}
 800a642:	bf00      	nop
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	40012c00 	.word	0x40012c00
 800a654:	40013400 	.word	0x40013400
 800a658:	40014000 	.word	0x40014000
 800a65c:	40014400 	.word	0x40014400
 800a660:	40014800 	.word	0x40014800
 800a664:	40015000 	.word	0x40015000

0800a668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	2201      	movs	r2, #1
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a1a      	ldr	r2, [r3, #32]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	43db      	mvns	r3, r3
 800a68a:	401a      	ands	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a1a      	ldr	r2, [r3, #32]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f003 031f 	and.w	r3, r3, #31
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	621a      	str	r2, [r3, #32]
}
 800a6a6:	bf00      	nop
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e06f      	b.n	800a7ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a31      	ldr	r2, [pc, #196]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a30      	ldr	r2, [pc, #192]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d004      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a2e      	ldr	r2, [pc, #184]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d108      	bne.n	800a71c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a710:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1e      	ldr	r2, [pc, #120]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d01d      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74c:	d018      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1c      	ldr	r2, [pc, #112]	; (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d013      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a1a      	ldr	r2, [pc, #104]	; (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d00e      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d009      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d004      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a11      	ldr	r2, [pc, #68]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10c      	bne.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	40012c00 	.word	0x40012c00
 800a7bc:	40013400 	.word	0x40013400
 800a7c0:	40015000 	.word	0x40015000
 800a7c4:	40000400 	.word	0x40000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	40014000 	.word	0x40014000

0800a7d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e096      	b.n	800a91a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	4313      	orrs	r3, r2
 800a846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	041b      	lsls	r3, r3, #16
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a2f      	ldr	r2, [pc, #188]	; (800a928 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d009      	beq.n	800a884 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a2d      	ldr	r2, [pc, #180]	; (800a92c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d004      	beq.n	800a884 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a2c      	ldr	r2, [pc, #176]	; (800a930 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d106      	bne.n	800a892 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a24      	ldr	r2, [pc, #144]	; (800a928 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a22      	ldr	r2, [pc, #136]	; (800a92c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a21      	ldr	r2, [pc, #132]	; (800a930 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d12b      	bne.n	800a908 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	051b      	lsls	r3, r3, #20
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a11      	ldr	r2, [pc, #68]	; (800a928 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d009      	beq.n	800a8fa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d004      	beq.n	800a8fa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a0e      	ldr	r2, [pc, #56]	; (800a930 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d106      	bne.n	800a908 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	4313      	orrs	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40012c00 	.word	0x40012c00
 800a92c:	40013400 	.word	0x40013400
 800a930:	40015000 	.word	0x40015000

0800a934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e042      	b.n	800aa58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7f9 faeb 	bl	8003fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2224      	movs	r2, #36	; 0x24
 800a9ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0201 	bic.w	r2, r2, #1
 800aa00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f8c2 	bl	800ab8c <UART_SetConfig>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d101      	bne.n	800aa12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e022      	b.n	800aa58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fbb2 	bl	800b184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0201 	orr.w	r2, r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fc39 	bl	800b2c8 <UART_CheckIdleState>
 800aa56:	4603      	mov	r3, r0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08a      	sub	sp, #40	; 0x28
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	f040 8083 	bne.w	800ab82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <HAL_UART_Transmit+0x28>
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d101      	bne.n	800aa8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e07b      	b.n	800ab84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d101      	bne.n	800aa9a <HAL_UART_Transmit+0x3a>
 800aa96:	2302      	movs	r3, #2
 800aa98:	e074      	b.n	800ab84 <HAL_UART_Transmit+0x124>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2221      	movs	r2, #33	; 0x21
 800aaae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aab2:	f7f9 fb6b 	bl	800418c <HAL_GetTick>
 800aab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	88fa      	ldrh	r2, [r7, #6]
 800aabc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	88fa      	ldrh	r2, [r7, #6]
 800aac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d108      	bne.n	800aae4 <HAL_UART_Transmit+0x84>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d104      	bne.n	800aae4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	61bb      	str	r3, [r7, #24]
 800aae2:	e003      	b.n	800aaec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aaf4:	e02c      	b.n	800ab50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2200      	movs	r2, #0
 800aafe:	2180      	movs	r1, #128	; 0x80
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 fc2c 	bl	800b35e <UART_WaitOnFlagUntilTimeout>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e039      	b.n	800ab84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10b      	bne.n	800ab2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	3302      	adds	r3, #2
 800ab2a:	61bb      	str	r3, [r7, #24]
 800ab2c:	e007      	b.n	800ab3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1cc      	bne.n	800aaf6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2140      	movs	r1, #64	; 0x40
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fbf9 	bl	800b35e <UART_WaitOnFlagUntilTimeout>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e006      	b.n	800ab84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e000      	b.n	800ab84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ab82:	2302      	movs	r3, #2
  }
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3720      	adds	r7, #32
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab90:	b08c      	sub	sp, #48	; 0x30
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	431a      	orrs	r2, r3
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	431a      	orrs	r2, r3
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4baa      	ldr	r3, [pc, #680]	; (800ae64 <UART_SetConfig+0x2d8>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc4:	430b      	orrs	r3, r1
 800abc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a9f      	ldr	r2, [pc, #636]	; (800ae68 <UART_SetConfig+0x2dc>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d004      	beq.n	800abf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf4:	4313      	orrs	r3, r2
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ac02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	f023 010f 	bic.w	r1, r3, #15
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a90      	ldr	r2, [pc, #576]	; (800ae6c <UART_SetConfig+0x2e0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d125      	bne.n	800ac7c <UART_SetConfig+0xf0>
 800ac30:	4b8f      	ldr	r3, [pc, #572]	; (800ae70 <UART_SetConfig+0x2e4>)
 800ac32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d81a      	bhi.n	800ac74 <UART_SetConfig+0xe8>
 800ac3e:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <UART_SetConfig+0xb8>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac55 	.word	0x0800ac55
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac6d 	.word	0x0800ac6d
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5a:	e116      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac62:	e112      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ac64:	2304      	movs	r3, #4
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6a:	e10e      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ac6c:	2308      	movs	r3, #8
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac72:	e10a      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ac74:	2310      	movs	r3, #16
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7a:	e106      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a7c      	ldr	r2, [pc, #496]	; (800ae74 <UART_SetConfig+0x2e8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d138      	bne.n	800acf8 <UART_SetConfig+0x16c>
 800ac86:	4b7a      	ldr	r3, [pc, #488]	; (800ae70 <UART_SetConfig+0x2e4>)
 800ac88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8c:	f003 030c 	and.w	r3, r3, #12
 800ac90:	2b0c      	cmp	r3, #12
 800ac92:	d82d      	bhi.n	800acf0 <UART_SetConfig+0x164>
 800ac94:	a201      	add	r2, pc, #4	; (adr r2, 800ac9c <UART_SetConfig+0x110>)
 800ac96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9a:	bf00      	nop
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800acf1 	.word	0x0800acf1
 800aca4:	0800acf1 	.word	0x0800acf1
 800aca8:	0800acf1 	.word	0x0800acf1
 800acac:	0800ace1 	.word	0x0800ace1
 800acb0:	0800acf1 	.word	0x0800acf1
 800acb4:	0800acf1 	.word	0x0800acf1
 800acb8:	0800acf1 	.word	0x0800acf1
 800acbc:	0800acd9 	.word	0x0800acd9
 800acc0:	0800acf1 	.word	0x0800acf1
 800acc4:	0800acf1 	.word	0x0800acf1
 800acc8:	0800acf1 	.word	0x0800acf1
 800accc:	0800ace9 	.word	0x0800ace9
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acd6:	e0d8      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800acd8:	2302      	movs	r3, #2
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acde:	e0d4      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ace0:	2304      	movs	r3, #4
 800ace2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ace6:	e0d0      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ace8:	2308      	movs	r3, #8
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acee:	e0cc      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800acf0:	2310      	movs	r3, #16
 800acf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acf6:	e0c8      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a5e      	ldr	r2, [pc, #376]	; (800ae78 <UART_SetConfig+0x2ec>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d125      	bne.n	800ad4e <UART_SetConfig+0x1c2>
 800ad02:	4b5b      	ldr	r3, [pc, #364]	; (800ae70 <UART_SetConfig+0x2e4>)
 800ad04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad0c:	2b30      	cmp	r3, #48	; 0x30
 800ad0e:	d016      	beq.n	800ad3e <UART_SetConfig+0x1b2>
 800ad10:	2b30      	cmp	r3, #48	; 0x30
 800ad12:	d818      	bhi.n	800ad46 <UART_SetConfig+0x1ba>
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d00a      	beq.n	800ad2e <UART_SetConfig+0x1a2>
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d814      	bhi.n	800ad46 <UART_SetConfig+0x1ba>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <UART_SetConfig+0x19a>
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d008      	beq.n	800ad36 <UART_SetConfig+0x1aa>
 800ad24:	e00f      	b.n	800ad46 <UART_SetConfig+0x1ba>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2c:	e0ad      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad34:	e0a9      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad36:	2304      	movs	r3, #4
 800ad38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad3c:	e0a5      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad3e:	2308      	movs	r3, #8
 800ad40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad44:	e0a1      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad46:	2310      	movs	r3, #16
 800ad48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4c:	e09d      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a4a      	ldr	r2, [pc, #296]	; (800ae7c <UART_SetConfig+0x2f0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d125      	bne.n	800ada4 <UART_SetConfig+0x218>
 800ad58:	4b45      	ldr	r3, [pc, #276]	; (800ae70 <UART_SetConfig+0x2e4>)
 800ad5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad62:	2bc0      	cmp	r3, #192	; 0xc0
 800ad64:	d016      	beq.n	800ad94 <UART_SetConfig+0x208>
 800ad66:	2bc0      	cmp	r3, #192	; 0xc0
 800ad68:	d818      	bhi.n	800ad9c <UART_SetConfig+0x210>
 800ad6a:	2b80      	cmp	r3, #128	; 0x80
 800ad6c:	d00a      	beq.n	800ad84 <UART_SetConfig+0x1f8>
 800ad6e:	2b80      	cmp	r3, #128	; 0x80
 800ad70:	d814      	bhi.n	800ad9c <UART_SetConfig+0x210>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <UART_SetConfig+0x1f0>
 800ad76:	2b40      	cmp	r3, #64	; 0x40
 800ad78:	d008      	beq.n	800ad8c <UART_SetConfig+0x200>
 800ad7a:	e00f      	b.n	800ad9c <UART_SetConfig+0x210>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad82:	e082      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad84:	2302      	movs	r3, #2
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad8a:	e07e      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad8c:	2304      	movs	r3, #4
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad92:	e07a      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad94:	2308      	movs	r3, #8
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad9a:	e076      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ad9c:	2310      	movs	r3, #16
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ada2:	e072      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a35      	ldr	r2, [pc, #212]	; (800ae80 <UART_SetConfig+0x2f4>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d12a      	bne.n	800ae04 <UART_SetConfig+0x278>
 800adae:	4b30      	ldr	r3, [pc, #192]	; (800ae70 <UART_SetConfig+0x2e4>)
 800adb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adbc:	d01a      	beq.n	800adf4 <UART_SetConfig+0x268>
 800adbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adc2:	d81b      	bhi.n	800adfc <UART_SetConfig+0x270>
 800adc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc8:	d00c      	beq.n	800ade4 <UART_SetConfig+0x258>
 800adca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adce:	d815      	bhi.n	800adfc <UART_SetConfig+0x270>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <UART_SetConfig+0x250>
 800add4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add8:	d008      	beq.n	800adec <UART_SetConfig+0x260>
 800adda:	e00f      	b.n	800adfc <UART_SetConfig+0x270>
 800addc:	2300      	movs	r3, #0
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ade2:	e052      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ade4:	2302      	movs	r3, #2
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adea:	e04e      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800adec:	2304      	movs	r3, #4
 800adee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adf2:	e04a      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800adf4:	2308      	movs	r3, #8
 800adf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adfa:	e046      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800adfc:	2310      	movs	r3, #16
 800adfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae02:	e042      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a17      	ldr	r2, [pc, #92]	; (800ae68 <UART_SetConfig+0x2dc>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d13a      	bne.n	800ae84 <UART_SetConfig+0x2f8>
 800ae0e:	4b18      	ldr	r3, [pc, #96]	; (800ae70 <UART_SetConfig+0x2e4>)
 800ae10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae1c:	d01a      	beq.n	800ae54 <UART_SetConfig+0x2c8>
 800ae1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae22:	d81b      	bhi.n	800ae5c <UART_SetConfig+0x2d0>
 800ae24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae28:	d00c      	beq.n	800ae44 <UART_SetConfig+0x2b8>
 800ae2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae2e:	d815      	bhi.n	800ae5c <UART_SetConfig+0x2d0>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <UART_SetConfig+0x2b0>
 800ae34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae38:	d008      	beq.n	800ae4c <UART_SetConfig+0x2c0>
 800ae3a:	e00f      	b.n	800ae5c <UART_SetConfig+0x2d0>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae42:	e022      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae44:	2302      	movs	r3, #2
 800ae46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae4a:	e01e      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae52:	e01a      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae54:	2308      	movs	r3, #8
 800ae56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae5a:	e016      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae62:	e012      	b.n	800ae8a <UART_SetConfig+0x2fe>
 800ae64:	cfff69f3 	.word	0xcfff69f3
 800ae68:	40008000 	.word	0x40008000
 800ae6c:	40013800 	.word	0x40013800
 800ae70:	40021000 	.word	0x40021000
 800ae74:	40004400 	.word	0x40004400
 800ae78:	40004800 	.word	0x40004800
 800ae7c:	40004c00 	.word	0x40004c00
 800ae80:	40005000 	.word	0x40005000
 800ae84:	2310      	movs	r3, #16
 800ae86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4aae      	ldr	r2, [pc, #696]	; (800b148 <UART_SetConfig+0x5bc>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	f040 8097 	bne.w	800afc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae9a:	2b08      	cmp	r3, #8
 800ae9c:	d823      	bhi.n	800aee6 <UART_SetConfig+0x35a>
 800ae9e:	a201      	add	r2, pc, #4	; (adr r2, 800aea4 <UART_SetConfig+0x318>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aec9 	.word	0x0800aec9
 800aea8:	0800aee7 	.word	0x0800aee7
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aee7 	.word	0x0800aee7
 800aeb4:	0800aed7 	.word	0x0800aed7
 800aeb8:	0800aee7 	.word	0x0800aee7
 800aebc:	0800aee7 	.word	0x0800aee7
 800aec0:	0800aee7 	.word	0x0800aee7
 800aec4:	0800aedf 	.word	0x0800aedf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aec8:	f7fd f8b4 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800aecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aece:	e010      	b.n	800aef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aed0:	4b9e      	ldr	r3, [pc, #632]	; (800b14c <UART_SetConfig+0x5c0>)
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aed4:	e00d      	b.n	800aef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aed6:	f7fd f841 	bl	8007f5c <HAL_RCC_GetSysClockFreq>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aedc:	e009      	b.n	800aef2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aee4:	e005      	b.n	800aef2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 8130 	beq.w	800b15a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	4a94      	ldr	r2, [pc, #592]	; (800b150 <UART_SetConfig+0x5c4>)
 800af00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af04:	461a      	mov	r2, r3
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	fbb3 f3f2 	udiv	r3, r3, r2
 800af0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	4413      	add	r3, r2
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d305      	bcc.n	800af2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	d903      	bls.n	800af32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af30:	e113      	b.n	800b15a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	2200      	movs	r2, #0
 800af36:	60bb      	str	r3, [r7, #8]
 800af38:	60fa      	str	r2, [r7, #12]
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	4a84      	ldr	r2, [pc, #528]	; (800b150 <UART_SetConfig+0x5c4>)
 800af40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af44:	b29b      	uxth	r3, r3
 800af46:	2200      	movs	r2, #0
 800af48:	603b      	str	r3, [r7, #0]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af54:	f7f5 fea0 	bl	8000c98 <__aeabi_uldivmod>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4610      	mov	r0, r2
 800af5e:	4619      	mov	r1, r3
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	f04f 0300 	mov.w	r3, #0
 800af68:	020b      	lsls	r3, r1, #8
 800af6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af6e:	0202      	lsls	r2, r0, #8
 800af70:	6979      	ldr	r1, [r7, #20]
 800af72:	6849      	ldr	r1, [r1, #4]
 800af74:	0849      	lsrs	r1, r1, #1
 800af76:	2000      	movs	r0, #0
 800af78:	460c      	mov	r4, r1
 800af7a:	4605      	mov	r5, r0
 800af7c:	eb12 0804 	adds.w	r8, r2, r4
 800af80:	eb43 0905 	adc.w	r9, r3, r5
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	469a      	mov	sl, r3
 800af8c:	4693      	mov	fp, r2
 800af8e:	4652      	mov	r2, sl
 800af90:	465b      	mov	r3, fp
 800af92:	4640      	mov	r0, r8
 800af94:	4649      	mov	r1, r9
 800af96:	f7f5 fe7f 	bl	8000c98 <__aeabi_uldivmod>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4613      	mov	r3, r2
 800afa0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afa8:	d308      	bcc.n	800afbc <UART_SetConfig+0x430>
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb0:	d204      	bcs.n	800afbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6a3a      	ldr	r2, [r7, #32]
 800afb8:	60da      	str	r2, [r3, #12]
 800afba:	e0ce      	b.n	800b15a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800afc2:	e0ca      	b.n	800b15a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afcc:	d166      	bne.n	800b09c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800afce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d827      	bhi.n	800b026 <UART_SetConfig+0x49a>
 800afd6:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <UART_SetConfig+0x450>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800b001 	.word	0x0800b001
 800afe0:	0800b009 	.word	0x0800b009
 800afe4:	0800b011 	.word	0x0800b011
 800afe8:	0800b027 	.word	0x0800b027
 800afec:	0800b017 	.word	0x0800b017
 800aff0:	0800b027 	.word	0x0800b027
 800aff4:	0800b027 	.word	0x0800b027
 800aff8:	0800b027 	.word	0x0800b027
 800affc:	0800b01f 	.word	0x0800b01f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b000:	f7fd f818 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800b004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b006:	e014      	b.n	800b032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b008:	f7fd f82a 	bl	8008060 <HAL_RCC_GetPCLK2Freq>
 800b00c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b00e:	e010      	b.n	800b032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b010:	4b4e      	ldr	r3, [pc, #312]	; (800b14c <UART_SetConfig+0x5c0>)
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b014:	e00d      	b.n	800b032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b016:	f7fc ffa1 	bl	8007f5c <HAL_RCC_GetSysClockFreq>
 800b01a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b01c:	e009      	b.n	800b032 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b01e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b024:	e005      	b.n	800b032 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 8090 	beq.w	800b15a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	4a44      	ldr	r2, [pc, #272]	; (800b150 <UART_SetConfig+0x5c4>)
 800b040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b044:	461a      	mov	r2, r3
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	fbb3 f3f2 	udiv	r3, r3, r2
 800b04c:	005a      	lsls	r2, r3, #1
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	441a      	add	r2, r3
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d916      	bls.n	800b094 <UART_SetConfig+0x508>
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b06c:	d212      	bcs.n	800b094 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	b29b      	uxth	r3, r3
 800b072:	f023 030f 	bic.w	r3, r3, #15
 800b076:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	085b      	lsrs	r3, r3, #1
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	b29a      	uxth	r2, r3
 800b084:	8bfb      	ldrh	r3, [r7, #30]
 800b086:	4313      	orrs	r3, r2
 800b088:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	8bfa      	ldrh	r2, [r7, #30]
 800b090:	60da      	str	r2, [r3, #12]
 800b092:	e062      	b.n	800b15a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b09a:	e05e      	b.n	800b15a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b09c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d828      	bhi.n	800b0f6 <UART_SetConfig+0x56a>
 800b0a4:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <UART_SetConfig+0x520>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0d9 	.word	0x0800b0d9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	0800b0f7 	.word	0x0800b0f7
 800b0bc:	0800b0e7 	.word	0x0800b0e7
 800b0c0:	0800b0f7 	.word	0x0800b0f7
 800b0c4:	0800b0f7 	.word	0x0800b0f7
 800b0c8:	0800b0f7 	.word	0x0800b0f7
 800b0cc:	0800b0ef 	.word	0x0800b0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0d0:	f7fc ffb0 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800b0d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0d6:	e014      	b.n	800b102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0d8:	f7fc ffc2 	bl	8008060 <HAL_RCC_GetPCLK2Freq>
 800b0dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0de:	e010      	b.n	800b102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0e0:	4b1a      	ldr	r3, [pc, #104]	; (800b14c <UART_SetConfig+0x5c0>)
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0e4:	e00d      	b.n	800b102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0e6:	f7fc ff39 	bl	8007f5c <HAL_RCC_GetSysClockFreq>
 800b0ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0ec:	e009      	b.n	800b102 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0f4:	e005      	b.n	800b102 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b100:	bf00      	nop
    }

    if (pclk != 0U)
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d028      	beq.n	800b15a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	4a10      	ldr	r2, [pc, #64]	; (800b150 <UART_SetConfig+0x5c4>)
 800b10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b112:	461a      	mov	r2, r3
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	fbb3 f2f2 	udiv	r2, r3, r2
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	441a      	add	r2, r3
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	2b0f      	cmp	r3, #15
 800b130:	d910      	bls.n	800b154 <UART_SetConfig+0x5c8>
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b138:	d20c      	bcs.n	800b154 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60da      	str	r2, [r3, #12]
 800b144:	e009      	b.n	800b15a <UART_SetConfig+0x5ce>
 800b146:	bf00      	nop
 800b148:	40008000 	.word	0x40008000
 800b14c:	00f42400 	.word	0x00f42400
 800b150:	0800e37c 	.word	0x0800e37c
      }
      else
      {
        ret = HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2201      	movs	r2, #1
 800b166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2200      	movs	r2, #0
 800b16e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2200      	movs	r2, #0
 800b174:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b176:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3730      	adds	r7, #48	; 0x30
 800b17e:	46bd      	mov	sp, r7
 800b180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00a      	beq.n	800b1ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00a      	beq.n	800b1f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f6:	f003 0308 	and.w	r3, r3, #8
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00a      	beq.n	800b214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	430a      	orrs	r2, r1
 800b212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b218:	f003 0310 	and.w	r3, r3, #16
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	430a      	orrs	r2, r1
 800b256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	d01a      	beq.n	800b29a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b27e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b282:	d10a      	bne.n	800b29a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	430a      	orrs	r2, r1
 800b298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	430a      	orrs	r2, r1
 800b2ba:	605a      	str	r2, [r3, #4]
  }
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2d8:	f7f8 ff58 	bl	800418c <HAL_GetTick>
 800b2dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d10e      	bne.n	800b30a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f82f 	bl	800b35e <UART_WaitOnFlagUntilTimeout>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e025      	b.n	800b356 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b04      	cmp	r3, #4
 800b316:	d10e      	bne.n	800b336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f819 	bl	800b35e <UART_WaitOnFlagUntilTimeout>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e00f      	b.n	800b356 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2220      	movs	r2, #32
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b09c      	sub	sp, #112	; 0x70
 800b362:	af00      	add	r7, sp, #0
 800b364:	60f8      	str	r0, [r7, #12]
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	603b      	str	r3, [r7, #0]
 800b36a:	4613      	mov	r3, r2
 800b36c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b36e:	e0a9      	b.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b376:	f000 80a5 	beq.w	800b4c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b37a:	f7f8 ff07 	bl	800418c <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b386:	429a      	cmp	r2, r3
 800b388:	d302      	bcc.n	800b390 <UART_WaitOnFlagUntilTimeout+0x32>
 800b38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d140      	bne.n	800b412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3a4:	667b      	str	r3, [r7, #100]	; 0x64
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e6      	bne.n	800b390 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	f023 0301 	bic.w	r3, r3, #1
 800b3d8:	663b      	str	r3, [r7, #96]	; 0x60
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3308      	adds	r3, #8
 800b3e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e5      	bne.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e069      	b.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0304 	and.w	r3, r3, #4
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d051      	beq.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b42a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b42e:	d149      	bne.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b438:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	461a      	mov	r2, r3
 800b456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b458:	637b      	str	r3, [r7, #52]	; 0x34
 800b45a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b45e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e6      	bne.n	800b43a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3308      	adds	r3, #8
 800b472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	613b      	str	r3, [r7, #16]
   return(result);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f023 0301 	bic.w	r3, r3, #1
 800b482:	66bb      	str	r3, [r7, #104]	; 0x68
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3308      	adds	r3, #8
 800b48a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b48c:	623a      	str	r2, [r7, #32]
 800b48e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	69f9      	ldr	r1, [r7, #28]
 800b492:	6a3a      	ldr	r2, [r7, #32]
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	61bb      	str	r3, [r7, #24]
   return(result);
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e5      	bne.n	800b46c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2220      	movs	r2, #32
 800b4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2220      	movs	r2, #32
 800b4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e010      	b.n	800b4e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	69da      	ldr	r2, [r3, #28]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	bf0c      	ite	eq
 800b4d4:	2301      	moveq	r3, #1
 800b4d6:	2300      	movne	r3, #0
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	461a      	mov	r2, r3
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	f43f af46 	beq.w	800b370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3770      	adds	r7, #112	; 0x70
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_UARTEx_DisableFifoMode+0x16>
 800b500:	2302      	movs	r3, #2
 800b502:	e027      	b.n	800b554 <HAL_UARTEx_DisableFifoMode+0x66>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2224      	movs	r2, #36	; 0x24
 800b510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0201 	bic.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b532:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b570:	2b01      	cmp	r3, #1
 800b572:	d101      	bne.n	800b578 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b574:	2302      	movs	r3, #2
 800b576:	e02d      	b.n	800b5d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2224      	movs	r2, #36	; 0x24
 800b584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f022 0201 	bic.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f84f 	bl	800b658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d101      	bne.n	800b5f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	e02d      	b.n	800b650 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2224      	movs	r2, #36	; 0x24
 800b600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f811 	bl	800b658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b664:	2b00      	cmp	r3, #0
 800b666:	d108      	bne.n	800b67a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b678:	e031      	b.n	800b6de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b67a:	2308      	movs	r3, #8
 800b67c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b67e:	2308      	movs	r3, #8
 800b680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	0e5b      	lsrs	r3, r3, #25
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	0f5b      	lsrs	r3, r3, #29
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	7b3a      	ldrb	r2, [r7, #12]
 800b6a6:	4911      	ldr	r1, [pc, #68]	; (800b6ec <UARTEx_SetNbDataToProcess+0x94>)
 800b6a8:	5c8a      	ldrb	r2, [r1, r2]
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6ae:	7b3a      	ldrb	r2, [r7, #12]
 800b6b0:	490f      	ldr	r1, [pc, #60]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	7b7a      	ldrb	r2, [r7, #13]
 800b6c4:	4909      	ldr	r1, [pc, #36]	; (800b6ec <UARTEx_SetNbDataToProcess+0x94>)
 800b6c6:	5c8a      	ldrb	r2, [r1, r2]
 800b6c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6cc:	7b7a      	ldrb	r2, [r7, #13]
 800b6ce:	4908      	ldr	r1, [pc, #32]	; (800b6f0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b6de:	bf00      	nop
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	0800e394 	.word	0x0800e394
 800b6f0:	0800e39c 	.word	0x0800e39c

0800b6f4 <__errno>:
 800b6f4:	4b01      	ldr	r3, [pc, #4]	; (800b6fc <__errno+0x8>)
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	2000002c 	.word	0x2000002c

0800b700 <__libc_init_array>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	4d0d      	ldr	r5, [pc, #52]	; (800b738 <__libc_init_array+0x38>)
 800b704:	4c0d      	ldr	r4, [pc, #52]	; (800b73c <__libc_init_array+0x3c>)
 800b706:	1b64      	subs	r4, r4, r5
 800b708:	10a4      	asrs	r4, r4, #2
 800b70a:	2600      	movs	r6, #0
 800b70c:	42a6      	cmp	r6, r4
 800b70e:	d109      	bne.n	800b724 <__libc_init_array+0x24>
 800b710:	4d0b      	ldr	r5, [pc, #44]	; (800b740 <__libc_init_array+0x40>)
 800b712:	4c0c      	ldr	r4, [pc, #48]	; (800b744 <__libc_init_array+0x44>)
 800b714:	f002 fdac 	bl	800e270 <_init>
 800b718:	1b64      	subs	r4, r4, r5
 800b71a:	10a4      	asrs	r4, r4, #2
 800b71c:	2600      	movs	r6, #0
 800b71e:	42a6      	cmp	r6, r4
 800b720:	d105      	bne.n	800b72e <__libc_init_array+0x2e>
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	f855 3b04 	ldr.w	r3, [r5], #4
 800b728:	4798      	blx	r3
 800b72a:	3601      	adds	r6, #1
 800b72c:	e7ee      	b.n	800b70c <__libc_init_array+0xc>
 800b72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b732:	4798      	blx	r3
 800b734:	3601      	adds	r6, #1
 800b736:	e7f2      	b.n	800b71e <__libc_init_array+0x1e>
 800b738:	0800e784 	.word	0x0800e784
 800b73c:	0800e784 	.word	0x0800e784
 800b740:	0800e784 	.word	0x0800e784
 800b744:	0800e788 	.word	0x0800e788

0800b748 <memcpy>:
 800b748:	440a      	add	r2, r1
 800b74a:	4291      	cmp	r1, r2
 800b74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b750:	d100      	bne.n	800b754 <memcpy+0xc>
 800b752:	4770      	bx	lr
 800b754:	b510      	push	{r4, lr}
 800b756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b75e:	4291      	cmp	r1, r2
 800b760:	d1f9      	bne.n	800b756 <memcpy+0xe>
 800b762:	bd10      	pop	{r4, pc}

0800b764 <memset>:
 800b764:	4402      	add	r2, r0
 800b766:	4603      	mov	r3, r0
 800b768:	4293      	cmp	r3, r2
 800b76a:	d100      	bne.n	800b76e <memset+0xa>
 800b76c:	4770      	bx	lr
 800b76e:	f803 1b01 	strb.w	r1, [r3], #1
 800b772:	e7f9      	b.n	800b768 <memset+0x4>

0800b774 <__cvt>:
 800b774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	ec55 4b10 	vmov	r4, r5, d0
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	460e      	mov	r6, r1
 800b780:	4619      	mov	r1, r3
 800b782:	462b      	mov	r3, r5
 800b784:	bfbb      	ittet	lt
 800b786:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b78a:	461d      	movlt	r5, r3
 800b78c:	2300      	movge	r3, #0
 800b78e:	232d      	movlt	r3, #45	; 0x2d
 800b790:	700b      	strb	r3, [r1, #0]
 800b792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b794:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b798:	4691      	mov	r9, r2
 800b79a:	f023 0820 	bic.w	r8, r3, #32
 800b79e:	bfbc      	itt	lt
 800b7a0:	4622      	movlt	r2, r4
 800b7a2:	4614      	movlt	r4, r2
 800b7a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7a8:	d005      	beq.n	800b7b6 <__cvt+0x42>
 800b7aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7ae:	d100      	bne.n	800b7b2 <__cvt+0x3e>
 800b7b0:	3601      	adds	r6, #1
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	e000      	b.n	800b7b8 <__cvt+0x44>
 800b7b6:	2103      	movs	r1, #3
 800b7b8:	ab03      	add	r3, sp, #12
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	ab02      	add	r3, sp, #8
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	ec45 4b10 	vmov	d0, r4, r5
 800b7c4:	4653      	mov	r3, sl
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	f000 fdba 	bl	800c340 <_dtoa_r>
 800b7cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	d102      	bne.n	800b7da <__cvt+0x66>
 800b7d4:	f019 0f01 	tst.w	r9, #1
 800b7d8:	d022      	beq.n	800b820 <__cvt+0xac>
 800b7da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7de:	eb07 0906 	add.w	r9, r7, r6
 800b7e2:	d110      	bne.n	800b806 <__cvt+0x92>
 800b7e4:	783b      	ldrb	r3, [r7, #0]
 800b7e6:	2b30      	cmp	r3, #48	; 0x30
 800b7e8:	d10a      	bne.n	800b800 <__cvt+0x8c>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f5 f991 	bl	8000b18 <__aeabi_dcmpeq>
 800b7f6:	b918      	cbnz	r0, 800b800 <__cvt+0x8c>
 800b7f8:	f1c6 0601 	rsb	r6, r6, #1
 800b7fc:	f8ca 6000 	str.w	r6, [sl]
 800b800:	f8da 3000 	ldr.w	r3, [sl]
 800b804:	4499      	add	r9, r3
 800b806:	2200      	movs	r2, #0
 800b808:	2300      	movs	r3, #0
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f5 f983 	bl	8000b18 <__aeabi_dcmpeq>
 800b812:	b108      	cbz	r0, 800b818 <__cvt+0xa4>
 800b814:	f8cd 900c 	str.w	r9, [sp, #12]
 800b818:	2230      	movs	r2, #48	; 0x30
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	454b      	cmp	r3, r9
 800b81e:	d307      	bcc.n	800b830 <__cvt+0xbc>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b824:	1bdb      	subs	r3, r3, r7
 800b826:	4638      	mov	r0, r7
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	b004      	add	sp, #16
 800b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b830:	1c59      	adds	r1, r3, #1
 800b832:	9103      	str	r1, [sp, #12]
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	e7f0      	b.n	800b81a <__cvt+0xa6>

0800b838 <__exponent>:
 800b838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83a:	4603      	mov	r3, r0
 800b83c:	2900      	cmp	r1, #0
 800b83e:	bfb8      	it	lt
 800b840:	4249      	neglt	r1, r1
 800b842:	f803 2b02 	strb.w	r2, [r3], #2
 800b846:	bfb4      	ite	lt
 800b848:	222d      	movlt	r2, #45	; 0x2d
 800b84a:	222b      	movge	r2, #43	; 0x2b
 800b84c:	2909      	cmp	r1, #9
 800b84e:	7042      	strb	r2, [r0, #1]
 800b850:	dd2a      	ble.n	800b8a8 <__exponent+0x70>
 800b852:	f10d 0407 	add.w	r4, sp, #7
 800b856:	46a4      	mov	ip, r4
 800b858:	270a      	movs	r7, #10
 800b85a:	46a6      	mov	lr, r4
 800b85c:	460a      	mov	r2, r1
 800b85e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b862:	fb07 1516 	mls	r5, r7, r6, r1
 800b866:	3530      	adds	r5, #48	; 0x30
 800b868:	2a63      	cmp	r2, #99	; 0x63
 800b86a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b86e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b872:	4631      	mov	r1, r6
 800b874:	dcf1      	bgt.n	800b85a <__exponent+0x22>
 800b876:	3130      	adds	r1, #48	; 0x30
 800b878:	f1ae 0502 	sub.w	r5, lr, #2
 800b87c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b880:	1c44      	adds	r4, r0, #1
 800b882:	4629      	mov	r1, r5
 800b884:	4561      	cmp	r1, ip
 800b886:	d30a      	bcc.n	800b89e <__exponent+0x66>
 800b888:	f10d 0209 	add.w	r2, sp, #9
 800b88c:	eba2 020e 	sub.w	r2, r2, lr
 800b890:	4565      	cmp	r5, ip
 800b892:	bf88      	it	hi
 800b894:	2200      	movhi	r2, #0
 800b896:	4413      	add	r3, r2
 800b898:	1a18      	subs	r0, r3, r0
 800b89a:	b003      	add	sp, #12
 800b89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8a6:	e7ed      	b.n	800b884 <__exponent+0x4c>
 800b8a8:	2330      	movs	r3, #48	; 0x30
 800b8aa:	3130      	adds	r1, #48	; 0x30
 800b8ac:	7083      	strb	r3, [r0, #2]
 800b8ae:	70c1      	strb	r1, [r0, #3]
 800b8b0:	1d03      	adds	r3, r0, #4
 800b8b2:	e7f1      	b.n	800b898 <__exponent+0x60>

0800b8b4 <_printf_float>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	ed2d 8b02 	vpush	{d8}
 800b8bc:	b08d      	sub	sp, #52	; 0x34
 800b8be:	460c      	mov	r4, r1
 800b8c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	461f      	mov	r7, r3
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	f001 fcdf 	bl	800d28c <_localeconv_r>
 800b8ce:	f8d0 a000 	ldr.w	sl, [r0]
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	f7f4 fca4 	bl	8000220 <strlen>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	930a      	str	r3, [sp, #40]	; 0x28
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	9305      	str	r3, [sp, #20]
 800b8e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8e8:	3307      	adds	r3, #7
 800b8ea:	f023 0307 	bic.w	r3, r3, #7
 800b8ee:	f103 0208 	add.w	r2, r3, #8
 800b8f2:	f8c8 2000 	str.w	r2, [r8]
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	f8cd 8018 	str.w	r8, [sp, #24]
 800b90c:	ee08 0a10 	vmov	s16, r0
 800b910:	4b9f      	ldr	r3, [pc, #636]	; (800bb90 <_printf_float+0x2dc>)
 800b912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b916:	f04f 32ff 	mov.w	r2, #4294967295
 800b91a:	f7f5 f92f 	bl	8000b7c <__aeabi_dcmpun>
 800b91e:	bb88      	cbnz	r0, 800b984 <_printf_float+0xd0>
 800b920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b924:	4b9a      	ldr	r3, [pc, #616]	; (800bb90 <_printf_float+0x2dc>)
 800b926:	f04f 32ff 	mov.w	r2, #4294967295
 800b92a:	f7f5 f909 	bl	8000b40 <__aeabi_dcmple>
 800b92e:	bb48      	cbnz	r0, 800b984 <_printf_float+0xd0>
 800b930:	2200      	movs	r2, #0
 800b932:	2300      	movs	r3, #0
 800b934:	4640      	mov	r0, r8
 800b936:	4649      	mov	r1, r9
 800b938:	f7f5 f8f8 	bl	8000b2c <__aeabi_dcmplt>
 800b93c:	b110      	cbz	r0, 800b944 <_printf_float+0x90>
 800b93e:	232d      	movs	r3, #45	; 0x2d
 800b940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b944:	4b93      	ldr	r3, [pc, #588]	; (800bb94 <_printf_float+0x2e0>)
 800b946:	4894      	ldr	r0, [pc, #592]	; (800bb98 <_printf_float+0x2e4>)
 800b948:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b94c:	bf94      	ite	ls
 800b94e:	4698      	movls	r8, r3
 800b950:	4680      	movhi	r8, r0
 800b952:	2303      	movs	r3, #3
 800b954:	6123      	str	r3, [r4, #16]
 800b956:	9b05      	ldr	r3, [sp, #20]
 800b958:	f023 0204 	bic.w	r2, r3, #4
 800b95c:	6022      	str	r2, [r4, #0]
 800b95e:	f04f 0900 	mov.w	r9, #0
 800b962:	9700      	str	r7, [sp, #0]
 800b964:	4633      	mov	r3, r6
 800b966:	aa0b      	add	r2, sp, #44	; 0x2c
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f9d8 	bl	800bd20 <_printf_common>
 800b970:	3001      	adds	r0, #1
 800b972:	f040 8090 	bne.w	800ba96 <_printf_float+0x1e2>
 800b976:	f04f 30ff 	mov.w	r0, #4294967295
 800b97a:	b00d      	add	sp, #52	; 0x34
 800b97c:	ecbd 8b02 	vpop	{d8}
 800b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b984:	4642      	mov	r2, r8
 800b986:	464b      	mov	r3, r9
 800b988:	4640      	mov	r0, r8
 800b98a:	4649      	mov	r1, r9
 800b98c:	f7f5 f8f6 	bl	8000b7c <__aeabi_dcmpun>
 800b990:	b140      	cbz	r0, 800b9a4 <_printf_float+0xf0>
 800b992:	464b      	mov	r3, r9
 800b994:	2b00      	cmp	r3, #0
 800b996:	bfbc      	itt	lt
 800b998:	232d      	movlt	r3, #45	; 0x2d
 800b99a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b99e:	487f      	ldr	r0, [pc, #508]	; (800bb9c <_printf_float+0x2e8>)
 800b9a0:	4b7f      	ldr	r3, [pc, #508]	; (800bba0 <_printf_float+0x2ec>)
 800b9a2:	e7d1      	b.n	800b948 <_printf_float+0x94>
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9aa:	9206      	str	r2, [sp, #24]
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	d13f      	bne.n	800ba30 <_printf_float+0x17c>
 800b9b0:	2306      	movs	r3, #6
 800b9b2:	6063      	str	r3, [r4, #4]
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	6861      	ldr	r1, [r4, #4]
 800b9b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	ab0a      	add	r3, sp, #40	; 0x28
 800b9c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9c6:	ab09      	add	r3, sp, #36	; 0x24
 800b9c8:	ec49 8b10 	vmov	d0, r8, r9
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	6022      	str	r2, [r4, #0]
 800b9d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f7ff fecd 	bl	800b774 <__cvt>
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9de:	2b47      	cmp	r3, #71	; 0x47
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	d108      	bne.n	800b9f6 <_printf_float+0x142>
 800b9e4:	1cc8      	adds	r0, r1, #3
 800b9e6:	db02      	blt.n	800b9ee <_printf_float+0x13a>
 800b9e8:	6863      	ldr	r3, [r4, #4]
 800b9ea:	4299      	cmp	r1, r3
 800b9ec:	dd41      	ble.n	800ba72 <_printf_float+0x1be>
 800b9ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9f2:	fa5f fb8b 	uxtb.w	fp, fp
 800b9f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9fa:	d820      	bhi.n	800ba3e <_printf_float+0x18a>
 800b9fc:	3901      	subs	r1, #1
 800b9fe:	465a      	mov	r2, fp
 800ba00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba04:	9109      	str	r1, [sp, #36]	; 0x24
 800ba06:	f7ff ff17 	bl	800b838 <__exponent>
 800ba0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba0c:	1813      	adds	r3, r2, r0
 800ba0e:	2a01      	cmp	r2, #1
 800ba10:	4681      	mov	r9, r0
 800ba12:	6123      	str	r3, [r4, #16]
 800ba14:	dc02      	bgt.n	800ba1c <_printf_float+0x168>
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	07d2      	lsls	r2, r2, #31
 800ba1a:	d501      	bpl.n	800ba20 <_printf_float+0x16c>
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d09c      	beq.n	800b962 <_printf_float+0xae>
 800ba28:	232d      	movs	r3, #45	; 0x2d
 800ba2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba2e:	e798      	b.n	800b962 <_printf_float+0xae>
 800ba30:	9a06      	ldr	r2, [sp, #24]
 800ba32:	2a47      	cmp	r2, #71	; 0x47
 800ba34:	d1be      	bne.n	800b9b4 <_printf_float+0x100>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1bc      	bne.n	800b9b4 <_printf_float+0x100>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e7b9      	b.n	800b9b2 <_printf_float+0xfe>
 800ba3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba42:	d118      	bne.n	800ba76 <_printf_float+0x1c2>
 800ba44:	2900      	cmp	r1, #0
 800ba46:	6863      	ldr	r3, [r4, #4]
 800ba48:	dd0b      	ble.n	800ba62 <_printf_float+0x1ae>
 800ba4a:	6121      	str	r1, [r4, #16]
 800ba4c:	b913      	cbnz	r3, 800ba54 <_printf_float+0x1a0>
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	07d0      	lsls	r0, r2, #31
 800ba52:	d502      	bpl.n	800ba5a <_printf_float+0x1a6>
 800ba54:	3301      	adds	r3, #1
 800ba56:	440b      	add	r3, r1
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba5c:	f04f 0900 	mov.w	r9, #0
 800ba60:	e7de      	b.n	800ba20 <_printf_float+0x16c>
 800ba62:	b913      	cbnz	r3, 800ba6a <_printf_float+0x1b6>
 800ba64:	6822      	ldr	r2, [r4, #0]
 800ba66:	07d2      	lsls	r2, r2, #31
 800ba68:	d501      	bpl.n	800ba6e <_printf_float+0x1ba>
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	e7f4      	b.n	800ba58 <_printf_float+0x1a4>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e7f2      	b.n	800ba58 <_printf_float+0x1a4>
 800ba72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	db05      	blt.n	800ba88 <_printf_float+0x1d4>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	6121      	str	r1, [r4, #16]
 800ba80:	07d8      	lsls	r0, r3, #31
 800ba82:	d5ea      	bpl.n	800ba5a <_printf_float+0x1a6>
 800ba84:	1c4b      	adds	r3, r1, #1
 800ba86:	e7e7      	b.n	800ba58 <_printf_float+0x1a4>
 800ba88:	2900      	cmp	r1, #0
 800ba8a:	bfd4      	ite	le
 800ba8c:	f1c1 0202 	rsble	r2, r1, #2
 800ba90:	2201      	movgt	r2, #1
 800ba92:	4413      	add	r3, r2
 800ba94:	e7e0      	b.n	800ba58 <_printf_float+0x1a4>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	055a      	lsls	r2, r3, #21
 800ba9a:	d407      	bmi.n	800baac <_printf_float+0x1f8>
 800ba9c:	6923      	ldr	r3, [r4, #16]
 800ba9e:	4642      	mov	r2, r8
 800baa0:	4631      	mov	r1, r6
 800baa2:	4628      	mov	r0, r5
 800baa4:	47b8      	blx	r7
 800baa6:	3001      	adds	r0, #1
 800baa8:	d12c      	bne.n	800bb04 <_printf_float+0x250>
 800baaa:	e764      	b.n	800b976 <_printf_float+0xc2>
 800baac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bab0:	f240 80e0 	bls.w	800bc74 <_printf_float+0x3c0>
 800bab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bab8:	2200      	movs	r2, #0
 800baba:	2300      	movs	r3, #0
 800babc:	f7f5 f82c 	bl	8000b18 <__aeabi_dcmpeq>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d034      	beq.n	800bb2e <_printf_float+0x27a>
 800bac4:	4a37      	ldr	r2, [pc, #220]	; (800bba4 <_printf_float+0x2f0>)
 800bac6:	2301      	movs	r3, #1
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f af51 	beq.w	800b976 <_printf_float+0xc2>
 800bad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bad8:	429a      	cmp	r2, r3
 800bada:	db02      	blt.n	800bae2 <_printf_float+0x22e>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	07d8      	lsls	r0, r3, #31
 800bae0:	d510      	bpl.n	800bb04 <_printf_float+0x250>
 800bae2:	ee18 3a10 	vmov	r3, s16
 800bae6:	4652      	mov	r2, sl
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	47b8      	blx	r7
 800baee:	3001      	adds	r0, #1
 800baf0:	f43f af41 	beq.w	800b976 <_printf_float+0xc2>
 800baf4:	f04f 0800 	mov.w	r8, #0
 800baf8:	f104 091a 	add.w	r9, r4, #26
 800bafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafe:	3b01      	subs	r3, #1
 800bb00:	4543      	cmp	r3, r8
 800bb02:	dc09      	bgt.n	800bb18 <_printf_float+0x264>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	079b      	lsls	r3, r3, #30
 800bb08:	f100 8105 	bmi.w	800bd16 <_printf_float+0x462>
 800bb0c:	68e0      	ldr	r0, [r4, #12]
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb10:	4298      	cmp	r0, r3
 800bb12:	bfb8      	it	lt
 800bb14:	4618      	movlt	r0, r3
 800bb16:	e730      	b.n	800b97a <_printf_float+0xc6>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	464a      	mov	r2, r9
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	f43f af27 	beq.w	800b976 <_printf_float+0xc2>
 800bb28:	f108 0801 	add.w	r8, r8, #1
 800bb2c:	e7e6      	b.n	800bafc <_printf_float+0x248>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	dc39      	bgt.n	800bba8 <_printf_float+0x2f4>
 800bb34:	4a1b      	ldr	r2, [pc, #108]	; (800bba4 <_printf_float+0x2f0>)
 800bb36:	2301      	movs	r3, #1
 800bb38:	4631      	mov	r1, r6
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	47b8      	blx	r7
 800bb3e:	3001      	adds	r0, #1
 800bb40:	f43f af19 	beq.w	800b976 <_printf_float+0xc2>
 800bb44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d102      	bne.n	800bb52 <_printf_float+0x29e>
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	07d9      	lsls	r1, r3, #31
 800bb50:	d5d8      	bpl.n	800bb04 <_printf_float+0x250>
 800bb52:	ee18 3a10 	vmov	r3, s16
 800bb56:	4652      	mov	r2, sl
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b8      	blx	r7
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f43f af09 	beq.w	800b976 <_printf_float+0xc2>
 800bb64:	f04f 0900 	mov.w	r9, #0
 800bb68:	f104 0a1a 	add.w	sl, r4, #26
 800bb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6e:	425b      	negs	r3, r3
 800bb70:	454b      	cmp	r3, r9
 800bb72:	dc01      	bgt.n	800bb78 <_printf_float+0x2c4>
 800bb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb76:	e792      	b.n	800ba9e <_printf_float+0x1ea>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4628      	mov	r0, r5
 800bb80:	47b8      	blx	r7
 800bb82:	3001      	adds	r0, #1
 800bb84:	f43f aef7 	beq.w	800b976 <_printf_float+0xc2>
 800bb88:	f109 0901 	add.w	r9, r9, #1
 800bb8c:	e7ee      	b.n	800bb6c <_printf_float+0x2b8>
 800bb8e:	bf00      	nop
 800bb90:	7fefffff 	.word	0x7fefffff
 800bb94:	0800e3a8 	.word	0x0800e3a8
 800bb98:	0800e3ac 	.word	0x0800e3ac
 800bb9c:	0800e3b4 	.word	0x0800e3b4
 800bba0:	0800e3b0 	.word	0x0800e3b0
 800bba4:	0800e3b8 	.word	0x0800e3b8
 800bba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbac:	429a      	cmp	r2, r3
 800bbae:	bfa8      	it	ge
 800bbb0:	461a      	movge	r2, r3
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	4691      	mov	r9, r2
 800bbb6:	dc37      	bgt.n	800bc28 <_printf_float+0x374>
 800bbb8:	f04f 0b00 	mov.w	fp, #0
 800bbbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbc0:	f104 021a 	add.w	r2, r4, #26
 800bbc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbc6:	9305      	str	r3, [sp, #20]
 800bbc8:	eba3 0309 	sub.w	r3, r3, r9
 800bbcc:	455b      	cmp	r3, fp
 800bbce:	dc33      	bgt.n	800bc38 <_printf_float+0x384>
 800bbd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	db3b      	blt.n	800bc50 <_printf_float+0x39c>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	07da      	lsls	r2, r3, #31
 800bbdc:	d438      	bmi.n	800bc50 <_printf_float+0x39c>
 800bbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe0:	9a05      	ldr	r2, [sp, #20]
 800bbe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbe4:	1a9a      	subs	r2, r3, r2
 800bbe6:	eba3 0901 	sub.w	r9, r3, r1
 800bbea:	4591      	cmp	r9, r2
 800bbec:	bfa8      	it	ge
 800bbee:	4691      	movge	r9, r2
 800bbf0:	f1b9 0f00 	cmp.w	r9, #0
 800bbf4:	dc35      	bgt.n	800bc62 <_printf_float+0x3ae>
 800bbf6:	f04f 0800 	mov.w	r8, #0
 800bbfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbfe:	f104 0a1a 	add.w	sl, r4, #26
 800bc02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc06:	1a9b      	subs	r3, r3, r2
 800bc08:	eba3 0309 	sub.w	r3, r3, r9
 800bc0c:	4543      	cmp	r3, r8
 800bc0e:	f77f af79 	ble.w	800bb04 <_printf_float+0x250>
 800bc12:	2301      	movs	r3, #1
 800bc14:	4652      	mov	r2, sl
 800bc16:	4631      	mov	r1, r6
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	f43f aeaa 	beq.w	800b976 <_printf_float+0xc2>
 800bc22:	f108 0801 	add.w	r8, r8, #1
 800bc26:	e7ec      	b.n	800bc02 <_printf_float+0x34e>
 800bc28:	4613      	mov	r3, r2
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	d1c0      	bne.n	800bbb8 <_printf_float+0x304>
 800bc36:	e69e      	b.n	800b976 <_printf_float+0xc2>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	9205      	str	r2, [sp, #20]
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f ae97 	beq.w	800b976 <_printf_float+0xc2>
 800bc48:	9a05      	ldr	r2, [sp, #20]
 800bc4a:	f10b 0b01 	add.w	fp, fp, #1
 800bc4e:	e7b9      	b.n	800bbc4 <_printf_float+0x310>
 800bc50:	ee18 3a10 	vmov	r3, s16
 800bc54:	4652      	mov	r2, sl
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d1be      	bne.n	800bbde <_printf_float+0x32a>
 800bc60:	e689      	b.n	800b976 <_printf_float+0xc2>
 800bc62:	9a05      	ldr	r2, [sp, #20]
 800bc64:	464b      	mov	r3, r9
 800bc66:	4442      	add	r2, r8
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d1c1      	bne.n	800bbf6 <_printf_float+0x342>
 800bc72:	e680      	b.n	800b976 <_printf_float+0xc2>
 800bc74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc76:	2a01      	cmp	r2, #1
 800bc78:	dc01      	bgt.n	800bc7e <_printf_float+0x3ca>
 800bc7a:	07db      	lsls	r3, r3, #31
 800bc7c:	d538      	bpl.n	800bcf0 <_printf_float+0x43c>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	4642      	mov	r2, r8
 800bc82:	4631      	mov	r1, r6
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b8      	blx	r7
 800bc88:	3001      	adds	r0, #1
 800bc8a:	f43f ae74 	beq.w	800b976 <_printf_float+0xc2>
 800bc8e:	ee18 3a10 	vmov	r3, s16
 800bc92:	4652      	mov	r2, sl
 800bc94:	4631      	mov	r1, r6
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b8      	blx	r7
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	f43f ae6b 	beq.w	800b976 <_printf_float+0xc2>
 800bca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bca4:	2200      	movs	r2, #0
 800bca6:	2300      	movs	r3, #0
 800bca8:	f7f4 ff36 	bl	8000b18 <__aeabi_dcmpeq>
 800bcac:	b9d8      	cbnz	r0, 800bce6 <_printf_float+0x432>
 800bcae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb0:	f108 0201 	add.w	r2, r8, #1
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b8      	blx	r7
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d10e      	bne.n	800bcde <_printf_float+0x42a>
 800bcc0:	e659      	b.n	800b976 <_printf_float+0xc2>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b8      	blx	r7
 800bccc:	3001      	adds	r0, #1
 800bcce:	f43f ae52 	beq.w	800b976 <_printf_float+0xc2>
 800bcd2:	f108 0801 	add.w	r8, r8, #1
 800bcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	4543      	cmp	r3, r8
 800bcdc:	dcf1      	bgt.n	800bcc2 <_printf_float+0x40e>
 800bcde:	464b      	mov	r3, r9
 800bce0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bce4:	e6dc      	b.n	800baa0 <_printf_float+0x1ec>
 800bce6:	f04f 0800 	mov.w	r8, #0
 800bcea:	f104 0a1a 	add.w	sl, r4, #26
 800bcee:	e7f2      	b.n	800bcd6 <_printf_float+0x422>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4642      	mov	r2, r8
 800bcf4:	e7df      	b.n	800bcb6 <_printf_float+0x402>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	464a      	mov	r2, r9
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b8      	blx	r7
 800bd00:	3001      	adds	r0, #1
 800bd02:	f43f ae38 	beq.w	800b976 <_printf_float+0xc2>
 800bd06:	f108 0801 	add.w	r8, r8, #1
 800bd0a:	68e3      	ldr	r3, [r4, #12]
 800bd0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd0e:	1a5b      	subs	r3, r3, r1
 800bd10:	4543      	cmp	r3, r8
 800bd12:	dcf0      	bgt.n	800bcf6 <_printf_float+0x442>
 800bd14:	e6fa      	b.n	800bb0c <_printf_float+0x258>
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	f104 0919 	add.w	r9, r4, #25
 800bd1e:	e7f4      	b.n	800bd0a <_printf_float+0x456>

0800bd20 <_printf_common>:
 800bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd24:	4616      	mov	r6, r2
 800bd26:	4699      	mov	r9, r3
 800bd28:	688a      	ldr	r2, [r1, #8]
 800bd2a:	690b      	ldr	r3, [r1, #16]
 800bd2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	bfb8      	it	lt
 800bd34:	4613      	movlt	r3, r2
 800bd36:	6033      	str	r3, [r6, #0]
 800bd38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	460c      	mov	r4, r1
 800bd40:	b10a      	cbz	r2, 800bd46 <_printf_common+0x26>
 800bd42:	3301      	adds	r3, #1
 800bd44:	6033      	str	r3, [r6, #0]
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	0699      	lsls	r1, r3, #26
 800bd4a:	bf42      	ittt	mi
 800bd4c:	6833      	ldrmi	r3, [r6, #0]
 800bd4e:	3302      	addmi	r3, #2
 800bd50:	6033      	strmi	r3, [r6, #0]
 800bd52:	6825      	ldr	r5, [r4, #0]
 800bd54:	f015 0506 	ands.w	r5, r5, #6
 800bd58:	d106      	bne.n	800bd68 <_printf_common+0x48>
 800bd5a:	f104 0a19 	add.w	sl, r4, #25
 800bd5e:	68e3      	ldr	r3, [r4, #12]
 800bd60:	6832      	ldr	r2, [r6, #0]
 800bd62:	1a9b      	subs	r3, r3, r2
 800bd64:	42ab      	cmp	r3, r5
 800bd66:	dc26      	bgt.n	800bdb6 <_printf_common+0x96>
 800bd68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd6c:	1e13      	subs	r3, r2, #0
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	bf18      	it	ne
 800bd72:	2301      	movne	r3, #1
 800bd74:	0692      	lsls	r2, r2, #26
 800bd76:	d42b      	bmi.n	800bdd0 <_printf_common+0xb0>
 800bd78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4638      	mov	r0, r7
 800bd80:	47c0      	blx	r8
 800bd82:	3001      	adds	r0, #1
 800bd84:	d01e      	beq.n	800bdc4 <_printf_common+0xa4>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	68e5      	ldr	r5, [r4, #12]
 800bd8a:	6832      	ldr	r2, [r6, #0]
 800bd8c:	f003 0306 	and.w	r3, r3, #6
 800bd90:	2b04      	cmp	r3, #4
 800bd92:	bf08      	it	eq
 800bd94:	1aad      	subeq	r5, r5, r2
 800bd96:	68a3      	ldr	r3, [r4, #8]
 800bd98:	6922      	ldr	r2, [r4, #16]
 800bd9a:	bf0c      	ite	eq
 800bd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda0:	2500      	movne	r5, #0
 800bda2:	4293      	cmp	r3, r2
 800bda4:	bfc4      	itt	gt
 800bda6:	1a9b      	subgt	r3, r3, r2
 800bda8:	18ed      	addgt	r5, r5, r3
 800bdaa:	2600      	movs	r6, #0
 800bdac:	341a      	adds	r4, #26
 800bdae:	42b5      	cmp	r5, r6
 800bdb0:	d11a      	bne.n	800bde8 <_printf_common+0xc8>
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	e008      	b.n	800bdc8 <_printf_common+0xa8>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4652      	mov	r2, sl
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	47c0      	blx	r8
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d103      	bne.n	800bdcc <_printf_common+0xac>
 800bdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdcc:	3501      	adds	r5, #1
 800bdce:	e7c6      	b.n	800bd5e <_printf_common+0x3e>
 800bdd0:	18e1      	adds	r1, r4, r3
 800bdd2:	1c5a      	adds	r2, r3, #1
 800bdd4:	2030      	movs	r0, #48	; 0x30
 800bdd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdda:	4422      	add	r2, r4
 800bddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bde0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bde4:	3302      	adds	r3, #2
 800bde6:	e7c7      	b.n	800bd78 <_printf_common+0x58>
 800bde8:	2301      	movs	r3, #1
 800bdea:	4622      	mov	r2, r4
 800bdec:	4649      	mov	r1, r9
 800bdee:	4638      	mov	r0, r7
 800bdf0:	47c0      	blx	r8
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	d0e6      	beq.n	800bdc4 <_printf_common+0xa4>
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	e7d9      	b.n	800bdae <_printf_common+0x8e>
	...

0800bdfc <_printf_i>:
 800bdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be00:	7e0f      	ldrb	r7, [r1, #24]
 800be02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be04:	2f78      	cmp	r7, #120	; 0x78
 800be06:	4691      	mov	r9, r2
 800be08:	4680      	mov	r8, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	469a      	mov	sl, r3
 800be0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be12:	d807      	bhi.n	800be24 <_printf_i+0x28>
 800be14:	2f62      	cmp	r7, #98	; 0x62
 800be16:	d80a      	bhi.n	800be2e <_printf_i+0x32>
 800be18:	2f00      	cmp	r7, #0
 800be1a:	f000 80d8 	beq.w	800bfce <_printf_i+0x1d2>
 800be1e:	2f58      	cmp	r7, #88	; 0x58
 800be20:	f000 80a3 	beq.w	800bf6a <_printf_i+0x16e>
 800be24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be2c:	e03a      	b.n	800bea4 <_printf_i+0xa8>
 800be2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be32:	2b15      	cmp	r3, #21
 800be34:	d8f6      	bhi.n	800be24 <_printf_i+0x28>
 800be36:	a101      	add	r1, pc, #4	; (adr r1, 800be3c <_printf_i+0x40>)
 800be38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be3c:	0800be95 	.word	0x0800be95
 800be40:	0800bea9 	.word	0x0800bea9
 800be44:	0800be25 	.word	0x0800be25
 800be48:	0800be25 	.word	0x0800be25
 800be4c:	0800be25 	.word	0x0800be25
 800be50:	0800be25 	.word	0x0800be25
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800be25 	.word	0x0800be25
 800be5c:	0800be25 	.word	0x0800be25
 800be60:	0800be25 	.word	0x0800be25
 800be64:	0800be25 	.word	0x0800be25
 800be68:	0800bfb5 	.word	0x0800bfb5
 800be6c:	0800bed9 	.word	0x0800bed9
 800be70:	0800bf97 	.word	0x0800bf97
 800be74:	0800be25 	.word	0x0800be25
 800be78:	0800be25 	.word	0x0800be25
 800be7c:	0800bfd7 	.word	0x0800bfd7
 800be80:	0800be25 	.word	0x0800be25
 800be84:	0800bed9 	.word	0x0800bed9
 800be88:	0800be25 	.word	0x0800be25
 800be8c:	0800be25 	.word	0x0800be25
 800be90:	0800bf9f 	.word	0x0800bf9f
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	602a      	str	r2, [r5, #0]
 800be9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bea4:	2301      	movs	r3, #1
 800bea6:	e0a3      	b.n	800bff0 <_printf_i+0x1f4>
 800bea8:	6820      	ldr	r0, [r4, #0]
 800beaa:	6829      	ldr	r1, [r5, #0]
 800beac:	0606      	lsls	r6, r0, #24
 800beae:	f101 0304 	add.w	r3, r1, #4
 800beb2:	d50a      	bpl.n	800beca <_printf_i+0xce>
 800beb4:	680e      	ldr	r6, [r1, #0]
 800beb6:	602b      	str	r3, [r5, #0]
 800beb8:	2e00      	cmp	r6, #0
 800beba:	da03      	bge.n	800bec4 <_printf_i+0xc8>
 800bebc:	232d      	movs	r3, #45	; 0x2d
 800bebe:	4276      	negs	r6, r6
 800bec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec4:	485e      	ldr	r0, [pc, #376]	; (800c040 <_printf_i+0x244>)
 800bec6:	230a      	movs	r3, #10
 800bec8:	e019      	b.n	800befe <_printf_i+0x102>
 800beca:	680e      	ldr	r6, [r1, #0]
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bed2:	bf18      	it	ne
 800bed4:	b236      	sxthne	r6, r6
 800bed6:	e7ef      	b.n	800beb8 <_printf_i+0xbc>
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	6820      	ldr	r0, [r4, #0]
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	6029      	str	r1, [r5, #0]
 800bee0:	0601      	lsls	r1, r0, #24
 800bee2:	d501      	bpl.n	800bee8 <_printf_i+0xec>
 800bee4:	681e      	ldr	r6, [r3, #0]
 800bee6:	e002      	b.n	800beee <_printf_i+0xf2>
 800bee8:	0646      	lsls	r6, r0, #25
 800beea:	d5fb      	bpl.n	800bee4 <_printf_i+0xe8>
 800beec:	881e      	ldrh	r6, [r3, #0]
 800beee:	4854      	ldr	r0, [pc, #336]	; (800c040 <_printf_i+0x244>)
 800bef0:	2f6f      	cmp	r7, #111	; 0x6f
 800bef2:	bf0c      	ite	eq
 800bef4:	2308      	moveq	r3, #8
 800bef6:	230a      	movne	r3, #10
 800bef8:	2100      	movs	r1, #0
 800befa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800befe:	6865      	ldr	r5, [r4, #4]
 800bf00:	60a5      	str	r5, [r4, #8]
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	bfa2      	ittt	ge
 800bf06:	6821      	ldrge	r1, [r4, #0]
 800bf08:	f021 0104 	bicge.w	r1, r1, #4
 800bf0c:	6021      	strge	r1, [r4, #0]
 800bf0e:	b90e      	cbnz	r6, 800bf14 <_printf_i+0x118>
 800bf10:	2d00      	cmp	r5, #0
 800bf12:	d04d      	beq.n	800bfb0 <_printf_i+0x1b4>
 800bf14:	4615      	mov	r5, r2
 800bf16:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf1a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf1e:	5dc7      	ldrb	r7, [r0, r7]
 800bf20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf24:	4637      	mov	r7, r6
 800bf26:	42bb      	cmp	r3, r7
 800bf28:	460e      	mov	r6, r1
 800bf2a:	d9f4      	bls.n	800bf16 <_printf_i+0x11a>
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d10b      	bne.n	800bf48 <_printf_i+0x14c>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	07de      	lsls	r6, r3, #31
 800bf34:	d508      	bpl.n	800bf48 <_printf_i+0x14c>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	bfde      	ittt	le
 800bf3e:	2330      	movle	r3, #48	; 0x30
 800bf40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf48:	1b52      	subs	r2, r2, r5
 800bf4a:	6122      	str	r2, [r4, #16]
 800bf4c:	f8cd a000 	str.w	sl, [sp]
 800bf50:	464b      	mov	r3, r9
 800bf52:	aa03      	add	r2, sp, #12
 800bf54:	4621      	mov	r1, r4
 800bf56:	4640      	mov	r0, r8
 800bf58:	f7ff fee2 	bl	800bd20 <_printf_common>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d14c      	bne.n	800bffa <_printf_i+0x1fe>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	b004      	add	sp, #16
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6a:	4835      	ldr	r0, [pc, #212]	; (800c040 <_printf_i+0x244>)
 800bf6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf70:	6829      	ldr	r1, [r5, #0]
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf78:	6029      	str	r1, [r5, #0]
 800bf7a:	061d      	lsls	r5, r3, #24
 800bf7c:	d514      	bpl.n	800bfa8 <_printf_i+0x1ac>
 800bf7e:	07df      	lsls	r7, r3, #31
 800bf80:	bf44      	itt	mi
 800bf82:	f043 0320 	orrmi.w	r3, r3, #32
 800bf86:	6023      	strmi	r3, [r4, #0]
 800bf88:	b91e      	cbnz	r6, 800bf92 <_printf_i+0x196>
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f023 0320 	bic.w	r3, r3, #32
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	2310      	movs	r3, #16
 800bf94:	e7b0      	b.n	800bef8 <_printf_i+0xfc>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	f043 0320 	orr.w	r3, r3, #32
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	2378      	movs	r3, #120	; 0x78
 800bfa0:	4828      	ldr	r0, [pc, #160]	; (800c044 <_printf_i+0x248>)
 800bfa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfa6:	e7e3      	b.n	800bf70 <_printf_i+0x174>
 800bfa8:	0659      	lsls	r1, r3, #25
 800bfaa:	bf48      	it	mi
 800bfac:	b2b6      	uxthmi	r6, r6
 800bfae:	e7e6      	b.n	800bf7e <_printf_i+0x182>
 800bfb0:	4615      	mov	r5, r2
 800bfb2:	e7bb      	b.n	800bf2c <_printf_i+0x130>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	6826      	ldr	r6, [r4, #0]
 800bfb8:	6961      	ldr	r1, [r4, #20]
 800bfba:	1d18      	adds	r0, r3, #4
 800bfbc:	6028      	str	r0, [r5, #0]
 800bfbe:	0635      	lsls	r5, r6, #24
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	d501      	bpl.n	800bfc8 <_printf_i+0x1cc>
 800bfc4:	6019      	str	r1, [r3, #0]
 800bfc6:	e002      	b.n	800bfce <_printf_i+0x1d2>
 800bfc8:	0670      	lsls	r0, r6, #25
 800bfca:	d5fb      	bpl.n	800bfc4 <_printf_i+0x1c8>
 800bfcc:	8019      	strh	r1, [r3, #0]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	4615      	mov	r5, r2
 800bfd4:	e7ba      	b.n	800bf4c <_printf_i+0x150>
 800bfd6:	682b      	ldr	r3, [r5, #0]
 800bfd8:	1d1a      	adds	r2, r3, #4
 800bfda:	602a      	str	r2, [r5, #0]
 800bfdc:	681d      	ldr	r5, [r3, #0]
 800bfde:	6862      	ldr	r2, [r4, #4]
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f7f4 f924 	bl	8000230 <memchr>
 800bfe8:	b108      	cbz	r0, 800bfee <_printf_i+0x1f2>
 800bfea:	1b40      	subs	r0, r0, r5
 800bfec:	6060      	str	r0, [r4, #4]
 800bfee:	6863      	ldr	r3, [r4, #4]
 800bff0:	6123      	str	r3, [r4, #16]
 800bff2:	2300      	movs	r3, #0
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff8:	e7a8      	b.n	800bf4c <_printf_i+0x150>
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	462a      	mov	r2, r5
 800bffe:	4649      	mov	r1, r9
 800c000:	4640      	mov	r0, r8
 800c002:	47d0      	blx	sl
 800c004:	3001      	adds	r0, #1
 800c006:	d0ab      	beq.n	800bf60 <_printf_i+0x164>
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	079b      	lsls	r3, r3, #30
 800c00c:	d413      	bmi.n	800c036 <_printf_i+0x23a>
 800c00e:	68e0      	ldr	r0, [r4, #12]
 800c010:	9b03      	ldr	r3, [sp, #12]
 800c012:	4298      	cmp	r0, r3
 800c014:	bfb8      	it	lt
 800c016:	4618      	movlt	r0, r3
 800c018:	e7a4      	b.n	800bf64 <_printf_i+0x168>
 800c01a:	2301      	movs	r3, #1
 800c01c:	4632      	mov	r2, r6
 800c01e:	4649      	mov	r1, r9
 800c020:	4640      	mov	r0, r8
 800c022:	47d0      	blx	sl
 800c024:	3001      	adds	r0, #1
 800c026:	d09b      	beq.n	800bf60 <_printf_i+0x164>
 800c028:	3501      	adds	r5, #1
 800c02a:	68e3      	ldr	r3, [r4, #12]
 800c02c:	9903      	ldr	r1, [sp, #12]
 800c02e:	1a5b      	subs	r3, r3, r1
 800c030:	42ab      	cmp	r3, r5
 800c032:	dcf2      	bgt.n	800c01a <_printf_i+0x21e>
 800c034:	e7eb      	b.n	800c00e <_printf_i+0x212>
 800c036:	2500      	movs	r5, #0
 800c038:	f104 0619 	add.w	r6, r4, #25
 800c03c:	e7f5      	b.n	800c02a <_printf_i+0x22e>
 800c03e:	bf00      	nop
 800c040:	0800e3ba 	.word	0x0800e3ba
 800c044:	0800e3cb 	.word	0x0800e3cb

0800c048 <iprintf>:
 800c048:	b40f      	push	{r0, r1, r2, r3}
 800c04a:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <iprintf+0x2c>)
 800c04c:	b513      	push	{r0, r1, r4, lr}
 800c04e:	681c      	ldr	r4, [r3, #0]
 800c050:	b124      	cbz	r4, 800c05c <iprintf+0x14>
 800c052:	69a3      	ldr	r3, [r4, #24]
 800c054:	b913      	cbnz	r3, 800c05c <iprintf+0x14>
 800c056:	4620      	mov	r0, r4
 800c058:	f001 f87a 	bl	800d150 <__sinit>
 800c05c:	ab05      	add	r3, sp, #20
 800c05e:	9a04      	ldr	r2, [sp, #16]
 800c060:	68a1      	ldr	r1, [r4, #8]
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	4620      	mov	r0, r4
 800c066:	f001 fe29 	bl	800dcbc <_vfiprintf_r>
 800c06a:	b002      	add	sp, #8
 800c06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c070:	b004      	add	sp, #16
 800c072:	4770      	bx	lr
 800c074:	2000002c 	.word	0x2000002c

0800c078 <putchar>:
 800c078:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <putchar+0x28>)
 800c07a:	b513      	push	{r0, r1, r4, lr}
 800c07c:	681c      	ldr	r4, [r3, #0]
 800c07e:	4601      	mov	r1, r0
 800c080:	b134      	cbz	r4, 800c090 <putchar+0x18>
 800c082:	69a3      	ldr	r3, [r4, #24]
 800c084:	b923      	cbnz	r3, 800c090 <putchar+0x18>
 800c086:	9001      	str	r0, [sp, #4]
 800c088:	4620      	mov	r0, r4
 800c08a:	f001 f861 	bl	800d150 <__sinit>
 800c08e:	9901      	ldr	r1, [sp, #4]
 800c090:	68a2      	ldr	r2, [r4, #8]
 800c092:	4620      	mov	r0, r4
 800c094:	b002      	add	sp, #8
 800c096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c09a:	f001 bf3f 	b.w	800df1c <_putc_r>
 800c09e:	bf00      	nop
 800c0a0:	2000002c 	.word	0x2000002c

0800c0a4 <__swbuf_r>:
 800c0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a6:	460e      	mov	r6, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	b118      	cbz	r0, 800c0b6 <__swbuf_r+0x12>
 800c0ae:	6983      	ldr	r3, [r0, #24]
 800c0b0:	b90b      	cbnz	r3, 800c0b6 <__swbuf_r+0x12>
 800c0b2:	f001 f84d 	bl	800d150 <__sinit>
 800c0b6:	4b21      	ldr	r3, [pc, #132]	; (800c13c <__swbuf_r+0x98>)
 800c0b8:	429c      	cmp	r4, r3
 800c0ba:	d12b      	bne.n	800c114 <__swbuf_r+0x70>
 800c0bc:	686c      	ldr	r4, [r5, #4]
 800c0be:	69a3      	ldr	r3, [r4, #24]
 800c0c0:	60a3      	str	r3, [r4, #8]
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	071a      	lsls	r2, r3, #28
 800c0c6:	d52f      	bpl.n	800c128 <__swbuf_r+0x84>
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	b36b      	cbz	r3, 800c128 <__swbuf_r+0x84>
 800c0cc:	6923      	ldr	r3, [r4, #16]
 800c0ce:	6820      	ldr	r0, [r4, #0]
 800c0d0:	1ac0      	subs	r0, r0, r3
 800c0d2:	6963      	ldr	r3, [r4, #20]
 800c0d4:	b2f6      	uxtb	r6, r6
 800c0d6:	4283      	cmp	r3, r0
 800c0d8:	4637      	mov	r7, r6
 800c0da:	dc04      	bgt.n	800c0e6 <__swbuf_r+0x42>
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f000 ffa2 	bl	800d028 <_fflush_r>
 800c0e4:	bb30      	cbnz	r0, 800c134 <__swbuf_r+0x90>
 800c0e6:	68a3      	ldr	r3, [r4, #8]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	60a3      	str	r3, [r4, #8]
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	6022      	str	r2, [r4, #0]
 800c0f2:	701e      	strb	r6, [r3, #0]
 800c0f4:	6963      	ldr	r3, [r4, #20]
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	4283      	cmp	r3, r0
 800c0fa:	d004      	beq.n	800c106 <__swbuf_r+0x62>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	07db      	lsls	r3, r3, #31
 800c100:	d506      	bpl.n	800c110 <__swbuf_r+0x6c>
 800c102:	2e0a      	cmp	r6, #10
 800c104:	d104      	bne.n	800c110 <__swbuf_r+0x6c>
 800c106:	4621      	mov	r1, r4
 800c108:	4628      	mov	r0, r5
 800c10a:	f000 ff8d 	bl	800d028 <_fflush_r>
 800c10e:	b988      	cbnz	r0, 800c134 <__swbuf_r+0x90>
 800c110:	4638      	mov	r0, r7
 800c112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c114:	4b0a      	ldr	r3, [pc, #40]	; (800c140 <__swbuf_r+0x9c>)
 800c116:	429c      	cmp	r4, r3
 800c118:	d101      	bne.n	800c11e <__swbuf_r+0x7a>
 800c11a:	68ac      	ldr	r4, [r5, #8]
 800c11c:	e7cf      	b.n	800c0be <__swbuf_r+0x1a>
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <__swbuf_r+0xa0>)
 800c120:	429c      	cmp	r4, r3
 800c122:	bf08      	it	eq
 800c124:	68ec      	ldreq	r4, [r5, #12]
 800c126:	e7ca      	b.n	800c0be <__swbuf_r+0x1a>
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 f80c 	bl	800c148 <__swsetup_r>
 800c130:	2800      	cmp	r0, #0
 800c132:	d0cb      	beq.n	800c0cc <__swbuf_r+0x28>
 800c134:	f04f 37ff 	mov.w	r7, #4294967295
 800c138:	e7ea      	b.n	800c110 <__swbuf_r+0x6c>
 800c13a:	bf00      	nop
 800c13c:	0800e48c 	.word	0x0800e48c
 800c140:	0800e4ac 	.word	0x0800e4ac
 800c144:	0800e46c 	.word	0x0800e46c

0800c148 <__swsetup_r>:
 800c148:	4b32      	ldr	r3, [pc, #200]	; (800c214 <__swsetup_r+0xcc>)
 800c14a:	b570      	push	{r4, r5, r6, lr}
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	4606      	mov	r6, r0
 800c150:	460c      	mov	r4, r1
 800c152:	b125      	cbz	r5, 800c15e <__swsetup_r+0x16>
 800c154:	69ab      	ldr	r3, [r5, #24]
 800c156:	b913      	cbnz	r3, 800c15e <__swsetup_r+0x16>
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 fff9 	bl	800d150 <__sinit>
 800c15e:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <__swsetup_r+0xd0>)
 800c160:	429c      	cmp	r4, r3
 800c162:	d10f      	bne.n	800c184 <__swsetup_r+0x3c>
 800c164:	686c      	ldr	r4, [r5, #4]
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c16c:	0719      	lsls	r1, r3, #28
 800c16e:	d42c      	bmi.n	800c1ca <__swsetup_r+0x82>
 800c170:	06dd      	lsls	r5, r3, #27
 800c172:	d411      	bmi.n	800c198 <__swsetup_r+0x50>
 800c174:	2309      	movs	r3, #9
 800c176:	6033      	str	r3, [r6, #0]
 800c178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c17c:	81a3      	strh	r3, [r4, #12]
 800c17e:	f04f 30ff 	mov.w	r0, #4294967295
 800c182:	e03e      	b.n	800c202 <__swsetup_r+0xba>
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <__swsetup_r+0xd4>)
 800c186:	429c      	cmp	r4, r3
 800c188:	d101      	bne.n	800c18e <__swsetup_r+0x46>
 800c18a:	68ac      	ldr	r4, [r5, #8]
 800c18c:	e7eb      	b.n	800c166 <__swsetup_r+0x1e>
 800c18e:	4b24      	ldr	r3, [pc, #144]	; (800c220 <__swsetup_r+0xd8>)
 800c190:	429c      	cmp	r4, r3
 800c192:	bf08      	it	eq
 800c194:	68ec      	ldreq	r4, [r5, #12]
 800c196:	e7e6      	b.n	800c166 <__swsetup_r+0x1e>
 800c198:	0758      	lsls	r0, r3, #29
 800c19a:	d512      	bpl.n	800c1c2 <__swsetup_r+0x7a>
 800c19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c19e:	b141      	cbz	r1, 800c1b2 <__swsetup_r+0x6a>
 800c1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	d002      	beq.n	800c1ae <__swsetup_r+0x66>
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f001 fc7d 	bl	800daa8 <_free_r>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6063      	str	r3, [r4, #4]
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f043 0308 	orr.w	r3, r3, #8
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	b94b      	cbnz	r3, 800c1e2 <__swsetup_r+0x9a>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d8:	d003      	beq.n	800c1e2 <__swsetup_r+0x9a>
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f001 f881 	bl	800d2e4 <__smakebuf_r>
 800c1e2:	89a0      	ldrh	r0, [r4, #12]
 800c1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1e8:	f010 0301 	ands.w	r3, r0, #1
 800c1ec:	d00a      	beq.n	800c204 <__swsetup_r+0xbc>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60a3      	str	r3, [r4, #8]
 800c1f2:	6963      	ldr	r3, [r4, #20]
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	61a3      	str	r3, [r4, #24]
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	b943      	cbnz	r3, 800c20e <__swsetup_r+0xc6>
 800c1fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c200:	d1ba      	bne.n	800c178 <__swsetup_r+0x30>
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	0781      	lsls	r1, r0, #30
 800c206:	bf58      	it	pl
 800c208:	6963      	ldrpl	r3, [r4, #20]
 800c20a:	60a3      	str	r3, [r4, #8]
 800c20c:	e7f4      	b.n	800c1f8 <__swsetup_r+0xb0>
 800c20e:	2000      	movs	r0, #0
 800c210:	e7f7      	b.n	800c202 <__swsetup_r+0xba>
 800c212:	bf00      	nop
 800c214:	2000002c 	.word	0x2000002c
 800c218:	0800e48c 	.word	0x0800e48c
 800c21c:	0800e4ac 	.word	0x0800e4ac
 800c220:	0800e46c 	.word	0x0800e46c

0800c224 <quorem>:
 800c224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	6903      	ldr	r3, [r0, #16]
 800c22a:	690c      	ldr	r4, [r1, #16]
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	4607      	mov	r7, r0
 800c230:	f2c0 8081 	blt.w	800c336 <quorem+0x112>
 800c234:	3c01      	subs	r4, #1
 800c236:	f101 0814 	add.w	r8, r1, #20
 800c23a:	f100 0514 	add.w	r5, r0, #20
 800c23e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c24c:	3301      	adds	r3, #1
 800c24e:	429a      	cmp	r2, r3
 800c250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c258:	fbb2 f6f3 	udiv	r6, r2, r3
 800c25c:	d331      	bcc.n	800c2c2 <quorem+0x9e>
 800c25e:	f04f 0e00 	mov.w	lr, #0
 800c262:	4640      	mov	r0, r8
 800c264:	46ac      	mov	ip, r5
 800c266:	46f2      	mov	sl, lr
 800c268:	f850 2b04 	ldr.w	r2, [r0], #4
 800c26c:	b293      	uxth	r3, r2
 800c26e:	fb06 e303 	mla	r3, r6, r3, lr
 800c272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c276:	b29b      	uxth	r3, r3
 800c278:	ebaa 0303 	sub.w	r3, sl, r3
 800c27c:	f8dc a000 	ldr.w	sl, [ip]
 800c280:	0c12      	lsrs	r2, r2, #16
 800c282:	fa13 f38a 	uxtah	r3, r3, sl
 800c286:	fb06 e202 	mla	r2, r6, r2, lr
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	9b00      	ldr	r3, [sp, #0]
 800c28e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c292:	b292      	uxth	r2, r2
 800c294:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c29c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2a0:	4581      	cmp	r9, r0
 800c2a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2a6:	f84c 3b04 	str.w	r3, [ip], #4
 800c2aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2ae:	d2db      	bcs.n	800c268 <quorem+0x44>
 800c2b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2b4:	b92b      	cbnz	r3, 800c2c2 <quorem+0x9e>
 800c2b6:	9b01      	ldr	r3, [sp, #4]
 800c2b8:	3b04      	subs	r3, #4
 800c2ba:	429d      	cmp	r5, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	d32e      	bcc.n	800c31e <quorem+0xfa>
 800c2c0:	613c      	str	r4, [r7, #16]
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f001 fad8 	bl	800d878 <__mcmp>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	db24      	blt.n	800c316 <quorem+0xf2>
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f04f 0c00 	mov.w	ip, #0
 800c2d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2d8:	f8d0 e000 	ldr.w	lr, [r0]
 800c2dc:	b293      	uxth	r3, r2
 800c2de:	ebac 0303 	sub.w	r3, ip, r3
 800c2e2:	0c12      	lsrs	r2, r2, #16
 800c2e4:	fa13 f38e 	uxtah	r3, r3, lr
 800c2e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2f6:	45c1      	cmp	r9, r8
 800c2f8:	f840 3b04 	str.w	r3, [r0], #4
 800c2fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c300:	d2e8      	bcs.n	800c2d4 <quorem+0xb0>
 800c302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c30a:	b922      	cbnz	r2, 800c316 <quorem+0xf2>
 800c30c:	3b04      	subs	r3, #4
 800c30e:	429d      	cmp	r5, r3
 800c310:	461a      	mov	r2, r3
 800c312:	d30a      	bcc.n	800c32a <quorem+0x106>
 800c314:	613c      	str	r4, [r7, #16]
 800c316:	4630      	mov	r0, r6
 800c318:	b003      	add	sp, #12
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	6812      	ldr	r2, [r2, #0]
 800c320:	3b04      	subs	r3, #4
 800c322:	2a00      	cmp	r2, #0
 800c324:	d1cc      	bne.n	800c2c0 <quorem+0x9c>
 800c326:	3c01      	subs	r4, #1
 800c328:	e7c7      	b.n	800c2ba <quorem+0x96>
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	2a00      	cmp	r2, #0
 800c330:	d1f0      	bne.n	800c314 <quorem+0xf0>
 800c332:	3c01      	subs	r4, #1
 800c334:	e7eb      	b.n	800c30e <quorem+0xea>
 800c336:	2000      	movs	r0, #0
 800c338:	e7ee      	b.n	800c318 <quorem+0xf4>
 800c33a:	0000      	movs	r0, r0
 800c33c:	0000      	movs	r0, r0
	...

0800c340 <_dtoa_r>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	ed2d 8b04 	vpush	{d8-d9}
 800c348:	ec57 6b10 	vmov	r6, r7, d0
 800c34c:	b093      	sub	sp, #76	; 0x4c
 800c34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c354:	9106      	str	r1, [sp, #24]
 800c356:	ee10 aa10 	vmov	sl, s0
 800c35a:	4604      	mov	r4, r0
 800c35c:	9209      	str	r2, [sp, #36]	; 0x24
 800c35e:	930c      	str	r3, [sp, #48]	; 0x30
 800c360:	46bb      	mov	fp, r7
 800c362:	b975      	cbnz	r5, 800c382 <_dtoa_r+0x42>
 800c364:	2010      	movs	r0, #16
 800c366:	f000 fffd 	bl	800d364 <malloc>
 800c36a:	4602      	mov	r2, r0
 800c36c:	6260      	str	r0, [r4, #36]	; 0x24
 800c36e:	b920      	cbnz	r0, 800c37a <_dtoa_r+0x3a>
 800c370:	4ba7      	ldr	r3, [pc, #668]	; (800c610 <_dtoa_r+0x2d0>)
 800c372:	21ea      	movs	r1, #234	; 0xea
 800c374:	48a7      	ldr	r0, [pc, #668]	; (800c614 <_dtoa_r+0x2d4>)
 800c376:	f001 fe7f 	bl	800e078 <__assert_func>
 800c37a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c37e:	6005      	str	r5, [r0, #0]
 800c380:	60c5      	str	r5, [r0, #12]
 800c382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c384:	6819      	ldr	r1, [r3, #0]
 800c386:	b151      	cbz	r1, 800c39e <_dtoa_r+0x5e>
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	604a      	str	r2, [r1, #4]
 800c38c:	2301      	movs	r3, #1
 800c38e:	4093      	lsls	r3, r2
 800c390:	608b      	str	r3, [r1, #8]
 800c392:	4620      	mov	r0, r4
 800c394:	f001 f82e 	bl	800d3f4 <_Bfree>
 800c398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	1e3b      	subs	r3, r7, #0
 800c3a0:	bfaa      	itet	ge
 800c3a2:	2300      	movge	r3, #0
 800c3a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3a8:	f8c8 3000 	strge.w	r3, [r8]
 800c3ac:	4b9a      	ldr	r3, [pc, #616]	; (800c618 <_dtoa_r+0x2d8>)
 800c3ae:	bfbc      	itt	lt
 800c3b0:	2201      	movlt	r2, #1
 800c3b2:	f8c8 2000 	strlt.w	r2, [r8]
 800c3b6:	ea33 030b 	bics.w	r3, r3, fp
 800c3ba:	d11b      	bne.n	800c3f4 <_dtoa_r+0xb4>
 800c3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3be:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3c8:	4333      	orrs	r3, r6
 800c3ca:	f000 8592 	beq.w	800cef2 <_dtoa_r+0xbb2>
 800c3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3d0:	b963      	cbnz	r3, 800c3ec <_dtoa_r+0xac>
 800c3d2:	4b92      	ldr	r3, [pc, #584]	; (800c61c <_dtoa_r+0x2dc>)
 800c3d4:	e022      	b.n	800c41c <_dtoa_r+0xdc>
 800c3d6:	4b92      	ldr	r3, [pc, #584]	; (800c620 <_dtoa_r+0x2e0>)
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3de:	6013      	str	r3, [r2, #0]
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	b013      	add	sp, #76	; 0x4c
 800c3e4:	ecbd 8b04 	vpop	{d8-d9}
 800c3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ec:	4b8b      	ldr	r3, [pc, #556]	; (800c61c <_dtoa_r+0x2dc>)
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	3303      	adds	r3, #3
 800c3f2:	e7f3      	b.n	800c3dc <_dtoa_r+0x9c>
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	4650      	mov	r0, sl
 800c3fa:	4659      	mov	r1, fp
 800c3fc:	f7f4 fb8c 	bl	8000b18 <__aeabi_dcmpeq>
 800c400:	ec4b ab19 	vmov	d9, sl, fp
 800c404:	4680      	mov	r8, r0
 800c406:	b158      	cbz	r0, 800c420 <_dtoa_r+0xe0>
 800c408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c40a:	2301      	movs	r3, #1
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 856b 	beq.w	800ceec <_dtoa_r+0xbac>
 800c416:	4883      	ldr	r0, [pc, #524]	; (800c624 <_dtoa_r+0x2e4>)
 800c418:	6018      	str	r0, [r3, #0]
 800c41a:	1e43      	subs	r3, r0, #1
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	e7df      	b.n	800c3e0 <_dtoa_r+0xa0>
 800c420:	ec4b ab10 	vmov	d0, sl, fp
 800c424:	aa10      	add	r2, sp, #64	; 0x40
 800c426:	a911      	add	r1, sp, #68	; 0x44
 800c428:	4620      	mov	r0, r4
 800c42a:	f001 facb 	bl	800d9c4 <__d2b>
 800c42e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c432:	ee08 0a10 	vmov	s16, r0
 800c436:	2d00      	cmp	r5, #0
 800c438:	f000 8084 	beq.w	800c544 <_dtoa_r+0x204>
 800c43c:	ee19 3a90 	vmov	r3, s19
 800c440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c448:	4656      	mov	r6, sl
 800c44a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c44e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c456:	4b74      	ldr	r3, [pc, #464]	; (800c628 <_dtoa_r+0x2e8>)
 800c458:	2200      	movs	r2, #0
 800c45a:	4630      	mov	r0, r6
 800c45c:	4639      	mov	r1, r7
 800c45e:	f7f3 ff3b 	bl	80002d8 <__aeabi_dsub>
 800c462:	a365      	add	r3, pc, #404	; (adr r3, 800c5f8 <_dtoa_r+0x2b8>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f4 f8ee 	bl	8000648 <__aeabi_dmul>
 800c46c:	a364      	add	r3, pc, #400	; (adr r3, 800c600 <_dtoa_r+0x2c0>)
 800c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c472:	f7f3 ff33 	bl	80002dc <__adddf3>
 800c476:	4606      	mov	r6, r0
 800c478:	4628      	mov	r0, r5
 800c47a:	460f      	mov	r7, r1
 800c47c:	f7f4 f87a 	bl	8000574 <__aeabi_i2d>
 800c480:	a361      	add	r3, pc, #388	; (adr r3, 800c608 <_dtoa_r+0x2c8>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f7f4 f8df 	bl	8000648 <__aeabi_dmul>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4630      	mov	r0, r6
 800c490:	4639      	mov	r1, r7
 800c492:	f7f3 ff23 	bl	80002dc <__adddf3>
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	f7f4 fb85 	bl	8000ba8 <__aeabi_d2iz>
 800c49e:	2200      	movs	r2, #0
 800c4a0:	9000      	str	r0, [sp, #0]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	f7f4 fb40 	bl	8000b2c <__aeabi_dcmplt>
 800c4ac:	b150      	cbz	r0, 800c4c4 <_dtoa_r+0x184>
 800c4ae:	9800      	ldr	r0, [sp, #0]
 800c4b0:	f7f4 f860 	bl	8000574 <__aeabi_i2d>
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	f7f4 fb2e 	bl	8000b18 <__aeabi_dcmpeq>
 800c4bc:	b910      	cbnz	r0, 800c4c4 <_dtoa_r+0x184>
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	2b16      	cmp	r3, #22
 800c4c8:	d85a      	bhi.n	800c580 <_dtoa_r+0x240>
 800c4ca:	9a00      	ldr	r2, [sp, #0]
 800c4cc:	4b57      	ldr	r3, [pc, #348]	; (800c62c <_dtoa_r+0x2ec>)
 800c4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	ec51 0b19 	vmov	r0, r1, d9
 800c4da:	f7f4 fb27 	bl	8000b2c <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d050      	beq.n	800c584 <_dtoa_r+0x244>
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4ee:	1b5d      	subs	r5, r3, r5
 800c4f0:	1e6b      	subs	r3, r5, #1
 800c4f2:	9305      	str	r3, [sp, #20]
 800c4f4:	bf45      	ittet	mi
 800c4f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c4fa:	9304      	strmi	r3, [sp, #16]
 800c4fc:	2300      	movpl	r3, #0
 800c4fe:	2300      	movmi	r3, #0
 800c500:	bf4c      	ite	mi
 800c502:	9305      	strmi	r3, [sp, #20]
 800c504:	9304      	strpl	r3, [sp, #16]
 800c506:	9b00      	ldr	r3, [sp, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	db3d      	blt.n	800c588 <_dtoa_r+0x248>
 800c50c:	9b05      	ldr	r3, [sp, #20]
 800c50e:	9a00      	ldr	r2, [sp, #0]
 800c510:	920a      	str	r2, [sp, #40]	; 0x28
 800c512:	4413      	add	r3, r2
 800c514:	9305      	str	r3, [sp, #20]
 800c516:	2300      	movs	r3, #0
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	2b09      	cmp	r3, #9
 800c51e:	f200 8089 	bhi.w	800c634 <_dtoa_r+0x2f4>
 800c522:	2b05      	cmp	r3, #5
 800c524:	bfc4      	itt	gt
 800c526:	3b04      	subgt	r3, #4
 800c528:	9306      	strgt	r3, [sp, #24]
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	f1a3 0302 	sub.w	r3, r3, #2
 800c530:	bfcc      	ite	gt
 800c532:	2500      	movgt	r5, #0
 800c534:	2501      	movle	r5, #1
 800c536:	2b03      	cmp	r3, #3
 800c538:	f200 8087 	bhi.w	800c64a <_dtoa_r+0x30a>
 800c53c:	e8df f003 	tbb	[pc, r3]
 800c540:	59383a2d 	.word	0x59383a2d
 800c544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c548:	441d      	add	r5, r3
 800c54a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c54e:	2b20      	cmp	r3, #32
 800c550:	bfc1      	itttt	gt
 800c552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c55a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c55e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c562:	bfda      	itte	le
 800c564:	f1c3 0320 	rsble	r3, r3, #32
 800c568:	fa06 f003 	lslle.w	r0, r6, r3
 800c56c:	4318      	orrgt	r0, r3
 800c56e:	f7f3 fff1 	bl	8000554 <__aeabi_ui2d>
 800c572:	2301      	movs	r3, #1
 800c574:	4606      	mov	r6, r0
 800c576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c57a:	3d01      	subs	r5, #1
 800c57c:	930e      	str	r3, [sp, #56]	; 0x38
 800c57e:	e76a      	b.n	800c456 <_dtoa_r+0x116>
 800c580:	2301      	movs	r3, #1
 800c582:	e7b2      	b.n	800c4ea <_dtoa_r+0x1aa>
 800c584:	900b      	str	r0, [sp, #44]	; 0x2c
 800c586:	e7b1      	b.n	800c4ec <_dtoa_r+0x1ac>
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	9a00      	ldr	r2, [sp, #0]
 800c58c:	1a9b      	subs	r3, r3, r2
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	4253      	negs	r3, r2
 800c592:	9307      	str	r3, [sp, #28]
 800c594:	2300      	movs	r3, #0
 800c596:	930a      	str	r3, [sp, #40]	; 0x28
 800c598:	e7bf      	b.n	800c51a <_dtoa_r+0x1da>
 800c59a:	2300      	movs	r3, #0
 800c59c:	9308      	str	r3, [sp, #32]
 800c59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	dc55      	bgt.n	800c650 <_dtoa_r+0x310>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ae:	e00c      	b.n	800c5ca <_dtoa_r+0x28a>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7f3      	b.n	800c59c <_dtoa_r+0x25c>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b8:	9308      	str	r3, [sp, #32]
 800c5ba:	9b00      	ldr	r3, [sp, #0]
 800c5bc:	4413      	add	r3, r2
 800c5be:	9302      	str	r3, [sp, #8]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	bfb8      	it	lt
 800c5c8:	2301      	movlt	r3, #1
 800c5ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	6042      	str	r2, [r0, #4]
 800c5d0:	2204      	movs	r2, #4
 800c5d2:	f102 0614 	add.w	r6, r2, #20
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	6841      	ldr	r1, [r0, #4]
 800c5da:	d93d      	bls.n	800c658 <_dtoa_r+0x318>
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 fec9 	bl	800d374 <_Balloc>
 800c5e2:	9001      	str	r0, [sp, #4]
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d13b      	bne.n	800c660 <_dtoa_r+0x320>
 800c5e8:	4b11      	ldr	r3, [pc, #68]	; (800c630 <_dtoa_r+0x2f0>)
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c5f0:	e6c0      	b.n	800c374 <_dtoa_r+0x34>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e7df      	b.n	800c5b6 <_dtoa_r+0x276>
 800c5f6:	bf00      	nop
 800c5f8:	636f4361 	.word	0x636f4361
 800c5fc:	3fd287a7 	.word	0x3fd287a7
 800c600:	8b60c8b3 	.word	0x8b60c8b3
 800c604:	3fc68a28 	.word	0x3fc68a28
 800c608:	509f79fb 	.word	0x509f79fb
 800c60c:	3fd34413 	.word	0x3fd34413
 800c610:	0800e3e9 	.word	0x0800e3e9
 800c614:	0800e400 	.word	0x0800e400
 800c618:	7ff00000 	.word	0x7ff00000
 800c61c:	0800e3e5 	.word	0x0800e3e5
 800c620:	0800e3dc 	.word	0x0800e3dc
 800c624:	0800e3b9 	.word	0x0800e3b9
 800c628:	3ff80000 	.word	0x3ff80000
 800c62c:	0800e550 	.word	0x0800e550
 800c630:	0800e45b 	.word	0x0800e45b
 800c634:	2501      	movs	r5, #1
 800c636:	2300      	movs	r3, #0
 800c638:	9306      	str	r3, [sp, #24]
 800c63a:	9508      	str	r5, [sp, #32]
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c644:	2200      	movs	r2, #0
 800c646:	2312      	movs	r3, #18
 800c648:	e7b0      	b.n	800c5ac <_dtoa_r+0x26c>
 800c64a:	2301      	movs	r3, #1
 800c64c:	9308      	str	r3, [sp, #32]
 800c64e:	e7f5      	b.n	800c63c <_dtoa_r+0x2fc>
 800c650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c656:	e7b8      	b.n	800c5ca <_dtoa_r+0x28a>
 800c658:	3101      	adds	r1, #1
 800c65a:	6041      	str	r1, [r0, #4]
 800c65c:	0052      	lsls	r2, r2, #1
 800c65e:	e7b8      	b.n	800c5d2 <_dtoa_r+0x292>
 800c660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c662:	9a01      	ldr	r2, [sp, #4]
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	2b0e      	cmp	r3, #14
 800c66a:	f200 809d 	bhi.w	800c7a8 <_dtoa_r+0x468>
 800c66e:	2d00      	cmp	r5, #0
 800c670:	f000 809a 	beq.w	800c7a8 <_dtoa_r+0x468>
 800c674:	9b00      	ldr	r3, [sp, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	dd32      	ble.n	800c6e0 <_dtoa_r+0x3a0>
 800c67a:	4ab7      	ldr	r2, [pc, #732]	; (800c958 <_dtoa_r+0x618>)
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c684:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c688:	9b00      	ldr	r3, [sp, #0]
 800c68a:	05d8      	lsls	r0, r3, #23
 800c68c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c690:	d516      	bpl.n	800c6c0 <_dtoa_r+0x380>
 800c692:	4bb2      	ldr	r3, [pc, #712]	; (800c95c <_dtoa_r+0x61c>)
 800c694:	ec51 0b19 	vmov	r0, r1, d9
 800c698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c69c:	f7f4 f8fe 	bl	800089c <__aeabi_ddiv>
 800c6a0:	f007 070f 	and.w	r7, r7, #15
 800c6a4:	4682      	mov	sl, r0
 800c6a6:	468b      	mov	fp, r1
 800c6a8:	2503      	movs	r5, #3
 800c6aa:	4eac      	ldr	r6, [pc, #688]	; (800c95c <_dtoa_r+0x61c>)
 800c6ac:	b957      	cbnz	r7, 800c6c4 <_dtoa_r+0x384>
 800c6ae:	4642      	mov	r2, r8
 800c6b0:	464b      	mov	r3, r9
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	f7f4 f8f1 	bl	800089c <__aeabi_ddiv>
 800c6ba:	4682      	mov	sl, r0
 800c6bc:	468b      	mov	fp, r1
 800c6be:	e028      	b.n	800c712 <_dtoa_r+0x3d2>
 800c6c0:	2502      	movs	r5, #2
 800c6c2:	e7f2      	b.n	800c6aa <_dtoa_r+0x36a>
 800c6c4:	07f9      	lsls	r1, r7, #31
 800c6c6:	d508      	bpl.n	800c6da <_dtoa_r+0x39a>
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6d0:	f7f3 ffba 	bl	8000648 <__aeabi_dmul>
 800c6d4:	3501      	adds	r5, #1
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4689      	mov	r9, r1
 800c6da:	107f      	asrs	r7, r7, #1
 800c6dc:	3608      	adds	r6, #8
 800c6de:	e7e5      	b.n	800c6ac <_dtoa_r+0x36c>
 800c6e0:	f000 809b 	beq.w	800c81a <_dtoa_r+0x4da>
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	4f9d      	ldr	r7, [pc, #628]	; (800c95c <_dtoa_r+0x61c>)
 800c6e8:	425e      	negs	r6, r3
 800c6ea:	4b9b      	ldr	r3, [pc, #620]	; (800c958 <_dtoa_r+0x618>)
 800c6ec:	f006 020f 	and.w	r2, r6, #15
 800c6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	ec51 0b19 	vmov	r0, r1, d9
 800c6fc:	f7f3 ffa4 	bl	8000648 <__aeabi_dmul>
 800c700:	1136      	asrs	r6, r6, #4
 800c702:	4682      	mov	sl, r0
 800c704:	468b      	mov	fp, r1
 800c706:	2300      	movs	r3, #0
 800c708:	2502      	movs	r5, #2
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	d17a      	bne.n	800c804 <_dtoa_r+0x4c4>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1d3      	bne.n	800c6ba <_dtoa_r+0x37a>
 800c712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8082 	beq.w	800c81e <_dtoa_r+0x4de>
 800c71a:	4b91      	ldr	r3, [pc, #580]	; (800c960 <_dtoa_r+0x620>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	4650      	mov	r0, sl
 800c720:	4659      	mov	r1, fp
 800c722:	f7f4 fa03 	bl	8000b2c <__aeabi_dcmplt>
 800c726:	2800      	cmp	r0, #0
 800c728:	d079      	beq.n	800c81e <_dtoa_r+0x4de>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d076      	beq.n	800c81e <_dtoa_r+0x4de>
 800c730:	9b02      	ldr	r3, [sp, #8]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dd36      	ble.n	800c7a4 <_dtoa_r+0x464>
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	4650      	mov	r0, sl
 800c73a:	4659      	mov	r1, fp
 800c73c:	1e5f      	subs	r7, r3, #1
 800c73e:	2200      	movs	r2, #0
 800c740:	4b88      	ldr	r3, [pc, #544]	; (800c964 <_dtoa_r+0x624>)
 800c742:	f7f3 ff81 	bl	8000648 <__aeabi_dmul>
 800c746:	9e02      	ldr	r6, [sp, #8]
 800c748:	4682      	mov	sl, r0
 800c74a:	468b      	mov	fp, r1
 800c74c:	3501      	adds	r5, #1
 800c74e:	4628      	mov	r0, r5
 800c750:	f7f3 ff10 	bl	8000574 <__aeabi_i2d>
 800c754:	4652      	mov	r2, sl
 800c756:	465b      	mov	r3, fp
 800c758:	f7f3 ff76 	bl	8000648 <__aeabi_dmul>
 800c75c:	4b82      	ldr	r3, [pc, #520]	; (800c968 <_dtoa_r+0x628>)
 800c75e:	2200      	movs	r2, #0
 800c760:	f7f3 fdbc 	bl	80002dc <__adddf3>
 800c764:	46d0      	mov	r8, sl
 800c766:	46d9      	mov	r9, fp
 800c768:	4682      	mov	sl, r0
 800c76a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c76e:	2e00      	cmp	r6, #0
 800c770:	d158      	bne.n	800c824 <_dtoa_r+0x4e4>
 800c772:	4b7e      	ldr	r3, [pc, #504]	; (800c96c <_dtoa_r+0x62c>)
 800c774:	2200      	movs	r2, #0
 800c776:	4640      	mov	r0, r8
 800c778:	4649      	mov	r1, r9
 800c77a:	f7f3 fdad 	bl	80002d8 <__aeabi_dsub>
 800c77e:	4652      	mov	r2, sl
 800c780:	465b      	mov	r3, fp
 800c782:	4680      	mov	r8, r0
 800c784:	4689      	mov	r9, r1
 800c786:	f7f4 f9ef 	bl	8000b68 <__aeabi_dcmpgt>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	f040 8295 	bne.w	800ccba <_dtoa_r+0x97a>
 800c790:	4652      	mov	r2, sl
 800c792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c796:	4640      	mov	r0, r8
 800c798:	4649      	mov	r1, r9
 800c79a:	f7f4 f9c7 	bl	8000b2c <__aeabi_dcmplt>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	f040 8289 	bne.w	800ccb6 <_dtoa_r+0x976>
 800c7a4:	ec5b ab19 	vmov	sl, fp, d9
 800c7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f2c0 8148 	blt.w	800ca40 <_dtoa_r+0x700>
 800c7b0:	9a00      	ldr	r2, [sp, #0]
 800c7b2:	2a0e      	cmp	r2, #14
 800c7b4:	f300 8144 	bgt.w	800ca40 <_dtoa_r+0x700>
 800c7b8:	4b67      	ldr	r3, [pc, #412]	; (800c958 <_dtoa_r+0x618>)
 800c7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f280 80d5 	bge.w	800c974 <_dtoa_r+0x634>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f300 80d1 	bgt.w	800c974 <_dtoa_r+0x634>
 800c7d2:	f040 826f 	bne.w	800ccb4 <_dtoa_r+0x974>
 800c7d6:	4b65      	ldr	r3, [pc, #404]	; (800c96c <_dtoa_r+0x62c>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4640      	mov	r0, r8
 800c7dc:	4649      	mov	r1, r9
 800c7de:	f7f3 ff33 	bl	8000648 <__aeabi_dmul>
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	465b      	mov	r3, fp
 800c7e6:	f7f4 f9b5 	bl	8000b54 <__aeabi_dcmpge>
 800c7ea:	9e03      	ldr	r6, [sp, #12]
 800c7ec:	4637      	mov	r7, r6
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f040 8245 	bne.w	800cc7e <_dtoa_r+0x93e>
 800c7f4:	9d01      	ldr	r5, [sp, #4]
 800c7f6:	2331      	movs	r3, #49	; 0x31
 800c7f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c7fc:	9b00      	ldr	r3, [sp, #0]
 800c7fe:	3301      	adds	r3, #1
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	e240      	b.n	800cc86 <_dtoa_r+0x946>
 800c804:	07f2      	lsls	r2, r6, #31
 800c806:	d505      	bpl.n	800c814 <_dtoa_r+0x4d4>
 800c808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c80c:	f7f3 ff1c 	bl	8000648 <__aeabi_dmul>
 800c810:	3501      	adds	r5, #1
 800c812:	2301      	movs	r3, #1
 800c814:	1076      	asrs	r6, r6, #1
 800c816:	3708      	adds	r7, #8
 800c818:	e777      	b.n	800c70a <_dtoa_r+0x3ca>
 800c81a:	2502      	movs	r5, #2
 800c81c:	e779      	b.n	800c712 <_dtoa_r+0x3d2>
 800c81e:	9f00      	ldr	r7, [sp, #0]
 800c820:	9e03      	ldr	r6, [sp, #12]
 800c822:	e794      	b.n	800c74e <_dtoa_r+0x40e>
 800c824:	9901      	ldr	r1, [sp, #4]
 800c826:	4b4c      	ldr	r3, [pc, #304]	; (800c958 <_dtoa_r+0x618>)
 800c828:	4431      	add	r1, r6
 800c82a:	910d      	str	r1, [sp, #52]	; 0x34
 800c82c:	9908      	ldr	r1, [sp, #32]
 800c82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c836:	2900      	cmp	r1, #0
 800c838:	d043      	beq.n	800c8c2 <_dtoa_r+0x582>
 800c83a:	494d      	ldr	r1, [pc, #308]	; (800c970 <_dtoa_r+0x630>)
 800c83c:	2000      	movs	r0, #0
 800c83e:	f7f4 f82d 	bl	800089c <__aeabi_ddiv>
 800c842:	4652      	mov	r2, sl
 800c844:	465b      	mov	r3, fp
 800c846:	f7f3 fd47 	bl	80002d8 <__aeabi_dsub>
 800c84a:	9d01      	ldr	r5, [sp, #4]
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	4649      	mov	r1, r9
 800c852:	4640      	mov	r0, r8
 800c854:	f7f4 f9a8 	bl	8000ba8 <__aeabi_d2iz>
 800c858:	4606      	mov	r6, r0
 800c85a:	f7f3 fe8b 	bl	8000574 <__aeabi_i2d>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	4640      	mov	r0, r8
 800c864:	4649      	mov	r1, r9
 800c866:	f7f3 fd37 	bl	80002d8 <__aeabi_dsub>
 800c86a:	3630      	adds	r6, #48	; 0x30
 800c86c:	f805 6b01 	strb.w	r6, [r5], #1
 800c870:	4652      	mov	r2, sl
 800c872:	465b      	mov	r3, fp
 800c874:	4680      	mov	r8, r0
 800c876:	4689      	mov	r9, r1
 800c878:	f7f4 f958 	bl	8000b2c <__aeabi_dcmplt>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d163      	bne.n	800c948 <_dtoa_r+0x608>
 800c880:	4642      	mov	r2, r8
 800c882:	464b      	mov	r3, r9
 800c884:	4936      	ldr	r1, [pc, #216]	; (800c960 <_dtoa_r+0x620>)
 800c886:	2000      	movs	r0, #0
 800c888:	f7f3 fd26 	bl	80002d8 <__aeabi_dsub>
 800c88c:	4652      	mov	r2, sl
 800c88e:	465b      	mov	r3, fp
 800c890:	f7f4 f94c 	bl	8000b2c <__aeabi_dcmplt>
 800c894:	2800      	cmp	r0, #0
 800c896:	f040 80b5 	bne.w	800ca04 <_dtoa_r+0x6c4>
 800c89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c89c:	429d      	cmp	r5, r3
 800c89e:	d081      	beq.n	800c7a4 <_dtoa_r+0x464>
 800c8a0:	4b30      	ldr	r3, [pc, #192]	; (800c964 <_dtoa_r+0x624>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	4650      	mov	r0, sl
 800c8a6:	4659      	mov	r1, fp
 800c8a8:	f7f3 fece 	bl	8000648 <__aeabi_dmul>
 800c8ac:	4b2d      	ldr	r3, [pc, #180]	; (800c964 <_dtoa_r+0x624>)
 800c8ae:	4682      	mov	sl, r0
 800c8b0:	468b      	mov	fp, r1
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f7f3 fec6 	bl	8000648 <__aeabi_dmul>
 800c8bc:	4680      	mov	r8, r0
 800c8be:	4689      	mov	r9, r1
 800c8c0:	e7c6      	b.n	800c850 <_dtoa_r+0x510>
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	f7f3 febf 	bl	8000648 <__aeabi_dmul>
 800c8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8cc:	9d01      	ldr	r5, [sp, #4]
 800c8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8d0:	4682      	mov	sl, r0
 800c8d2:	468b      	mov	fp, r1
 800c8d4:	4649      	mov	r1, r9
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	f7f4 f966 	bl	8000ba8 <__aeabi_d2iz>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	f7f3 fe49 	bl	8000574 <__aeabi_i2d>
 800c8e2:	3630      	adds	r6, #48	; 0x30
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	f7f3 fcf4 	bl	80002d8 <__aeabi_dsub>
 800c8f0:	f805 6b01 	strb.w	r6, [r5], #1
 800c8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	4689      	mov	r9, r1
 800c8fc:	f04f 0200 	mov.w	r2, #0
 800c900:	d124      	bne.n	800c94c <_dtoa_r+0x60c>
 800c902:	4b1b      	ldr	r3, [pc, #108]	; (800c970 <_dtoa_r+0x630>)
 800c904:	4650      	mov	r0, sl
 800c906:	4659      	mov	r1, fp
 800c908:	f7f3 fce8 	bl	80002dc <__adddf3>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4640      	mov	r0, r8
 800c912:	4649      	mov	r1, r9
 800c914:	f7f4 f928 	bl	8000b68 <__aeabi_dcmpgt>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d173      	bne.n	800ca04 <_dtoa_r+0x6c4>
 800c91c:	4652      	mov	r2, sl
 800c91e:	465b      	mov	r3, fp
 800c920:	4913      	ldr	r1, [pc, #76]	; (800c970 <_dtoa_r+0x630>)
 800c922:	2000      	movs	r0, #0
 800c924:	f7f3 fcd8 	bl	80002d8 <__aeabi_dsub>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	4640      	mov	r0, r8
 800c92e:	4649      	mov	r1, r9
 800c930:	f7f4 f8fc 	bl	8000b2c <__aeabi_dcmplt>
 800c934:	2800      	cmp	r0, #0
 800c936:	f43f af35 	beq.w	800c7a4 <_dtoa_r+0x464>
 800c93a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c93c:	1e6b      	subs	r3, r5, #1
 800c93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c944:	2b30      	cmp	r3, #48	; 0x30
 800c946:	d0f8      	beq.n	800c93a <_dtoa_r+0x5fa>
 800c948:	9700      	str	r7, [sp, #0]
 800c94a:	e049      	b.n	800c9e0 <_dtoa_r+0x6a0>
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <_dtoa_r+0x624>)
 800c94e:	f7f3 fe7b 	bl	8000648 <__aeabi_dmul>
 800c952:	4680      	mov	r8, r0
 800c954:	4689      	mov	r9, r1
 800c956:	e7bd      	b.n	800c8d4 <_dtoa_r+0x594>
 800c958:	0800e550 	.word	0x0800e550
 800c95c:	0800e528 	.word	0x0800e528
 800c960:	3ff00000 	.word	0x3ff00000
 800c964:	40240000 	.word	0x40240000
 800c968:	401c0000 	.word	0x401c0000
 800c96c:	40140000 	.word	0x40140000
 800c970:	3fe00000 	.word	0x3fe00000
 800c974:	9d01      	ldr	r5, [sp, #4]
 800c976:	4656      	mov	r6, sl
 800c978:	465f      	mov	r7, fp
 800c97a:	4642      	mov	r2, r8
 800c97c:	464b      	mov	r3, r9
 800c97e:	4630      	mov	r0, r6
 800c980:	4639      	mov	r1, r7
 800c982:	f7f3 ff8b 	bl	800089c <__aeabi_ddiv>
 800c986:	f7f4 f90f 	bl	8000ba8 <__aeabi_d2iz>
 800c98a:	4682      	mov	sl, r0
 800c98c:	f7f3 fdf2 	bl	8000574 <__aeabi_i2d>
 800c990:	4642      	mov	r2, r8
 800c992:	464b      	mov	r3, r9
 800c994:	f7f3 fe58 	bl	8000648 <__aeabi_dmul>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4630      	mov	r0, r6
 800c99e:	4639      	mov	r1, r7
 800c9a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9a4:	f7f3 fc98 	bl	80002d8 <__aeabi_dsub>
 800c9a8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9ac:	9e01      	ldr	r6, [sp, #4]
 800c9ae:	9f03      	ldr	r7, [sp, #12]
 800c9b0:	1bae      	subs	r6, r5, r6
 800c9b2:	42b7      	cmp	r7, r6
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	d135      	bne.n	800ca26 <_dtoa_r+0x6e6>
 800c9ba:	f7f3 fc8f 	bl	80002dc <__adddf3>
 800c9be:	4642      	mov	r2, r8
 800c9c0:	464b      	mov	r3, r9
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	f7f4 f8cf 	bl	8000b68 <__aeabi_dcmpgt>
 800c9ca:	b9d0      	cbnz	r0, 800ca02 <_dtoa_r+0x6c2>
 800c9cc:	4642      	mov	r2, r8
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f4 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 800c9d8:	b110      	cbz	r0, 800c9e0 <_dtoa_r+0x6a0>
 800c9da:	f01a 0f01 	tst.w	sl, #1
 800c9de:	d110      	bne.n	800ca02 <_dtoa_r+0x6c2>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	ee18 1a10 	vmov	r1, s16
 800c9e6:	f000 fd05 	bl	800d3f4 <_Bfree>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	9800      	ldr	r0, [sp, #0]
 800c9ee:	702b      	strb	r3, [r5, #0]
 800c9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	6018      	str	r0, [r3, #0]
 800c9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f43f acf1 	beq.w	800c3e0 <_dtoa_r+0xa0>
 800c9fe:	601d      	str	r5, [r3, #0]
 800ca00:	e4ee      	b.n	800c3e0 <_dtoa_r+0xa0>
 800ca02:	9f00      	ldr	r7, [sp, #0]
 800ca04:	462b      	mov	r3, r5
 800ca06:	461d      	mov	r5, r3
 800ca08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca0c:	2a39      	cmp	r2, #57	; 0x39
 800ca0e:	d106      	bne.n	800ca1e <_dtoa_r+0x6de>
 800ca10:	9a01      	ldr	r2, [sp, #4]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d1f7      	bne.n	800ca06 <_dtoa_r+0x6c6>
 800ca16:	9901      	ldr	r1, [sp, #4]
 800ca18:	2230      	movs	r2, #48	; 0x30
 800ca1a:	3701      	adds	r7, #1
 800ca1c:	700a      	strb	r2, [r1, #0]
 800ca1e:	781a      	ldrb	r2, [r3, #0]
 800ca20:	3201      	adds	r2, #1
 800ca22:	701a      	strb	r2, [r3, #0]
 800ca24:	e790      	b.n	800c948 <_dtoa_r+0x608>
 800ca26:	4ba6      	ldr	r3, [pc, #664]	; (800ccc0 <_dtoa_r+0x980>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f7f3 fe0d 	bl	8000648 <__aeabi_dmul>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2300      	movs	r3, #0
 800ca32:	4606      	mov	r6, r0
 800ca34:	460f      	mov	r7, r1
 800ca36:	f7f4 f86f 	bl	8000b18 <__aeabi_dcmpeq>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d09d      	beq.n	800c97a <_dtoa_r+0x63a>
 800ca3e:	e7cf      	b.n	800c9e0 <_dtoa_r+0x6a0>
 800ca40:	9a08      	ldr	r2, [sp, #32]
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	f000 80d7 	beq.w	800cbf6 <_dtoa_r+0x8b6>
 800ca48:	9a06      	ldr	r2, [sp, #24]
 800ca4a:	2a01      	cmp	r2, #1
 800ca4c:	f300 80ba 	bgt.w	800cbc4 <_dtoa_r+0x884>
 800ca50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca52:	2a00      	cmp	r2, #0
 800ca54:	f000 80b2 	beq.w	800cbbc <_dtoa_r+0x87c>
 800ca58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca5c:	9e07      	ldr	r6, [sp, #28]
 800ca5e:	9d04      	ldr	r5, [sp, #16]
 800ca60:	9a04      	ldr	r2, [sp, #16]
 800ca62:	441a      	add	r2, r3
 800ca64:	9204      	str	r2, [sp, #16]
 800ca66:	9a05      	ldr	r2, [sp, #20]
 800ca68:	2101      	movs	r1, #1
 800ca6a:	441a      	add	r2, r3
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	9205      	str	r2, [sp, #20]
 800ca70:	f000 fd78 	bl	800d564 <__i2b>
 800ca74:	4607      	mov	r7, r0
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	dd0c      	ble.n	800ca94 <_dtoa_r+0x754>
 800ca7a:	9b05      	ldr	r3, [sp, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dd09      	ble.n	800ca94 <_dtoa_r+0x754>
 800ca80:	42ab      	cmp	r3, r5
 800ca82:	9a04      	ldr	r2, [sp, #16]
 800ca84:	bfa8      	it	ge
 800ca86:	462b      	movge	r3, r5
 800ca88:	1ad2      	subs	r2, r2, r3
 800ca8a:	9204      	str	r2, [sp, #16]
 800ca8c:	9a05      	ldr	r2, [sp, #20]
 800ca8e:	1aed      	subs	r5, r5, r3
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	9305      	str	r3, [sp, #20]
 800ca94:	9b07      	ldr	r3, [sp, #28]
 800ca96:	b31b      	cbz	r3, 800cae0 <_dtoa_r+0x7a0>
 800ca98:	9b08      	ldr	r3, [sp, #32]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 80af 	beq.w	800cbfe <_dtoa_r+0x8be>
 800caa0:	2e00      	cmp	r6, #0
 800caa2:	dd13      	ble.n	800cacc <_dtoa_r+0x78c>
 800caa4:	4639      	mov	r1, r7
 800caa6:	4632      	mov	r2, r6
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 fe1b 	bl	800d6e4 <__pow5mult>
 800caae:	ee18 2a10 	vmov	r2, s16
 800cab2:	4601      	mov	r1, r0
 800cab4:	4607      	mov	r7, r0
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 fd6a 	bl	800d590 <__multiply>
 800cabc:	ee18 1a10 	vmov	r1, s16
 800cac0:	4680      	mov	r8, r0
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fc96 	bl	800d3f4 <_Bfree>
 800cac8:	ee08 8a10 	vmov	s16, r8
 800cacc:	9b07      	ldr	r3, [sp, #28]
 800cace:	1b9a      	subs	r2, r3, r6
 800cad0:	d006      	beq.n	800cae0 <_dtoa_r+0x7a0>
 800cad2:	ee18 1a10 	vmov	r1, s16
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 fe04 	bl	800d6e4 <__pow5mult>
 800cadc:	ee08 0a10 	vmov	s16, r0
 800cae0:	2101      	movs	r1, #1
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fd3e 	bl	800d564 <__i2b>
 800cae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caea:	2b00      	cmp	r3, #0
 800caec:	4606      	mov	r6, r0
 800caee:	f340 8088 	ble.w	800cc02 <_dtoa_r+0x8c2>
 800caf2:	461a      	mov	r2, r3
 800caf4:	4601      	mov	r1, r0
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 fdf4 	bl	800d6e4 <__pow5mult>
 800cafc:	9b06      	ldr	r3, [sp, #24]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	4606      	mov	r6, r0
 800cb02:	f340 8081 	ble.w	800cc08 <_dtoa_r+0x8c8>
 800cb06:	f04f 0800 	mov.w	r8, #0
 800cb0a:	6933      	ldr	r3, [r6, #16]
 800cb0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb10:	6918      	ldr	r0, [r3, #16]
 800cb12:	f000 fcd7 	bl	800d4c4 <__hi0bits>
 800cb16:	f1c0 0020 	rsb	r0, r0, #32
 800cb1a:	9b05      	ldr	r3, [sp, #20]
 800cb1c:	4418      	add	r0, r3
 800cb1e:	f010 001f 	ands.w	r0, r0, #31
 800cb22:	f000 8092 	beq.w	800cc4a <_dtoa_r+0x90a>
 800cb26:	f1c0 0320 	rsb	r3, r0, #32
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	f340 808a 	ble.w	800cc44 <_dtoa_r+0x904>
 800cb30:	f1c0 001c 	rsb	r0, r0, #28
 800cb34:	9b04      	ldr	r3, [sp, #16]
 800cb36:	4403      	add	r3, r0
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	4403      	add	r3, r0
 800cb3e:	4405      	add	r5, r0
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd07      	ble.n	800cb58 <_dtoa_r+0x818>
 800cb48:	ee18 1a10 	vmov	r1, s16
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 fe22 	bl	800d798 <__lshift>
 800cb54:	ee08 0a10 	vmov	s16, r0
 800cb58:	9b05      	ldr	r3, [sp, #20]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	dd05      	ble.n	800cb6a <_dtoa_r+0x82a>
 800cb5e:	4631      	mov	r1, r6
 800cb60:	461a      	mov	r2, r3
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fe18 	bl	800d798 <__lshift>
 800cb68:	4606      	mov	r6, r0
 800cb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d06e      	beq.n	800cc4e <_dtoa_r+0x90e>
 800cb70:	ee18 0a10 	vmov	r0, s16
 800cb74:	4631      	mov	r1, r6
 800cb76:	f000 fe7f 	bl	800d878 <__mcmp>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	da67      	bge.n	800cc4e <_dtoa_r+0x90e>
 800cb7e:	9b00      	ldr	r3, [sp, #0]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	ee18 1a10 	vmov	r1, s16
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	220a      	movs	r2, #10
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 fc53 	bl	800d438 <__multadd>
 800cb92:	9b08      	ldr	r3, [sp, #32]
 800cb94:	ee08 0a10 	vmov	s16, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 81b1 	beq.w	800cf00 <_dtoa_r+0xbc0>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4639      	mov	r1, r7
 800cba2:	220a      	movs	r2, #10
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 fc47 	bl	800d438 <__multadd>
 800cbaa:	9b02      	ldr	r3, [sp, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	4607      	mov	r7, r0
 800cbb0:	f300 808e 	bgt.w	800ccd0 <_dtoa_r+0x990>
 800cbb4:	9b06      	ldr	r3, [sp, #24]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	dc51      	bgt.n	800cc5e <_dtoa_r+0x91e>
 800cbba:	e089      	b.n	800ccd0 <_dtoa_r+0x990>
 800cbbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbc2:	e74b      	b.n	800ca5c <_dtoa_r+0x71c>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	1e5e      	subs	r6, r3, #1
 800cbc8:	9b07      	ldr	r3, [sp, #28]
 800cbca:	42b3      	cmp	r3, r6
 800cbcc:	bfbf      	itttt	lt
 800cbce:	9b07      	ldrlt	r3, [sp, #28]
 800cbd0:	9607      	strlt	r6, [sp, #28]
 800cbd2:	1af2      	sublt	r2, r6, r3
 800cbd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbd6:	bfb6      	itet	lt
 800cbd8:	189b      	addlt	r3, r3, r2
 800cbda:	1b9e      	subge	r6, r3, r6
 800cbdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cbde:	9b03      	ldr	r3, [sp, #12]
 800cbe0:	bfb8      	it	lt
 800cbe2:	2600      	movlt	r6, #0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bfb7      	itett	lt
 800cbe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cbec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cbf0:	1a9d      	sublt	r5, r3, r2
 800cbf2:	2300      	movlt	r3, #0
 800cbf4:	e734      	b.n	800ca60 <_dtoa_r+0x720>
 800cbf6:	9e07      	ldr	r6, [sp, #28]
 800cbf8:	9d04      	ldr	r5, [sp, #16]
 800cbfa:	9f08      	ldr	r7, [sp, #32]
 800cbfc:	e73b      	b.n	800ca76 <_dtoa_r+0x736>
 800cbfe:	9a07      	ldr	r2, [sp, #28]
 800cc00:	e767      	b.n	800cad2 <_dtoa_r+0x792>
 800cc02:	9b06      	ldr	r3, [sp, #24]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	dc18      	bgt.n	800cc3a <_dtoa_r+0x8fa>
 800cc08:	f1ba 0f00 	cmp.w	sl, #0
 800cc0c:	d115      	bne.n	800cc3a <_dtoa_r+0x8fa>
 800cc0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc12:	b993      	cbnz	r3, 800cc3a <_dtoa_r+0x8fa>
 800cc14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc18:	0d1b      	lsrs	r3, r3, #20
 800cc1a:	051b      	lsls	r3, r3, #20
 800cc1c:	b183      	cbz	r3, 800cc40 <_dtoa_r+0x900>
 800cc1e:	9b04      	ldr	r3, [sp, #16]
 800cc20:	3301      	adds	r3, #1
 800cc22:	9304      	str	r3, [sp, #16]
 800cc24:	9b05      	ldr	r3, [sp, #20]
 800cc26:	3301      	adds	r3, #1
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	f04f 0801 	mov.w	r8, #1
 800cc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f47f af6a 	bne.w	800cb0a <_dtoa_r+0x7ca>
 800cc36:	2001      	movs	r0, #1
 800cc38:	e76f      	b.n	800cb1a <_dtoa_r+0x7da>
 800cc3a:	f04f 0800 	mov.w	r8, #0
 800cc3e:	e7f6      	b.n	800cc2e <_dtoa_r+0x8ee>
 800cc40:	4698      	mov	r8, r3
 800cc42:	e7f4      	b.n	800cc2e <_dtoa_r+0x8ee>
 800cc44:	f43f af7d 	beq.w	800cb42 <_dtoa_r+0x802>
 800cc48:	4618      	mov	r0, r3
 800cc4a:	301c      	adds	r0, #28
 800cc4c:	e772      	b.n	800cb34 <_dtoa_r+0x7f4>
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dc37      	bgt.n	800ccc4 <_dtoa_r+0x984>
 800cc54:	9b06      	ldr	r3, [sp, #24]
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	dd34      	ble.n	800ccc4 <_dtoa_r+0x984>
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	9302      	str	r3, [sp, #8]
 800cc5e:	9b02      	ldr	r3, [sp, #8]
 800cc60:	b96b      	cbnz	r3, 800cc7e <_dtoa_r+0x93e>
 800cc62:	4631      	mov	r1, r6
 800cc64:	2205      	movs	r2, #5
 800cc66:	4620      	mov	r0, r4
 800cc68:	f000 fbe6 	bl	800d438 <__multadd>
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	4606      	mov	r6, r0
 800cc70:	ee18 0a10 	vmov	r0, s16
 800cc74:	f000 fe00 	bl	800d878 <__mcmp>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	f73f adbb 	bgt.w	800c7f4 <_dtoa_r+0x4b4>
 800cc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc80:	9d01      	ldr	r5, [sp, #4]
 800cc82:	43db      	mvns	r3, r3
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	f04f 0800 	mov.w	r8, #0
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f000 fbb1 	bl	800d3f4 <_Bfree>
 800cc92:	2f00      	cmp	r7, #0
 800cc94:	f43f aea4 	beq.w	800c9e0 <_dtoa_r+0x6a0>
 800cc98:	f1b8 0f00 	cmp.w	r8, #0
 800cc9c:	d005      	beq.n	800ccaa <_dtoa_r+0x96a>
 800cc9e:	45b8      	cmp	r8, r7
 800cca0:	d003      	beq.n	800ccaa <_dtoa_r+0x96a>
 800cca2:	4641      	mov	r1, r8
 800cca4:	4620      	mov	r0, r4
 800cca6:	f000 fba5 	bl	800d3f4 <_Bfree>
 800ccaa:	4639      	mov	r1, r7
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 fba1 	bl	800d3f4 <_Bfree>
 800ccb2:	e695      	b.n	800c9e0 <_dtoa_r+0x6a0>
 800ccb4:	2600      	movs	r6, #0
 800ccb6:	4637      	mov	r7, r6
 800ccb8:	e7e1      	b.n	800cc7e <_dtoa_r+0x93e>
 800ccba:	9700      	str	r7, [sp, #0]
 800ccbc:	4637      	mov	r7, r6
 800ccbe:	e599      	b.n	800c7f4 <_dtoa_r+0x4b4>
 800ccc0:	40240000 	.word	0x40240000
 800ccc4:	9b08      	ldr	r3, [sp, #32]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 80ca 	beq.w	800ce60 <_dtoa_r+0xb20>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	9302      	str	r3, [sp, #8]
 800ccd0:	2d00      	cmp	r5, #0
 800ccd2:	dd05      	ble.n	800cce0 <_dtoa_r+0x9a0>
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 fd5d 	bl	800d798 <__lshift>
 800ccde:	4607      	mov	r7, r0
 800cce0:	f1b8 0f00 	cmp.w	r8, #0
 800cce4:	d05b      	beq.n	800cd9e <_dtoa_r+0xa5e>
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 fb43 	bl	800d374 <_Balloc>
 800ccee:	4605      	mov	r5, r0
 800ccf0:	b928      	cbnz	r0, 800ccfe <_dtoa_r+0x9be>
 800ccf2:	4b87      	ldr	r3, [pc, #540]	; (800cf10 <_dtoa_r+0xbd0>)
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ccfa:	f7ff bb3b 	b.w	800c374 <_dtoa_r+0x34>
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	3202      	adds	r2, #2
 800cd02:	0092      	lsls	r2, r2, #2
 800cd04:	f107 010c 	add.w	r1, r7, #12
 800cd08:	300c      	adds	r0, #12
 800cd0a:	f7fe fd1d 	bl	800b748 <memcpy>
 800cd0e:	2201      	movs	r2, #1
 800cd10:	4629      	mov	r1, r5
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fd40 	bl	800d798 <__lshift>
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	f103 0901 	add.w	r9, r3, #1
 800cd1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	9305      	str	r3, [sp, #20]
 800cd26:	f00a 0301 	and.w	r3, sl, #1
 800cd2a:	46b8      	mov	r8, r7
 800cd2c:	9304      	str	r3, [sp, #16]
 800cd2e:	4607      	mov	r7, r0
 800cd30:	4631      	mov	r1, r6
 800cd32:	ee18 0a10 	vmov	r0, s16
 800cd36:	f7ff fa75 	bl	800c224 <quorem>
 800cd3a:	4641      	mov	r1, r8
 800cd3c:	9002      	str	r0, [sp, #8]
 800cd3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd42:	ee18 0a10 	vmov	r0, s16
 800cd46:	f000 fd97 	bl	800d878 <__mcmp>
 800cd4a:	463a      	mov	r2, r7
 800cd4c:	9003      	str	r0, [sp, #12]
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4620      	mov	r0, r4
 800cd52:	f000 fdad 	bl	800d8b0 <__mdiff>
 800cd56:	68c2      	ldr	r2, [r0, #12]
 800cd58:	f109 3bff 	add.w	fp, r9, #4294967295
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	bb02      	cbnz	r2, 800cda2 <_dtoa_r+0xa62>
 800cd60:	4601      	mov	r1, r0
 800cd62:	ee18 0a10 	vmov	r0, s16
 800cd66:	f000 fd87 	bl	800d878 <__mcmp>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4620      	mov	r0, r4
 800cd70:	9207      	str	r2, [sp, #28]
 800cd72:	f000 fb3f 	bl	800d3f4 <_Bfree>
 800cd76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cd7a:	ea43 0102 	orr.w	r1, r3, r2
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	430b      	orrs	r3, r1
 800cd82:	464d      	mov	r5, r9
 800cd84:	d10f      	bne.n	800cda6 <_dtoa_r+0xa66>
 800cd86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd8a:	d02a      	beq.n	800cde2 <_dtoa_r+0xaa2>
 800cd8c:	9b03      	ldr	r3, [sp, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	dd02      	ble.n	800cd98 <_dtoa_r+0xa58>
 800cd92:	9b02      	ldr	r3, [sp, #8]
 800cd94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cd98:	f88b a000 	strb.w	sl, [fp]
 800cd9c:	e775      	b.n	800cc8a <_dtoa_r+0x94a>
 800cd9e:	4638      	mov	r0, r7
 800cda0:	e7ba      	b.n	800cd18 <_dtoa_r+0x9d8>
 800cda2:	2201      	movs	r2, #1
 800cda4:	e7e2      	b.n	800cd6c <_dtoa_r+0xa2c>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	db04      	blt.n	800cdb6 <_dtoa_r+0xa76>
 800cdac:	9906      	ldr	r1, [sp, #24]
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	9904      	ldr	r1, [sp, #16]
 800cdb2:	430b      	orrs	r3, r1
 800cdb4:	d122      	bne.n	800cdfc <_dtoa_r+0xabc>
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	ddee      	ble.n	800cd98 <_dtoa_r+0xa58>
 800cdba:	ee18 1a10 	vmov	r1, s16
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fce9 	bl	800d798 <__lshift>
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	ee08 0a10 	vmov	s16, r0
 800cdcc:	f000 fd54 	bl	800d878 <__mcmp>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dc03      	bgt.n	800cddc <_dtoa_r+0xa9c>
 800cdd4:	d1e0      	bne.n	800cd98 <_dtoa_r+0xa58>
 800cdd6:	f01a 0f01 	tst.w	sl, #1
 800cdda:	d0dd      	beq.n	800cd98 <_dtoa_r+0xa58>
 800cddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cde0:	d1d7      	bne.n	800cd92 <_dtoa_r+0xa52>
 800cde2:	2339      	movs	r3, #57	; 0x39
 800cde4:	f88b 3000 	strb.w	r3, [fp]
 800cde8:	462b      	mov	r3, r5
 800cdea:	461d      	mov	r5, r3
 800cdec:	3b01      	subs	r3, #1
 800cdee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdf2:	2a39      	cmp	r2, #57	; 0x39
 800cdf4:	d071      	beq.n	800ceda <_dtoa_r+0xb9a>
 800cdf6:	3201      	adds	r2, #1
 800cdf8:	701a      	strb	r2, [r3, #0]
 800cdfa:	e746      	b.n	800cc8a <_dtoa_r+0x94a>
 800cdfc:	2a00      	cmp	r2, #0
 800cdfe:	dd07      	ble.n	800ce10 <_dtoa_r+0xad0>
 800ce00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce04:	d0ed      	beq.n	800cde2 <_dtoa_r+0xaa2>
 800ce06:	f10a 0301 	add.w	r3, sl, #1
 800ce0a:	f88b 3000 	strb.w	r3, [fp]
 800ce0e:	e73c      	b.n	800cc8a <_dtoa_r+0x94a>
 800ce10:	9b05      	ldr	r3, [sp, #20]
 800ce12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce16:	4599      	cmp	r9, r3
 800ce18:	d047      	beq.n	800ceaa <_dtoa_r+0xb6a>
 800ce1a:	ee18 1a10 	vmov	r1, s16
 800ce1e:	2300      	movs	r3, #0
 800ce20:	220a      	movs	r2, #10
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 fb08 	bl	800d438 <__multadd>
 800ce28:	45b8      	cmp	r8, r7
 800ce2a:	ee08 0a10 	vmov	s16, r0
 800ce2e:	f04f 0300 	mov.w	r3, #0
 800ce32:	f04f 020a 	mov.w	r2, #10
 800ce36:	4641      	mov	r1, r8
 800ce38:	4620      	mov	r0, r4
 800ce3a:	d106      	bne.n	800ce4a <_dtoa_r+0xb0a>
 800ce3c:	f000 fafc 	bl	800d438 <__multadd>
 800ce40:	4680      	mov	r8, r0
 800ce42:	4607      	mov	r7, r0
 800ce44:	f109 0901 	add.w	r9, r9, #1
 800ce48:	e772      	b.n	800cd30 <_dtoa_r+0x9f0>
 800ce4a:	f000 faf5 	bl	800d438 <__multadd>
 800ce4e:	4639      	mov	r1, r7
 800ce50:	4680      	mov	r8, r0
 800ce52:	2300      	movs	r3, #0
 800ce54:	220a      	movs	r2, #10
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 faee 	bl	800d438 <__multadd>
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	e7f1      	b.n	800ce44 <_dtoa_r+0xb04>
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	9302      	str	r3, [sp, #8]
 800ce64:	9d01      	ldr	r5, [sp, #4]
 800ce66:	ee18 0a10 	vmov	r0, s16
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	f7ff f9da 	bl	800c224 <quorem>
 800ce70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	f805 ab01 	strb.w	sl, [r5], #1
 800ce7a:	1aea      	subs	r2, r5, r3
 800ce7c:	9b02      	ldr	r3, [sp, #8]
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	dd09      	ble.n	800ce96 <_dtoa_r+0xb56>
 800ce82:	ee18 1a10 	vmov	r1, s16
 800ce86:	2300      	movs	r3, #0
 800ce88:	220a      	movs	r2, #10
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fad4 	bl	800d438 <__multadd>
 800ce90:	ee08 0a10 	vmov	s16, r0
 800ce94:	e7e7      	b.n	800ce66 <_dtoa_r+0xb26>
 800ce96:	9b02      	ldr	r3, [sp, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	bfc8      	it	gt
 800ce9c:	461d      	movgt	r5, r3
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	bfd8      	it	le
 800cea2:	2501      	movle	r5, #1
 800cea4:	441d      	add	r5, r3
 800cea6:	f04f 0800 	mov.w	r8, #0
 800ceaa:	ee18 1a10 	vmov	r1, s16
 800ceae:	2201      	movs	r2, #1
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f000 fc71 	bl	800d798 <__lshift>
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	ee08 0a10 	vmov	s16, r0
 800cebc:	f000 fcdc 	bl	800d878 <__mcmp>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	dc91      	bgt.n	800cde8 <_dtoa_r+0xaa8>
 800cec4:	d102      	bne.n	800cecc <_dtoa_r+0xb8c>
 800cec6:	f01a 0f01 	tst.w	sl, #1
 800ceca:	d18d      	bne.n	800cde8 <_dtoa_r+0xaa8>
 800cecc:	462b      	mov	r3, r5
 800cece:	461d      	mov	r5, r3
 800ced0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ced4:	2a30      	cmp	r2, #48	; 0x30
 800ced6:	d0fa      	beq.n	800cece <_dtoa_r+0xb8e>
 800ced8:	e6d7      	b.n	800cc8a <_dtoa_r+0x94a>
 800ceda:	9a01      	ldr	r2, [sp, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d184      	bne.n	800cdea <_dtoa_r+0xaaa>
 800cee0:	9b00      	ldr	r3, [sp, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	2331      	movs	r3, #49	; 0x31
 800cee8:	7013      	strb	r3, [r2, #0]
 800ceea:	e6ce      	b.n	800cc8a <_dtoa_r+0x94a>
 800ceec:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <_dtoa_r+0xbd4>)
 800ceee:	f7ff ba95 	b.w	800c41c <_dtoa_r+0xdc>
 800cef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f47f aa6e 	bne.w	800c3d6 <_dtoa_r+0x96>
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <_dtoa_r+0xbd8>)
 800cefc:	f7ff ba8e 	b.w	800c41c <_dtoa_r+0xdc>
 800cf00:	9b02      	ldr	r3, [sp, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	dcae      	bgt.n	800ce64 <_dtoa_r+0xb24>
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	f73f aea8 	bgt.w	800cc5e <_dtoa_r+0x91e>
 800cf0e:	e7a9      	b.n	800ce64 <_dtoa_r+0xb24>
 800cf10:	0800e45b 	.word	0x0800e45b
 800cf14:	0800e3b8 	.word	0x0800e3b8
 800cf18:	0800e3dc 	.word	0x0800e3dc

0800cf1c <__sflush_r>:
 800cf1c:	898a      	ldrh	r2, [r1, #12]
 800cf1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	4605      	mov	r5, r0
 800cf24:	0710      	lsls	r0, r2, #28
 800cf26:	460c      	mov	r4, r1
 800cf28:	d458      	bmi.n	800cfdc <__sflush_r+0xc0>
 800cf2a:	684b      	ldr	r3, [r1, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dc05      	bgt.n	800cf3c <__sflush_r+0x20>
 800cf30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dc02      	bgt.n	800cf3c <__sflush_r+0x20>
 800cf36:	2000      	movs	r0, #0
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	d0f9      	beq.n	800cf36 <__sflush_r+0x1a>
 800cf42:	2300      	movs	r3, #0
 800cf44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf48:	682f      	ldr	r7, [r5, #0]
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	d032      	beq.n	800cfb4 <__sflush_r+0x98>
 800cf4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	075a      	lsls	r2, r3, #29
 800cf54:	d505      	bpl.n	800cf62 <__sflush_r+0x46>
 800cf56:	6863      	ldr	r3, [r4, #4]
 800cf58:	1ac0      	subs	r0, r0, r3
 800cf5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf5c:	b10b      	cbz	r3, 800cf62 <__sflush_r+0x46>
 800cf5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf60:	1ac0      	subs	r0, r0, r3
 800cf62:	2300      	movs	r3, #0
 800cf64:	4602      	mov	r2, r0
 800cf66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf68:	6a21      	ldr	r1, [r4, #32]
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b0      	blx	r6
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	d106      	bne.n	800cf82 <__sflush_r+0x66>
 800cf74:	6829      	ldr	r1, [r5, #0]
 800cf76:	291d      	cmp	r1, #29
 800cf78:	d82c      	bhi.n	800cfd4 <__sflush_r+0xb8>
 800cf7a:	4a2a      	ldr	r2, [pc, #168]	; (800d024 <__sflush_r+0x108>)
 800cf7c:	40ca      	lsrs	r2, r1
 800cf7e:	07d6      	lsls	r6, r2, #31
 800cf80:	d528      	bpl.n	800cfd4 <__sflush_r+0xb8>
 800cf82:	2200      	movs	r2, #0
 800cf84:	6062      	str	r2, [r4, #4]
 800cf86:	04d9      	lsls	r1, r3, #19
 800cf88:	6922      	ldr	r2, [r4, #16]
 800cf8a:	6022      	str	r2, [r4, #0]
 800cf8c:	d504      	bpl.n	800cf98 <__sflush_r+0x7c>
 800cf8e:	1c42      	adds	r2, r0, #1
 800cf90:	d101      	bne.n	800cf96 <__sflush_r+0x7a>
 800cf92:	682b      	ldr	r3, [r5, #0]
 800cf94:	b903      	cbnz	r3, 800cf98 <__sflush_r+0x7c>
 800cf96:	6560      	str	r0, [r4, #84]	; 0x54
 800cf98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf9a:	602f      	str	r7, [r5, #0]
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	d0ca      	beq.n	800cf36 <__sflush_r+0x1a>
 800cfa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa4:	4299      	cmp	r1, r3
 800cfa6:	d002      	beq.n	800cfae <__sflush_r+0x92>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 fd7d 	bl	800daa8 <_free_r>
 800cfae:	2000      	movs	r0, #0
 800cfb0:	6360      	str	r0, [r4, #52]	; 0x34
 800cfb2:	e7c1      	b.n	800cf38 <__sflush_r+0x1c>
 800cfb4:	6a21      	ldr	r1, [r4, #32]
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b0      	blx	r6
 800cfbc:	1c41      	adds	r1, r0, #1
 800cfbe:	d1c7      	bne.n	800cf50 <__sflush_r+0x34>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0c4      	beq.n	800cf50 <__sflush_r+0x34>
 800cfc6:	2b1d      	cmp	r3, #29
 800cfc8:	d001      	beq.n	800cfce <__sflush_r+0xb2>
 800cfca:	2b16      	cmp	r3, #22
 800cfcc:	d101      	bne.n	800cfd2 <__sflush_r+0xb6>
 800cfce:	602f      	str	r7, [r5, #0]
 800cfd0:	e7b1      	b.n	800cf36 <__sflush_r+0x1a>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	e7ad      	b.n	800cf38 <__sflush_r+0x1c>
 800cfdc:	690f      	ldr	r7, [r1, #16]
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	d0a9      	beq.n	800cf36 <__sflush_r+0x1a>
 800cfe2:	0793      	lsls	r3, r2, #30
 800cfe4:	680e      	ldr	r6, [r1, #0]
 800cfe6:	bf08      	it	eq
 800cfe8:	694b      	ldreq	r3, [r1, #20]
 800cfea:	600f      	str	r7, [r1, #0]
 800cfec:	bf18      	it	ne
 800cfee:	2300      	movne	r3, #0
 800cff0:	eba6 0807 	sub.w	r8, r6, r7
 800cff4:	608b      	str	r3, [r1, #8]
 800cff6:	f1b8 0f00 	cmp.w	r8, #0
 800cffa:	dd9c      	ble.n	800cf36 <__sflush_r+0x1a>
 800cffc:	6a21      	ldr	r1, [r4, #32]
 800cffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d000:	4643      	mov	r3, r8
 800d002:	463a      	mov	r2, r7
 800d004:	4628      	mov	r0, r5
 800d006:	47b0      	blx	r6
 800d008:	2800      	cmp	r0, #0
 800d00a:	dc06      	bgt.n	800d01a <__sflush_r+0xfe>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	e78e      	b.n	800cf38 <__sflush_r+0x1c>
 800d01a:	4407      	add	r7, r0
 800d01c:	eba8 0800 	sub.w	r8, r8, r0
 800d020:	e7e9      	b.n	800cff6 <__sflush_r+0xda>
 800d022:	bf00      	nop
 800d024:	20400001 	.word	0x20400001

0800d028 <_fflush_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	690b      	ldr	r3, [r1, #16]
 800d02c:	4605      	mov	r5, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	b913      	cbnz	r3, 800d038 <_fflush_r+0x10>
 800d032:	2500      	movs	r5, #0
 800d034:	4628      	mov	r0, r5
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	b118      	cbz	r0, 800d042 <_fflush_r+0x1a>
 800d03a:	6983      	ldr	r3, [r0, #24]
 800d03c:	b90b      	cbnz	r3, 800d042 <_fflush_r+0x1a>
 800d03e:	f000 f887 	bl	800d150 <__sinit>
 800d042:	4b14      	ldr	r3, [pc, #80]	; (800d094 <_fflush_r+0x6c>)
 800d044:	429c      	cmp	r4, r3
 800d046:	d11b      	bne.n	800d080 <_fflush_r+0x58>
 800d048:	686c      	ldr	r4, [r5, #4]
 800d04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0ef      	beq.n	800d032 <_fflush_r+0xa>
 800d052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d054:	07d0      	lsls	r0, r2, #31
 800d056:	d404      	bmi.n	800d062 <_fflush_r+0x3a>
 800d058:	0599      	lsls	r1, r3, #22
 800d05a:	d402      	bmi.n	800d062 <_fflush_r+0x3a>
 800d05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d05e:	f000 f91a 	bl	800d296 <__retarget_lock_acquire_recursive>
 800d062:	4628      	mov	r0, r5
 800d064:	4621      	mov	r1, r4
 800d066:	f7ff ff59 	bl	800cf1c <__sflush_r>
 800d06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d06c:	07da      	lsls	r2, r3, #31
 800d06e:	4605      	mov	r5, r0
 800d070:	d4e0      	bmi.n	800d034 <_fflush_r+0xc>
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	059b      	lsls	r3, r3, #22
 800d076:	d4dd      	bmi.n	800d034 <_fflush_r+0xc>
 800d078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d07a:	f000 f90d 	bl	800d298 <__retarget_lock_release_recursive>
 800d07e:	e7d9      	b.n	800d034 <_fflush_r+0xc>
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <_fflush_r+0x70>)
 800d082:	429c      	cmp	r4, r3
 800d084:	d101      	bne.n	800d08a <_fflush_r+0x62>
 800d086:	68ac      	ldr	r4, [r5, #8]
 800d088:	e7df      	b.n	800d04a <_fflush_r+0x22>
 800d08a:	4b04      	ldr	r3, [pc, #16]	; (800d09c <_fflush_r+0x74>)
 800d08c:	429c      	cmp	r4, r3
 800d08e:	bf08      	it	eq
 800d090:	68ec      	ldreq	r4, [r5, #12]
 800d092:	e7da      	b.n	800d04a <_fflush_r+0x22>
 800d094:	0800e48c 	.word	0x0800e48c
 800d098:	0800e4ac 	.word	0x0800e4ac
 800d09c:	0800e46c 	.word	0x0800e46c

0800d0a0 <std>:
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0ae:	6083      	str	r3, [r0, #8]
 800d0b0:	8181      	strh	r1, [r0, #12]
 800d0b2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0b4:	81c2      	strh	r2, [r0, #14]
 800d0b6:	6183      	str	r3, [r0, #24]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	305c      	adds	r0, #92	; 0x5c
 800d0be:	f7fe fb51 	bl	800b764 <memset>
 800d0c2:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <std+0x38>)
 800d0c4:	6263      	str	r3, [r4, #36]	; 0x24
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <std+0x3c>)
 800d0c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0ca:	4b05      	ldr	r3, [pc, #20]	; (800d0e0 <std+0x40>)
 800d0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0ce:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <std+0x44>)
 800d0d0:	6224      	str	r4, [r4, #32]
 800d0d2:	6323      	str	r3, [r4, #48]	; 0x30
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	bf00      	nop
 800d0d8:	0800dfcd 	.word	0x0800dfcd
 800d0dc:	0800dfef 	.word	0x0800dfef
 800d0e0:	0800e027 	.word	0x0800e027
 800d0e4:	0800e04b 	.word	0x0800e04b

0800d0e8 <_cleanup_r>:
 800d0e8:	4901      	ldr	r1, [pc, #4]	; (800d0f0 <_cleanup_r+0x8>)
 800d0ea:	f000 b8af 	b.w	800d24c <_fwalk_reent>
 800d0ee:	bf00      	nop
 800d0f0:	0800d029 	.word	0x0800d029

0800d0f4 <__sfmoreglue>:
 800d0f4:	b570      	push	{r4, r5, r6, lr}
 800d0f6:	2268      	movs	r2, #104	; 0x68
 800d0f8:	1e4d      	subs	r5, r1, #1
 800d0fa:	4355      	muls	r5, r2
 800d0fc:	460e      	mov	r6, r1
 800d0fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d102:	f000 fd3d 	bl	800db80 <_malloc_r>
 800d106:	4604      	mov	r4, r0
 800d108:	b140      	cbz	r0, 800d11c <__sfmoreglue+0x28>
 800d10a:	2100      	movs	r1, #0
 800d10c:	e9c0 1600 	strd	r1, r6, [r0]
 800d110:	300c      	adds	r0, #12
 800d112:	60a0      	str	r0, [r4, #8]
 800d114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d118:	f7fe fb24 	bl	800b764 <memset>
 800d11c:	4620      	mov	r0, r4
 800d11e:	bd70      	pop	{r4, r5, r6, pc}

0800d120 <__sfp_lock_acquire>:
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <__sfp_lock_acquire+0x8>)
 800d122:	f000 b8b8 	b.w	800d296 <__retarget_lock_acquire_recursive>
 800d126:	bf00      	nop
 800d128:	2000c375 	.word	0x2000c375

0800d12c <__sfp_lock_release>:
 800d12c:	4801      	ldr	r0, [pc, #4]	; (800d134 <__sfp_lock_release+0x8>)
 800d12e:	f000 b8b3 	b.w	800d298 <__retarget_lock_release_recursive>
 800d132:	bf00      	nop
 800d134:	2000c375 	.word	0x2000c375

0800d138 <__sinit_lock_acquire>:
 800d138:	4801      	ldr	r0, [pc, #4]	; (800d140 <__sinit_lock_acquire+0x8>)
 800d13a:	f000 b8ac 	b.w	800d296 <__retarget_lock_acquire_recursive>
 800d13e:	bf00      	nop
 800d140:	2000c376 	.word	0x2000c376

0800d144 <__sinit_lock_release>:
 800d144:	4801      	ldr	r0, [pc, #4]	; (800d14c <__sinit_lock_release+0x8>)
 800d146:	f000 b8a7 	b.w	800d298 <__retarget_lock_release_recursive>
 800d14a:	bf00      	nop
 800d14c:	2000c376 	.word	0x2000c376

0800d150 <__sinit>:
 800d150:	b510      	push	{r4, lr}
 800d152:	4604      	mov	r4, r0
 800d154:	f7ff fff0 	bl	800d138 <__sinit_lock_acquire>
 800d158:	69a3      	ldr	r3, [r4, #24]
 800d15a:	b11b      	cbz	r3, 800d164 <__sinit+0x14>
 800d15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d160:	f7ff bff0 	b.w	800d144 <__sinit_lock_release>
 800d164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d168:	6523      	str	r3, [r4, #80]	; 0x50
 800d16a:	4b13      	ldr	r3, [pc, #76]	; (800d1b8 <__sinit+0x68>)
 800d16c:	4a13      	ldr	r2, [pc, #76]	; (800d1bc <__sinit+0x6c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	62a2      	str	r2, [r4, #40]	; 0x28
 800d172:	42a3      	cmp	r3, r4
 800d174:	bf04      	itt	eq
 800d176:	2301      	moveq	r3, #1
 800d178:	61a3      	streq	r3, [r4, #24]
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 f820 	bl	800d1c0 <__sfp>
 800d180:	6060      	str	r0, [r4, #4]
 800d182:	4620      	mov	r0, r4
 800d184:	f000 f81c 	bl	800d1c0 <__sfp>
 800d188:	60a0      	str	r0, [r4, #8]
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f818 	bl	800d1c0 <__sfp>
 800d190:	2200      	movs	r2, #0
 800d192:	60e0      	str	r0, [r4, #12]
 800d194:	2104      	movs	r1, #4
 800d196:	6860      	ldr	r0, [r4, #4]
 800d198:	f7ff ff82 	bl	800d0a0 <std>
 800d19c:	68a0      	ldr	r0, [r4, #8]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	2109      	movs	r1, #9
 800d1a2:	f7ff ff7d 	bl	800d0a0 <std>
 800d1a6:	68e0      	ldr	r0, [r4, #12]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	2112      	movs	r1, #18
 800d1ac:	f7ff ff78 	bl	800d0a0 <std>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	61a3      	str	r3, [r4, #24]
 800d1b4:	e7d2      	b.n	800d15c <__sinit+0xc>
 800d1b6:	bf00      	nop
 800d1b8:	0800e3a4 	.word	0x0800e3a4
 800d1bc:	0800d0e9 	.word	0x0800d0e9

0800d1c0 <__sfp>:
 800d1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c2:	4607      	mov	r7, r0
 800d1c4:	f7ff ffac 	bl	800d120 <__sfp_lock_acquire>
 800d1c8:	4b1e      	ldr	r3, [pc, #120]	; (800d244 <__sfp+0x84>)
 800d1ca:	681e      	ldr	r6, [r3, #0]
 800d1cc:	69b3      	ldr	r3, [r6, #24]
 800d1ce:	b913      	cbnz	r3, 800d1d6 <__sfp+0x16>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7ff ffbd 	bl	800d150 <__sinit>
 800d1d6:	3648      	adds	r6, #72	; 0x48
 800d1d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	d503      	bpl.n	800d1e8 <__sfp+0x28>
 800d1e0:	6833      	ldr	r3, [r6, #0]
 800d1e2:	b30b      	cbz	r3, 800d228 <__sfp+0x68>
 800d1e4:	6836      	ldr	r6, [r6, #0]
 800d1e6:	e7f7      	b.n	800d1d8 <__sfp+0x18>
 800d1e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1ec:	b9d5      	cbnz	r5, 800d224 <__sfp+0x64>
 800d1ee:	4b16      	ldr	r3, [pc, #88]	; (800d248 <__sfp+0x88>)
 800d1f0:	60e3      	str	r3, [r4, #12]
 800d1f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1f6:	6665      	str	r5, [r4, #100]	; 0x64
 800d1f8:	f000 f84c 	bl	800d294 <__retarget_lock_init_recursive>
 800d1fc:	f7ff ff96 	bl	800d12c <__sfp_lock_release>
 800d200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d208:	6025      	str	r5, [r4, #0]
 800d20a:	61a5      	str	r5, [r4, #24]
 800d20c:	2208      	movs	r2, #8
 800d20e:	4629      	mov	r1, r5
 800d210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d214:	f7fe faa6 	bl	800b764 <memset>
 800d218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d21c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d220:	4620      	mov	r0, r4
 800d222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d224:	3468      	adds	r4, #104	; 0x68
 800d226:	e7d9      	b.n	800d1dc <__sfp+0x1c>
 800d228:	2104      	movs	r1, #4
 800d22a:	4638      	mov	r0, r7
 800d22c:	f7ff ff62 	bl	800d0f4 <__sfmoreglue>
 800d230:	4604      	mov	r4, r0
 800d232:	6030      	str	r0, [r6, #0]
 800d234:	2800      	cmp	r0, #0
 800d236:	d1d5      	bne.n	800d1e4 <__sfp+0x24>
 800d238:	f7ff ff78 	bl	800d12c <__sfp_lock_release>
 800d23c:	230c      	movs	r3, #12
 800d23e:	603b      	str	r3, [r7, #0]
 800d240:	e7ee      	b.n	800d220 <__sfp+0x60>
 800d242:	bf00      	nop
 800d244:	0800e3a4 	.word	0x0800e3a4
 800d248:	ffff0001 	.word	0xffff0001

0800d24c <_fwalk_reent>:
 800d24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d250:	4606      	mov	r6, r0
 800d252:	4688      	mov	r8, r1
 800d254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d258:	2700      	movs	r7, #0
 800d25a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d25e:	f1b9 0901 	subs.w	r9, r9, #1
 800d262:	d505      	bpl.n	800d270 <_fwalk_reent+0x24>
 800d264:	6824      	ldr	r4, [r4, #0]
 800d266:	2c00      	cmp	r4, #0
 800d268:	d1f7      	bne.n	800d25a <_fwalk_reent+0xe>
 800d26a:	4638      	mov	r0, r7
 800d26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d270:	89ab      	ldrh	r3, [r5, #12]
 800d272:	2b01      	cmp	r3, #1
 800d274:	d907      	bls.n	800d286 <_fwalk_reent+0x3a>
 800d276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d27a:	3301      	adds	r3, #1
 800d27c:	d003      	beq.n	800d286 <_fwalk_reent+0x3a>
 800d27e:	4629      	mov	r1, r5
 800d280:	4630      	mov	r0, r6
 800d282:	47c0      	blx	r8
 800d284:	4307      	orrs	r7, r0
 800d286:	3568      	adds	r5, #104	; 0x68
 800d288:	e7e9      	b.n	800d25e <_fwalk_reent+0x12>
	...

0800d28c <_localeconv_r>:
 800d28c:	4800      	ldr	r0, [pc, #0]	; (800d290 <_localeconv_r+0x4>)
 800d28e:	4770      	bx	lr
 800d290:	20000180 	.word	0x20000180

0800d294 <__retarget_lock_init_recursive>:
 800d294:	4770      	bx	lr

0800d296 <__retarget_lock_acquire_recursive>:
 800d296:	4770      	bx	lr

0800d298 <__retarget_lock_release_recursive>:
 800d298:	4770      	bx	lr

0800d29a <__swhatbuf_r>:
 800d29a:	b570      	push	{r4, r5, r6, lr}
 800d29c:	460e      	mov	r6, r1
 800d29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a2:	2900      	cmp	r1, #0
 800d2a4:	b096      	sub	sp, #88	; 0x58
 800d2a6:	4614      	mov	r4, r2
 800d2a8:	461d      	mov	r5, r3
 800d2aa:	da08      	bge.n	800d2be <__swhatbuf_r+0x24>
 800d2ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	602a      	str	r2, [r5, #0]
 800d2b4:	061a      	lsls	r2, r3, #24
 800d2b6:	d410      	bmi.n	800d2da <__swhatbuf_r+0x40>
 800d2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2bc:	e00e      	b.n	800d2dc <__swhatbuf_r+0x42>
 800d2be:	466a      	mov	r2, sp
 800d2c0:	f000 ff1a 	bl	800e0f8 <_fstat_r>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	dbf1      	blt.n	800d2ac <__swhatbuf_r+0x12>
 800d2c8:	9a01      	ldr	r2, [sp, #4]
 800d2ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2d2:	425a      	negs	r2, r3
 800d2d4:	415a      	adcs	r2, r3
 800d2d6:	602a      	str	r2, [r5, #0]
 800d2d8:	e7ee      	b.n	800d2b8 <__swhatbuf_r+0x1e>
 800d2da:	2340      	movs	r3, #64	; 0x40
 800d2dc:	2000      	movs	r0, #0
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	b016      	add	sp, #88	; 0x58
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}

0800d2e4 <__smakebuf_r>:
 800d2e4:	898b      	ldrh	r3, [r1, #12]
 800d2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2e8:	079d      	lsls	r5, r3, #30
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	d507      	bpl.n	800d300 <__smakebuf_r+0x1c>
 800d2f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	6123      	str	r3, [r4, #16]
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	6163      	str	r3, [r4, #20]
 800d2fc:	b002      	add	sp, #8
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	ab01      	add	r3, sp, #4
 800d302:	466a      	mov	r2, sp
 800d304:	f7ff ffc9 	bl	800d29a <__swhatbuf_r>
 800d308:	9900      	ldr	r1, [sp, #0]
 800d30a:	4605      	mov	r5, r0
 800d30c:	4630      	mov	r0, r6
 800d30e:	f000 fc37 	bl	800db80 <_malloc_r>
 800d312:	b948      	cbnz	r0, 800d328 <__smakebuf_r+0x44>
 800d314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d318:	059a      	lsls	r2, r3, #22
 800d31a:	d4ef      	bmi.n	800d2fc <__smakebuf_r+0x18>
 800d31c:	f023 0303 	bic.w	r3, r3, #3
 800d320:	f043 0302 	orr.w	r3, r3, #2
 800d324:	81a3      	strh	r3, [r4, #12]
 800d326:	e7e3      	b.n	800d2f0 <__smakebuf_r+0xc>
 800d328:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <__smakebuf_r+0x7c>)
 800d32a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	6020      	str	r0, [r4, #0]
 800d330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	9b00      	ldr	r3, [sp, #0]
 800d338:	6163      	str	r3, [r4, #20]
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	6120      	str	r0, [r4, #16]
 800d33e:	b15b      	cbz	r3, 800d358 <__smakebuf_r+0x74>
 800d340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d344:	4630      	mov	r0, r6
 800d346:	f000 fee9 	bl	800e11c <_isatty_r>
 800d34a:	b128      	cbz	r0, 800d358 <__smakebuf_r+0x74>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f023 0303 	bic.w	r3, r3, #3
 800d352:	f043 0301 	orr.w	r3, r3, #1
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	89a0      	ldrh	r0, [r4, #12]
 800d35a:	4305      	orrs	r5, r0
 800d35c:	81a5      	strh	r5, [r4, #12]
 800d35e:	e7cd      	b.n	800d2fc <__smakebuf_r+0x18>
 800d360:	0800d0e9 	.word	0x0800d0e9

0800d364 <malloc>:
 800d364:	4b02      	ldr	r3, [pc, #8]	; (800d370 <malloc+0xc>)
 800d366:	4601      	mov	r1, r0
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f000 bc09 	b.w	800db80 <_malloc_r>
 800d36e:	bf00      	nop
 800d370:	2000002c 	.word	0x2000002c

0800d374 <_Balloc>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	b976      	cbnz	r6, 800d39c <_Balloc+0x28>
 800d37e:	2010      	movs	r0, #16
 800d380:	f7ff fff0 	bl	800d364 <malloc>
 800d384:	4602      	mov	r2, r0
 800d386:	6260      	str	r0, [r4, #36]	; 0x24
 800d388:	b920      	cbnz	r0, 800d394 <_Balloc+0x20>
 800d38a:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <_Balloc+0x78>)
 800d38c:	4818      	ldr	r0, [pc, #96]	; (800d3f0 <_Balloc+0x7c>)
 800d38e:	2166      	movs	r1, #102	; 0x66
 800d390:	f000 fe72 	bl	800e078 <__assert_func>
 800d394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d398:	6006      	str	r6, [r0, #0]
 800d39a:	60c6      	str	r6, [r0, #12]
 800d39c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d39e:	68f3      	ldr	r3, [r6, #12]
 800d3a0:	b183      	cbz	r3, 800d3c4 <_Balloc+0x50>
 800d3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3aa:	b9b8      	cbnz	r0, 800d3dc <_Balloc+0x68>
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d3b2:	1d72      	adds	r2, r6, #5
 800d3b4:	0092      	lsls	r2, r2, #2
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 fb60 	bl	800da7c <_calloc_r>
 800d3bc:	b160      	cbz	r0, 800d3d8 <_Balloc+0x64>
 800d3be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3c2:	e00e      	b.n	800d3e2 <_Balloc+0x6e>
 800d3c4:	2221      	movs	r2, #33	; 0x21
 800d3c6:	2104      	movs	r1, #4
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fb57 	bl	800da7c <_calloc_r>
 800d3ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3d0:	60f0      	str	r0, [r6, #12]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e4      	bne.n	800d3a2 <_Balloc+0x2e>
 800d3d8:	2000      	movs	r0, #0
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	6802      	ldr	r2, [r0, #0]
 800d3de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3e8:	e7f7      	b.n	800d3da <_Balloc+0x66>
 800d3ea:	bf00      	nop
 800d3ec:	0800e3e9 	.word	0x0800e3e9
 800d3f0:	0800e4cc 	.word	0x0800e4cc

0800d3f4 <_Bfree>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	b976      	cbnz	r6, 800d41c <_Bfree+0x28>
 800d3fe:	2010      	movs	r0, #16
 800d400:	f7ff ffb0 	bl	800d364 <malloc>
 800d404:	4602      	mov	r2, r0
 800d406:	6268      	str	r0, [r5, #36]	; 0x24
 800d408:	b920      	cbnz	r0, 800d414 <_Bfree+0x20>
 800d40a:	4b09      	ldr	r3, [pc, #36]	; (800d430 <_Bfree+0x3c>)
 800d40c:	4809      	ldr	r0, [pc, #36]	; (800d434 <_Bfree+0x40>)
 800d40e:	218a      	movs	r1, #138	; 0x8a
 800d410:	f000 fe32 	bl	800e078 <__assert_func>
 800d414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d418:	6006      	str	r6, [r0, #0]
 800d41a:	60c6      	str	r6, [r0, #12]
 800d41c:	b13c      	cbz	r4, 800d42e <_Bfree+0x3a>
 800d41e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d420:	6862      	ldr	r2, [r4, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d428:	6021      	str	r1, [r4, #0]
 800d42a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	0800e3e9 	.word	0x0800e3e9
 800d434:	0800e4cc 	.word	0x0800e4cc

0800d438 <__multadd>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	690d      	ldr	r5, [r1, #16]
 800d43e:	4607      	mov	r7, r0
 800d440:	460c      	mov	r4, r1
 800d442:	461e      	mov	r6, r3
 800d444:	f101 0c14 	add.w	ip, r1, #20
 800d448:	2000      	movs	r0, #0
 800d44a:	f8dc 3000 	ldr.w	r3, [ip]
 800d44e:	b299      	uxth	r1, r3
 800d450:	fb02 6101 	mla	r1, r2, r1, r6
 800d454:	0c1e      	lsrs	r6, r3, #16
 800d456:	0c0b      	lsrs	r3, r1, #16
 800d458:	fb02 3306 	mla	r3, r2, r6, r3
 800d45c:	b289      	uxth	r1, r1
 800d45e:	3001      	adds	r0, #1
 800d460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d464:	4285      	cmp	r5, r0
 800d466:	f84c 1b04 	str.w	r1, [ip], #4
 800d46a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d46e:	dcec      	bgt.n	800d44a <__multadd+0x12>
 800d470:	b30e      	cbz	r6, 800d4b6 <__multadd+0x7e>
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	42ab      	cmp	r3, r5
 800d476:	dc19      	bgt.n	800d4ac <__multadd+0x74>
 800d478:	6861      	ldr	r1, [r4, #4]
 800d47a:	4638      	mov	r0, r7
 800d47c:	3101      	adds	r1, #1
 800d47e:	f7ff ff79 	bl	800d374 <_Balloc>
 800d482:	4680      	mov	r8, r0
 800d484:	b928      	cbnz	r0, 800d492 <__multadd+0x5a>
 800d486:	4602      	mov	r2, r0
 800d488:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <__multadd+0x84>)
 800d48a:	480d      	ldr	r0, [pc, #52]	; (800d4c0 <__multadd+0x88>)
 800d48c:	21b5      	movs	r1, #181	; 0xb5
 800d48e:	f000 fdf3 	bl	800e078 <__assert_func>
 800d492:	6922      	ldr	r2, [r4, #16]
 800d494:	3202      	adds	r2, #2
 800d496:	f104 010c 	add.w	r1, r4, #12
 800d49a:	0092      	lsls	r2, r2, #2
 800d49c:	300c      	adds	r0, #12
 800d49e:	f7fe f953 	bl	800b748 <memcpy>
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f7ff ffa5 	bl	800d3f4 <_Bfree>
 800d4aa:	4644      	mov	r4, r8
 800d4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	615e      	str	r6, [r3, #20]
 800d4b4:	6125      	str	r5, [r4, #16]
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	0800e45b 	.word	0x0800e45b
 800d4c0:	0800e4cc 	.word	0x0800e4cc

0800d4c4 <__hi0bits>:
 800d4c4:	0c03      	lsrs	r3, r0, #16
 800d4c6:	041b      	lsls	r3, r3, #16
 800d4c8:	b9d3      	cbnz	r3, 800d500 <__hi0bits+0x3c>
 800d4ca:	0400      	lsls	r0, r0, #16
 800d4cc:	2310      	movs	r3, #16
 800d4ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4d2:	bf04      	itt	eq
 800d4d4:	0200      	lsleq	r0, r0, #8
 800d4d6:	3308      	addeq	r3, #8
 800d4d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4dc:	bf04      	itt	eq
 800d4de:	0100      	lsleq	r0, r0, #4
 800d4e0:	3304      	addeq	r3, #4
 800d4e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4e6:	bf04      	itt	eq
 800d4e8:	0080      	lsleq	r0, r0, #2
 800d4ea:	3302      	addeq	r3, #2
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	db05      	blt.n	800d4fc <__hi0bits+0x38>
 800d4f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d4f4:	f103 0301 	add.w	r3, r3, #1
 800d4f8:	bf08      	it	eq
 800d4fa:	2320      	moveq	r3, #32
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	4770      	bx	lr
 800d500:	2300      	movs	r3, #0
 800d502:	e7e4      	b.n	800d4ce <__hi0bits+0xa>

0800d504 <__lo0bits>:
 800d504:	6803      	ldr	r3, [r0, #0]
 800d506:	f013 0207 	ands.w	r2, r3, #7
 800d50a:	4601      	mov	r1, r0
 800d50c:	d00b      	beq.n	800d526 <__lo0bits+0x22>
 800d50e:	07da      	lsls	r2, r3, #31
 800d510:	d423      	bmi.n	800d55a <__lo0bits+0x56>
 800d512:	0798      	lsls	r0, r3, #30
 800d514:	bf49      	itett	mi
 800d516:	085b      	lsrmi	r3, r3, #1
 800d518:	089b      	lsrpl	r3, r3, #2
 800d51a:	2001      	movmi	r0, #1
 800d51c:	600b      	strmi	r3, [r1, #0]
 800d51e:	bf5c      	itt	pl
 800d520:	600b      	strpl	r3, [r1, #0]
 800d522:	2002      	movpl	r0, #2
 800d524:	4770      	bx	lr
 800d526:	b298      	uxth	r0, r3
 800d528:	b9a8      	cbnz	r0, 800d556 <__lo0bits+0x52>
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	2010      	movs	r0, #16
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	b90a      	cbnz	r2, 800d536 <__lo0bits+0x32>
 800d532:	3008      	adds	r0, #8
 800d534:	0a1b      	lsrs	r3, r3, #8
 800d536:	071a      	lsls	r2, r3, #28
 800d538:	bf04      	itt	eq
 800d53a:	091b      	lsreq	r3, r3, #4
 800d53c:	3004      	addeq	r0, #4
 800d53e:	079a      	lsls	r2, r3, #30
 800d540:	bf04      	itt	eq
 800d542:	089b      	lsreq	r3, r3, #2
 800d544:	3002      	addeq	r0, #2
 800d546:	07da      	lsls	r2, r3, #31
 800d548:	d403      	bmi.n	800d552 <__lo0bits+0x4e>
 800d54a:	085b      	lsrs	r3, r3, #1
 800d54c:	f100 0001 	add.w	r0, r0, #1
 800d550:	d005      	beq.n	800d55e <__lo0bits+0x5a>
 800d552:	600b      	str	r3, [r1, #0]
 800d554:	4770      	bx	lr
 800d556:	4610      	mov	r0, r2
 800d558:	e7e9      	b.n	800d52e <__lo0bits+0x2a>
 800d55a:	2000      	movs	r0, #0
 800d55c:	4770      	bx	lr
 800d55e:	2020      	movs	r0, #32
 800d560:	4770      	bx	lr
	...

0800d564 <__i2b>:
 800d564:	b510      	push	{r4, lr}
 800d566:	460c      	mov	r4, r1
 800d568:	2101      	movs	r1, #1
 800d56a:	f7ff ff03 	bl	800d374 <_Balloc>
 800d56e:	4602      	mov	r2, r0
 800d570:	b928      	cbnz	r0, 800d57e <__i2b+0x1a>
 800d572:	4b05      	ldr	r3, [pc, #20]	; (800d588 <__i2b+0x24>)
 800d574:	4805      	ldr	r0, [pc, #20]	; (800d58c <__i2b+0x28>)
 800d576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d57a:	f000 fd7d 	bl	800e078 <__assert_func>
 800d57e:	2301      	movs	r3, #1
 800d580:	6144      	str	r4, [r0, #20]
 800d582:	6103      	str	r3, [r0, #16]
 800d584:	bd10      	pop	{r4, pc}
 800d586:	bf00      	nop
 800d588:	0800e45b 	.word	0x0800e45b
 800d58c:	0800e4cc 	.word	0x0800e4cc

0800d590 <__multiply>:
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	4691      	mov	r9, r2
 800d596:	690a      	ldr	r2, [r1, #16]
 800d598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	bfb8      	it	lt
 800d5a0:	460b      	movlt	r3, r1
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	bfbc      	itt	lt
 800d5a6:	464c      	movlt	r4, r9
 800d5a8:	4699      	movlt	r9, r3
 800d5aa:	6927      	ldr	r7, [r4, #16]
 800d5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5b0:	68a3      	ldr	r3, [r4, #8]
 800d5b2:	6861      	ldr	r1, [r4, #4]
 800d5b4:	eb07 060a 	add.w	r6, r7, sl
 800d5b8:	42b3      	cmp	r3, r6
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	bfb8      	it	lt
 800d5be:	3101      	addlt	r1, #1
 800d5c0:	f7ff fed8 	bl	800d374 <_Balloc>
 800d5c4:	b930      	cbnz	r0, 800d5d4 <__multiply+0x44>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	4b44      	ldr	r3, [pc, #272]	; (800d6dc <__multiply+0x14c>)
 800d5ca:	4845      	ldr	r0, [pc, #276]	; (800d6e0 <__multiply+0x150>)
 800d5cc:	f240 115d 	movw	r1, #349	; 0x15d
 800d5d0:	f000 fd52 	bl	800e078 <__assert_func>
 800d5d4:	f100 0514 	add.w	r5, r0, #20
 800d5d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5dc:	462b      	mov	r3, r5
 800d5de:	2200      	movs	r2, #0
 800d5e0:	4543      	cmp	r3, r8
 800d5e2:	d321      	bcc.n	800d628 <__multiply+0x98>
 800d5e4:	f104 0314 	add.w	r3, r4, #20
 800d5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d5ec:	f109 0314 	add.w	r3, r9, #20
 800d5f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d5f4:	9202      	str	r2, [sp, #8]
 800d5f6:	1b3a      	subs	r2, r7, r4
 800d5f8:	3a15      	subs	r2, #21
 800d5fa:	f022 0203 	bic.w	r2, r2, #3
 800d5fe:	3204      	adds	r2, #4
 800d600:	f104 0115 	add.w	r1, r4, #21
 800d604:	428f      	cmp	r7, r1
 800d606:	bf38      	it	cc
 800d608:	2204      	movcc	r2, #4
 800d60a:	9201      	str	r2, [sp, #4]
 800d60c:	9a02      	ldr	r2, [sp, #8]
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	429a      	cmp	r2, r3
 800d612:	d80c      	bhi.n	800d62e <__multiply+0x9e>
 800d614:	2e00      	cmp	r6, #0
 800d616:	dd03      	ble.n	800d620 <__multiply+0x90>
 800d618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d05a      	beq.n	800d6d6 <__multiply+0x146>
 800d620:	6106      	str	r6, [r0, #16]
 800d622:	b005      	add	sp, #20
 800d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d628:	f843 2b04 	str.w	r2, [r3], #4
 800d62c:	e7d8      	b.n	800d5e0 <__multiply+0x50>
 800d62e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d632:	f1ba 0f00 	cmp.w	sl, #0
 800d636:	d024      	beq.n	800d682 <__multiply+0xf2>
 800d638:	f104 0e14 	add.w	lr, r4, #20
 800d63c:	46a9      	mov	r9, r5
 800d63e:	f04f 0c00 	mov.w	ip, #0
 800d642:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d646:	f8d9 1000 	ldr.w	r1, [r9]
 800d64a:	fa1f fb82 	uxth.w	fp, r2
 800d64e:	b289      	uxth	r1, r1
 800d650:	fb0a 110b 	mla	r1, sl, fp, r1
 800d654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d658:	f8d9 2000 	ldr.w	r2, [r9]
 800d65c:	4461      	add	r1, ip
 800d65e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d662:	fb0a c20b 	mla	r2, sl, fp, ip
 800d666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d66a:	b289      	uxth	r1, r1
 800d66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d670:	4577      	cmp	r7, lr
 800d672:	f849 1b04 	str.w	r1, [r9], #4
 800d676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d67a:	d8e2      	bhi.n	800d642 <__multiply+0xb2>
 800d67c:	9a01      	ldr	r2, [sp, #4]
 800d67e:	f845 c002 	str.w	ip, [r5, r2]
 800d682:	9a03      	ldr	r2, [sp, #12]
 800d684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d688:	3304      	adds	r3, #4
 800d68a:	f1b9 0f00 	cmp.w	r9, #0
 800d68e:	d020      	beq.n	800d6d2 <__multiply+0x142>
 800d690:	6829      	ldr	r1, [r5, #0]
 800d692:	f104 0c14 	add.w	ip, r4, #20
 800d696:	46ae      	mov	lr, r5
 800d698:	f04f 0a00 	mov.w	sl, #0
 800d69c:	f8bc b000 	ldrh.w	fp, [ip]
 800d6a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6a4:	fb09 220b 	mla	r2, r9, fp, r2
 800d6a8:	4492      	add	sl, r2
 800d6aa:	b289      	uxth	r1, r1
 800d6ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6b0:	f84e 1b04 	str.w	r1, [lr], #4
 800d6b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6b8:	f8be 1000 	ldrh.w	r1, [lr]
 800d6bc:	0c12      	lsrs	r2, r2, #16
 800d6be:	fb09 1102 	mla	r1, r9, r2, r1
 800d6c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6c6:	4567      	cmp	r7, ip
 800d6c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6cc:	d8e6      	bhi.n	800d69c <__multiply+0x10c>
 800d6ce:	9a01      	ldr	r2, [sp, #4]
 800d6d0:	50a9      	str	r1, [r5, r2]
 800d6d2:	3504      	adds	r5, #4
 800d6d4:	e79a      	b.n	800d60c <__multiply+0x7c>
 800d6d6:	3e01      	subs	r6, #1
 800d6d8:	e79c      	b.n	800d614 <__multiply+0x84>
 800d6da:	bf00      	nop
 800d6dc:	0800e45b 	.word	0x0800e45b
 800d6e0:	0800e4cc 	.word	0x0800e4cc

0800d6e4 <__pow5mult>:
 800d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	4615      	mov	r5, r2
 800d6ea:	f012 0203 	ands.w	r2, r2, #3
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	460f      	mov	r7, r1
 800d6f2:	d007      	beq.n	800d704 <__pow5mult+0x20>
 800d6f4:	4c25      	ldr	r4, [pc, #148]	; (800d78c <__pow5mult+0xa8>)
 800d6f6:	3a01      	subs	r2, #1
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6fe:	f7ff fe9b 	bl	800d438 <__multadd>
 800d702:	4607      	mov	r7, r0
 800d704:	10ad      	asrs	r5, r5, #2
 800d706:	d03d      	beq.n	800d784 <__pow5mult+0xa0>
 800d708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d70a:	b97c      	cbnz	r4, 800d72c <__pow5mult+0x48>
 800d70c:	2010      	movs	r0, #16
 800d70e:	f7ff fe29 	bl	800d364 <malloc>
 800d712:	4602      	mov	r2, r0
 800d714:	6270      	str	r0, [r6, #36]	; 0x24
 800d716:	b928      	cbnz	r0, 800d724 <__pow5mult+0x40>
 800d718:	4b1d      	ldr	r3, [pc, #116]	; (800d790 <__pow5mult+0xac>)
 800d71a:	481e      	ldr	r0, [pc, #120]	; (800d794 <__pow5mult+0xb0>)
 800d71c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d720:	f000 fcaa 	bl	800e078 <__assert_func>
 800d724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d728:	6004      	str	r4, [r0, #0]
 800d72a:	60c4      	str	r4, [r0, #12]
 800d72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d734:	b94c      	cbnz	r4, 800d74a <__pow5mult+0x66>
 800d736:	f240 2171 	movw	r1, #625	; 0x271
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ff12 	bl	800d564 <__i2b>
 800d740:	2300      	movs	r3, #0
 800d742:	f8c8 0008 	str.w	r0, [r8, #8]
 800d746:	4604      	mov	r4, r0
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	f04f 0900 	mov.w	r9, #0
 800d74e:	07eb      	lsls	r3, r5, #31
 800d750:	d50a      	bpl.n	800d768 <__pow5mult+0x84>
 800d752:	4639      	mov	r1, r7
 800d754:	4622      	mov	r2, r4
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff1a 	bl	800d590 <__multiply>
 800d75c:	4639      	mov	r1, r7
 800d75e:	4680      	mov	r8, r0
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff fe47 	bl	800d3f4 <_Bfree>
 800d766:	4647      	mov	r7, r8
 800d768:	106d      	asrs	r5, r5, #1
 800d76a:	d00b      	beq.n	800d784 <__pow5mult+0xa0>
 800d76c:	6820      	ldr	r0, [r4, #0]
 800d76e:	b938      	cbnz	r0, 800d780 <__pow5mult+0x9c>
 800d770:	4622      	mov	r2, r4
 800d772:	4621      	mov	r1, r4
 800d774:	4630      	mov	r0, r6
 800d776:	f7ff ff0b 	bl	800d590 <__multiply>
 800d77a:	6020      	str	r0, [r4, #0]
 800d77c:	f8c0 9000 	str.w	r9, [r0]
 800d780:	4604      	mov	r4, r0
 800d782:	e7e4      	b.n	800d74e <__pow5mult+0x6a>
 800d784:	4638      	mov	r0, r7
 800d786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d78a:	bf00      	nop
 800d78c:	0800e618 	.word	0x0800e618
 800d790:	0800e3e9 	.word	0x0800e3e9
 800d794:	0800e4cc 	.word	0x0800e4cc

0800d798 <__lshift>:
 800d798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	6849      	ldr	r1, [r1, #4]
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7a6:	68a3      	ldr	r3, [r4, #8]
 800d7a8:	4607      	mov	r7, r0
 800d7aa:	4691      	mov	r9, r2
 800d7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7b0:	f108 0601 	add.w	r6, r8, #1
 800d7b4:	42b3      	cmp	r3, r6
 800d7b6:	db0b      	blt.n	800d7d0 <__lshift+0x38>
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	f7ff fddb 	bl	800d374 <_Balloc>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	b948      	cbnz	r0, 800d7d6 <__lshift+0x3e>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	4b2a      	ldr	r3, [pc, #168]	; (800d870 <__lshift+0xd8>)
 800d7c6:	482b      	ldr	r0, [pc, #172]	; (800d874 <__lshift+0xdc>)
 800d7c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7cc:	f000 fc54 	bl	800e078 <__assert_func>
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	e7ee      	b.n	800d7b4 <__lshift+0x1c>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f100 0114 	add.w	r1, r0, #20
 800d7dc:	f100 0210 	add.w	r2, r0, #16
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	4553      	cmp	r3, sl
 800d7e4:	db37      	blt.n	800d856 <__lshift+0xbe>
 800d7e6:	6920      	ldr	r0, [r4, #16]
 800d7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7ec:	f104 0314 	add.w	r3, r4, #20
 800d7f0:	f019 091f 	ands.w	r9, r9, #31
 800d7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7fc:	d02f      	beq.n	800d85e <__lshift+0xc6>
 800d7fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d802:	468a      	mov	sl, r1
 800d804:	f04f 0c00 	mov.w	ip, #0
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	fa02 f209 	lsl.w	r2, r2, r9
 800d80e:	ea42 020c 	orr.w	r2, r2, ip
 800d812:	f84a 2b04 	str.w	r2, [sl], #4
 800d816:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81a:	4298      	cmp	r0, r3
 800d81c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d820:	d8f2      	bhi.n	800d808 <__lshift+0x70>
 800d822:	1b03      	subs	r3, r0, r4
 800d824:	3b15      	subs	r3, #21
 800d826:	f023 0303 	bic.w	r3, r3, #3
 800d82a:	3304      	adds	r3, #4
 800d82c:	f104 0215 	add.w	r2, r4, #21
 800d830:	4290      	cmp	r0, r2
 800d832:	bf38      	it	cc
 800d834:	2304      	movcc	r3, #4
 800d836:	f841 c003 	str.w	ip, [r1, r3]
 800d83a:	f1bc 0f00 	cmp.w	ip, #0
 800d83e:	d001      	beq.n	800d844 <__lshift+0xac>
 800d840:	f108 0602 	add.w	r6, r8, #2
 800d844:	3e01      	subs	r6, #1
 800d846:	4638      	mov	r0, r7
 800d848:	612e      	str	r6, [r5, #16]
 800d84a:	4621      	mov	r1, r4
 800d84c:	f7ff fdd2 	bl	800d3f4 <_Bfree>
 800d850:	4628      	mov	r0, r5
 800d852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d856:	f842 0f04 	str.w	r0, [r2, #4]!
 800d85a:	3301      	adds	r3, #1
 800d85c:	e7c1      	b.n	800d7e2 <__lshift+0x4a>
 800d85e:	3904      	subs	r1, #4
 800d860:	f853 2b04 	ldr.w	r2, [r3], #4
 800d864:	f841 2f04 	str.w	r2, [r1, #4]!
 800d868:	4298      	cmp	r0, r3
 800d86a:	d8f9      	bhi.n	800d860 <__lshift+0xc8>
 800d86c:	e7ea      	b.n	800d844 <__lshift+0xac>
 800d86e:	bf00      	nop
 800d870:	0800e45b 	.word	0x0800e45b
 800d874:	0800e4cc 	.word	0x0800e4cc

0800d878 <__mcmp>:
 800d878:	b530      	push	{r4, r5, lr}
 800d87a:	6902      	ldr	r2, [r0, #16]
 800d87c:	690c      	ldr	r4, [r1, #16]
 800d87e:	1b12      	subs	r2, r2, r4
 800d880:	d10e      	bne.n	800d8a0 <__mcmp+0x28>
 800d882:	f100 0314 	add.w	r3, r0, #20
 800d886:	3114      	adds	r1, #20
 800d888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d88c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d898:	42a5      	cmp	r5, r4
 800d89a:	d003      	beq.n	800d8a4 <__mcmp+0x2c>
 800d89c:	d305      	bcc.n	800d8aa <__mcmp+0x32>
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	bd30      	pop	{r4, r5, pc}
 800d8a4:	4283      	cmp	r3, r0
 800d8a6:	d3f3      	bcc.n	800d890 <__mcmp+0x18>
 800d8a8:	e7fa      	b.n	800d8a0 <__mcmp+0x28>
 800d8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ae:	e7f7      	b.n	800d8a0 <__mcmp+0x28>

0800d8b0 <__mdiff>:
 800d8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	4690      	mov	r8, r2
 800d8be:	f7ff ffdb 	bl	800d878 <__mcmp>
 800d8c2:	1e05      	subs	r5, r0, #0
 800d8c4:	d110      	bne.n	800d8e8 <__mdiff+0x38>
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7ff fd53 	bl	800d374 <_Balloc>
 800d8ce:	b930      	cbnz	r0, 800d8de <__mdiff+0x2e>
 800d8d0:	4b3a      	ldr	r3, [pc, #232]	; (800d9bc <__mdiff+0x10c>)
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	f240 2132 	movw	r1, #562	; 0x232
 800d8d8:	4839      	ldr	r0, [pc, #228]	; (800d9c0 <__mdiff+0x110>)
 800d8da:	f000 fbcd 	bl	800e078 <__assert_func>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e8:	bfa4      	itt	ge
 800d8ea:	4643      	movge	r3, r8
 800d8ec:	46a0      	movge	r8, r4
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8f4:	bfa6      	itte	ge
 800d8f6:	461c      	movge	r4, r3
 800d8f8:	2500      	movge	r5, #0
 800d8fa:	2501      	movlt	r5, #1
 800d8fc:	f7ff fd3a 	bl	800d374 <_Balloc>
 800d900:	b920      	cbnz	r0, 800d90c <__mdiff+0x5c>
 800d902:	4b2e      	ldr	r3, [pc, #184]	; (800d9bc <__mdiff+0x10c>)
 800d904:	4602      	mov	r2, r0
 800d906:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d90a:	e7e5      	b.n	800d8d8 <__mdiff+0x28>
 800d90c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d910:	6926      	ldr	r6, [r4, #16]
 800d912:	60c5      	str	r5, [r0, #12]
 800d914:	f104 0914 	add.w	r9, r4, #20
 800d918:	f108 0514 	add.w	r5, r8, #20
 800d91c:	f100 0e14 	add.w	lr, r0, #20
 800d920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d928:	f108 0210 	add.w	r2, r8, #16
 800d92c:	46f2      	mov	sl, lr
 800d92e:	2100      	movs	r1, #0
 800d930:	f859 3b04 	ldr.w	r3, [r9], #4
 800d934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d938:	fa1f f883 	uxth.w	r8, r3
 800d93c:	fa11 f18b 	uxtah	r1, r1, fp
 800d940:	0c1b      	lsrs	r3, r3, #16
 800d942:	eba1 0808 	sub.w	r8, r1, r8
 800d946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d94a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d94e:	fa1f f888 	uxth.w	r8, r8
 800d952:	1419      	asrs	r1, r3, #16
 800d954:	454e      	cmp	r6, r9
 800d956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d95a:	f84a 3b04 	str.w	r3, [sl], #4
 800d95e:	d8e7      	bhi.n	800d930 <__mdiff+0x80>
 800d960:	1b33      	subs	r3, r6, r4
 800d962:	3b15      	subs	r3, #21
 800d964:	f023 0303 	bic.w	r3, r3, #3
 800d968:	3304      	adds	r3, #4
 800d96a:	3415      	adds	r4, #21
 800d96c:	42a6      	cmp	r6, r4
 800d96e:	bf38      	it	cc
 800d970:	2304      	movcc	r3, #4
 800d972:	441d      	add	r5, r3
 800d974:	4473      	add	r3, lr
 800d976:	469e      	mov	lr, r3
 800d978:	462e      	mov	r6, r5
 800d97a:	4566      	cmp	r6, ip
 800d97c:	d30e      	bcc.n	800d99c <__mdiff+0xec>
 800d97e:	f10c 0203 	add.w	r2, ip, #3
 800d982:	1b52      	subs	r2, r2, r5
 800d984:	f022 0203 	bic.w	r2, r2, #3
 800d988:	3d03      	subs	r5, #3
 800d98a:	45ac      	cmp	ip, r5
 800d98c:	bf38      	it	cc
 800d98e:	2200      	movcc	r2, #0
 800d990:	441a      	add	r2, r3
 800d992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d996:	b17b      	cbz	r3, 800d9b8 <__mdiff+0x108>
 800d998:	6107      	str	r7, [r0, #16]
 800d99a:	e7a3      	b.n	800d8e4 <__mdiff+0x34>
 800d99c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9a0:	fa11 f288 	uxtah	r2, r1, r8
 800d9a4:	1414      	asrs	r4, r2, #16
 800d9a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9aa:	b292      	uxth	r2, r2
 800d9ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9b0:	f84e 2b04 	str.w	r2, [lr], #4
 800d9b4:	1421      	asrs	r1, r4, #16
 800d9b6:	e7e0      	b.n	800d97a <__mdiff+0xca>
 800d9b8:	3f01      	subs	r7, #1
 800d9ba:	e7ea      	b.n	800d992 <__mdiff+0xe2>
 800d9bc:	0800e45b 	.word	0x0800e45b
 800d9c0:	0800e4cc 	.word	0x0800e4cc

0800d9c4 <__d2b>:
 800d9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9c8:	4689      	mov	r9, r1
 800d9ca:	2101      	movs	r1, #1
 800d9cc:	ec57 6b10 	vmov	r6, r7, d0
 800d9d0:	4690      	mov	r8, r2
 800d9d2:	f7ff fccf 	bl	800d374 <_Balloc>
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	b930      	cbnz	r0, 800d9e8 <__d2b+0x24>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4b25      	ldr	r3, [pc, #148]	; (800da74 <__d2b+0xb0>)
 800d9de:	4826      	ldr	r0, [pc, #152]	; (800da78 <__d2b+0xb4>)
 800d9e0:	f240 310a 	movw	r1, #778	; 0x30a
 800d9e4:	f000 fb48 	bl	800e078 <__assert_func>
 800d9e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d9ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d9f0:	bb35      	cbnz	r5, 800da40 <__d2b+0x7c>
 800d9f2:	2e00      	cmp	r6, #0
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	d028      	beq.n	800da4a <__d2b+0x86>
 800d9f8:	4668      	mov	r0, sp
 800d9fa:	9600      	str	r6, [sp, #0]
 800d9fc:	f7ff fd82 	bl	800d504 <__lo0bits>
 800da00:	9900      	ldr	r1, [sp, #0]
 800da02:	b300      	cbz	r0, 800da46 <__d2b+0x82>
 800da04:	9a01      	ldr	r2, [sp, #4]
 800da06:	f1c0 0320 	rsb	r3, r0, #32
 800da0a:	fa02 f303 	lsl.w	r3, r2, r3
 800da0e:	430b      	orrs	r3, r1
 800da10:	40c2      	lsrs	r2, r0
 800da12:	6163      	str	r3, [r4, #20]
 800da14:	9201      	str	r2, [sp, #4]
 800da16:	9b01      	ldr	r3, [sp, #4]
 800da18:	61a3      	str	r3, [r4, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bf14      	ite	ne
 800da1e:	2202      	movne	r2, #2
 800da20:	2201      	moveq	r2, #1
 800da22:	6122      	str	r2, [r4, #16]
 800da24:	b1d5      	cbz	r5, 800da5c <__d2b+0x98>
 800da26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da2a:	4405      	add	r5, r0
 800da2c:	f8c9 5000 	str.w	r5, [r9]
 800da30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da34:	f8c8 0000 	str.w	r0, [r8]
 800da38:	4620      	mov	r0, r4
 800da3a:	b003      	add	sp, #12
 800da3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da44:	e7d5      	b.n	800d9f2 <__d2b+0x2e>
 800da46:	6161      	str	r1, [r4, #20]
 800da48:	e7e5      	b.n	800da16 <__d2b+0x52>
 800da4a:	a801      	add	r0, sp, #4
 800da4c:	f7ff fd5a 	bl	800d504 <__lo0bits>
 800da50:	9b01      	ldr	r3, [sp, #4]
 800da52:	6163      	str	r3, [r4, #20]
 800da54:	2201      	movs	r2, #1
 800da56:	6122      	str	r2, [r4, #16]
 800da58:	3020      	adds	r0, #32
 800da5a:	e7e3      	b.n	800da24 <__d2b+0x60>
 800da5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da64:	f8c9 0000 	str.w	r0, [r9]
 800da68:	6918      	ldr	r0, [r3, #16]
 800da6a:	f7ff fd2b 	bl	800d4c4 <__hi0bits>
 800da6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da72:	e7df      	b.n	800da34 <__d2b+0x70>
 800da74:	0800e45b 	.word	0x0800e45b
 800da78:	0800e4cc 	.word	0x0800e4cc

0800da7c <_calloc_r>:
 800da7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da7e:	fba1 2402 	umull	r2, r4, r1, r2
 800da82:	b94c      	cbnz	r4, 800da98 <_calloc_r+0x1c>
 800da84:	4611      	mov	r1, r2
 800da86:	9201      	str	r2, [sp, #4]
 800da88:	f000 f87a 	bl	800db80 <_malloc_r>
 800da8c:	9a01      	ldr	r2, [sp, #4]
 800da8e:	4605      	mov	r5, r0
 800da90:	b930      	cbnz	r0, 800daa0 <_calloc_r+0x24>
 800da92:	4628      	mov	r0, r5
 800da94:	b003      	add	sp, #12
 800da96:	bd30      	pop	{r4, r5, pc}
 800da98:	220c      	movs	r2, #12
 800da9a:	6002      	str	r2, [r0, #0]
 800da9c:	2500      	movs	r5, #0
 800da9e:	e7f8      	b.n	800da92 <_calloc_r+0x16>
 800daa0:	4621      	mov	r1, r4
 800daa2:	f7fd fe5f 	bl	800b764 <memset>
 800daa6:	e7f4      	b.n	800da92 <_calloc_r+0x16>

0800daa8 <_free_r>:
 800daa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daaa:	2900      	cmp	r1, #0
 800daac:	d044      	beq.n	800db38 <_free_r+0x90>
 800daae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab2:	9001      	str	r0, [sp, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f1a1 0404 	sub.w	r4, r1, #4
 800daba:	bfb8      	it	lt
 800dabc:	18e4      	addlt	r4, r4, r3
 800dabe:	f000 fb61 	bl	800e184 <__malloc_lock>
 800dac2:	4a1e      	ldr	r2, [pc, #120]	; (800db3c <_free_r+0x94>)
 800dac4:	9801      	ldr	r0, [sp, #4]
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	b933      	cbnz	r3, 800dad8 <_free_r+0x30>
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	6014      	str	r4, [r2, #0]
 800dace:	b003      	add	sp, #12
 800dad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dad4:	f000 bb5c 	b.w	800e190 <__malloc_unlock>
 800dad8:	42a3      	cmp	r3, r4
 800dada:	d908      	bls.n	800daee <_free_r+0x46>
 800dadc:	6825      	ldr	r5, [r4, #0]
 800dade:	1961      	adds	r1, r4, r5
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf01      	itttt	eq
 800dae4:	6819      	ldreq	r1, [r3, #0]
 800dae6:	685b      	ldreq	r3, [r3, #4]
 800dae8:	1949      	addeq	r1, r1, r5
 800daea:	6021      	streq	r1, [r4, #0]
 800daec:	e7ed      	b.n	800daca <_free_r+0x22>
 800daee:	461a      	mov	r2, r3
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	b10b      	cbz	r3, 800daf8 <_free_r+0x50>
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	d9fa      	bls.n	800daee <_free_r+0x46>
 800daf8:	6811      	ldr	r1, [r2, #0]
 800dafa:	1855      	adds	r5, r2, r1
 800dafc:	42a5      	cmp	r5, r4
 800dafe:	d10b      	bne.n	800db18 <_free_r+0x70>
 800db00:	6824      	ldr	r4, [r4, #0]
 800db02:	4421      	add	r1, r4
 800db04:	1854      	adds	r4, r2, r1
 800db06:	42a3      	cmp	r3, r4
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	d1e0      	bne.n	800dace <_free_r+0x26>
 800db0c:	681c      	ldr	r4, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	6053      	str	r3, [r2, #4]
 800db12:	4421      	add	r1, r4
 800db14:	6011      	str	r1, [r2, #0]
 800db16:	e7da      	b.n	800dace <_free_r+0x26>
 800db18:	d902      	bls.n	800db20 <_free_r+0x78>
 800db1a:	230c      	movs	r3, #12
 800db1c:	6003      	str	r3, [r0, #0]
 800db1e:	e7d6      	b.n	800dace <_free_r+0x26>
 800db20:	6825      	ldr	r5, [r4, #0]
 800db22:	1961      	adds	r1, r4, r5
 800db24:	428b      	cmp	r3, r1
 800db26:	bf04      	itt	eq
 800db28:	6819      	ldreq	r1, [r3, #0]
 800db2a:	685b      	ldreq	r3, [r3, #4]
 800db2c:	6063      	str	r3, [r4, #4]
 800db2e:	bf04      	itt	eq
 800db30:	1949      	addeq	r1, r1, r5
 800db32:	6021      	streq	r1, [r4, #0]
 800db34:	6054      	str	r4, [r2, #4]
 800db36:	e7ca      	b.n	800dace <_free_r+0x26>
 800db38:	b003      	add	sp, #12
 800db3a:	bd30      	pop	{r4, r5, pc}
 800db3c:	2000c378 	.word	0x2000c378

0800db40 <sbrk_aligned>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	4e0e      	ldr	r6, [pc, #56]	; (800db7c <sbrk_aligned+0x3c>)
 800db44:	460c      	mov	r4, r1
 800db46:	6831      	ldr	r1, [r6, #0]
 800db48:	4605      	mov	r5, r0
 800db4a:	b911      	cbnz	r1, 800db52 <sbrk_aligned+0x12>
 800db4c:	f000 fa2e 	bl	800dfac <_sbrk_r>
 800db50:	6030      	str	r0, [r6, #0]
 800db52:	4621      	mov	r1, r4
 800db54:	4628      	mov	r0, r5
 800db56:	f000 fa29 	bl	800dfac <_sbrk_r>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d00a      	beq.n	800db74 <sbrk_aligned+0x34>
 800db5e:	1cc4      	adds	r4, r0, #3
 800db60:	f024 0403 	bic.w	r4, r4, #3
 800db64:	42a0      	cmp	r0, r4
 800db66:	d007      	beq.n	800db78 <sbrk_aligned+0x38>
 800db68:	1a21      	subs	r1, r4, r0
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 fa1e 	bl	800dfac <_sbrk_r>
 800db70:	3001      	adds	r0, #1
 800db72:	d101      	bne.n	800db78 <sbrk_aligned+0x38>
 800db74:	f04f 34ff 	mov.w	r4, #4294967295
 800db78:	4620      	mov	r0, r4
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	2000c37c 	.word	0x2000c37c

0800db80 <_malloc_r>:
 800db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	1ccd      	adds	r5, r1, #3
 800db86:	f025 0503 	bic.w	r5, r5, #3
 800db8a:	3508      	adds	r5, #8
 800db8c:	2d0c      	cmp	r5, #12
 800db8e:	bf38      	it	cc
 800db90:	250c      	movcc	r5, #12
 800db92:	2d00      	cmp	r5, #0
 800db94:	4607      	mov	r7, r0
 800db96:	db01      	blt.n	800db9c <_malloc_r+0x1c>
 800db98:	42a9      	cmp	r1, r5
 800db9a:	d905      	bls.n	800dba8 <_malloc_r+0x28>
 800db9c:	230c      	movs	r3, #12
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	2600      	movs	r6, #0
 800dba2:	4630      	mov	r0, r6
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	4e2e      	ldr	r6, [pc, #184]	; (800dc64 <_malloc_r+0xe4>)
 800dbaa:	f000 faeb 	bl	800e184 <__malloc_lock>
 800dbae:	6833      	ldr	r3, [r6, #0]
 800dbb0:	461c      	mov	r4, r3
 800dbb2:	bb34      	cbnz	r4, 800dc02 <_malloc_r+0x82>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f7ff ffc2 	bl	800db40 <sbrk_aligned>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	d14d      	bne.n	800dc5e <_malloc_r+0xde>
 800dbc2:	6834      	ldr	r4, [r6, #0]
 800dbc4:	4626      	mov	r6, r4
 800dbc6:	2e00      	cmp	r6, #0
 800dbc8:	d140      	bne.n	800dc4c <_malloc_r+0xcc>
 800dbca:	6823      	ldr	r3, [r4, #0]
 800dbcc:	4631      	mov	r1, r6
 800dbce:	4638      	mov	r0, r7
 800dbd0:	eb04 0803 	add.w	r8, r4, r3
 800dbd4:	f000 f9ea 	bl	800dfac <_sbrk_r>
 800dbd8:	4580      	cmp	r8, r0
 800dbda:	d13a      	bne.n	800dc52 <_malloc_r+0xd2>
 800dbdc:	6821      	ldr	r1, [r4, #0]
 800dbde:	3503      	adds	r5, #3
 800dbe0:	1a6d      	subs	r5, r5, r1
 800dbe2:	f025 0503 	bic.w	r5, r5, #3
 800dbe6:	3508      	adds	r5, #8
 800dbe8:	2d0c      	cmp	r5, #12
 800dbea:	bf38      	it	cc
 800dbec:	250c      	movcc	r5, #12
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4638      	mov	r0, r7
 800dbf2:	f7ff ffa5 	bl	800db40 <sbrk_aligned>
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	d02b      	beq.n	800dc52 <_malloc_r+0xd2>
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	442b      	add	r3, r5
 800dbfe:	6023      	str	r3, [r4, #0]
 800dc00:	e00e      	b.n	800dc20 <_malloc_r+0xa0>
 800dc02:	6822      	ldr	r2, [r4, #0]
 800dc04:	1b52      	subs	r2, r2, r5
 800dc06:	d41e      	bmi.n	800dc46 <_malloc_r+0xc6>
 800dc08:	2a0b      	cmp	r2, #11
 800dc0a:	d916      	bls.n	800dc3a <_malloc_r+0xba>
 800dc0c:	1961      	adds	r1, r4, r5
 800dc0e:	42a3      	cmp	r3, r4
 800dc10:	6025      	str	r5, [r4, #0]
 800dc12:	bf18      	it	ne
 800dc14:	6059      	strne	r1, [r3, #4]
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	bf08      	it	eq
 800dc1a:	6031      	streq	r1, [r6, #0]
 800dc1c:	5162      	str	r2, [r4, r5]
 800dc1e:	604b      	str	r3, [r1, #4]
 800dc20:	4638      	mov	r0, r7
 800dc22:	f104 060b 	add.w	r6, r4, #11
 800dc26:	f000 fab3 	bl	800e190 <__malloc_unlock>
 800dc2a:	f026 0607 	bic.w	r6, r6, #7
 800dc2e:	1d23      	adds	r3, r4, #4
 800dc30:	1af2      	subs	r2, r6, r3
 800dc32:	d0b6      	beq.n	800dba2 <_malloc_r+0x22>
 800dc34:	1b9b      	subs	r3, r3, r6
 800dc36:	50a3      	str	r3, [r4, r2]
 800dc38:	e7b3      	b.n	800dba2 <_malloc_r+0x22>
 800dc3a:	6862      	ldr	r2, [r4, #4]
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	bf0c      	ite	eq
 800dc40:	6032      	streq	r2, [r6, #0]
 800dc42:	605a      	strne	r2, [r3, #4]
 800dc44:	e7ec      	b.n	800dc20 <_malloc_r+0xa0>
 800dc46:	4623      	mov	r3, r4
 800dc48:	6864      	ldr	r4, [r4, #4]
 800dc4a:	e7b2      	b.n	800dbb2 <_malloc_r+0x32>
 800dc4c:	4634      	mov	r4, r6
 800dc4e:	6876      	ldr	r6, [r6, #4]
 800dc50:	e7b9      	b.n	800dbc6 <_malloc_r+0x46>
 800dc52:	230c      	movs	r3, #12
 800dc54:	603b      	str	r3, [r7, #0]
 800dc56:	4638      	mov	r0, r7
 800dc58:	f000 fa9a 	bl	800e190 <__malloc_unlock>
 800dc5c:	e7a1      	b.n	800dba2 <_malloc_r+0x22>
 800dc5e:	6025      	str	r5, [r4, #0]
 800dc60:	e7de      	b.n	800dc20 <_malloc_r+0xa0>
 800dc62:	bf00      	nop
 800dc64:	2000c378 	.word	0x2000c378

0800dc68 <__sfputc_r>:
 800dc68:	6893      	ldr	r3, [r2, #8]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	b410      	push	{r4}
 800dc70:	6093      	str	r3, [r2, #8]
 800dc72:	da08      	bge.n	800dc86 <__sfputc_r+0x1e>
 800dc74:	6994      	ldr	r4, [r2, #24]
 800dc76:	42a3      	cmp	r3, r4
 800dc78:	db01      	blt.n	800dc7e <__sfputc_r+0x16>
 800dc7a:	290a      	cmp	r1, #10
 800dc7c:	d103      	bne.n	800dc86 <__sfputc_r+0x1e>
 800dc7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc82:	f7fe ba0f 	b.w	800c0a4 <__swbuf_r>
 800dc86:	6813      	ldr	r3, [r2, #0]
 800dc88:	1c58      	adds	r0, r3, #1
 800dc8a:	6010      	str	r0, [r2, #0]
 800dc8c:	7019      	strb	r1, [r3, #0]
 800dc8e:	4608      	mov	r0, r1
 800dc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc94:	4770      	bx	lr

0800dc96 <__sfputs_r>:
 800dc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc98:	4606      	mov	r6, r0
 800dc9a:	460f      	mov	r7, r1
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	18d5      	adds	r5, r2, r3
 800dca0:	42ac      	cmp	r4, r5
 800dca2:	d101      	bne.n	800dca8 <__sfputs_r+0x12>
 800dca4:	2000      	movs	r0, #0
 800dca6:	e007      	b.n	800dcb8 <__sfputs_r+0x22>
 800dca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcac:	463a      	mov	r2, r7
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f7ff ffda 	bl	800dc68 <__sfputc_r>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d1f3      	bne.n	800dca0 <__sfputs_r+0xa>
 800dcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcbc <_vfiprintf_r>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	b09d      	sub	sp, #116	; 0x74
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	4698      	mov	r8, r3
 800dcc8:	4606      	mov	r6, r0
 800dcca:	b118      	cbz	r0, 800dcd4 <_vfiprintf_r+0x18>
 800dccc:	6983      	ldr	r3, [r0, #24]
 800dcce:	b90b      	cbnz	r3, 800dcd4 <_vfiprintf_r+0x18>
 800dcd0:	f7ff fa3e 	bl	800d150 <__sinit>
 800dcd4:	4b89      	ldr	r3, [pc, #548]	; (800defc <_vfiprintf_r+0x240>)
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	d11b      	bne.n	800dd12 <_vfiprintf_r+0x56>
 800dcda:	6875      	ldr	r5, [r6, #4]
 800dcdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcde:	07d9      	lsls	r1, r3, #31
 800dce0:	d405      	bmi.n	800dcee <_vfiprintf_r+0x32>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	059a      	lsls	r2, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_vfiprintf_r+0x32>
 800dce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcea:	f7ff fad4 	bl	800d296 <__retarget_lock_acquire_recursive>
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	071b      	lsls	r3, r3, #28
 800dcf2:	d501      	bpl.n	800dcf8 <_vfiprintf_r+0x3c>
 800dcf4:	692b      	ldr	r3, [r5, #16]
 800dcf6:	b9eb      	cbnz	r3, 800dd34 <_vfiprintf_r+0x78>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f7fe fa24 	bl	800c148 <__swsetup_r>
 800dd00:	b1c0      	cbz	r0, 800dd34 <_vfiprintf_r+0x78>
 800dd02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd04:	07dc      	lsls	r4, r3, #31
 800dd06:	d50e      	bpl.n	800dd26 <_vfiprintf_r+0x6a>
 800dd08:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0c:	b01d      	add	sp, #116	; 0x74
 800dd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd12:	4b7b      	ldr	r3, [pc, #492]	; (800df00 <_vfiprintf_r+0x244>)
 800dd14:	429d      	cmp	r5, r3
 800dd16:	d101      	bne.n	800dd1c <_vfiprintf_r+0x60>
 800dd18:	68b5      	ldr	r5, [r6, #8]
 800dd1a:	e7df      	b.n	800dcdc <_vfiprintf_r+0x20>
 800dd1c:	4b79      	ldr	r3, [pc, #484]	; (800df04 <_vfiprintf_r+0x248>)
 800dd1e:	429d      	cmp	r5, r3
 800dd20:	bf08      	it	eq
 800dd22:	68f5      	ldreq	r5, [r6, #12]
 800dd24:	e7da      	b.n	800dcdc <_vfiprintf_r+0x20>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	0598      	lsls	r0, r3, #22
 800dd2a:	d4ed      	bmi.n	800dd08 <_vfiprintf_r+0x4c>
 800dd2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd2e:	f7ff fab3 	bl	800d298 <__retarget_lock_release_recursive>
 800dd32:	e7e9      	b.n	800dd08 <_vfiprintf_r+0x4c>
 800dd34:	2300      	movs	r3, #0
 800dd36:	9309      	str	r3, [sp, #36]	; 0x24
 800dd38:	2320      	movs	r3, #32
 800dd3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd42:	2330      	movs	r3, #48	; 0x30
 800dd44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df08 <_vfiprintf_r+0x24c>
 800dd48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd4c:	f04f 0901 	mov.w	r9, #1
 800dd50:	4623      	mov	r3, r4
 800dd52:	469a      	mov	sl, r3
 800dd54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd58:	b10a      	cbz	r2, 800dd5e <_vfiprintf_r+0xa2>
 800dd5a:	2a25      	cmp	r2, #37	; 0x25
 800dd5c:	d1f9      	bne.n	800dd52 <_vfiprintf_r+0x96>
 800dd5e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd62:	d00b      	beq.n	800dd7c <_vfiprintf_r+0xc0>
 800dd64:	465b      	mov	r3, fp
 800dd66:	4622      	mov	r2, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f7ff ff93 	bl	800dc96 <__sfputs_r>
 800dd70:	3001      	adds	r0, #1
 800dd72:	f000 80aa 	beq.w	800deca <_vfiprintf_r+0x20e>
 800dd76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd78:	445a      	add	r2, fp
 800dd7a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80a2 	beq.w	800deca <_vfiprintf_r+0x20e>
 800dd86:	2300      	movs	r3, #0
 800dd88:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd90:	f10a 0a01 	add.w	sl, sl, #1
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	9307      	str	r3, [sp, #28]
 800dd98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd9c:	931a      	str	r3, [sp, #104]	; 0x68
 800dd9e:	4654      	mov	r4, sl
 800dda0:	2205      	movs	r2, #5
 800dda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda6:	4858      	ldr	r0, [pc, #352]	; (800df08 <_vfiprintf_r+0x24c>)
 800dda8:	f7f2 fa42 	bl	8000230 <memchr>
 800ddac:	9a04      	ldr	r2, [sp, #16]
 800ddae:	b9d8      	cbnz	r0, 800dde8 <_vfiprintf_r+0x12c>
 800ddb0:	06d1      	lsls	r1, r2, #27
 800ddb2:	bf44      	itt	mi
 800ddb4:	2320      	movmi	r3, #32
 800ddb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddba:	0713      	lsls	r3, r2, #28
 800ddbc:	bf44      	itt	mi
 800ddbe:	232b      	movmi	r3, #43	; 0x2b
 800ddc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddca:	d015      	beq.n	800ddf8 <_vfiprintf_r+0x13c>
 800ddcc:	9a07      	ldr	r2, [sp, #28]
 800ddce:	4654      	mov	r4, sl
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f04f 0c0a 	mov.w	ip, #10
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dddc:	3b30      	subs	r3, #48	; 0x30
 800ddde:	2b09      	cmp	r3, #9
 800dde0:	d94e      	bls.n	800de80 <_vfiprintf_r+0x1c4>
 800dde2:	b1b0      	cbz	r0, 800de12 <_vfiprintf_r+0x156>
 800dde4:	9207      	str	r2, [sp, #28]
 800dde6:	e014      	b.n	800de12 <_vfiprintf_r+0x156>
 800dde8:	eba0 0308 	sub.w	r3, r0, r8
 800ddec:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	46a2      	mov	sl, r4
 800ddf6:	e7d2      	b.n	800dd9e <_vfiprintf_r+0xe2>
 800ddf8:	9b03      	ldr	r3, [sp, #12]
 800ddfa:	1d19      	adds	r1, r3, #4
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	9103      	str	r1, [sp, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	bfbb      	ittet	lt
 800de04:	425b      	neglt	r3, r3
 800de06:	f042 0202 	orrlt.w	r2, r2, #2
 800de0a:	9307      	strge	r3, [sp, #28]
 800de0c:	9307      	strlt	r3, [sp, #28]
 800de0e:	bfb8      	it	lt
 800de10:	9204      	strlt	r2, [sp, #16]
 800de12:	7823      	ldrb	r3, [r4, #0]
 800de14:	2b2e      	cmp	r3, #46	; 0x2e
 800de16:	d10c      	bne.n	800de32 <_vfiprintf_r+0x176>
 800de18:	7863      	ldrb	r3, [r4, #1]
 800de1a:	2b2a      	cmp	r3, #42	; 0x2a
 800de1c:	d135      	bne.n	800de8a <_vfiprintf_r+0x1ce>
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	1d1a      	adds	r2, r3, #4
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	9203      	str	r2, [sp, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	bfb8      	it	lt
 800de2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de2e:	3402      	adds	r4, #2
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df18 <_vfiprintf_r+0x25c>
 800de36:	7821      	ldrb	r1, [r4, #0]
 800de38:	2203      	movs	r2, #3
 800de3a:	4650      	mov	r0, sl
 800de3c:	f7f2 f9f8 	bl	8000230 <memchr>
 800de40:	b140      	cbz	r0, 800de54 <_vfiprintf_r+0x198>
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	eba0 000a 	sub.w	r0, r0, sl
 800de48:	fa03 f000 	lsl.w	r0, r3, r0
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	4303      	orrs	r3, r0
 800de50:	3401      	adds	r4, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de58:	482c      	ldr	r0, [pc, #176]	; (800df0c <_vfiprintf_r+0x250>)
 800de5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de5e:	2206      	movs	r2, #6
 800de60:	f7f2 f9e6 	bl	8000230 <memchr>
 800de64:	2800      	cmp	r0, #0
 800de66:	d03f      	beq.n	800dee8 <_vfiprintf_r+0x22c>
 800de68:	4b29      	ldr	r3, [pc, #164]	; (800df10 <_vfiprintf_r+0x254>)
 800de6a:	bb1b      	cbnz	r3, 800deb4 <_vfiprintf_r+0x1f8>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	3307      	adds	r3, #7
 800de70:	f023 0307 	bic.w	r3, r3, #7
 800de74:	3308      	adds	r3, #8
 800de76:	9303      	str	r3, [sp, #12]
 800de78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7a:	443b      	add	r3, r7
 800de7c:	9309      	str	r3, [sp, #36]	; 0x24
 800de7e:	e767      	b.n	800dd50 <_vfiprintf_r+0x94>
 800de80:	fb0c 3202 	mla	r2, ip, r2, r3
 800de84:	460c      	mov	r4, r1
 800de86:	2001      	movs	r0, #1
 800de88:	e7a5      	b.n	800ddd6 <_vfiprintf_r+0x11a>
 800de8a:	2300      	movs	r3, #0
 800de8c:	3401      	adds	r4, #1
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	4619      	mov	r1, r3
 800de92:	f04f 0c0a 	mov.w	ip, #10
 800de96:	4620      	mov	r0, r4
 800de98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de9c:	3a30      	subs	r2, #48	; 0x30
 800de9e:	2a09      	cmp	r2, #9
 800dea0:	d903      	bls.n	800deaa <_vfiprintf_r+0x1ee>
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d0c5      	beq.n	800de32 <_vfiprintf_r+0x176>
 800dea6:	9105      	str	r1, [sp, #20]
 800dea8:	e7c3      	b.n	800de32 <_vfiprintf_r+0x176>
 800deaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800deae:	4604      	mov	r4, r0
 800deb0:	2301      	movs	r3, #1
 800deb2:	e7f0      	b.n	800de96 <_vfiprintf_r+0x1da>
 800deb4:	ab03      	add	r3, sp, #12
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	462a      	mov	r2, r5
 800deba:	4b16      	ldr	r3, [pc, #88]	; (800df14 <_vfiprintf_r+0x258>)
 800debc:	a904      	add	r1, sp, #16
 800debe:	4630      	mov	r0, r6
 800dec0:	f7fd fcf8 	bl	800b8b4 <_printf_float>
 800dec4:	4607      	mov	r7, r0
 800dec6:	1c78      	adds	r0, r7, #1
 800dec8:	d1d6      	bne.n	800de78 <_vfiprintf_r+0x1bc>
 800deca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800decc:	07d9      	lsls	r1, r3, #31
 800dece:	d405      	bmi.n	800dedc <_vfiprintf_r+0x220>
 800ded0:	89ab      	ldrh	r3, [r5, #12]
 800ded2:	059a      	lsls	r2, r3, #22
 800ded4:	d402      	bmi.n	800dedc <_vfiprintf_r+0x220>
 800ded6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ded8:	f7ff f9de 	bl	800d298 <__retarget_lock_release_recursive>
 800dedc:	89ab      	ldrh	r3, [r5, #12]
 800dede:	065b      	lsls	r3, r3, #25
 800dee0:	f53f af12 	bmi.w	800dd08 <_vfiprintf_r+0x4c>
 800dee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dee6:	e711      	b.n	800dd0c <_vfiprintf_r+0x50>
 800dee8:	ab03      	add	r3, sp, #12
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	462a      	mov	r2, r5
 800deee:	4b09      	ldr	r3, [pc, #36]	; (800df14 <_vfiprintf_r+0x258>)
 800def0:	a904      	add	r1, sp, #16
 800def2:	4630      	mov	r0, r6
 800def4:	f7fd ff82 	bl	800bdfc <_printf_i>
 800def8:	e7e4      	b.n	800dec4 <_vfiprintf_r+0x208>
 800defa:	bf00      	nop
 800defc:	0800e48c 	.word	0x0800e48c
 800df00:	0800e4ac 	.word	0x0800e4ac
 800df04:	0800e46c 	.word	0x0800e46c
 800df08:	0800e624 	.word	0x0800e624
 800df0c:	0800e62e 	.word	0x0800e62e
 800df10:	0800b8b5 	.word	0x0800b8b5
 800df14:	0800dc97 	.word	0x0800dc97
 800df18:	0800e62a 	.word	0x0800e62a

0800df1c <_putc_r>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	460d      	mov	r5, r1
 800df20:	4614      	mov	r4, r2
 800df22:	4606      	mov	r6, r0
 800df24:	b118      	cbz	r0, 800df2e <_putc_r+0x12>
 800df26:	6983      	ldr	r3, [r0, #24]
 800df28:	b90b      	cbnz	r3, 800df2e <_putc_r+0x12>
 800df2a:	f7ff f911 	bl	800d150 <__sinit>
 800df2e:	4b1c      	ldr	r3, [pc, #112]	; (800dfa0 <_putc_r+0x84>)
 800df30:	429c      	cmp	r4, r3
 800df32:	d124      	bne.n	800df7e <_putc_r+0x62>
 800df34:	6874      	ldr	r4, [r6, #4]
 800df36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df38:	07d8      	lsls	r0, r3, #31
 800df3a:	d405      	bmi.n	800df48 <_putc_r+0x2c>
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	0599      	lsls	r1, r3, #22
 800df40:	d402      	bmi.n	800df48 <_putc_r+0x2c>
 800df42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df44:	f7ff f9a7 	bl	800d296 <__retarget_lock_acquire_recursive>
 800df48:	68a3      	ldr	r3, [r4, #8]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	60a3      	str	r3, [r4, #8]
 800df50:	da05      	bge.n	800df5e <_putc_r+0x42>
 800df52:	69a2      	ldr	r2, [r4, #24]
 800df54:	4293      	cmp	r3, r2
 800df56:	db1c      	blt.n	800df92 <_putc_r+0x76>
 800df58:	b2eb      	uxtb	r3, r5
 800df5a:	2b0a      	cmp	r3, #10
 800df5c:	d019      	beq.n	800df92 <_putc_r+0x76>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	6022      	str	r2, [r4, #0]
 800df64:	701d      	strb	r5, [r3, #0]
 800df66:	b2ed      	uxtb	r5, r5
 800df68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df6a:	07da      	lsls	r2, r3, #31
 800df6c:	d405      	bmi.n	800df7a <_putc_r+0x5e>
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	059b      	lsls	r3, r3, #22
 800df72:	d402      	bmi.n	800df7a <_putc_r+0x5e>
 800df74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df76:	f7ff f98f 	bl	800d298 <__retarget_lock_release_recursive>
 800df7a:	4628      	mov	r0, r5
 800df7c:	bd70      	pop	{r4, r5, r6, pc}
 800df7e:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <_putc_r+0x88>)
 800df80:	429c      	cmp	r4, r3
 800df82:	d101      	bne.n	800df88 <_putc_r+0x6c>
 800df84:	68b4      	ldr	r4, [r6, #8]
 800df86:	e7d6      	b.n	800df36 <_putc_r+0x1a>
 800df88:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <_putc_r+0x8c>)
 800df8a:	429c      	cmp	r4, r3
 800df8c:	bf08      	it	eq
 800df8e:	68f4      	ldreq	r4, [r6, #12]
 800df90:	e7d1      	b.n	800df36 <_putc_r+0x1a>
 800df92:	4629      	mov	r1, r5
 800df94:	4622      	mov	r2, r4
 800df96:	4630      	mov	r0, r6
 800df98:	f7fe f884 	bl	800c0a4 <__swbuf_r>
 800df9c:	4605      	mov	r5, r0
 800df9e:	e7e3      	b.n	800df68 <_putc_r+0x4c>
 800dfa0:	0800e48c 	.word	0x0800e48c
 800dfa4:	0800e4ac 	.word	0x0800e4ac
 800dfa8:	0800e46c 	.word	0x0800e46c

0800dfac <_sbrk_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4d06      	ldr	r5, [pc, #24]	; (800dfc8 <_sbrk_r+0x1c>)
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	4608      	mov	r0, r1
 800dfb6:	602b      	str	r3, [r5, #0]
 800dfb8:	f7f5 fd58 	bl	8003a6c <_sbrk>
 800dfbc:	1c43      	adds	r3, r0, #1
 800dfbe:	d102      	bne.n	800dfc6 <_sbrk_r+0x1a>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	b103      	cbz	r3, 800dfc6 <_sbrk_r+0x1a>
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	2000c380 	.word	0x2000c380

0800dfcc <__sread>:
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	460c      	mov	r4, r1
 800dfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd4:	f000 f8e2 	bl	800e19c <_read_r>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	bfab      	itete	ge
 800dfdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dfde:	89a3      	ldrhlt	r3, [r4, #12]
 800dfe0:	181b      	addge	r3, r3, r0
 800dfe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dfe6:	bfac      	ite	ge
 800dfe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dfea:	81a3      	strhlt	r3, [r4, #12]
 800dfec:	bd10      	pop	{r4, pc}

0800dfee <__swrite>:
 800dfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff2:	461f      	mov	r7, r3
 800dff4:	898b      	ldrh	r3, [r1, #12]
 800dff6:	05db      	lsls	r3, r3, #23
 800dff8:	4605      	mov	r5, r0
 800dffa:	460c      	mov	r4, r1
 800dffc:	4616      	mov	r6, r2
 800dffe:	d505      	bpl.n	800e00c <__swrite+0x1e>
 800e000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e004:	2302      	movs	r3, #2
 800e006:	2200      	movs	r2, #0
 800e008:	f000 f898 	bl	800e13c <_lseek_r>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e016:	81a3      	strh	r3, [r4, #12]
 800e018:	4632      	mov	r2, r6
 800e01a:	463b      	mov	r3, r7
 800e01c:	4628      	mov	r0, r5
 800e01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e022:	f000 b817 	b.w	800e054 <_write_r>

0800e026 <__sseek>:
 800e026:	b510      	push	{r4, lr}
 800e028:	460c      	mov	r4, r1
 800e02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e02e:	f000 f885 	bl	800e13c <_lseek_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	bf15      	itete	ne
 800e038:	6560      	strne	r0, [r4, #84]	; 0x54
 800e03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e042:	81a3      	strheq	r3, [r4, #12]
 800e044:	bf18      	it	ne
 800e046:	81a3      	strhne	r3, [r4, #12]
 800e048:	bd10      	pop	{r4, pc}

0800e04a <__sclose>:
 800e04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e04e:	f000 b831 	b.w	800e0b4 <_close_r>
	...

0800e054 <_write_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d07      	ldr	r5, [pc, #28]	; (800e074 <_write_r+0x20>)
 800e058:	4604      	mov	r4, r0
 800e05a:	4608      	mov	r0, r1
 800e05c:	4611      	mov	r1, r2
 800e05e:	2200      	movs	r2, #0
 800e060:	602a      	str	r2, [r5, #0]
 800e062:	461a      	mov	r2, r3
 800e064:	f7f5 fcae 	bl	80039c4 <_write>
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	d102      	bne.n	800e072 <_write_r+0x1e>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	b103      	cbz	r3, 800e072 <_write_r+0x1e>
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	bd38      	pop	{r3, r4, r5, pc}
 800e074:	2000c380 	.word	0x2000c380

0800e078 <__assert_func>:
 800e078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07a:	4614      	mov	r4, r2
 800e07c:	461a      	mov	r2, r3
 800e07e:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <__assert_func+0x2c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4605      	mov	r5, r0
 800e084:	68d8      	ldr	r0, [r3, #12]
 800e086:	b14c      	cbz	r4, 800e09c <__assert_func+0x24>
 800e088:	4b07      	ldr	r3, [pc, #28]	; (800e0a8 <__assert_func+0x30>)
 800e08a:	9100      	str	r1, [sp, #0]
 800e08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e090:	4906      	ldr	r1, [pc, #24]	; (800e0ac <__assert_func+0x34>)
 800e092:	462b      	mov	r3, r5
 800e094:	f000 f81e 	bl	800e0d4 <fiprintf>
 800e098:	f000 f89f 	bl	800e1da <abort>
 800e09c:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <__assert_func+0x38>)
 800e09e:	461c      	mov	r4, r3
 800e0a0:	e7f3      	b.n	800e08a <__assert_func+0x12>
 800e0a2:	bf00      	nop
 800e0a4:	2000002c 	.word	0x2000002c
 800e0a8:	0800e635 	.word	0x0800e635
 800e0ac:	0800e642 	.word	0x0800e642
 800e0b0:	0800e670 	.word	0x0800e670

0800e0b4 <_close_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d06      	ldr	r5, [pc, #24]	; (800e0d0 <_close_r+0x1c>)
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4608      	mov	r0, r1
 800e0be:	602b      	str	r3, [r5, #0]
 800e0c0:	f7f5 fca0 	bl	8003a04 <_close>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_close_r+0x1a>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_close_r+0x1a>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	2000c380 	.word	0x2000c380

0800e0d4 <fiprintf>:
 800e0d4:	b40e      	push	{r1, r2, r3}
 800e0d6:	b503      	push	{r0, r1, lr}
 800e0d8:	4601      	mov	r1, r0
 800e0da:	ab03      	add	r3, sp, #12
 800e0dc:	4805      	ldr	r0, [pc, #20]	; (800e0f4 <fiprintf+0x20>)
 800e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e2:	6800      	ldr	r0, [r0, #0]
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	f7ff fde9 	bl	800dcbc <_vfiprintf_r>
 800e0ea:	b002      	add	sp, #8
 800e0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0f0:	b003      	add	sp, #12
 800e0f2:	4770      	bx	lr
 800e0f4:	2000002c 	.word	0x2000002c

0800e0f8 <_fstat_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	4d07      	ldr	r5, [pc, #28]	; (800e118 <_fstat_r+0x20>)
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4604      	mov	r4, r0
 800e100:	4608      	mov	r0, r1
 800e102:	4611      	mov	r1, r2
 800e104:	602b      	str	r3, [r5, #0]
 800e106:	f7f5 fc89 	bl	8003a1c <_fstat>
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	d102      	bne.n	800e114 <_fstat_r+0x1c>
 800e10e:	682b      	ldr	r3, [r5, #0]
 800e110:	b103      	cbz	r3, 800e114 <_fstat_r+0x1c>
 800e112:	6023      	str	r3, [r4, #0]
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	bf00      	nop
 800e118:	2000c380 	.word	0x2000c380

0800e11c <_isatty_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4d06      	ldr	r5, [pc, #24]	; (800e138 <_isatty_r+0x1c>)
 800e120:	2300      	movs	r3, #0
 800e122:	4604      	mov	r4, r0
 800e124:	4608      	mov	r0, r1
 800e126:	602b      	str	r3, [r5, #0]
 800e128:	f7f5 fc88 	bl	8003a3c <_isatty>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_isatty_r+0x1a>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_isatty_r+0x1a>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	2000c380 	.word	0x2000c380

0800e13c <_lseek_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d07      	ldr	r5, [pc, #28]	; (800e15c <_lseek_r+0x20>)
 800e140:	4604      	mov	r4, r0
 800e142:	4608      	mov	r0, r1
 800e144:	4611      	mov	r1, r2
 800e146:	2200      	movs	r2, #0
 800e148:	602a      	str	r2, [r5, #0]
 800e14a:	461a      	mov	r2, r3
 800e14c:	f7f5 fc81 	bl	8003a52 <_lseek>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_lseek_r+0x1e>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	b103      	cbz	r3, 800e15a <_lseek_r+0x1e>
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	2000c380 	.word	0x2000c380

0800e160 <__ascii_mbtowc>:
 800e160:	b082      	sub	sp, #8
 800e162:	b901      	cbnz	r1, 800e166 <__ascii_mbtowc+0x6>
 800e164:	a901      	add	r1, sp, #4
 800e166:	b142      	cbz	r2, 800e17a <__ascii_mbtowc+0x1a>
 800e168:	b14b      	cbz	r3, 800e17e <__ascii_mbtowc+0x1e>
 800e16a:	7813      	ldrb	r3, [r2, #0]
 800e16c:	600b      	str	r3, [r1, #0]
 800e16e:	7812      	ldrb	r2, [r2, #0]
 800e170:	1e10      	subs	r0, r2, #0
 800e172:	bf18      	it	ne
 800e174:	2001      	movne	r0, #1
 800e176:	b002      	add	sp, #8
 800e178:	4770      	bx	lr
 800e17a:	4610      	mov	r0, r2
 800e17c:	e7fb      	b.n	800e176 <__ascii_mbtowc+0x16>
 800e17e:	f06f 0001 	mvn.w	r0, #1
 800e182:	e7f8      	b.n	800e176 <__ascii_mbtowc+0x16>

0800e184 <__malloc_lock>:
 800e184:	4801      	ldr	r0, [pc, #4]	; (800e18c <__malloc_lock+0x8>)
 800e186:	f7ff b886 	b.w	800d296 <__retarget_lock_acquire_recursive>
 800e18a:	bf00      	nop
 800e18c:	2000c374 	.word	0x2000c374

0800e190 <__malloc_unlock>:
 800e190:	4801      	ldr	r0, [pc, #4]	; (800e198 <__malloc_unlock+0x8>)
 800e192:	f7ff b881 	b.w	800d298 <__retarget_lock_release_recursive>
 800e196:	bf00      	nop
 800e198:	2000c374 	.word	0x2000c374

0800e19c <_read_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	4d07      	ldr	r5, [pc, #28]	; (800e1bc <_read_r+0x20>)
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	4608      	mov	r0, r1
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	602a      	str	r2, [r5, #0]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	f7f5 fbed 	bl	800398a <_read>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d102      	bne.n	800e1ba <_read_r+0x1e>
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	b103      	cbz	r3, 800e1ba <_read_r+0x1e>
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}
 800e1bc:	2000c380 	.word	0x2000c380

0800e1c0 <__ascii_wctomb>:
 800e1c0:	b149      	cbz	r1, 800e1d6 <__ascii_wctomb+0x16>
 800e1c2:	2aff      	cmp	r2, #255	; 0xff
 800e1c4:	bf85      	ittet	hi
 800e1c6:	238a      	movhi	r3, #138	; 0x8a
 800e1c8:	6003      	strhi	r3, [r0, #0]
 800e1ca:	700a      	strbls	r2, [r1, #0]
 800e1cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e1d0:	bf98      	it	ls
 800e1d2:	2001      	movls	r0, #1
 800e1d4:	4770      	bx	lr
 800e1d6:	4608      	mov	r0, r1
 800e1d8:	4770      	bx	lr

0800e1da <abort>:
 800e1da:	b508      	push	{r3, lr}
 800e1dc:	2006      	movs	r0, #6
 800e1de:	f000 f82b 	bl	800e238 <raise>
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	f7f5 fbc7 	bl	8003976 <_exit>

0800e1e8 <_raise_r>:
 800e1e8:	291f      	cmp	r1, #31
 800e1ea:	b538      	push	{r3, r4, r5, lr}
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	d904      	bls.n	800e1fc <_raise_r+0x14>
 800e1f2:	2316      	movs	r3, #22
 800e1f4:	6003      	str	r3, [r0, #0]
 800e1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fa:	bd38      	pop	{r3, r4, r5, pc}
 800e1fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1fe:	b112      	cbz	r2, 800e206 <_raise_r+0x1e>
 800e200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e204:	b94b      	cbnz	r3, 800e21a <_raise_r+0x32>
 800e206:	4620      	mov	r0, r4
 800e208:	f000 f830 	bl	800e26c <_getpid_r>
 800e20c:	462a      	mov	r2, r5
 800e20e:	4601      	mov	r1, r0
 800e210:	4620      	mov	r0, r4
 800e212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e216:	f000 b817 	b.w	800e248 <_kill_r>
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d00a      	beq.n	800e234 <_raise_r+0x4c>
 800e21e:	1c59      	adds	r1, r3, #1
 800e220:	d103      	bne.n	800e22a <_raise_r+0x42>
 800e222:	2316      	movs	r3, #22
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	2001      	movs	r0, #1
 800e228:	e7e7      	b.n	800e1fa <_raise_r+0x12>
 800e22a:	2400      	movs	r4, #0
 800e22c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e230:	4628      	mov	r0, r5
 800e232:	4798      	blx	r3
 800e234:	2000      	movs	r0, #0
 800e236:	e7e0      	b.n	800e1fa <_raise_r+0x12>

0800e238 <raise>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <raise+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f7ff bfd3 	b.w	800e1e8 <_raise_r>
 800e242:	bf00      	nop
 800e244:	2000002c 	.word	0x2000002c

0800e248 <_kill_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4d07      	ldr	r5, [pc, #28]	; (800e268 <_kill_r+0x20>)
 800e24c:	2300      	movs	r3, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	4611      	mov	r1, r2
 800e254:	602b      	str	r3, [r5, #0]
 800e256:	f7f5 fb7e 	bl	8003956 <_kill>
 800e25a:	1c43      	adds	r3, r0, #1
 800e25c:	d102      	bne.n	800e264 <_kill_r+0x1c>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	b103      	cbz	r3, 800e264 <_kill_r+0x1c>
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	bd38      	pop	{r3, r4, r5, pc}
 800e266:	bf00      	nop
 800e268:	2000c380 	.word	0x2000c380

0800e26c <_getpid_r>:
 800e26c:	f7f5 bb6b 	b.w	8003946 <_getpid>

0800e270 <_init>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr

0800e27c <_fini>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr
